
ENO_ROC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08015200  08015200  00000200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a224  080153c0  080153c0  000003c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000474c  0803f5e8  0803f5e8  0002a5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000016e4  08043d34  08043d34  0002ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000160  08045418  08045418  00030418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 001700d8  08045578  08045578  00030578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 000006f4  081b5650  081b5650  001a0650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  081b5d44  081b5d44  001a19b4  2**0
                  CONTENTS
  8 .ARM          00000008  081b5d44  081b5d44  001a0d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  081b5d4c  081b5d4c  001a19b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  081b5d4c  081b5d4c  001a0d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000008  081b5d60  081b5d60  001a0d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         000009b4  20000000  081b5d68  001a1000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000b2b8  200009b4  081b671c  001a19b4  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  2000bc6c  081b671c  001a1c6c  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  001a19b4  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  2000dc70  2000dc70  001a1c70  2**2
                  ALLOC
 17 .debug_info   0017a885  00000000  00000000  001a19e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0002e5ad  00000000  00000000  0031c269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0005307f  00000000  00000000  0034a816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000071c0  00000000  00000000  0039d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 0000aaed  00000000  00000000  003a4a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0004f104  00000000  00000000  003af545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   000ce1ff  00000000  00000000  003fe649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00169bf9  00000000  00000000  004cc848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      000000c2  00000000  00000000  00636441  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00013b04  00000000  00000000  00636504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 0000006c  00000000  00000000  0064a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080153c0 <__do_global_dtors_aux>:
 80153c0:	b510      	push	{r4, lr}
 80153c2:	4c05      	ldr	r4, [pc, #20]	@ (80153d8 <__do_global_dtors_aux+0x18>)
 80153c4:	7823      	ldrb	r3, [r4, #0]
 80153c6:	b933      	cbnz	r3, 80153d6 <__do_global_dtors_aux+0x16>
 80153c8:	4b04      	ldr	r3, [pc, #16]	@ (80153dc <__do_global_dtors_aux+0x1c>)
 80153ca:	b113      	cbz	r3, 80153d2 <__do_global_dtors_aux+0x12>
 80153cc:	4804      	ldr	r0, [pc, #16]	@ (80153e0 <__do_global_dtors_aux+0x20>)
 80153ce:	f3af 8000 	nop.w
 80153d2:	2301      	movs	r3, #1
 80153d4:	7023      	strb	r3, [r4, #0]
 80153d6:	bd10      	pop	{r4, pc}
 80153d8:	200009b4 	.word	0x200009b4
 80153dc:	00000000 	.word	0x00000000
 80153e0:	0803f5cc 	.word	0x0803f5cc

080153e4 <frame_dummy>:
 80153e4:	b508      	push	{r3, lr}
 80153e6:	4b03      	ldr	r3, [pc, #12]	@ (80153f4 <frame_dummy+0x10>)
 80153e8:	b11b      	cbz	r3, 80153f2 <frame_dummy+0xe>
 80153ea:	4903      	ldr	r1, [pc, #12]	@ (80153f8 <frame_dummy+0x14>)
 80153ec:	4803      	ldr	r0, [pc, #12]	@ (80153fc <frame_dummy+0x18>)
 80153ee:	f3af 8000 	nop.w
 80153f2:	bd08      	pop	{r3, pc}
 80153f4:	00000000 	.word	0x00000000
 80153f8:	200009b8 	.word	0x200009b8
 80153fc:	0803f5cc 	.word	0x0803f5cc

08015400 <strcmp>:
 8015400:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015408:	2a01      	cmp	r2, #1
 801540a:	bf28      	it	cs
 801540c:	429a      	cmpcs	r2, r3
 801540e:	d0f7      	beq.n	8015400 <strcmp>
 8015410:	1ad0      	subs	r0, r2, r3
 8015412:	4770      	bx	lr
	...

08015420 <memchr>:
 8015420:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8015424:	2a10      	cmp	r2, #16
 8015426:	db2b      	blt.n	8015480 <memchr+0x60>
 8015428:	f010 0f07 	tst.w	r0, #7
 801542c:	d008      	beq.n	8015440 <memchr+0x20>
 801542e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015432:	3a01      	subs	r2, #1
 8015434:	428b      	cmp	r3, r1
 8015436:	d02d      	beq.n	8015494 <memchr+0x74>
 8015438:	f010 0f07 	tst.w	r0, #7
 801543c:	b342      	cbz	r2, 8015490 <memchr+0x70>
 801543e:	d1f6      	bne.n	801542e <memchr+0xe>
 8015440:	b4f0      	push	{r4, r5, r6, r7}
 8015442:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8015446:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801544a:	f022 0407 	bic.w	r4, r2, #7
 801544e:	f07f 0700 	mvns.w	r7, #0
 8015452:	2300      	movs	r3, #0
 8015454:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8015458:	3c08      	subs	r4, #8
 801545a:	ea85 0501 	eor.w	r5, r5, r1
 801545e:	ea86 0601 	eor.w	r6, r6, r1
 8015462:	fa85 f547 	uadd8	r5, r5, r7
 8015466:	faa3 f587 	sel	r5, r3, r7
 801546a:	fa86 f647 	uadd8	r6, r6, r7
 801546e:	faa5 f687 	sel	r6, r5, r7
 8015472:	b98e      	cbnz	r6, 8015498 <memchr+0x78>
 8015474:	d1ee      	bne.n	8015454 <memchr+0x34>
 8015476:	bcf0      	pop	{r4, r5, r6, r7}
 8015478:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801547c:	f002 0207 	and.w	r2, r2, #7
 8015480:	b132      	cbz	r2, 8015490 <memchr+0x70>
 8015482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015486:	3a01      	subs	r2, #1
 8015488:	ea83 0301 	eor.w	r3, r3, r1
 801548c:	b113      	cbz	r3, 8015494 <memchr+0x74>
 801548e:	d1f8      	bne.n	8015482 <memchr+0x62>
 8015490:	2000      	movs	r0, #0
 8015492:	4770      	bx	lr
 8015494:	3801      	subs	r0, #1
 8015496:	4770      	bx	lr
 8015498:	2d00      	cmp	r5, #0
 801549a:	bf06      	itte	eq
 801549c:	4635      	moveq	r5, r6
 801549e:	3803      	subeq	r0, #3
 80154a0:	3807      	subne	r0, #7
 80154a2:	f015 0f01 	tst.w	r5, #1
 80154a6:	d107      	bne.n	80154b8 <memchr+0x98>
 80154a8:	3001      	adds	r0, #1
 80154aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80154ae:	bf02      	ittt	eq
 80154b0:	3001      	addeq	r0, #1
 80154b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80154b6:	3001      	addeq	r0, #1
 80154b8:	bcf0      	pop	{r4, r5, r6, r7}
 80154ba:	3801      	subs	r0, #1
 80154bc:	4770      	bx	lr
 80154be:	bf00      	nop

080154c0 <strlen>:
 80154c0:	4603      	mov	r3, r0
 80154c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154c6:	2a00      	cmp	r2, #0
 80154c8:	d1fb      	bne.n	80154c2 <strlen+0x2>
 80154ca:	1a18      	subs	r0, r3, r0
 80154cc:	3801      	subs	r0, #1
 80154ce:	4770      	bx	lr

080154d0 <__aeabi_drsub>:
 80154d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80154d4:	e002      	b.n	80154dc <__adddf3>
 80154d6:	bf00      	nop

080154d8 <__aeabi_dsub>:
 80154d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080154dc <__adddf3>:
 80154dc:	b530      	push	{r4, r5, lr}
 80154de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80154e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80154e6:	ea94 0f05 	teq	r4, r5
 80154ea:	bf08      	it	eq
 80154ec:	ea90 0f02 	teqeq	r0, r2
 80154f0:	bf1f      	itttt	ne
 80154f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80154f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80154fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80154fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8015502:	f000 80e2 	beq.w	80156ca <__adddf3+0x1ee>
 8015506:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801550a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801550e:	bfb8      	it	lt
 8015510:	426d      	neglt	r5, r5
 8015512:	dd0c      	ble.n	801552e <__adddf3+0x52>
 8015514:	442c      	add	r4, r5
 8015516:	ea80 0202 	eor.w	r2, r0, r2
 801551a:	ea81 0303 	eor.w	r3, r1, r3
 801551e:	ea82 0000 	eor.w	r0, r2, r0
 8015522:	ea83 0101 	eor.w	r1, r3, r1
 8015526:	ea80 0202 	eor.w	r2, r0, r2
 801552a:	ea81 0303 	eor.w	r3, r1, r3
 801552e:	2d36      	cmp	r5, #54	@ 0x36
 8015530:	bf88      	it	hi
 8015532:	bd30      	pophi	{r4, r5, pc}
 8015534:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8015538:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801553c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8015540:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8015544:	d002      	beq.n	801554c <__adddf3+0x70>
 8015546:	4240      	negs	r0, r0
 8015548:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801554c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8015550:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8015554:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8015558:	d002      	beq.n	8015560 <__adddf3+0x84>
 801555a:	4252      	negs	r2, r2
 801555c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8015560:	ea94 0f05 	teq	r4, r5
 8015564:	f000 80a7 	beq.w	80156b6 <__adddf3+0x1da>
 8015568:	f1a4 0401 	sub.w	r4, r4, #1
 801556c:	f1d5 0e20 	rsbs	lr, r5, #32
 8015570:	db0d      	blt.n	801558e <__adddf3+0xb2>
 8015572:	fa02 fc0e 	lsl.w	ip, r2, lr
 8015576:	fa22 f205 	lsr.w	r2, r2, r5
 801557a:	1880      	adds	r0, r0, r2
 801557c:	f141 0100 	adc.w	r1, r1, #0
 8015580:	fa03 f20e 	lsl.w	r2, r3, lr
 8015584:	1880      	adds	r0, r0, r2
 8015586:	fa43 f305 	asr.w	r3, r3, r5
 801558a:	4159      	adcs	r1, r3
 801558c:	e00e      	b.n	80155ac <__adddf3+0xd0>
 801558e:	f1a5 0520 	sub.w	r5, r5, #32
 8015592:	f10e 0e20 	add.w	lr, lr, #32
 8015596:	2a01      	cmp	r2, #1
 8015598:	fa03 fc0e 	lsl.w	ip, r3, lr
 801559c:	bf28      	it	cs
 801559e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80155a2:	fa43 f305 	asr.w	r3, r3, r5
 80155a6:	18c0      	adds	r0, r0, r3
 80155a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80155ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80155b0:	d507      	bpl.n	80155c2 <__adddf3+0xe6>
 80155b2:	f04f 0e00 	mov.w	lr, #0
 80155b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80155ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80155be:	eb6e 0101 	sbc.w	r1, lr, r1
 80155c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80155c6:	d31b      	bcc.n	8015600 <__adddf3+0x124>
 80155c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80155cc:	d30c      	bcc.n	80155e8 <__adddf3+0x10c>
 80155ce:	0849      	lsrs	r1, r1, #1
 80155d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80155d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80155d8:	f104 0401 	add.w	r4, r4, #1
 80155dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80155e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80155e4:	f080 809a 	bcs.w	801571c <__adddf3+0x240>
 80155e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80155ec:	bf08      	it	eq
 80155ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80155f2:	f150 0000 	adcs.w	r0, r0, #0
 80155f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80155fa:	ea41 0105 	orr.w	r1, r1, r5
 80155fe:	bd30      	pop	{r4, r5, pc}
 8015600:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8015604:	4140      	adcs	r0, r0
 8015606:	eb41 0101 	adc.w	r1, r1, r1
 801560a:	3c01      	subs	r4, #1
 801560c:	bf28      	it	cs
 801560e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8015612:	d2e9      	bcs.n	80155e8 <__adddf3+0x10c>
 8015614:	f091 0f00 	teq	r1, #0
 8015618:	bf04      	itt	eq
 801561a:	4601      	moveq	r1, r0
 801561c:	2000      	moveq	r0, #0
 801561e:	fab1 f381 	clz	r3, r1
 8015622:	bf08      	it	eq
 8015624:	3320      	addeq	r3, #32
 8015626:	f1a3 030b 	sub.w	r3, r3, #11
 801562a:	f1b3 0220 	subs.w	r2, r3, #32
 801562e:	da0c      	bge.n	801564a <__adddf3+0x16e>
 8015630:	320c      	adds	r2, #12
 8015632:	dd08      	ble.n	8015646 <__adddf3+0x16a>
 8015634:	f102 0c14 	add.w	ip, r2, #20
 8015638:	f1c2 020c 	rsb	r2, r2, #12
 801563c:	fa01 f00c 	lsl.w	r0, r1, ip
 8015640:	fa21 f102 	lsr.w	r1, r1, r2
 8015644:	e00c      	b.n	8015660 <__adddf3+0x184>
 8015646:	f102 0214 	add.w	r2, r2, #20
 801564a:	bfd8      	it	le
 801564c:	f1c2 0c20 	rsble	ip, r2, #32
 8015650:	fa01 f102 	lsl.w	r1, r1, r2
 8015654:	fa20 fc0c 	lsr.w	ip, r0, ip
 8015658:	bfdc      	itt	le
 801565a:	ea41 010c 	orrle.w	r1, r1, ip
 801565e:	4090      	lslle	r0, r2
 8015660:	1ae4      	subs	r4, r4, r3
 8015662:	bfa2      	ittt	ge
 8015664:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8015668:	4329      	orrge	r1, r5
 801566a:	bd30      	popge	{r4, r5, pc}
 801566c:	ea6f 0404 	mvn.w	r4, r4
 8015670:	3c1f      	subs	r4, #31
 8015672:	da1c      	bge.n	80156ae <__adddf3+0x1d2>
 8015674:	340c      	adds	r4, #12
 8015676:	dc0e      	bgt.n	8015696 <__adddf3+0x1ba>
 8015678:	f104 0414 	add.w	r4, r4, #20
 801567c:	f1c4 0220 	rsb	r2, r4, #32
 8015680:	fa20 f004 	lsr.w	r0, r0, r4
 8015684:	fa01 f302 	lsl.w	r3, r1, r2
 8015688:	ea40 0003 	orr.w	r0, r0, r3
 801568c:	fa21 f304 	lsr.w	r3, r1, r4
 8015690:	ea45 0103 	orr.w	r1, r5, r3
 8015694:	bd30      	pop	{r4, r5, pc}
 8015696:	f1c4 040c 	rsb	r4, r4, #12
 801569a:	f1c4 0220 	rsb	r2, r4, #32
 801569e:	fa20 f002 	lsr.w	r0, r0, r2
 80156a2:	fa01 f304 	lsl.w	r3, r1, r4
 80156a6:	ea40 0003 	orr.w	r0, r0, r3
 80156aa:	4629      	mov	r1, r5
 80156ac:	bd30      	pop	{r4, r5, pc}
 80156ae:	fa21 f004 	lsr.w	r0, r1, r4
 80156b2:	4629      	mov	r1, r5
 80156b4:	bd30      	pop	{r4, r5, pc}
 80156b6:	f094 0f00 	teq	r4, #0
 80156ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80156be:	bf06      	itte	eq
 80156c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80156c4:	3401      	addeq	r4, #1
 80156c6:	3d01      	subne	r5, #1
 80156c8:	e74e      	b.n	8015568 <__adddf3+0x8c>
 80156ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80156ce:	bf18      	it	ne
 80156d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80156d4:	d029      	beq.n	801572a <__adddf3+0x24e>
 80156d6:	ea94 0f05 	teq	r4, r5
 80156da:	bf08      	it	eq
 80156dc:	ea90 0f02 	teqeq	r0, r2
 80156e0:	d005      	beq.n	80156ee <__adddf3+0x212>
 80156e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80156e6:	bf04      	itt	eq
 80156e8:	4619      	moveq	r1, r3
 80156ea:	4610      	moveq	r0, r2
 80156ec:	bd30      	pop	{r4, r5, pc}
 80156ee:	ea91 0f03 	teq	r1, r3
 80156f2:	bf1e      	ittt	ne
 80156f4:	2100      	movne	r1, #0
 80156f6:	2000      	movne	r0, #0
 80156f8:	bd30      	popne	{r4, r5, pc}
 80156fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80156fe:	d105      	bne.n	801570c <__adddf3+0x230>
 8015700:	0040      	lsls	r0, r0, #1
 8015702:	4149      	adcs	r1, r1
 8015704:	bf28      	it	cs
 8015706:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 801570a:	bd30      	pop	{r4, r5, pc}
 801570c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8015710:	bf3c      	itt	cc
 8015712:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8015716:	bd30      	popcc	{r4, r5, pc}
 8015718:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 801571c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8015720:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015724:	f04f 0000 	mov.w	r0, #0
 8015728:	bd30      	pop	{r4, r5, pc}
 801572a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801572e:	bf1a      	itte	ne
 8015730:	4619      	movne	r1, r3
 8015732:	4610      	movne	r0, r2
 8015734:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8015738:	bf1c      	itt	ne
 801573a:	460b      	movne	r3, r1
 801573c:	4602      	movne	r2, r0
 801573e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8015742:	bf06      	itte	eq
 8015744:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8015748:	ea91 0f03 	teqeq	r1, r3
 801574c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8015750:	bd30      	pop	{r4, r5, pc}
 8015752:	bf00      	nop

08015754 <__aeabi_ui2d>:
 8015754:	f090 0f00 	teq	r0, #0
 8015758:	bf04      	itt	eq
 801575a:	2100      	moveq	r1, #0
 801575c:	4770      	bxeq	lr
 801575e:	b530      	push	{r4, r5, lr}
 8015760:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8015764:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8015768:	f04f 0500 	mov.w	r5, #0
 801576c:	f04f 0100 	mov.w	r1, #0
 8015770:	e750      	b.n	8015614 <__adddf3+0x138>
 8015772:	bf00      	nop

08015774 <__aeabi_i2d>:
 8015774:	f090 0f00 	teq	r0, #0
 8015778:	bf04      	itt	eq
 801577a:	2100      	moveq	r1, #0
 801577c:	4770      	bxeq	lr
 801577e:	b530      	push	{r4, r5, lr}
 8015780:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8015784:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8015788:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801578c:	bf48      	it	mi
 801578e:	4240      	negmi	r0, r0
 8015790:	f04f 0100 	mov.w	r1, #0
 8015794:	e73e      	b.n	8015614 <__adddf3+0x138>
 8015796:	bf00      	nop

08015798 <__aeabi_f2d>:
 8015798:	0042      	lsls	r2, r0, #1
 801579a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801579e:	ea4f 0131 	mov.w	r1, r1, rrx
 80157a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80157a6:	bf1f      	itttt	ne
 80157a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80157ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80157b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80157b4:	4770      	bxne	lr
 80157b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80157ba:	bf08      	it	eq
 80157bc:	4770      	bxeq	lr
 80157be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80157c2:	bf04      	itt	eq
 80157c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80157c8:	4770      	bxeq	lr
 80157ca:	b530      	push	{r4, r5, lr}
 80157cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80157d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80157d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80157d8:	e71c      	b.n	8015614 <__adddf3+0x138>
 80157da:	bf00      	nop

080157dc <__aeabi_ul2d>:
 80157dc:	ea50 0201 	orrs.w	r2, r0, r1
 80157e0:	bf08      	it	eq
 80157e2:	4770      	bxeq	lr
 80157e4:	b530      	push	{r4, r5, lr}
 80157e6:	f04f 0500 	mov.w	r5, #0
 80157ea:	e00a      	b.n	8015802 <__aeabi_l2d+0x16>

080157ec <__aeabi_l2d>:
 80157ec:	ea50 0201 	orrs.w	r2, r0, r1
 80157f0:	bf08      	it	eq
 80157f2:	4770      	bxeq	lr
 80157f4:	b530      	push	{r4, r5, lr}
 80157f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80157fa:	d502      	bpl.n	8015802 <__aeabi_l2d+0x16>
 80157fc:	4240      	negs	r0, r0
 80157fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8015802:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8015806:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 801580a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801580e:	f43f aed8 	beq.w	80155c2 <__adddf3+0xe6>
 8015812:	f04f 0203 	mov.w	r2, #3
 8015816:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801581a:	bf18      	it	ne
 801581c:	3203      	addne	r2, #3
 801581e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8015822:	bf18      	it	ne
 8015824:	3203      	addne	r2, #3
 8015826:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801582a:	f1c2 0320 	rsb	r3, r2, #32
 801582e:	fa00 fc03 	lsl.w	ip, r0, r3
 8015832:	fa20 f002 	lsr.w	r0, r0, r2
 8015836:	fa01 fe03 	lsl.w	lr, r1, r3
 801583a:	ea40 000e 	orr.w	r0, r0, lr
 801583e:	fa21 f102 	lsr.w	r1, r1, r2
 8015842:	4414      	add	r4, r2
 8015844:	e6bd      	b.n	80155c2 <__adddf3+0xe6>
 8015846:	bf00      	nop

08015848 <__aeabi_dmul>:
 8015848:	b570      	push	{r4, r5, r6, lr}
 801584a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801584e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8015852:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8015856:	bf1d      	ittte	ne
 8015858:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801585c:	ea94 0f0c 	teqne	r4, ip
 8015860:	ea95 0f0c 	teqne	r5, ip
 8015864:	f000 f8de 	bleq	8015a24 <__aeabi_dmul+0x1dc>
 8015868:	442c      	add	r4, r5
 801586a:	ea81 0603 	eor.w	r6, r1, r3
 801586e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8015872:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8015876:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801587a:	bf18      	it	ne
 801587c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8015880:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8015884:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015888:	d038      	beq.n	80158fc <__aeabi_dmul+0xb4>
 801588a:	fba0 ce02 	umull	ip, lr, r0, r2
 801588e:	f04f 0500 	mov.w	r5, #0
 8015892:	fbe1 e502 	umlal	lr, r5, r1, r2
 8015896:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801589a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801589e:	f04f 0600 	mov.w	r6, #0
 80158a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80158a6:	f09c 0f00 	teq	ip, #0
 80158aa:	bf18      	it	ne
 80158ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80158b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80158b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80158b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80158bc:	d204      	bcs.n	80158c8 <__aeabi_dmul+0x80>
 80158be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80158c2:	416d      	adcs	r5, r5
 80158c4:	eb46 0606 	adc.w	r6, r6, r6
 80158c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80158cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80158d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80158d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80158d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80158dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80158e0:	bf88      	it	hi
 80158e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80158e6:	d81e      	bhi.n	8015926 <__aeabi_dmul+0xde>
 80158e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80158ec:	bf08      	it	eq
 80158ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80158f2:	f150 0000 	adcs.w	r0, r0, #0
 80158f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80158fa:	bd70      	pop	{r4, r5, r6, pc}
 80158fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8015900:	ea46 0101 	orr.w	r1, r6, r1
 8015904:	ea40 0002 	orr.w	r0, r0, r2
 8015908:	ea81 0103 	eor.w	r1, r1, r3
 801590c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8015910:	bfc2      	ittt	gt
 8015912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8015916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801591a:	bd70      	popgt	{r4, r5, r6, pc}
 801591c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8015920:	f04f 0e00 	mov.w	lr, #0
 8015924:	3c01      	subs	r4, #1
 8015926:	f300 80ab 	bgt.w	8015a80 <__aeabi_dmul+0x238>
 801592a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801592e:	bfde      	ittt	le
 8015930:	2000      	movle	r0, #0
 8015932:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8015936:	bd70      	pople	{r4, r5, r6, pc}
 8015938:	f1c4 0400 	rsb	r4, r4, #0
 801593c:	3c20      	subs	r4, #32
 801593e:	da35      	bge.n	80159ac <__aeabi_dmul+0x164>
 8015940:	340c      	adds	r4, #12
 8015942:	dc1b      	bgt.n	801597c <__aeabi_dmul+0x134>
 8015944:	f104 0414 	add.w	r4, r4, #20
 8015948:	f1c4 0520 	rsb	r5, r4, #32
 801594c:	fa00 f305 	lsl.w	r3, r0, r5
 8015950:	fa20 f004 	lsr.w	r0, r0, r4
 8015954:	fa01 f205 	lsl.w	r2, r1, r5
 8015958:	ea40 0002 	orr.w	r0, r0, r2
 801595c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8015960:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8015964:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8015968:	fa21 f604 	lsr.w	r6, r1, r4
 801596c:	eb42 0106 	adc.w	r1, r2, r6
 8015970:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8015974:	bf08      	it	eq
 8015976:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801597a:	bd70      	pop	{r4, r5, r6, pc}
 801597c:	f1c4 040c 	rsb	r4, r4, #12
 8015980:	f1c4 0520 	rsb	r5, r4, #32
 8015984:	fa00 f304 	lsl.w	r3, r0, r4
 8015988:	fa20 f005 	lsr.w	r0, r0, r5
 801598c:	fa01 f204 	lsl.w	r2, r1, r4
 8015990:	ea40 0002 	orr.w	r0, r0, r2
 8015994:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8015998:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801599c:	f141 0100 	adc.w	r1, r1, #0
 80159a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80159a4:	bf08      	it	eq
 80159a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80159aa:	bd70      	pop	{r4, r5, r6, pc}
 80159ac:	f1c4 0520 	rsb	r5, r4, #32
 80159b0:	fa00 f205 	lsl.w	r2, r0, r5
 80159b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80159b8:	fa20 f304 	lsr.w	r3, r0, r4
 80159bc:	fa01 f205 	lsl.w	r2, r1, r5
 80159c0:	ea43 0302 	orr.w	r3, r3, r2
 80159c4:	fa21 f004 	lsr.w	r0, r1, r4
 80159c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80159cc:	fa21 f204 	lsr.w	r2, r1, r4
 80159d0:	ea20 0002 	bic.w	r0, r0, r2
 80159d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80159d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80159dc:	bf08      	it	eq
 80159de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80159e2:	bd70      	pop	{r4, r5, r6, pc}
 80159e4:	f094 0f00 	teq	r4, #0
 80159e8:	d10f      	bne.n	8015a0a <__aeabi_dmul+0x1c2>
 80159ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80159ee:	0040      	lsls	r0, r0, #1
 80159f0:	eb41 0101 	adc.w	r1, r1, r1
 80159f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80159f8:	bf08      	it	eq
 80159fa:	3c01      	subeq	r4, #1
 80159fc:	d0f7      	beq.n	80159ee <__aeabi_dmul+0x1a6>
 80159fe:	ea41 0106 	orr.w	r1, r1, r6
 8015a02:	f095 0f00 	teq	r5, #0
 8015a06:	bf18      	it	ne
 8015a08:	4770      	bxne	lr
 8015a0a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8015a0e:	0052      	lsls	r2, r2, #1
 8015a10:	eb43 0303 	adc.w	r3, r3, r3
 8015a14:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8015a18:	bf08      	it	eq
 8015a1a:	3d01      	subeq	r5, #1
 8015a1c:	d0f7      	beq.n	8015a0e <__aeabi_dmul+0x1c6>
 8015a1e:	ea43 0306 	orr.w	r3, r3, r6
 8015a22:	4770      	bx	lr
 8015a24:	ea94 0f0c 	teq	r4, ip
 8015a28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8015a2c:	bf18      	it	ne
 8015a2e:	ea95 0f0c 	teqne	r5, ip
 8015a32:	d00c      	beq.n	8015a4e <__aeabi_dmul+0x206>
 8015a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8015a38:	bf18      	it	ne
 8015a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8015a3e:	d1d1      	bne.n	80159e4 <__aeabi_dmul+0x19c>
 8015a40:	ea81 0103 	eor.w	r1, r1, r3
 8015a44:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8015a48:	f04f 0000 	mov.w	r0, #0
 8015a4c:	bd70      	pop	{r4, r5, r6, pc}
 8015a4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8015a52:	bf06      	itte	eq
 8015a54:	4610      	moveq	r0, r2
 8015a56:	4619      	moveq	r1, r3
 8015a58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8015a5c:	d019      	beq.n	8015a92 <__aeabi_dmul+0x24a>
 8015a5e:	ea94 0f0c 	teq	r4, ip
 8015a62:	d102      	bne.n	8015a6a <__aeabi_dmul+0x222>
 8015a64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8015a68:	d113      	bne.n	8015a92 <__aeabi_dmul+0x24a>
 8015a6a:	ea95 0f0c 	teq	r5, ip
 8015a6e:	d105      	bne.n	8015a7c <__aeabi_dmul+0x234>
 8015a70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8015a74:	bf1c      	itt	ne
 8015a76:	4610      	movne	r0, r2
 8015a78:	4619      	movne	r1, r3
 8015a7a:	d10a      	bne.n	8015a92 <__aeabi_dmul+0x24a>
 8015a7c:	ea81 0103 	eor.w	r1, r1, r3
 8015a80:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8015a84:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8015a88:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015a8c:	f04f 0000 	mov.w	r0, #0
 8015a90:	bd70      	pop	{r4, r5, r6, pc}
 8015a92:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8015a96:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8015a9a:	bd70      	pop	{r4, r5, r6, pc}

08015a9c <__aeabi_ddiv>:
 8015a9c:	b570      	push	{r4, r5, r6, lr}
 8015a9e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8015aa2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8015aa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8015aaa:	bf1d      	ittte	ne
 8015aac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8015ab0:	ea94 0f0c 	teqne	r4, ip
 8015ab4:	ea95 0f0c 	teqne	r5, ip
 8015ab8:	f000 f8a7 	bleq	8015c0a <__aeabi_ddiv+0x16e>
 8015abc:	eba4 0405 	sub.w	r4, r4, r5
 8015ac0:	ea81 0e03 	eor.w	lr, r1, r3
 8015ac4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8015ac8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8015acc:	f000 8088 	beq.w	8015be0 <__aeabi_ddiv+0x144>
 8015ad0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8015ad4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8015ad8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8015adc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8015ae0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8015ae4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8015ae8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8015aec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8015af0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8015af4:	429d      	cmp	r5, r3
 8015af6:	bf08      	it	eq
 8015af8:	4296      	cmpeq	r6, r2
 8015afa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8015afe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8015b02:	d202      	bcs.n	8015b0a <__aeabi_ddiv+0x6e>
 8015b04:	085b      	lsrs	r3, r3, #1
 8015b06:	ea4f 0232 	mov.w	r2, r2, rrx
 8015b0a:	1ab6      	subs	r6, r6, r2
 8015b0c:	eb65 0503 	sbc.w	r5, r5, r3
 8015b10:	085b      	lsrs	r3, r3, #1
 8015b12:	ea4f 0232 	mov.w	r2, r2, rrx
 8015b16:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8015b1a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8015b1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8015b22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8015b26:	bf22      	ittt	cs
 8015b28:	1ab6      	subcs	r6, r6, r2
 8015b2a:	4675      	movcs	r5, lr
 8015b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8015b30:	085b      	lsrs	r3, r3, #1
 8015b32:	ea4f 0232 	mov.w	r2, r2, rrx
 8015b36:	ebb6 0e02 	subs.w	lr, r6, r2
 8015b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8015b3e:	bf22      	ittt	cs
 8015b40:	1ab6      	subcs	r6, r6, r2
 8015b42:	4675      	movcs	r5, lr
 8015b44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8015b48:	085b      	lsrs	r3, r3, #1
 8015b4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8015b4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8015b52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8015b56:	bf22      	ittt	cs
 8015b58:	1ab6      	subcs	r6, r6, r2
 8015b5a:	4675      	movcs	r5, lr
 8015b5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8015b60:	085b      	lsrs	r3, r3, #1
 8015b62:	ea4f 0232 	mov.w	r2, r2, rrx
 8015b66:	ebb6 0e02 	subs.w	lr, r6, r2
 8015b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8015b6e:	bf22      	ittt	cs
 8015b70:	1ab6      	subcs	r6, r6, r2
 8015b72:	4675      	movcs	r5, lr
 8015b74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8015b78:	ea55 0e06 	orrs.w	lr, r5, r6
 8015b7c:	d018      	beq.n	8015bb0 <__aeabi_ddiv+0x114>
 8015b7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8015b82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8015b86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8015b8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8015b8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8015b92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8015b96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8015b9a:	d1c0      	bne.n	8015b1e <__aeabi_ddiv+0x82>
 8015b9c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8015ba0:	d10b      	bne.n	8015bba <__aeabi_ddiv+0x11e>
 8015ba2:	ea41 0100 	orr.w	r1, r1, r0
 8015ba6:	f04f 0000 	mov.w	r0, #0
 8015baa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015bae:	e7b6      	b.n	8015b1e <__aeabi_ddiv+0x82>
 8015bb0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8015bb4:	bf04      	itt	eq
 8015bb6:	4301      	orreq	r1, r0
 8015bb8:	2000      	moveq	r0, #0
 8015bba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8015bbe:	bf88      	it	hi
 8015bc0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8015bc4:	f63f aeaf 	bhi.w	8015926 <__aeabi_dmul+0xde>
 8015bc8:	ebb5 0c03 	subs.w	ip, r5, r3
 8015bcc:	bf04      	itt	eq
 8015bce:	ebb6 0c02 	subseq.w	ip, r6, r2
 8015bd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8015bd6:	f150 0000 	adcs.w	r0, r0, #0
 8015bda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8015bde:	bd70      	pop	{r4, r5, r6, pc}
 8015be0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8015be4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8015be8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8015bec:	bfc2      	ittt	gt
 8015bee:	ebd4 050c 	rsbsgt	r5, r4, ip
 8015bf2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8015bf6:	bd70      	popgt	{r4, r5, r6, pc}
 8015bf8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8015bfc:	f04f 0e00 	mov.w	lr, #0
 8015c00:	3c01      	subs	r4, #1
 8015c02:	e690      	b.n	8015926 <__aeabi_dmul+0xde>
 8015c04:	ea45 0e06 	orr.w	lr, r5, r6
 8015c08:	e68d      	b.n	8015926 <__aeabi_dmul+0xde>
 8015c0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8015c0e:	ea94 0f0c 	teq	r4, ip
 8015c12:	bf08      	it	eq
 8015c14:	ea95 0f0c 	teqeq	r5, ip
 8015c18:	f43f af3b 	beq.w	8015a92 <__aeabi_dmul+0x24a>
 8015c1c:	ea94 0f0c 	teq	r4, ip
 8015c20:	d10a      	bne.n	8015c38 <__aeabi_ddiv+0x19c>
 8015c22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8015c26:	f47f af34 	bne.w	8015a92 <__aeabi_dmul+0x24a>
 8015c2a:	ea95 0f0c 	teq	r5, ip
 8015c2e:	f47f af25 	bne.w	8015a7c <__aeabi_dmul+0x234>
 8015c32:	4610      	mov	r0, r2
 8015c34:	4619      	mov	r1, r3
 8015c36:	e72c      	b.n	8015a92 <__aeabi_dmul+0x24a>
 8015c38:	ea95 0f0c 	teq	r5, ip
 8015c3c:	d106      	bne.n	8015c4c <__aeabi_ddiv+0x1b0>
 8015c3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8015c42:	f43f aefd 	beq.w	8015a40 <__aeabi_dmul+0x1f8>
 8015c46:	4610      	mov	r0, r2
 8015c48:	4619      	mov	r1, r3
 8015c4a:	e722      	b.n	8015a92 <__aeabi_dmul+0x24a>
 8015c4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8015c50:	bf18      	it	ne
 8015c52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8015c56:	f47f aec5 	bne.w	80159e4 <__aeabi_dmul+0x19c>
 8015c5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8015c5e:	f47f af0d 	bne.w	8015a7c <__aeabi_dmul+0x234>
 8015c62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8015c66:	f47f aeeb 	bne.w	8015a40 <__aeabi_dmul+0x1f8>
 8015c6a:	e712      	b.n	8015a92 <__aeabi_dmul+0x24a>

08015c6c <__gedf2>:
 8015c6c:	f04f 3cff 	mov.w	ip, #4294967295
 8015c70:	e006      	b.n	8015c80 <__cmpdf2+0x4>
 8015c72:	bf00      	nop

08015c74 <__ledf2>:
 8015c74:	f04f 0c01 	mov.w	ip, #1
 8015c78:	e002      	b.n	8015c80 <__cmpdf2+0x4>
 8015c7a:	bf00      	nop

08015c7c <__cmpdf2>:
 8015c7c:	f04f 0c01 	mov.w	ip, #1
 8015c80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8015c84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8015c88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8015c8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8015c90:	bf18      	it	ne
 8015c92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8015c96:	d01b      	beq.n	8015cd0 <__cmpdf2+0x54>
 8015c98:	b001      	add	sp, #4
 8015c9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8015c9e:	bf0c      	ite	eq
 8015ca0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8015ca4:	ea91 0f03 	teqne	r1, r3
 8015ca8:	bf02      	ittt	eq
 8015caa:	ea90 0f02 	teqeq	r0, r2
 8015cae:	2000      	moveq	r0, #0
 8015cb0:	4770      	bxeq	lr
 8015cb2:	f110 0f00 	cmn.w	r0, #0
 8015cb6:	ea91 0f03 	teq	r1, r3
 8015cba:	bf58      	it	pl
 8015cbc:	4299      	cmppl	r1, r3
 8015cbe:	bf08      	it	eq
 8015cc0:	4290      	cmpeq	r0, r2
 8015cc2:	bf2c      	ite	cs
 8015cc4:	17d8      	asrcs	r0, r3, #31
 8015cc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8015cca:	f040 0001 	orr.w	r0, r0, #1
 8015cce:	4770      	bx	lr
 8015cd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8015cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8015cd8:	d102      	bne.n	8015ce0 <__cmpdf2+0x64>
 8015cda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8015cde:	d107      	bne.n	8015cf0 <__cmpdf2+0x74>
 8015ce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8015ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8015ce8:	d1d6      	bne.n	8015c98 <__cmpdf2+0x1c>
 8015cea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8015cee:	d0d3      	beq.n	8015c98 <__cmpdf2+0x1c>
 8015cf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8015cf4:	4770      	bx	lr
 8015cf6:	bf00      	nop

08015cf8 <__aeabi_cdrcmple>:
 8015cf8:	4684      	mov	ip, r0
 8015cfa:	4610      	mov	r0, r2
 8015cfc:	4662      	mov	r2, ip
 8015cfe:	468c      	mov	ip, r1
 8015d00:	4619      	mov	r1, r3
 8015d02:	4663      	mov	r3, ip
 8015d04:	e000      	b.n	8015d08 <__aeabi_cdcmpeq>
 8015d06:	bf00      	nop

08015d08 <__aeabi_cdcmpeq>:
 8015d08:	b501      	push	{r0, lr}
 8015d0a:	f7ff ffb7 	bl	8015c7c <__cmpdf2>
 8015d0e:	2800      	cmp	r0, #0
 8015d10:	bf48      	it	mi
 8015d12:	f110 0f00 	cmnmi.w	r0, #0
 8015d16:	bd01      	pop	{r0, pc}

08015d18 <__aeabi_dcmpeq>:
 8015d18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8015d1c:	f7ff fff4 	bl	8015d08 <__aeabi_cdcmpeq>
 8015d20:	bf0c      	ite	eq
 8015d22:	2001      	moveq	r0, #1
 8015d24:	2000      	movne	r0, #0
 8015d26:	f85d fb08 	ldr.w	pc, [sp], #8
 8015d2a:	bf00      	nop

08015d2c <__aeabi_dcmplt>:
 8015d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8015d30:	f7ff ffea 	bl	8015d08 <__aeabi_cdcmpeq>
 8015d34:	bf34      	ite	cc
 8015d36:	2001      	movcc	r0, #1
 8015d38:	2000      	movcs	r0, #0
 8015d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8015d3e:	bf00      	nop

08015d40 <__aeabi_dcmple>:
 8015d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8015d44:	f7ff ffe0 	bl	8015d08 <__aeabi_cdcmpeq>
 8015d48:	bf94      	ite	ls
 8015d4a:	2001      	movls	r0, #1
 8015d4c:	2000      	movhi	r0, #0
 8015d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8015d52:	bf00      	nop

08015d54 <__aeabi_dcmpge>:
 8015d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8015d58:	f7ff ffce 	bl	8015cf8 <__aeabi_cdrcmple>
 8015d5c:	bf94      	ite	ls
 8015d5e:	2001      	movls	r0, #1
 8015d60:	2000      	movhi	r0, #0
 8015d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8015d66:	bf00      	nop

08015d68 <__aeabi_dcmpgt>:
 8015d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8015d6c:	f7ff ffc4 	bl	8015cf8 <__aeabi_cdrcmple>
 8015d70:	bf34      	ite	cc
 8015d72:	2001      	movcc	r0, #1
 8015d74:	2000      	movcs	r0, #0
 8015d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8015d7a:	bf00      	nop

08015d7c <__aeabi_dcmpun>:
 8015d7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8015d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8015d84:	d102      	bne.n	8015d8c <__aeabi_dcmpun+0x10>
 8015d86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8015d8a:	d10a      	bne.n	8015da2 <__aeabi_dcmpun+0x26>
 8015d8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8015d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8015d94:	d102      	bne.n	8015d9c <__aeabi_dcmpun+0x20>
 8015d96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8015d9a:	d102      	bne.n	8015da2 <__aeabi_dcmpun+0x26>
 8015d9c:	f04f 0000 	mov.w	r0, #0
 8015da0:	4770      	bx	lr
 8015da2:	f04f 0001 	mov.w	r0, #1
 8015da6:	4770      	bx	lr

08015da8 <__aeabi_d2iz>:
 8015da8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8015dac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8015db0:	d215      	bcs.n	8015dde <__aeabi_d2iz+0x36>
 8015db2:	d511      	bpl.n	8015dd8 <__aeabi_d2iz+0x30>
 8015db4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8015db8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8015dbc:	d912      	bls.n	8015de4 <__aeabi_d2iz+0x3c>
 8015dbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8015dc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8015dc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8015dca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8015dce:	fa23 f002 	lsr.w	r0, r3, r2
 8015dd2:	bf18      	it	ne
 8015dd4:	4240      	negne	r0, r0
 8015dd6:	4770      	bx	lr
 8015dd8:	f04f 0000 	mov.w	r0, #0
 8015ddc:	4770      	bx	lr
 8015dde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8015de2:	d105      	bne.n	8015df0 <__aeabi_d2iz+0x48>
 8015de4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8015de8:	bf08      	it	eq
 8015dea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8015dee:	4770      	bx	lr
 8015df0:	f04f 0000 	mov.w	r0, #0
 8015df4:	4770      	bx	lr
 8015df6:	bf00      	nop

08015df8 <__aeabi_d2uiz>:
 8015df8:	004a      	lsls	r2, r1, #1
 8015dfa:	d211      	bcs.n	8015e20 <__aeabi_d2uiz+0x28>
 8015dfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8015e00:	d211      	bcs.n	8015e26 <__aeabi_d2uiz+0x2e>
 8015e02:	d50d      	bpl.n	8015e20 <__aeabi_d2uiz+0x28>
 8015e04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8015e08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8015e0c:	d40e      	bmi.n	8015e2c <__aeabi_d2uiz+0x34>
 8015e0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8015e12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8015e16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8015e1a:	fa23 f002 	lsr.w	r0, r3, r2
 8015e1e:	4770      	bx	lr
 8015e20:	f04f 0000 	mov.w	r0, #0
 8015e24:	4770      	bx	lr
 8015e26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8015e2a:	d102      	bne.n	8015e32 <__aeabi_d2uiz+0x3a>
 8015e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e30:	4770      	bx	lr
 8015e32:	f04f 0000 	mov.w	r0, #0
 8015e36:	4770      	bx	lr

08015e38 <__aeabi_d2f>:
 8015e38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8015e3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8015e40:	bf24      	itt	cs
 8015e42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8015e46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8015e4a:	d90d      	bls.n	8015e68 <__aeabi_d2f+0x30>
 8015e4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8015e50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8015e54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8015e58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8015e5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8015e60:	bf08      	it	eq
 8015e62:	f020 0001 	biceq.w	r0, r0, #1
 8015e66:	4770      	bx	lr
 8015e68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8015e6c:	d121      	bne.n	8015eb2 <__aeabi_d2f+0x7a>
 8015e6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8015e72:	bfbc      	itt	lt
 8015e74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8015e78:	4770      	bxlt	lr
 8015e7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8015e7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8015e82:	f1c2 0218 	rsb	r2, r2, #24
 8015e86:	f1c2 0c20 	rsb	ip, r2, #32
 8015e8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8015e8e:	fa20 f002 	lsr.w	r0, r0, r2
 8015e92:	bf18      	it	ne
 8015e94:	f040 0001 	orrne.w	r0, r0, #1
 8015e98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8015e9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8015ea0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8015ea4:	ea40 000c 	orr.w	r0, r0, ip
 8015ea8:	fa23 f302 	lsr.w	r3, r3, r2
 8015eac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015eb0:	e7cc      	b.n	8015e4c <__aeabi_d2f+0x14>
 8015eb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8015eb6:	d107      	bne.n	8015ec8 <__aeabi_d2f+0x90>
 8015eb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8015ebc:	bf1e      	ittt	ne
 8015ebe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8015ec2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8015ec6:	4770      	bxne	lr
 8015ec8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8015ecc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8015ed0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8015ed4:	4770      	bx	lr
 8015ed6:	bf00      	nop

08015ed8 <__aeabi_uldivmod>:
 8015ed8:	b953      	cbnz	r3, 8015ef0 <__aeabi_uldivmod+0x18>
 8015eda:	b94a      	cbnz	r2, 8015ef0 <__aeabi_uldivmod+0x18>
 8015edc:	2900      	cmp	r1, #0
 8015ede:	bf08      	it	eq
 8015ee0:	2800      	cmpeq	r0, #0
 8015ee2:	bf1c      	itt	ne
 8015ee4:	f04f 31ff 	movne.w	r1, #4294967295
 8015ee8:	f04f 30ff 	movne.w	r0, #4294967295
 8015eec:	f000 b99c 	b.w	8016228 <__aeabi_idiv0>
 8015ef0:	f1ad 0c08 	sub.w	ip, sp, #8
 8015ef4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8015ef8:	f000 f81a 	bl	8015f30 <__udivmoddi4>
 8015efc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015f04:	b004      	add	sp, #16
 8015f06:	4770      	bx	lr

08015f08 <__popcountsi2>:
 8015f08:	0843      	lsrs	r3, r0, #1
 8015f0a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8015f0e:	1ac0      	subs	r0, r0, r3
 8015f10:	0883      	lsrs	r3, r0, #2
 8015f12:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8015f16:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8015f1a:	4418      	add	r0, r3
 8015f1c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8015f20:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8015f24:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8015f28:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8015f2c:	0e00      	lsrs	r0, r0, #24
 8015f2e:	4770      	bx	lr

08015f30 <__udivmoddi4>:
 8015f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f34:	9d08      	ldr	r5, [sp, #32]
 8015f36:	468e      	mov	lr, r1
 8015f38:	4604      	mov	r4, r0
 8015f3a:	4688      	mov	r8, r1
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d14a      	bne.n	8015fd6 <__udivmoddi4+0xa6>
 8015f40:	428a      	cmp	r2, r1
 8015f42:	4617      	mov	r7, r2
 8015f44:	d962      	bls.n	801600c <__udivmoddi4+0xdc>
 8015f46:	fab2 f682 	clz	r6, r2
 8015f4a:	b14e      	cbz	r6, 8015f60 <__udivmoddi4+0x30>
 8015f4c:	f1c6 0320 	rsb	r3, r6, #32
 8015f50:	fa01 f806 	lsl.w	r8, r1, r6
 8015f54:	fa20 f303 	lsr.w	r3, r0, r3
 8015f58:	40b7      	lsls	r7, r6
 8015f5a:	ea43 0808 	orr.w	r8, r3, r8
 8015f5e:	40b4      	lsls	r4, r6
 8015f60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8015f64:	fa1f fc87 	uxth.w	ip, r7
 8015f68:	fbb8 f1fe 	udiv	r1, r8, lr
 8015f6c:	0c23      	lsrs	r3, r4, #16
 8015f6e:	fb0e 8811 	mls	r8, lr, r1, r8
 8015f72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8015f76:	fb01 f20c 	mul.w	r2, r1, ip
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d909      	bls.n	8015f92 <__udivmoddi4+0x62>
 8015f7e:	18fb      	adds	r3, r7, r3
 8015f80:	f101 30ff 	add.w	r0, r1, #4294967295
 8015f84:	f080 80ea 	bcs.w	801615c <__udivmoddi4+0x22c>
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	f240 80e7 	bls.w	801615c <__udivmoddi4+0x22c>
 8015f8e:	3902      	subs	r1, #2
 8015f90:	443b      	add	r3, r7
 8015f92:	1a9a      	subs	r2, r3, r2
 8015f94:	b2a3      	uxth	r3, r4
 8015f96:	fbb2 f0fe 	udiv	r0, r2, lr
 8015f9a:	fb0e 2210 	mls	r2, lr, r0, r2
 8015f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015fa2:	fb00 fc0c 	mul.w	ip, r0, ip
 8015fa6:	459c      	cmp	ip, r3
 8015fa8:	d909      	bls.n	8015fbe <__udivmoddi4+0x8e>
 8015faa:	18fb      	adds	r3, r7, r3
 8015fac:	f100 32ff 	add.w	r2, r0, #4294967295
 8015fb0:	f080 80d6 	bcs.w	8016160 <__udivmoddi4+0x230>
 8015fb4:	459c      	cmp	ip, r3
 8015fb6:	f240 80d3 	bls.w	8016160 <__udivmoddi4+0x230>
 8015fba:	443b      	add	r3, r7
 8015fbc:	3802      	subs	r0, #2
 8015fbe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8015fc2:	eba3 030c 	sub.w	r3, r3, ip
 8015fc6:	2100      	movs	r1, #0
 8015fc8:	b11d      	cbz	r5, 8015fd2 <__udivmoddi4+0xa2>
 8015fca:	40f3      	lsrs	r3, r6
 8015fcc:	2200      	movs	r2, #0
 8015fce:	e9c5 3200 	strd	r3, r2, [r5]
 8015fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fd6:	428b      	cmp	r3, r1
 8015fd8:	d905      	bls.n	8015fe6 <__udivmoddi4+0xb6>
 8015fda:	b10d      	cbz	r5, 8015fe0 <__udivmoddi4+0xb0>
 8015fdc:	e9c5 0100 	strd	r0, r1, [r5]
 8015fe0:	2100      	movs	r1, #0
 8015fe2:	4608      	mov	r0, r1
 8015fe4:	e7f5      	b.n	8015fd2 <__udivmoddi4+0xa2>
 8015fe6:	fab3 f183 	clz	r1, r3
 8015fea:	2900      	cmp	r1, #0
 8015fec:	d146      	bne.n	801607c <__udivmoddi4+0x14c>
 8015fee:	4573      	cmp	r3, lr
 8015ff0:	d302      	bcc.n	8015ff8 <__udivmoddi4+0xc8>
 8015ff2:	4282      	cmp	r2, r0
 8015ff4:	f200 8105 	bhi.w	8016202 <__udivmoddi4+0x2d2>
 8015ff8:	1a84      	subs	r4, r0, r2
 8015ffa:	eb6e 0203 	sbc.w	r2, lr, r3
 8015ffe:	2001      	movs	r0, #1
 8016000:	4690      	mov	r8, r2
 8016002:	2d00      	cmp	r5, #0
 8016004:	d0e5      	beq.n	8015fd2 <__udivmoddi4+0xa2>
 8016006:	e9c5 4800 	strd	r4, r8, [r5]
 801600a:	e7e2      	b.n	8015fd2 <__udivmoddi4+0xa2>
 801600c:	2a00      	cmp	r2, #0
 801600e:	f000 8090 	beq.w	8016132 <__udivmoddi4+0x202>
 8016012:	fab2 f682 	clz	r6, r2
 8016016:	2e00      	cmp	r6, #0
 8016018:	f040 80a4 	bne.w	8016164 <__udivmoddi4+0x234>
 801601c:	1a8a      	subs	r2, r1, r2
 801601e:	0c03      	lsrs	r3, r0, #16
 8016020:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8016024:	b280      	uxth	r0, r0
 8016026:	b2bc      	uxth	r4, r7
 8016028:	2101      	movs	r1, #1
 801602a:	fbb2 fcfe 	udiv	ip, r2, lr
 801602e:	fb0e 221c 	mls	r2, lr, ip, r2
 8016032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016036:	fb04 f20c 	mul.w	r2, r4, ip
 801603a:	429a      	cmp	r2, r3
 801603c:	d907      	bls.n	801604e <__udivmoddi4+0x11e>
 801603e:	18fb      	adds	r3, r7, r3
 8016040:	f10c 38ff 	add.w	r8, ip, #4294967295
 8016044:	d202      	bcs.n	801604c <__udivmoddi4+0x11c>
 8016046:	429a      	cmp	r2, r3
 8016048:	f200 80e0 	bhi.w	801620c <__udivmoddi4+0x2dc>
 801604c:	46c4      	mov	ip, r8
 801604e:	1a9b      	subs	r3, r3, r2
 8016050:	fbb3 f2fe 	udiv	r2, r3, lr
 8016054:	fb0e 3312 	mls	r3, lr, r2, r3
 8016058:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 801605c:	fb02 f404 	mul.w	r4, r2, r4
 8016060:	429c      	cmp	r4, r3
 8016062:	d907      	bls.n	8016074 <__udivmoddi4+0x144>
 8016064:	18fb      	adds	r3, r7, r3
 8016066:	f102 30ff 	add.w	r0, r2, #4294967295
 801606a:	d202      	bcs.n	8016072 <__udivmoddi4+0x142>
 801606c:	429c      	cmp	r4, r3
 801606e:	f200 80ca 	bhi.w	8016206 <__udivmoddi4+0x2d6>
 8016072:	4602      	mov	r2, r0
 8016074:	1b1b      	subs	r3, r3, r4
 8016076:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 801607a:	e7a5      	b.n	8015fc8 <__udivmoddi4+0x98>
 801607c:	f1c1 0620 	rsb	r6, r1, #32
 8016080:	408b      	lsls	r3, r1
 8016082:	fa22 f706 	lsr.w	r7, r2, r6
 8016086:	431f      	orrs	r7, r3
 8016088:	fa0e f401 	lsl.w	r4, lr, r1
 801608c:	fa20 f306 	lsr.w	r3, r0, r6
 8016090:	fa2e fe06 	lsr.w	lr, lr, r6
 8016094:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8016098:	4323      	orrs	r3, r4
 801609a:	fa00 f801 	lsl.w	r8, r0, r1
 801609e:	fa1f fc87 	uxth.w	ip, r7
 80160a2:	fbbe f0f9 	udiv	r0, lr, r9
 80160a6:	0c1c      	lsrs	r4, r3, #16
 80160a8:	fb09 ee10 	mls	lr, r9, r0, lr
 80160ac:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80160b0:	fb00 fe0c 	mul.w	lr, r0, ip
 80160b4:	45a6      	cmp	lr, r4
 80160b6:	fa02 f201 	lsl.w	r2, r2, r1
 80160ba:	d909      	bls.n	80160d0 <__udivmoddi4+0x1a0>
 80160bc:	193c      	adds	r4, r7, r4
 80160be:	f100 3aff 	add.w	sl, r0, #4294967295
 80160c2:	f080 809c 	bcs.w	80161fe <__udivmoddi4+0x2ce>
 80160c6:	45a6      	cmp	lr, r4
 80160c8:	f240 8099 	bls.w	80161fe <__udivmoddi4+0x2ce>
 80160cc:	3802      	subs	r0, #2
 80160ce:	443c      	add	r4, r7
 80160d0:	eba4 040e 	sub.w	r4, r4, lr
 80160d4:	fa1f fe83 	uxth.w	lr, r3
 80160d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80160dc:	fb09 4413 	mls	r4, r9, r3, r4
 80160e0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80160e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80160e8:	45a4      	cmp	ip, r4
 80160ea:	d908      	bls.n	80160fe <__udivmoddi4+0x1ce>
 80160ec:	193c      	adds	r4, r7, r4
 80160ee:	f103 3eff 	add.w	lr, r3, #4294967295
 80160f2:	f080 8082 	bcs.w	80161fa <__udivmoddi4+0x2ca>
 80160f6:	45a4      	cmp	ip, r4
 80160f8:	d97f      	bls.n	80161fa <__udivmoddi4+0x2ca>
 80160fa:	3b02      	subs	r3, #2
 80160fc:	443c      	add	r4, r7
 80160fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8016102:	eba4 040c 	sub.w	r4, r4, ip
 8016106:	fba0 ec02 	umull	lr, ip, r0, r2
 801610a:	4564      	cmp	r4, ip
 801610c:	4673      	mov	r3, lr
 801610e:	46e1      	mov	r9, ip
 8016110:	d362      	bcc.n	80161d8 <__udivmoddi4+0x2a8>
 8016112:	d05f      	beq.n	80161d4 <__udivmoddi4+0x2a4>
 8016114:	b15d      	cbz	r5, 801612e <__udivmoddi4+0x1fe>
 8016116:	ebb8 0203 	subs.w	r2, r8, r3
 801611a:	eb64 0409 	sbc.w	r4, r4, r9
 801611e:	fa04 f606 	lsl.w	r6, r4, r6
 8016122:	fa22 f301 	lsr.w	r3, r2, r1
 8016126:	431e      	orrs	r6, r3
 8016128:	40cc      	lsrs	r4, r1
 801612a:	e9c5 6400 	strd	r6, r4, [r5]
 801612e:	2100      	movs	r1, #0
 8016130:	e74f      	b.n	8015fd2 <__udivmoddi4+0xa2>
 8016132:	fbb1 fcf2 	udiv	ip, r1, r2
 8016136:	0c01      	lsrs	r1, r0, #16
 8016138:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 801613c:	b280      	uxth	r0, r0
 801613e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8016142:	463b      	mov	r3, r7
 8016144:	4638      	mov	r0, r7
 8016146:	463c      	mov	r4, r7
 8016148:	46b8      	mov	r8, r7
 801614a:	46be      	mov	lr, r7
 801614c:	2620      	movs	r6, #32
 801614e:	fbb1 f1f7 	udiv	r1, r1, r7
 8016152:	eba2 0208 	sub.w	r2, r2, r8
 8016156:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 801615a:	e766      	b.n	801602a <__udivmoddi4+0xfa>
 801615c:	4601      	mov	r1, r0
 801615e:	e718      	b.n	8015f92 <__udivmoddi4+0x62>
 8016160:	4610      	mov	r0, r2
 8016162:	e72c      	b.n	8015fbe <__udivmoddi4+0x8e>
 8016164:	f1c6 0220 	rsb	r2, r6, #32
 8016168:	fa2e f302 	lsr.w	r3, lr, r2
 801616c:	40b7      	lsls	r7, r6
 801616e:	40b1      	lsls	r1, r6
 8016170:	fa20 f202 	lsr.w	r2, r0, r2
 8016174:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8016178:	430a      	orrs	r2, r1
 801617a:	fbb3 f8fe 	udiv	r8, r3, lr
 801617e:	b2bc      	uxth	r4, r7
 8016180:	fb0e 3318 	mls	r3, lr, r8, r3
 8016184:	0c11      	lsrs	r1, r2, #16
 8016186:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801618a:	fb08 f904 	mul.w	r9, r8, r4
 801618e:	40b0      	lsls	r0, r6
 8016190:	4589      	cmp	r9, r1
 8016192:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8016196:	b280      	uxth	r0, r0
 8016198:	d93e      	bls.n	8016218 <__udivmoddi4+0x2e8>
 801619a:	1879      	adds	r1, r7, r1
 801619c:	f108 3cff 	add.w	ip, r8, #4294967295
 80161a0:	d201      	bcs.n	80161a6 <__udivmoddi4+0x276>
 80161a2:	4589      	cmp	r9, r1
 80161a4:	d81f      	bhi.n	80161e6 <__udivmoddi4+0x2b6>
 80161a6:	eba1 0109 	sub.w	r1, r1, r9
 80161aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80161ae:	fb09 f804 	mul.w	r8, r9, r4
 80161b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80161b6:	b292      	uxth	r2, r2
 80161b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80161bc:	4542      	cmp	r2, r8
 80161be:	d229      	bcs.n	8016214 <__udivmoddi4+0x2e4>
 80161c0:	18ba      	adds	r2, r7, r2
 80161c2:	f109 31ff 	add.w	r1, r9, #4294967295
 80161c6:	d2c4      	bcs.n	8016152 <__udivmoddi4+0x222>
 80161c8:	4542      	cmp	r2, r8
 80161ca:	d2c2      	bcs.n	8016152 <__udivmoddi4+0x222>
 80161cc:	f1a9 0102 	sub.w	r1, r9, #2
 80161d0:	443a      	add	r2, r7
 80161d2:	e7be      	b.n	8016152 <__udivmoddi4+0x222>
 80161d4:	45f0      	cmp	r8, lr
 80161d6:	d29d      	bcs.n	8016114 <__udivmoddi4+0x1e4>
 80161d8:	ebbe 0302 	subs.w	r3, lr, r2
 80161dc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80161e0:	3801      	subs	r0, #1
 80161e2:	46e1      	mov	r9, ip
 80161e4:	e796      	b.n	8016114 <__udivmoddi4+0x1e4>
 80161e6:	eba7 0909 	sub.w	r9, r7, r9
 80161ea:	4449      	add	r1, r9
 80161ec:	f1a8 0c02 	sub.w	ip, r8, #2
 80161f0:	fbb1 f9fe 	udiv	r9, r1, lr
 80161f4:	fb09 f804 	mul.w	r8, r9, r4
 80161f8:	e7db      	b.n	80161b2 <__udivmoddi4+0x282>
 80161fa:	4673      	mov	r3, lr
 80161fc:	e77f      	b.n	80160fe <__udivmoddi4+0x1ce>
 80161fe:	4650      	mov	r0, sl
 8016200:	e766      	b.n	80160d0 <__udivmoddi4+0x1a0>
 8016202:	4608      	mov	r0, r1
 8016204:	e6fd      	b.n	8016002 <__udivmoddi4+0xd2>
 8016206:	443b      	add	r3, r7
 8016208:	3a02      	subs	r2, #2
 801620a:	e733      	b.n	8016074 <__udivmoddi4+0x144>
 801620c:	f1ac 0c02 	sub.w	ip, ip, #2
 8016210:	443b      	add	r3, r7
 8016212:	e71c      	b.n	801604e <__udivmoddi4+0x11e>
 8016214:	4649      	mov	r1, r9
 8016216:	e79c      	b.n	8016152 <__udivmoddi4+0x222>
 8016218:	eba1 0109 	sub.w	r1, r1, r9
 801621c:	46c4      	mov	ip, r8
 801621e:	fbb1 f9fe 	udiv	r9, r1, lr
 8016222:	fb09 f804 	mul.w	r8, r9, r4
 8016226:	e7c4      	b.n	80161b2 <__udivmoddi4+0x282>

08016228 <__aeabi_idiv0>:
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop

0801622c <_waitUntilConvCplt>:
/* Private interface
   -----------------------------------------------------------------------------------------------*/

void _waitUntilConvCplt(void)
{
    while ( !conversionCplt )
 801622c:	4a02      	ldr	r2, [pc, #8]	@ (8016238 <_waitUntilConvCplt+0xc>)
 801622e:	7813      	ldrb	r3, [r2, #0]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d0fc      	beq.n	801622e <_waitUntilConvCplt+0x2>
    {

    }
}
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	200009d4 	.word	0x200009d4

0801623c <_getVref>:
 **************************************************************************************************/
float _getVref(void)
{
    const uint16_t  vcal = 3.0;      // 3.0V at calibration
    const uint16_t  cal = *(uint16_t*) ( VREFINT_CAL_ADDR );
    const float     vrefint = adcSensorValues[VREF_INT];
 801623c:	4b0a      	ldr	r3, [pc, #40]	@ (8016268 <_getVref+0x2c>)
 801623e:	89da      	ldrh	r2, [r3, #14]
    float           vref = 3.0;

    if ( vrefint != 0 )
 8016240:	b17a      	cbz	r2, 8016262 <_getVref+0x26>
    const uint16_t  cal = *(uint16_t*) ( VREFINT_CAL_ADDR );
 8016242:	4b0a      	ldr	r3, [pc, #40]	@ (801626c <_getVref+0x30>)
    {
        vref = (float) ( vcal * cal ) / vrefint;
 8016244:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 8016248:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801624c:	ee07 3a90 	vmov	s15, r3
    const float     vrefint = adcSensorValues[VREF_INT];
 8016250:	ee07 2a10 	vmov	s14, r2
        vref = (float) ( vcal * cal ) / vrefint;
 8016254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    const float     vrefint = adcSensorValues[VREF_INT];
 8016258:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        vref = (float) ( vcal * cal ) / vrefint;
 801625c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8016260:	4770      	bx	lr
    float           vref = 3.0;
 8016262:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
    }

    return vref;
}
 8016266:	4770      	bx	lr
 8016268:	200009d6 	.word	0x200009d6
 801626c:	1fff7500 	.word	0x1fff7500

08016270 <_getVRes>:
/*!*************************************************************************************************
 * @brief _getVRes
 * @return
 **************************************************************************************************/
float _getVRes(void)
{
 8016270:	b508      	push	{r3, lr}
    const float  vref = _getVref();
 8016272:	f7ff ffe3 	bl	801623c <_getVref>
    float        res = vref / 4095;                       // 12 bit res [V]
    return res;
}
 8016276:	eddf 7a02 	vldr	s15, [pc, #8]	@ 8016280 <_getVRes+0x10>
 801627a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801627e:	bd08      	pop	{r3, pc}
 8016280:	457ff000 	.word	0x457ff000
 8016284:	00000000 	.word	0x00000000

08016288 <ADC_getAINVoltage.part.0>:
 * @brief ADC_getAINVoltage
 * @param channel
 * @param holdTimeInConvCycles waits number of conversions for measurement before resetting
 * @return
 **************************************************************************************************/
float ADC_getAINVoltage(ADC_Channels channel)
 8016288:	b508      	push	{r3, lr}
    if ( channel != AIN_1 && channel != AIN_2 )
    {
        return -1;
    }

    float  value = adcSensorValues[channel] * _getVRes();
 801628a:	4b0f      	ldr	r3, [pc, #60]	@ (80162c8 <ADC_getAINVoltage.part.0+0x40>)
 801628c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8016290:	ee06 3a90 	vmov	s13, r3
 8016294:	f7ff ffec 	bl	8016270 <_getVRes>
 8016298:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    value *= AIN_CORRECTION_FACTOR;
 801629c:	ee66 7a80 	vmul.f32	s15, s13, s0
 80162a0:	ee17 0a90 	vmov	r0, s15
 80162a4:	f7ff fa78 	bl	8015798 <__aeabi_f2d>
 80162a8:	a305      	add	r3, pc, #20	@ (adr r3, 80162c0 <ADC_getAINVoltage.part.0+0x38>)
 80162aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ae:	f7ff facb 	bl	8015848 <__aeabi_dmul>
 80162b2:	f7ff fdc1 	bl	8015e38 <__aeabi_d2f>
    return value;
}
 80162b6:	ee00 0a10 	vmov	s0, r0
 80162ba:	bd08      	pop	{r3, pc}
 80162bc:	f3af 8000 	nop.w
 80162c0:	a5119ce0 	.word	0xa5119ce0
 80162c4:	3ffac1bd 	.word	0x3ffac1bd
 80162c8:	200009d6 	.word	0x200009d6

080162cc <_calculateDisplayTemperature>:
    uint16_t  raw = ( adcSensorValues[DISP_TEMP] >> 4 ); // 4096, 12bit resolution down to 8bit
 80162cc:	4b18      	ldr	r3, [pc, #96]	@ (8016330 <_calculateDisplayTemperature+0x64>)
}
 80162ce:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8016334 <_calculateDisplayTemperature+0x68>
    uint16_t  raw = ( adcSensorValues[DISP_TEMP] >> 4 ); // 4096, 12bit resolution down to 8bit
 80162d2:	88db      	ldrh	r3, [r3, #6]
 80162d4:	091a      	lsrs	r2, r3, #4
    float t0 = (float) tempTable[( raw )]; // °Deg
 80162d6:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80162da:	bf28      	it	cs
 80162dc:	f44f 7280 	movcs.w	r2, #256	@ 0x100
    int x0 =  raw * TEMP_STEP_WIDTH;
 80162e0:	0110      	lsls	r0, r2, #4
    int x1 =  x0 + TEMP_STEP_WIDTH;
 80162e2:	f100 0110 	add.w	r1, r0, #16
    float     temp = ((t0 * (x1-x) + t1 * (x-x0)) / dx ) / 100;
 80162e6:	1ac9      	subs	r1, r1, r3
 80162e8:	ee07 1a90 	vmov	s15, r1
    float t0 = (float) tempTable[( raw )]; // °Deg
 80162ec:	4912      	ldr	r1, [pc, #72]	@ (8016338 <_calculateDisplayTemperature+0x6c>)
{
 80162ee:	b510      	push	{r4, lr}
    float t0 = (float) tempTable[( raw )]; // °Deg
 80162f0:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    float     temp = ((t0 * (x1-x) + t1 * (x-x0)) / dx ) / 100;
 80162f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    float t1 = (float) tempTable[( raw ) + 1]; // °Deg
 80162f8:	3201      	adds	r2, #1
    float t0 = (float) tempTable[( raw )]; // °Deg
 80162fa:	ee07 4a90 	vmov	s15, r4
    float t1 = (float) tempTable[( raw ) + 1]; // °Deg
 80162fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    float     temp = ((t0 * (x1-x) + t1 * (x-x0)) / dx ) / 100;
 8016302:	1a1b      	subs	r3, r3, r0
    float t0 = (float) tempTable[( raw )]; // °Deg
 8016304:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    float     temp = ((t0 * (x1-x) + t1 * (x-x0)) / dx ) / 100;
 8016308:	ee07 3a10 	vmov	s14, r3
    float t1 = (float) tempTable[( raw ) + 1]; // °Deg
 801630c:	edd2 7a00 	vldr	s15, [r2]
    float     temp = ((t0 * (x1-x) + t1 * (x-x0)) / dx ) / 100;
 8016310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    float t1 = (float) tempTable[( raw ) + 1]; // °Deg
 8016314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float     temp = ((t0 * (x1-x) + t1 * (x-x0)) / dx ) / 100;
 8016318:	ee67 7a87 	vmul.f32	s15, s15, s14
 801631c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 801633c <_calculateDisplayTemperature+0x70>
 8016320:	eee6 7a86 	vfma.f32	s15, s13, s12
 8016324:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8016328:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801632c:	bd10      	pop	{r4, pc}
 801632e:	bf00      	nop
 8016330:	200009d6 	.word	0x200009d6
 8016334:	42c80000 	.word	0x42c80000
 8016338:	20000004 	.word	0x20000004
 801633c:	3d800000 	.word	0x3d800000

08016340 <_calculateInternalTemperature>:
    uint16_t     cal1 = *(uint16_t*) ( TS_CAL1_ADDR );
 8016340:	4b17      	ldr	r3, [pc, #92]	@ (80163a0 <_calculateInternalTemperature+0x60>)
 8016342:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
    uint16_t     cal2 = *(uint16_t*) ( TS_CAL2_ADDR );
 8016346:	f8b3 00ca 	ldrh.w	r0, [r3, #202]	@ 0xca
    uint16_t     raw = adcSensorValues[INTERNAL_TEMP];
 801634a:	4b16      	ldr	r3, [pc, #88]	@ (80163a4 <_calculateInternalTemperature+0x64>)
{
 801634c:	b510      	push	{r4, lr}
    const float  calFactor = (((float) ( CAL2_TEMP - CAL1_TEMP )) / ( cal2 - cal1 ));
 801634e:	1a40      	subs	r0, r0, r1
    uint16_t     raw = adcSensorValues[INTERNAL_TEMP];
 8016350:	899c      	ldrh	r4, [r3, #12]
    const float  vrefFactor = _getVref() / 3.0;
 8016352:	f7ff ff73 	bl	801623c <_getVref>
    const float  calFactor = (((float) ( CAL2_TEMP - CAL1_TEMP )) / ( cal2 - cal1 ));
 8016356:	ee07 0a90 	vmov	s15, r0
 801635a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80163a8 <_calculateInternalTemperature+0x68>
 801635e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016362:	eec7 6a27 	vdiv.f32	s13, s14, s15
    float        value = (uint16_t) ( calFactor * (( raw * vrefFactor ) - cal1 ) + 30 );
 8016366:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801636a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801636e:	ee07 4a90 	vmov	s15, r4
 8016372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016376:	ee07 1a90 	vmov	s15, r1
 801637a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801637e:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8016382:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8016386:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801638a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801638e:	ee10 3a10 	vmov	r3, s0
 8016392:	b29b      	uxth	r3, r3
 8016394:	ee00 3a10 	vmov	s0, r3
}
 8016398:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801639c:	bd10      	pop	{r4, pc}
 801639e:	bf00      	nop
 80163a0:	1fff7500 	.word	0x1fff7500
 80163a4:	200009d6 	.word	0x200009d6
 80163a8:	42c80000 	.word	0x42c80000
 80163ac:	00000000 	.word	0x00000000

080163b0 <_getVinMEAS>:
{
 80163b0:	b508      	push	{r3, lr}
    float  value = adcSensorValues[VIN_MEAS] * _getVRes();
 80163b2:	4b15      	ldr	r3, [pc, #84]	@ (8016408 <_getVinMEAS+0x58>)
 80163b4:	889b      	ldrh	r3, [r3, #4]
 80163b6:	ee06 3a90 	vmov	s13, r3
 80163ba:	f7ff ff59 	bl	8016270 <_getVRes>
 80163be:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    value *= VIN_CORRECTION_FACTOR;
 80163c2:	ee66 7a80 	vmul.f32	s15, s13, s0
 80163c6:	ee17 0a90 	vmov	r0, s15
 80163ca:	f7ff f9e5 	bl	8015798 <__aeabi_f2d>
 80163ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80163f8 <_getVinMEAS+0x48>)
 80163d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d4:	f7ff fa38 	bl	8015848 <__aeabi_dmul>
 80163d8:	f7ff fd2e 	bl	8015e38 <__aeabi_d2f>
    value += VIN_OFFSET;
 80163dc:	f7ff f9dc 	bl	8015798 <__aeabi_f2d>
 80163e0:	a307      	add	r3, pc, #28	@ (adr r3, 8016400 <_getVinMEAS+0x50>)
 80163e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163e6:	f7ff f879 	bl	80154dc <__adddf3>
 80163ea:	f7ff fd25 	bl	8015e38 <__aeabi_d2f>
}
 80163ee:	ee00 0a10 	vmov	s0, r0
 80163f2:	bd08      	pop	{r3, pc}
 80163f4:	f3af 8000 	nop.w
 80163f8:	33333333 	.word	0x33333333
 80163fc:	4029b333 	.word	0x4029b333
 8016400:	f5c28f5c 	.word	0xf5c28f5c
 8016404:	3fe75c28 	.word	0x3fe75c28
 8016408:	200009d6 	.word	0x200009d6

0801640c <ADC_InitTask>:
{
 801640c:	b508      	push	{r3, lr}
    ADC_TaskHandle = osThreadNew(ADC_startTask, NULL, &ADC_Task_attributes);
 801640e:	4a04      	ldr	r2, [pc, #16]	@ (8016420 <ADC_InitTask+0x14>)
 8016410:	4804      	ldr	r0, [pc, #16]	@ (8016424 <ADC_InitTask+0x18>)
 8016412:	2100      	movs	r1, #0
 8016414:	f00b fac0 	bl	8021998 <osThreadNew>
 8016418:	4b03      	ldr	r3, [pc, #12]	@ (8016428 <ADC_InitTask+0x1c>)
 801641a:	6018      	str	r0, [r3, #0]
}
 801641c:	bd08      	pop	{r3, pc}
 801641e:	bf00      	nop
 8016420:	08041d2c 	.word	0x08041d2c
 8016424:	0801661d 	.word	0x0801661d
 8016428:	200009d0 	.word	0x200009d0

0801642c <HAL_ADC_ConvCpltCallback>:
    conversionCplt = true;
 801642c:	4b01      	ldr	r3, [pc, #4]	@ (8016434 <HAL_ADC_ConvCpltCallback+0x8>)
 801642e:	2201      	movs	r2, #1
 8016430:	701a      	strb	r2, [r3, #0]
}
 8016432:	4770      	bx	lr
 8016434:	200009d4 	.word	0x200009d4

08016438 <ADC_triggerConversion>:
    conversionCplt = false;
 8016438:	4b03      	ldr	r3, [pc, #12]	@ (8016448 <ADC_triggerConversion+0x10>)
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcSensorValues, NR_CHANNELS);
 801643a:	4904      	ldr	r1, [pc, #16]	@ (801644c <ADC_triggerConversion+0x14>)
 801643c:	4804      	ldr	r0, [pc, #16]	@ (8016450 <ADC_triggerConversion+0x18>)
    conversionCplt = false;
 801643e:	2200      	movs	r2, #0
 8016440:	701a      	strb	r2, [r3, #0]
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcSensorValues, NR_CHANNELS);
 8016442:	2208      	movs	r2, #8
 8016444:	f002 bdc4 	b.w	8018fd0 <HAL_ADC_Start_DMA>
 8016448:	200009d4 	.word	0x200009d4
 801644c:	200009d6 	.word	0x200009d6
 8016450:	20001c98 	.word	0x20001c98

08016454 <ADC_startSampling>:
    HAL_TIM_Base_Start_IT(&htim7);
 8016454:	4801      	ldr	r0, [pc, #4]	@ (801645c <ADC_startSampling+0x8>)
 8016456:	f006 be4f 	b.w	801d0f8 <HAL_TIM_Base_Start_IT>
 801645a:	bf00      	nop
 801645c:	20001948 	.word	0x20001948

08016460 <ADC_getAINResistance>:
    if ( (channel != AIN_1_R) && (channel != AIN_2_R) )
 8016460:	2808      	cmp	r0, #8
{
 8016462:	b570      	push	{r4, r5, r6, lr}
 8016464:	4604      	mov	r4, r0
 8016466:	460e      	mov	r6, r1
    if ( (channel != AIN_1_R) && (channel != AIN_2_R) )
 8016468:	d03a      	beq.n	80164e0 <ADC_getAINResistance+0x80>
 801646a:	280a      	cmp	r0, #10
 801646c:	d13e      	bne.n	80164ec <ADC_getAINResistance+0x8c>
    uint16_t        pin = ( channel ==
 801646e:	2504      	movs	r5, #4
    HAL_GPIO_WritePin(port,
 8016470:	4823      	ldr	r0, [pc, #140]	@ (8016500 <ADC_getAINResistance+0xa0>)
 8016472:	2201      	movs	r2, #1
 8016474:	4629      	mov	r1, r5
 8016476:	f003 febf 	bl	801a1f8 <HAL_GPIO_WritePin>
    for ( uint16_t c = 0; c < holdTimeInConvCycles; c++ )
 801647a:	2000      	movs	r0, #0
 801647c:	4286      	cmp	r6, r0
 801647e:	d131      	bne.n	80164e4 <ADC_getAINResistance+0x84>
    HAL_GPIO_WritePin(port,
 8016480:	2200      	movs	r2, #0
 8016482:	481f      	ldr	r0, [pc, #124]	@ (8016500 <ADC_getAINResistance+0xa0>)
 8016484:	4629      	mov	r1, r5
 8016486:	f003 feb7 	bl	801a1f8 <HAL_GPIO_WritePin>
    ADC_Channels    ch = ( channel == AIN_1_R ) ? AIN_1 : AIN_2;
 801648a:	2c08      	cmp	r4, #8
 801648c:	bf14      	ite	ne
 801648e:	2205      	movne	r2, #5
 8016490:	2204      	moveq	r2, #4
    float           Vout = adcSensorValues[ch];
 8016492:	4b1c      	ldr	r3, [pc, #112]	@ (8016504 <ADC_getAINResistance+0xa4>)
 8016494:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8016498:	ee06 3a90 	vmov	s13, r3
    Vout *= _getVRes();                                     // [V]
 801649c:	f7ff fee8 	bl	8016270 <_getVRes>
    float           Vout = adcSensorValues[ch];
 80164a0:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Vout *= AIN_CORRECTION_FACTOR;
 80164a4:	ee66 7a80 	vmul.f32	s15, s13, s0
 80164a8:	ee17 0a90 	vmov	r0, s15
 80164ac:	f7ff f974 	bl	8015798 <__aeabi_f2d>
 80164b0:	a311      	add	r3, pc, #68	@ (adr r3, 80164f8 <ADC_getAINResistance+0x98>)
 80164b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b6:	f7ff f9c7 	bl	8015848 <__aeabi_dmul>
 80164ba:	f7ff fcbd 	bl	8015e38 <__aeabi_d2f>
 80164be:	ee07 0a10 	vmov	s14, r0
    float           R2 = R1 * ( 1 / (( Vin / Vout ) - 1 )); // [Ohm]
 80164c2:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80164c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80164ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80164ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164d2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80164d6:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8016508 <ADC_getAINResistance+0xa8>
 80164da:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80164de:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t        pin = ( channel ==
 80164e0:	2580      	movs	r5, #128	@ 0x80
 80164e2:	e7c5      	b.n	8016470 <ADC_getAINResistance+0x10>
        _waitUntilConvCplt();
 80164e4:	f7ff fea2 	bl	801622c <_waitUntilConvCplt>
    for ( uint16_t c = 0; c < holdTimeInConvCycles; c++ )
 80164e8:	3001      	adds	r0, #1
 80164ea:	e7c7      	b.n	801647c <ADC_getAINResistance+0x1c>
        return -1;
 80164ec:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80164f0:	e7f5      	b.n	80164de <ADC_getAINResistance+0x7e>
 80164f2:	bf00      	nop
 80164f4:	f3af 8000 	nop.w
 80164f8:	a5119ce0 	.word	0xa5119ce0
 80164fc:	3ffac1bd 	.word	0x3ffac1bd
 8016500:	48000c00 	.word	0x48000c00
 8016504:	200009d6 	.word	0x200009d6
 8016508:	43540000 	.word	0x43540000
 801650c:	00000000 	.word	0x00000000

08016510 <ADC_getAINCurrent>:
    if ( (channel != AIN_1_I) && (channel != AIN_2_I) )
 8016510:	2809      	cmp	r0, #9
{
 8016512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016514:	4604      	mov	r4, r0
 8016516:	460f      	mov	r7, r1
    if ( (channel != AIN_1_I) && (channel != AIN_2_I) )
 8016518:	d032      	beq.n	8016580 <ADC_getAINCurrent+0x70>
 801651a:	280b      	cmp	r0, #11
 801651c:	d137      	bne.n	801658e <ADC_getAINCurrent+0x7e>
 801651e:	4d20      	ldr	r5, [pc, #128]	@ (80165a0 <ADC_getAINCurrent+0x90>)
    uint16_t        pin = ( channel ==
 8016520:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
    HAL_GPIO_WritePin(port, pin,
 8016524:	4628      	mov	r0, r5
 8016526:	2201      	movs	r2, #1
 8016528:	4631      	mov	r1, r6
 801652a:	f003 fe65 	bl	801a1f8 <HAL_GPIO_WritePin>
    for ( uint16_t c = 0; c < holdTimeInConvCycles; c++ )
 801652e:	2000      	movs	r0, #0
 8016530:	4287      	cmp	r7, r0
 8016532:	d128      	bne.n	8016586 <ADC_getAINCurrent+0x76>
    HAL_GPIO_WritePin(port, pin,
 8016534:	2200      	movs	r2, #0
 8016536:	4631      	mov	r1, r6
 8016538:	4628      	mov	r0, r5
 801653a:	f003 fe5d 	bl	801a1f8 <HAL_GPIO_WritePin>
    ADC_Channels    ch = ( channel == AIN_1_I ) ? AIN_1 : AIN_2;
 801653e:	2c09      	cmp	r4, #9
 8016540:	bf14      	ite	ne
 8016542:	2205      	movne	r2, #5
 8016544:	2204      	moveq	r2, #4
    float           value = adcSensorValues[ch];
 8016546:	4b17      	ldr	r3, [pc, #92]	@ (80165a4 <ADC_getAINCurrent+0x94>)
 8016548:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801654c:	ee06 3a90 	vmov	s13, r3
    value *= _getVRes();     // [V]
 8016550:	f7ff fe8e 	bl	8016270 <_getVRes>
    float           value = adcSensorValues[ch];
 8016554:	eef8 6a66 	vcvt.f32.u32	s13, s13
    value *= AIN_CORRECTION_FACTOR;
 8016558:	ee66 7a80 	vmul.f32	s15, s13, s0
 801655c:	ee17 0a90 	vmov	r0, s15
 8016560:	f7ff f91a 	bl	8015798 <__aeabi_f2d>
 8016564:	a30c      	add	r3, pc, #48	@ (adr r3, 8016598 <ADC_getAINCurrent+0x88>)
 8016566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801656a:	f7ff f96d 	bl	8015848 <__aeabi_dmul>
 801656e:	f7ff fc63 	bl	8015e38 <__aeabi_d2f>
    value /= R;              // [A]
 8016572:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80165a8 <ADC_getAINCurrent+0x98>
    value *= AIN_CORRECTION_FACTOR;
 8016576:	ee07 0a10 	vmov	s14, r0
    value /= R;              // [A]
 801657a:	ee87 0a27 	vdiv.f32	s0, s14, s15
}
 801657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016580:	4d0a      	ldr	r5, [pc, #40]	@ (80165ac <ADC_getAINCurrent+0x9c>)
    uint16_t        pin = ( channel ==
 8016582:	2620      	movs	r6, #32
 8016584:	e7ce      	b.n	8016524 <ADC_getAINCurrent+0x14>
        _waitUntilConvCplt();
 8016586:	f7ff fe51 	bl	801622c <_waitUntilConvCplt>
    for ( uint16_t c = 0; c < holdTimeInConvCycles; c++ )
 801658a:	3001      	adds	r0, #1
 801658c:	e7d0      	b.n	8016530 <ADC_getAINCurrent+0x20>
        return -1;
 801658e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8016592:	e7f4      	b.n	801657e <ADC_getAINCurrent+0x6e>
 8016594:	f3af 8000 	nop.w
 8016598:	a5119ce0 	.word	0xa5119ce0
 801659c:	3ffac1bd 	.word	0x3ffac1bd
 80165a0:	48000800 	.word	0x48000800
 80165a4:	200009d6 	.word	0x200009d6
 80165a8:	43480000 	.word	0x43480000
 80165ac:	48000400 	.word	0x48000400

080165b0 <ADC_getAbsValue>:
{
 80165b0:	b508      	push	{r3, lr}
    switch ( channel )
 80165b2:	1e83      	subs	r3, r0, #2
 80165b4:	2b09      	cmp	r3, #9
 80165b6:	d823      	bhi.n	8016600 <ADC_getAbsValue+0x50>
 80165b8:	e8df f003 	tbb	[pc, r3]
 80165bc:	1a092205 	.word	0x1a092205
 80165c0:	140e2222 	.word	0x140e2222
 80165c4:	1f1c      	.short	0x1f1c
}
 80165c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            value = _getVinMEAS();
 80165ca:	f7ff bef1 	b.w	80163b0 <_getVinMEAS>
    if ( channel != AIN_1 && channel != AIN_2 )
 80165ce:	2004      	movs	r0, #4
}
 80165d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80165d4:	f7ff be58 	b.w	8016288 <ADC_getAINVoltage.part.0>
            value = ADC_getAINResistance(AIN_1_R, 1);
 80165d8:	2101      	movs	r1, #1
 80165da:	2008      	movs	r0, #8
}
 80165dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            value = ADC_getAINResistance(AIN_2_R, 1);
 80165e0:	f7ff bf3e 	b.w	8016460 <ADC_getAINResistance>
            value = ADC_getAINCurrent(AIN_1_I, 1);
 80165e4:	2101      	movs	r1, #1
 80165e6:	2009      	movs	r0, #9
}
 80165e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            value = ADC_getAINCurrent(AIN_2_I, 1);
 80165ec:	f7ff bf90 	b.w	8016510 <ADC_getAINCurrent>
    if ( channel != AIN_1 && channel != AIN_2 )
 80165f0:	2005      	movs	r0, #5
 80165f2:	e7ed      	b.n	80165d0 <ADC_getAbsValue+0x20>
            value = ADC_getAINResistance(AIN_2_R, 1);
 80165f4:	2101      	movs	r1, #1
 80165f6:	200a      	movs	r0, #10
 80165f8:	e7f0      	b.n	80165dc <ADC_getAbsValue+0x2c>
            value = ADC_getAINCurrent(AIN_2_I, 1);
 80165fa:	2101      	movs	r1, #1
 80165fc:	200b      	movs	r0, #11
 80165fe:	e7f3      	b.n	80165e8 <ADC_getAbsValue+0x38>
            value = adcSensorValues[channel] * _getVRes();
 8016600:	4b05      	ldr	r3, [pc, #20]	@ (8016618 <ADC_getAbsValue+0x68>)
 8016602:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8016606:	ee06 3a90 	vmov	s13, r3
 801660a:	f7ff fe31 	bl	8016270 <_getVRes>
 801660e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8016612:	ee26 0a80 	vmul.f32	s0, s13, s0
 8016616:	bd08      	pop	{r3, pc}
 8016618:	200009d6 	.word	0x200009d6

0801661c <ADC_startTask>:
{
 801661c:	b58f      	push	{r0, r1, r2, r3, r7, lr}
        SupplyVoltage = ADC_getAbsValue(VIN_MEAS);
 801661e:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 80166ec <ADC_startTask+0xd0>
        switch(analog_config[0])
 8016622:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 80166f0 <ADC_startTask+0xd4>
        osDelay(1000);
 8016626:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801662a:	f00b f9f9 	bl	8021a20 <osDelay>
            value = _getVinMEAS();
 801662e:	f7ff febf 	bl	80163b0 <_getVinMEAS>
        SupplyVoltage = ADC_getAbsValue(VIN_MEAS);
 8016632:	ed89 0a00 	vstr	s0, [r9]
    _waitUntilConvCplt();
 8016636:	f7ff fdf9 	bl	801622c <_waitUntilConvCplt>
        return _calculateDisplayTemperature();
 801663a:	f7ff fe47 	bl	80162cc <_calculateDisplayTemperature>
        LCD_temperature = ADC_getTempValue(DISP_TEMP);
 801663e:	4b27      	ldr	r3, [pc, #156]	@ (80166dc <ADC_startTask+0xc0>)
 8016640:	ed83 0a00 	vstr	s0, [r3]
        switch(analog_config[0])
 8016644:	f898 3000 	ldrb.w	r3, [r8]
 8016648:	2b02      	cmp	r3, #2
 801664a:	d007      	beq.n	801665c <ADC_startTask+0x40>
 801664c:	2b03      	cmp	r3, #3
 801664e:	d017      	beq.n	8016680 <ADC_startTask+0x64>
 8016650:	2b01      	cmp	r3, #1
 8016652:	d109      	bne.n	8016668 <ADC_startTask+0x4c>
				analogInput1value = ADC_getAbsValue(AIN_1_R);
 8016654:	2008      	movs	r0, #8
				analogInput1value = ADC_getAbsValue(AIN_1_I);
 8016656:	f7ff ffab 	bl	80165b0 <ADC_getAbsValue>
 801665a:	e002      	b.n	8016662 <ADC_startTask+0x46>
    if ( channel != AIN_1 && channel != AIN_2 )
 801665c:	2004      	movs	r0, #4
 801665e:	f7ff fe13 	bl	8016288 <ADC_getAINVoltage.part.0>
				analogInput1value = ADC_getAbsValue(AIN_1_I);
 8016662:	4b1f      	ldr	r3, [pc, #124]	@ (80166e0 <ADC_startTask+0xc4>)
 8016664:	ed83 0a00 	vstr	s0, [r3]
		switch(analog_config[1])
 8016668:	f898 3001 	ldrb.w	r3, [r8, #1]
 801666c:	2b02      	cmp	r3, #2
 801666e:	d009      	beq.n	8016684 <ADC_startTask+0x68>
 8016670:	2b03      	cmp	r3, #3
 8016672:	d031      	beq.n	80166d8 <ADC_startTask+0xbc>
 8016674:	2b01      	cmp	r3, #1
 8016676:	d10b      	bne.n	8016690 <ADC_startTask+0x74>
				analogInput2value = ADC_getAbsValue(AIN_2_R);
 8016678:	200a      	movs	r0, #10
				analogInput2value = ADC_getAbsValue(AIN_2_I);
 801667a:	f7ff ff99 	bl	80165b0 <ADC_getAbsValue>
 801667e:	e004      	b.n	801668a <ADC_startTask+0x6e>
				analogInput1value = ADC_getAbsValue(AIN_1_I);
 8016680:	2009      	movs	r0, #9
 8016682:	e7e8      	b.n	8016656 <ADC_startTask+0x3a>
    if ( channel != AIN_1 && channel != AIN_2 )
 8016684:	2005      	movs	r0, #5
 8016686:	f7ff fdff 	bl	8016288 <ADC_getAINVoltage.part.0>
				analogInput2value = ADC_getAbsValue(AIN_2_I);
 801668a:	4b16      	ldr	r3, [pc, #88]	@ (80166e4 <ADC_startTask+0xc8>)
 801668c:	ed83 0a00 	vstr	s0, [r3]
    _waitUntilConvCplt();
 8016690:	f7ff fdcc 	bl	801622c <_waitUntilConvCplt>
        return _calculateInternalTemperature();
 8016694:	f7ff fe54 	bl	8016340 <_calculateInternalTemperature>
 8016698:	ee10 0a10 	vmov	r0, s0
		printf("MCU temp: %2.0f  Display temp: %2.0f  Vin: %2.1f\n\r",
 801669c:	f7ff f87c 	bl	8015798 <__aeabi_f2d>
    _waitUntilConvCplt();
 80166a0:	f7ff fdc4 	bl	801622c <_waitUntilConvCplt>
		printf("MCU temp: %2.0f  Display temp: %2.0f  Vin: %2.1f\n\r",
 80166a4:	4604      	mov	r4, r0
 80166a6:	460d      	mov	r5, r1
        return _calculateDisplayTemperature();
 80166a8:	f7ff fe10 	bl	80162cc <_calculateDisplayTemperature>
 80166ac:	ee10 0a10 	vmov	r0, s0
		printf("MCU temp: %2.0f  Display temp: %2.0f  Vin: %2.1f\n\r",
 80166b0:	f7ff f872 	bl	8015798 <__aeabi_f2d>
 80166b4:	4606      	mov	r6, r0
 80166b6:	460f      	mov	r7, r1
            value = _getVinMEAS();
 80166b8:	f7ff fe7a 	bl	80163b0 <_getVinMEAS>
 80166bc:	ee10 0a10 	vmov	r0, s0
		printf("MCU temp: %2.0f  Display temp: %2.0f  Vin: %2.1f\n\r",
 80166c0:	f7ff f86a 	bl	8015798 <__aeabi_f2d>
 80166c4:	e9cd 6700 	strd	r6, r7, [sp]
 80166c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80166cc:	4622      	mov	r2, r4
 80166ce:	462b      	mov	r3, r5
 80166d0:	4805      	ldr	r0, [pc, #20]	@ (80166e8 <ADC_startTask+0xcc>)
 80166d2:	f026 fdcb 	bl	803d26c <iprintf>
        osDelay(1000);
 80166d6:	e7a6      	b.n	8016626 <ADC_startTask+0xa>
				analogInput2value = ADC_getAbsValue(AIN_2_I);
 80166d8:	200b      	movs	r0, #11
 80166da:	e7ce      	b.n	801667a <ADC_startTask+0x5e>
 80166dc:	20001ee4 	.word	0x20001ee4
 80166e0:	20001ee0 	.word	0x20001ee0
 80166e4:	20001edc 	.word	0x20001edc
 80166e8:	0803f660 	.word	0x0803f660
 80166ec:	20001ee8 	.word	0x20001ee8
 80166f0:	20001eec 	.word	0x20001eec

080166f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType() const
    {
        return Event::EVENT_CLICK;
    }
 80166f4:	2000      	movs	r0, #0
 80166f6:	4770      	bx	lr

080166f8 <_ZN8touchgfx10ClickEventD1Ev>:
class ClickEvent : public Event
 80166f8:	4770      	bx	lr

080166fa <_ZN8touchgfx10ClickEventD0Ev>:
 80166fa:	b510      	push	{r4, lr}
 80166fc:	210c      	movs	r1, #12
 80166fe:	4604      	mov	r4, r0
 8016700:	f025 fef3 	bl	803c4ea <_ZdlPvj>
 8016704:	4620      	mov	r0, r4
 8016706:	bd10      	pop	{r4, pc}

08016708 <_ZN13ButtonHandler9handleKeyEh>:
 *
 *******************************************************************************/
#include "button_handler.hpp"

void ButtonHandler::handleKey( uint8_t key ) {
  if (key > numberOfButtons) {
 8016708:	2904      	cmp	r1, #4
void ButtonHandler::handleKey( uint8_t key ) {
 801670a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801670c:	4604      	mov	r4, r0
  if (key > numberOfButtons) {
 801670e:	d818      	bhi.n	8016742 <_ZN13ButtonHandler9handleKeyEh+0x3a>
    return;
  }

  currentButton = buttons[key];
 8016710:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        : clickEventType(type), clickX(x), clickY(y), clickForce(force)
 8016714:	4b0c      	ldr	r3, [pc, #48]	@ (8016748 <_ZN13ButtonHandler9handleKeyEh+0x40>)
 8016716:	6848      	ldr	r0, [r1, #4]
 8016718:	9301      	str	r3, [sp, #4]
 801671a:	2300      	movs	r3, #0
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
    {
        return rect.x;
 801671c:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
    {
        return rect.y;
 8016720:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8016724:	f88d 3008 	strb.w	r3, [sp, #8]
 8016728:	f8ad 300e 	strh.w	r3, [sp, #14]
  ClickEvent ev = ClickEvent(ClickEvent::PRESSED, currentButton->getX(),
                             currentButton->getY());
  currentButton->handleClickEvent(ev);
 801672c:	6803      	ldr	r3, [r0, #0]
 801672e:	f8ad 100a 	strh.w	r1, [sp, #10]
 8016732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  currentButton = buttons[key];
 8016734:	6160      	str	r0, [r4, #20]
 8016736:	f8ad 200c 	strh.w	r2, [sp, #12]
  currentButton->handleClickEvent(ev);
 801673a:	a901      	add	r1, sp, #4
 801673c:	4798      	blx	r3
  waitForDelay = true;
 801673e:	2301      	movs	r3, #1
 8016740:	7623      	strb	r3, [r4, #24]
}
 8016742:	b004      	add	sp, #16
 8016744:	bd10      	pop	{r4, pc}
 8016746:	bf00      	nop
 8016748:	08041d58 	.word	0x08041d58

0801674c <DMA2D_Start>:
uint32_t DMA2D_GetBufferAddress() {
	return (uint32_t) dma2dBuffer;
}

HAL_StatusTypeDef DMA2D_Start(uint32_t src, uint32_t dest, uint32_t src_offset,
		uint32_t dest_offset) {
 801674c:	b530      	push	{r4, r5, lr}
	/* Process locked */
	__HAL_LOCK(&hdma2d);
 801674e:	4c0b      	ldr	r4, [pc, #44]	@ (801677c <DMA2D_Start+0x30>)
 8016750:	f894 5058 	ldrb.w	r5, [r4, #88]	@ 0x58
 8016754:	2d01      	cmp	r5, #1
 8016756:	d00f      	beq.n	8016778 <DMA2D_Start+0x2c>
 8016758:	2501      	movs	r5, #1
 801675a:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58

	WRITE_REG(DMA2D->FGMAR, src);
 801675e:	4d08      	ldr	r5, [pc, #32]	@ (8016780 <DMA2D_Start+0x34>)
 8016760:	60e8      	str	r0, [r5, #12]
	WRITE_REG(DMA2D->OMAR, dest);
 8016762:	63e9      	str	r1, [r5, #60]	@ 0x3c
	WRITE_REG(DMA2D->FGOR, src_offset);
 8016764:	612a      	str	r2, [r5, #16]
	WRITE_REG(DMA2D->OOR, dest_offset);
 8016766:	642b      	str	r3, [r5, #64]	@ 0x40

	/* Change DMA2D peripheral state */
	hdma2d.State = HAL_DMA2D_STATE_BUSY;

	/* Enable the Peripheral */
	__HAL_DMA2D_ENABLE(&hdma2d);
 8016768:	6822      	ldr	r2, [r4, #0]
	hdma2d.State = HAL_DMA2D_STATE_BUSY;
 801676a:	2302      	movs	r3, #2
 801676c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
	__HAL_DMA2D_ENABLE(&hdma2d);
 8016770:	6813      	ldr	r3, [r2, #0]
 8016772:	f043 0301 	orr.w	r3, r3, #1
 8016776:	6013      	str	r3, [r2, #0]

	return HAL_BUSY;
}
 8016778:	2002      	movs	r0, #2
 801677a:	bd30      	pop	{r4, r5, pc}
 801677c:	20001b8c 	.word	0x20001b8c
 8016780:	4002b000 	.word	0x4002b000

08016784 <DMA2D_HFlip>:

void DMA2D_HFlip(uint32_t fb) {
 8016784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t destOffset = 0;

	// This nlr setup is constant for all operations on columns.
	// Treat each pixel as a line with width=1, so we can apply "offset" values for
	// source and destination
	WRITE_REG(hdma2d.Instance->NLR, (LCD_HEIGHT| (1 << DMA2D_NLR_PL_Pos)));
 8016788:	4d19      	ldr	r5, [pc, #100]	@ (80167f0 <DMA2D_HFlip+0x6c>)
 801678a:	4a1a      	ldr	r2, [pc, #104]	@ (80167f4 <DMA2D_HFlip+0x70>)
 801678c:	682b      	ldr	r3, [r5, #0]
		srcOffset = LCD_WIDTH - 1;
		destOffset = 0;
		srcAddr = left_column_addr;
		destAddr = (uint32_t) dma2dBuffer;

		DMA2D_Start(srcAddr, destAddr, srcOffset, destOffset);
 801678e:	4f1a      	ldr	r7, [pc, #104]	@ (80167f8 <DMA2D_HFlip+0x74>)
	WRITE_REG(hdma2d.Instance->NLR, (LCD_HEIGHT| (1 << DMA2D_NLR_PL_Pos)));
 8016790:	645a      	str	r2, [r3, #68]	@ 0x44
void DMA2D_HFlip(uint32_t fb) {
 8016792:	4604      	mov	r4, r0
 8016794:	f500 78f0 	add.w	r8, r0, #480	@ 0x1e0
 8016798:	ea4f 0940 	mov.w	r9, r0, lsl #1
		DMA2D_Start(srcAddr, destAddr, srcOffset, destOffset);
 801679c:	2300      	movs	r3, #0
 801679e:	f240 123f 	movw	r2, #319	@ 0x13f
 80167a2:	4639      	mov	r1, r7
 80167a4:	4620      	mov	r0, r4
 80167a6:	f7ff ffd1 	bl	801674c <DMA2D_Start>
		uint32_t right_column_addr = fb
 80167aa:	f209 36bd 	addw	r6, r9, #957	@ 0x3bd
		HAL_DMA2D_PollForTransfer(&hdma2d, 1);
 80167ae:	2101      	movs	r1, #1
 80167b0:	4628      	mov	r0, r5
 80167b2:	f003 faf0 	bl	8019d96 <HAL_DMA2D_PollForTransfer>
		uint32_t right_column_addr = fb
 80167b6:	1b36      	subs	r6, r6, r4
		srcOffset = LCD_WIDTH - 1;
		destOffset = LCD_WIDTH - 1;
		srcAddr = right_column_addr;
		destAddr = left_column_addr;

		DMA2D_Start(srcAddr, destAddr, srcOffset, destOffset);
 80167b8:	f240 133f 	movw	r3, #319	@ 0x13f
 80167bc:	461a      	mov	r2, r3
 80167be:	4621      	mov	r1, r4
 80167c0:	4630      	mov	r0, r6
 80167c2:	f7ff ffc3 	bl	801674c <DMA2D_Start>
		HAL_DMA2D_PollForTransfer(&hdma2d, 1);
 80167c6:	2101      	movs	r1, #1
 80167c8:	4628      	mov	r0, r5
 80167ca:	f003 fae4 	bl	8019d96 <HAL_DMA2D_PollForTransfer>
		srcAddr = (uint32_t) dma2dBuffer;
		destAddr = right_column_addr;
		srcOffset = 0;

		// destOffset as above
		DMA2D_Start(srcAddr, destAddr, srcOffset, destOffset);
 80167ce:	f240 133f 	movw	r3, #319	@ 0x13f
 80167d2:	2200      	movs	r2, #0
 80167d4:	4631      	mov	r1, r6
 80167d6:	4638      	mov	r0, r7
 80167d8:	f7ff ffb8 	bl	801674c <DMA2D_Start>
	for (uint16_t column = 0; column < LCD_WIDTH / 2; column++) {
 80167dc:	3403      	adds	r4, #3
		HAL_DMA2D_PollForTransfer(&hdma2d, 1);
 80167de:	2101      	movs	r1, #1
 80167e0:	4628      	mov	r0, r5
 80167e2:	f003 fad8 	bl	8019d96 <HAL_DMA2D_PollForTransfer>
	for (uint16_t column = 0; column < LCD_WIDTH / 2; column++) {
 80167e6:	4544      	cmp	r4, r8
 80167e8:	d1d8      	bne.n	801679c <DMA2D_HFlip+0x18>
	}
}
 80167ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167ee:	bf00      	nop
 80167f0:	20001b8c 	.word	0x20001b8c
 80167f4:	000100f0 	.word	0x000100f0
 80167f8:	200009e8 	.word	0x200009e8

080167fc <DMA2D_VFlip>:

void DMA2D_VFlip(uint32_t fb) {
 80167fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016800:	f500 3560 	add.w	r5, r0, #229376	@ 0x38000
	// need to set any offset values.
	for (uint16_t row = 0; row < LCD_HEIGHT / 2; row++) {
		// copy top row to buffer
		srcAddr = fb + row * LCD_WIDTH * PIXEL_BYTESIZE;
		destAddr = (uint32_t) dma2dBuffer;
		HAL_DMA2D_Start(&hdma2d, srcAddr, destAddr, LCD_WIDTH, 1);
 8016804:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8016874 <DMA2D_VFlip+0x78>
 8016808:	4e19      	ldr	r6, [pc, #100]	@ (8016870 <DMA2D_VFlip+0x74>)
void DMA2D_VFlip(uint32_t fb) {
 801680a:	4604      	mov	r4, r0
 801680c:	3540      	adds	r5, #64	@ 0x40
 801680e:	f500 39e1 	add.w	r9, r0, #115200	@ 0x1c200
		HAL_DMA2D_Start(&hdma2d, srcAddr, destAddr, LCD_WIDTH, 1);
 8016812:	2701      	movs	r7, #1
 8016814:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8016818:	4642      	mov	r2, r8
 801681a:	4621      	mov	r1, r4
 801681c:	9700      	str	r7, [sp, #0]
 801681e:	4630      	mov	r0, r6
 8016820:	f003 fa9f 	bl	8019d62 <HAL_DMA2D_Start>
		HAL_DMA2D_PollForTransfer(&hdma2d, 1);
 8016824:	4639      	mov	r1, r7
 8016826:	4630      	mov	r0, r6
 8016828:	f003 fab5 	bl	8019d96 <HAL_DMA2D_PollForTransfer>

		// bottom row to top
		destAddr = srcAddr;
		srcAddr = fb + (LCD_HEIGHT - row - 1) * LCD_WIDTH * PIXEL_BYTESIZE;
		HAL_DMA2D_Start(&hdma2d, srcAddr, destAddr, LCD_WIDTH, 1);
 801682c:	4622      	mov	r2, r4
 801682e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8016832:	4629      	mov	r1, r5
 8016834:	9700      	str	r7, [sp, #0]
 8016836:	4630      	mov	r0, r6
 8016838:	f003 fa93 	bl	8019d62 <HAL_DMA2D_Start>
		HAL_DMA2D_PollForTransfer(&hdma2d, 1);
 801683c:	4639      	mov	r1, r7
 801683e:	4630      	mov	r0, r6
 8016840:	f003 faa9 	bl	8019d96 <HAL_DMA2D_PollForTransfer>

		// copy buffer to bottom
		destAddr = srcAddr;
		srcAddr = (uint32_t) dma2dBuffer;
		HAL_DMA2D_Start(&hdma2d, srcAddr, destAddr, LCD_WIDTH, 1);
 8016844:	462a      	mov	r2, r5
 8016846:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 801684a:	4641      	mov	r1, r8
 801684c:	9700      	str	r7, [sp, #0]
 801684e:	4630      	mov	r0, r6
 8016850:	f003 fa87 	bl	8019d62 <HAL_DMA2D_Start>
	for (uint16_t row = 0; row < LCD_HEIGHT / 2; row++) {
 8016854:	f504 7470 	add.w	r4, r4, #960	@ 0x3c0
		HAL_DMA2D_PollForTransfer(&hdma2d, 1);
 8016858:	4639      	mov	r1, r7
 801685a:	4630      	mov	r0, r6
 801685c:	f003 fa9b 	bl	8019d96 <HAL_DMA2D_PollForTransfer>
	for (uint16_t row = 0; row < LCD_HEIGHT / 2; row++) {
 8016860:	454c      	cmp	r4, r9
 8016862:	f5a5 7570 	sub.w	r5, r5, #960	@ 0x3c0
 8016866:	d1d4      	bne.n	8016812 <DMA2D_VFlip+0x16>
	}

}
 8016868:	b003      	add	sp, #12
 801686a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801686e:	bf00      	nop
 8016870:	20001b8c 	.word	0x20001b8c
 8016874:	200009e8 	.word	0x200009e8

08016878 <_syncFS>:
 * @return lfs error code
 **************************************************************************************************/
static int _syncFS(const struct lfs_config *c)
{
    return LFS_ERR_OK;
}
 8016878:	2000      	movs	r0, #0
 801687a:	4770      	bx	lr

0801687c <_eraseBlock>:
{
 801687c:	b508      	push	{r3, lr}
    uint32_t  address = block * c->block_size + LITTLEFS_START_ADDRESS;
 801687e:	69c3      	ldr	r3, [r0, #28]
 8016880:	4359      	muls	r1, r3
    if ( MX25L32_EraseSector(address) == FLASHDRV_OK )
 8016882:	f501 1013 	add.w	r0, r1, #2408448	@ 0x24c000
 8016886:	f500 5000 	add.w	r0, r0, #8192	@ 0x2000
 801688a:	f001 fe2f 	bl	80184ec <MX25L32_EraseSector>
    return LFS_ERR_IO;
 801688e:	2800      	cmp	r0, #0
}
 8016890:	bf14      	ite	ne
 8016892:	f06f 0004 	mvnne.w	r0, #4
 8016896:	2000      	moveq	r0, #0
 8016898:	bd08      	pop	{r3, pc}

0801689a <_programBlock>:
{
 801689a:	b538      	push	{r3, r4, r5, lr}
    uint32_t  address = block * c->block_size + LITTLEFS_START_ADDRESS + off;
 801689c:	69c0      	ldr	r0, [r0, #28]
 801689e:	f502 1413 	add.w	r4, r2, #2408448	@ 0x24c000
{
 80168a2:	460d      	mov	r5, r1
    uint32_t  address = block * c->block_size + LITTLEFS_START_ADDRESS + off;
 80168a4:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
    if ( MX25L32_PageProgramX(address, (uint8_t*) buffer, size) == FLASHDRV_OK )
 80168a8:	9a04      	ldr	r2, [sp, #16]
 80168aa:	4619      	mov	r1, r3
 80168ac:	fb00 4005 	mla	r0, r0, r5, r4
 80168b0:	f001 fdc8 	bl	8018444 <MX25L32_PageProgramX>
    return LFS_ERR_IO;
 80168b4:	2800      	cmp	r0, #0
}
 80168b6:	bf14      	ite	ne
 80168b8:	f06f 0004 	mvnne.w	r0, #4
 80168bc:	2000      	moveq	r0, #0
 80168be:	bd38      	pop	{r3, r4, r5, pc}

080168c0 <_readBlock>:
{
 80168c0:	b538      	push	{r3, r4, r5, lr}
    uint32_t         address = block * c->block_size + LITTLEFS_START_ADDRESS + off;
 80168c2:	69c0      	ldr	r0, [r0, #28]
 80168c4:	f502 1413 	add.w	r4, r2, #2408448	@ 0x24c000
{
 80168c8:	460d      	mov	r5, r1
    uint32_t         address = block * c->block_size + LITTLEFS_START_ADDRESS + off;
 80168ca:	f504 5400 	add.w	r4, r4, #8192	@ 0x2000
    FlashDrv_Status  status = MX25L32_ReadX(address, (uint8_t*) buffer, size);
 80168ce:	9a04      	ldr	r2, [sp, #16]
 80168d0:	4619      	mov	r1, r3
 80168d2:	fb00 4005 	mla	r0, r0, r5, r4
 80168d6:	f001 fd67 	bl	80183a8 <MX25L32_ReadX>
    return LFS_ERR_IO;
 80168da:	2800      	cmp	r0, #0
}
 80168dc:	bf14      	ite	ne
 80168de:	f06f 0004 	mvnne.w	r0, #4
 80168e2:	2000      	moveq	r0, #0
 80168e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080168e8 <_eraseFS.constprop.0>:
static int _eraseFS(const struct lfs_config *c)
 80168e8:	b570      	push	{r4, r5, r6, lr}
        result = _eraseBlock(c, b);
 80168ea:	4e06      	ldr	r6, [pc, #24]	@ (8016904 <_eraseFS.constprop.0+0x1c>)
static int _eraseFS(const struct lfs_config *c)
 80168ec:	2400      	movs	r4, #0
    for ( uint16_t b = 0; b < FS_BLOCK_COUNT; b++ )
 80168ee:	f240 15a1 	movw	r5, #417	@ 0x1a1
        result = _eraseBlock(c, b);
 80168f2:	4621      	mov	r1, r4
 80168f4:	4630      	mov	r0, r6
 80168f6:	f7ff ffc1 	bl	801687c <_eraseBlock>
        if ( result != LFS_ERR_OK )
 80168fa:	b910      	cbnz	r0, 8016902 <_eraseFS.constprop.0+0x1a>
    for ( uint16_t b = 0; b < FS_BLOCK_COUNT; b++ )
 80168fc:	3401      	adds	r4, #1
 80168fe:	42ac      	cmp	r4, r5
 8016900:	d1f7      	bne.n	80168f2 <_eraseFS.constprop.0+0xa>
}
 8016902:	bd70      	pop	{r4, r5, r6, pc}
 8016904:	2000162c 	.word	0x2000162c

08016908 <FS_getFS>:
 * @return filesystem object
 **************************************************************************************************/
lfs_t* FS_getFS(void)
{
    return &lfs;
}
 8016908:	4800      	ldr	r0, [pc, #0]	@ (801690c <FS_getFS+0x4>)
 801690a:	4770      	bx	lr
 801690c:	200016d4 	.word	0x200016d4

08016910 <FS_setUSBMountStatus>:
 * @brief FS_setUSBMountStatus
 * @param mounted
 **************************************************************************************************/
void FS_setUSBMountStatus(bool mounted)
{
    usbMounted = mounted;
 8016910:	4b01      	ldr	r3, [pc, #4]	@ (8016918 <FS_setUSBMountStatus+0x8>)
 8016912:	7018      	strb	r0, [r3, #0]
}
 8016914:	4770      	bx	lr
 8016916:	bf00      	nop
 8016918:	20001754 	.word	0x20001754

0801691c <FS_mount>:
/*!*************************************************************************************************
 * @brief FS_mount
 * @return lfs error code
 **************************************************************************************************/
int FS_mount(void)
{
 801691c:	b510      	push	{r4, lr}
    if ( fsMounted )
 801691e:	4c0e      	ldr	r4, [pc, #56]	@ (8016958 <FS_mount+0x3c>)
 8016920:	7823      	ldrb	r3, [r4, #0]
 8016922:	b10b      	cbz	r3, 8016928 <FS_mount+0xc>
    {
        return LFS_ERR_OK;         // aldready mounted, prevent double-mount, it will corrupt the fs
 8016924:	2000      	movs	r0, #0
            }
        }
    }

    return result;
}
 8016926:	bd10      	pop	{r4, pc}
    int  result = lfs_mount(&lfs, &cfg);
 8016928:	490c      	ldr	r1, [pc, #48]	@ (801695c <FS_mount+0x40>)
 801692a:	480d      	ldr	r0, [pc, #52]	@ (8016960 <FS_mount+0x44>)
 801692c:	f010 fa58 	bl	8026de0 <lfs_mount>
    if ( result != LFS_ERR_OK )
 8016930:	2800      	cmp	r0, #0
 8016932:	d0f7      	beq.n	8016924 <FS_mount+0x8>
        _eraseFS(&cfg);
 8016934:	f7ff ffd8 	bl	80168e8 <_eraseFS.constprop.0>
        if (( result = lfs_format(&lfs, &cfg)) == LFS_ERR_OK )
 8016938:	4908      	ldr	r1, [pc, #32]	@ (801695c <FS_mount+0x40>)
 801693a:	4809      	ldr	r0, [pc, #36]	@ (8016960 <FS_mount+0x44>)
 801693c:	f010 f9da 	bl	8026cf4 <lfs_format>
 8016940:	2800      	cmp	r0, #0
 8016942:	d1f0      	bne.n	8016926 <FS_mount+0xa>
            result = lfs_mount(&lfs, &cfg);
 8016944:	4905      	ldr	r1, [pc, #20]	@ (801695c <FS_mount+0x40>)
 8016946:	4806      	ldr	r0, [pc, #24]	@ (8016960 <FS_mount+0x44>)
 8016948:	f010 fa4a 	bl	8026de0 <lfs_mount>
            if ( result == LFS_ERR_OK )
 801694c:	2800      	cmp	r0, #0
 801694e:	d1ea      	bne.n	8016926 <FS_mount+0xa>
                fsMounted = true;
 8016950:	2301      	movs	r3, #1
 8016952:	7023      	strb	r3, [r4, #0]
 8016954:	e7e7      	b.n	8016926 <FS_mount+0xa>
 8016956:	bf00      	nop
 8016958:	20000da8 	.word	0x20000da8
 801695c:	2000162c 	.word	0x2000162c
 8016960:	200016d4 	.word	0x200016d4

08016964 <FS_Init>:
    cfg.context = NULL;
 8016964:	4b14      	ldr	r3, [pc, #80]	@ (80169b8 <FS_Init+0x54>)
    cfg.read = _readBlock;
 8016966:	4915      	ldr	r1, [pc, #84]	@ (80169bc <FS_Init+0x58>)
 8016968:	6059      	str	r1, [r3, #4]
    cfg.prog = _programBlock;
 801696a:	4915      	ldr	r1, [pc, #84]	@ (80169c0 <FS_Init+0x5c>)
 801696c:	6099      	str	r1, [r3, #8]
    cfg.erase = _eraseBlock;
 801696e:	4915      	ldr	r1, [pc, #84]	@ (80169c4 <FS_Init+0x60>)
 8016970:	60d9      	str	r1, [r3, #12]
    cfg.sync = _syncFS;
 8016972:	4915      	ldr	r1, [pc, #84]	@ (80169c8 <FS_Init+0x64>)
 8016974:	6119      	str	r1, [r3, #16]
    cfg.read_size = 1;         // no limit actually 1 - max-capacity
 8016976:	2101      	movs	r1, #1
    cfg.block_count = FS_BLOCK_COUNT;
 8016978:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    cfg.prog_size = 1;         // no limit actually 1-256 per command
 801697c:	e9c3 1105 	strd	r1, r1, [r3, #20]
    cfg.block_count = FS_BLOCK_COUNT;
 8016980:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8016984:	e9c3 0107 	strd	r0, r1, [r3, #28]
    cfg.block_cycles = 500;
 8016988:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801698c:	6259      	str	r1, [r3, #36]	@ 0x24
    cfg.cache_size = 1024;     //ToDo BSH 1024;
 801698e:	2080      	movs	r0, #128	@ 0x80
 8016990:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016994:	e9c3 100a 	strd	r1, r0, [r3, #40]	@ 0x28
    cfg.read_buffer = lfs_readBuf;
 8016998:	490c      	ldr	r1, [pc, #48]	@ (80169cc <FS_Init+0x68>)
 801699a:	6359      	str	r1, [r3, #52]	@ 0x34
    cfg.prog_buffer = lfs_progBuf;
 801699c:	490c      	ldr	r1, [pc, #48]	@ (80169d0 <FS_Init+0x6c>)
 801699e:	6399      	str	r1, [r3, #56]	@ 0x38
    cfg.lookahead_buffer = lfs_lookaheadBuf;
 80169a0:	490c      	ldr	r1, [pc, #48]	@ (80169d4 <FS_Init+0x70>)
    cfg.context = NULL;
 80169a2:	2200      	movs	r2, #0
    cfg.name_max = 0;
 80169a4:	e9c3 120f 	strd	r1, r2, [r3, #60]	@ 0x3c
    cfg.attr_max = 0;
 80169a8:	e9c3 2211 	strd	r2, r2, [r3, #68]	@ 0x44
    cfg.inline_max = 0;     // required
 80169ac:	e9c3 2213 	strd	r2, r2, [r3, #76]	@ 0x4c
    cfg.context = NULL;
 80169b0:	601a      	str	r2, [r3, #0]
    cfg.compact_thresh = 0;
 80169b2:	631a      	str	r2, [r3, #48]	@ 0x30
    int  result = FS_mount();
 80169b4:	f7ff bfb2 	b.w	801691c <FS_mount>
 80169b8:	2000162c 	.word	0x2000162c
 80169bc:	080168c1 	.word	0x080168c1
 80169c0:	0801689b 	.word	0x0801689b
 80169c4:	0801687d 	.word	0x0801687d
 80169c8:	08016879 	.word	0x08016879
 80169cc:	20001229 	.word	0x20001229
 80169d0:	20000e29 	.word	0x20000e29
 80169d4:	20000da9 	.word	0x20000da9

080169d8 <FS_umount>:
/*!*************************************************************************************************
 * @brief FS_umount
 * @return lfs error code
 **************************************************************************************************/
int FS_umount(void)
{
 80169d8:	b510      	push	{r4, lr}
    if ( !fsMounted )
 80169da:	4c04      	ldr	r4, [pc, #16]	@ (80169ec <FS_umount+0x14>)
 80169dc:	7820      	ldrb	r0, [r4, #0]
 80169de:	b120      	cbz	r0, 80169ea <FS_umount+0x12>
    {
        return LFS_ERR_OK;
    }

    int  result = lfs_unmount(&lfs);
 80169e0:	4803      	ldr	r0, [pc, #12]	@ (80169f0 <FS_umount+0x18>)
 80169e2:	f010 f9fb 	bl	8026ddc <lfs_unmount>

    if ( result == LFS_ERR_OK )
 80169e6:	b900      	cbnz	r0, 80169ea <FS_umount+0x12>
    {
        fsMounted = false;
 80169e8:	7020      	strb	r0, [r4, #0]
    }
    return result;
}
 80169ea:	bd10      	pop	{r4, pc}
 80169ec:	20000da8 	.word	0x20000da8
 80169f0:	200016d4 	.word	0x200016d4

080169f4 <_checkForCorruptFS>:
    if ( errorCode == LFS_ERR_CORRUPT )
 80169f4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
{
 80169f8:	b508      	push	{r3, lr}
    if ( errorCode == LFS_ERR_CORRUPT )
 80169fa:	d109      	bne.n	8016a10 <_checkForCorruptFS+0x1c>
        FS_umount();
 80169fc:	f7ff ffec 	bl	80169d8 <FS_umount>
        lfs_format(&lfs, &cfg);
 8016a00:	4904      	ldr	r1, [pc, #16]	@ (8016a14 <_checkForCorruptFS+0x20>)
 8016a02:	4805      	ldr	r0, [pc, #20]	@ (8016a18 <_checkForCorruptFS+0x24>)
 8016a04:	f010 f976 	bl	8026cf4 <lfs_format>
}
 8016a08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        result = FS_mount();
 8016a0c:	f7ff bf86 	b.w	801691c <FS_mount>
}
 8016a10:	bd08      	pop	{r3, pc}
 8016a12:	bf00      	nop
 8016a14:	2000162c 	.word	0x2000162c
 8016a18:	200016d4 	.word	0x200016d4

08016a1c <FS_read>:
 * @param buffer
 * @param size
 * @return lfs error code
 **************************************************************************************************/
int FS_read(const char *filepath, char *buffer, uint32_t size)
{
 8016a1c:	b570      	push	{r4, r5, r6, lr}
 8016a1e:	b0c2      	sub	sp, #264	@ 0x108
 8016a20:	4604      	mov	r4, r0
 8016a22:	460d      	mov	r5, r1
 8016a24:	4616      	mov	r6, r2
    int          result = LFS_ERR_IO;
    int          lfsOpenFlags = LFS_O_RDONLY; // make sure to have read permissions

    // check if file exists
    lfs_info     info;
    result = lfs_stat(&lfs, filepath, &info);
 8016a26:	4601      	mov	r1, r0
 8016a28:	466a      	mov	r2, sp
 8016a2a:	4813      	ldr	r0, [pc, #76]	@ (8016a78 <FS_read+0x5c>)
 8016a2c:	f010 faee 	bl	802700c <lfs_stat>

    if ( info.type == LFS_TYPE_DIR )
 8016a30:	f89d 2000 	ldrb.w	r2, [sp]
 8016a34:	2a02      	cmp	r2, #2
 8016a36:	d01b      	beq.n	8016a70 <FS_read+0x54>
    {
        return LFS_ERR_ISDIR;
    }

    if ( result != LFS_ERR_OK )
 8016a38:	b118      	cbz	r0, 8016a42 <FS_read+0x26>
    result = ( read < 0 ) ? read : result;
    result = _checkForCorruptFS(result);

    // close
    result = lfs_file_close(&lfs, &file);
    result = _checkForCorruptFS(result);
 8016a3a:	f7ff ffdb 	bl	80169f4 <_checkForCorruptFS>

    return result;
}
 8016a3e:	b042      	add	sp, #264	@ 0x108
 8016a40:	bd70      	pop	{r4, r5, r6, pc}
    if (( result = lfs_file_open(&lfs, &file, filepath, lfsOpenFlags))
 8016a42:	490e      	ldr	r1, [pc, #56]	@ (8016a7c <FS_read+0x60>)
 8016a44:	480c      	ldr	r0, [pc, #48]	@ (8016a78 <FS_read+0x5c>)
 8016a46:	2301      	movs	r3, #1
 8016a48:	4622      	mov	r2, r4
 8016a4a:	f010 faf5 	bl	8027038 <lfs_file_open>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	d1f3      	bne.n	8016a3a <FS_read+0x1e>
    lfs_ssize_t  read = lfs_file_read(&lfs, &file, buffer, size);
 8016a52:	490a      	ldr	r1, [pc, #40]	@ (8016a7c <FS_read+0x60>)
 8016a54:	4808      	ldr	r0, [pc, #32]	@ (8016a78 <FS_read+0x5c>)
 8016a56:	4633      	mov	r3, r6
 8016a58:	462a      	mov	r2, r5
 8016a5a:	f010 fb21 	bl	80270a0 <lfs_file_read>
    result = _checkForCorruptFS(result);
 8016a5e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 8016a62:	f7ff ffc7 	bl	80169f4 <_checkForCorruptFS>
    result = lfs_file_close(&lfs, &file);
 8016a66:	4905      	ldr	r1, [pc, #20]	@ (8016a7c <FS_read+0x60>)
 8016a68:	4803      	ldr	r0, [pc, #12]	@ (8016a78 <FS_read+0x5c>)
 8016a6a:	f010 fb01 	bl	8027070 <lfs_file_close>
 8016a6e:	e7e4      	b.n	8016a3a <FS_read+0x1e>
        return LFS_ERR_ISDIR;
 8016a70:	f06f 0014 	mvn.w	r0, #20
 8016a74:	e7e3      	b.n	8016a3e <FS_read+0x22>
 8016a76:	bf00      	nop
 8016a78:	200016d4 	.word	0x200016d4
 8016a7c:	20001680 	.word	0x20001680

08016a80 <FS_free>:
/*!*************************************************************************************************
 * @brief FS_free
 * @return number of free blocks or negative lfs error code
 **************************************************************************************************/
int32_t FS_free(void)
{
 8016a80:	b508      	push	{r3, lr}
    uint32_t  freeBlocks = 0;
    int32_t   usedBlocks = lfs_fs_size(&lfs);
 8016a82:	4804      	ldr	r0, [pc, #16]	@ (8016a94 <FS_free+0x14>)
 8016a84:	f010 fb58 	bl	8027138 <lfs_fs_size>

    if ( usedBlocks < 0 )
 8016a88:	2800      	cmp	r0, #0
    {
        // error
        return usedBlocks;
    }

    freeBlocks = cfg.block_count - usedBlocks;
 8016a8a:	bfa2      	ittt	ge
 8016a8c:	4b02      	ldrge	r3, [pc, #8]	@ (8016a98 <FS_free+0x18>)
 8016a8e:	6a1b      	ldrge	r3, [r3, #32]
 8016a90:	1a18      	subge	r0, r3, r0
    return freeBlocks;
}
 8016a92:	bd08      	pop	{r3, pc}
 8016a94:	200016d4 	.word	0x200016d4
 8016a98:	2000162c 	.word	0x2000162c

08016a9c <FS_write>:
{
 8016a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a9e:	b0c3      	sub	sp, #268	@ 0x10c
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	460e      	mov	r6, r1
 8016aa4:	4615      	mov	r5, r2
    result = lfs_stat(&lfs, filepath, &info);
 8016aa6:	4601      	mov	r1, r0
 8016aa8:	466a      	mov	r2, sp
 8016aaa:	481f      	ldr	r0, [pc, #124]	@ (8016b28 <FS_write+0x8c>)
{
 8016aac:	461f      	mov	r7, r3
    result = lfs_stat(&lfs, filepath, &info);
 8016aae:	f010 faad 	bl	802700c <lfs_stat>
    if ( info.type == LFS_TYPE_DIR )
 8016ab2:	f89d 3000 	ldrb.w	r3, [sp]
 8016ab6:	2b02      	cmp	r3, #2
 8016ab8:	d032      	beq.n	8016b20 <FS_write+0x84>
    uint32_t     freeSpace = FS_free() * cfg.block_size;
 8016aba:	f7ff ffe1 	bl	8016a80 <FS_free>
 8016abe:	4b1b      	ldr	r3, [pc, #108]	@ (8016b2c <FS_write+0x90>)
 8016ac0:	69db      	ldr	r3, [r3, #28]
 8016ac2:	4358      	muls	r0, r3
    if ( append )
 8016ac4:	b127      	cbz	r7, 8016ad0 <FS_write+0x34>
    if ( !hasSpace )
 8016ac6:	42a8      	cmp	r0, r5
 8016ac8:	d80b      	bhi.n	8016ae2 <FS_write+0x46>
        return LFS_ERR_NOSPC;
 8016aca:	f06f 041b 	mvn.w	r4, #27
 8016ace:	e014      	b.n	8016afa <FS_write+0x5e>
    else if ( size > info.size )
 8016ad0:	9b01      	ldr	r3, [sp, #4]
 8016ad2:	42ab      	cmp	r3, r5
 8016ad4:	d202      	bcs.n	8016adc <FS_write+0x40>
        hasSpace = ( freeSpace >= ( size - info.size )) ? true : false;
 8016ad6:	1aeb      	subs	r3, r5, r3
    if ( !hasSpace )
 8016ad8:	4283      	cmp	r3, r0
 8016ada:	d8f6      	bhi.n	8016aca <FS_write+0x2e>
    int          lfsOpenFlags = LFS_O_RDWR | LFS_O_CREAT; // make sure to have
 8016adc:	f240 1303 	movw	r3, #259	@ 0x103
 8016ae0:	e001      	b.n	8016ae6 <FS_write+0x4a>
        lfsOpenFlags |= LFS_O_APPEND;
 8016ae2:	f640 1303 	movw	r3, #2307	@ 0x903
    result = lfs_file_open(&lfs, &file, filepath, lfsOpenFlags);
 8016ae6:	4622      	mov	r2, r4
 8016ae8:	4911      	ldr	r1, [pc, #68]	@ (8016b30 <FS_write+0x94>)
 8016aea:	480f      	ldr	r0, [pc, #60]	@ (8016b28 <FS_write+0x8c>)
 8016aec:	f010 faa4 	bl	8027038 <lfs_file_open>
    if ( result != LFS_ERR_OK )
 8016af0:	4604      	mov	r4, r0
 8016af2:	b128      	cbz	r0, 8016b00 <FS_write+0x64>
        result = _checkForCorruptFS(result);
 8016af4:	f7ff ff7e 	bl	80169f4 <_checkForCorruptFS>
 8016af8:	4604      	mov	r4, r0
}
 8016afa:	4620      	mov	r0, r4
 8016afc:	b043      	add	sp, #268	@ 0x10c
 8016afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lfs_ssize_t  written = lfs_file_write(&lfs, &file, buffer, size);
 8016b00:	490b      	ldr	r1, [pc, #44]	@ (8016b30 <FS_write+0x94>)
 8016b02:	4809      	ldr	r0, [pc, #36]	@ (8016b28 <FS_write+0x8c>)
 8016b04:	462b      	mov	r3, r5
 8016b06:	4632      	mov	r2, r6
 8016b08:	f010 fafe 	bl	8027108 <lfs_file_write>
    if ( result != LFS_ERR_OK )
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	da02      	bge.n	8016b16 <FS_write+0x7a>
        result = _checkForCorruptFS(result);
 8016b10:	f7ff ff70 	bl	80169f4 <_checkForCorruptFS>
 8016b14:	4604      	mov	r4, r0
    lfs_file_close(&lfs, &file);
 8016b16:	4906      	ldr	r1, [pc, #24]	@ (8016b30 <FS_write+0x94>)
 8016b18:	4803      	ldr	r0, [pc, #12]	@ (8016b28 <FS_write+0x8c>)
 8016b1a:	f010 faa9 	bl	8027070 <lfs_file_close>
    return result;
 8016b1e:	e7ec      	b.n	8016afa <FS_write+0x5e>
        return LFS_ERR_ISDIR;
 8016b20:	f06f 0414 	mvn.w	r4, #20
 8016b24:	e7e9      	b.n	8016afa <FS_write+0x5e>
 8016b26:	bf00      	nop
 8016b28:	200016d4 	.word	0x200016d4
 8016b2c:	2000162c 	.word	0x2000162c
 8016b30:	20001680 	.word	0x20001680

08016b34 <_ZN8touchgfx16ButtonController5resetEv>:
    virtual bool sample(uint8_t& key) = 0;

    /** Resets button controller. Does nothing in the default implementation. */
    virtual void reset()
    {
    }
 8016b34:	4770      	bx	lr

08016b36 <_ZN23TouchGfxInputController4initEv>:
 *******************************************************************************/

#include "touchgfx_input_controller.hpp"

void TouchGfxInputController::init() {
}
 8016b36:	4770      	bx	lr

08016b38 <_ZN23TouchGfxInputControllerD1Ev>:

#include <main.h>
#include <touchgfx/hal/HAL.hpp>


class TouchGfxInputController: public touchgfx::ButtonController {
 8016b38:	4770      	bx	lr
	...

08016b3c <_ZN23TouchGfxInputController6sampleERh>:

bool TouchGfxInputController::sample( uint8_t& key ) {
 8016b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b3e:	4604      	mov	r4, r0
 8016b40:	460d      	mov	r5, r1
  bool currentKeyStates[buttonCount] =
    { 0, 0, 0, 0 };

  currentKeyStates[Button_0] = !HAL_GPIO_ReadPin(nBUTTON0_GPIO_Port,
 8016b42:	481e      	ldr	r0, [pc, #120]	@ (8016bbc <_ZN23TouchGfxInputController6sampleERh+0x80>)
 8016b44:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016b48:	f003 fb50 	bl	801a1ec <HAL_GPIO_ReadPin>
 8016b4c:	fab0 f080 	clz	r0, r0
 8016b50:	0940      	lsrs	r0, r0, #5
 8016b52:	f88d 0004 	strb.w	r0, [sp, #4]
                                                 nBUTTON0_Pin);
  currentKeyStates[Button_1] = !HAL_GPIO_ReadPin(nBUTTON1_GPIO_Port,
 8016b56:	2104      	movs	r1, #4
 8016b58:	4819      	ldr	r0, [pc, #100]	@ (8016bc0 <_ZN23TouchGfxInputController6sampleERh+0x84>)
 8016b5a:	f003 fb47 	bl	801a1ec <HAL_GPIO_ReadPin>
 8016b5e:	fab0 f080 	clz	r0, r0
 8016b62:	0940      	lsrs	r0, r0, #5
 8016b64:	f88d 0005 	strb.w	r0, [sp, #5]
                                                 nBUTTON1_Pin);
  currentKeyStates[Button_2] = !HAL_GPIO_ReadPin(nBUTTON2_GPIO_Port,
 8016b68:	2104      	movs	r1, #4
 8016b6a:	4816      	ldr	r0, [pc, #88]	@ (8016bc4 <_ZN23TouchGfxInputController6sampleERh+0x88>)
 8016b6c:	f003 fb3e 	bl	801a1ec <HAL_GPIO_ReadPin>
 8016b70:	fab0 f080 	clz	r0, r0
 8016b74:	0940      	lsrs	r0, r0, #5
 8016b76:	f88d 0006 	strb.w	r0, [sp, #6]
                                                 nBUTTON2_Pin);
  currentKeyStates[Button_3] = !HAL_GPIO_ReadPin(nBUTTON3_GPIO_Port,
 8016b7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8016b7e:	4811      	ldr	r0, [pc, #68]	@ (8016bc4 <_ZN23TouchGfxInputController6sampleERh+0x88>)
 8016b80:	f003 fb34 	bl	801a1ec <HAL_GPIO_ReadPin>
 8016b84:	fab0 f080 	clz	r0, r0
 8016b88:	0940      	lsrs	r0, r0, #5
 8016b8a:	f88d 0007 	strb.w	r0, [sp, #7]

  // ToDo: only for debug, can be useful as a heartbeat on the touchgfx task
//  HAL_GPIO_TogglePin(DOUT_nRUN_LED_GPIO_Port, DOUT_nRUN_LED_Pin);

  // only allow one button press
  for (uint8_t i = 0; i < buttonCount; i++) {
 8016b8e:	1ce1      	adds	r1, r4, #3
 8016b90:	a801      	add	r0, sp, #4
  currentKeyStates[Button_3] = !HAL_GPIO_ReadPin(nBUTTON3_GPIO_Port,
 8016b92:	2300      	movs	r3, #0
    if (keyStates[i] != currentKeyStates[i]) {
 8016b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b98:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8016b9c:	4296      	cmp	r6, r2
 8016b9e:	d009      	beq.n	8016bb4 <_ZN23TouchGfxInputController6sampleERh+0x78>
      if (currentKeyStates[i]) {
 8016ba0:	441c      	add	r4, r3
 8016ba2:	2001      	movs	r0, #1
 8016ba4:	b112      	cbz	r2, 8016bac <_ZN23TouchGfxInputController6sampleERh+0x70>
        keyStates[i] = true;
 8016ba6:	7120      	strb	r0, [r4, #4]
        return false;
 8016ba8:	2000      	movs	r0, #0
 8016baa:	e001      	b.n	8016bb0 <_ZN23TouchGfxInputController6sampleERh+0x74>
      }
      else { // trigger button press only on release
        key = i;
 8016bac:	702b      	strb	r3, [r5, #0]
        keyStates[i] = false;
 8016bae:	7122      	strb	r2, [r4, #4]
      }
    }
  }

  return false;
}
 8016bb0:	b002      	add	sp, #8
 8016bb2:	bd70      	pop	{r4, r5, r6, pc}
  for (uint8_t i = 0; i < buttonCount; i++) {
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	2b04      	cmp	r3, #4
 8016bb8:	d1ec      	bne.n	8016b94 <_ZN23TouchGfxInputController6sampleERh+0x58>
 8016bba:	e7f5      	b.n	8016ba8 <_ZN23TouchGfxInputController6sampleERh+0x6c>
 8016bbc:	48000800 	.word	0x48000800
 8016bc0:	48001000 	.word	0x48001000
 8016bc4:	48000400 	.word	0x48000400

08016bc8 <_ZN23TouchGfxInputControllerD0Ev>:
 8016bc8:	b510      	push	{r4, lr}
 8016bca:	211c      	movs	r1, #28
 8016bcc:	4604      	mov	r4, r0
 8016bce:	f025 fc8c 	bl	803c4ea <_ZdlPvj>
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	bd10      	pop	{r4, pc}

08016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>:

//called from handleTickEvent (60hz)
bool TouchGfxInputController::isButtonHeld(uint8_t button)
{
    if (keyStates[button])
 8016bd6:	1842      	adds	r2, r0, r1
{
 8016bd8:	4603      	mov	r3, r0
    if (keyStates[button])
 8016bda:	7910      	ldrb	r0, [r2, #4]
 8016bdc:	b160      	cbz	r0, 8016bf8 <_ZN23TouchGfxInputController12isButtonHeldEh+0x22>
    {
        if (holdStates[button] && holdCounters[button] >= 20)
 8016bde:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016be2:	7a10      	ldrb	r0, [r2, #8]
 8016be4:	68d9      	ldr	r1, [r3, #12]
 8016be6:	b108      	cbz	r0, 8016bec <_ZN23TouchGfxInputController12isButtonHeldEh+0x16>
 8016be8:	2913      	cmp	r1, #19
 8016bea:	d80a      	bhi.n	8016c02 <_ZN23TouchGfxInputController12isButtonHeldEh+0x2c>
        {
            return true;
        }

        holdStates[button] = true;
 8016bec:	2001      	movs	r0, #1
        holdCounters[button]++;
 8016bee:	4401      	add	r1, r0
        holdStates[button] = true;
 8016bf0:	7210      	strb	r0, [r2, #8]
        holdCounters[button]++;
 8016bf2:	60d9      	str	r1, [r3, #12]
    else
    {
        holdStates[button] = false;
        holdCounters[button] = 0;
    }
    return false;
 8016bf4:	2000      	movs	r0, #0
 8016bf6:	4770      	bx	lr
        holdCounters[button] = 0;
 8016bf8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
        holdStates[button] = false;
 8016bfc:	7210      	strb	r0, [r2, #8]
        holdCounters[button] = 0;
 8016bfe:	60d8      	str	r0, [r3, #12]
 8016c00:	e7f8      	b.n	8016bf4 <_ZN23TouchGfxInputController12isButtonHeldEh+0x1e>
}
 8016c02:	4770      	bx	lr

08016c04 <OnUSBMount>:
 *
 **************************************************************************************************/
void OnUSBMount(void)
{
    // wake up usb device task
    FS_setUSBMountStatus(true);
 8016c04:	2001      	movs	r0, #1
 8016c06:	f7ff be83 	b.w	8016910 <FS_setUSBMountStatus>

08016c0a <OnUSBUmount>:
 *
 **************************************************************************************************/
void OnUSBUmount(void)
{
    // suspend usb device task
    FS_setUSBMountStatus(false);
 8016c0a:	2000      	movs	r0, #0
 8016c0c:	f7ff be80 	b.w	8016910 <FS_setUSBMountStatus>

08016c10 <USB_trackResumeEvent>:
 * stack are not generated correctly.
 *
 **************************************************************************************************/
void USB_trackResumeEvent(void)
{
    usbConnected = !usbConnected;
 8016c10:	4a04      	ldr	r2, [pc, #16]	@ (8016c24 <USB_trackResumeEvent+0x14>)
 8016c12:	7813      	ldrb	r3, [r2, #0]
 8016c14:	f083 0301 	eor.w	r3, r3, #1
 8016c18:	7013      	strb	r3, [r2, #0]

    if(usbConnected){
 8016c1a:	b10b      	cbz	r3, 8016c20 <USB_trackResumeEvent+0x10>
      OnUSBMount();
 8016c1c:	f7ff bff2 	b.w	8016c04 <OnUSBMount>
    }else {
      OnUSBUmount();
 8016c20:	f7ff bff3 	b.w	8016c0a <OnUSBUmount>
 8016c24:	20001755 	.word	0x20001755

08016c28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8016c28:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8016c2a:	f01b fa25 	bl	8032078 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  //Switch LEDs off
   	HAL_GPIO_WritePin(DOUT_nRED_LED_GPIO_Port, DOUT_nRED_LED_Pin, 1);
 8016c2e:	4813      	ldr	r0, [pc, #76]	@ (8016c7c <StartDefaultTask+0x54>)
 8016c30:	2201      	movs	r2, #1
 8016c32:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016c36:	f003 fadf 	bl	801a1f8 <HAL_GPIO_WritePin>
   	HAL_GPIO_WritePin(DOUT_nRUN_LED_GPIO_Port, DOUT_nRUN_LED_Pin, 1);
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016c40:	480e      	ldr	r0, [pc, #56]	@ (8016c7c <StartDefaultTask+0x54>)
 8016c42:	f003 fad9 	bl	801a1f8 <HAL_GPIO_WritePin>

   	//Initialise 1mS 'Tick' timers
   	initialise_timers();
 8016c46:	f008 fc3d 	bl	801f4c4 <initialise_timers>

   	//Setup littleFS
   	FS_Init(); // Init littlefs file system
 8016c4a:	f7ff fe8b 	bl	8016964 <FS_Init>

   	//Load S35 configuration data
   	LoadConfigFile();
 8016c4e:	f008 fd47 	bl	801f6e0 <LoadConfigFile>

   	//Update all features affected by config change or on power up
   	UpdateAllConfigFeatures();
 8016c52:	f008 fb5b 	bl	801f30c <UpdateAllConfigFeatures>

   	/* Infinite loop */
   	for(;;)
   	{
   		//Update all 10mS tick timers
   		update_tick_timers();
 8016c56:	f008 fc5d 	bl	801f514 <update_tick_timers>

   		//CAN communications
   		CAN_transmit_coms();
 8016c5a:	f007 ffdb 	bl	801ec14 <CAN_transmit_coms>
   		CAN_receive_coms();
 8016c5e:	f008 f96f 	bl	801ef40 <CAN_receive_coms>

   		//Digital output control
   		digital_output_control();
 8016c62:	f008 fb55 	bl	801f310 <digital_output_control>

   		//Frequency measurement
   		process_frequency_measurement();
 8016c66:	f008 fb7f 	bl	801f368 <process_frequency_measurement>

   		//Analogue input setup
		setup_input_hardware();
 8016c6a:	f008 fc93 	bl	801f594 <setup_input_hardware>

		//Process analogue inputs
		//process_analogue_inputs();

  		//LCD heater control
  		lcd_heater_control();
 8016c6e:	f008 fb9d 	bl	801f3ac <lcd_heater_control>

   		osDelay(1);
 8016c72:	2001      	movs	r0, #1
 8016c74:	f00a fed4 	bl	8021a20 <osDelay>
   	for(;;)
 8016c78:	e7ed      	b.n	8016c56 <StartDefaultTask+0x2e>
 8016c7a:	bf00      	nop
 8016c7c:	48000800 	.word	0x48000800

08016c80 <StartTouchGfx>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTouchGfx */
void StartTouchGfx(void *argument)
{
 8016c80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTouchGfx */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // enable backlight PWM output
 8016c82:	4807      	ldr	r0, [pc, #28]	@ (8016ca0 <StartTouchGfx+0x20>)
 8016c84:	2104      	movs	r1, #4
 8016c86:	f006 fdc7 	bl	801d818 <HAL_TIM_PWM_Start>
  TIM2->CCR2 = 200;
 8016c8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016c8e:	22c8      	movs	r2, #200	@ 0xc8
 8016c90:	639a      	str	r2, [r3, #56]	@ 0x38

  MX_TouchGFX_Process();
 8016c92:	f010 fa77 	bl	8027184 <MX_TouchGFX_Process>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8016c96:	2001      	movs	r0, #1
 8016c98:	f00a fec2 	bl	8021a20 <osDelay>
  for(;;)
 8016c9c:	e7fb      	b.n	8016c96 <StartTouchGfx+0x16>
 8016c9e:	bf00      	nop
 8016ca0:	200019e0 	.word	0x200019e0

08016ca4 <SystemClock_Config>:
{
 8016ca4:	b510      	push	{r4, lr}
 8016ca6:	b096      	sub	sp, #88	@ 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016ca8:	2244      	movs	r2, #68	@ 0x44
 8016caa:	2100      	movs	r1, #0
 8016cac:	a805      	add	r0, sp, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016cae:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016cb0:	f026 fbf8 	bl	803d4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	2100      	movs	r1, #0
 8016cb8:	4668      	mov	r0, sp
 8016cba:	f026 fbf3 	bl	803d4a4 <memset>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8016cbe:	2000      	movs	r0, #0
 8016cc0:	f005 f8b2 	bl	801be28 <HAL_PWREx_ControlVoltageScaling>
 8016cc4:	b108      	cbz	r0, 8016cca <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8016cc6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8016cc8:	e7fe      	b.n	8016cc8 <SystemClock_Config+0x24>
  HAL_PWR_EnableBkUpAccess();
 8016cca:	f005 f895 	bl	801bdf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8016cce:	4a17      	ldr	r2, [pc, #92]	@ (8016d2c <SystemClock_Config+0x88>)
 8016cd0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8016cd4:	f023 0318 	bic.w	r3, r3, #24
 8016cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8016cdc:	2140      	movs	r1, #64	@ 0x40
 8016cde:	23a0      	movs	r3, #160	@ 0xa0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8016ce0:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8016ce2:	e9cd 130c 	strd	r1, r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8016ce6:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016ce8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 15;
 8016cea:	240f      	movs	r4, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016cec:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8016cee:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016cf2:	e9cd 4312 	strd	r4, r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8016cf6:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8016cfa:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8016cfc:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8016cfe:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016d00:	f005 f97a 	bl	801bff8 <HAL_RCC_OscConfig>
 8016d04:	b108      	cbz	r0, 8016d0a <SystemClock_Config+0x66>
 8016d06:	b672      	cpsid	i
  while (1)
 8016d08:	e7fe      	b.n	8016d08 <SystemClock_Config+0x64>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016d0a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016d0c:	e9cd 3001 	strd	r3, r0, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8016d10:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016d14:	2105      	movs	r1, #5
 8016d16:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016d18:	9400      	str	r4, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016d1a:	f005 fc13 	bl	801c544 <HAL_RCC_ClockConfig>
 8016d1e:	b108      	cbz	r0, 8016d24 <SystemClock_Config+0x80>
 8016d20:	b672      	cpsid	i
  while (1)
 8016d22:	e7fe      	b.n	8016d22 <SystemClock_Config+0x7e>
  HAL_RCCEx_EnableMSIPLLMode();
 8016d24:	f006 f892 	bl	801ce4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8016d28:	b016      	add	sp, #88	@ 0x58
 8016d2a:	bd10      	pop	{r4, pc}
 8016d2c:	40021000 	.word	0x40021000

08016d30 <PeriphCommonClock_Config>:
{
 8016d30:	b500      	push	{lr}
 8016d32:	b0a7      	sub	sp, #156	@ 0x9c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8016d34:	2278      	movs	r2, #120	@ 0x78
 8016d36:	2100      	movs	r1, #0
 8016d38:	a808      	add	r0, sp, #32
 8016d3a:	f026 fbb3 	bl	803d4a4 <memset>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG
 8016d3e:	f44f 238c 	mov.w	r3, #286720	@ 0x46000
 8016d42:	9300      	str	r3, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8016d44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8016d48:	9320      	str	r3, [sp, #128]	@ 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8016d4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8016d4e:	2001      	movs	r0, #1
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8016d50:	931d      	str	r3, [sp, #116]	@ 0x74
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8016d52:	931f      	str	r3, [sp, #124]	@ 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 3;
 8016d54:	2303      	movs	r3, #3
 8016d56:	e9cd 0301 	strd	r0, r3, [sp, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8016d5a:	f04f 0c1b 	mov.w	ip, #27
 8016d5e:	2302      	movs	r3, #2
 8016d60:	e9cd c303 	strd	ip, r3, [sp, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV6;
 8016d64:	2306      	movs	r3, #6
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV6;
 8016d66:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8016d6a:	4668      	mov	r0, sp
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8016d6c:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8016d70:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8016d72:	f005 fe1d 	bl	801c9b0 <HAL_RCCEx_PeriphCLKConfig>
 8016d76:	b108      	cbz	r0, 8016d7c <PeriphCommonClock_Config+0x4c>
 8016d78:	b672      	cpsid	i
  while (1)
 8016d7a:	e7fe      	b.n	8016d7a <PeriphCommonClock_Config+0x4a>
}
 8016d7c:	b027      	add	sp, #156	@ 0x9c
 8016d7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08016d84 <main>:
{
 8016d84:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8016d86:	4dbf      	ldr	r5, [pc, #764]	@ (8017084 <main+0x300>)
{
 8016d88:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8016d8a:	f001 fcb3 	bl	80186f4 <HAL_Init>
  SystemClock_Config();
 8016d8e:	f7ff ff89 	bl	8016ca4 <SystemClock_Config>
  PeriphCommonClock_Config();
 8016d92:	f7ff ffcd 	bl	8016d30 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016d96:	2214      	movs	r2, #20
 8016d98:	2100      	movs	r1, #0
 8016d9a:	a80f      	add	r0, sp, #60	@ 0x3c
 8016d9c:	f026 fb82 	bl	803d4a4 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8016da0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOE, LCD_HEATER_Pin|ENABLE_USB_SUPPLY_Pin, GPIO_PIN_RESET);
 8016da2:	48b9      	ldr	r0, [pc, #740]	@ (8017088 <main+0x304>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8016da4:	f043 0310 	orr.w	r3, r3, #16
 8016da8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016daa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016dac:	f003 0310 	and.w	r3, r3, #16
 8016db0:	9302      	str	r3, [sp, #8]
 8016db2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8016db4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016db6:	f043 0304 	orr.w	r3, r3, #4
 8016dba:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016dbc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016dbe:	f003 0304 	and.w	r3, r3, #4
 8016dc2:	9303      	str	r3, [sp, #12]
 8016dc4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8016dc6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016dcc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016dce:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016dd4:	9304      	str	r3, [sp, #16]
 8016dd6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8016dd8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016dda:	f043 0301 	orr.w	r3, r3, #1
 8016dde:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016de0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016de2:	f003 0301 	and.w	r3, r3, #1
 8016de6:	9305      	str	r3, [sp, #20]
 8016de8:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8016dea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016dec:	f043 0302 	orr.w	r3, r3, #2
 8016df0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016df2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016df4:	f003 0302 	and.w	r3, r3, #2
 8016df8:	9306      	str	r3, [sp, #24]
 8016dfa:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8016dfc:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016dfe:	f043 0308 	orr.w	r3, r3, #8
 8016e02:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8016e04:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016e06:	f003 0308 	and.w	r3, r3, #8
 8016e0a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, LCD_HEATER_Pin|ENABLE_USB_SUPPLY_Pin, GPIO_PIN_RESET);
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	2148      	movs	r1, #72	@ 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8016e10:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, LCD_HEATER_Pin|ENABLE_USB_SUPPLY_Pin, GPIO_PIN_RESET);
 8016e12:	f003 f9f1 	bl	801a1f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, ENABLE_CURRENT_AIN2_Pin|DIGITAL_OUT1_Pin|DIGITAL_OUT2_Pin|DOUT_nRED_LED_Pin
 8016e16:	489d      	ldr	r0, [pc, #628]	@ (801708c <main+0x308>)
 8016e18:	2200      	movs	r2, #0
 8016e1a:	f44f 5133 	mov.w	r1, #11456	@ 0x2cc0
 8016e1e:	f003 f9eb 	bl	801a1f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nCAN_RESISTOR_ENABLE_GPIO_Port, nCAN_RESISTOR_ENABLE_Pin, GPIO_PIN_SET);
 8016e22:	2201      	movs	r2, #1
 8016e24:	2104      	movs	r1, #4
 8016e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8016e2a:	f003 f9e5 	bl	801a1f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LTDC_RESET_GPIO_Port, LTDC_RESET_Pin, GPIO_PIN_SET);
 8016e2e:	4897      	ldr	r0, [pc, #604]	@ (801708c <main+0x308>)
 8016e30:	2201      	movs	r2, #1
 8016e32:	2120      	movs	r1, #32
 8016e34:	f003 f9e0 	bl	801a1f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ENABLE_RESISTIVE_AIN2_Pin|ENABLE_RESISTIVE_AIN1_Pin, GPIO_PIN_RESET);
 8016e38:	4895      	ldr	r0, [pc, #596]	@ (8017090 <main+0x30c>)
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	2184      	movs	r1, #132	@ 0x84
 8016e3e:	f003 f9db 	bl	801a1f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_CURRENT_AIN1_GPIO_Port, ENABLE_CURRENT_AIN1_Pin, GPIO_PIN_RESET);
 8016e42:	2200      	movs	r2, #0
 8016e44:	4893      	ldr	r0, [pc, #588]	@ (8017094 <main+0x310>)
 8016e46:	2120      	movs	r1, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016e48:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(ENABLE_CURRENT_AIN1_GPIO_Port, ENABLE_CURRENT_AIN1_Pin, GPIO_PIN_RESET);
 8016e4a:	f003 f9d5 	bl	801a1f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016e4e:	2704      	movs	r7, #4
  HAL_GPIO_Init(nBUTTON1_GPIO_Port, &GPIO_InitStruct);
 8016e50:	488d      	ldr	r0, [pc, #564]	@ (8017088 <main+0x304>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e52:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(nBUTTON1_GPIO_Port, &GPIO_InitStruct);
 8016e54:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016e56:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016e58:	e9cd 740f 	strd	r7, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(nBUTTON1_GPIO_Port, &GPIO_InitStruct);
 8016e5c:	f003 f8f0 	bl	801a040 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016e60:	2348      	movs	r3, #72	@ 0x48
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8016e62:	4889      	ldr	r0, [pc, #548]	@ (8017088 <main+0x304>)
 8016e64:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016e66:	e9cd 360f 	strd	r3, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016e6a:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8016e6e:	f003 f8e7 	bl	801a040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_CURRENT_AIN2_Pin|LTDC_RESET_Pin|DIGITAL_OUT1_Pin|DIGITAL_OUT2_Pin
 8016e72:	f642 43e0 	movw	r3, #11488	@ 0x2ce0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016e76:	4885      	ldr	r0, [pc, #532]	@ (801708c <main+0x308>)
 8016e78:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016e7a:	e9cd 360f 	strd	r3, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016e7e:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016e82:	f003 f8dd 	bl	801a040 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8016e86:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(uC_FREQ_IN_GPIO_Port, &GPIO_InitStruct);
 8016e8a:	4880      	ldr	r0, [pc, #512]	@ (801708c <main+0x308>)
  GPIO_InitStruct.Pin = uC_FREQ_IN_Pin;
 8016e8c:	970f      	str	r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(uC_FREQ_IN_GPIO_Port, &GPIO_InitStruct);
 8016e8e:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e90:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
  HAL_GPIO_Init(uC_FREQ_IN_GPIO_Port, &GPIO_InitStruct);
 8016e94:	f003 f8d4 	bl	801a040 <HAL_GPIO_Init>
  HAL_GPIO_Init(nCAN_RESISTOR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016e98:	a90f      	add	r1, sp, #60	@ 0x3c
 8016e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016e9e:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016ea2:	e9cd 760f 	strd	r7, r6, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(nCAN_RESISTOR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016ea6:	f003 f8cb 	bl	801a040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = nBUTTON2_Pin|nBUTTON3_Pin;
 8016eaa:	f248 0304 	movw	r3, #32772	@ 0x8004
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016eae:	4879      	ldr	r0, [pc, #484]	@ (8017094 <main+0x310>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016eb0:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016eb2:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016eb4:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016eb8:	f003 f8c2 	bl	801a040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = nBUTTON0_Pin|FW_UPDATE_ENABLE_Pin;
 8016ebc:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016ec0:	4872      	ldr	r0, [pc, #456]	@ (801708c <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ec2:	9411      	str	r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016ec4:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016ec6:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016eca:	f003 f8b9 	bl	801a040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_RESISTIVE_AIN2_Pin|ENABLE_RESISTIVE_AIN1_Pin;
 8016ece:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016ed0:	486f      	ldr	r0, [pc, #444]	@ (8017090 <main+0x30c>)
 8016ed2:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016ed4:	e9cd 360f 	strd	r3, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016ed8:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8016edc:	f003 f8b0 	bl	801a040 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENABLE_CURRENT_AIN1_Pin;
 8016ee0:	2320      	movs	r3, #32
  HAL_GPIO_Init(ENABLE_CURRENT_AIN1_GPIO_Port, &GPIO_InitStruct);
 8016ee2:	486c      	ldr	r0, [pc, #432]	@ (8017094 <main+0x310>)
 8016ee4:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016ee6:	e9cd 360f 	strd	r3, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016eea:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  HAL_GPIO_Init(ENABLE_CURRENT_AIN1_GPIO_Port, &GPIO_InitStruct);
 8016eee:	f003 f8a7 	bl	801a040 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8016ef2:	4622      	mov	r2, r4
 8016ef4:	2105      	movs	r1, #5
 8016ef6:	2008      	movs	r0, #8
 8016ef8:	f002 fc72 	bl	80197e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8016efc:	2008      	movs	r0, #8
 8016efe:	f002 fca1 	bl	8019844 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8016f02:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8016f04:	433b      	orrs	r3, r7
 8016f06:	64ab      	str	r3, [r5, #72]	@ 0x48
 8016f08:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8016f0a:	403b      	ands	r3, r7
 8016f0c:	9300      	str	r3, [sp, #0]
 8016f0e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8016f10:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8016f12:	4333      	orrs	r3, r6
 8016f14:	64ab      	str	r3, [r5, #72]	@ 0x48
 8016f16:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hltdc.Instance = LTDC;
 8016f18:	4d5f      	ldr	r5, [pc, #380]	@ (8017098 <main+0x314>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8016f1a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8016f1c:	4622      	mov	r2, r4
 8016f1e:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8016f20:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8016f22:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8016f24:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8016f26:	f002 fc5b 	bl	80197e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8016f2a:	200b      	movs	r0, #11
 8016f2c:	f002 fc8a 	bl	8019844 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8016f30:	4622      	mov	r2, r4
 8016f32:	2105      	movs	r1, #5
 8016f34:	200c      	movs	r0, #12
 8016f36:	f002 fc53 	bl	80197e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8016f3a:	200c      	movs	r0, #12
 8016f3c:	f002 fc82 	bl	8019844 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8016f40:	4622      	mov	r2, r4
 8016f42:	2105      	movs	r1, #5
 8016f44:	200d      	movs	r0, #13
 8016f46:	f002 fc4b 	bl	80197e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8016f4a:	200d      	movs	r0, #13
 8016f4c:	f002 fc7a 	bl	8019844 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8016f50:	4621      	mov	r1, r4
 8016f52:	2234      	movs	r2, #52	@ 0x34
 8016f54:	a80f      	add	r0, sp, #60	@ 0x3c
 8016f56:	f026 faa5 	bl	803d4a4 <memset>
  hltdc.Instance = LTDC;
 8016f5a:	4b50      	ldr	r3, [pc, #320]	@ (801709c <main+0x318>)
  hltdc.Init.VerticalSync = 0;
 8016f5c:	61ac      	str	r4, [r5, #24]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8016f5e:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
 8016f62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  hltdc.Init.HorizontalSync = 0;
 8016f66:	e9c5 3404 	strd	r3, r4, [r5, #16]
  hltdc.Init.AccumulatedVBP = 18;
 8016f6a:	f04f 0e44 	mov.w	lr, #68	@ 0x44
 8016f6e:	2312      	movs	r3, #18
 8016f70:	e9c5 e307 	strd	lr, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 258;
 8016f74:	f44f 78c2 	mov.w	r8, #388	@ 0x184
 8016f78:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8016f7c:	e9c5 8309 	strd	r8, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 262;
 8016f80:	f44f 72c4 	mov.w	r2, #392	@ 0x188
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8016f84:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 262;
 8016f88:	f44f 7383 	mov.w	r3, #262	@ 0x106
  hltdc.Init.Backcolor.Blue = 255;
 8016f8c:	f64f 74ff 	movw	r4, #65535	@ 0xffff
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8016f90:	4628      	mov	r0, r5
  hltdc.Init.TotalHeigh = 262;
 8016f92:	e9c5 230b 	strd	r2, r3, [r5, #44]	@ 0x2c
  hltdc.Init.Backcolor.Blue = 255;
 8016f96:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 255;
 8016f98:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8016f9c:	f003 fc64 	bl	801a868 <HAL_LTDC_Init>
  hltdc.Init.Backcolor.Red = 255;
 8016fa0:	f04f 08ff 	mov.w	r8, #255	@ 0xff
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8016fa4:	4602      	mov	r2, r0
 8016fa6:	b108      	cbz	r0, 8016fac <main+0x228>
 8016fa8:	b672      	cpsid	i
  while (1)
 8016faa:	e7fe      	b.n	8016faa <main+0x226>
  pLayerCfg.WindowX1 = 320;
 8016fac:	f44f 71a0 	mov.w	r1, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 8016fb0:	e9cd 1010 	strd	r1, r0, [sp, #64]	@ 0x40
  pLayerCfg.WindowX0 = 0;
 8016fb4:	900f      	str	r0, [sp, #60]	@ 0x3c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8016fb6:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8016fba:	2005      	movs	r0, #5
  pLayerCfg.WindowY1 = 240;
 8016fbc:	23f0      	movs	r3, #240	@ 0xf0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8016fbe:	e9cd c016 	strd	ip, r0, [sp, #88]	@ 0x58
  pLayerCfg.ImageWidth = 320;
 8016fc2:	e9cd 2118 	strd	r2, r1, [sp, #96]	@ 0x60
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	a90f      	add	r1, sp, #60	@ 0x3c
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8016fca:	e9cd 3612 	strd	r3, r6, [sp, #72]	@ 0x48
  pLayerCfg.Alpha0 = 255;
 8016fce:	e9cd 8814 	strd	r8, r8, [sp, #80]	@ 0x50
  pLayerCfg.ImageHeight = 240;
 8016fd2:	931a      	str	r3, [sp, #104]	@ 0x68
  pLayerCfg.Backcolor.Blue = 255;
 8016fd4:	f8ad 406c 	strh.w	r4, [sp, #108]	@ 0x6c
  pLayerCfg.Backcolor.Red = 255;
 8016fd8:	f88d 406e 	strb.w	r4, [sp, #110]	@ 0x6e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8016fdc:	f003 fcf8 	bl	801a9d0 <HAL_LTDC_ConfigLayer>
 8016fe0:	4605      	mov	r5, r0
 8016fe2:	b108      	cbz	r0, 8016fe8 <main+0x264>
 8016fe4:	b672      	cpsid	i
  while (1)
 8016fe6:	e7fe      	b.n	8016fe6 <main+0x262>
  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8016fe8:	2214      	movs	r2, #20
 8016fea:	4601      	mov	r1, r0
 8016fec:	a80f      	add	r0, sp, #60	@ 0x3c
 8016fee:	f026 fa59 	bl	803d4a4 <memset>
  hospi1.Instance = OCTOSPI1;
 8016ff2:	4c2b      	ldr	r4, [pc, #172]	@ (80170a0 <main+0x31c>)
 8016ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80170a4 <main+0x320>)
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8016ff6:	60a5      	str	r5, [r4, #8]
  hospi1.Init.FifoThreshold = 1;
 8016ff8:	e9c4 3600 	strd	r3, r6, [r4]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8016ffc:	e9c4 6505 	strd	r6, r5, [r4, #20]
  hospi1.Init.ClockPrescaler = 1;
 8017000:	e9c4 5607 	strd	r5, r6, [r4, #28]
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8017004:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  hospi1.Init.DeviceSize = 22;
 8017008:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801700c:	2316      	movs	r3, #22
  hospi1.Init.ChipSelectBoundary = 0;
 801700e:	62e5      	str	r5, [r4, #44]	@ 0x2c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8017010:	4620      	mov	r0, r4
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8017012:	2508      	movs	r5, #8
  hospi1.Init.DeviceSize = 22;
 8017014:	e9c4 2303 	strd	r2, r3, [r4, #12]
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8017018:	6325      	str	r5, [r4, #48]	@ 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 801701a:	f003 fe27 	bl	801ac6c <HAL_OSPI_Init>
 801701e:	b108      	cbz	r0, 8017024 <main+0x2a0>
 8017020:	b672      	cpsid	i
  while (1)
 8017022:	e7fe      	b.n	8017022 <main+0x29e>
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8017024:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017028:	f241 3288 	movw	r2, #5000	@ 0x1388
 801702c:	a90f      	add	r1, sp, #60	@ 0x3c
 801702e:	4620      	mov	r0, r4
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8017030:	9312      	str	r3, [sp, #72]	@ 0x48
  OSPIM_Cfg_Struct.ClkPort = 1;
 8017032:	960f      	str	r6, [sp, #60]	@ 0x3c
  OSPIM_Cfg_Struct.NCSPort = 1;
 8017034:	9611      	str	r6, [sp, #68]	@ 0x44
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8017036:	f003 ffc9 	bl	801afcc <HAL_OSPIM_Config>
 801703a:	4603      	mov	r3, r0
 801703c:	b108      	cbz	r0, 8017042 <main+0x2be>
 801703e:	b672      	cpsid	i
  while (1)
 8017040:	e7fe      	b.n	8017040 <main+0x2bc>
  hcrc.Instance = CRC;
 8017042:	4819      	ldr	r0, [pc, #100]	@ (80170a8 <main+0x324>)
 8017044:	4a19      	ldr	r2, [pc, #100]	@ (80170ac <main+0x328>)
 8017046:	6002      	str	r2, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8017048:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 801704c:	8083      	strh	r3, [r0, #4]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 801704e:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8017050:	f002 fc06 	bl	8019860 <HAL_CRC_Init>
 8017054:	b108      	cbz	r0, 801705a <main+0x2d6>
 8017056:	b672      	cpsid	i
  while (1)
 8017058:	e7fe      	b.n	8017058 <main+0x2d4>
  hdma2d.Instance = DMA2D;
 801705a:	4c15      	ldr	r4, [pc, #84]	@ (80170b0 <main+0x32c>)
 801705c:	4b15      	ldr	r3, [pc, #84]	@ (80170b4 <main+0x330>)
  hdma2d.Init.OutputOffset = 0;
 801705e:	e9c4 6002 	strd	r6, r0, [r4, #8]
  hdma2d.Init.Mode = DMA2D_M2M;
 8017062:	e9c4 3000 	strd	r3, r0, [r4]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8017066:	e9c4 0006 	strd	r0, r0, [r4, #24]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 801706a:	e9c4 0610 	strd	r0, r6, [r4, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputAlpha = 255;
 801706e:	e9c4 0812 	strd	r0, r8, [r4, #72]	@ 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8017072:	e9c4 0014 	strd	r0, r0, [r4, #80]	@ 0x50
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8017076:	4620      	mov	r0, r4
 8017078:	f002 fe36 	bl	8019ce8 <HAL_DMA2D_Init>
 801707c:	b1e0      	cbz	r0, 80170b8 <main+0x334>
 801707e:	b672      	cpsid	i
  while (1)
 8017080:	e7fe      	b.n	8017080 <main+0x2fc>
 8017082:	bf00      	nop
 8017084:	40021000 	.word	0x40021000
 8017088:	48001000 	.word	0x48001000
 801708c:	48000800 	.word	0x48000800
 8017090:	48000c00 	.word	0x48000c00
 8017094:	48000400 	.word	0x48000400
 8017098:	20001a90 	.word	0x20001a90
 801709c:	40016800 	.word	0x40016800
 80170a0:	20001a40 	.word	0x20001a40
 80170a4:	a0001000 	.word	0xa0001000
 80170a8:	20001bec 	.word	0x20001bec
 80170ac:	40023000 	.word	0x40023000
 80170b0:	20001b8c 	.word	0x20001b8c
 80170b4:	4002b000 	.word	0x4002b000
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80170b8:	4631      	mov	r1, r6
 80170ba:	4620      	mov	r0, r4
 80170bc:	f002 ff74 	bl	8019fa8 <HAL_DMA2D_ConfigLayer>
 80170c0:	4680      	mov	r8, r0
 80170c2:	b108      	cbz	r0, 80170c8 <main+0x344>
 80170c4:	b672      	cpsid	i
  while (1)
 80170c6:	e7fe      	b.n	80170c6 <main+0x342>
  ADC_ChannelConfTypeDef sConfig = {0};
 80170c8:	4601      	mov	r1, r0
 80170ca:	2218      	movs	r2, #24
 80170cc:	a80f      	add	r0, sp, #60	@ 0x3c
 80170ce:	f026 f9e9 	bl	803d4a4 <memset>
  hadc1.Instance = ADC1;
 80170d2:	4ca7      	ldr	r4, [pc, #668]	@ (8017370 <main+0x5ec>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80170d4:	f8df e2d4 	ldr.w	lr, [pc, #724]	@ 80173ac <main+0x628>
  hadc1.Init.NbrOfConversion = 8;
 80170d8:	61e5      	str	r5, [r4, #28]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 80170da:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80170de:	e9c4 e300 	strd	lr, r3, [r4]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80170e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80170e6:	8323      	strh	r3, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80170e8:	4620      	mov	r0, r4
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80170ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80170ee:	e9c4 8802 	strd	r8, r8, [r4, #8]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80170f2:	e9c4 6504 	strd	r6, r5, [r4, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80170f6:	e9c4 880a 	strd	r8, r8, [r4, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80170fa:	f884 8020 	strb.w	r8, [r4, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80170fe:	f884 6030 	strb.w	r6, [r4, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8017102:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8017104:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8017108:	f001 fb3e 	bl	8018788 <HAL_ADC_Init>
 801710c:	b108      	cbz	r0, 8017112 <main+0x38e>
 801710e:	b672      	cpsid	i
  while (1)
 8017110:	e7fe      	b.n	8017110 <main+0x38c>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8017112:	f8df c29c 	ldr.w	ip, [pc, #668]	@ 80173b0 <main+0x62c>
  sConfig.Offset = 0;
 8017116:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8017118:	2306      	movs	r3, #6
 801711a:	e9cd c30f 	strd	ip, r3, [sp, #60]	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 801711e:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017120:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8017122:	237f      	movs	r3, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017124:	4620      	mov	r0, r4
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8017126:	e9cd 3712 	strd	r3, r7, [sp, #72]	@ 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801712a:	f001 fd37 	bl	8018b9c <HAL_ADC_ConfigChannel>
 801712e:	b108      	cbz	r0, 8017134 <main+0x3b0>
 8017130:	b672      	cpsid	i
  while (1)
 8017132:	e7fe      	b.n	8017132 <main+0x3ae>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8017134:	4f8f      	ldr	r7, [pc, #572]	@ (8017374 <main+0x5f0>)
 8017136:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017138:	a90f      	add	r1, sp, #60	@ 0x3c
 801713a:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 801713c:	e9cd 730f 	strd	r7, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017140:	f001 fd2c 	bl	8018b9c <HAL_ADC_ConfigChannel>
 8017144:	b108      	cbz	r0, 801714a <main+0x3c6>
 8017146:	b672      	cpsid	i
  while (1)
 8017148:	e7fe      	b.n	8017148 <main+0x3c4>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 801714a:	4e8b      	ldr	r6, [pc, #556]	@ (8017378 <main+0x5f4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801714c:	4888      	ldr	r0, [pc, #544]	@ (8017370 <main+0x5ec>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 801714e:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017150:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8017152:	e9cd 630f 	strd	r6, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017156:	f001 fd21 	bl	8018b9c <HAL_ADC_ConfigChannel>
 801715a:	b108      	cbz	r0, 8017160 <main+0x3dc>
 801715c:	b672      	cpsid	i
  while (1)
 801715e:	e7fe      	b.n	801715e <main+0x3da>
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8017160:	4d86      	ldr	r5, [pc, #536]	@ (801737c <main+0x5f8>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017162:	4883      	ldr	r0, [pc, #524]	@ (8017370 <main+0x5ec>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8017164:	2318      	movs	r3, #24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017166:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8017168:	e9cd 530f 	strd	r5, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801716c:	f001 fd16 	bl	8018b9c <HAL_ADC_ConfigChannel>
 8017170:	b108      	cbz	r0, 8017176 <main+0x3f2>
 8017172:	b672      	cpsid	i
  while (1)
 8017174:	e7fe      	b.n	8017174 <main+0x3f0>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8017176:	4c82      	ldr	r4, [pc, #520]	@ (8017380 <main+0x5fc>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017178:	487d      	ldr	r0, [pc, #500]	@ (8017370 <main+0x5ec>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
 801717a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801717e:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8017180:	e9cd 430f 	strd	r4, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017184:	f001 fd0a 	bl	8018b9c <HAL_ADC_ConfigChannel>
 8017188:	b108      	cbz	r0, 801718e <main+0x40a>
 801718a:	b672      	cpsid	i
  while (1)
 801718c:	e7fe      	b.n	801718c <main+0x408>
  sConfig.Rank = ADC_REGULAR_RANK_6;
 801718e:	487d      	ldr	r0, [pc, #500]	@ (8017384 <main+0x600>)
 8017190:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8017194:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8017198:	a90f      	add	r1, sp, #60	@ 0x3c
 801719a:	4875      	ldr	r0, [pc, #468]	@ (8017370 <main+0x5ec>)
 801719c:	f001 fcfe 	bl	8018b9c <HAL_ADC_ConfigChannel>
 80171a0:	b108      	cbz	r0, 80171a6 <main+0x422>
 80171a2:	b672      	cpsid	i
  while (1)
 80171a4:	e7fe      	b.n	80171a4 <main+0x420>
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80171a6:	4978      	ldr	r1, [pc, #480]	@ (8017388 <main+0x604>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80171a8:	4871      	ldr	r0, [pc, #452]	@ (8017370 <main+0x5ec>)
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80171aa:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80171ae:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80171b2:	a90f      	add	r1, sp, #60	@ 0x3c
 80171b4:	f001 fcf2 	bl	8018b9c <HAL_ADC_ConfigChannel>
 80171b8:	b108      	cbz	r0, 80171be <main+0x43a>
 80171ba:	b672      	cpsid	i
  while (1)
 80171bc:	e7fe      	b.n	80171bc <main+0x438>
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80171be:	4a73      	ldr	r2, [pc, #460]	@ (801738c <main+0x608>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80171c0:	486b      	ldr	r0, [pc, #428]	@ (8017370 <main+0x5ec>)
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80171c2:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80171c6:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80171ca:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80171cc:	2307      	movs	r3, #7
 80171ce:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80171d0:	f001 fce4 	bl	8018b9c <HAL_ADC_ConfigChannel>
 80171d4:	4604      	mov	r4, r0
 80171d6:	b108      	cbz	r0, 80171dc <main+0x458>
 80171d8:	b672      	cpsid	i
  while (1)
 80171da:	e7fe      	b.n	80171da <main+0x456>
  SET_BIT(ADC1_COMMON->CCR, ADC_CCR_VREFEN);
 80171dc:	4a6c      	ldr	r2, [pc, #432]	@ (8017390 <main+0x60c>)
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80171de:	4864      	ldr	r0, [pc, #400]	@ (8017370 <main+0x5ec>)
  SET_BIT(ADC1_COMMON->CCR, ADC_CCR_VREFEN);
 80171e0:	6893      	ldr	r3, [r2, #8]
  htim2.Instance = TIM2;
 80171e2:	4d6c      	ldr	r5, [pc, #432]	@ (8017394 <main+0x610>)
  SET_BIT(ADC1_COMMON->CCR, ADC_CCR_VREFEN);
 80171e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80171e8:	6093      	str	r3, [r2, #8]
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80171ea:	217f      	movs	r1, #127	@ 0x7f
 80171ec:	f001 ff7a 	bl	80190e4 <HAL_ADCEx_Calibration_Start>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80171f0:	2210      	movs	r2, #16
 80171f2:	4621      	mov	r1, r4
 80171f4:	a80b      	add	r0, sp, #44	@ 0x2c
 80171f6:	f026 f955 	bl	803d4a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80171fa:	221c      	movs	r2, #28
 80171fc:	4621      	mov	r1, r4
 80171fe:	a80f      	add	r0, sp, #60	@ 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017200:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8017204:	940a      	str	r4, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017206:	f026 f94d 	bl	803d4a4 <memset>
  htim2.Instance = TIM2;
 801720a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  htim2.Init.Prescaler = 0;
 801720e:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 16383;
 8017212:	f643 73ff 	movw	r3, #16383	@ 0x3fff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017216:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801721a:	4628      	mov	r0, r5
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801721c:	2380      	movs	r3, #128	@ 0x80
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801721e:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8017220:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8017222:	f006 f8a1 	bl	801d368 <HAL_TIM_Base_Init>
 8017226:	b108      	cbz	r0, 801722c <main+0x4a8>
 8017228:	b672      	cpsid	i
  while (1)
 801722a:	e7fe      	b.n	801722a <main+0x4a6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801722c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8017230:	a90b      	add	r1, sp, #44	@ 0x2c
 8017232:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017234:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8017236:	f006 f9bd 	bl	801d5b4 <HAL_TIM_ConfigClockSource>
 801723a:	b108      	cbz	r0, 8017240 <main+0x4bc>
 801723c:	b672      	cpsid	i
  while (1)
 801723e:	e7fe      	b.n	801723e <main+0x4ba>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8017240:	4628      	mov	r0, r5
 8017242:	f006 f8c1 	bl	801d3c8 <HAL_TIM_PWM_Init>
 8017246:	b108      	cbz	r0, 801724c <main+0x4c8>
 8017248:	b672      	cpsid	i
  while (1)
 801724a:	e7fe      	b.n	801724a <main+0x4c6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801724c:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801724e:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8017250:	a908      	add	r1, sp, #32
 8017252:	4628      	mov	r0, r5
 8017254:	f006 fae2 	bl	801d81c <HAL_TIMEx_MasterConfigSynchronization>
 8017258:	b108      	cbz	r0, 801725e <main+0x4da>
 801725a:	b672      	cpsid	i
  while (1)
 801725c:	e7fe      	b.n	801725c <main+0x4d8>
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 801725e:	2604      	movs	r6, #4
  sConfigOC.Pulse = 0;
 8017260:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8017262:	484c      	ldr	r0, [pc, #304]	@ (8017394 <main+0x610>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017264:	9311      	str	r3, [sp, #68]	@ 0x44
  sConfigOC.Pulse = 0;
 8017266:	f04f 0860 	mov.w	r8, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801726a:	4632      	mov	r2, r6
 801726c:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.Pulse = 0;
 801726e:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8017272:	9613      	str	r6, [sp, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8017274:	f006 f918 	bl	801d4a8 <HAL_TIM_PWM_ConfigChannel>
 8017278:	4605      	mov	r5, r0
 801727a:	b108      	cbz	r0, 8017280 <main+0x4fc>
 801727c:	b672      	cpsid	i
  while (1)
 801727e:	e7fe      	b.n	801727e <main+0x4fa>
  HAL_TIM_MspPostInit(&htim2);
 8017280:	4844      	ldr	r0, [pc, #272]	@ (8017394 <main+0x610>)
  huart2.Instance = USART2;
 8017282:	4c45      	ldr	r4, [pc, #276]	@ (8017398 <main+0x614>)
  HAL_TIM_MspPostInit(&htim2);
 8017284:	f000 fc32 	bl	8017aec <HAL_TIM_MspPostInit>
  huart2.Init.BaudRate = 115200;
 8017288:	4b44      	ldr	r3, [pc, #272]	@ (801739c <main+0x618>)
  huart2.Init.Parity = UART_PARITY_NONE;
 801728a:	6125      	str	r5, [r4, #16]
  huart2.Init.BaudRate = 115200;
 801728c:	f44f 38e1 	mov.w	r8, #115200	@ 0x1c200
 8017290:	e9c4 3800 	strd	r3, r8, [r4]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8017294:	4629      	mov	r1, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 8017296:	270c      	movs	r7, #12
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8017298:	462b      	mov	r3, r5
 801729a:	462a      	mov	r2, r5
 801729c:	4620      	mov	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 801729e:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80172a2:	e9c4 7505 	strd	r7, r5, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80172a6:	e9c4 5507 	strd	r5, r5, [r4, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80172aa:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  huart2.FifoMode = UART_FIFOMODE_DISABLE;
 80172ae:	6665      	str	r5, [r4, #100]	@ 0x64
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80172b0:	f006 ff84 	bl	801e1bc <HAL_RS485Ex_Init>
 80172b4:	4601      	mov	r1, r0
 80172b6:	b108      	cbz	r0, 80172bc <main+0x538>
 80172b8:	b672      	cpsid	i
  while (1)
 80172ba:	e7fe      	b.n	80172ba <main+0x536>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80172bc:	4620      	mov	r0, r4
 80172be:	f006 ffd8 	bl	801e272 <HAL_UARTEx_SetTxFifoThreshold>
 80172c2:	4601      	mov	r1, r0
 80172c4:	b108      	cbz	r0, 80172ca <main+0x546>
 80172c6:	b672      	cpsid	i
  while (1)
 80172c8:	e7fe      	b.n	80172c8 <main+0x544>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80172ca:	4620      	mov	r0, r4
 80172cc:	f006 fff1 	bl	801e2b2 <HAL_UARTEx_SetRxFifoThreshold>
 80172d0:	b108      	cbz	r0, 80172d6 <main+0x552>
 80172d2:	b672      	cpsid	i
  while (1)
 80172d4:	e7fe      	b.n	80172d4 <main+0x550>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80172d6:	4620      	mov	r0, r4
 80172d8:	f006 ffb0 	bl	801e23c <HAL_UARTEx_DisableFifoMode>
 80172dc:	4603      	mov	r3, r0
 80172de:	b108      	cbz	r0, 80172e4 <main+0x560>
 80172e0:	b672      	cpsid	i
  while (1)
 80172e2:	e7fe      	b.n	80172e2 <main+0x55e>
  hcan1.Instance = CAN1;
 80172e4:	482e      	ldr	r0, [pc, #184]	@ (80173a0 <main+0x61c>)
  hcan1.Init.Prescaler = 48;
 80172e6:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 80173b4 <main+0x630>
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80172ea:	8383      	strh	r3, [r0, #28]
  hcan1.Init.Prescaler = 48;
 80172ec:	2230      	movs	r2, #48	@ 0x30
 80172ee:	e9c0 c200 	strd	ip, r2, [r0]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80172f2:	f44f 3e40 	mov.w	lr, #196608	@ 0x30000
 80172f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80172fa:	e9c0 e204 	strd	lr, r2, [r0, #16]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80172fe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8017302:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8017306:	6182      	str	r2, [r0, #24]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8017308:	f001 ff39 	bl	801917e <HAL_CAN_Init>
 801730c:	4605      	mov	r5, r0
 801730e:	b108      	cbz	r0, 8017314 <main+0x590>
 8017310:	b672      	cpsid	i
  while (1)
 8017312:	e7fe      	b.n	8017312 <main+0x58e>
  huart1.Instance = USART1;
 8017314:	4c23      	ldr	r4, [pc, #140]	@ (80173a4 <main+0x620>)
  HAL_GPIO_WritePin(nCAN_RESISTOR_ENABLE_GPIO_Port, nCAN_RESISTOR_ENABLE_Pin, GPIO_PIN_RESET);
 8017316:	4602      	mov	r2, r0
 8017318:	4631      	mov	r1, r6
 801731a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801731e:	f002 ff6b 	bl	801a1f8 <HAL_GPIO_WritePin>
  huart1.Instance = USART1;
 8017322:	4b21      	ldr	r3, [pc, #132]	@ (80173a8 <main+0x624>)
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017324:	62a5      	str	r5, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8017326:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8017328:	e9c4 3800 	strd	r3, r8, [r4]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801732c:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8017330:	e9c4 5704 	strd	r5, r7, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017334:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017338:	e9c4 5508 	strd	r5, r5, [r4, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801733c:	f006 feec 	bl	801e118 <HAL_UART_Init>
 8017340:	4601      	mov	r1, r0
 8017342:	b108      	cbz	r0, 8017348 <main+0x5c4>
 8017344:	b672      	cpsid	i
  while (1)
 8017346:	e7fe      	b.n	8017346 <main+0x5c2>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017348:	4620      	mov	r0, r4
 801734a:	f006 ff92 	bl	801e272 <HAL_UARTEx_SetTxFifoThreshold>
 801734e:	4601      	mov	r1, r0
 8017350:	b108      	cbz	r0, 8017356 <main+0x5d2>
 8017352:	b672      	cpsid	i
  while (1)
 8017354:	e7fe      	b.n	8017354 <main+0x5d0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017356:	4620      	mov	r0, r4
 8017358:	f006 ffab 	bl	801e2b2 <HAL_UARTEx_SetRxFifoThreshold>
 801735c:	b108      	cbz	r0, 8017362 <main+0x5de>
 801735e:	b672      	cpsid	i
  while (1)
 8017360:	e7fe      	b.n	8017360 <main+0x5dc>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8017362:	4620      	mov	r0, r4
 8017364:	f006 ff6a 	bl	801e23c <HAL_UARTEx_DisableFifoMode>
 8017368:	b330      	cbz	r0, 80173b8 <main+0x634>
 801736a:	b672      	cpsid	i
  while (1)
 801736c:	e7fe      	b.n	801736c <main+0x5e8>
 801736e:	bf00      	nop
 8017370:	20001c98 	.word	0x20001c98
 8017374:	04300002 	.word	0x04300002
 8017378:	10c00010 	.word	0x10c00010
 801737c:	14f00020 	.word	0x14f00020
 8017380:	36902000 	.word	0x36902000
 8017384:	2a000400 	.word	0x2a000400
 8017388:	c7520000 	.word	0xc7520000
 801738c:	80000001 	.word	0x80000001
 8017390:	50040300 	.word	0x50040300
 8017394:	200019e0 	.word	0x200019e0
 8017398:	20001820 	.word	0x20001820
 801739c:	40004400 	.word	0x40004400
 80173a0:	20001c10 	.word	0x20001c10
 80173a4:	200018b4 	.word	0x200018b4
 80173a8:	40013800 	.word	0x40013800
 80173ac:	50040000 	.word	0x50040000
 80173b0:	08600004 	.word	0x08600004
 80173b4:	40006400 	.word	0x40006400
  hi2c2.Instance = I2C2;
 80173b8:	4c4e      	ldr	r4, [pc, #312]	@ (80174f4 <main+0x770>)
  hi2c2.Init.Timing = 0x30A175AB;
 80173ba:	4b4f      	ldr	r3, [pc, #316]	@ (80174f8 <main+0x774>)
 80173bc:	4d4f      	ldr	r5, [pc, #316]	@ (80174fc <main+0x778>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80173be:	2701      	movs	r7, #1
  hi2c2.Init.Timing = 0x30A175AB;
 80173c0:	e9c4 5300 	strd	r5, r3, [r4]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80173c4:	4620      	mov	r0, r4
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80173c6:	2300      	movs	r3, #0
 80173c8:	e9c4 3702 	strd	r3, r7, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80173cc:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80173d0:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80173d4:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80173d6:	f003 f854 	bl	801a482 <HAL_I2C_Init>
 80173da:	4601      	mov	r1, r0
 80173dc:	b108      	cbz	r0, 80173e2 <main+0x65e>
 80173de:	b672      	cpsid	i
  while (1)
 80173e0:	e7fe      	b.n	80173e0 <main+0x65c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80173e2:	4620      	mov	r0, r4
 80173e4:	f003 f980 	bl	801a6e8 <HAL_I2CEx_ConfigAnalogFilter>
 80173e8:	4601      	mov	r1, r0
 80173ea:	b108      	cbz	r0, 80173f0 <main+0x66c>
 80173ec:	b672      	cpsid	i
  while (1)
 80173ee:	e7fe      	b.n	80173ee <main+0x66a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80173f0:	4620      	mov	r0, r4
 80173f2:	f003 f99f 	bl	801a734 <HAL_I2CEx_ConfigDigitalFilter>
 80173f6:	4603      	mov	r3, r0
 80173f8:	b108      	cbz	r0, 80173fe <main+0x67a>
 80173fa:	b672      	cpsid	i
  while (1)
 80173fc:	e7fe      	b.n	80173fc <main+0x678>
  hrng.Instance = RNG;
 80173fe:	4840      	ldr	r0, [pc, #256]	@ (8017500 <main+0x77c>)
 8017400:	4a40      	ldr	r2, [pc, #256]	@ (8017504 <main+0x780>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8017402:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8017406:	f005 fd29 	bl	801ce5c <HAL_RNG_Init>
 801740a:	b108      	cbz	r0, 8017410 <main+0x68c>
 801740c:	b672      	cpsid	i
  while (1)
 801740e:	e7fe      	b.n	801740e <main+0x68a>
  htim7.Instance = TIM7;
 8017410:	4d3d      	ldr	r5, [pc, #244]	@ (8017508 <main+0x784>)
  htim7.Init.Prescaler = 119;
 8017412:	493e      	ldr	r1, [pc, #248]	@ (801750c <main+0x788>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017414:	900f      	str	r0, [sp, #60]	@ 0x3c
  htim7.Init.Prescaler = 119;
 8017416:	2377      	movs	r3, #119	@ 0x77
 8017418:	e9c5 1300 	strd	r1, r3, [r5]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801741c:	ac0f      	add	r4, sp, #60	@ 0x3c
  htim7.Init.Period = 1000;
 801741e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017422:	e9c4 0001 	strd	r0, r0, [r4, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017426:	60a8      	str	r0, [r5, #8]
  htim7.Init.Period = 1000;
 8017428:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801742a:	4628      	mov	r0, r5
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801742c:	2380      	movs	r3, #128	@ 0x80
 801742e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8017430:	f005 ff9a 	bl	801d368 <HAL_TIM_Base_Init>
 8017434:	b108      	cbz	r0, 801743a <main+0x6b6>
 8017436:	b672      	cpsid	i
  while (1)
 8017438:	e7fe      	b.n	8017438 <main+0x6b4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801743a:	900f      	str	r0, [sp, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801743c:	9011      	str	r0, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801743e:	4621      	mov	r1, r4
 8017440:	4628      	mov	r0, r5
 8017442:	f006 f9eb 	bl	801d81c <HAL_TIMEx_MasterConfigSynchronization>
 8017446:	4606      	mov	r6, r0
 8017448:	b108      	cbz	r0, 801744e <main+0x6ca>
 801744a:	b672      	cpsid	i
  while (1)
 801744c:	e7fe      	b.n	801744c <main+0x6c8>
  MX_FATFS_Init();
 801744e:	f008 f9ad 	bl	801f7ac <MX_FATFS_Init>
  htim6.Instance = TIM6;
 8017452:	4d2f      	ldr	r5, [pc, #188]	@ (8017510 <main+0x78c>)
  htim6.Init.Prescaler = 60;
 8017454:	4a2f      	ldr	r2, [pc, #188]	@ (8017514 <main+0x790>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017456:	960f      	str	r6, [sp, #60]	@ 0x3c
  htim6.Init.Prescaler = 60;
 8017458:	233c      	movs	r3, #60	@ 0x3c
 801745a:	e9c5 2300 	strd	r2, r3, [r5]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801745e:	e9c4 6601 	strd	r6, r6, [r4, #4]
  htim6.Init.Period = 65535;
 8017462:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8017466:	4628      	mov	r0, r5
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017468:	60ae      	str	r6, [r5, #8]
  htim6.Init.Period = 65535;
 801746a:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801746c:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801746e:	f005 ff7b 	bl	801d368 <HAL_TIM_Base_Init>
 8017472:	b108      	cbz	r0, 8017478 <main+0x6f4>
 8017474:	b672      	cpsid	i
  while (1)
 8017476:	e7fe      	b.n	8017476 <main+0x6f2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017478:	900f      	str	r0, [sp, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801747a:	9011      	str	r0, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801747c:	4621      	mov	r1, r4
 801747e:	4628      	mov	r0, r5
 8017480:	f006 f9cc 	bl	801d81c <HAL_TIMEx_MasterConfigSynchronization>
 8017484:	4606      	mov	r6, r0
 8017486:	b108      	cbz	r0, 801748c <main+0x708>
 8017488:	b672      	cpsid	i
  while (1)
 801748a:	e7fe      	b.n	801748a <main+0x706>
  HAL_TIM_Base_Start_IT(&htim6);
 801748c:	4628      	mov	r0, r5
 801748e:	f005 fe33 	bl	801d0f8 <HAL_TIM_Base_Start_IT>
  MX_TouchGFX_Init();
 8017492:	f00f fe70 	bl	8027176 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8017496:	f00f fe6d 	bl	8027174 <MX_TouchGFX_PreOSInit>
  printf("BSP version %d.%d.%d\n", BSP_VERSION_MAJOR, BSP_VERSION_MINOR, BSP_VERSION_PATCH);
 801749a:	4632      	mov	r2, r6
 801749c:	4633      	mov	r3, r6
 801749e:	4639      	mov	r1, r7
 80174a0:	481d      	ldr	r0, [pc, #116]	@ (8017518 <main+0x794>)
 80174a2:	f025 fee3 	bl	803d26c <iprintf>
  CAN_InitTask();
 80174a6:	f007 fecb 	bl	801f240 <CAN_InitTask>
  FlashDrv_ConfigDef  config = {.maxSPIFrequencyInkHz = 120000, .nrIOLines = 4};
 80174aa:	4b1c      	ldr	r3, [pc, #112]	@ (801751c <main+0x798>)
 80174ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 80174ae:	2304      	movs	r3, #4
 80174b0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
  MX25L32_Init(config);
 80174b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80174b8:	f001 f888 	bl	80185cc <MX25L32_Init>
  FS_Init(); // Init littlefs here or in a FreeRtos task
 80174bc:	f7ff fa52 	bl	8016964 <FS_Init>
  FATFS_Init();
 80174c0:	f008 f9ec 	bl	801f89c <FATFS_Init>
  ADC_startSampling();
 80174c4:	f7fe ffc6 	bl	8016454 <ADC_startSampling>
  osKernelInitialize();
 80174c8:	f00a fa3a 	bl	8021940 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80174cc:	4a14      	ldr	r2, [pc, #80]	@ (8017520 <main+0x79c>)
 80174ce:	4815      	ldr	r0, [pc, #84]	@ (8017524 <main+0x7a0>)
 80174d0:	4631      	mov	r1, r6
 80174d2:	f00a fa61 	bl	8021998 <osThreadNew>
 80174d6:	4b14      	ldr	r3, [pc, #80]	@ (8017528 <main+0x7a4>)
  TouchGfx_TaskHandle = osThreadNew(StartTouchGfx, NULL, &TouchGfx_Task_attributes);
 80174d8:	4a14      	ldr	r2, [pc, #80]	@ (801752c <main+0x7a8>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80174da:	6018      	str	r0, [r3, #0]
  TouchGfx_TaskHandle = osThreadNew(StartTouchGfx, NULL, &TouchGfx_Task_attributes);
 80174dc:	4631      	mov	r1, r6
 80174de:	4814      	ldr	r0, [pc, #80]	@ (8017530 <main+0x7ac>)
 80174e0:	f00a fa5a 	bl	8021998 <osThreadNew>
 80174e4:	4b13      	ldr	r3, [pc, #76]	@ (8017534 <main+0x7b0>)
 80174e6:	6018      	str	r0, [r3, #0]
  ADC_InitTask();
 80174e8:	f7fe ff90 	bl	801640c <ADC_InitTask>
  osKernelStart();
 80174ec:	f00a fa3a 	bl	8021964 <osKernelStart>
  while (1)
 80174f0:	e7fe      	b.n	80174f0 <main+0x76c>
 80174f2:	bf00      	nop
 80174f4:	20001b38 	.word	0x20001b38
 80174f8:	30a175ab 	.word	0x30a175ab
 80174fc:	40005800 	.word	0x40005800
 8017500:	20001a2c 	.word	0x20001a2c
 8017504:	50060800 	.word	0x50060800
 8017508:	20001948 	.word	0x20001948
 801750c:	40001400 	.word	0x40001400
 8017510:	20001994 	.word	0x20001994
 8017514:	40001000 	.word	0x40001000
 8017518:	0803f69c 	.word	0x0803f69c
 801751c:	0001d4c0 	.word	0x0001d4c0
 8017520:	08041da4 	.word	0x08041da4
 8017524:	08016c29 	.word	0x08016c29
 8017528:	2000175c 	.word	0x2000175c
 801752c:	08041d80 	.word	0x08041d80
 8017530:	08016c81 	.word	0x08016c81
 8017534:	20001758 	.word	0x20001758

08017538 <__io_putchar>:
{
 8017538:	b507      	push	{r0, r1, r2, lr}
 801753a:	9001      	str	r0, [sp, #4]
    HAL_UART_Transmit(phuart, (uint8_t *)&ch, 1, HAL_UART_TIMEOUT_VALUE);
 801753c:	4805      	ldr	r0, [pc, #20]	@ (8017554 <__io_putchar+0x1c>)
 801753e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8017542:	2201      	movs	r2, #1
 8017544:	a901      	add	r1, sp, #4
 8017546:	6800      	ldr	r0, [r0, #0]
 8017548:	f006 fd36 	bl	801dfb8 <HAL_UART_Transmit>
}
 801754c:	9801      	ldr	r0, [sp, #4]
 801754e:	b003      	add	sp, #12
 8017550:	f85d fb04 	ldr.w	pc, [sp], #4
 8017554:	20000408 	.word	0x20000408

08017558 <FreqInCallback>:
{
 8017558:	b510      	push	{r4, lr}
	if(++freq_sample_count > 9){
 801755a:	4a0b      	ldr	r2, [pc, #44]	@ (8017588 <FreqInCallback+0x30>)
 801755c:	7813      	ldrb	r3, [r2, #0]
 801755e:	3301      	adds	r3, #1
 8017560:	b2db      	uxtb	r3, r3
 8017562:	2b09      	cmp	r3, #9
 8017564:	7013      	strb	r3, [r2, #0]
 8017566:	d90d      	bls.n	8017584 <FreqInCallback+0x2c>
		freq_timer = TIM6->CNT + timer6_byte3;
 8017568:	4808      	ldr	r0, [pc, #32]	@ (801758c <FreqInCallback+0x34>)
 801756a:	4909      	ldr	r1, [pc, #36]	@ (8017590 <FreqInCallback+0x38>)
 801756c:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801756e:	680b      	ldr	r3, [r1, #0]
 8017570:	4423      	add	r3, r4
 8017572:	4c08      	ldr	r4, [pc, #32]	@ (8017594 <FreqInCallback+0x3c>)
 8017574:	6023      	str	r3, [r4, #0]
		freq_sample_count = 0;
 8017576:	2300      	movs	r3, #0
 8017578:	7013      	strb	r3, [r2, #0]
		TIM6->CNT = 0;
 801757a:	6243      	str	r3, [r0, #36]	@ 0x24
		timer6_byte3 = 0;
 801757c:	600b      	str	r3, [r1, #0]
		frequency_valid = true;
 801757e:	4b06      	ldr	r3, [pc, #24]	@ (8017598 <FreqInCallback+0x40>)
 8017580:	2201      	movs	r2, #1
 8017582:	701a      	strb	r2, [r3, #0]
}
 8017584:	bd10      	pop	{r4, pc}
 8017586:	bf00      	nop
 8017588:	20001ec0 	.word	0x20001ec0
 801758c:	40001000 	.word	0x40001000
 8017590:	20001eb8 	.word	0x20001eb8
 8017594:	20001ebc 	.word	0x20001ebc
 8017598:	20001eb6 	.word	0x20001eb6

0801759c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 801759c:	6803      	ldr	r3, [r0, #0]
 801759e:	4a0b      	ldr	r2, [pc, #44]	@ (80175cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80175a0:	4293      	cmp	r3, r2
 80175a2:	d101      	bne.n	80175a8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80175a4:	f001 b8b6 	b.w	8018714 <HAL_IncTick>
  else if (htim->Instance == TIM6)
 80175a8:	4a09      	ldr	r2, [pc, #36]	@ (80175d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80175aa:	4293      	cmp	r3, r2
 80175ac:	d10d      	bne.n	80175ca <HAL_TIM_PeriodElapsedCallback+0x2e>
    	  timer6_byte3 += 0x00010000;
 80175ae:	4a09      	ldr	r2, [pc, #36]	@ (80175d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80175b0:	6813      	ldr	r3, [r2, #0]
 80175b2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
    	  if(timer6_byte3 > 0x00200000)
 80175b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
    	  timer6_byte3 += 0x00010000;
 80175ba:	6013      	str	r3, [r2, #0]
    	  if(timer6_byte3 > 0x00200000)
 80175bc:	d905      	bls.n	80175ca <HAL_TIM_PeriodElapsedCallback+0x2e>
    		  frequency_valid = false;
 80175be:	4b06      	ldr	r3, [pc, #24]	@ (80175d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80175c0:	2100      	movs	r1, #0
 80175c2:	7019      	strb	r1, [r3, #0]
    		  timer6_byte3 = 0x00200000;
 80175c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80175c8:	6013      	str	r3, [r2, #0]
}
 80175ca:	4770      	bx	lr
 80175cc:	40012c00 	.word	0x40012c00
 80175d0:	40001000 	.word	0x40001000
 80175d4:	20001eb8 	.word	0x20001eb8
 80175d8:	20001eb6 	.word	0x20001eb6

080175dc <Error_Handler>:
 80175dc:	b672      	cpsid	i
  while (1)
 80175de:	e7fe      	b.n	80175de <Error_Handler+0x2>

080175e0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80175e0:	4b0d      	ldr	r3, [pc, #52]	@ (8017618 <HAL_MspInit+0x38>)
 80175e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80175e4:	f042 0201 	orr.w	r2, r2, #1
{
 80175e8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80175ea:	661a      	str	r2, [r3, #96]	@ 0x60
 80175ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80175ee:	f002 0201 	and.w	r2, r2, #1
 80175f2:	9200      	str	r2, [sp, #0]
 80175f4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80175f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80175f8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80175fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80175fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017604:	9301      	str	r3, [sp, #4]
 8017606:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017608:	2200      	movs	r2, #0
 801760a:	210f      	movs	r1, #15
 801760c:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017610:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017612:	f002 b8e5 	b.w	80197e0 <HAL_NVIC_SetPriority>
 8017616:	bf00      	nop
 8017618:	40021000 	.word	0x40021000

0801761c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801761c:	b570      	push	{r4, r5, r6, lr}
 801761e:	4605      	mov	r5, r0
 8017620:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017622:	2214      	movs	r2, #20
 8017624:	2100      	movs	r1, #0
 8017626:	a803      	add	r0, sp, #12
 8017628:	f025 ff3c 	bl	803d4a4 <memset>
  if(hadc->Instance==ADC1)
 801762c:	682a      	ldr	r2, [r5, #0]
 801762e:	4b2c      	ldr	r3, [pc, #176]	@ (80176e0 <HAL_ADC_MspInit+0xc4>)
 8017630:	429a      	cmp	r2, r3
 8017632:	d152      	bne.n	80176da <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8017634:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8017638:	f5a3 33f8 	sub.w	r3, r3, #126976	@ 0x1f000
    PA0     ------> ADC1_IN5
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC_HW_REF_ID1_Pin|ADC_HW_REF_ID0_Pin|ADC_VIN_MEAS_Pin|ADC_AIN_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801763c:	240b      	movs	r4, #11
    __HAL_RCC_ADC_CLK_ENABLE();
 801763e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017640:	4828      	ldr	r0, [pc, #160]	@ (80176e4 <HAL_ADC_MspInit+0xc8>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8017642:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8017646:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017648:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801764a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 801764e:	9200      	str	r2, [sp, #0]
 8017650:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017654:	f042 0204 	orr.w	r2, r2, #4
 8017658:	64da      	str	r2, [r3, #76]	@ 0x4c
 801765a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801765c:	f002 0204 	and.w	r2, r2, #4
 8017660:	9201      	str	r2, [sp, #4]
 8017662:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017664:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017666:	f042 0201 	orr.w	r2, r2, #1
 801766a:	64da      	str	r2, [r3, #76]	@ 0x4c
 801766c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801766e:	f003 0301 	and.w	r3, r3, #1
 8017672:	9302      	str	r3, [sp, #8]
 8017674:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017676:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8017678:	231b      	movs	r3, #27
 801767a:	e9cd 3403 	strd	r3, r4, [sp, #12]

    GPIO_InitStruct.Pin = ADC_DISP_TEMP_Pin|ADC_AIN_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801767e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017680:	f002 fcde 	bl	801a040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_DISP_TEMP_Pin|ADC_AIN_2_Pin;
 8017684:	2321      	movs	r3, #33	@ 0x21
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017686:	a903      	add	r1, sp, #12
 8017688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801768c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017690:	9605      	str	r6, [sp, #20]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8017692:	4c15      	ldr	r4, [pc, #84]	@ (80176e8 <HAL_ADC_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017694:	f002 fcd4 	bl	801a040 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8017698:	4a14      	ldr	r2, [pc, #80]	@ (80176ec <HAL_ADC_MspInit+0xd0>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801769a:	6226      	str	r6, [r4, #32]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801769c:	2305      	movs	r3, #5
 801769e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80176a2:	2180      	movs	r1, #128	@ 0x80
 80176a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80176a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80176ac:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80176b0:	2320      	movs	r3, #32
 80176b2:	e9c4 0306 	strd	r0, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80176b6:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80176b8:	e9c4 6602 	strd	r6, r6, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80176bc:	f002 f970 	bl	80199a0 <HAL_DMA_Init>
 80176c0:	b108      	cbz	r0, 80176c6 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80176c2:	f7ff ff8b 	bl	80175dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 10, 0);
 80176c6:	2012      	movs	r0, #18
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80176c8:	652c      	str	r4, [r5, #80]	@ 0x50
    HAL_NVIC_SetPriority(ADC1_IRQn, 10, 0);
 80176ca:	2200      	movs	r2, #0
 80176cc:	210a      	movs	r1, #10
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80176ce:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_IRQn, 10, 0);
 80176d0:	f002 f886 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80176d4:	2012      	movs	r0, #18
 80176d6:	f002 f8b5 	bl	8019844 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80176da:	b008      	add	sp, #32
 80176dc:	bd70      	pop	{r4, r5, r6, pc}
 80176de:	bf00      	nop
 80176e0:	50040000 	.word	0x50040000
 80176e4:	48000800 	.word	0x48000800
 80176e8:	20001c38 	.word	0x20001c38
 80176ec:	40020008 	.word	0x40020008

080176f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80176f0:	b570      	push	{r4, r5, r6, lr}
 80176f2:	4604      	mov	r4, r0
 80176f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80176f6:	2214      	movs	r2, #20
 80176f8:	2100      	movs	r1, #0
 80176fa:	a803      	add	r0, sp, #12
 80176fc:	f025 fed2 	bl	803d4a4 <memset>
  if(hcan->Instance==CAN1)
 8017700:	6822      	ldr	r2, [r4, #0]
 8017702:	4b1e      	ldr	r3, [pc, #120]	@ (801777c <HAL_CAN_MspInit+0x8c>)
 8017704:	429a      	cmp	r2, r3
 8017706:	d136      	bne.n	8017776 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8017708:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801770c:	2402      	movs	r4, #2
    __HAL_RCC_CAN1_CLK_ENABLE();
 801770e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017710:	481b      	ldr	r0, [pc, #108]	@ (8017780 <HAL_CAN_MspInit+0x90>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8017712:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8017716:	659a      	str	r2, [r3, #88]	@ 0x58
 8017718:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801771a:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 801771e:	9201      	str	r2, [sp, #4]
 8017720:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017722:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017724:	f042 0202 	orr.w	r2, r2, #2
 8017728:	64da      	str	r2, [r3, #76]	@ 0x4c
 801772a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801772c:	f003 0302 	and.w	r3, r3, #2
 8017730:	9302      	str	r3, [sp, #8]
 8017732:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017738:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801773c:	2603      	movs	r6, #3
 801773e:	2301      	movs	r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8017740:	2509      	movs	r5, #9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017742:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017744:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8017748:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801774a:	f002 fc79 	bl	801a040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801774e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017752:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017756:	480a      	ldr	r0, [pc, #40]	@ (8017780 <HAL_CAN_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8017758:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801775a:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801775c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801775e:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017762:	f002 fc6d 	bl	801a040 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8017766:	2014      	movs	r0, #20
 8017768:	4622      	mov	r2, r4
 801776a:	2105      	movs	r1, #5
 801776c:	f002 f838 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8017770:	2014      	movs	r0, #20
 8017772:	f002 f867 	bl	8019844 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8017776:	b008      	add	sp, #32
 8017778:	bd70      	pop	{r4, r5, r6, pc}
 801777a:	bf00      	nop
 801777c:	40006400 	.word	0x40006400
 8017780:	48000400 	.word	0x48000400

08017784 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8017784:	6802      	ldr	r2, [r0, #0]
 8017786:	4b08      	ldr	r3, [pc, #32]	@ (80177a8 <HAL_CRC_MspInit+0x24>)
 8017788:	429a      	cmp	r2, r3
{
 801778a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 801778c:	d10a      	bne.n	80177a4 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801778e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8017792:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017794:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8017798:	649a      	str	r2, [r3, #72]	@ 0x48
 801779a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801779c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80177a0:	9301      	str	r3, [sp, #4]
 80177a2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80177a4:	b002      	add	sp, #8
 80177a6:	4770      	bx	lr
 80177a8:	40023000 	.word	0x40023000

080177ac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80177ac:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80177ae:	4b0e      	ldr	r3, [pc, #56]	@ (80177e8 <HAL_DMA2D_MspInit+0x3c>)
 80177b0:	6802      	ldr	r2, [r0, #0]
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d115      	bne.n	80177e2 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80177b6:	f5a3 4320 	sub.w	r3, r3, #40960	@ 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80177ba:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80177bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80177be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80177c2:	649a      	str	r2, [r3, #72]	@ 0x48
 80177c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80177c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80177ca:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80177cc:	2200      	movs	r2, #0
 80177ce:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80177d0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80177d2:	f002 f805 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80177d6:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80177d8:	b003      	add	sp, #12
 80177da:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80177de:	f002 b831 	b.w	8019844 <HAL_NVIC_EnableIRQ>
}
 80177e2:	b003      	add	sp, #12
 80177e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80177e8:	4002b000 	.word	0x4002b000

080177ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80177ec:	b510      	push	{r4, lr}
 80177ee:	b0ae      	sub	sp, #184	@ 0xb8
 80177f0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80177f2:	2214      	movs	r2, #20
 80177f4:	2100      	movs	r1, #0
 80177f6:	a803      	add	r0, sp, #12
 80177f8:	f025 fe54 	bl	803d4a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80177fc:	2298      	movs	r2, #152	@ 0x98
 80177fe:	2100      	movs	r1, #0
 8017800:	a808      	add	r0, sp, #32
 8017802:	f025 fe4f 	bl	803d4a4 <memset>
  if(hi2c->Instance==I2C2)
 8017806:	6822      	ldr	r2, [r4, #0]
 8017808:	4b17      	ldr	r3, [pc, #92]	@ (8017868 <HAL_I2C_MspInit+0x7c>)
 801780a:	429a      	cmp	r2, r3
 801780c:	d129      	bne.n	8017862 <HAL_I2C_MspInit+0x76>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801780e:	2380      	movs	r3, #128	@ 0x80
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017810:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8017812:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017814:	f005 f8cc 	bl	801c9b0 <HAL_RCCEx_PeriphCLKConfig>
 8017818:	b108      	cbz	r0, 801781e <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 801781a:	f7ff fedf 	bl	80175dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801781e:	4c13      	ldr	r4, [pc, #76]	@ (801786c <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = RTC_SDA_2_Pin|RTC_SCL_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017820:	4813      	ldr	r0, [pc, #76]	@ (8017870 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017822:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017824:	f043 0302 	orr.w	r3, r3, #2
 8017828:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801782a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801782c:	f003 0302 	and.w	r3, r3, #2
 8017830:	9301      	str	r3, [sp, #4]
 8017832:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8017834:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8017838:	2312      	movs	r3, #18
 801783a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801783e:	2100      	movs	r1, #0
 8017840:	2303      	movs	r3, #3
 8017842:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8017846:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017848:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801784a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801784c:	f002 fbf8 	bl	801a040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8017850:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8017852:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8017856:	65a3      	str	r3, [r4, #88]	@ 0x58
 8017858:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801785a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801785e:	9302      	str	r3, [sp, #8]
 8017860:	9b02      	ldr	r3, [sp, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8017862:	b02e      	add	sp, #184	@ 0xb8
 8017864:	bd10      	pop	{r4, pc}
 8017866:	bf00      	nop
 8017868:	40005800 	.word	0x40005800
 801786c:	40021000 	.word	0x40021000
 8017870:	48000400 	.word	0x48000400

08017874 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8017874:	b570      	push	{r4, r5, r6, lr}
 8017876:	b0ae      	sub	sp, #184	@ 0xb8
 8017878:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801787a:	2214      	movs	r2, #20
 801787c:	2100      	movs	r1, #0
 801787e:	a803      	add	r0, sp, #12
 8017880:	f025 fe10 	bl	803d4a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017884:	2298      	movs	r2, #152	@ 0x98
 8017886:	2100      	movs	r1, #0
 8017888:	a808      	add	r0, sp, #32
 801788a:	f025 fe0b 	bl	803d4a4 <memset>
  if(hltdc->Instance==LTDC)
 801788e:	6822      	ldr	r2, [r4, #0]
 8017890:	4b2c      	ldr	r3, [pc, #176]	@ (8017944 <HAL_LTDC_MspInit+0xd0>)
 8017892:	429a      	cmp	r2, r3
 8017894:	d153      	bne.n	801793e <HAL_LTDC_MspInit+0xca>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8017896:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801789a:	9308      	str	r3, [sp, #32]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_MSI;
    PeriphClkInit.PLLSAI2.PLLSAI2M = 4;
 801789c:	2101      	movs	r1, #1
 801789e:	2304      	movs	r3, #4
    PeriphClkInit.PLLSAI2.PLLSAI2N = 13;
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 80178a0:	200d      	movs	r0, #13
    PeriphClkInit.PLLSAI2.PLLSAI2M = 4;
 80178a2:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV8;
 80178a6:	2208      	movs	r2, #8
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 80178a8:	2302      	movs	r3, #2
 80178aa:	e9cd 0312 	strd	r0, r3, [sp, #72]	@ 0x48
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 80178ae:	e9cd 3214 	strd	r3, r2, [sp, #80]	@ 0x50
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80178b2:	a808      	add	r0, sp, #32
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 80178b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80178b8:	9316      	str	r3, [sp, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80178ba:	f005 f879 	bl	801c9b0 <HAL_RCCEx_PeriphCLKConfig>
 80178be:	b108      	cbz	r0, 80178c4 <HAL_LTDC_MspInit+0x50>
    {
      Error_Handler();
 80178c0:	f7ff fe8c 	bl	80175dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80178c4:	4b20      	ldr	r3, [pc, #128]	@ (8017948 <HAL_LTDC_MspInit+0xd4>)
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80178c6:	4821      	ldr	r0, [pc, #132]	@ (801794c <HAL_LTDC_MspInit+0xd8>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80178c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80178ca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80178ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80178d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80178d2:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 80178d6:	9200      	str	r2, [sp, #0]
 80178d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80178da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80178dc:	f042 0210 	orr.w	r2, r2, #16
 80178e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80178e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80178e4:	f002 0210 	and.w	r2, r2, #16
 80178e8:	9201      	str	r2, [sp, #4]
 80178ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80178ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80178ee:	f042 0208 	orr.w	r2, r2, #8
 80178f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80178f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178f6:	f003 0308 	and.w	r3, r3, #8
 80178fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178fc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80178fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017900:	2602      	movs	r6, #2
 8017902:	f64f 7383 	movw	r3, #65411	@ 0xff83
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8017906:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017908:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801790a:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801790e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8017912:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017914:	f002 fb94 	bl	801a040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8017918:	f64d 734b 	movw	r3, #57163	@ 0xdf4b
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801791c:	480c      	ldr	r0, [pc, #48]	@ (8017950 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801791e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017920:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017922:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017926:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801792a:	f002 fb89 	bl	801a040 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801792e:	205b      	movs	r0, #91	@ 0x5b
 8017930:	4622      	mov	r2, r4
 8017932:	2105      	movs	r1, #5
 8017934:	f001 ff54 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8017938:	205b      	movs	r0, #91	@ 0x5b
 801793a:	f001 ff83 	bl	8019844 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 801793e:	b02e      	add	sp, #184	@ 0xb8
 8017940:	bd70      	pop	{r4, r5, r6, pc}
 8017942:	bf00      	nop
 8017944:	40016800 	.word	0x40016800
 8017948:	40021000 	.word	0x40021000
 801794c:	48001000 	.word	0x48001000
 8017950:	48000c00 	.word	0x48000c00

08017954 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8017954:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017956:	2214      	movs	r2, #20
{
 8017958:	b0b1      	sub	sp, #196	@ 0xc4
 801795a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801795c:	2100      	movs	r1, #0
 801795e:	eb0d 0002 	add.w	r0, sp, r2
 8017962:	f025 fd9f 	bl	803d4a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017966:	2298      	movs	r2, #152	@ 0x98
 8017968:	2100      	movs	r1, #0
 801796a:	a80a      	add	r0, sp, #40	@ 0x28
 801796c:	f025 fd9a 	bl	803d4a4 <memset>
  if(hospi->Instance==OCTOSPI1)
 8017970:	6822      	ldr	r2, [r4, #0]
 8017972:	4b2d      	ldr	r3, [pc, #180]	@ (8017a28 <HAL_OSPI_MspInit+0xd4>)
 8017974:	429a      	cmp	r2, r3
 8017976:	d155      	bne.n	8017a24 <HAL_OSPI_MspInit+0xd0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8017978:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801797c:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801797e:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_PLL;
 8017980:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8017984:	932e      	str	r3, [sp, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017986:	f005 f813 	bl	801c9b0 <HAL_RCCEx_PeriphCLKConfig>
 801798a:	b108      	cbz	r0, 8017990 <HAL_OSPI_MspInit+0x3c>
    {
      Error_Handler();
 801798c:	f7ff fe26 	bl	80175dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8017990:	4b26      	ldr	r3, [pc, #152]	@ (8017a2c <HAL_OSPI_MspInit+0xd8>)
 8017992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017994:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8017998:	64da      	str	r2, [r3, #76]	@ 0x4c
 801799a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801799c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80179a0:	9201      	str	r2, [sp, #4]
 80179a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80179a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80179a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80179aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80179ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80179ae:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80179b2:	9202      	str	r2, [sp, #8]
 80179b4:	9a02      	ldr	r2, [sp, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80179b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80179b8:	f042 0201 	orr.w	r2, r2, #1
 80179bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80179be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80179c0:	f002 0201 	and.w	r2, r2, #1
 80179c4:	9203      	str	r2, [sp, #12]
 80179c6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80179c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80179ca:	f042 0202 	orr.w	r2, r2, #2
 80179ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80179d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80179d2:	f003 0302 	and.w	r3, r3, #2
 80179d6:	9304      	str	r3, [sp, #16]
    PB10     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = FLASH_NCS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80179d8:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179da:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80179dc:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80179de:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P1;
 80179e0:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179e2:	2310      	movs	r3, #16
    HAL_GPIO_Init(FLASH_NCS_GPIO_Port, &GPIO_InitStruct);
 80179e4:	a905      	add	r1, sp, #20
 80179e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179ea:	e9cd 3605 	strd	r3, r6, [sp, #20]

    GPIO_InitStruct.Pin = FLASH_SIO3_Pin|FLASH_SIO2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80179ee:	270a      	movs	r7, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80179f0:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(FLASH_NCS_GPIO_Port, &GPIO_InitStruct);
 80179f4:	f002 fb24 	bl	801a040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = FLASH_SIO3_Pin|FLASH_SIO2_Pin;
 80179f8:	23c0      	movs	r3, #192	@ 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80179fa:	a905      	add	r1, sp, #20
 80179fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a00:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a04:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8017a08:	9709      	str	r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017a0a:	f002 fb19 	bl	801a040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_IO1_Pin|FLASH_IO0_Pin|FLASH_CLK_Pin;
 8017a0e:	f240 4303 	movw	r3, #1027	@ 0x403
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017a12:	4807      	ldr	r0, [pc, #28]	@ (8017a30 <HAL_OSPI_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8017a14:	9709      	str	r7, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017a16:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a18:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017a1c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017a20:	f002 fb0e 	bl	801a040 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8017a24:	b031      	add	sp, #196	@ 0xc4
 8017a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a28:	a0001000 	.word	0xa0001000
 8017a2c:	40021000 	.word	0x40021000
 8017a30:	48000400 	.word	0x48000400

08017a34 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8017a34:	6802      	ldr	r2, [r0, #0]
 8017a36:	4b09      	ldr	r3, [pc, #36]	@ (8017a5c <HAL_RNG_MspInit+0x28>)
 8017a38:	429a      	cmp	r2, r3
{
 8017a3a:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8017a3c:	d10c      	bne.n	8017a58 <HAL_RNG_MspInit+0x24>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8017a3e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8017a42:	f5a3 337e 	sub.w	r3, r3, #260096	@ 0x3f800
 8017a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017a48:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8017a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8017a54:	9301      	str	r3, [sp, #4]
 8017a56:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8017a58:	b002      	add	sp, #8
 8017a5a:	4770      	bx	lr
 8017a5c:	50060800 	.word	0x50060800

08017a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8017a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM2)
 8017a62:	6803      	ldr	r3, [r0, #0]
 8017a64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017a68:	d10d      	bne.n	8017a86 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8017a6a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8017a6e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017a70:	f042 0201 	orr.w	r2, r2, #1
 8017a74:	659a      	str	r2, [r3, #88]	@ 0x58
 8017a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017a78:	f003 0301 	and.w	r3, r3, #1
 8017a7c:	9301      	str	r3, [sp, #4]
 8017a7e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8017a80:	b005      	add	sp, #20
 8017a82:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM6)
 8017a86:	4a16      	ldr	r2, [pc, #88]	@ (8017ae0 <HAL_TIM_Base_MspInit+0x80>)
 8017a88:	4293      	cmp	r3, r2
 8017a8a:	d114      	bne.n	8017ab6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8017a8c:	4b15      	ldr	r3, [pc, #84]	@ (8017ae4 <HAL_TIM_Base_MspInit+0x84>)
 8017a8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017a90:	f042 0210 	orr.w	r2, r2, #16
 8017a94:	659a      	str	r2, [r3, #88]	@ 0x58
 8017a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017a98:	f003 0310 	and.w	r3, r3, #16
 8017a9c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8017a9e:	2036      	movs	r0, #54	@ 0x36
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	2105      	movs	r1, #5
    __HAL_RCC_TIM6_CLK_ENABLE();
 8017aa4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8017aa6:	f001 fe9b 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017aaa:	2036      	movs	r0, #54	@ 0x36
}
 8017aac:	b005      	add	sp, #20
 8017aae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8017ab2:	f001 bec7 	b.w	8019844 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM7)
 8017ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8017ae8 <HAL_TIM_Base_MspInit+0x88>)
 8017ab8:	4293      	cmp	r3, r2
 8017aba:	d1e1      	bne.n	8017a80 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8017abc:	4b09      	ldr	r3, [pc, #36]	@ (8017ae4 <HAL_TIM_Base_MspInit+0x84>)
 8017abe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017ac0:	f042 0220 	orr.w	r2, r2, #32
 8017ac4:	659a      	str	r2, [r3, #88]	@ 0x58
 8017ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ac8:	f003 0320 	and.w	r3, r3, #32
 8017acc:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 8017ace:	2037      	movs	r0, #55	@ 0x37
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	210a      	movs	r1, #10
    __HAL_RCC_TIM7_CLK_ENABLE();
 8017ad4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 8017ad6:	f001 fe83 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8017ada:	2037      	movs	r0, #55	@ 0x37
 8017adc:	e7e6      	b.n	8017aac <HAL_TIM_Base_MspInit+0x4c>
 8017ade:	bf00      	nop
 8017ae0:	40001000 	.word	0x40001000
 8017ae4:	40021000 	.word	0x40021000
 8017ae8:	40001400 	.word	0x40001400

08017aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8017aec:	b510      	push	{r4, lr}
 8017aee:	4604      	mov	r4, r0
 8017af0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017af2:	2214      	movs	r2, #20
 8017af4:	2100      	movs	r1, #0
 8017af6:	a801      	add	r0, sp, #4
 8017af8:	f025 fcd4 	bl	803d4a4 <memset>
  if(htim->Instance==TIM2)
 8017afc:	6823      	ldr	r3, [r4, #0]
 8017afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017b02:	d114      	bne.n	8017b2e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b04:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = LTDC_PWM_BACKLIGHT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(LTDC_PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8017b08:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017b0c:	f042 0201 	orr.w	r2, r2, #1
 8017b10:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017b14:	f003 0301 	and.w	r3, r3, #1
 8017b18:	9300      	str	r3, [sp, #0]
 8017b1a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LTDC_PWM_BACKLIGHT_Pin;
 8017b1c:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b1e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    HAL_GPIO_Init(LTDC_PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8017b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8017b26:	2301      	movs	r3, #1
 8017b28:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(LTDC_PWM_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8017b2a:	f002 fa89 	bl	801a040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8017b2e:	b006      	add	sp, #24
 8017b30:	bd10      	pop	{r4, pc}
	...

08017b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8017b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b38:	2214      	movs	r2, #20
{
 8017b3a:	b0b0      	sub	sp, #192	@ 0xc0
 8017b3c:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b3e:	2100      	movs	r1, #0
 8017b40:	eb0d 0002 	add.w	r0, sp, r2
 8017b44:	f025 fcae 	bl	803d4a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017b48:	2298      	movs	r2, #152	@ 0x98
 8017b4a:	2100      	movs	r1, #0
 8017b4c:	a80a      	add	r0, sp, #40	@ 0x28
 8017b4e:	f025 fca9 	bl	803d4a4 <memset>
  if(huart->Instance==USART1)
 8017b52:	682b      	ldr	r3, [r5, #0]
 8017b54:	4a56      	ldr	r2, [pc, #344]	@ (8017cb0 <HAL_UART_MspInit+0x17c>)
 8017b56:	4293      	cmp	r3, r2
 8017b58:	d14a      	bne.n	8017bf0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017b5a:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017b5c:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8017b5e:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017b60:	f004 ff26 	bl	801c9b0 <HAL_RCCEx_PeriphCLKConfig>
 8017b64:	b108      	cbz	r0, 8017b6a <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8017b66:	f7ff fd39 	bl	80175dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017b6a:	4b52      	ldr	r3, [pc, #328]	@ (8017cb4 <HAL_UART_MspInit+0x180>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017b6c:	4852      	ldr	r0, [pc, #328]	@ (8017cb8 <HAL_UART_MspInit+0x184>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8017b6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8017b70:	4c52      	ldr	r4, [pc, #328]	@ (8017cbc <HAL_UART_MspInit+0x188>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8017b72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8017b76:	661a      	str	r2, [r3, #96]	@ 0x60
 8017b78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8017b7a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8017b7e:	9200      	str	r2, [sp, #0]
 8017b80:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017b82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017b84:	f042 0202 	orr.w	r2, r2, #2
 8017b88:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017b8c:	f003 0302 	and.w	r3, r3, #2
 8017b90:	9301      	str	r3, [sp, #4]
 8017b92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b94:	21c0      	movs	r1, #192	@ 0xc0
 8017b96:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017b98:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b9a:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017b9e:	2303      	movs	r3, #3
 8017ba0:	e9cd 6307 	strd	r6, r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017ba4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017ba6:	2307      	movs	r3, #7
 8017ba8:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017baa:	f002 fa49 	bl	801a040 <HAL_GPIO_Init>
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8017bae:	4844      	ldr	r0, [pc, #272]	@ (8017cc0 <HAL_UART_MspInit+0x18c>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8017bb0:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8017bb2:	2318      	movs	r3, #24
 8017bb4:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8017bb8:	2380      	movs	r3, #128	@ 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017bba:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8017bbe:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8017bc0:	2320      	movs	r3, #32
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8017bc2:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8017bc6:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8017bca:	f001 fee9 	bl	80199a0 <HAL_DMA_Init>
 8017bce:	b108      	cbz	r0, 8017bd4 <HAL_UART_MspInit+0xa0>
    {
      Error_Handler();
 8017bd0:	f7ff fd04 	bl	80175dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8017bd4:	2025      	movs	r0, #37	@ 0x25
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8017bd6:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8017bda:	2200      	movs	r2, #0
 8017bdc:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8017bde:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8017be0:	f001 fdfe 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8017be4:	2025      	movs	r0, #37	@ 0x25

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8017be6:	f001 fe2d 	bl	8019844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8017bea:	b030      	add	sp, #192	@ 0xc0
 8017bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART2)
 8017bf0:	4a34      	ldr	r2, [pc, #208]	@ (8017cc4 <HAL_UART_MspInit+0x190>)
 8017bf2:	4293      	cmp	r3, r2
 8017bf4:	d1f9      	bne.n	8017bea <HAL_UART_MspInit+0xb6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8017bf6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017bf8:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8017bfa:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017bfc:	f004 fed8 	bl	801c9b0 <HAL_RCCEx_PeriphCLKConfig>
 8017c00:	b108      	cbz	r0, 8017c06 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8017c02:	f7ff fceb 	bl	80175dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8017c06:	4b2b      	ldr	r3, [pc, #172]	@ (8017cb4 <HAL_UART_MspInit+0x180>)
 8017c08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017c0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8017c0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8017c10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017c12:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8017c16:	9202      	str	r2, [sp, #8]
 8017c18:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017c1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017c1c:	f042 0201 	orr.w	r2, r2, #1
 8017c20:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017c22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017c24:	f002 0201 	and.w	r2, r2, #1
 8017c28:	9203      	str	r2, [sp, #12]
 8017c2a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017c2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017c2e:	f042 0208 	orr.w	r2, r2, #8
 8017c32:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c36:	f003 0308 	and.w	r3, r3, #8
 8017c3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c3c:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8017c3e:	2407      	movs	r4, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017c40:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8017c42:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c44:	2308      	movs	r3, #8
 8017c46:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c4a:	2703      	movs	r7, #3
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8017c4c:	a905      	add	r1, sp, #20
 8017c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c52:	e9cd 3805 	strd	r3, r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c56:	e9cd 6707 	strd	r6, r7, [sp, #28]
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8017c5a:	f002 f9f1 	bl	801a040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_IO_Pin|RS485_TX_Pin;
 8017c5e:	2330      	movs	r3, #48	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017c60:	4819      	ldr	r0, [pc, #100]	@ (8017cc8 <HAL_UART_MspInit+0x194>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8017c62:	9409      	str	r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017c64:	a905      	add	r1, sp, #20
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8017c66:	4c19      	ldr	r4, [pc, #100]	@ (8017ccc <HAL_UART_MspInit+0x198>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c68:	e9cd 3805 	strd	r3, r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c6c:	e9cd 6707 	strd	r6, r7, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017c70:	f002 f9e6 	bl	801a040 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8017c74:	4a16      	ldr	r2, [pc, #88]	@ (8017cd0 <HAL_UART_MspInit+0x19c>)
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8017c76:	61a6      	str	r6, [r4, #24]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8017c78:	231a      	movs	r3, #26
 8017c7a:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8017c7e:	2380      	movs	r3, #128	@ 0x80
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8017c80:	e9c4 3604 	strd	r3, r6, [r4, #16]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8017c84:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8017c86:	2320      	movs	r3, #32
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8017c88:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8017c8c:	e9c4 3607 	strd	r3, r6, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8017c90:	f001 fe86 	bl	80199a0 <HAL_DMA_Init>
 8017c94:	b108      	cbz	r0, 8017c9a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8017c96:	f7ff fca1 	bl	80175dc <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8017c9a:	2026      	movs	r0, #38	@ 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8017c9c:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8017ca4:	62a5      	str	r5, [r4, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8017ca6:	f001 fd9b 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8017caa:	2026      	movs	r0, #38	@ 0x26
 8017cac:	e79b      	b.n	8017be6 <HAL_UART_MspInit+0xb2>
 8017cae:	bf00      	nop
 8017cb0:	40013800 	.word	0x40013800
 8017cb4:	40021000 	.word	0x40021000
 8017cb8:	48000400 	.word	0x48000400
 8017cbc:	200017c0 	.word	0x200017c0
 8017cc0:	4002001c 	.word	0x4002001c
 8017cc4:	40004400 	.word	0x40004400
 8017cc8:	48000c00 	.word	0x48000c00
 8017ccc:	20001760 	.word	0x20001760
 8017cd0:	40020030 	.word	0x40020030

08017cd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017cd4:	b570      	push	{r4, r5, r6, lr}
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8017cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8017d50 <HAL_InitTick+0x7c>)

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8017cd8:	4d1e      	ldr	r5, [pc, #120]	@ (8017d54 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8017cda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8017cdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
{
 8017ce0:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8017ce2:	661a      	str	r2, [r3, #96]	@ 0x60
 8017ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017cea:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8017cec:	9302      	str	r3, [sp, #8]
{
 8017cee:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017cf0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8017cf2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017cf4:	f004 fd4c 	bl	801c790 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8017cf8:	f004 fd38 	bl	801c76c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8017cfc:	4b16      	ldr	r3, [pc, #88]	@ (8017d58 <HAL_InitTick+0x84>)
 8017cfe:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8017d00:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8017d04:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8017d06:	4b15      	ldr	r3, [pc, #84]	@ (8017d5c <HAL_InitTick+0x88>)
 8017d08:	fbb0 f0f3 	udiv	r0, r0, r3
 8017d0c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8017d0e:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8017d10:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8017d12:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8017d14:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017d16:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017d18:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8017d1a:	f005 fb25 	bl	801d368 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8017d1e:	4604      	mov	r4, r0
 8017d20:	b980      	cbnz	r0, 8017d44 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8017d22:	4628      	mov	r0, r5
 8017d24:	f005 f9e8 	bl	801d0f8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8017d28:	4604      	mov	r4, r0
 8017d2a:	b958      	cbnz	r0, 8017d44 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8017d2c:	2019      	movs	r0, #25
 8017d2e:	f001 fd89 	bl	8019844 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8017d32:	2e0f      	cmp	r6, #15
 8017d34:	d809      	bhi.n	8017d4a <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8017d36:	4622      	mov	r2, r4
 8017d38:	4631      	mov	r1, r6
 8017d3a:	2019      	movs	r0, #25
 8017d3c:	f001 fd50 	bl	80197e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8017d40:	4b07      	ldr	r3, [pc, #28]	@ (8017d60 <HAL_InitTick+0x8c>)
 8017d42:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8017d44:	4620      	mov	r0, r4
 8017d46:	b008      	add	sp, #32
 8017d48:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8017d4a:	2401      	movs	r4, #1
 8017d4c:	e7fa      	b.n	8017d44 <HAL_InitTick+0x70>
 8017d4e:	bf00      	nop
 8017d50:	40021000 	.word	0x40021000
 8017d54:	20001d00 	.word	0x20001d00
 8017d58:	40012c00 	.word	0x40012c00
 8017d5c:	000f4240 	.word	0x000f4240
 8017d60:	2000042c 	.word	0x2000042c

08017d64 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017d64:	e7fe      	b.n	8017d64 <NMI_Handler>

08017d66 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017d66:	e7fe      	b.n	8017d66 <HardFault_Handler>

08017d68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017d68:	e7fe      	b.n	8017d68 <MemManage_Handler>

08017d6a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017d6a:	e7fe      	b.n	8017d6a <BusFault_Handler>

08017d6c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017d6c:	e7fe      	b.n	8017d6c <UsageFault_Handler>

08017d6e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017d6e:	4770      	bx	lr

08017d70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8017d70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	//Frequency input ISR call back
	FreqInCallback();
 8017d72:	f7ff fbf1 	bl	8017558 <FreqInCallback>

  /* USER CODE END EXTI2_IRQn 0 */
  /* USER CODE BEGIN EXTI2_IRQn 1 */
	HAL_GPIO_EXTI_IRQHandler(uC_FREQ_IN_Pin);
  /* USER CODE END EXTI2_IRQn 1 */
}
 8017d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_EXTI_IRQHandler(uC_FREQ_IN_Pin);
 8017d7a:	2004      	movs	r0, #4
 8017d7c:	f002 ba42 	b.w	801a204 <HAL_GPIO_EXTI_IRQHandler>

08017d80 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017d80:	4801      	ldr	r0, [pc, #4]	@ (8017d88 <DMA1_Channel1_IRQHandler+0x8>)
 8017d82:	f001 bf22 	b.w	8019bca <HAL_DMA_IRQHandler>
 8017d86:	bf00      	nop
 8017d88:	20001c38 	.word	0x20001c38

08017d8c <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8017d8c:	4801      	ldr	r0, [pc, #4]	@ (8017d94 <DMA1_Channel2_IRQHandler+0x8>)
 8017d8e:	f001 bf1c 	b.w	8019bca <HAL_DMA_IRQHandler>
 8017d92:	bf00      	nop
 8017d94:	200017c0 	.word	0x200017c0

08017d98 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8017d98:	4801      	ldr	r0, [pc, #4]	@ (8017da0 <DMA1_Channel3_IRQHandler+0x8>)
 8017d9a:	f001 bf16 	b.w	8019bca <HAL_DMA_IRQHandler>
 8017d9e:	bf00      	nop
 8017da0:	20001760 	.word	0x20001760

08017da4 <ADC1_IRQHandler>:
void ADC1_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017da4:	4801      	ldr	r0, [pc, #4]	@ (8017dac <ADC1_IRQHandler+0x8>)
 8017da6:	f000 bdc5 	b.w	8018934 <HAL_ADC_IRQHandler>
 8017daa:	bf00      	nop
 8017dac:	20001c98 	.word	0x20001c98

08017db0 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8017db0:	4801      	ldr	r0, [pc, #4]	@ (8017db8 <CAN1_RX0_IRQHandler+0x8>)
 8017db2:	f001 bbff 	b.w	80195b4 <HAL_CAN_IRQHandler>
 8017db6:	bf00      	nop
 8017db8:	20001c10 	.word	0x20001c10

08017dbc <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8017dbc:	4801      	ldr	r0, [pc, #4]	@ (8017dc4 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8017dbe:	f005 b9da 	b.w	801d176 <HAL_TIM_IRQHandler>
 8017dc2:	bf00      	nop
 8017dc4:	20001d00 	.word	0x20001d00

08017dc8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8017dc8:	4801      	ldr	r0, [pc, #4]	@ (8017dd0 <USART1_IRQHandler+0x8>)
 8017dca:	f005 bdab 	b.w	801d924 <HAL_UART_IRQHandler>
 8017dce:	bf00      	nop
 8017dd0:	200018b4 	.word	0x200018b4

08017dd4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8017dd4:	4801      	ldr	r0, [pc, #4]	@ (8017ddc <USART2_IRQHandler+0x8>)
 8017dd6:	f005 bda5 	b.w	801d924 <HAL_UART_IRQHandler>
 8017dda:	bf00      	nop
 8017ddc:	20001820 	.word	0x20001820

08017de0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017de0:	4801      	ldr	r0, [pc, #4]	@ (8017de8 <TIM6_DAC_IRQHandler+0x8>)
 8017de2:	f005 b9c8 	b.w	801d176 <HAL_TIM_IRQHandler>
 8017de6:	bf00      	nop
 8017de8:	20001994 	.word	0x20001994

08017dec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8017dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8017dee:	4803      	ldr	r0, [pc, #12]	@ (8017dfc <TIM7_IRQHandler+0x10>)
 8017df0:	f005 f9c1 	bl	801d176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  ADC_triggerConversion();
  /* USER CODE END TIM7_IRQn 1 */
}
 8017df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ADC_triggerConversion();
 8017df8:	f7fe bb1e 	b.w	8016438 <ADC_triggerConversion>
 8017dfc:	20001948 	.word	0x20001948

08017e00 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8017e00:	4801      	ldr	r0, [pc, #4]	@ (8017e08 <OTG_FS_IRQHandler+0x8>)
 8017e02:	f003 bc45 	b.w	801b690 <HAL_PCD_IRQHandler>
 8017e06:	bf00      	nop
 8017e08:	2000b3f0 	.word	0x2000b3f0

08017e0c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8017e0c:	4801      	ldr	r0, [pc, #4]	@ (8017e14 <DMA2D_IRQHandler+0x8>)
 8017e0e:	f002 b841 	b.w	8019e94 <HAL_DMA2D_IRQHandler>
 8017e12:	bf00      	nop
 8017e14:	20001b8c 	.word	0x20001b8c

08017e18 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8017e18:	4801      	ldr	r0, [pc, #4]	@ (8017e20 <LTDC_IRQHandler+0x8>)
 8017e1a:	f002 bd7c 	b.w	801a916 <HAL_LTDC_IRQHandler>
 8017e1e:	bf00      	nop
 8017e20:	20001a90 	.word	0x20001a90

08017e24 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8017e24:	2001      	movs	r0, #1
 8017e26:	4770      	bx	lr

08017e28 <_kill>:

int _kill(int pid, int sig)
{
 8017e28:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8017e2a:	f025 fcc9 	bl	803d7c0 <__errno>
 8017e2e:	2316      	movs	r3, #22
 8017e30:	6003      	str	r3, [r0, #0]
  return -1;
}
 8017e32:	f04f 30ff 	mov.w	r0, #4294967295
 8017e36:	bd08      	pop	{r3, pc}

08017e38 <_exit>:

void _exit (int status)
{
 8017e38:	b508      	push	{r3, lr}
  errno = EINVAL;
 8017e3a:	f025 fcc1 	bl	803d7c0 <__errno>
 8017e3e:	2316      	movs	r3, #22
 8017e40:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8017e42:	e7fe      	b.n	8017e42 <_exit+0xa>

08017e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017e44:	b570      	push	{r4, r5, r6, lr}
 8017e46:	460d      	mov	r5, r1
 8017e48:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e4a:	460e      	mov	r6, r1
 8017e4c:	1b73      	subs	r3, r6, r5
 8017e4e:	429c      	cmp	r4, r3
 8017e50:	dc01      	bgt.n	8017e56 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8017e52:	4620      	mov	r0, r4
 8017e54:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8017e56:	f3af 8000 	nop.w
 8017e5a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e5e:	e7f5      	b.n	8017e4c <_read+0x8>

08017e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017e60:	b570      	push	{r4, r5, r6, lr}
 8017e62:	460d      	mov	r5, r1
 8017e64:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e66:	460e      	mov	r6, r1
 8017e68:	1b73      	subs	r3, r6, r5
 8017e6a:	429c      	cmp	r4, r3
 8017e6c:	dc01      	bgt.n	8017e72 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8017e6e:	4620      	mov	r0, r4
 8017e70:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8017e72:	f816 0b01 	ldrb.w	r0, [r6], #1
 8017e76:	f7ff fb5f 	bl	8017538 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e7a:	e7f5      	b.n	8017e68 <_write+0x8>

08017e7c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8017e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e80:	4770      	bx	lr

08017e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8017e82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017e86:	604b      	str	r3, [r1, #4]
  return 0;
}
 8017e88:	2000      	movs	r0, #0
 8017e8a:	4770      	bx	lr

08017e8c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8017e8c:	2001      	movs	r0, #1
 8017e8e:	4770      	bx	lr

08017e90 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8017e90:	2000      	movs	r0, #0
 8017e92:	4770      	bx	lr

08017e94 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8017e94:	4a0b      	ldr	r2, [pc, #44]	@ (8017ec4 <_sbrk+0x30>)
 8017e96:	6811      	ldr	r1, [r2, #0]
{
 8017e98:	b510      	push	{r4, lr}
 8017e9a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8017e9c:	b909      	cbnz	r1, 8017ea2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8017e9e:	490a      	ldr	r1, [pc, #40]	@ (8017ec8 <_sbrk+0x34>)
 8017ea0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8017ea2:	6810      	ldr	r0, [r2, #0]
 8017ea4:	4909      	ldr	r1, [pc, #36]	@ (8017ecc <_sbrk+0x38>)
 8017ea6:	4c0a      	ldr	r4, [pc, #40]	@ (8017ed0 <_sbrk+0x3c>)
 8017ea8:	4403      	add	r3, r0
 8017eaa:	1b09      	subs	r1, r1, r4
 8017eac:	428b      	cmp	r3, r1
 8017eae:	d906      	bls.n	8017ebe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8017eb0:	f025 fc86 	bl	803d7c0 <__errno>
 8017eb4:	230c      	movs	r3, #12
 8017eb6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8017eb8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8017ebc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8017ebe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8017ec0:	e7fc      	b.n	8017ebc <_sbrk+0x28>
 8017ec2:	bf00      	nop
 8017ec4:	20001d4c 	.word	0x20001d4c
 8017ec8:	2000bc70 	.word	0x2000bc70
 8017ecc:	200a0000 	.word	0x200a0000
 8017ed0:	00001000 	.word	0x00001000

08017ed4 <SystemInit>:

void SystemInit(void)
{
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8017ed4:	4b04      	ldr	r3, [pc, #16]	@ (8017ee8 <SystemInit+0x14>)
 8017ed6:	4a05      	ldr	r2, [pc, #20]	@ (8017eec <SystemInit+0x18>)
 8017ed8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8017eda:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8017ede:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8017ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif
}
 8017ee6:	4770      	bx	lr
 8017ee8:	e000ed00 	.word	0xe000ed00
 8017eec:	08015200 	.word	0x08015200

08017ef0 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 8017ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8017f28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8017ef4:	f7ff ffee 	bl	8017ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8017ef8:	480c      	ldr	r0, [pc, #48]	@ (8017f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8017efa:	490d      	ldr	r1, [pc, #52]	@ (8017f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8017efc:	4a0d      	ldr	r2, [pc, #52]	@ (8017f34 <LoopForever+0xe>)
  movs r3, #0
 8017efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8017f00:	e002      	b.n	8017f08 <LoopCopyDataInit>

08017f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8017f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017f06:	3304      	adds	r3, #4

08017f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017f0c:	d3f9      	bcc.n	8017f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8017f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8017f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8017f10:	4c0a      	ldr	r4, [pc, #40]	@ (8017f3c <LoopForever+0x16>)
  movs r3, #0
 8017f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017f14:	e001      	b.n	8017f1a <LoopFillZerobss>

08017f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017f18:	3204      	adds	r2, #4

08017f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017f1c:	d3fb      	bcc.n	8017f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8017f1e:	f025 fc55 	bl	803d7cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8017f22:	f7fe ff2f 	bl	8016d84 <main>

08017f26 <LoopForever>:

LoopForever:
    b LoopForever
 8017f26:	e7fe      	b.n	8017f26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8017f28:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8017f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017f30:	200009b4 	.word	0x200009b4
  ldr r2, =_sidata
 8017f34:	081b5d68 	.word	0x081b5d68
  ldr r2, =_sbss
 8017f38:	200009b4 	.word	0x200009b4
  ldr r4, =_ebss
 8017f3c:	2000bc6c 	.word	0x2000bc6c

08017f40 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8017f40:	e7fe      	b.n	8017f40 <CAN1_RX1_IRQHandler>

08017f42 <__cxa_guard_abort.part.0>:

/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
 8017f42:	b508      	push	{r3, lr}
 8017f44:	b672      	cpsid	i
{
	// UX:  fix from https://community.st.com/t5/stm32cubemx-mcus/cubemx-generated-threadsafe-stm32-lock-h-potential-bug/td-p/77220
	STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8017f46:	f7ff fb49 	bl	80175dc <Error_Handler>
 8017f4a:	e7fe      	b.n	8017f4a <__cxa_guard_abort.part.0+0x8>

08017f4c <stm32_lock_acquire>:
{
 8017f4c:	b508      	push	{r3, lr}
	STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8017f4e:	7a03      	ldrb	r3, [r0, #8]
 8017f50:	2b01      	cmp	r3, #1
 8017f52:	d903      	bls.n	8017f5c <stm32_lock_acquire+0x10>
 8017f54:	b672      	cpsid	i
 8017f56:	f7ff fb41 	bl	80175dc <Error_Handler>
 8017f5a:	e7fe      	b.n	8017f5a <stm32_lock_acquire+0xe>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017f5c:	f3ef 8211 	mrs	r2, BASEPRI
 8017f60:	f04f 0150 	mov.w	r1, #80	@ 0x50
 8017f64:	f381 8811 	msr	BASEPRI, r1
 8017f68:	f3bf 8f6f 	isb	sy
 8017f6c:	f3bf 8f4f 	dsb	sy
	lock->basepri[lock->nesting_level] = taskENTER_CRITICAL_FROM_ISR();
 8017f70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	lock->nesting_level++;
 8017f74:	7a03      	ldrb	r3, [r0, #8]
 8017f76:	3301      	adds	r3, #1
 8017f78:	7203      	strb	r3, [r0, #8]
}
 8017f7a:	bd08      	pop	{r3, pc}

08017f7c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8017f7c:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
  lock->nesting_level--;
 8017f7e:	7a03      	ldrb	r3, [r0, #8]
 8017f80:	3b01      	subs	r3, #1
 8017f82:	b2db      	uxtb	r3, r3
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8017f84:	2b01      	cmp	r3, #1
  lock->nesting_level--;
 8017f86:	7203      	strb	r3, [r0, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8017f88:	d903      	bls.n	8017f92 <stm32_lock_release+0x16>
 8017f8a:	b672      	cpsid	i
 8017f8c:	f7ff fb26 	bl	80175dc <Error_Handler>
 8017f90:	e7fe      	b.n	8017f90 <stm32_lock_release+0x14>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017f92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8017f96:	f383 8811 	msr	BASEPRI, r3
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
}
 8017f9a:	bd08      	pop	{r3, pc}

08017f9c <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8017f9c:	b510      	push	{r4, lr}
  if (lock == NULL)
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	b920      	cbnz	r0, 8017fac <__retarget_lock_init_recursive+0x10>
  {
    errno = EINVAL;
 8017fa2:	f025 fc0d 	bl	803d7c0 <__errno>
 8017fa6:	2316      	movs	r3, #22
 8017fa8:	6003      	str	r3, [r0, #0]
    return;
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
}
 8017faa:	bd10      	pop	{r4, pc}
  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8017fac:	200c      	movs	r0, #12
 8017fae:	f024 fae3 	bl	803c578 <malloc>
 8017fb2:	6020      	str	r0, [r4, #0]
  if (*lock != NULL)
 8017fb4:	b120      	cbz	r0, 8017fc0 <__retarget_lock_init_recursive+0x24>
    lock->basepri[i] = 0;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	e9c0 3300 	strd	r3, r3, [r0]
  lock->nesting_level = 0;
 8017fbc:	7203      	strb	r3, [r0, #8]
}
 8017fbe:	e7f4      	b.n	8017faa <__retarget_lock_init_recursive+0xe>
 8017fc0:	f7ff ffbf 	bl	8017f42 <__cxa_guard_abort.part.0>

08017fc4 <__retarget_lock_acquire>:
/**
  * @brief Acquire lock
  * @param lock The lock
  */
void __retarget_lock_acquire(_LOCK_T lock)
{
 8017fc4:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8017fc6:	b908      	cbnz	r0, 8017fcc <__retarget_lock_acquire+0x8>
 8017fc8:	f7ff ffbb 	bl	8017f42 <__cxa_guard_abort.part.0>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
}
 8017fcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8017fd0:	f7ff bfbc 	b.w	8017f4c <stm32_lock_acquire>

08017fd4 <__retarget_lock_acquire_recursive>:
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
 8017fd4:	f7ff bff6 	b.w	8017fc4 <__retarget_lock_acquire>

08017fd8 <__retarget_lock_release>:
/**
  * @brief Release lock
  * @param lock The lock
  */
void __retarget_lock_release(_LOCK_T lock)
{
 8017fd8:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8017fda:	b918      	cbnz	r0, 8017fe4 <__retarget_lock_release+0xc>
 8017fdc:	b672      	cpsid	i
 8017fde:	f7ff fafd 	bl	80175dc <Error_Handler>
 8017fe2:	e7fe      	b.n	8017fe2 <__retarget_lock_release+0xa>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
}
 8017fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8017fe8:	f7ff bfc8 	b.w	8017f7c <stm32_lock_release>

08017fec <__retarget_lock_release_recursive>:
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) \
  __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
 8017fec:	f7ff bff4 	b.w	8017fd8 <__retarget_lock_release>

08017ff0 <__cxa_guard_acquire>:
  * @brief Acquire __cxa_guard mutex
  * @param guard_object Guard object
  * @return 0 if object is initialized, else initialization of object required
  */
int __cxa_guard_acquire(CxaGuardObject_t *guard_object)
{
 8017ff0:	b510      	push	{r4, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8017ff2:	4604      	mov	r4, r0
 8017ff4:	b918      	cbnz	r0, 8017ffe <__cxa_guard_acquire+0xe>
 8017ff6:	b672      	cpsid	i
 8017ff8:	f7ff faf0 	bl	80175dc <Error_Handler>
 8017ffc:	e7fe      	b.n	8017ffc <__cxa_guard_acquire+0xc>

  if (atomic_load(&guard_object->initialized) == 0)
 8017ffe:	f3bf 8f5b 	dmb	ish
 8018002:	7803      	ldrb	r3, [r0, #0]
 8018004:	f3bf 8f5b 	dmb	ish
 8018008:	b10b      	cbz	r3, 801800e <__cxa_guard_acquire+0x1e>
      stm32_lock_release(&__cxa_guard_mutex);
    }
  }

  /* Object already initialized */
  return 0;
 801800a:	2000      	movs	r0, #0
}
 801800c:	bd10      	pop	{r4, pc}
    stm32_lock_acquire(&__cxa_guard_mutex);
 801800e:	480b      	ldr	r0, [pc, #44]	@ (801803c <__cxa_guard_acquire+0x4c>)
 8018010:	f7ff ff9c 	bl	8017f4c <stm32_lock_acquire>
    if (atomic_load(&guard_object->initialized) == 0)
 8018014:	f3bf 8f5b 	dmb	ish
 8018018:	7823      	ldrb	r3, [r4, #0]
 801801a:	f3bf 8f5b 	dmb	ish
 801801e:	b943      	cbnz	r3, 8018032 <__cxa_guard_acquire+0x42>
      if (guard_object->acquired)
 8018020:	7863      	ldrb	r3, [r4, #1]
 8018022:	b11b      	cbz	r3, 801802c <__cxa_guard_acquire+0x3c>
 8018024:	b672      	cpsid	i
        STM32_LOCK_BLOCK();
 8018026:	f7ff fad9 	bl	80175dc <Error_Handler>
 801802a:	e7fe      	b.n	801802a <__cxa_guard_acquire+0x3a>
      guard_object->acquired = 1;
 801802c:	2001      	movs	r0, #1
 801802e:	7060      	strb	r0, [r4, #1]
      return 1;
 8018030:	e7ec      	b.n	801800c <__cxa_guard_acquire+0x1c>
      stm32_lock_release(&__cxa_guard_mutex);
 8018032:	4802      	ldr	r0, [pc, #8]	@ (801803c <__cxa_guard_acquire+0x4c>)
 8018034:	f7ff ffa2 	bl	8017f7c <stm32_lock_release>
 8018038:	e7e7      	b.n	801800a <__cxa_guard_acquire+0x1a>
 801803a:	bf00      	nop
 801803c:	20001d50 	.word	0x20001d50

08018040 <__cxa_guard_abort>:
/**
  * @brief Abort __cxa_guard mutex
  * @param guard_object Guard object
  */
void __cxa_guard_abort(CxaGuardObject_t *guard_object)
{
 8018040:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 8018042:	b908      	cbnz	r0, 8018048 <__cxa_guard_abort+0x8>
 8018044:	f7ff ff7d 	bl	8017f42 <__cxa_guard_abort.part.0>

  if (guard_object->acquired)
 8018048:	7843      	ldrb	r3, [r0, #1]
 801804a:	b133      	cbz	r3, 801805a <__cxa_guard_abort+0x1a>
  {
    /* Release lock */
    guard_object->acquired = 0;
 801804c:	2300      	movs	r3, #0
 801804e:	7043      	strb	r3, [r0, #1]
  else
  {
    /* Trying to release non-acquired lock */
    STM32_LOCK_BLOCK();
  }
}
 8018050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    stm32_lock_release(&__cxa_guard_mutex);
 8018054:	4803      	ldr	r0, [pc, #12]	@ (8018064 <__cxa_guard_abort+0x24>)
 8018056:	f7ff bf91 	b.w	8017f7c <stm32_lock_release>
 801805a:	b672      	cpsid	i
    STM32_LOCK_BLOCK();
 801805c:	f7ff fabe 	bl	80175dc <Error_Handler>
 8018060:	e7fe      	b.n	8018060 <__cxa_guard_abort+0x20>
 8018062:	bf00      	nop
 8018064:	20001d50 	.word	0x20001d50

08018068 <__cxa_guard_release>:
/**
  * @brief Release __cxa_guard mutex
  * @param guard_object Guard object
  */
void __cxa_guard_release(CxaGuardObject_t *guard_object)
{
 8018068:	b508      	push	{r3, lr}
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(guard_object);
 801806a:	b918      	cbnz	r0, 8018074 <__cxa_guard_release+0xc>
 801806c:	b672      	cpsid	i
 801806e:	f7ff fab5 	bl	80175dc <Error_Handler>
 8018072:	e7fe      	b.n	8018072 <__cxa_guard_release+0xa>

  /* Object initialized */
  atomic_store(&guard_object->initialized, 1);
 8018074:	2201      	movs	r2, #1
 8018076:	f3bf 8f5b 	dmb	ish
 801807a:	7002      	strb	r2, [r0, #0]
 801807c:	f3bf 8f5b 	dmb	ish

  /* Release lock */
  __cxa_guard_abort(guard_object);
}
 8018080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  __cxa_guard_abort(guard_object);
 8018084:	f7ff bfdc 	b.w	8018040 <__cxa_guard_abort>

08018088 <FlashDrv_SendCommand>:
 * @brief FlashDrv_SendCommand maps a generic command to the spi commands of the platform
 * @param command definition
 * @return status of the operation
 **************************************************************************************************/
FlashDrv_Status FlashDrv_SendCommand(FlashDrv_CommandDef* command)
{
 8018088:	b510      	push	{r4, lr}
 801808a:	b09a      	sub	sp, #104	@ 0x68
    OSPI_RegularCmdTypeDef   cmd;
    OSPI_AutoPollingTypeDef  autopoll_config;

    assert_param(command);
    cmd.FlashId = HAL_OSPI_FLASH_ID_1;
 801808c:	2300      	movs	r3, #0
 801808e:	9307      	str	r3, [sp, #28]
    cmd.Address = command->address;
 8018090:	6803      	ldr	r3, [r0, #0]
 8018092:	930c      	str	r3, [sp, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8018094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018098:	930e      	str	r3, [sp, #56]	@ 0x38
    cmd.AddressDtrMode =
        ( command->useAddressDTR ) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 801809a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801809e:	02db      	lsls	r3, r3, #11
    cmd.AddressDtrMode =
 80180a0:	930f      	str	r3, [sp, #60]	@ 0x3c

    switch ( command->nrOfAddressLines )
 80180a2:	7e83      	ldrb	r3, [r0, #26]
 80180a4:	3b01      	subs	r3, #1
{
 80180a6:	4604      	mov	r4, r0
    switch ( command->nrOfAddressLines )
 80180a8:	2b07      	cmp	r3, #7
 80180aa:	d834      	bhi.n	8018116 <FlashDrv_SendCommand+0x8e>
 80180ac:	e8df f003 	tbb	[pc, r3]
 80180b0:	2d330435 	.word	0x2d330435
 80180b4:	30333333 	.word	0x30333333
 80180b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    {
        case 1:
            cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80180bc:	930d      	str	r3, [sp, #52]	@ 0x34
        default:
            cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
            break;
    }

    if ( command->useAlternateBytes )
 80180be:	f894 3020 	ldrb.w	r3, [r4, #32]
 80180c2:	b36b      	cbz	r3, 8018120 <FlashDrv_SendCommand+0x98>
    {
        cmd.AlternateBytes = command->alternateBytes;
 80180c4:	68e3      	ldr	r3, [r4, #12]
        cmd.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_ENABLE;
        cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
        cmd.AlternateBytesSize = 1;
 80180c6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80180ca:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80180ce:	2201      	movs	r2, #1
 80180d0:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
        cmd.AlternateBytes = command->alternateBytes;
 80180d4:	9310      	str	r3, [sp, #64]	@ 0x40
    }

    cmd.DataDtrMode =
        ( command->useDataDTR ) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
    cmd.DummyCycles = command->nrOfDummyCycles;
    cmd.NbData = command->nrOfDataBytes;
 80180d6:	6861      	ldr	r1, [r4, #4]
        ( command->useDataDTR ) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80180d8:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
        cmd.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_ENABLE;
 80180dc:	9013      	str	r0, [sp, #76]	@ 0x4c
        ( command->useDataDTR ) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80180de:	06db      	lsls	r3, r3, #27


    if ( cmd.NbData > 8 )
 80180e0:	2908      	cmp	r1, #8
    cmd.DataDtrMode =
 80180e2:	9316      	str	r3, [sp, #88]	@ 0x58
    cmd.NbData = command->nrOfDataBytes;
 80180e4:	9115      	str	r1, [sp, #84]	@ 0x54
    cmd.DummyCycles = command->nrOfDummyCycles;
 80180e6:	7f23      	ldrb	r3, [r4, #28]
    {
        HAL_OSPI_SetFifoThreshold(&hospi1, 8);
    }
    else
    {
        HAL_OSPI_SetFifoThreshold(&hospi1, cmd.NbData);
 80180e8:	4831      	ldr	r0, [pc, #196]	@ (80181b0 <FlashDrv_SendCommand+0x128>)
    cmd.DummyCycles = command->nrOfDummyCycles;
 80180ea:	9317      	str	r3, [sp, #92]	@ 0x5c
        HAL_OSPI_SetFifoThreshold(&hospi1, 8);
 80180ec:	bf88      	it	hi
 80180ee:	2108      	movhi	r1, #8
        HAL_OSPI_SetFifoThreshold(&hospi1, cmd.NbData);
 80180f0:	f002 ff58 	bl	801afa4 <HAL_OSPI_SetFifoThreshold>
    }

    switch ( command->nrOfDataLines )
 80180f4:	7ee3      	ldrb	r3, [r4, #27]
 80180f6:	3b01      	subs	r3, #1
 80180f8:	2200      	movs	r2, #0
 80180fa:	2b07      	cmp	r3, #7
 80180fc:	d851      	bhi.n	80181a2 <FlashDrv_SendCommand+0x11a>
 80180fe:	e8df f003 	tbb	[pc, r3]
 8018102:	1352      	.short	0x1352
 8018104:	50504a50 	.word	0x50504a50
 8018108:	4d50      	.short	0x4d50
            break;
 801810a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801810e:	e7d5      	b.n	80180bc <FlashDrv_SendCommand+0x34>
            break;
 8018110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018114:	e7d2      	b.n	80180bc <FlashDrv_SendCommand+0x34>
            break;
 8018116:	2300      	movs	r3, #0
 8018118:	e7d0      	b.n	80180bc <FlashDrv_SendCommand+0x34>
    switch ( command->nrOfAddressLines )
 801811a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801811e:	e7cd      	b.n	80180bc <FlashDrv_SendCommand+0x34>
 8018120:	4618      	mov	r0, r3
 8018122:	4619      	mov	r1, r3
 8018124:	461a      	mov	r2, r3
 8018126:	e7d3      	b.n	80180d0 <FlashDrv_SendCommand+0x48>
    switch ( command->nrOfDataLines )
 8018128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    {
        case 1:
            cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 801812c:	9314      	str	r3, [sp, #80]	@ 0x50
            break;
    }

    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
    cmd.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
    cmd.Instruction = command->instruction;
 801812e:	68a3      	ldr	r3, [r4, #8]
 8018130:	9308      	str	r3, [sp, #32]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8018132:	2301      	movs	r3, #1
 8018134:	9309      	str	r3, [sp, #36]	@ 0x24
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
    cmd.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;

    // config for memory mapped read/write
    switch ( command->memoryMapModeConfig )
 8018136:	7fa3      	ldrb	r3, [r4, #30]
 8018138:	2b01      	cmp	r3, #1
    cmd.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 801813a:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
    cmd.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 801813e:	e9cd 2218 	strd	r2, r2, [sp, #96]	@ 0x60
    switch ( command->memoryMapModeConfig )
 8018142:	d003      	beq.n	801814c <FlashDrv_SendCommand+0xc4>
 8018144:	1e99      	subs	r1, r3, #2
 8018146:	424b      	negs	r3, r1
 8018148:	414b      	adcs	r3, r1
 801814a:	005b      	lsls	r3, r3, #1
        default:
            cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
            break;
    }

    if ( HAL_OSPI_Command(&hospi1, &cmd, 500 /*HAL_OSPI_TIMEOUT_DEFAULT_VALUE*/) != HAL_OK )
 801814c:	4818      	ldr	r0, [pc, #96]	@ (80181b0 <FlashDrv_SendCommand+0x128>)
            cmd.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 801814e:	9306      	str	r3, [sp, #24]
    if ( HAL_OSPI_Command(&hospi1, &cmd, 500 /*HAL_OSPI_TIMEOUT_DEFAULT_VALUE*/) != HAL_OK )
 8018150:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8018154:	a906      	add	r1, sp, #24
 8018156:	f002 fdf3 	bl	801ad40 <HAL_OSPI_Command>
 801815a:	bb38      	cbnz	r0, 80181ac <FlashDrv_SendCommand+0x124>
    {
        return FLASHDRV_ERROR;
    }

    // configure auto polling
    if ( command->useAutoPoll )
 801815c:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8018160:	b1bb      	cbz	r3, 8018192 <FlashDrv_SendCommand+0x10a>
    {

        autopoll_config.Match = command->autopollMatch;
 8018162:	8a23      	ldrh	r3, [r4, #16]
 8018164:	9301      	str	r3, [sp, #4]
        autopoll_config.Mask = command->autopollMask;
 8018166:	8a63      	ldrh	r3, [r4, #18]
 8018168:	9302      	str	r3, [sp, #8]
        autopoll_config.Interval = command->autoPollIntervalCC;
 801816a:	8aa3      	ldrh	r3, [r4, #20]
 801816c:	9305      	str	r3, [sp, #20]
        autopoll_config.AutomaticStop = ( command->useAutoPollStop ) ?
                                        HAL_OSPI_AUTOMATIC_STOP_ENABLE:
 801816e:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
                                        HAL_OSPI_AUTOMATIC_STOP_DISABLE;
        autopoll_config.MatchMode = ( command->autoPollMatchMode == FLASHDRV_MATCH_MODE_OR )?
                                    HAL_OSPI_MATCH_MODE_OR:
                                    HAL_OSPI_MATCH_MODE_AND;

        if ( HAL_OSPI_AutoPolling(&hospi1, &autopoll_config, command->autoPollTimeoutCC) != HAL_OK )
 8018172:	480f      	ldr	r0, [pc, #60]	@ (80181b0 <FlashDrv_SendCommand+0x128>)
                                        HAL_OSPI_AUTOMATIC_STOP_ENABLE:
 8018174:	059b      	lsls	r3, r3, #22
        autopoll_config.AutomaticStop = ( command->useAutoPollStop ) ?
 8018176:	9304      	str	r3, [sp, #16]
                                    HAL_OSPI_MATCH_MODE_OR:
 8018178:	7f63      	ldrb	r3, [r4, #29]
 801817a:	1e5a      	subs	r2, r3, #1
 801817c:	4253      	negs	r3, r2
 801817e:	4153      	adcs	r3, r2
 8018180:	05db      	lsls	r3, r3, #23
        if ( HAL_OSPI_AutoPolling(&hospi1, &autopoll_config, command->autoPollTimeoutCC) != HAL_OK )
 8018182:	8ae2      	ldrh	r2, [r4, #22]
        autopoll_config.MatchMode = ( command->autoPollMatchMode == FLASHDRV_MATCH_MODE_OR )?
 8018184:	9303      	str	r3, [sp, #12]
        if ( HAL_OSPI_AutoPolling(&hospi1, &autopoll_config, command->autoPollTimeoutCC) != HAL_OK )
 8018186:	a901      	add	r1, sp, #4
 8018188:	f002 febc 	bl	801af04 <HAL_OSPI_AutoPolling>
 801818c:	3800      	subs	r0, #0
 801818e:	bf18      	it	ne
 8018190:	2001      	movne	r0, #1
            return FLASHDRV_ERROR;
        }
    }

    return FLASHDRV_OK;
}
 8018192:	b01a      	add	sp, #104	@ 0x68
 8018194:	bd10      	pop	{r4, pc}
            break;
 8018196:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 801819a:	e7c7      	b.n	801812c <FlashDrv_SendCommand+0xa4>
            break;
 801819c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80181a0:	e7c4      	b.n	801812c <FlashDrv_SendCommand+0xa4>
            break;
 80181a2:	2300      	movs	r3, #0
 80181a4:	e7c2      	b.n	801812c <FlashDrv_SendCommand+0xa4>
    switch ( command->nrOfDataLines )
 80181a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80181aa:	e7bf      	b.n	801812c <FlashDrv_SendCommand+0xa4>
        return FLASHDRV_ERROR;
 80181ac:	2001      	movs	r0, #1
 80181ae:	e7f0      	b.n	8018192 <FlashDrv_SendCommand+0x10a>
 80181b0:	20001a40 	.word	0x20001a40

080181b4 <FlashDrv_ReceiveData>:
 * @param buffer
 * @param timeout
 * @return status of the operation
 **************************************************************************************************/
FlashDrv_Status FlashDrv_ReceiveData(uint8_t* buffer, uint32_t timeout)
{
 80181b4:	460a      	mov	r2, r1
 80181b6:	b508      	push	{r3, lr}
    if ( HAL_OSPI_Receive(&hospi1, buffer, timeout) != HAL_OK )
 80181b8:	4601      	mov	r1, r0
 80181ba:	4803      	ldr	r0, [pc, #12]	@ (80181c8 <FlashDrv_ReceiveData+0x14>)
 80181bc:	f002 fe4c 	bl	801ae58 <HAL_OSPI_Receive>
    {
        return FLASHDRV_ERROR;
    }
    return FLASHDRV_OK;
}
 80181c0:	3800      	subs	r0, #0
 80181c2:	bf18      	it	ne
 80181c4:	2001      	movne	r0, #1
 80181c6:	bd08      	pop	{r3, pc}
 80181c8:	20001a40 	.word	0x20001a40

080181cc <FlashDrv_WriteData>:
 * @param buffer
 * @param timeout
 * @return status of the operation
 **************************************************************************************************/
FlashDrv_Status FlashDrv_WriteData(uint8_t* buffer, uint32_t timeout)
{
 80181cc:	460a      	mov	r2, r1
 80181ce:	b508      	push	{r3, lr}


    if ( HAL_OSPI_Transmit(&hospi1, buffer, timeout) != HAL_OK )
 80181d0:	4601      	mov	r1, r0
 80181d2:	4803      	ldr	r0, [pc, #12]	@ (80181e0 <FlashDrv_WriteData+0x14>)
 80181d4:	f002 fdfc 	bl	801add0 <HAL_OSPI_Transmit>
    {
        return FLASHDRV_ERROR;
    }

    return FLASHDRV_OK;
}
 80181d8:	3800      	subs	r0, #0
 80181da:	bf18      	it	ne
 80181dc:	2001      	movne	r0, #1
 80181de:	bd08      	pop	{r3, pc}
 80181e0:	20001a40 	.word	0x20001a40

080181e4 <_AutoPollMemReady>:
/*!*************************************************************************************************
 * @brief _AutoPollMemReady
 *
 **************************************************************************************************/
FlashDrv_Status _AutoPollMemReady()
{
 80181e4:	b500      	push	{lr}
 80181e6:	b08b      	sub	sp, #44	@ 0x2c
    // Polling requires reading the status register
    FlashDrv_CommandDef  command = {
 80181e8:	2228      	movs	r2, #40	@ 0x28
 80181ea:	2100      	movs	r1, #0
 80181ec:	4668      	mov	r0, sp
 80181ee:	f025 f959 	bl	803d4a4 <memset>
 80181f2:	2301      	movs	r3, #1
 80181f4:	2205      	movs	r2, #5
 80181f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80181fa:	4909      	ldr	r1, [pc, #36]	@ (8018220 <_AutoPollMemReady+0x3c>)
 80181fc:	4a09      	ldr	r2, [pc, #36]	@ (8018224 <_AutoPollMemReady+0x40>)
 80181fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018202:	f88d 301d 	strb.w	r3, [sp, #29]
        .useDataDTR = false,
        .useAutoPoll = true,
        .useAutoPollStop = true
    };

    return FlashDrv_SendCommand(&command);
 8018206:	4668      	mov	r0, sp
    FlashDrv_CommandDef  command = {
 8018208:	f240 1301 	movw	r3, #257	@ 0x101
 801820c:	e9cd 1205 	strd	r1, r2, [sp, #20]
 8018210:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    return FlashDrv_SendCommand(&command);
 8018214:	f7ff ff38 	bl	8018088 <FlashDrv_SendCommand>
}
 8018218:	b00b      	add	sp, #44	@ 0x2c
 801821a:	f85d fb04 	ldr.w	pc, [sp], #4
 801821e:	bf00      	nop
 8018220:	753001f4 	.word	0x753001f4
 8018224:	01000103 	.word	0x01000103

08018228 <_WriteEnable>:
{
 8018228:	b500      	push	{lr}
 801822a:	b08b      	sub	sp, #44	@ 0x2c
    FlashDrv_CommandDef  command = {
 801822c:	2228      	movs	r2, #40	@ 0x28
 801822e:	2100      	movs	r1, #0
 8018230:	4668      	mov	r0, sp
 8018232:	f025 f937 	bl	803d4a4 <memset>
 8018236:	2306      	movs	r3, #6
 8018238:	9302      	str	r3, [sp, #8]
    FlashDrv_SendCommand(&command);
 801823a:	4668      	mov	r0, sp
    FlashDrv_CommandDef  command = {
 801823c:	f240 1303 	movw	r3, #259	@ 0x103
 8018240:	f8ad 3018 	strh.w	r3, [sp, #24]
    FlashDrv_SendCommand(&command);
 8018244:	f7ff ff20 	bl	8018088 <FlashDrv_SendCommand>
}
 8018248:	b00b      	add	sp, #44	@ 0x2c
 801824a:	f85d fb04 	ldr.w	pc, [sp], #4

0801824e <_WriteDisable>:
{
 801824e:	b500      	push	{lr}
 8018250:	b08b      	sub	sp, #44	@ 0x2c
    FlashDrv_CommandDef  command = {
 8018252:	2228      	movs	r2, #40	@ 0x28
 8018254:	2100      	movs	r1, #0
 8018256:	4668      	mov	r0, sp
 8018258:	f025 f924 	bl	803d4a4 <memset>
 801825c:	2304      	movs	r3, #4
 801825e:	9302      	str	r3, [sp, #8]
    FlashDrv_SendCommand(&command);
 8018260:	4668      	mov	r0, sp
    FlashDrv_CommandDef  command = {
 8018262:	f240 1303 	movw	r3, #259	@ 0x103
 8018266:	f8ad 3018 	strh.w	r3, [sp, #24]
    FlashDrv_SendCommand(&command);
 801826a:	f7ff ff0d 	bl	8018088 <FlashDrv_SendCommand>
}
 801826e:	b00b      	add	sp, #44	@ 0x2c
 8018270:	f85d fb04 	ldr.w	pc, [sp], #4

08018274 <MX25L32_ReadStatusRegister>:
 * @brief MX25L32_ReadStatusRegister
 * @param statusRegister address to write the received status byte to
 * @return
 **************************************************************************************************/
FlashDrv_Status MX25L32_ReadStatusRegister(uint8_t* statusRegister)
{
 8018274:	b510      	push	{r4, lr}
 8018276:	b08a      	sub	sp, #40	@ 0x28
 8018278:	4604      	mov	r4, r0
    FlashDrv_CommandDef  command = {
 801827a:	2100      	movs	r1, #0
 801827c:	2228      	movs	r2, #40	@ 0x28
 801827e:	4668      	mov	r0, sp
 8018280:	f025 f910 	bl	803d4a4 <memset>
 8018284:	2201      	movs	r2, #1
 8018286:	2305      	movs	r3, #5
 8018288:	e9cd 2301 	strd	r2, r3, [sp, #4]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    FlashDrv_SendCommand(&command);
 801828c:	4668      	mov	r0, sp
    FlashDrv_CommandDef  command = {
 801828e:	4b05      	ldr	r3, [pc, #20]	@ (80182a4 <MX25L32_ReadStatusRegister+0x30>)
 8018290:	9306      	str	r3, [sp, #24]
    FlashDrv_SendCommand(&command);
 8018292:	f7ff fef9 	bl	8018088 <FlashDrv_SendCommand>
    return FlashDrv_ReceiveData(statusRegister,_DEFAULT_TIMEOUT_IN_MS);
 8018296:	2164      	movs	r1, #100	@ 0x64
 8018298:	4620      	mov	r0, r4
 801829a:	f7ff ff8b 	bl	80181b4 <FlashDrv_ReceiveData>
}
 801829e:	b00a      	add	sp, #40	@ 0x28
 80182a0:	bd10      	pop	{r4, pc}
 80182a2:	bf00      	nop
 80182a4:	01000103 	.word	0x01000103

080182a8 <MX25L32_ReadConfigRegister>:
 * @brief MX25L32_ReadConfigRegister
 * @param statusRegister address to write the received status byte to
 * @return
 **************************************************************************************************/
FlashDrv_Status MX25L32_ReadConfigRegister(uint8_t* configRegister)
{
 80182a8:	b510      	push	{r4, lr}
 80182aa:	b08a      	sub	sp, #40	@ 0x28
 80182ac:	4604      	mov	r4, r0
    FlashDrv_CommandDef  command = {
 80182ae:	2100      	movs	r1, #0
 80182b0:	2228      	movs	r2, #40	@ 0x28
 80182b2:	4668      	mov	r0, sp
 80182b4:	f025 f8f6 	bl	803d4a4 <memset>
 80182b8:	2201      	movs	r2, #1
 80182ba:	2315      	movs	r3, #21
 80182bc:	e9cd 2301 	strd	r2, r3, [sp, #4]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    FlashDrv_SendCommand(&command);
 80182c0:	4668      	mov	r0, sp
    FlashDrv_CommandDef  command = {
 80182c2:	4b05      	ldr	r3, [pc, #20]	@ (80182d8 <MX25L32_ReadConfigRegister+0x30>)
 80182c4:	9306      	str	r3, [sp, #24]
    FlashDrv_SendCommand(&command);
 80182c6:	f7ff fedf 	bl	8018088 <FlashDrv_SendCommand>
    return FlashDrv_ReceiveData(configRegister,_DEFAULT_TIMEOUT_IN_MS);
 80182ca:	2164      	movs	r1, #100	@ 0x64
 80182cc:	4620      	mov	r0, r4
 80182ce:	f7ff ff71 	bl	80181b4 <FlashDrv_ReceiveData>
}
 80182d2:	b00a      	add	sp, #40	@ 0x28
 80182d4:	bd10      	pop	{r4, pc}
 80182d6:	bf00      	nop
 80182d8:	01000103 	.word	0x01000103

080182dc <MX25L32_WriteStatusConfigRegister>:
 * @param statusRegister
 * @param configRegister
 * @return status of the operation
 **************************************************************************************************/
FlashDrv_Status MX25L32_WriteStatusConfigRegister(uint8_t statusRegister, uint8_t configRegister)
{
 80182dc:	b570      	push	{r4, r5, r6, lr}
 80182de:	b08c      	sub	sp, #48	@ 0x30

    FlashDrv_CommandDef  command = {
 80182e0:	2228      	movs	r2, #40	@ 0x28
{
 80182e2:	4606      	mov	r6, r0
 80182e4:	460d      	mov	r5, r1
    FlashDrv_CommandDef  command = {
 80182e6:	a802      	add	r0, sp, #8
 80182e8:	2100      	movs	r1, #0
 80182ea:	f025 f8db 	bl	803d4a4 <memset>
 80182ee:	2401      	movs	r4, #1
 80182f0:	2302      	movs	r3, #2
 80182f2:	e9cd 3403 	strd	r3, r4, [sp, #12]
 80182f6:	4b17      	ldr	r3, [pc, #92]	@ (8018354 <MX25L32_WriteStatusConfigRegister+0x78>)
 80182f8:	9308      	str	r3, [sp, #32]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    uint8_t              dataBuffer[2] = { statusRegister, configRegister };
 80182fa:	f88d 6004 	strb.w	r6, [sp, #4]
 80182fe:	f88d 5005 	strb.w	r5, [sp, #5]

    _WriteEnable();
 8018302:	f7ff ff91 	bl	8018228 <_WriteEnable>
    FlashDrv_SendCommand(&command);
 8018306:	a802      	add	r0, sp, #8
 8018308:	f7ff febe 	bl	8018088 <FlashDrv_SendCommand>
    FlashDrv_WriteData(dataBuffer, _DEFAULT_TIMEOUT_IN_MS);
 801830c:	2164      	movs	r1, #100	@ 0x64
 801830e:	a801      	add	r0, sp, #4
 8018310:	f7ff ff5c 	bl	80181cc <FlashDrv_WriteData>
    _WriteDisable();
 8018314:	f7ff ff9b 	bl	801824e <_WriteDisable>

    // check correct transmission
    uint8_t              statusRegSet = 0x0;
 8018318:	2300      	movs	r3, #0
 801831a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint8_t              configRegSet = 0x01;
 801831e:	f88d 4003 	strb.w	r4, [sp, #3]
    command.nrOfDataBytes = 1;
 8018322:	9403      	str	r4, [sp, #12]
    _AutoPollMemReady();
 8018324:	f7ff ff5e 	bl	80181e4 <_AutoPollMemReady>
    MX25L32_ReadConfigRegister(&configRegSet);
 8018328:	f10d 0003 	add.w	r0, sp, #3
 801832c:	f7ff ffbc 	bl	80182a8 <MX25L32_ReadConfigRegister>
    MX25L32_ReadStatusRegister(&statusRegSet);
 8018330:	f10d 0002 	add.w	r0, sp, #2
 8018334:	f7ff ff9e 	bl	8018274 <MX25L32_ReadStatusRegister>

    if ( ( statusRegSet == statusRegister ) && ( configRegSet == configRegister ))
 8018338:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801833c:	42b3      	cmp	r3, r6
 801833e:	d106      	bne.n	801834e <MX25L32_WriteStatusConfigRegister+0x72>
 8018340:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8018344:	1b40      	subs	r0, r0, r5
 8018346:	bf18      	it	ne
 8018348:	2001      	movne	r0, #1
    {
        return FLASHDRV_OK;
    }
    return FLASHDRV_ERROR;
}
 801834a:	b00c      	add	sp, #48	@ 0x30
 801834c:	bd70      	pop	{r4, r5, r6, pc}
    return FLASHDRV_ERROR;
 801834e:	4620      	mov	r0, r4
 8018350:	e7fb      	b.n	801834a <MX25L32_WriteStatusConfigRegister+0x6e>
 8018352:	bf00      	nop
 8018354:	01000103 	.word	0x01000103

08018358 <MX25L32_GetState>:
 * @brief MX25L32_GetState
 * @param state, variable the state is written to
 * @return status of the operation
 **************************************************************************************************/
FlashDrv_Status MX25L32_GetState(uint8_t* state)
{
 8018358:	b510      	push	{r4, lr}
 801835a:	4604      	mov	r4, r0
    if ( MX25L32_ReadStatusRegister(&control.statusRegister) != FLASHDRV_OK )
 801835c:	4810      	ldr	r0, [pc, #64]	@ (80183a0 <MX25L32_GetState+0x48>)
 801835e:	f7ff ff89 	bl	8018274 <MX25L32_ReadStatusRegister>
 8018362:	b9d0      	cbnz	r0, 801839a <MX25L32_GetState+0x42>
    {
        return FLASHDRV_ERROR;
    }

    if ( control.statusRegister & MX25L32_SR_WEL )
 8018364:	4a0f      	ldr	r2, [pc, #60]	@ (80183a4 <MX25L32_GetState+0x4c>)
 8018366:	7a93      	ldrb	r3, [r2, #10]
 8018368:	0799      	lsls	r1, r3, #30
 801836a:	d40e      	bmi.n	801838a <MX25L32_GetState+0x32>
    {
        *state = FLASHDRV_STATE_WRITE_READY;
    }
    else if ( control.statusRegister & MX25L32_SR_WIP )
 801836c:	07d9      	lsls	r1, r3, #31
 801836e:	d40e      	bmi.n	801838e <MX25L32_GetState+0x36>
    {
        *state = FLASHDRV_STATE_BUSY;
    }
    else if ( control.statusRegister & MX25L32_SR_BP_MASK )
 8018370:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 8018374:	d10d      	bne.n	8018392 <MX25L32_GetState+0x3a>
    {
        *state = FLASHDRV_STATE_LOCKED;
    }
    else if ( control.isPoweredDown )
 8018376:	7ad3      	ldrb	r3, [r2, #11]
 8018378:	b96b      	cbnz	r3, 8018396 <MX25L32_GetState+0x3e>
    {
        *state = FLASHDRV_STATE_SLEEP;
    }
    else if ( !control.isInitialized )
 801837a:	7b13      	ldrb	r3, [r2, #12]
 801837c:	2b00      	cmp	r3, #0
 801837e:	bf0c      	ite	eq
 8018380:	2307      	moveq	r3, #7
 8018382:	2301      	movne	r3, #1
        *state = FLASHDRV_STATE_WRITE_READY;
 8018384:	7023      	strb	r3, [r4, #0]
    else
    {
        *state = FLASHDRV_STATE_READY;
    }

    control.flashState = *state;
 8018386:	7253      	strb	r3, [r2, #9]

    return FLASHDRV_OK;
}
 8018388:	bd10      	pop	{r4, pc}
 801838a:	2302      	movs	r3, #2
 801838c:	e7fa      	b.n	8018384 <MX25L32_GetState+0x2c>
 801838e:	2304      	movs	r3, #4
 8018390:	e7f8      	b.n	8018384 <MX25L32_GetState+0x2c>
 8018392:	2303      	movs	r3, #3
 8018394:	e7f6      	b.n	8018384 <MX25L32_GetState+0x2c>
 8018396:	2306      	movs	r3, #6
 8018398:	e7f4      	b.n	8018384 <MX25L32_GetState+0x2c>
        return FLASHDRV_ERROR;
 801839a:	2001      	movs	r0, #1
 801839c:	e7f4      	b.n	8018388 <MX25L32_GetState+0x30>
 801839e:	bf00      	nop
 80183a0:	20001d8a 	.word	0x20001d8a
 80183a4:	20001d80 	.word	0x20001d80

080183a8 <MX25L32_ReadX>:
 * @param dataSize
 * @return status of the operation
 **************************************************************************************************/
FlashDrv_Status MX25L32_ReadX(uint32_t address, uint8_t* buffer,
                              uint32_t dataSize)
{
 80183a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183aa:	b08b      	sub	sp, #44	@ 0x2c
 80183ac:	4604      	mov	r4, r0
 80183ae:	4616      	mov	r6, r2
 80183b0:	460d      	mov	r5, r1
    // if dual-spi => read2
    FlashDrv_CommandDef  command = {
 80183b2:	221c      	movs	r2, #28
 80183b4:	2100      	movs	r1, #0
 80183b6:	a803      	add	r0, sp, #12
 80183b8:	f025 f874 	bl	803d4a4 <memset>
 80183bc:	23bb      	movs	r3, #187	@ 0xbb
        nrDummyCycles = ( control.config.maxSPIFrequencyInkHz >= 104000 ) ? 8 : 4;
 80183be:	4a1f      	ldr	r2, [pc, #124]	@ (801843c <MX25L32_ReadX+0x94>)
    FlashDrv_CommandDef  command = {
 80183c0:	9302      	str	r3, [sp, #8]
 80183c2:	2303      	movs	r3, #3
        nrDummyCycles = ( control.config.maxSPIFrequencyInkHz >= 104000 ) ? 8 : 4;
 80183c4:	491e      	ldr	r1, [pc, #120]	@ (8018440 <MX25L32_ReadX+0x98>)
    FlashDrv_CommandDef  command = {
 80183c6:	f88d 3018 	strb.w	r3, [sp, #24]
        nrDummyCycles = ( control.config.maxSPIFrequencyInkHz >= 104000 ) ? 8 : 4;
 80183ca:	6813      	ldr	r3, [r2, #0]
    FlashDrv_CommandDef  command = {
 80183cc:	2002      	movs	r0, #2
        nrDummyCycles = ( control.config.maxSPIFrequencyInkHz >= 104000 ) ? 8 : 4;
 80183ce:	428b      	cmp	r3, r1
 80183d0:	bf94      	ite	ls
 80183d2:	2704      	movls	r7, #4
 80183d4:	2708      	movhi	r7, #8
    FlashDrv_CommandDef  command = {
 80183d6:	e9cd 4600 	strd	r4, r6, [sp]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    if ( !_isValidAddress(address))
 80183da:	f5b4 0f80 	cmp.w	r4, #4194304	@ 0x400000
    FlashDrv_CommandDef  command = {
 80183de:	f04f 0601 	mov.w	r6, #1
 80183e2:	f88d 6019 	strb.w	r6, [sp, #25]
 80183e6:	f88d 001a 	strb.w	r0, [sp, #26]
 80183ea:	f88d 001b 	strb.w	r0, [sp, #27]
 80183ee:	f88d 701c 	strb.w	r7, [sp, #28]
 80183f2:	f88d 601f 	strb.w	r6, [sp, #31]
    if ( !_isValidAddress(address))
 80183f6:	d302      	bcc.n	80183fe <MX25L32_ReadX+0x56>
    {
        return FLASHDRV_ERROR;
 80183f8:	2001      	movs	r0, #1
    // send read command
    FlashDrv_SendCommand(&command);

    // call spi read
    return FlashDrv_ReceiveData(buffer, _MAX_DEFAULT_TIMEOUT_IN_MS);
}
 80183fa:	b00b      	add	sp, #44	@ 0x2c
 80183fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( control.config.nrIOLines == 4 )
 80183fe:	7912      	ldrb	r2, [r2, #4]
 8018400:	2a04      	cmp	r2, #4
 8018402:	d117      	bne.n	8018434 <MX25L32_ReadX+0x8c>
        command.instruction = MX25L32_4READ;
 8018404:	22eb      	movs	r2, #235	@ 0xeb
 8018406:	9202      	str	r2, [sp, #8]
        nrDummyCycles = ( control.config.maxSPIFrequencyInkHz >= 104000 ) ? 10 : 6;
 8018408:	428b      	cmp	r3, r1
 801840a:	bf94      	ite	ls
 801840c:	2306      	movls	r3, #6
 801840e:	230a      	movhi	r3, #10
        command.nrOfAddressLines = 4;
 8018410:	f240 4204 	movw	r2, #1028	@ 0x404
 8018414:	f8ad 201a 	strh.w	r2, [sp, #26]
        command.nrOfDummyCycles = _GetnrOfDummyCycles(4);
 8018418:	f88d 301c 	strb.w	r3, [sp, #28]
    if ( _AutoPollMemReady() != FLASHDRV_OK )
 801841c:	f7ff fee2 	bl	80181e4 <_AutoPollMemReady>
 8018420:	2800      	cmp	r0, #0
 8018422:	d1e9      	bne.n	80183f8 <MX25L32_ReadX+0x50>
    FlashDrv_SendCommand(&command);
 8018424:	4668      	mov	r0, sp
 8018426:	f7ff fe2f 	bl	8018088 <FlashDrv_SendCommand>
    return FlashDrv_ReceiveData(buffer, _MAX_DEFAULT_TIMEOUT_IN_MS);
 801842a:	21c8      	movs	r1, #200	@ 0xc8
 801842c:	4628      	mov	r0, r5
 801842e:	f7ff fec1 	bl	80181b4 <FlashDrv_ReceiveData>
 8018432:	e7e2      	b.n	80183fa <MX25L32_ReadX+0x52>
    else if ( control.config.nrIOLines != 2 )
 8018434:	2a02      	cmp	r2, #2
 8018436:	d0f1      	beq.n	801841c <MX25L32_ReadX+0x74>
 8018438:	e7df      	b.n	80183fa <MX25L32_ReadX+0x52>
 801843a:	bf00      	nop
 801843c:	20001d80 	.word	0x20001d80
 8018440:	0001963f 	.word	0x0001963f

08018444 <MX25L32_PageProgramX>:
 * @param buffer
 * @param dataSize
 * @return
 **************************************************************************************************/
FlashDrv_Status MX25L32_PageProgramX(uint32_t address, uint8_t* buffer, uint32_t dataSize)
{
 8018444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018448:	b08a      	sub	sp, #40	@ 0x28
 801844a:	4605      	mov	r5, r0
 801844c:	4688      	mov	r8, r1
 801844e:	4614      	mov	r4, r2
    FlashDrv_CommandDef  command = {
 8018450:	2100      	movs	r1, #0
 8018452:	2224      	movs	r2, #36	@ 0x24
 8018454:	a801      	add	r0, sp, #4
 8018456:	f025 f825 	bl	803d4a4 <memset>
 801845a:	2338      	movs	r3, #56	@ 0x38
 801845c:	9302      	str	r3, [sp, #8]
 801845e:	4b21      	ldr	r3, [pc, #132]	@ (80184e4 <MX25L32_PageProgramX+0xa0>)
 8018460:	9306      	str	r3, [sp, #24]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    if ( !_isValidAddress(address))
 8018462:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    FlashDrv_CommandDef  command = {
 8018466:	f04f 0301 	mov.w	r3, #1
 801846a:	f88d 301f 	strb.w	r3, [sp, #31]
    if ( !_isValidAddress(address))
 801846e:	d304      	bcc.n	801847a <MX25L32_PageProgramX+0x36>
    {
        return FLASHDRV_ERROR;
 8018470:	2701      	movs	r7, #1
    {
        return FLASHDRV_ERROR;
    }
    _WriteDisable();
    return status;
}
 8018472:	4638      	mov	r0, r7
 8018474:	b00a      	add	sp, #40	@ 0x28
 8018476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( dataSize == 0 )
 801847a:	2c00      	cmp	r4, #0
 801847c:	d0f8      	beq.n	8018470 <MX25L32_PageProgramX+0x2c>
    if ( control.config.nrIOLines != 4 )
 801847e:	4b1a      	ldr	r3, [pc, #104]	@ (80184e8 <MX25L32_PageProgramX+0xa4>)
 8018480:	791b      	ldrb	r3, [r3, #4]
 8018482:	2b04      	cmp	r3, #4
 8018484:	d12c      	bne.n	80184e0 <MX25L32_PageProgramX+0x9c>
    uint32_t             nrBytesToPageEnd = ( 0xFF - ( address & 0xFF )) + 1;
 8018486:	43ee      	mvns	r6, r5
 8018488:	b2f6      	uxtb	r6, r6
 801848a:	3601      	adds	r6, #1
        if ( dataSize > nrBytesToPageEnd ) // we need to wrap around
 801848c:	42b4      	cmp	r4, r6
 801848e:	d922      	bls.n	80184d6 <MX25L32_PageProgramX+0x92>
            if ( nrBytesToPageEnd < MX25L32_PAGE_SIZE )
 8018490:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
            command.nrOfDataBytes = nrBytesToPageEnd;
 8018494:	e9cd 5600 	strd	r5, r6, [sp]
            if ( nrBytesToPageEnd < MX25L32_PAGE_SIZE )
 8018498:	bf38      	it	cc
 801849a:	f44f 7680 	movcc.w	r6, #256	@ 0x100
        if ( _AutoPollMemReady() != FLASHDRV_OK )
 801849e:	f7ff fea1 	bl	80181e4 <_AutoPollMemReady>
 80184a2:	2800      	cmp	r0, #0
 80184a4:	d1e4      	bne.n	8018470 <MX25L32_PageProgramX+0x2c>
        _WriteEnable();
 80184a6:	f7ff febf 	bl	8018228 <_WriteEnable>
        if ( FlashDrv_SendCommand(&command) != FLASHDRV_OK )
 80184aa:	4668      	mov	r0, sp
 80184ac:	f7ff fdec 	bl	8018088 <FlashDrv_SendCommand>
 80184b0:	b9a0      	cbnz	r0, 80184dc <MX25L32_PageProgramX+0x98>
        if ( FlashDrv_WriteData(buffer, _DEFAULT_TIMEOUT_IN_MS) != FLASHDRV_OK )
 80184b2:	2164      	movs	r1, #100	@ 0x64
 80184b4:	4640      	mov	r0, r8
 80184b6:	f7ff fe89 	bl	80181cc <FlashDrv_WriteData>
 80184ba:	4607      	mov	r7, r0
 80184bc:	b970      	cbnz	r0, 80184dc <MX25L32_PageProgramX+0x98>
        dataSize -= command.nrOfDataBytes;
 80184be:	9b01      	ldr	r3, [sp, #4]
    while ( dataSize != 0 );
 80184c0:	1ae4      	subs	r4, r4, r3
        buffer += command.nrOfDataBytes;
 80184c2:	4498      	add	r8, r3
        currentAddress += command.nrOfDataBytes;
 80184c4:	441d      	add	r5, r3
    while ( dataSize != 0 );
 80184c6:	d1e1      	bne.n	801848c <MX25L32_PageProgramX+0x48>
    if ( _AutoPollMemReady() != FLASHDRV_OK )
 80184c8:	f7ff fe8c 	bl	80181e4 <_AutoPollMemReady>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	d1cf      	bne.n	8018470 <MX25L32_PageProgramX+0x2c>
    _WriteDisable();
 80184d0:	f7ff febd 	bl	801824e <_WriteDisable>
    return status;
 80184d4:	e7cd      	b.n	8018472 <MX25L32_PageProgramX+0x2e>
            command.address = currentAddress;
 80184d6:	e9cd 5400 	strd	r5, r4, [sp]
 80184da:	e7e0      	b.n	801849e <MX25L32_PageProgramX+0x5a>
            status = FLASHDRV_ERROR;
 80184dc:	2701      	movs	r7, #1
 80184de:	e7f3      	b.n	80184c8 <MX25L32_PageProgramX+0x84>
        return FLASHDRV_NOT_SUPPORTED;
 80184e0:	2702      	movs	r7, #2
 80184e2:	e7c6      	b.n	8018472 <MX25L32_PageProgramX+0x2e>
 80184e4:	04040103 	.word	0x04040103
 80184e8:	20001d80 	.word	0x20001d80

080184ec <MX25L32_EraseSector>:
 * @brief MX25L32_EraseSector
 * @param address
 * @return
 **************************************************************************************************/
FlashDrv_Status MX25L32_EraseSector(uint32_t address)
{
 80184ec:	b510      	push	{r4, lr}
 80184ee:	b08a      	sub	sp, #40	@ 0x28
 80184f0:	4604      	mov	r4, r0
    FlashDrv_CommandDef  command = {
 80184f2:	9000      	str	r0, [sp, #0]
 80184f4:	2224      	movs	r2, #36	@ 0x24
 80184f6:	2100      	movs	r1, #0
 80184f8:	a801      	add	r0, sp, #4
 80184fa:	f024 ffd3 	bl	803d4a4 <memset>
 80184fe:	2320      	movs	r3, #32
 8018500:	9302      	str	r3, [sp, #8]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    if ( !_isValidAddress(address))
 8018502:	f5b4 0f80 	cmp.w	r4, #4194304	@ 0x400000
    FlashDrv_CommandDef  command = {
 8018506:	4b0b      	ldr	r3, [pc, #44]	@ (8018534 <MX25L32_EraseSector+0x48>)
 8018508:	9306      	str	r3, [sp, #24]
    if ( !_isValidAddress(address))
 801850a:	d303      	bcc.n	8018514 <MX25L32_EraseSector+0x28>
    {
        return FLASHDRV_ERROR;
 801850c:	2401      	movs	r4, #1
    {
        return FLASHDRV_ERROR;
    }

    return status;
}
 801850e:	4620      	mov	r0, r4
 8018510:	b00a      	add	sp, #40	@ 0x28
 8018512:	bd10      	pop	{r4, pc}
    if ( _AutoPollMemReady() != FLASHDRV_OK )
 8018514:	f7ff fe66 	bl	80181e4 <_AutoPollMemReady>
 8018518:	2800      	cmp	r0, #0
 801851a:	d1f7      	bne.n	801850c <MX25L32_EraseSector+0x20>
    _WriteEnable();
 801851c:	f7ff fe84 	bl	8018228 <_WriteEnable>
    FlashDrv_Status      status = FlashDrv_SendCommand(&command);
 8018520:	4668      	mov	r0, sp
 8018522:	f7ff fdb1 	bl	8018088 <FlashDrv_SendCommand>
 8018526:	4604      	mov	r4, r0
    if ( _AutoPollMemReady() != FLASHDRV_OK )
 8018528:	f7ff fe5c 	bl	80181e4 <_AutoPollMemReady>
 801852c:	2800      	cmp	r0, #0
 801852e:	d0ee      	beq.n	801850e <MX25L32_EraseSector+0x22>
 8018530:	e7ec      	b.n	801850c <MX25L32_EraseSector+0x20>
 8018532:	bf00      	nop
 8018534:	00010103 	.word	0x00010103

08018538 <MX25L32_EraseBlock64kb>:
 * @brief MX25L32_EraseBlock64kb
 * @param address
 * @return
 **************************************************************************************************/
FlashDrv_Status MX25L32_EraseBlock64kb(uint32_t address)
{
 8018538:	b510      	push	{r4, lr}
 801853a:	b08a      	sub	sp, #40	@ 0x28
 801853c:	4604      	mov	r4, r0
    FlashDrv_CommandDef  command = {
 801853e:	9000      	str	r0, [sp, #0]
 8018540:	2224      	movs	r2, #36	@ 0x24
 8018542:	2100      	movs	r1, #0
 8018544:	a801      	add	r0, sp, #4
 8018546:	f024 ffad 	bl	803d4a4 <memset>
 801854a:	23d8      	movs	r3, #216	@ 0xd8
 801854c:	9302      	str	r3, [sp, #8]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    if ( !_isValidAddress(address))
 801854e:	f5b4 0f80 	cmp.w	r4, #4194304	@ 0x400000
    FlashDrv_CommandDef  command = {
 8018552:	4b0b      	ldr	r3, [pc, #44]	@ (8018580 <MX25L32_EraseBlock64kb+0x48>)
 8018554:	9306      	str	r3, [sp, #24]
    if ( !_isValidAddress(address))
 8018556:	d303      	bcc.n	8018560 <MX25L32_EraseBlock64kb+0x28>
    {
        return FLASHDRV_ERROR;
 8018558:	2401      	movs	r4, #1
    {
        return FLASHDRV_ERROR;
    }

    return status;
}
 801855a:	4620      	mov	r0, r4
 801855c:	b00a      	add	sp, #40	@ 0x28
 801855e:	bd10      	pop	{r4, pc}
    if ( _AutoPollMemReady() != FLASHDRV_OK )
 8018560:	f7ff fe40 	bl	80181e4 <_AutoPollMemReady>
 8018564:	2800      	cmp	r0, #0
 8018566:	d1f7      	bne.n	8018558 <MX25L32_EraseBlock64kb+0x20>
    _WriteEnable();
 8018568:	f7ff fe5e 	bl	8018228 <_WriteEnable>
    FlashDrv_Status      status = FlashDrv_SendCommand(&command);
 801856c:	4668      	mov	r0, sp
 801856e:	f7ff fd8b 	bl	8018088 <FlashDrv_SendCommand>
 8018572:	4604      	mov	r4, r0
    if ( _AutoPollMemReady() != FLASHDRV_OK )
 8018574:	f7ff fe36 	bl	80181e4 <_AutoPollMemReady>
 8018578:	2800      	cmp	r0, #0
 801857a:	d0ee      	beq.n	801855a <MX25L32_EraseBlock64kb+0x22>
 801857c:	e7ec      	b.n	8018558 <MX25L32_EraseBlock64kb+0x20>
 801857e:	bf00      	nop
 8018580:	00010103 	.word	0x00010103

08018584 <MX25L32_Reset>:
/*!*************************************************************************************************
 * @brief MX25L32_Reset
 * @return
 **************************************************************************************************/
FlashDrv_Status MX25L32_Reset(void)
{
 8018584:	b500      	push	{lr}
 8018586:	b08b      	sub	sp, #44	@ 0x2c
    FlashDrv_CommandDef  command = {
 8018588:	2228      	movs	r2, #40	@ 0x28
 801858a:	2100      	movs	r1, #0
 801858c:	4668      	mov	r0, sp
 801858e:	f024 ff89 	bl	803d4a4 <memset>
 8018592:	2366      	movs	r3, #102	@ 0x66
 8018594:	9302      	str	r3, [sp, #8]
 8018596:	f240 1303 	movw	r3, #259	@ 0x103
 801859a:	f8ad 3018 	strh.w	r3, [sp, #24]
        .useDataDTR = false,
        .useAutoPoll = false,
        .useAutoPollStop = false
    };

    if ( control.isInitialized )
 801859e:	4b0a      	ldr	r3, [pc, #40]	@ (80185c8 <MX25L32_Reset+0x44>)
 80185a0:	7b1b      	ldrb	r3, [r3, #12]
 80185a2:	b953      	cbnz	r3, 80185ba <MX25L32_Reset+0x36>
        {
            return FLASHDRV_ERROR;
        }
    }

    FlashDrv_SendCommand(&command);
 80185a4:	4668      	mov	r0, sp
 80185a6:	f7ff fd6f 	bl	8018088 <FlashDrv_SendCommand>
    command.instruction = MX25L32_RST;
 80185aa:	2399      	movs	r3, #153	@ 0x99
    // device config will now be blank, back to power-up state -> run init again
    return FlashDrv_SendCommand(&command);
 80185ac:	4668      	mov	r0, sp
    command.instruction = MX25L32_RST;
 80185ae:	9302      	str	r3, [sp, #8]
    return FlashDrv_SendCommand(&command);
 80185b0:	f7ff fd6a 	bl	8018088 <FlashDrv_SendCommand>
}
 80185b4:	b00b      	add	sp, #44	@ 0x2c
 80185b6:	f85d fb04 	ldr.w	pc, [sp], #4
        if ( _AutoPollMemReady() != FLASHDRV_OK )
 80185ba:	f7ff fe13 	bl	80181e4 <_AutoPollMemReady>
 80185be:	2800      	cmp	r0, #0
 80185c0:	d0f0      	beq.n	80185a4 <MX25L32_Reset+0x20>
            return FLASHDRV_ERROR;
 80185c2:	2001      	movs	r0, #1
 80185c4:	e7f6      	b.n	80185b4 <MX25L32_Reset+0x30>
 80185c6:	bf00      	nop
 80185c8:	20001d80 	.word	0x20001d80

080185cc <MX25L32_Init>:
{
 80185cc:	b530      	push	{r4, r5, lr}
 80185ce:	b085      	sub	sp, #20
 80185d0:	466b      	mov	r3, sp
 80185d2:	e883 0003 	stmia.w	r3, {r0, r1}
    control.config = config;
 80185d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80185da:	4d1d      	ldr	r5, [pc, #116]	@ (8018650 <MX25L32_Init+0x84>)
    control.dummyCycles = 0;
 80185dc:	2300      	movs	r3, #0
    control.config = config;
 80185de:	e885 0003 	stmia.w	r5, {r0, r1}
    control.dummyCycles = 0;
 80185e2:	60ab      	str	r3, [r5, #8]
    control.isInitialized = false;
 80185e4:	732b      	strb	r3, [r5, #12]
    FlashDrv_FlashState  state = 0x0;
 80185e6:	f88d 300f 	strb.w	r3, [sp, #15]
    FlashDrv_Status      status = MX25L32_Reset();
 80185ea:	f7ff ffcb 	bl	8018584 <MX25L32_Reset>
    if ( status != FLASHDRV_OK )
 80185ee:	4604      	mov	r4, r0
 80185f0:	b9f0      	cbnz	r0, 8018630 <MX25L32_Init+0x64>
    MX25L32_GetState(&state);
 80185f2:	f10d 000f 	add.w	r0, sp, #15
 80185f6:	f7ff feaf 	bl	8018358 <MX25L32_GetState>
    if ( state == FLASHDRV_STATE_BUSY )
 80185fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80185fe:	2b04      	cmp	r3, #4
 8018600:	d019      	beq.n	8018636 <MX25L32_Init+0x6a>
    if ( control.config.maxSPIFrequencyInkHz >= 104000 )
 8018602:	6829      	ldr	r1, [r5, #0]
 8018604:	4b13      	ldr	r3, [pc, #76]	@ (8018654 <MX25L32_Init+0x88>)
 8018606:	4299      	cmp	r1, r3
    if ( ( control.config.nrIOLines == 2 ))
 8018608:	792b      	ldrb	r3, [r5, #4]
    if ( control.config.maxSPIFrequencyInkHz >= 104000 )
 801860a:	bf94      	ite	ls
 801860c:	2100      	movls	r1, #0
 801860e:	2101      	movhi	r1, #1
    if ( ( control.config.nrIOLines == 2 ))
 8018610:	2b02      	cmp	r3, #2
    if ( control.config.maxSPIFrequencyInkHz >= 104000 )
 8018612:	ea4f 1181 	mov.w	r1, r1, lsl #6
    if ( ( control.config.nrIOLines == 2 ))
 8018616:	d114      	bne.n	8018642 <MX25L32_Init+0x76>
        status = MX25L32_WriteStatusConfigRegister(control.statusRegister, configRegister);
 8018618:	7aa8      	ldrb	r0, [r5, #10]
        status = MX25L32_WriteStatusConfigRegister(statusReg, configRegister);
 801861a:	f7ff fe5f 	bl	80182dc <MX25L32_WriteStatusConfigRegister>
 801861e:	4604      	mov	r4, r0
                           FLASHDRV_OK ) ? FLASHDRV_STATE_READY : FLASHDRV_STATE_ERROR;
 8018620:	2c00      	cmp	r4, #0
 8018622:	bf0c      	ite	eq
 8018624:	2301      	moveq	r3, #1
 8018626:	2300      	movne	r3, #0
 8018628:	726b      	strb	r3, [r5, #9]
    if ( control.flashState == FLASHDRV_STATE_READY )
 801862a:	d101      	bne.n	8018630 <MX25L32_Init+0x64>
        control.isInitialized = true;
 801862c:	2301      	movs	r3, #1
 801862e:	732b      	strb	r3, [r5, #12]
}
 8018630:	4620      	mov	r0, r4
 8018632:	b005      	add	sp, #20
 8018634:	bd30      	pop	{r4, r5, pc}
        if ( _AutoPollMemReady() != FLASHDRV_OK )
 8018636:	f7ff fdd5 	bl	80181e4 <_AutoPollMemReady>
 801863a:	2800      	cmp	r0, #0
 801863c:	d0e1      	beq.n	8018602 <MX25L32_Init+0x36>
            return FLASHDRV_ERROR;
 801863e:	2401      	movs	r4, #1
 8018640:	e7f6      	b.n	8018630 <MX25L32_Init+0x64>
    else if ( control.config.nrIOLines == 4 )
 8018642:	2b04      	cmp	r3, #4
 8018644:	d1ec      	bne.n	8018620 <MX25L32_Init+0x54>
        uint8_t  statusReg = control.statusRegister | MX25L32_SR_QE;
 8018646:	7aa8      	ldrb	r0, [r5, #10]
        status = MX25L32_WriteStatusConfigRegister(statusReg, configRegister);
 8018648:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 801864c:	e7e5      	b.n	801861a <MX25L32_Init+0x4e>
 801864e:	bf00      	nop
 8018650:	20001d80 	.word	0x20001d80
 8018654:	0001963f 	.word	0x0001963f

08018658 <_bcd2Bin>:
 * @param bcd bcd nimble
 * @return binary value
 **************************************************************************************************/
uint8_t _bcd2Bin(uint8_t bcd)
{
    return (( bcd >> 4 ) * 10 ) + ( bcd & 0x0F );
 8018658:	0903      	lsrs	r3, r0, #4
 801865a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801865e:	f000 000f 	and.w	r0, r0, #15
 8018662:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8018666:	b2c0      	uxtb	r0, r0
 8018668:	4770      	bx	lr
	...

0801866c <RX8900SA_ReadTimeDate>:
/*!*************************************************************************************************
 * @brief RX8900SA_readTimeDate
 * @param dateTime
 **************************************************************************************************/
void RX8900SA_ReadTimeDate(RX8900SA_DateTime *dateTime)
{
 801866c:	b510      	push	{r4, lr}
    uint8_t  rx_data[7];

    if ( dateTime == NULL )
 801866e:	4604      	mov	r4, r0
{
 8018670:	b086      	sub	sp, #24
    if ( dateTime == NULL )
 8018672:	b3c0      	cbz	r0, 80186e6 <RX8900SA_ReadTimeDate+0x7a>
    {
        return;
    }

    HAL_I2C_Mem_Read(i2cHandle, RX_I2C_ADDRESS, 0, 1, rx_data, 7, 1000);
 8018674:	2307      	movs	r3, #7
 8018676:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801867a:	e9cd 3001 	strd	r3, r0, [sp, #4]
 801867e:	ab04      	add	r3, sp, #16
 8018680:	481b      	ldr	r0, [pc, #108]	@ (80186f0 <RX8900SA_ReadTimeDate+0x84>)
 8018682:	9300      	str	r3, [sp, #0]
 8018684:	2200      	movs	r2, #0
 8018686:	2301      	movs	r3, #1
 8018688:	6800      	ldr	r0, [r0, #0]
 801868a:	2164      	movs	r1, #100	@ 0x64
 801868c:	f001 ff4e 	bl	801a52c <HAL_I2C_Mem_Read>

    dateTime->second = _bcd2Bin(rx_data[0]);
 8018690:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8018694:	f7ff ffe0 	bl	8018658 <_bcd2Bin>
 8018698:	7020      	strb	r0, [r4, #0]
    dateTime->minute = _bcd2Bin(rx_data[1]);
 801869a:	f89d 0011 	ldrb.w	r0, [sp, #17]
 801869e:	f7ff ffdb 	bl	8018658 <_bcd2Bin>
 80186a2:	7060      	strb	r0, [r4, #1]
    dateTime->hour = _bcd2Bin(rx_data[2]);
 80186a4:	f89d 0012 	ldrb.w	r0, [sp, #18]
 80186a8:	f7ff ffd6 	bl	8018658 <_bcd2Bin>

    for ( int i = 0; i < 7; i++ )
    {
        if ( rx_data[3] & ( 0x01 << i ))
 80186ac:	f89d 2013 	ldrb.w	r2, [sp, #19]
    dateTime->hour = _bcd2Bin(rx_data[2]);
 80186b0:	70a0      	strb	r0, [r4, #2]
        if ( rx_data[3] & ( 0x01 << i ))
 80186b2:	f012 0301 	ands.w	r3, r2, #1
 80186b6:	d118      	bne.n	80186ea <RX8900SA_ReadTimeDate+0x7e>
    for ( int i = 0; i < 7; i++ )
 80186b8:	3301      	adds	r3, #1
 80186ba:	2b07      	cmp	r3, #7
 80186bc:	d004      	beq.n	80186c8 <RX8900SA_ReadTimeDate+0x5c>
        if ( rx_data[3] & ( 0x01 << i ))
 80186be:	fa42 f103 	asr.w	r1, r2, r3
 80186c2:	07c9      	lsls	r1, r1, #31
 80186c4:	d5f8      	bpl.n	80186b8 <RX8900SA_ReadTimeDate+0x4c>
        {
            dateTime->weekday = i;
 80186c6:	70e3      	strb	r3, [r4, #3]
            break;
        }
    }

    dateTime->day = _bcd2Bin(rx_data[4]);
 80186c8:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80186cc:	f7ff ffc4 	bl	8018658 <_bcd2Bin>
 80186d0:	7120      	strb	r0, [r4, #4]
    dateTime->month = _bcd2Bin(rx_data[5]);
 80186d2:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80186d6:	f7ff ffbf 	bl	8018658 <_bcd2Bin>
 80186da:	7160      	strb	r0, [r4, #5]
    dateTime->year = _bcd2Bin(rx_data[6]);
 80186dc:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80186e0:	f7ff ffba 	bl	8018658 <_bcd2Bin>
 80186e4:	71a0      	strb	r0, [r4, #6]
}
 80186e6:	b006      	add	sp, #24
 80186e8:	bd10      	pop	{r4, pc}
    for ( int i = 0; i < 7; i++ )
 80186ea:	2300      	movs	r3, #0
 80186ec:	e7eb      	b.n	80186c6 <RX8900SA_ReadTimeDate+0x5a>
 80186ee:	bf00      	nop
 80186f0:	20001d90 	.word	0x20001d90

080186f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80186f4:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80186f6:	2003      	movs	r0, #3
 80186f8:	f001 f860 	bl	80197bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80186fc:	2005      	movs	r0, #5
 80186fe:	f7ff fae9 	bl	8017cd4 <HAL_InitTick>
 8018702:	4604      	mov	r4, r0
 8018704:	b918      	cbnz	r0, 801870e <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018706:	f7fe ff6b 	bl	80175e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 801870a:	4620      	mov	r0, r4
 801870c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 801870e:	2401      	movs	r4, #1
 8018710:	e7fb      	b.n	801870a <HAL_Init+0x16>
	...

08018714 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8018714:	4a03      	ldr	r2, [pc, #12]	@ (8018724 <HAL_IncTick+0x10>)
 8018716:	4b04      	ldr	r3, [pc, #16]	@ (8018728 <HAL_IncTick+0x14>)
 8018718:	6811      	ldr	r1, [r2, #0]
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	440b      	add	r3, r1
 801871e:	6013      	str	r3, [r2, #0]
}
 8018720:	4770      	bx	lr
 8018722:	bf00      	nop
 8018724:	20001d94 	.word	0x20001d94
 8018728:	20000428 	.word	0x20000428

0801872c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801872c:	4b01      	ldr	r3, [pc, #4]	@ (8018734 <HAL_GetTick+0x8>)
 801872e:	6818      	ldr	r0, [r3, #0]
}
 8018730:	4770      	bx	lr
 8018732:	bf00      	nop
 8018734:	20001d94 	.word	0x20001d94

08018738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018738:	b538      	push	{r3, r4, r5, lr}
 801873a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801873c:	f7ff fff6 	bl	801872c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018740:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8018742:	bf1c      	itt	ne
 8018744:	4b05      	ldrne	r3, [pc, #20]	@ (801875c <HAL_Delay+0x24>)
 8018746:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8018748:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 801874a:	bf18      	it	ne
 801874c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801874e:	f7ff ffed 	bl	801872c <HAL_GetTick>
 8018752:	1b43      	subs	r3, r0, r5
 8018754:	42a3      	cmp	r3, r4
 8018756:	d3fa      	bcc.n	801874e <HAL_Delay+0x16>
  {
  }
}
 8018758:	bd38      	pop	{r3, r4, r5, pc}
 801875a:	bf00      	nop
 801875c:	20000428 	.word	0x20000428

08018760 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018760:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8018762:	0dcc      	lsrs	r4, r1, #23
 8018764:	f004 0404 	and.w	r4, r4, #4
 8018768:	3014      	adds	r0, #20
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 801876a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 801876e:	5903      	ldr	r3, [r0, r4]
 8018770:	2507      	movs	r5, #7
 8018772:	408d      	lsls	r5, r1
 8018774:	ea23 0305 	bic.w	r3, r3, r5
 8018778:	408a      	lsls	r2, r1
 801877a:	4313      	orrs	r3, r2
 801877c:	5103      	str	r3, [r0, r4]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801877e:	bd30      	pop	{r4, r5, pc}

08018780 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8018780:	6880      	ldr	r0, [r0, #8]
}
 8018782:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8018786:	4770      	bx	lr

08018788 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8018788:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 801878a:	2300      	movs	r3, #0
 801878c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 801878e:	4604      	mov	r4, r0
 8018790:	2800      	cmp	r0, #0
 8018792:	f000 80bb 	beq.w	801890c <HAL_ADC_Init+0x184>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8018796:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8018798:	b925      	cbnz	r5, 80187a4 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801879a:	f7fe ff3f 	bl	801761c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801879e:	65e5      	str	r5, [r4, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80187a0:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80187a4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80187a6:	689a      	ldr	r2, [r3, #8]
 80187a8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80187aa:	bf41      	itttt	mi
 80187ac:	689a      	ldrmi	r2, [r3, #8]
 80187ae:	f022 4220 	bicmi.w	r2, r2, #2684354560	@ 0xa0000000
 80187b2:	f022 023f 	bicmi.w	r2, r2, #63	@ 0x3f
 80187b6:	609a      	strmi	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80187b8:	689a      	ldr	r2, [r3, #8]
 80187ba:	00d1      	lsls	r1, r2, #3
 80187bc:	f140 8085 	bpl.w	80188ca <HAL_ADC_Init+0x142>
 80187c0:	689a      	ldr	r2, [r3, #8]
 80187c2:	00d2      	lsls	r2, r2, #3
 80187c4:	f100 8098 	bmi.w	80188f8 <HAL_ADC_Init+0x170>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80187c8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80187ca:	f042 0210 	orr.w	r2, r2, #16
 80187ce:	65a2      	str	r2, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80187d0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80187d2:	f042 0201 	orr.w	r2, r2, #1
 80187d6:	65e2      	str	r2, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80187d8:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80187da:	4618      	mov	r0, r3
 80187dc:	f7ff ffd0 	bl	8018780 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80187e0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80187e2:	f002 0210 	and.w	r2, r2, #16
 80187e6:	4302      	orrs	r2, r0
 80187e8:	f040 808c 	bne.w	8018904 <HAL_ADC_Init+0x17c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80187ec:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80187ee:	f422 7281 	bic.w	r2, r2, #258	@ 0x102
 80187f2:	f042 0202 	orr.w	r2, r2, #2
 80187f6:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80187f8:	689a      	ldr	r2, [r3, #8]
 80187fa:	07d5      	lsls	r5, r2, #31
 80187fc:	d40a      	bmi.n	8018814 <HAL_ADC_Init+0x8c>
 80187fe:	4a44      	ldr	r2, [pc, #272]	@ (8018910 <HAL_ADC_Init+0x188>)
 8018800:	6892      	ldr	r2, [r2, #8]
 8018802:	07d0      	lsls	r0, r2, #31
 8018804:	d406      	bmi.n	8018814 <HAL_ADC_Init+0x8c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018806:	4843      	ldr	r0, [pc, #268]	@ (8018914 <HAL_ADC_Init+0x18c>)
 8018808:	6865      	ldr	r5, [r4, #4]
 801880a:	6882      	ldr	r2, [r0, #8]
 801880c:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 8018810:	432a      	orrs	r2, r5
 8018812:	6082      	str	r2, [r0, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8018814:	68e5      	ldr	r5, [r4, #12]
 8018816:	6b62      	ldr	r2, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8018818:	f894 0020 	ldrb.w	r0, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 801881c:	432a      	orrs	r2, r5
 801881e:	68a5      	ldr	r5, [r4, #8]
 8018820:	432a      	orrs	r2, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8018822:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8018824:	2801      	cmp	r0, #1
                 hadc->Init.DataAlign                                                   |
 8018826:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801882a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 801882e:	bf02      	ittt	eq
 8018830:	6a60      	ldreq	r0, [r4, #36]	@ 0x24
 8018832:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8018836:	ea42 4240 	orreq.w	r2, r2, r0, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801883a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801883c:	b120      	cbz	r0, 8018848 <HAL_ADC_Init+0xc0>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 801883e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8018840:	f400 7070 	and.w	r0, r0, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8018844:	4328      	orrs	r0, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8018846:	4302      	orrs	r2, r0
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8018848:	68dd      	ldr	r5, [r3, #12]
 801884a:	4833      	ldr	r0, [pc, #204]	@ (8018918 <HAL_ADC_Init+0x190>)
 801884c:	4028      	ands	r0, r5
 801884e:	4310      	orrs	r0, r2
 8018850:	60d8      	str	r0, [r3, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8018852:	689a      	ldr	r2, [r3, #8]
 8018854:	0712      	lsls	r2, r2, #28
 8018856:	d420      	bmi.n	801889a <HAL_ADC_Init+0x112>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8018858:	f894 2030 	ldrb.w	r2, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801885c:	7e25      	ldrb	r5, [r4, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 801885e:	68d8      	ldr	r0, [r3, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8018860:	0052      	lsls	r2, r2, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8018862:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8018866:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8018868:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 801886c:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 801886e:	f020 0006 	bic.w	r0, r0, #6
 8018872:	4302      	orrs	r2, r0
 8018874:	60da      	str	r2, [r3, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8018876:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801887a:	2a01      	cmp	r2, #1
 801887c:	d13e      	bne.n	80188fc <HAL_ADC_Init+0x174>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 801887e:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	@ 0x3c
 8018882:	6918      	ldr	r0, [r3, #16]
 8018884:	432a      	orrs	r2, r5
 8018886:	f36f 008a 	bfc	r0, #2, #9
 801888a:	4302      	orrs	r2, r0
 801888c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801888e:	4302      	orrs	r2, r0
 8018890:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8018892:	4302      	orrs	r2, r0
 8018894:	f042 0201 	orr.w	r2, r2, #1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8018898:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801889a:	6922      	ldr	r2, [r4, #16]
 801889c:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 801889e:	bf05      	ittet	eq
 80188a0:	6b18      	ldreq	r0, [r3, #48]	@ 0x30
 80188a2:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80188a4:	6b1a      	ldrne	r2, [r3, #48]	@ 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80188a6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80188aa:	bf06      	itte	eq
 80188ac:	f020 000f 	biceq.w	r0, r0, #15
 80188b0:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80188b2:	f022 020f 	bicne.w	r2, r2, #15
 80188b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80188b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80188ba:	f023 0303 	bic.w	r3, r3, #3
 80188be:	f043 0301 	orr.w	r3, r3, #1
 80188c2:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80188c4:	4608      	mov	r0, r1
 80188c6:	b003      	add	sp, #12
 80188c8:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80188ca:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80188cc:	4913      	ldr	r1, [pc, #76]	@ (801891c <HAL_ADC_Init+0x194>)
 80188ce:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 80188d2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80188d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80188da:	609a      	str	r2, [r3, #8]
 80188dc:	4a10      	ldr	r2, [pc, #64]	@ (8018920 <HAL_ADC_Init+0x198>)
 80188de:	6812      	ldr	r2, [r2, #0]
 80188e0:	fbb2 f2f1 	udiv	r2, r2, r1
 80188e4:	3201      	adds	r2, #1
 80188e6:	0052      	lsls	r2, r2, #1
      wait_loop_index--;
 80188e8:	9201      	str	r2, [sp, #4]
    while (wait_loop_index != 0UL)
 80188ea:	9a01      	ldr	r2, [sp, #4]
 80188ec:	2a00      	cmp	r2, #0
 80188ee:	f43f af67 	beq.w	80187c0 <HAL_ADC_Init+0x38>
      wait_loop_index--;
 80188f2:	9a01      	ldr	r2, [sp, #4]
 80188f4:	3a01      	subs	r2, #1
 80188f6:	e7f7      	b.n	80188e8 <HAL_ADC_Init+0x160>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80188f8:	2100      	movs	r1, #0
 80188fa:	e76e      	b.n	80187da <HAL_ADC_Init+0x52>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80188fc:	691a      	ldr	r2, [r3, #16]
 80188fe:	f022 0201 	bic.w	r2, r2, #1
 8018902:	e7c9      	b.n	8018898 <HAL_ADC_Init+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018904:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018906:	f043 0310 	orr.w	r3, r3, #16
 801890a:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 801890c:	2101      	movs	r1, #1
 801890e:	e7d9      	b.n	80188c4 <HAL_ADC_Init+0x13c>
 8018910:	50040000 	.word	0x50040000
 8018914:	50040300 	.word	0x50040300
 8018918:	fff0c007 	.word	0xfff0c007
 801891c:	00030d40 	.word	0x00030d40
 8018920:	20000424 	.word	0x20000424

08018924 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8018924:	4770      	bx	lr

08018926 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8018926:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8018928:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801892a:	f7ff fffb 	bl	8018924 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801892e:	bd08      	pop	{r3, pc}

08018930 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8018930:	4770      	bx	lr

08018932 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8018932:	4770      	bx	lr

08018934 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8018934:	6803      	ldr	r3, [r0, #0]
{
 8018936:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8018938:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 801893a:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801893c:	07b1      	lsls	r1, r6, #30
{
 801893e:	4604      	mov	r4, r0
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8018940:	d50d      	bpl.n	801895e <HAL_ADC_IRQHandler+0x2a>
 8018942:	07aa      	lsls	r2, r5, #30
 8018944:	d50b      	bpl.n	801895e <HAL_ADC_IRQHandler+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018946:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8018948:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 801894a:	bf5e      	ittt	pl
 801894c:	6d83      	ldrpl	r3, [r0, #88]	@ 0x58
 801894e:	f443 6300 	orrpl.w	r3, r3, #2048	@ 0x800
 8018952:	6583      	strpl	r3, [r0, #88]	@ 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8018954:	f000 fc12 	bl	801917c <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8018958:	6823      	ldr	r3, [r4, #0]
 801895a:	2202      	movs	r2, #2
 801895c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801895e:	0770      	lsls	r0, r6, #29
 8018960:	d501      	bpl.n	8018966 <HAL_ADC_IRQHandler+0x32>
 8018962:	0769      	lsls	r1, r5, #29
 8018964:	d403      	bmi.n	801896e <HAL_ADC_IRQHandler+0x3a>
 8018966:	0732      	lsls	r2, r6, #28
 8018968:	d52e      	bpl.n	80189c8 <HAL_ADC_IRQHandler+0x94>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801896a:	072b      	lsls	r3, r5, #28
 801896c:	d52c      	bpl.n	80189c8 <HAL_ADC_IRQHandler+0x94>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801896e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018970:	06d8      	lsls	r0, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018972:	bf5e      	ittt	pl
 8018974:	6da3      	ldrpl	r3, [r4, #88]	@ 0x58
 8018976:	f443 7300 	orrpl.w	r3, r3, #512	@ 0x200
 801897a:	65a3      	strpl	r3, [r4, #88]	@ 0x58
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801897c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 801897e:	68da      	ldr	r2, [r3, #12]
 8018980:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8018984:	d11a      	bne.n	80189bc <HAL_ADC_IRQHandler+0x88>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018986:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8018988:	0491      	lsls	r1, r2, #18
 801898a:	d417      	bmi.n	80189bc <HAL_ADC_IRQHandler+0x88>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801898c:	681a      	ldr	r2, [r3, #0]
 801898e:	0712      	lsls	r2, r2, #28
 8018990:	d514      	bpl.n	80189bc <HAL_ADC_IRQHandler+0x88>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018992:	4618      	mov	r0, r3
 8018994:	f7ff fef4 	bl	8018780 <LL_ADC_REG_IsConversionOngoing>
 8018998:	2800      	cmp	r0, #0
 801899a:	f040 80a5 	bne.w	8018ae8 <HAL_ADC_IRQHandler+0x1b4>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801899e:	685a      	ldr	r2, [r3, #4]
 80189a0:	f022 020c 	bic.w	r2, r2, #12
 80189a4:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80189a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80189a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80189ac:	65a3      	str	r3, [r4, #88]	@ 0x58
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80189ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80189b0:	04d8      	lsls	r0, r3, #19
 80189b2:	d403      	bmi.n	80189bc <HAL_ADC_IRQHandler+0x88>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80189b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80189b6:	f043 0301 	orr.w	r3, r3, #1
 80189ba:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80189bc:	4620      	mov	r0, r4
 80189be:	f7fd fd35 	bl	801642c <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80189c2:	6823      	ldr	r3, [r4, #0]
 80189c4:	220c      	movs	r2, #12
 80189c6:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80189c8:	06b1      	lsls	r1, r6, #26
 80189ca:	d501      	bpl.n	80189d0 <HAL_ADC_IRQHandler+0x9c>
 80189cc:	06aa      	lsls	r2, r5, #26
 80189ce:	d403      	bmi.n	80189d8 <HAL_ADC_IRQHandler+0xa4>
 80189d0:	0673      	lsls	r3, r6, #25
 80189d2:	d530      	bpl.n	8018a36 <HAL_ADC_IRQHandler+0x102>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80189d4:	0668      	lsls	r0, r5, #25
 80189d6:	d52e      	bpl.n	8018a36 <HAL_ADC_IRQHandler+0x102>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80189d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80189da:	06d9      	lsls	r1, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80189dc:	bf5e      	ittt	pl
 80189de:	6da3      	ldrpl	r3, [r4, #88]	@ 0x58
 80189e0:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 80189e4:	65a3      	strpl	r3, [r4, #88]	@ 0x58
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80189e6:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80189e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80189ea:	68d8      	ldr	r0, [r3, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80189ec:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80189ee:	f012 0fc0 	tst.w	r2, #192	@ 0xc0
 80189f2:	d11a      	bne.n	8018a2a <HAL_ADC_IRQHandler+0xf6>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80189f4:	018a      	lsls	r2, r1, #6
 80189f6:	d505      	bpl.n	8018a04 <HAL_ADC_IRQHandler+0xd0>
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80189f8:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
 80189fc:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8018a00:	4302      	orrs	r2, r0
 8018a02:	d112      	bne.n	8018a2a <HAL_ADC_IRQHandler+0xf6>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8018a04:	681a      	ldr	r2, [r3, #0]
 8018a06:	0650      	lsls	r0, r2, #25
 8018a08:	d50f      	bpl.n	8018a2a <HAL_ADC_IRQHandler+0xf6>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8018a0a:	0289      	lsls	r1, r1, #10
 8018a0c:	d40d      	bmi.n	8018a2a <HAL_ADC_IRQHandler+0xf6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8018a0e:	689a      	ldr	r2, [r3, #8]
 8018a10:	0712      	lsls	r2, r2, #28
 8018a12:	d472      	bmi.n	8018afa <HAL_ADC_IRQHandler+0x1c6>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8018a14:	685a      	ldr	r2, [r3, #4]
 8018a16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018a1a:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8018a1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018a1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018a22:	65a3      	str	r3, [r4, #88]	@ 0x58
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8018a24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018a26:	05d8      	lsls	r0, r3, #23
 8018a28:	d570      	bpl.n	8018b0c <HAL_ADC_IRQHandler+0x1d8>
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	f000 fba2 	bl	8019174 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8018a30:	6823      	ldr	r3, [r4, #0]
 8018a32:	2260      	movs	r2, #96	@ 0x60
 8018a34:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8018a36:	0631      	lsls	r1, r6, #24
 8018a38:	d50b      	bpl.n	8018a52 <HAL_ADC_IRQHandler+0x11e>
 8018a3a:	062a      	lsls	r2, r5, #24
 8018a3c:	d509      	bpl.n	8018a52 <HAL_ADC_IRQHandler+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8018a3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8018a44:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8018a46:	4620      	mov	r0, r4
 8018a48:	f7ff ff72 	bl	8018930 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8018a4c:	6823      	ldr	r3, [r4, #0]
 8018a4e:	2280      	movs	r2, #128	@ 0x80
 8018a50:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8018a52:	05f3      	lsls	r3, r6, #23
 8018a54:	d50c      	bpl.n	8018a70 <HAL_ADC_IRQHandler+0x13c>
 8018a56:	05e8      	lsls	r0, r5, #23
 8018a58:	d50a      	bpl.n	8018a70 <HAL_ADC_IRQHandler+0x13c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8018a5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8018a60:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8018a62:	4620      	mov	r0, r4
 8018a64:	f000 fb88 	bl	8019178 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8018a68:	6823      	ldr	r3, [r4, #0]
 8018a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018a6e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8018a70:	05b1      	lsls	r1, r6, #22
 8018a72:	d50c      	bpl.n	8018a8e <HAL_ADC_IRQHandler+0x15a>
 8018a74:	05aa      	lsls	r2, r5, #22
 8018a76:	d50a      	bpl.n	8018a8e <HAL_ADC_IRQHandler+0x15a>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8018a78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018a7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8018a7e:	65a3      	str	r3, [r4, #88]	@ 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8018a80:	4620      	mov	r0, r4
 8018a82:	f000 fb7a 	bl	801917a <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8018a86:	6823      	ldr	r3, [r4, #0]
 8018a88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018a8c:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8018a8e:	06f3      	lsls	r3, r6, #27
 8018a90:	d515      	bpl.n	8018abe <HAL_ADC_IRQHandler+0x18a>
 8018a92:	06e8      	lsls	r0, r5, #27
 8018a94:	d513      	bpl.n	8018abe <HAL_ADC_IRQHandler+0x18a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8018a96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018a98:	b11b      	cbz	r3, 8018aa2 <HAL_ADC_IRQHandler+0x16e>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8018a9a:	6823      	ldr	r3, [r4, #0]
 8018a9c:	68db      	ldr	r3, [r3, #12]
 8018a9e:	07d9      	lsls	r1, r3, #31
 8018aa0:	d50a      	bpl.n	8018ab8 <HAL_ADC_IRQHandler+0x184>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8018aa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018aa4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8018aa8:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8018aaa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8018aac:	f043 0302 	orr.w	r3, r3, #2
 8018ab0:	65e3      	str	r3, [r4, #92]	@ 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f7ff ff3d 	bl	8018932 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8018ab8:	6823      	ldr	r3, [r4, #0]
 8018aba:	2210      	movs	r2, #16
 8018abc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8018abe:	0572      	lsls	r2, r6, #21
 8018ac0:	d529      	bpl.n	8018b16 <HAL_ADC_IRQHandler+0x1e2>
 8018ac2:	056b      	lsls	r3, r5, #21
 8018ac4:	d527      	bpl.n	8018b16 <HAL_ADC_IRQHandler+0x1e2>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8018ac6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018acc:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8018ace:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8018ad0:	f043 0308 	orr.w	r3, r3, #8
 8018ad4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8018ad6:	6823      	ldr	r3, [r4, #0]
 8018ad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8018adc:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8018ade:	601a      	str	r2, [r3, #0]
}
 8018ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8018ae4:	f000 bb47 	b.w	8019176 <HAL_ADCEx_InjectedQueueOverflowCallback>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018ae8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018aea:	f043 0310 	orr.w	r3, r3, #16
 8018aee:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018af0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8018af2:	f043 0301 	orr.w	r3, r3, #1
 8018af6:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8018af8:	e760      	b.n	80189bc <HAL_ADC_IRQHandler+0x88>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018afa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018afc:	f043 0310 	orr.w	r3, r3, #16
 8018b00:	65a3      	str	r3, [r4, #88]	@ 0x58
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018b02:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8018b04:	f043 0301 	orr.w	r3, r3, #1
 8018b08:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8018b0a:	e78e      	b.n	8018a2a <HAL_ADC_IRQHandler+0xf6>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018b0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018b0e:	f043 0301 	orr.w	r3, r3, #1
 8018b12:	65a3      	str	r3, [r4, #88]	@ 0x58
 8018b14:	e789      	b.n	8018a2a <HAL_ADC_IRQHandler+0xf6>
}
 8018b16:	bd70      	pop	{r4, r5, r6, pc}

08018b18 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018b18:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8018b1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018b1c:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8018b20:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018b22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8018b24:	d121      	bne.n	8018b6a <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018b26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018b2a:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8018b2c:	681a      	ldr	r2, [r3, #0]
 8018b2e:	6811      	ldr	r1, [r2, #0]
 8018b30:	0708      	lsls	r0, r1, #28
 8018b32:	d516      	bpl.n	8018b62 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018b34:	68d1      	ldr	r1, [r2, #12]
 8018b36:	f411 6f40 	tst.w	r1, #3072	@ 0xc00
 8018b3a:	d10e      	bne.n	8018b5a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8018b3c:	68d2      	ldr	r2, [r2, #12]
 8018b3e:	f412 5f00 	tst.w	r2, #8192	@ 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8018b42:	d10a      	bne.n	8018b5a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8018b44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018b46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8018b4a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018b4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018b4e:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018b50:	bf5e      	ittt	pl
 8018b52:	6d9a      	ldrpl	r2, [r3, #88]	@ 0x58
 8018b54:	f042 0201 	orrpl.w	r2, r2, #1
 8018b58:	659a      	strpl	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	f7fd fc66 	bl	801642c <HAL_ADC_ConvCpltCallback>
}
 8018b60:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8018b62:	68d2      	ldr	r2, [r2, #12]
 8018b64:	f012 0f02 	tst.w	r2, #2
 8018b68:	e7eb      	b.n	8018b42 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8018b6a:	06d2      	lsls	r2, r2, #27
 8018b6c:	d503      	bpl.n	8018b76 <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7ff fedf 	bl	8018932 <HAL_ADC_ErrorCallback>
 8018b74:	e7f4      	b.n	8018b60 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8018b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8018b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8018b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b7e:	4718      	bx	r3

08018b80 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018b80:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8018b82:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8018b84:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8018b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018b8a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8018b8c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8018b8e:	f043 0304 	orr.w	r3, r3, #4
 8018b92:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8018b94:	f7ff fecd 	bl	8018932 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8018b98:	bd08      	pop	{r3, pc}
	...

08018b9c <HAL_ADC_ConfigChannel>:
{
 8018b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8018ba2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8018ba6:	2b01      	cmp	r3, #1
{
 8018ba8:	4605      	mov	r5, r0
 8018baa:	460e      	mov	r6, r1
  __HAL_LOCK(hadc);
 8018bac:	f000 81b2 	beq.w	8018f14 <HAL_ADC_ConfigChannel+0x378>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018bb0:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 8018bb2:	2301      	movs	r3, #1
 8018bb4:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018bb8:	4620      	mov	r0, r4
 8018bba:	f7ff fde1 	bl	8018780 <LL_ADC_REG_IsConversionOngoing>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	f040 81a2 	bne.w	8018f08 <HAL_ADC_ConfigChannel+0x36c>
    uint32_t config_rank = pConfig->Rank;
 8018bc4:	684b      	ldr	r3, [r1, #4]
    if (pConfig->Rank <= 5U)
 8018bc6:	2b05      	cmp	r3, #5
 8018bc8:	d806      	bhi.n	8018bd8 <HAL_ADC_ConfigChannel+0x3c>
      switch (pConfig->Rank)
 8018bca:	3b02      	subs	r3, #2
 8018bcc:	2b03      	cmp	r3, #3
 8018bce:	bf9a      	itte	ls
 8018bd0:	4ab9      	ldrls	r2, [pc, #740]	@ (8018eb8 <HAL_ADC_ConfigChannel+0x31c>)
 8018bd2:	f832 3013 	ldrhls.w	r3, [r2, r3, lsl #1]
    if (pConfig->Rank <= 5U)
 8018bd6:	2306      	movhi	r3, #6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8018bd8:	0999      	lsrs	r1, r3, #6
  MODIFY_REG(*preg,
 8018bda:	6832      	ldr	r2, [r6, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8018bdc:	f001 010c 	and.w	r1, r1, #12
 8018be0:	f104 0730 	add.w	r7, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8018be4:	f003 031f 	and.w	r3, r3, #31
 8018be8:	5878      	ldr	r0, [r7, r1]
 8018bea:	f04f 0c1f 	mov.w	ip, #31
 8018bee:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8018bf2:	409a      	lsls	r2, r3
 8018bf4:	fa0c f303 	lsl.w	r3, ip, r3
 8018bf8:	ea20 0303 	bic.w	r3, r0, r3
 8018bfc:	431a      	orrs	r2, r3
 8018bfe:	507a      	str	r2, [r7, r1]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018c00:	4620      	mov	r0, r4
 8018c02:	f7ff fdbd 	bl	8018780 <LL_ADC_REG_IsConversionOngoing>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8018c06:	68a2      	ldr	r2, [r4, #8]
 8018c08:	f002 0208 	and.w	r2, r2, #8
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8018c0c:	4302      	orrs	r2, r0
 8018c0e:	d125      	bne.n	8018c5c <HAL_ADC_ConfigChannel+0xc0>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8018c10:	68b3      	ldr	r3, [r6, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8018c12:	6831      	ldr	r1, [r6, #0]
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8018c14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8018c18:	d15d      	bne.n	8018cd6 <HAL_ADC_ConfigChannel+0x13a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	f7ff fda0 	bl	8018760 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018c20:	6963      	ldr	r3, [r4, #20]
 8018c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018c26:	6163      	str	r3, [r4, #20]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8018c28:	6937      	ldr	r7, [r6, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8018c2a:	6971      	ldr	r1, [r6, #20]
 8018c2c:	68e0      	ldr	r0, [r4, #12]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8018c2e:	6833      	ldr	r3, [r6, #0]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8018c30:	2f04      	cmp	r7, #4
 8018c32:	f104 0260 	add.w	r2, r4, #96	@ 0x60
 8018c36:	d056      	beq.n	8018ce6 <HAL_ADC_ConfigChannel+0x14a>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8018c38:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8018c3c:	0040      	lsls	r0, r0, #1
  MODIFY_REG(*preg,
 8018c3e:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8018c42:	4081      	lsls	r1, r0
 8018c44:	489d      	ldr	r0, [pc, #628]	@ (8018ebc <HAL_ADC_ConfigChannel+0x320>)
 8018c46:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8018c4a:	ea0c 0000 	and.w	r0, ip, r0
 8018c4e:	4318      	orrs	r0, r3
 8018c50:	ea41 0300 	orr.w	r3, r1, r0
 8018c54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018c58:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8018c5c:	68a2      	ldr	r2, [r4, #8]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8018c5e:	6833      	ldr	r3, [r6, #0]
 8018c60:	07d7      	lsls	r7, r2, #31
 8018c62:	d42d      	bmi.n	8018cc0 <HAL_ADC_ConfigChannel+0x124>
 8018c64:	68f7      	ldr	r7, [r6, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8018c66:	4a96      	ldr	r2, [pc, #600]	@ (8018ec0 <HAL_ADC_ConfigChannel+0x324>)
 8018c68:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 8018c6c:	f007 0c18 	and.w	ip, r7, #24
 8018c70:	f3c3 0012 	ubfx	r0, r3, #0, #19
 8018c74:	fa22 f20c 	lsr.w	r2, r2, ip
 8018c78:	401a      	ands	r2, r3
 8018c7a:	ea21 0100 	bic.w	r1, r1, r0
 8018c7e:	430a      	orrs	r2, r1
 8018c80:	f8c4 20b0 	str.w	r2, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8018c84:	4a8f      	ldr	r2, [pc, #572]	@ (8018ec4 <HAL_ADC_ConfigChannel+0x328>)
 8018c86:	4297      	cmp	r7, r2
 8018c88:	d11a      	bne.n	8018cc0 <HAL_ADC_ConfigChannel+0x124>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8018c8a:	2800      	cmp	r0, #0
 8018c8c:	f040 808a 	bne.w	8018da4 <HAL_ADC_ConfigChannel+0x208>
 8018c90:	0e9a      	lsrs	r2, r3, #26
 8018c92:	3201      	adds	r2, #1
 8018c94:	f002 011f 	and.w	r1, r2, #31
 8018c98:	2001      	movs	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8018c9a:	2909      	cmp	r1, #9
 8018c9c:	ea4f 6282 	mov.w	r2, r2, lsl #26
 8018ca0:	fa01 f300 	lsl.w	r3, r1, r0
 8018ca4:	f200 80a4 	bhi.w	8018df0 <HAL_ADC_ConfigChannel+0x254>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8018ca8:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8018cac:	4088      	lsls	r0, r1
 8018cae:	4302      	orrs	r2, r0
 8018cb0:	440b      	add	r3, r1
 8018cb2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8018cb4:	ea43 0102 	orr.w	r1, r3, r2
 8018cb8:	4620      	mov	r0, r4
 8018cba:	68b2      	ldr	r2, [r6, #8]
 8018cbc:	f7ff fd50 	bl	8018760 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8018cc0:	6831      	ldr	r1, [r6, #0]
 8018cc2:	4b81      	ldr	r3, [pc, #516]	@ (8018ec8 <HAL_ADC_ConfigChannel+0x32c>)
 8018cc4:	4219      	tst	r1, r3
 8018cc6:	f040 80bf 	bne.w	8018e48 <HAL_ADC_ConfigChannel+0x2ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018cca:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8018ccc:	2300      	movs	r3, #0
 8018cce:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
}
 8018cd2:	b003      	add	sp, #12
 8018cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	4620      	mov	r0, r4
 8018cda:	f7ff fd41 	bl	8018760 <LL_ADC_SetChannelSamplingTime>
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018cde:	6963      	ldr	r3, [r4, #20]
 8018ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ce4:	e79f      	b.n	8018c26 <HAL_ADC_ConfigChannel+0x8a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018ce6:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8018ce8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018cea:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018cee:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018cf2:	2800      	cmp	r0, #0
 8018cf4:	d139      	bne.n	8018d6a <HAL_ADC_ConfigChannel+0x1ce>
 8018cf6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018cfa:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8018cfc:	bf02      	ittt	eq
 8018cfe:	6e23      	ldreq	r3, [r4, #96]	@ 0x60
 8018d00:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8018d04:	6623      	streq	r3, [r4, #96]	@ 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018d08:	6833      	ldr	r3, [r6, #0]
 8018d0a:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8018d0c:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8018d10:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018d14:	2800      	cmp	r0, #0
 8018d16:	d12f      	bne.n	8018d78 <HAL_ADC_ConfigChannel+0x1dc>
 8018d18:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8018d1c:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8018d1e:	bf02      	ittt	eq
 8018d20:	6e63      	ldreq	r3, [r4, #100]	@ 0x64
 8018d22:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8018d26:	6663      	streq	r3, [r4, #100]	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018d28:	6893      	ldr	r3, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018d2a:	6833      	ldr	r3, [r6, #0]
 8018d2c:	6891      	ldr	r1, [r2, #8]
 8018d2e:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8018d32:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018d36:	bb30      	cbnz	r0, 8018d86 <HAL_ADC_ConfigChannel+0x1ea>
 8018d38:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8018d3c:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8018d3e:	bf02      	ittt	eq
 8018d40:	6893      	ldreq	r3, [r2, #8]
 8018d42:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8018d46:	6093      	streq	r3, [r2, #8]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018d48:	68d3      	ldr	r3, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018d4a:	6833      	ldr	r3, [r6, #0]
 8018d4c:	68d1      	ldr	r1, [r2, #12]
 8018d4e:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8018d52:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8018d56:	b9e8      	cbnz	r0, 8018d94 <HAL_ADC_ConfigChannel+0x1f8>
 8018d58:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8018d5c:	4299      	cmp	r1, r3
  MODIFY_REG(*preg,
 8018d5e:	bf02      	ittt	eq
 8018d60:	68d3      	ldreq	r3, [r2, #12]
 8018d62:	f023 4300 	biceq.w	r3, r3, #2147483648	@ 0x80000000
 8018d66:	60d3      	streq	r3, [r2, #12]
}
 8018d68:	e778      	b.n	8018c5c <HAL_ADC_ConfigChannel+0xc0>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018d6a:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d0c9      	beq.n	8018d06 <HAL_ADC_ConfigChannel+0x16a>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8018d72:	fab3 f383 	clz	r3, r3
 8018d76:	e7c0      	b.n	8018cfa <HAL_ADC_ConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018d78:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d0d3      	beq.n	8018d28 <HAL_ADC_ConfigChannel+0x18c>
  return __builtin_clz(value);
 8018d80:	fab3 f383 	clz	r3, r3
 8018d84:	e7ca      	b.n	8018d1c <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018d86:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d0dc      	beq.n	8018d48 <HAL_ADC_ConfigChannel+0x1ac>
  return __builtin_clz(value);
 8018d8e:	fab3 f383 	clz	r3, r3
 8018d92:	e7d3      	b.n	8018d3c <HAL_ADC_ConfigChannel+0x1a0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018d94:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	f43f af5f 	beq.w	8018c5c <HAL_ADC_ConfigChannel+0xc0>
  return __builtin_clz(value);
 8018d9e:	fab3 f383 	clz	r3, r3
 8018da2:	e7db      	b.n	8018d5c <HAL_ADC_ConfigChannel+0x1c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018da4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 8018da8:	b132      	cbz	r2, 8018db8 <HAL_ADC_ConfigChannel+0x21c>
  return __builtin_clz(value);
 8018daa:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8018dae:	3201      	adds	r2, #1
 8018db0:	f002 021f 	and.w	r2, r2, #31
 8018db4:	2a09      	cmp	r2, #9
 8018db6:	d825      	bhi.n	8018e04 <HAL_ADC_ConfigChannel+0x268>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018db8:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8018dbc:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8018dc0:	3101      	adds	r1, #1
 8018dc2:	0689      	lsls	r1, r1, #26
 8018dc4:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018dc8:	fa93 f0a3 	rbit	r0, r3
  return __builtin_clz(value);
 8018dcc:	fab0 f080 	clz	r0, r0
 8018dd0:	3001      	adds	r0, #1
 8018dd2:	f000 001f 	and.w	r0, r0, #31
 8018dd6:	2201      	movs	r2, #1
 8018dd8:	4082      	lsls	r2, r0
 8018dda:	430a      	orrs	r2, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018ddc:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8018de0:	fab3 f383 	clz	r3, r3
 8018de4:	3301      	adds	r3, #1
 8018de6:	f003 031f 	and.w	r3, r3, #31
 8018dea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018dee:	e760      	b.n	8018cb2 <HAL_ADC_ConfigChannel+0x116>
 8018df0:	4088      	lsls	r0, r1
 8018df2:	4419      	add	r1, r3
 8018df4:	391e      	subs	r1, #30
 8018df6:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8018dfa:	0509      	lsls	r1, r1, #20
 8018dfc:	4302      	orrs	r2, r0
 8018dfe:	f041 7300 	orr.w	r3, r1, #33554432	@ 0x2000000
 8018e02:	e757      	b.n	8018cb4 <HAL_ADC_ConfigChannel+0x118>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018e04:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8018e08:	fab1 f181 	clz	r1, r1
 8018e0c:	3101      	adds	r1, #1
 8018e0e:	0689      	lsls	r1, r1, #26
 8018e10:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018e14:	fa93 f0a3 	rbit	r0, r3
  return __builtin_clz(value);
 8018e18:	fab0 f080 	clz	r0, r0
 8018e1c:	3001      	adds	r0, #1
 8018e1e:	f000 001f 	and.w	r0, r0, #31
 8018e22:	2201      	movs	r2, #1
 8018e24:	4082      	lsls	r2, r0
 8018e26:	430a      	orrs	r2, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018e28:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8018e2c:	fab1 f181 	clz	r1, r1
 8018e30:	3101      	adds	r1, #1
 8018e32:	f001 011f 	and.w	r1, r1, #31
 8018e36:	2303      	movs	r3, #3
 8018e38:	f06f 001d 	mvn.w	r0, #29
 8018e3c:	fb13 0301 	smlabb	r3, r3, r1, r0
 8018e40:	051b      	lsls	r3, r3, #20
 8018e42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018e46:	e735      	b.n	8018cb4 <HAL_ADC_ConfigChannel+0x118>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8018e48:	4b20      	ldr	r3, [pc, #128]	@ (8018ecc <HAL_ADC_ConfigChannel+0x330>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8018e4a:	4e21      	ldr	r6, [pc, #132]	@ (8018ed0 <HAL_ADC_ConfigChannel+0x334>)
 8018e4c:	689a      	ldr	r2, [r3, #8]
 8018e4e:	42b1      	cmp	r1, r6
 8018e50:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
 8018e54:	d11d      	bne.n	8018e92 <HAL_ADC_ConfigChannel+0x2f6>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8018e56:	0216      	lsls	r6, r2, #8
 8018e58:	f53f af37 	bmi.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8018e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8018ed4 <HAL_ADC_ConfigChannel+0x338>)
 8018e5e:	4294      	cmp	r4, r2
 8018e60:	f47f af33 	bne.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8018e64:	689a      	ldr	r2, [r3, #8]
 8018e66:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8018e6a:	4302      	orrs	r2, r0
 8018e6c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8018e70:	609a      	str	r2, [r3, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8018e72:	4b19      	ldr	r3, [pc, #100]	@ (8018ed8 <HAL_ADC_ConfigChannel+0x33c>)
 8018e74:	681a      	ldr	r2, [r3, #0]
 8018e76:	4b19      	ldr	r3, [pc, #100]	@ (8018edc <HAL_ADC_ConfigChannel+0x340>)
 8018e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8018e7c:	230c      	movs	r3, #12
 8018e7e:	fb02 3303 	mla	r3, r2, r3, r3
            wait_loop_index--;
 8018e82:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8018e84:	9b01      	ldr	r3, [sp, #4]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	f43f af1f 	beq.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
            wait_loop_index--;
 8018e8c:	9b01      	ldr	r3, [sp, #4]
 8018e8e:	3b01      	subs	r3, #1
 8018e90:	e7f7      	b.n	8018e82 <HAL_ADC_ConfigChannel+0x2e6>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8018e92:	4e13      	ldr	r6, [pc, #76]	@ (8018ee0 <HAL_ADC_ConfigChannel+0x344>)
 8018e94:	42b1      	cmp	r1, r6
 8018e96:	d125      	bne.n	8018ee4 <HAL_ADC_ConfigChannel+0x348>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8018e98:	01d1      	lsls	r1, r2, #7
 8018e9a:	f53f af16 	bmi.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8018e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8018ed4 <HAL_ADC_ConfigChannel+0x338>)
 8018ea0:	4294      	cmp	r4, r2
 8018ea2:	f47f af12 	bne.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
 8018ea6:	689a      	ldr	r2, [r3, #8]
 8018ea8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8018eac:	4302      	orrs	r2, r0
 8018eae:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8018eb2:	609a      	str	r2, [r3, #8]
}
 8018eb4:	e709      	b.n	8018cca <HAL_ADC_ConfigChannel+0x12e>
 8018eb6:	bf00      	nop
 8018eb8:	08041e10 	.word	0x08041e10
 8018ebc:	03fff000 	.word	0x03fff000
 8018ec0:	0007ffff 	.word	0x0007ffff
 8018ec4:	407f0000 	.word	0x407f0000
 8018ec8:	80080000 	.word	0x80080000
 8018ecc:	50040300 	.word	0x50040300
 8018ed0:	c7520000 	.word	0xc7520000
 8018ed4:	50040000 	.word	0x50040000
 8018ed8:	20000424 	.word	0x20000424
 8018edc:	00030d40 	.word	0x00030d40
 8018ee0:	cb840000 	.word	0xcb840000
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8018ee4:	4e0c      	ldr	r6, [pc, #48]	@ (8018f18 <HAL_ADC_ConfigChannel+0x37c>)
 8018ee6:	42b1      	cmp	r1, r6
 8018ee8:	f47f aeef 	bne.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8018eec:	0252      	lsls	r2, r2, #9
 8018eee:	f53f aeec 	bmi.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
        if (ADC_VREFINT_INSTANCE(hadc))
 8018ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8018f1c <HAL_ADC_ConfigChannel+0x380>)
 8018ef4:	4294      	cmp	r4, r2
 8018ef6:	f47f aee8 	bne.w	8018cca <HAL_ADC_ConfigChannel+0x12e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8018efa:	689a      	ldr	r2, [r3, #8]
 8018efc:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8018f00:	4302      	orrs	r2, r0
 8018f02:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8018f06:	e7d4      	b.n	8018eb2 <HAL_ADC_ConfigChannel+0x316>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8018f08:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8018f0a:	f042 0220 	orr.w	r2, r2, #32
 8018f0e:	65aa      	str	r2, [r5, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8018f10:	4618      	mov	r0, r3
 8018f12:	e6db      	b.n	8018ccc <HAL_ADC_ConfigChannel+0x130>
  __HAL_LOCK(hadc);
 8018f14:	2002      	movs	r0, #2
 8018f16:	e6dc      	b.n	8018cd2 <HAL_ADC_ConfigChannel+0x136>
 8018f18:	80000001 	.word	0x80000001
 8018f1c:	50040000 	.word	0x50040000

08018f20 <ADC_Enable>:
{
 8018f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8018f22:	2300      	movs	r3, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8018f24:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8018f26:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8018f28:	6893      	ldr	r3, [r2, #8]
 8018f2a:	07dd      	lsls	r5, r3, #31
{
 8018f2c:	4604      	mov	r4, r0
 8018f2e:	d502      	bpl.n	8018f36 <ADC_Enable+0x16>
  return HAL_OK;
 8018f30:	2000      	movs	r0, #0
}
 8018f32:	b002      	add	sp, #8
 8018f34:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8018f36:	6891      	ldr	r1, [r2, #8]
 8018f38:	4b20      	ldr	r3, [pc, #128]	@ (8018fbc <ADC_Enable+0x9c>)
 8018f3a:	4219      	tst	r1, r3
 8018f3c:	d009      	beq.n	8018f52 <ADC_Enable+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018f3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018f40:	f043 0310 	orr.w	r3, r3, #16
 8018f44:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018f46:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8018f48:	f043 0301 	orr.w	r3, r3, #1
 8018f4c:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8018f4e:	2001      	movs	r0, #1
 8018f50:	e7ef      	b.n	8018f32 <ADC_Enable+0x12>
  MODIFY_REG(ADCx->CR,
 8018f52:	6893      	ldr	r3, [r2, #8]
 8018f54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8018f5c:	f043 0301 	orr.w	r3, r3, #1
 8018f60:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8018f62:	4b17      	ldr	r3, [pc, #92]	@ (8018fc0 <ADC_Enable+0xa0>)
 8018f64:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8018f66:	0218      	lsls	r0, r3, #8
 8018f68:	d419      	bmi.n	8018f9e <ADC_Enable+0x7e>
    tickstart = HAL_GetTick();
 8018f6a:	f7ff fbdf 	bl	801872c <HAL_GetTick>
  MODIFY_REG(ADCx->CR,
 8018f6e:	4e15      	ldr	r6, [pc, #84]	@ (8018fc4 <ADC_Enable+0xa4>)
 8018f70:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8018f72:	6822      	ldr	r2, [r4, #0]
 8018f74:	6813      	ldr	r3, [r2, #0]
 8018f76:	07db      	lsls	r3, r3, #31
 8018f78:	d4da      	bmi.n	8018f30 <ADC_Enable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8018f7a:	6893      	ldr	r3, [r2, #8]
 8018f7c:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8018f7e:	bf5f      	itttt	pl
 8018f80:	6893      	ldrpl	r3, [r2, #8]
 8018f82:	4033      	andpl	r3, r6
 8018f84:	f043 0301 	orrpl.w	r3, r3, #1
 8018f88:	6093      	strpl	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8018f8a:	f7ff fbcf 	bl	801872c <HAL_GetTick>
 8018f8e:	1b40      	subs	r0, r0, r5
 8018f90:	2802      	cmp	r0, #2
 8018f92:	d9ee      	bls.n	8018f72 <ADC_Enable+0x52>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8018f94:	6823      	ldr	r3, [r4, #0]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	07da      	lsls	r2, r3, #31
 8018f9a:	d4ea      	bmi.n	8018f72 <ADC_Enable+0x52>
 8018f9c:	e7cf      	b.n	8018f3e <ADC_Enable+0x1e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8018f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8018fc8 <ADC_Enable+0xa8>)
 8018fa0:	681a      	ldr	r2, [r3, #0]
 8018fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8018fcc <ADC_Enable+0xac>)
 8018fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8018fa8:	230c      	movs	r3, #12
 8018faa:	fb02 3303 	mla	r3, r2, r3, r3
        wait_loop_index--;
 8018fae:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8018fb0:	9b01      	ldr	r3, [sp, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d0d9      	beq.n	8018f6a <ADC_Enable+0x4a>
        wait_loop_index--;
 8018fb6:	9b01      	ldr	r3, [sp, #4]
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	e7f8      	b.n	8018fae <ADC_Enable+0x8e>
 8018fbc:	8000003f 	.word	0x8000003f
 8018fc0:	50040300 	.word	0x50040300
 8018fc4:	7fffffc0 	.word	0x7fffffc0
 8018fc8:	20000424 	.word	0x20000424
 8018fcc:	00030d40 	.word	0x00030d40

08018fd0 <HAL_ADC_Start_DMA>:
{
 8018fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fd2:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018fd4:	6800      	ldr	r0, [r0, #0]
 8018fd6:	f7ff fbd3 	bl	8018780 <LL_ADC_REG_IsConversionOngoing>
{
 8018fda:	460d      	mov	r5, r1
 8018fdc:	4616      	mov	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018fde:	4607      	mov	r7, r0
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	d142      	bne.n	801906a <HAL_ADC_Start_DMA+0x9a>
    __HAL_LOCK(hadc);
 8018fe4:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8018fe8:	2b01      	cmp	r3, #1
 8018fea:	d03e      	beq.n	801906a <HAL_ADC_Start_DMA+0x9a>
 8018fec:	2301      	movs	r3, #1
 8018fee:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      tmp_hal_status = ADC_Enable(hadc);
 8018ff2:	4620      	mov	r0, r4
 8018ff4:	f7ff ff94 	bl	8018f20 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8018ff8:	2800      	cmp	r0, #0
 8018ffa:	d133      	bne.n	8019064 <HAL_ADC_Start_DMA+0x94>
        ADC_STATE_CLR_SET(hadc->State,
 8018ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8018ffe:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8019000:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00
 8019004:	f020 0001 	bic.w	r0, r0, #1
 8019008:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 801900c:	65a0      	str	r0, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801900e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8019010:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8019012:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019016:	bf1c      	itt	ne
 8019018:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
 801901a:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 801901e:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8019020:	4b13      	ldr	r3, [pc, #76]	@ (8019070 <HAL_ADC_Start_DMA+0xa0>)
 8019022:	62c3      	str	r3, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8019024:	4b13      	ldr	r3, [pc, #76]	@ (8019074 <HAL_ADC_Start_DMA+0xa4>)
 8019026:	6303      	str	r3, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8019028:	4b13      	ldr	r3, [pc, #76]	@ (8019078 <HAL_ADC_Start_DMA+0xa8>)
 801902a:	6343      	str	r3, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801902c:	231c      	movs	r3, #28
 801902e:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8019030:	2300      	movs	r3, #0
 8019032:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8019036:	684b      	ldr	r3, [r1, #4]
 8019038:	f043 0310 	orr.w	r3, r3, #16
 801903c:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801903e:	68cb      	ldr	r3, [r1, #12]
 8019040:	f043 0301 	orr.w	r3, r3, #1
 8019044:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8019046:	462a      	mov	r2, r5
 8019048:	4633      	mov	r3, r6
 801904a:	3140      	adds	r1, #64	@ 0x40
 801904c:	f000 fd16 	bl	8019a7c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019050:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8019052:	6893      	ldr	r3, [r2, #8]
 8019054:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019058:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801905c:	f043 0304 	orr.w	r3, r3, #4
 8019060:	6093      	str	r3, [r2, #8]
}
 8019062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 8019064:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8019068:	e7fb      	b.n	8019062 <HAL_ADC_Start_DMA+0x92>
    __HAL_LOCK(hadc);
 801906a:	2002      	movs	r0, #2
 801906c:	e7f9      	b.n	8019062 <HAL_ADC_Start_DMA+0x92>
 801906e:	bf00      	nop
 8019070:	08018b19 	.word	0x08018b19
 8019074:	08018927 	.word	0x08018927
 8019078:	08018b81 	.word	0x08018b81

0801907c <ADC_Disable>:
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801907c:	6802      	ldr	r2, [r0, #0]
{
 801907e:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8019080:	6893      	ldr	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019082:	6891      	ldr	r1, [r2, #8]
 8019084:	4604      	mov	r4, r0
 8019086:	07c8      	lsls	r0, r1, #31
 8019088:	d401      	bmi.n	801908e <ADC_Disable+0x12>
  return HAL_OK;
 801908a:	2000      	movs	r0, #0
}
 801908c:	bd38      	pop	{r3, r4, r5, pc}
      && (tmp_adc_is_disable_on_going == 0UL)
 801908e:	0799      	lsls	r1, r3, #30
 8019090:	d4fb      	bmi.n	801908a <ADC_Disable+0xe>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8019092:	6893      	ldr	r3, [r2, #8]
 8019094:	f003 030d 	and.w	r3, r3, #13
 8019098:	2b01      	cmp	r3, #1
 801909a:	d119      	bne.n	80190d0 <ADC_Disable+0x54>
  MODIFY_REG(ADCx->CR,
 801909c:	6893      	ldr	r3, [r2, #8]
 801909e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80190a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80190a6:	f043 0302 	orr.w	r3, r3, #2
 80190aa:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80190ac:	2303      	movs	r3, #3
 80190ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80190b0:	f7ff fb3c 	bl	801872c <HAL_GetTick>
 80190b4:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80190b6:	6823      	ldr	r3, [r4, #0]
 80190b8:	689b      	ldr	r3, [r3, #8]
 80190ba:	07db      	lsls	r3, r3, #31
 80190bc:	d5e5      	bpl.n	801908a <ADC_Disable+0xe>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80190be:	f7ff fb35 	bl	801872c <HAL_GetTick>
 80190c2:	1b40      	subs	r0, r0, r5
 80190c4:	2802      	cmp	r0, #2
 80190c6:	d9f6      	bls.n	80190b6 <ADC_Disable+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80190c8:	6823      	ldr	r3, [r4, #0]
 80190ca:	689b      	ldr	r3, [r3, #8]
 80190cc:	07da      	lsls	r2, r3, #31
 80190ce:	d5f2      	bpl.n	80190b6 <ADC_Disable+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80190d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80190d2:	f043 0310 	orr.w	r3, r3, #16
 80190d6:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80190d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80190da:	f043 0301 	orr.w	r3, r3, #1
 80190de:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80190e0:	2001      	movs	r0, #1
 80190e2:	e7d3      	b.n	801908c <ADC_Disable+0x10>

080190e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80190e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80190e6:	2300      	movs	r3, #0
 80190e8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80190ea:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80190ee:	2b01      	cmp	r3, #1
{
 80190f0:	4604      	mov	r4, r0
 80190f2:	460d      	mov	r5, r1
  __HAL_LOCK(hadc);
 80190f4:	d03c      	beq.n	8019170 <HAL_ADCEx_Calibration_Start+0x8c>
 80190f6:	2301      	movs	r3, #1
 80190f8:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80190fc:	f7ff ffbe 	bl	801907c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019100:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8019102:	bb90      	cbnz	r0, 801916a <HAL_ADCEx_Calibration_Start+0x86>
    ADC_STATE_CLR_SET(hadc->State,
 8019104:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8019108:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801910c:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 801910e:	f043 0302 	orr.w	r3, r3, #2
 8019112:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8019114:	6893      	ldr	r3, [r2, #8]
 8019116:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 801911a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801911e:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 8019122:	432b      	orrs	r3, r5
 8019124:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019128:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801912a:	6893      	ldr	r3, [r2, #8]
 801912c:	2b00      	cmp	r3, #0
 801912e:	da12      	bge.n	8019156 <HAL_ADCEx_Calibration_Start+0x72>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
 8019130:	9b01      	ldr	r3, [sp, #4]
 8019132:	3301      	adds	r3, #1
 8019134:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8019136:	9b01      	ldr	r3, [sp, #4]
 8019138:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 801913c:	d3f5      	bcc.n	801912a <HAL_ADCEx_Calibration_Start+0x46>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801913e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019140:	f023 0312 	bic.w	r3, r3, #18
 8019144:	f043 0310 	orr.w	r3, r3, #16
 8019148:	65a3      	str	r3, [r4, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801914a:	2300      	movs	r3, #0
 801914c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

        return HAL_ERROR;
 8019150:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8019152:	b003      	add	sp, #12
 8019154:	bd30      	pop	{r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8019156:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8019158:	f023 0303 	bic.w	r3, r3, #3
 801915c:	f043 0301 	orr.w	r3, r3, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019160:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8019162:	2300      	movs	r3, #0
 8019164:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
  return tmp_hal_status;
 8019168:	e7f3      	b.n	8019152 <HAL_ADCEx_Calibration_Start+0x6e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801916a:	f043 0310 	orr.w	r3, r3, #16
 801916e:	e7f7      	b.n	8019160 <HAL_ADCEx_Calibration_Start+0x7c>
  __HAL_LOCK(hadc);
 8019170:	2002      	movs	r0, #2
 8019172:	e7ee      	b.n	8019152 <HAL_ADCEx_Calibration_Start+0x6e>

08019174 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8019174:	4770      	bx	lr

08019176 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8019176:	4770      	bx	lr

08019178 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8019178:	4770      	bx	lr

0801917a <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 801917a:	4770      	bx	lr

0801917c <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 801917c:	4770      	bx	lr

0801917e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 801917e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8019180:	4604      	mov	r4, r0
 8019182:	2800      	cmp	r0, #0
 8019184:	d06e      	beq.n	8019264 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8019186:	f890 3020 	ldrb.w	r3, [r0, #32]
 801918a:	b90b      	cbnz	r3, 8019190 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 801918c:	f7fe fab0 	bl	80176f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019190:	6822      	ldr	r2, [r4, #0]
 8019192:	6813      	ldr	r3, [r2, #0]
 8019194:	f043 0301 	orr.w	r3, r3, #1
 8019198:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801919a:	f7ff fac7 	bl	801872c <HAL_GetTick>
 801919e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80191a0:	6823      	ldr	r3, [r4, #0]
 80191a2:	685a      	ldr	r2, [r3, #4]
 80191a4:	07d1      	lsls	r1, r2, #31
 80191a6:	d551      	bpl.n	801924c <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80191a8:	681a      	ldr	r2, [r3, #0]
 80191aa:	f022 0202 	bic.w	r2, r2, #2
 80191ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80191b0:	f7ff fabc 	bl	801872c <HAL_GetTick>
 80191b4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80191b6:	6823      	ldr	r3, [r4, #0]
 80191b8:	685a      	ldr	r2, [r3, #4]
 80191ba:	0792      	lsls	r2, r2, #30
 80191bc:	d454      	bmi.n	8019268 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80191be:	7e22      	ldrb	r2, [r4, #24]
 80191c0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80191c2:	681a      	ldr	r2, [r3, #0]
 80191c4:	bf0c      	ite	eq
 80191c6:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80191ca:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 80191ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80191d0:	7e62      	ldrb	r2, [r4, #25]
 80191d2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80191d4:	681a      	ldr	r2, [r3, #0]
 80191d6:	bf0c      	ite	eq
 80191d8:	f042 0240 	orreq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80191dc:	f022 0240 	bicne.w	r2, r2, #64	@ 0x40
 80191e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80191e2:	7ea2      	ldrb	r2, [r4, #26]
 80191e4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80191e6:	681a      	ldr	r2, [r3, #0]
 80191e8:	bf0c      	ite	eq
 80191ea:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80191ee:	f022 0220 	bicne.w	r2, r2, #32
 80191f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80191f4:	7ee2      	ldrb	r2, [r4, #27]
 80191f6:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80191f8:	681a      	ldr	r2, [r3, #0]
 80191fa:	bf0c      	ite	eq
 80191fc:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019200:	f042 0210 	orrne.w	r2, r2, #16
 8019204:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8019206:	7f22      	ldrb	r2, [r4, #28]
 8019208:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801920a:	681a      	ldr	r2, [r3, #0]
 801920c:	bf0c      	ite	eq
 801920e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8019212:	f022 0208 	bicne.w	r2, r2, #8
 8019216:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8019218:	7f62      	ldrb	r2, [r4, #29]
 801921a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 801921c:	681a      	ldr	r2, [r3, #0]
 801921e:	bf0c      	ite	eq
 8019220:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8019224:	f022 0204 	bicne.w	r2, r2, #4
 8019228:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801922a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801922e:	430a      	orrs	r2, r1
 8019230:	6921      	ldr	r1, [r4, #16]
 8019232:	430a      	orrs	r2, r1
 8019234:	6961      	ldr	r1, [r4, #20]
 8019236:	430a      	orrs	r2, r1
 8019238:	6861      	ldr	r1, [r4, #4]
 801923a:	3901      	subs	r1, #1
 801923c:	430a      	orrs	r2, r1
 801923e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8019240:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8019242:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8019244:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8019246:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 801924a:	e00c      	b.n	8019266 <HAL_CAN_Init+0xe8>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801924c:	f7ff fa6e 	bl	801872c <HAL_GetTick>
 8019250:	1b40      	subs	r0, r0, r5
 8019252:	280a      	cmp	r0, #10
 8019254:	d9a4      	bls.n	80191a0 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8019256:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801925c:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 801925e:	2305      	movs	r3, #5
 8019260:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8019264:	2001      	movs	r0, #1
}
 8019266:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019268:	f7ff fa60 	bl	801872c <HAL_GetTick>
 801926c:	1b40      	subs	r0, r0, r5
 801926e:	280a      	cmp	r0, #10
 8019270:	d9a1      	bls.n	80191b6 <HAL_CAN_Init+0x38>
 8019272:	e7f0      	b.n	8019256 <HAL_CAN_Init+0xd8>

08019274 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8019274:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8019276:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 801927a:	6803      	ldr	r3, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 801927c:	3a01      	subs	r2, #1
 801927e:	2a01      	cmp	r2, #1
 8019280:	d860      	bhi.n	8019344 <HAL_CAN_ConfigFilter+0xd0>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8019282:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8019286:	f042 0201 	orr.w	r2, r2, #1
 801928a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 801928e:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8019290:	f8d3 521c 	ldr.w	r5, [r3, #540]	@ 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8019294:	f002 041f 	and.w	r4, r2, #31
 8019298:	2001      	movs	r0, #1
 801929a:	40a0      	lsls	r0, r4
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 801929c:	ea25 0500 	bic.w	r5, r5, r0
 80192a0:	f8c3 521c 	str.w	r5, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80192a4:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80192a6:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80192a8:	bb85      	cbnz	r5, 801930c <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80192aa:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80192ae:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80192b0:	4025      	ands	r5, r4
 80192b2:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80192b6:	888d      	ldrh	r5, [r1, #4]
 80192b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80192bc:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80192c0:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80192c4:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80192c6:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80192c8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80192cc:	f8c2 5244 	str.w	r5, [r2, #580]	@ 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80192d0:	698a      	ldr	r2, [r1, #24]
 80192d2:	bb6a      	cbnz	r2, 8019330 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80192d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80192d8:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80192da:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80192de:	690a      	ldr	r2, [r1, #16]
 80192e0:	bb52      	cbnz	r2, 8019338 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80192e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80192e6:	4014      	ands	r4, r2
 80192e8:	f8c3 4214 	str.w	r4, [r3, #532]	@ 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80192ec:	6a0a      	ldr	r2, [r1, #32]
 80192ee:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80192f0:	bf02      	ittt	eq
 80192f2:	f8d3 221c 	ldreq.w	r2, [r3, #540]	@ 0x21c
 80192f6:	4302      	orreq	r2, r0
 80192f8:	f8c3 221c 	streq.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80192fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8019300:	f022 0201 	bic.w	r2, r2, #1
 8019304:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8019308:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 801930a:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 801930c:	2d01      	cmp	r5, #1
 801930e:	d1df      	bne.n	80192d0 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8019310:	f8d3 520c 	ldr.w	r5, [r3, #524]	@ 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019314:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8019316:	4305      	orrs	r5, r0
 8019318:	f8c3 520c 	str.w	r5, [r3, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801931c:	888d      	ldrh	r5, [r1, #4]
 801931e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019322:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019326:	f8c2 5240 	str.w	r5, [r2, #576]	@ 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801932a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 801932c:	898d      	ldrh	r5, [r1, #12]
 801932e:	e7cb      	b.n	80192c8 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8019330:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8019334:	4302      	orrs	r2, r0
 8019336:	e7d0      	b.n	80192da <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8019338:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 801933c:	4302      	orrs	r2, r0
 801933e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8019342:	e7d3      	b.n	80192ec <HAL_CAN_ConfigFilter+0x78>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019344:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019346:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801934a:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 801934c:	2001      	movs	r0, #1
 801934e:	e7dc      	b.n	801930a <HAL_CAN_ConfigFilter+0x96>

08019350 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8019350:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8019352:	f890 3020 	ldrb.w	r3, [r0, #32]
 8019356:	2b01      	cmp	r3, #1
{
 8019358:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 801935a:	d11f      	bne.n	801939c <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801935c:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 801935e:	2302      	movs	r3, #2
 8019360:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019364:	6813      	ldr	r3, [r2, #0]
 8019366:	f023 0301 	bic.w	r3, r3, #1
 801936a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 801936c:	f7ff f9de 	bl	801872c <HAL_GetTick>
 8019370:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8019372:	6823      	ldr	r3, [r4, #0]
 8019374:	6858      	ldr	r0, [r3, #4]
 8019376:	f010 0001 	ands.w	r0, r0, #1
 801937a:	d101      	bne.n	8019380 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801937c:	6260      	str	r0, [r4, #36]	@ 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 801937e:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019380:	f7ff f9d4 	bl	801872c <HAL_GetTick>
 8019384:	1b40      	subs	r0, r0, r5
 8019386:	280a      	cmp	r0, #10
 8019388:	d9f3      	bls.n	8019372 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801938a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801938c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019390:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8019392:	2305      	movs	r3, #5
 8019394:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8019398:	2001      	movs	r0, #1
 801939a:	e7f0      	b.n	801937e <HAL_CAN_Start+0x2e>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 801939c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801939e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80193a2:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 80193a4:	e7f8      	b.n	8019398 <HAL_CAN_Start+0x48>

080193a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80193a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80193a8:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80193ac:	6804      	ldr	r4, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80193ae:	3d01      	subs	r5, #1
 80193b0:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80193b2:	68a6      	ldr	r6, [r4, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80193b4:	d83e      	bhi.n	8019434 <HAL_CAN_AddTxMessage+0x8e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80193b6:	f016 5fe0 	tst.w	r6, #469762048	@ 0x1c000000
 80193ba:	d035      	beq.n	8019428 <HAL_CAN_AddTxMessage+0x82>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80193bc:	f3c6 6001 	ubfx	r0, r6, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80193c0:	2501      	movs	r5, #1
 80193c2:	4085      	lsls	r5, r0
 80193c4:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80193c6:	e9d1 5702 	ldrd	r5, r7, [r1, #8]
 80193ca:	f100 0318 	add.w	r3, r0, #24
 80193ce:	bb25      	cbnz	r5, 801941a <HAL_CAN_AddTxMessage+0x74>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80193d0:	680d      	ldr	r5, [r1, #0]
 80193d2:	011b      	lsls	r3, r3, #4
 80193d4:	ea47 5745 	orr.w	r7, r7, r5, lsl #21
 80193d8:	50e7      	str	r7, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80193da:	eb04 1300 	add.w	r3, r4, r0, lsl #4
 80193de:	690e      	ldr	r6, [r1, #16]
 80193e0:	f8c3 6184 	str.w	r6, [r3, #388]	@ 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80193e4:	7d09      	ldrb	r1, [r1, #20]
 80193e6:	2901      	cmp	r1, #1
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80193e8:	bf08      	it	eq
 80193ea:	f8d3 1184 	ldreq.w	r1, [r3, #388]	@ 0x184
 80193ee:	ea4f 1500 	mov.w	r5, r0, lsl #4
 80193f2:	bf04      	itt	eq
 80193f4:	f441 7180 	orreq.w	r1, r1, #256	@ 0x100
 80193f8:	f8c3 1184 	streq.w	r1, [r3, #388]	@ 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80193fc:	442c      	add	r4, r5
 80193fe:	6851      	ldr	r1, [r2, #4]
 8019400:	f8c4 118c 	str.w	r1, [r4, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8019404:	6812      	ldr	r2, [r2, #0]
 8019406:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 801940a:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 801940e:	f042 0201 	orr.w	r2, r2, #1
 8019412:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

      /* Return function status */
      return HAL_OK;
 8019416:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8019418:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801941a:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 801941c:	433d      	orrs	r5, r7
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801941e:	011b      	lsls	r3, r3, #4
                                                           pHeader->IDE |
 8019420:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8019424:	50e5      	str	r5, [r4, r3]
 8019426:	e7d8      	b.n	80193da <HAL_CAN_AddTxMessage+0x34>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8019428:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801942a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801942e:	6243      	str	r3, [r0, #36]	@ 0x24
      return HAL_ERROR;
 8019430:	2001      	movs	r0, #1
 8019432:	e7f1      	b.n	8019418 <HAL_CAN_AddTxMessage+0x72>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019434:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801943a:	e7f8      	b.n	801942e <HAL_CAN_AddTxMessage+0x88>

0801943c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 801943c:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8019440:	3b01      	subs	r3, #1
 8019442:	2b01      	cmp	r3, #1
 8019444:	d80c      	bhi.n	8019460 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8019446:	6803      	ldr	r3, [r0, #0]
 8019448:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 801944a:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 801944c:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 801944e:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8019450:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 8019454:	bf48      	it	mi
 8019456:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8019458:	00db      	lsls	r3, r3, #3
 801945a:	d502      	bpl.n	8019462 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 801945c:	3001      	adds	r0, #1
 801945e:	4770      	bx	lr
  uint32_t freelevel = 0U;
 8019460:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8019462:	4770      	bx	lr

08019464 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8019464:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8019466:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 801946a:	3c01      	subs	r4, #1
 801946c:	2c01      	cmp	r4, #1
 801946e:	d871      	bhi.n	8019554 <HAL_CAN_GetRxMessage+0xf0>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8019470:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8019472:	b941      	cbnz	r1, 8019486 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8019474:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8019476:	07a4      	lsls	r4, r4, #30
 8019478:	d107      	bne.n	801948a <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801947a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801947c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8019480:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8019482:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8019484:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8019486:	6934      	ldr	r4, [r6, #16]
 8019488:	e7f5      	b.n	8019476 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 801948a:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 801948e:	010c      	lsls	r4, r1, #4
 8019490:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8019494:	f007 0704 	and.w	r7, r7, #4
 8019498:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801949a:	2f00      	cmp	r7, #0
 801949c:	d150      	bne.n	8019540 <HAL_CAN_GetRxMessage+0xdc>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 801949e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 80194a2:	0d7f      	lsrs	r7, r7, #21
 80194a4:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80194a6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 80194aa:	f007 0702 	and.w	r7, r7, #2
 80194ae:	60d7      	str	r7, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80194b0:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
 80194b4:	073f      	lsls	r7, r7, #28
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80194b6:	bf56      	itet	pl
 80194b8:	f8d5 71b4 	ldrpl.w	r7, [r5, #436]	@ 0x1b4
      pHeader->DLC = 8U;
 80194bc:	2708      	movmi	r7, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80194be:	f007 070f 	andpl.w	r7, r7, #15
 80194c2:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80194c4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	@ 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80194c8:	f8d5 51b4 	ldr.w	r5, [r5, #436]	@ 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80194cc:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80194ce:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80194d2:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80194d4:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80194d6:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80194d8:	f8d6 21b8 	ldr.w	r2, [r6, #440]	@ 0x1b8
 80194dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80194de:	6802      	ldr	r2, [r0, #0]
 80194e0:	4422      	add	r2, r4
 80194e2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80194e6:	0a12      	lsrs	r2, r2, #8
 80194e8:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80194ea:	6802      	ldr	r2, [r0, #0]
 80194ec:	4422      	add	r2, r4
 80194ee:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80194f2:	0c12      	lsrs	r2, r2, #16
 80194f4:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80194f6:	6802      	ldr	r2, [r0, #0]
 80194f8:	4422      	add	r2, r4
 80194fa:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80194fe:	0e12      	lsrs	r2, r2, #24
 8019500:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8019502:	6802      	ldr	r2, [r0, #0]
 8019504:	4422      	add	r2, r4
 8019506:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 801950a:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801950c:	6802      	ldr	r2, [r0, #0]
 801950e:	4422      	add	r2, r4
 8019510:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8019514:	0a12      	lsrs	r2, r2, #8
 8019516:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8019518:	6802      	ldr	r2, [r0, #0]
 801951a:	4422      	add	r2, r4
 801951c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8019520:	0c12      	lsrs	r2, r2, #16
 8019522:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8019524:	6802      	ldr	r2, [r0, #0]
 8019526:	4422      	add	r2, r4
 8019528:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 801952c:	0e12      	lsrs	r2, r2, #24
 801952e:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8019530:	6803      	ldr	r3, [r0, #0]
 8019532:	b951      	cbnz	r1, 801954a <HAL_CAN_GetRxMessage+0xe6>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8019534:	68da      	ldr	r2, [r3, #12]
 8019536:	f042 0220 	orr.w	r2, r2, #32
 801953a:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 801953c:	2000      	movs	r0, #0
 801953e:	e7a1      	b.n	8019484 <HAL_CAN_GetRxMessage+0x20>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8019540:	f8d5 71b0 	ldr.w	r7, [r5, #432]	@ 0x1b0
 8019544:	08ff      	lsrs	r7, r7, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8019546:	6057      	str	r7, [r2, #4]
 8019548:	e7ad      	b.n	80194a6 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801954a:	691a      	ldr	r2, [r3, #16]
 801954c:	f042 0220 	orr.w	r2, r2, #32
 8019550:	611a      	str	r2, [r3, #16]
 8019552:	e7f3      	b.n	801953c <HAL_CAN_GetRxMessage+0xd8>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019554:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019556:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801955a:	e791      	b.n	8019480 <HAL_CAN_GetRxMessage+0x1c>

0801955c <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 801955c:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8019560:	3b01      	subs	r3, #1
 8019562:	2b01      	cmp	r3, #1
 8019564:	d807      	bhi.n	8019576 <HAL_CAN_GetRxFifoFillLevel+0x1a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8019566:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0)
 8019568:	b919      	cbnz	r1, 8019572 <HAL_CAN_GetRxFifoFillLevel+0x16>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 801956a:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 801956c:	f000 0003 	and.w	r0, r0, #3
 8019570:	4770      	bx	lr
 8019572:	6918      	ldr	r0, [r3, #16]
 8019574:	e7fa      	b.n	801956c <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8019576:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8019578:	4770      	bx	lr

0801957a <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 801957a:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801957e:	3b01      	subs	r3, #1
 8019580:	2b01      	cmp	r3, #1
 8019582:	d805      	bhi.n	8019590 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8019584:	6802      	ldr	r2, [r0, #0]
 8019586:	6953      	ldr	r3, [r2, #20]
 8019588:	4319      	orrs	r1, r3
 801958a:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 801958c:	2000      	movs	r0, #0
 801958e:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019590:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019592:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8019596:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 8019598:	2001      	movs	r0, #1
  }
}
 801959a:	4770      	bx	lr

0801959c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  Transmission Mailbox 0 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
 801959c:	4770      	bx	lr

0801959e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  Transmission Mailbox 1 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
 801959e:	4770      	bx	lr

080195a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  Transmission Mailbox 2 complete callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
 80195a0:	4770      	bx	lr

080195a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @brief  Transmission Mailbox 0 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
 80195a2:	4770      	bx	lr

080195a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @brief  Transmission Mailbox 1 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
 80195a4:	4770      	bx	lr

080195a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @brief  Transmission Mailbox 2 Cancellation callback.
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
 80195a6:	4770      	bx	lr

080195a8 <HAL_CAN_RxFifo0FullCallback>:
  * @brief  Rx FIFO 0 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 80195a8:	4770      	bx	lr

080195aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @brief  Rx FIFO 1 message pending callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
 80195aa:	4770      	bx	lr

080195ac <HAL_CAN_RxFifo1FullCallback>:
  * @brief  Rx FIFO 1 full callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
 80195ac:	4770      	bx	lr

080195ae <HAL_CAN_SleepCallback>:
  * @brief  Sleep callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
 80195ae:	4770      	bx	lr

080195b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @brief  WakeUp from Rx message callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
 80195b0:	4770      	bx	lr

080195b2 <HAL_CAN_ErrorCallback>:
  * @brief  Error CAN callback.
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
 80195b2:	4770      	bx	lr

080195b4 <HAL_CAN_IRQHandler>:
{
 80195b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80195b8:	6803      	ldr	r3, [r0, #0]
 80195ba:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80195bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80195c0:	f8d3 8008 	ldr.w	r8, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80195c4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80195c8:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80195cc:	699f      	ldr	r7, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80195ce:	f016 0401 	ands.w	r4, r6, #1
{
 80195d2:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80195d4:	d027      	beq.n	8019626 <HAL_CAN_IRQHandler+0x72>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80195d6:	f018 0f01 	tst.w	r8, #1
 80195da:	d007      	beq.n	80195ec <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80195dc:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80195de:	f018 0f02 	tst.w	r8, #2
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80195e2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80195e4:	f000 80a5 	beq.w	8019732 <HAL_CAN_IRQHandler+0x17e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80195e8:	f7ff ffd8 	bl	801959c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80195ec:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80195ee:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80195f2:	d00a      	beq.n	801960a <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80195f4:	682b      	ldr	r3, [r5, #0]
 80195f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80195fa:	f418 7f00 	tst.w	r8, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80195fe:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8019600:	f000 80a6 	beq.w	8019750 <HAL_CAN_IRQHandler+0x19c>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8019604:	4628      	mov	r0, r5
 8019606:	f7ff ffca 	bl	801959e <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801960a:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
 801960e:	d00a      	beq.n	8019626 <HAL_CAN_IRQHandler+0x72>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8019610:	682b      	ldr	r3, [r5, #0]
 8019612:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8019616:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801961a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 801961c:	f000 80a8 	beq.w	8019770 <HAL_CAN_IRQHandler+0x1bc>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8019620:	4628      	mov	r0, r5
 8019622:	f7ff ffbd 	bl	80195a0 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8019626:	0731      	lsls	r1, r6, #28
 8019628:	d507      	bpl.n	801963a <HAL_CAN_IRQHandler+0x86>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801962a:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801962e:	bf1f      	itttt	ne
 8019630:	682b      	ldrne	r3, [r5, #0]
 8019632:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8019634:	f444 7400 	orrne.w	r4, r4, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8019638:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801963a:	0772      	lsls	r2, r6, #29
 801963c:	d508      	bpl.n	8019650 <HAL_CAN_IRQHandler+0x9c>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 801963e:	f01b 0f08 	tst.w	fp, #8
 8019642:	d005      	beq.n	8019650 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8019644:	682b      	ldr	r3, [r5, #0]
 8019646:	2208      	movs	r2, #8
 8019648:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 801964a:	4628      	mov	r0, r5
 801964c:	f7ff ffac 	bl	80195a8 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8019650:	07b3      	lsls	r3, r6, #30
 8019652:	d506      	bpl.n	8019662 <HAL_CAN_IRQHandler+0xae>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8019654:	682b      	ldr	r3, [r5, #0]
 8019656:	68db      	ldr	r3, [r3, #12]
 8019658:	0798      	lsls	r0, r3, #30
 801965a:	d002      	beq.n	8019662 <HAL_CAN_IRQHandler+0xae>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 801965c:	4628      	mov	r0, r5
 801965e:	f005 fdb5 	bl	801f1cc <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8019662:	0671      	lsls	r1, r6, #25
 8019664:	d507      	bpl.n	8019676 <HAL_CAN_IRQHandler+0xc2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8019666:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 801966a:	bf1f      	itttt	ne
 801966c:	682b      	ldrne	r3, [r5, #0]
 801966e:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8019670:	f444 6480 	orrne.w	r4, r4, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8019674:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8019676:	06b2      	lsls	r2, r6, #26
 8019678:	d508      	bpl.n	801968c <HAL_CAN_IRQHandler+0xd8>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801967a:	f01a 0f08 	tst.w	sl, #8
 801967e:	d005      	beq.n	801968c <HAL_CAN_IRQHandler+0xd8>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8019680:	682b      	ldr	r3, [r5, #0]
 8019682:	2208      	movs	r2, #8
 8019684:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8019686:	4628      	mov	r0, r5
 8019688:	f7ff ff90 	bl	80195ac <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801968c:	06f3      	lsls	r3, r6, #27
 801968e:	d506      	bpl.n	801969e <HAL_CAN_IRQHandler+0xea>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8019690:	682b      	ldr	r3, [r5, #0]
 8019692:	691b      	ldr	r3, [r3, #16]
 8019694:	0798      	lsls	r0, r3, #30
 8019696:	d002      	beq.n	801969e <HAL_CAN_IRQHandler+0xea>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8019698:	4628      	mov	r0, r5
 801969a:	f7ff ff86 	bl	80195aa <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801969e:	03b1      	lsls	r1, r6, #14
 80196a0:	d508      	bpl.n	80196b4 <HAL_CAN_IRQHandler+0x100>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80196a2:	f019 0f10 	tst.w	r9, #16
 80196a6:	d005      	beq.n	80196b4 <HAL_CAN_IRQHandler+0x100>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80196a8:	682b      	ldr	r3, [r5, #0]
 80196aa:	2210      	movs	r2, #16
 80196ac:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80196ae:	4628      	mov	r0, r5
 80196b0:	f7ff ff7d 	bl	80195ae <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80196b4:	03f2      	lsls	r2, r6, #15
 80196b6:	d508      	bpl.n	80196ca <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80196b8:	f019 0f08 	tst.w	r9, #8
 80196bc:	d005      	beq.n	80196ca <HAL_CAN_IRQHandler+0x116>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80196be:	682b      	ldr	r3, [r5, #0]
 80196c0:	2208      	movs	r2, #8
 80196c2:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80196c4:	4628      	mov	r0, r5
 80196c6:	f7ff ff73 	bl	80195b0 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80196ca:	0433      	lsls	r3, r6, #16
 80196cc:	d528      	bpl.n	8019720 <HAL_CAN_IRQHandler+0x16c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80196ce:	f019 0f04 	tst.w	r9, #4
 80196d2:	682a      	ldr	r2, [r5, #0]
 80196d4:	d022      	beq.n	801971c <HAL_CAN_IRQHandler+0x168>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80196d6:	05f0      	lsls	r0, r6, #23
 80196d8:	bf44      	itt	mi
 80196da:	f007 0301 	andmi.w	r3, r7, #1
 80196de:	431c      	orrmi	r4, r3
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80196e0:	05b1      	lsls	r1, r6, #22
 80196e2:	d503      	bpl.n	80196ec <HAL_CAN_IRQHandler+0x138>
 80196e4:	07bb      	lsls	r3, r7, #30
        errorcode |= HAL_CAN_ERROR_EPV;
 80196e6:	bf48      	it	mi
 80196e8:	f044 0402 	orrmi.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80196ec:	0570      	lsls	r0, r6, #21
 80196ee:	d503      	bpl.n	80196f8 <HAL_CAN_IRQHandler+0x144>
 80196f0:	0779      	lsls	r1, r7, #29
        errorcode |= HAL_CAN_ERROR_BOF;
 80196f2:	bf48      	it	mi
 80196f4:	f044 0404 	orrmi.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80196f8:	0533      	lsls	r3, r6, #20
 80196fa:	d50f      	bpl.n	801971c <HAL_CAN_IRQHandler+0x168>
 80196fc:	f017 0370 	ands.w	r3, r7, #112	@ 0x70
 8019700:	d00c      	beq.n	801971c <HAL_CAN_IRQHandler+0x168>
        switch (esrflags & CAN_ESR_LEC)
 8019702:	2b40      	cmp	r3, #64	@ 0x40
 8019704:	d054      	beq.n	80197b0 <HAL_CAN_IRQHandler+0x1fc>
 8019706:	d843      	bhi.n	8019790 <HAL_CAN_IRQHandler+0x1dc>
 8019708:	2b20      	cmp	r3, #32
 801970a:	d04b      	beq.n	80197a4 <HAL_CAN_IRQHandler+0x1f0>
 801970c:	2b30      	cmp	r3, #48	@ 0x30
 801970e:	d04c      	beq.n	80197aa <HAL_CAN_IRQHandler+0x1f6>
 8019710:	2b10      	cmp	r3, #16
 8019712:	d044      	beq.n	801979e <HAL_CAN_IRQHandler+0x1ea>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8019714:	6993      	ldr	r3, [r2, #24]
 8019716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801971a:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801971c:	2304      	movs	r3, #4
 801971e:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8019720:	b12c      	cbz	r4, 801972e <HAL_CAN_IRQHandler+0x17a>
    hcan->ErrorCode |= errorcode;
 8019722:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8019724:	4323      	orrs	r3, r4
 8019726:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8019728:	4628      	mov	r0, r5
 801972a:	f7ff ff42 	bl	80195b2 <HAL_CAN_ErrorCallback>
}
 801972e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8019732:	f018 0f04 	tst.w	r8, #4
 8019736:	d105      	bne.n	8019744 <HAL_CAN_IRQHandler+0x190>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8019738:	f018 0f08 	tst.w	r8, #8
 801973c:	d105      	bne.n	801974a <HAL_CAN_IRQHandler+0x196>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 801973e:	f7ff ff30 	bl	80195a2 <HAL_CAN_TxMailbox0AbortCallback>
 8019742:	e753      	b.n	80195ec <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8019744:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8019748:	e751      	b.n	80195ee <HAL_CAN_IRQHandler+0x3a>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 801974a:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 801974e:	e74e      	b.n	80195ee <HAL_CAN_IRQHandler+0x3a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8019750:	f418 6f80 	tst.w	r8, #1024	@ 0x400
 8019754:	d002      	beq.n	801975c <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8019756:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000
 801975a:	e756      	b.n	801960a <HAL_CAN_IRQHandler+0x56>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 801975c:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 8019760:	d002      	beq.n	8019768 <HAL_CAN_IRQHandler+0x1b4>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8019762:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8019766:	e750      	b.n	801960a <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8019768:	4628      	mov	r0, r5
 801976a:	f7ff ff1b 	bl	80195a4 <HAL_CAN_TxMailbox1AbortCallback>
 801976e:	e74c      	b.n	801960a <HAL_CAN_IRQHandler+0x56>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8019770:	f418 2f80 	tst.w	r8, #262144	@ 0x40000
 8019774:	d002      	beq.n	801977c <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8019776:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 801977a:	e754      	b.n	8019626 <HAL_CAN_IRQHandler+0x72>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801977c:	f418 2f00 	tst.w	r8, #524288	@ 0x80000
 8019780:	d002      	beq.n	8019788 <HAL_CAN_IRQHandler+0x1d4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8019782:	f444 3480 	orr.w	r4, r4, #65536	@ 0x10000
 8019786:	e74e      	b.n	8019626 <HAL_CAN_IRQHandler+0x72>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8019788:	4628      	mov	r0, r5
 801978a:	f7ff ff0c 	bl	80195a6 <HAL_CAN_TxMailbox2AbortCallback>
 801978e:	e74a      	b.n	8019626 <HAL_CAN_IRQHandler+0x72>
        switch (esrflags & CAN_ESR_LEC)
 8019790:	2b50      	cmp	r3, #80	@ 0x50
 8019792:	d010      	beq.n	80197b6 <HAL_CAN_IRQHandler+0x202>
 8019794:	2b60      	cmp	r3, #96	@ 0x60
 8019796:	d1bd      	bne.n	8019714 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_CRC;
 8019798:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
            break;
 801979c:	e7ba      	b.n	8019714 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_STF;
 801979e:	f044 0408 	orr.w	r4, r4, #8
            break;
 80197a2:	e7b7      	b.n	8019714 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_FOR;
 80197a4:	f044 0410 	orr.w	r4, r4, #16
            break;
 80197a8:	e7b4      	b.n	8019714 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_ACK;
 80197aa:	f044 0420 	orr.w	r4, r4, #32
            break;
 80197ae:	e7b1      	b.n	8019714 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_BR;
 80197b0:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
            break;
 80197b4:	e7ae      	b.n	8019714 <HAL_CAN_IRQHandler+0x160>
            errorcode |= HAL_CAN_ERROR_BD;
 80197b6:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
            break;
 80197ba:	e7ab      	b.n	8019714 <HAL_CAN_IRQHandler+0x160>

080197bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80197bc:	4907      	ldr	r1, [pc, #28]	@ (80197dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80197be:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80197c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80197c4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80197c6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80197c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80197cc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80197ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80197d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80197d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80197d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80197da:	4770      	bx	lr
 80197dc:	e000ed00 	.word	0xe000ed00

080197e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80197e0:	4b16      	ldr	r3, [pc, #88]	@ (801983c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80197e2:	b530      	push	{r4, r5, lr}
 80197e4:	68dc      	ldr	r4, [r3, #12]
 80197e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80197ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80197ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80197f0:	2b04      	cmp	r3, #4
 80197f2:	bf28      	it	cs
 80197f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80197f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80197f8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80197fc:	bf8c      	ite	hi
 80197fe:	3c03      	subhi	r4, #3
 8019800:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019802:	fa05 f303 	lsl.w	r3, r5, r3
 8019806:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801980a:	40a5      	lsls	r5, r4
 801980c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019810:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8019812:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019814:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019818:	bfac      	ite	ge
 801981a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801981e:	4a08      	ldrlt	r2, [pc, #32]	@ (8019840 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019820:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019824:	bfb8      	it	lt
 8019826:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801982a:	b2db      	uxtb	r3, r3
 801982c:	bfaa      	itet	ge
 801982e:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019832:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019834:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8019838:	bd30      	pop	{r4, r5, pc}
 801983a:	bf00      	nop
 801983c:	e000ed00 	.word	0xe000ed00
 8019840:	e000ed14 	.word	0xe000ed14

08019844 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8019844:	2800      	cmp	r0, #0
 8019846:	db07      	blt.n	8019858 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019848:	4a04      	ldr	r2, [pc, #16]	@ (801985c <HAL_NVIC_EnableIRQ+0x18>)
 801984a:	0941      	lsrs	r1, r0, #5
 801984c:	2301      	movs	r3, #1
 801984e:	f000 001f 	and.w	r0, r0, #31
 8019852:	4083      	lsls	r3, r0
 8019854:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8019858:	4770      	bx	lr
 801985a:	bf00      	nop
 801985c:	e000e100 	.word	0xe000e100

08019860 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8019860:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8019862:	4604      	mov	r4, r0
 8019864:	b908      	cbnz	r0, 801986a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8019866:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8019868:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 801986a:	7f43      	ldrb	r3, [r0, #29]
 801986c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8019870:	b913      	cbnz	r3, 8019878 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8019872:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8019874:	f7fd ff86 	bl	8017784 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8019878:	2302      	movs	r3, #2
 801987a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801987c:	7923      	ldrb	r3, [r4, #4]
 801987e:	b9e3      	cbnz	r3, 80198ba <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8019880:	6823      	ldr	r3, [r4, #0]
 8019882:	4a13      	ldr	r2, [pc, #76]	@ (80198d0 <HAL_CRC_Init+0x70>)
 8019884:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8019886:	689a      	ldr	r2, [r3, #8]
 8019888:	f022 0218 	bic.w	r2, r2, #24
 801988c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801988e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8019890:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8019892:	b9d2      	cbnz	r2, 80198ca <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8019894:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8019898:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 801989a:	689a      	ldr	r2, [r3, #8]
 801989c:	6961      	ldr	r1, [r4, #20]
 801989e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80198a2:	430a      	orrs	r2, r1
 80198a4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80198a6:	689a      	ldr	r2, [r3, #8]
 80198a8:	69a1      	ldr	r1, [r4, #24]
 80198aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80198ae:	430a      	orrs	r2, r1
 80198b0:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80198b2:	2301      	movs	r3, #1
 80198b4:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80198b6:	2000      	movs	r0, #0
 80198b8:	e7d6      	b.n	8019868 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80198ba:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80198be:	4620      	mov	r0, r4
 80198c0:	f000 f808 	bl	80198d4 <HAL_CRCEx_Polynomial_Set>
 80198c4:	2800      	cmp	r0, #0
 80198c6:	d0e2      	beq.n	801988e <HAL_CRC_Init+0x2e>
 80198c8:	e7cd      	b.n	8019866 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80198ca:	6922      	ldr	r2, [r4, #16]
 80198cc:	e7e4      	b.n	8019898 <HAL_CRC_Init+0x38>
 80198ce:	bf00      	nop
 80198d0:	04c11db7 	.word	0x04c11db7

080198d4 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80198d4:	07cb      	lsls	r3, r1, #31
{
 80198d6:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80198d8:	d50d      	bpl.n	80198f6 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80198da:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80198dc:	3b01      	subs	r3, #1
 80198de:	d31d      	bcc.n	801991c <HAL_CRCEx_Polynomial_Set+0x48>
 80198e0:	fa21 f403 	lsr.w	r4, r1, r3
 80198e4:	07e4      	lsls	r4, r4, #31
 80198e6:	d5f9      	bpl.n	80198dc <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80198e8:	2a10      	cmp	r2, #16
 80198ea:	d013      	beq.n	8019914 <HAL_CRCEx_Polynomial_Set+0x40>
 80198ec:	2a10      	cmp	r2, #16
 80198ee:	d804      	bhi.n	80198fa <HAL_CRCEx_Polynomial_Set+0x26>
 80198f0:	b13a      	cbz	r2, 8019902 <HAL_CRCEx_Polynomial_Set+0x2e>
 80198f2:	2a08      	cmp	r2, #8
 80198f4:	d010      	beq.n	8019918 <HAL_CRCEx_Polynomial_Set+0x44>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
        {
          status =   HAL_ERROR;
 80198f6:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80198f8:	e00b      	b.n	8019912 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80198fa:	2a18      	cmp	r2, #24
 80198fc:	d1fb      	bne.n	80198f6 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80198fe:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8019900:	d8f9      	bhi.n	80198f6 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8019902:	6800      	ldr	r0, [r0, #0]
 8019904:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8019906:	6883      	ldr	r3, [r0, #8]
 8019908:	f023 0318 	bic.w	r3, r3, #24
 801990c:	4313      	orrs	r3, r2
 801990e:	6083      	str	r3, [r0, #8]
 8019910:	2000      	movs	r0, #0
}
 8019912:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8019914:	2b07      	cmp	r3, #7
 8019916:	e7f3      	b.n	8019900 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8019918:	2b0f      	cmp	r3, #15
 801991a:	e7f1      	b.n	8019900 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 801991c:	2a10      	cmp	r2, #16
 801991e:	d1e5      	bne.n	80198ec <HAL_CRCEx_Polynomial_Set+0x18>
 8019920:	e7e9      	b.n	80198f6 <HAL_CRCEx_Polynomial_Set+0x22>

08019922 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019922:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019924:	e9d0 4513 	ldrd	r4, r5, [r0, #76]	@ 0x4c
 8019928:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801992a:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 801992c:	b114      	cbz	r4, 8019934 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801992e:	e9d0 4516 	ldrd	r4, r5, [r0, #88]	@ 0x58
 8019932:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8019934:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
 8019938:	f004 061c 	and.w	r6, r4, #28
 801993c:	2401      	movs	r4, #1
 801993e:	40b4      	lsls	r4, r6
 8019940:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8019942:	6804      	ldr	r4, [r0, #0]
 8019944:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019946:	6883      	ldr	r3, [r0, #8]
 8019948:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801994a:	bf0b      	itete	eq
 801994c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801994e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8019950:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8019952:	60e2      	strne	r2, [r4, #12]
  }
}
 8019954:	bd70      	pop	{r4, r5, r6, pc}
	...

08019958 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8019958:	4a0e      	ldr	r2, [pc, #56]	@ (8019994 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 801995a:	6803      	ldr	r3, [r0, #0]
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 801995c:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801995e:	4293      	cmp	r3, r2
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8019960:	bf88      	it	hi
 8019962:	4a0d      	ldrhi	r2, [pc, #52]	@ (8019998 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8019964:	f021 0103 	bic.w	r1, r1, #3
 8019968:	bf9a      	itte	ls
 801996a:	f101 4280 	addls.w	r2, r1, #1073741824	@ 0x40000000
 801996e:	f502 3202 	addls.w	r2, r2, #133120	@ 0x20800
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8019972:	1852      	addhi	r2, r2, r1
 8019974:	6482      	str	r2, [r0, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8019976:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8019978:	4a08      	ldr	r2, [pc, #32]	@ (801999c <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 801997a:	64c2      	str	r2, [r0, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801997c:	3b08      	subs	r3, #8
 801997e:	2214      	movs	r2, #20
 8019980:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8019984:	2201      	movs	r2, #1
 8019986:	f003 031f 	and.w	r3, r3, #31
 801998a:	fa02 f303 	lsl.w	r3, r2, r3
 801998e:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8019990:	4770      	bx	lr
 8019992:	bf00      	nop
 8019994:	40020407 	.word	0x40020407
 8019998:	4002081c 	.word	0x4002081c
 801999c:	40020880 	.word	0x40020880

080199a0 <HAL_DMA_Init>:
{
 80199a0:	b538      	push	{r3, r4, r5, lr}
  if (hdma == NULL)
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d057      	beq.n	8019a56 <HAL_DMA_Init+0xb6>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80199a6:	6802      	ldr	r2, [r0, #0]
 80199a8:	4b2c      	ldr	r3, [pc, #176]	@ (8019a5c <HAL_DMA_Init+0xbc>)
 80199aa:	429a      	cmp	r2, r3
 80199ac:	f04f 0114 	mov.w	r1, #20
 80199b0:	d845      	bhi.n	8019a3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80199b2:	4b2b      	ldr	r3, [pc, #172]	@ (8019a60 <HAL_DMA_Init+0xc0>)
 80199b4:	4413      	add	r3, r2
 80199b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80199ba:	492a      	ldr	r1, [pc, #168]	@ (8019a64 <HAL_DMA_Init+0xc4>)
 80199bc:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80199be:	e9c0 1310 	strd	r1, r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80199c2:	2302      	movs	r3, #2
 80199c4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 80199c8:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80199cc:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80199ce:	6811      	ldr	r1, [r2, #0]
  tmp |=  hdma->Init.Direction        |
 80199d0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80199d2:	432b      	orrs	r3, r5
 80199d4:	6945      	ldr	r5, [r0, #20]
 80199d6:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80199d8:	6985      	ldr	r5, [r0, #24]
 80199da:	432b      	orrs	r3, r5
 80199dc:	69c5      	ldr	r5, [r0, #28]
 80199de:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80199e0:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80199e2:	f36f 110e 	bfc	r1, #4, #11
          hdma->Init.Mode                | hdma->Init.Priority;
 80199e6:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80199e8:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 80199ea:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80199ec:	f7ff ffb4 	bl	8019958 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80199f0:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80199f4:	bf04      	itt	eq
 80199f6:	2300      	moveq	r3, #0
 80199f8:	6043      	streq	r3, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80199fa:	6843      	ldr	r3, [r0, #4]
 80199fc:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80199fe:	b2da      	uxtb	r2, r3
 8019a00:	600a      	str	r2, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019a02:	e9d0 1413 	ldrd	r1, r4, [r0, #76]	@ 0x4c
  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8019a06:	3b01      	subs	r3, #1
 8019a08:	2b03      	cmp	r3, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019a0a:	604c      	str	r4, [r1, #4]
  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8019a0c:	d81e      	bhi.n	8019a4c <HAL_DMA_Init+0xac>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019a0e:	4b16      	ldr	r3, [pc, #88]	@ (8019a68 <HAL_DMA_Init+0xc8>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8019a10:	4916      	ldr	r1, [pc, #88]	@ (8019a6c <HAL_DMA_Init+0xcc>)
 8019a12:	6581      	str	r1, [r0, #88]	@ 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019a14:	4413      	add	r3, r2
 8019a16:	009b      	lsls	r3, r3, #2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8019a18:	2101      	movs	r1, #1
 8019a1a:	3a01      	subs	r2, #1
 8019a1c:	fa01 f202 	lsl.w	r2, r1, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019a20:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019a22:	6543      	str	r3, [r0, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8019a24:	65c2      	str	r2, [r0, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019a26:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019a28:	4b11      	ldr	r3, [pc, #68]	@ (8019a70 <HAL_DMA_Init+0xd0>)
 8019a2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019a2c:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8019a2e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019a30:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8019a32:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8019a36:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
  return HAL_OK;
 8019a3a:	4618      	mov	r0, r3
}
 8019a3c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8019a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8019a74 <HAL_DMA_Init+0xd4>)
 8019a40:	4413      	add	r3, r2
 8019a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8019a46:	490c      	ldr	r1, [pc, #48]	@ (8019a78 <HAL_DMA_Init+0xd8>)
 8019a48:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8019a4a:	e7b8      	b.n	80199be <HAL_DMA_Init+0x1e>
    hdma->DMAmuxRequestGen = 0U;
 8019a4c:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8019a4e:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8019a52:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8019a54:	e7ea      	b.n	8019a2c <HAL_DMA_Init+0x8c>
    return HAL_ERROR;
 8019a56:	2001      	movs	r0, #1
 8019a58:	e7f0      	b.n	8019a3c <HAL_DMA_Init+0x9c>
 8019a5a:	bf00      	nop
 8019a5c:	40020407 	.word	0x40020407
 8019a60:	bffdfff8 	.word	0xbffdfff8
 8019a64:	40020000 	.word	0x40020000
 8019a68:	1000823f 	.word	0x1000823f
 8019a6c:	40020940 	.word	0x40020940
 8019a70:	40020900 	.word	0x40020900
 8019a74:	bffdfbf8 	.word	0xbffdfbf8
 8019a78:	40020400 	.word	0x40020400

08019a7c <HAL_DMA_Start_IT>:
{
 8019a7c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8019a7e:	f890 5024 	ldrb.w	r5, [r0, #36]	@ 0x24
 8019a82:	2d01      	cmp	r5, #1
{
 8019a84:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8019a86:	d037      	beq.n	8019af8 <HAL_DMA_Start_IT+0x7c>
 8019a88:	2501      	movs	r5, #1
 8019a8a:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8019a8e:	f890 5025 	ldrb.w	r5, [r0, #37]	@ 0x25
 8019a92:	2d01      	cmp	r5, #1
 8019a94:	f04f 0500 	mov.w	r5, #0
 8019a98:	d12c      	bne.n	8019af4 <HAL_DMA_Start_IT+0x78>
    hdma->State = HAL_DMA_STATE_BUSY;
 8019a9a:	2602      	movs	r6, #2
 8019a9c:	f880 6025 	strb.w	r6, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019aa0:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8019aa2:	6805      	ldr	r5, [r0, #0]
 8019aa4:	682e      	ldr	r6, [r5, #0]
 8019aa6:	f026 0601 	bic.w	r6, r6, #1
 8019aaa:	602e      	str	r6, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8019aac:	f7ff ff39 	bl	8019922 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8019ab0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8019ab2:	b1bb      	cbz	r3, 8019ae4 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019ab4:	682b      	ldr	r3, [r5, #0]
 8019ab6:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8019aba:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8019abc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8019abe:	681a      	ldr	r2, [r3, #0]
 8019ac0:	03d2      	lsls	r2, r2, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8019ac2:	bf42      	ittt	mi
 8019ac4:	681a      	ldrmi	r2, [r3, #0]
 8019ac6:	f442 7280 	orrmi.w	r2, r2, #256	@ 0x100
 8019aca:	601a      	strmi	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8019acc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8019ace:	b11b      	cbz	r3, 8019ad8 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8019ad0:	681a      	ldr	r2, [r3, #0]
 8019ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8019ad6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8019ad8:	682b      	ldr	r3, [r5, #0]
 8019ada:	f043 0301 	orr.w	r3, r3, #1
 8019ade:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019ae0:	2000      	movs	r0, #0
}
 8019ae2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8019ae4:	682b      	ldr	r3, [r5, #0]
 8019ae6:	f023 0304 	bic.w	r3, r3, #4
 8019aea:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8019aec:	682b      	ldr	r3, [r5, #0]
 8019aee:	f043 030a 	orr.w	r3, r3, #10
 8019af2:	e7e2      	b.n	8019aba <HAL_DMA_Start_IT+0x3e>
    __HAL_UNLOCK(hdma);
 8019af4:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8019af8:	2002      	movs	r0, #2
 8019afa:	e7f2      	b.n	8019ae2 <HAL_DMA_Start_IT+0x66>

08019afc <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8019afc:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8019b00:	2a02      	cmp	r2, #2
{
 8019b02:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8019b04:	d006      	beq.n	8019b14 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019b06:	2204      	movs	r2, #4
 8019b08:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8019b0a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8019b12:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019b14:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019b16:	6c80      	ldr	r0, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019b18:	6811      	ldr	r1, [r2, #0]
 8019b1a:	f021 010e 	bic.w	r1, r1, #14
 8019b1e:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019b20:	6801      	ldr	r1, [r0, #0]
 8019b22:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8019b26:	6001      	str	r1, [r0, #0]
    __HAL_DMA_DISABLE(hdma);
 8019b28:	6811      	ldr	r1, [r2, #0]
 8019b2a:	f021 0101 	bic.w	r1, r1, #1
 8019b2e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8019b30:	e9d3 0210 	ldrd	r0, r2, [r3, #64]	@ 0x40
 8019b34:	f002 011c 	and.w	r1, r2, #28
 8019b38:	2201      	movs	r2, #1
 8019b3a:	408a      	lsls	r2, r1
 8019b3c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019b3e:	e9d3 2113 	ldrd	r2, r1, [r3, #76]	@ 0x4c
 8019b42:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8019b44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019b46:	b132      	cbz	r2, 8019b56 <HAL_DMA_Abort+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019b48:	6811      	ldr	r1, [r2, #0]
 8019b4a:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8019b4e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019b50:	e9d3 2116 	ldrd	r2, r1, [r3, #88]	@ 0x58
 8019b54:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8019b56:	2201      	movs	r2, #1
 8019b58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    return status;
 8019b5c:	2000      	movs	r0, #0
 8019b5e:	e7d5      	b.n	8019b0c <HAL_DMA_Abort+0x10>

08019b60 <HAL_DMA_Abort_IT>:
{
 8019b60:	b508      	push	{r3, lr}
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8019b62:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8019b66:	2b02      	cmp	r3, #2
 8019b68:	d003      	beq.n	8019b72 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019b6a:	2304      	movs	r3, #4
 8019b6c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8019b6e:	2001      	movs	r0, #1
}
 8019b70:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019b72:	6803      	ldr	r3, [r0, #0]
 8019b74:	681a      	ldr	r2, [r3, #0]
 8019b76:	f022 020e 	bic.w	r2, r2, #14
 8019b7a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8019b7c:	681a      	ldr	r2, [r3, #0]
 8019b7e:	f022 0201 	bic.w	r2, r2, #1
 8019b82:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019b84:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8019b86:	6813      	ldr	r3, [r2, #0]
 8019b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019b8c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8019b8e:	e9d0 1310 	ldrd	r1, r3, [r0, #64]	@ 0x40
 8019b92:	f003 021c 	and.w	r2, r3, #28
 8019b96:	2301      	movs	r3, #1
 8019b98:	4093      	lsls	r3, r2
 8019b9a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019b9c:	e9d0 3213 	ldrd	r3, r2, [r0, #76]	@ 0x4c
 8019ba0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8019ba2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8019ba4:	b133      	cbz	r3, 8019bb4 <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019ba6:	681a      	ldr	r2, [r3, #0]
 8019ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8019bac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019bae:	e9d0 3216 	ldrd	r3, r2, [r0, #88]	@ 0x58
 8019bb2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8019bba:	2300      	movs	r3, #0
 8019bbc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8019bc0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019bc2:	b103      	cbz	r3, 8019bc6 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8019bc4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8019bc6:	2000      	movs	r0, #0
 8019bc8:	e7d2      	b.n	8019b70 <HAL_DMA_Abort_IT+0x10>

08019bca <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8019bca:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8019bcc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8019bce:	6803      	ldr	r3, [r0, #0]
{
 8019bd0:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8019bd2:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8019bd6:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8019bd8:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8019bda:	2404      	movs	r4, #4
 8019bdc:	4094      	lsls	r4, r2
 8019bde:	4234      	tst	r4, r6
 8019be0:	d00e      	beq.n	8019c00 <HAL_DMA_IRQHandler+0x36>
 8019be2:	f015 0f04 	tst.w	r5, #4
 8019be6:	d00b      	beq.n	8019c00 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8019be8:	681a      	ldr	r2, [r3, #0]
 8019bea:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8019bec:	bf5e      	ittt	pl
 8019bee:	681a      	ldrpl	r2, [r3, #0]
 8019bf0:	f022 0204 	bicpl.w	r2, r2, #4
 8019bf4:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8019bf6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8019bf8:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8019bfa:	b373      	cbz	r3, 8019c5a <HAL_DMA_IRQHandler+0x90>
}
 8019bfc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8019bfe:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8019c00:	2402      	movs	r4, #2
 8019c02:	4094      	lsls	r4, r2
 8019c04:	4234      	tst	r4, r6
 8019c06:	d012      	beq.n	8019c2e <HAL_DMA_IRQHandler+0x64>
 8019c08:	f015 0f02 	tst.w	r5, #2
 8019c0c:	d00f      	beq.n	8019c2e <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8019c0e:	681a      	ldr	r2, [r3, #0]
 8019c10:	0695      	lsls	r5, r2, #26
 8019c12:	d406      	bmi.n	8019c22 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8019c14:	681a      	ldr	r2, [r3, #0]
 8019c16:	f022 020a 	bic.w	r2, r2, #10
 8019c1a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8019c1c:	2301      	movs	r3, #1
 8019c1e:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8019c22:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8019c24:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8019c26:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8019c2a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8019c2c:	e7e5      	b.n	8019bfa <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8019c2e:	2408      	movs	r4, #8
 8019c30:	4094      	lsls	r4, r2
 8019c32:	4234      	tst	r4, r6
 8019c34:	d011      	beq.n	8019c5a <HAL_DMA_IRQHandler+0x90>
 8019c36:	072c      	lsls	r4, r5, #28
 8019c38:	d50f      	bpl.n	8019c5a <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8019c3a:	681c      	ldr	r4, [r3, #0]
 8019c3c:	f024 040e 	bic.w	r4, r4, #14
 8019c40:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8019c42:	2301      	movs	r3, #1
 8019c44:	fa03 f202 	lsl.w	r2, r3, r2
 8019c48:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8019c4a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8019c4c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8019c50:	2300      	movs	r3, #0
 8019c52:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8019c56:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8019c58:	e7cf      	b.n	8019bfa <HAL_DMA_IRQHandler+0x30>
}
 8019c5a:	bc70      	pop	{r4, r5, r6}
 8019c5c:	4770      	bx	lr

08019c5e <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8019c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8019c60:	6804      	ldr	r4, [r0, #0]
 8019c62:	9d05      	ldr	r5, [sp, #20]
 8019c64:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8019c66:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8019c6a:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8019c6c:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
 8019c70:	4335      	orrs	r5, r6
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8019c72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8019c76:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8019c78:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8019c7a:	d12f      	bne.n	8019cdc <DMA2D_SetConfig+0x7e>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8019c7c:	6880      	ldr	r0, [r0, #8]
 8019c7e:	f001 467f 	and.w	r6, r1, #4278190080	@ 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8019c82:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8019c86:	f401 427f 	and.w	r2, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8019c8a:	b2cd      	uxtb	r5, r1

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8019c8c:	2803      	cmp	r0, #3
 8019c8e:	d81a      	bhi.n	8019cc6 <DMA2D_SetConfig+0x68>
 8019c90:	e8df f000 	tbb	[pc, r0]
 8019c94:	0e060204 	.word	0x0e060204
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8019c98:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8019c9c:	63a1      	str	r1, [r4, #56]	@ 0x38
#endif /*DMA2D_M2M_BLEND_FIXED_COLOR_FG_BG_SUPPORT*/
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8019c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmp2 = (tmp2 >> 19U);
 8019ca0:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8019ca2:	0a92      	lsrs	r2, r2, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8019ca4:	02c9      	lsls	r1, r1, #11
 8019ca6:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8019caa:	ea41 01d5 	orr.w	r1, r1, r5, lsr #3
 8019cae:	e7f5      	b.n	8019c9c <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 19U);
 8019cb0:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8019cb2:	0ad2      	lsrs	r2, r2, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8019cb4:	029b      	lsls	r3, r3, #10
 8019cb6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8019cba:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
      tmp1 = (tmp1 >> 31U);
 8019cbe:	0ff1      	lsrs	r1, r6, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8019cc0:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8019cc4:	e7ea      	b.n	8019c9c <DMA2D_SetConfig+0x3e>
      tmp2 = (tmp2 >> 20U);
 8019cc6:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8019cc8:	0b12      	lsrs	r2, r2, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8019cca:	021b      	lsls	r3, r3, #8
 8019ccc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8019cd0:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
      tmp1 = (tmp1 >> 28U);
 8019cd4:	0f36      	lsrs	r6, r6, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8019cd6:	ea43 3106 	orr.w	r1, r3, r6, lsl #12
 8019cda:	e7df      	b.n	8019c9c <DMA2D_SetConfig+0x3e>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8019cdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8019ce0:	bf0c      	ite	eq
 8019ce2:	6161      	streq	r1, [r4, #20]
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8019ce4:	60e1      	strne	r1, [r4, #12]
}
 8019ce6:	e7da      	b.n	8019c9e <DMA2D_SetConfig+0x40>

08019ce8 <HAL_DMA2D_Init>:
{
 8019ce8:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8019cea:	4604      	mov	r4, r0
 8019cec:	2800      	cmp	r0, #0
 8019cee:	d036      	beq.n	8019d5e <HAL_DMA2D_Init+0x76>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8019cf0:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 8019cf4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8019cf8:	b91b      	cbnz	r3, 8019d02 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8019cfa:	f880 2058 	strb.w	r2, [r0, #88]	@ 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8019cfe:	f7fd fd55 	bl	80177ac <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8019d02:	2302      	movs	r3, #2
 8019d04:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8019d08:	6823      	ldr	r3, [r4, #0]
 8019d0a:	69e0      	ldr	r0, [r4, #28]
 8019d0c:	6819      	ldr	r1, [r3, #0]
 8019d0e:	6862      	ldr	r2, [r4, #4]
 8019d10:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8019d14:	4302      	orrs	r2, r0
 8019d16:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8019d1a:	430a      	orrs	r2, r1
 8019d1c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8019d1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8019d20:	69a0      	ldr	r0, [r4, #24]
 8019d22:	68a2      	ldr	r2, [r4, #8]
 8019d24:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8019d28:	4302      	orrs	r2, r0
 8019d2a:	f021 0101 	bic.w	r1, r1, #1
 8019d2e:	430a      	orrs	r2, r1
 8019d30:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8019d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019d34:	68e1      	ldr	r1, [r4, #12]
 8019d36:	f36f 020f 	bfc	r2, #0, #16
 8019d3a:	430a      	orrs	r2, r1
 8019d3c:	641a      	str	r2, [r3, #64]	@ 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8019d3e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8019d42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8019d44:	0552      	lsls	r2, r2, #21
 8019d46:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8019d4a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8019d4e:	430a      	orrs	r2, r1
 8019d50:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8019d52:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8019d54:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8019d56:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8019d58:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
}
 8019d5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8019d5e:	2001      	movs	r0, #1
 8019d60:	e7fc      	b.n	8019d5c <HAL_DMA2D_Init+0x74>

08019d62 <HAL_DMA2D_Start>:
{
 8019d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8019d64:	f890 5058 	ldrb.w	r5, [r0, #88]	@ 0x58
 8019d68:	2d01      	cmp	r5, #1
{
 8019d6a:	4604      	mov	r4, r0
 8019d6c:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 8019d70:	d00f      	beq.n	8019d92 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8019d72:	f880 5059 	strb.w	r5, [r0, #89]	@ 0x59
  __HAL_LOCK(hdma2d);
 8019d76:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8019d78:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8019d7a:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8019d7e:	9500      	str	r5, [sp, #0]
 8019d80:	f7ff ff6d 	bl	8019c5e <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8019d84:	6822      	ldr	r2, [r4, #0]
 8019d86:	6813      	ldr	r3, [r2, #0]
 8019d88:	4333      	orrs	r3, r6
 8019d8a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8019d8c:	2000      	movs	r0, #0
}
 8019d8e:	b002      	add	sp, #8
 8019d90:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8019d92:	4628      	mov	r0, r5
 8019d94:	e7fb      	b.n	8019d8e <HAL_DMA2D_Start+0x2c>

08019d96 <HAL_DMA2D_PollForTransfer>:
{
 8019d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8019d98:	2300      	movs	r3, #0
 8019d9a:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8019d9c:	6803      	ldr	r3, [r0, #0]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	07db      	lsls	r3, r3, #31
{
 8019da2:	4604      	mov	r4, r0
 8019da4:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8019da6:	d418      	bmi.n	8019dda <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8019da8:	6822      	ldr	r2, [r4, #0]
 8019daa:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8019dac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8019dae:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8019db0:	069e      	lsls	r6, r3, #26
 8019db2:	d506      	bpl.n	8019dc2 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8019db4:	f7fe fcba 	bl	801872c <HAL_GetTick>
 8019db8:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8019dba:	6823      	ldr	r3, [r4, #0]
 8019dbc:	685a      	ldr	r2, [r3, #4]
 8019dbe:	06d2      	lsls	r2, r2, #27
 8019dc0:	d53f      	bpl.n	8019e42 <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8019dc2:	6823      	ldr	r3, [r4, #0]
 8019dc4:	2212      	movs	r2, #18
 8019dc6:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8019dc8:	2301      	movs	r3, #1
 8019dca:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
  return HAL_OK;
 8019dce:	2000      	movs	r0, #0
        __HAL_UNLOCK(hdma2d);
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 8019dd6:	b002      	add	sp, #8
 8019dd8:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8019dda:	f7fe fca7 	bl	801872c <HAL_GetTick>
 8019dde:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8019de0:	6823      	ldr	r3, [r4, #0]
 8019de2:	685a      	ldr	r2, [r3, #4]
 8019de4:	0792      	lsls	r2, r2, #30
 8019de6:	d4df      	bmi.n	8019da8 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8019de8:	685a      	ldr	r2, [r3, #4]
 8019dea:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8019dec:	9a01      	ldr	r2, [sp, #4]
 8019dee:	f012 0f21 	tst.w	r2, #33	@ 0x21
 8019df2:	d014      	beq.n	8019e1e <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8019df4:	9a01      	ldr	r2, [sp, #4]
 8019df6:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8019df8:	bf42      	ittt	mi
 8019dfa:	6de2      	ldrmi	r2, [r4, #92]	@ 0x5c
 8019dfc:	f042 0202 	orrmi.w	r2, r2, #2
 8019e00:	65e2      	strmi	r2, [r4, #92]	@ 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8019e02:	9a01      	ldr	r2, [sp, #4]
 8019e04:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8019e06:	bf42      	ittt	mi
 8019e08:	6de2      	ldrmi	r2, [r4, #92]	@ 0x5c
 8019e0a:	f042 0201 	orrmi.w	r2, r2, #1
 8019e0e:	65e2      	strmi	r2, [r4, #92]	@ 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8019e10:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8019e12:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8019e14:	2304      	movs	r3, #4
 8019e16:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
        return HAL_ERROR;
 8019e1a:	2001      	movs	r0, #1
 8019e1c:	e7d8      	b.n	8019dd0 <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 8019e1e:	1c69      	adds	r1, r5, #1
 8019e20:	d0df      	beq.n	8019de2 <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8019e22:	f7fe fc83 	bl	801872c <HAL_GetTick>
 8019e26:	1b80      	subs	r0, r0, r6
 8019e28:	42a8      	cmp	r0, r5
 8019e2a:	d801      	bhi.n	8019e30 <HAL_DMA2D_PollForTransfer+0x9a>
 8019e2c:	2d00      	cmp	r5, #0
 8019e2e:	d1d7      	bne.n	8019de0 <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8019e30:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8019e32:	f043 0320 	orr.w	r3, r3, #32
 8019e36:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8019e38:	2303      	movs	r3, #3
 8019e3a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
          return HAL_TIMEOUT;
 8019e3e:	2003      	movs	r0, #3
 8019e40:	e7c6      	b.n	8019dd0 <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8019e42:	685a      	ldr	r2, [r3, #4]
 8019e44:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8019e46:	9a01      	ldr	r2, [sp, #4]
 8019e48:	f012 0f29 	tst.w	r2, #41	@ 0x29
 8019e4c:	d016      	beq.n	8019e7c <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8019e4e:	9a01      	ldr	r2, [sp, #4]
 8019e50:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8019e52:	bf42      	ittt	mi
 8019e54:	6de2      	ldrmi	r2, [r4, #92]	@ 0x5c
 8019e56:	f042 0204 	orrmi.w	r2, r2, #4
 8019e5a:	65e2      	strmi	r2, [r4, #92]	@ 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8019e5c:	9a01      	ldr	r2, [sp, #4]
 8019e5e:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8019e60:	bf42      	ittt	mi
 8019e62:	6de2      	ldrmi	r2, [r4, #92]	@ 0x5c
 8019e64:	f042 0202 	orrmi.w	r2, r2, #2
 8019e68:	65e2      	strmi	r2, [r4, #92]	@ 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8019e6a:	9a01      	ldr	r2, [sp, #4]
 8019e6c:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8019e6e:	bf42      	ittt	mi
 8019e70:	6de2      	ldrmi	r2, [r4, #92]	@ 0x5c
 8019e72:	f042 0201 	orrmi.w	r2, r2, #1
 8019e76:	65e2      	strmi	r2, [r4, #92]	@ 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8019e78:	2229      	movs	r2, #41	@ 0x29
 8019e7a:	e7ca      	b.n	8019e12 <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 8019e7c:	1c69      	adds	r1, r5, #1
 8019e7e:	d09d      	beq.n	8019dbc <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8019e80:	f7fe fc54 	bl	801872c <HAL_GetTick>
 8019e84:	1b80      	subs	r0, r0, r6
 8019e86:	42a8      	cmp	r0, r5
 8019e88:	d8d2      	bhi.n	8019e30 <HAL_DMA2D_PollForTransfer+0x9a>
 8019e8a:	2d00      	cmp	r5, #0
 8019e8c:	d195      	bne.n	8019dba <HAL_DMA2D_PollForTransfer+0x24>
 8019e8e:	e7cf      	b.n	8019e30 <HAL_DMA2D_PollForTransfer+0x9a>

08019e90 <HAL_DMA2D_LineEventCallback>:
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8019e90:	4770      	bx	lr

08019e92 <HAL_DMA2D_CLUTLoadingCpltCallback>:
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8019e92:	4770      	bx	lr

08019e94 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8019e94:	6803      	ldr	r3, [r0, #0]
{
 8019e96:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8019e98:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8019e9a:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8019e9c:	07f2      	lsls	r2, r6, #31
{
 8019e9e:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8019ea0:	d514      	bpl.n	8019ecc <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8019ea2:	05e9      	lsls	r1, r5, #23
 8019ea4:	d512      	bpl.n	8019ecc <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8019ea6:	681a      	ldr	r2, [r3, #0]
 8019ea8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8019eac:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8019eae:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8019eb0:	f042 0201 	orr.w	r2, r2, #1
 8019eb4:	65c2      	str	r2, [r0, #92]	@ 0x5c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8019eb6:	2201      	movs	r2, #1
 8019eb8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8019eba:	2304      	movs	r3, #4
 8019ebc:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
      __HAL_UNLOCK(hdma2d);
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
      if (hdma2d->XferErrorCallback != NULL)
 8019ec6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8019ec8:	b103      	cbz	r3, 8019ecc <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8019eca:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8019ecc:	06b2      	lsls	r2, r6, #26
 8019ece:	d516      	bpl.n	8019efe <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8019ed0:	04ab      	lsls	r3, r5, #18
 8019ed2:	d514      	bpl.n	8019efe <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8019ed4:	6823      	ldr	r3, [r4, #0]
 8019ed6:	681a      	ldr	r2, [r3, #0]
 8019ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8019edc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8019ede:	2220      	movs	r2, #32
 8019ee0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8019ee2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8019ee4:	f043 0302 	orr.w	r3, r3, #2
 8019ee8:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8019eea:	2304      	movs	r3, #4
 8019eec:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
      __HAL_UNLOCK(hdma2d);
 8019ef0:	2300      	movs	r3, #0
 8019ef2:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      if (hdma2d->XferErrorCallback != NULL)
 8019ef6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019ef8:	b10b      	cbz	r3, 8019efe <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8019efa:	4620      	mov	r0, r4
 8019efc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8019efe:	0730      	lsls	r0, r6, #28
 8019f00:	d516      	bpl.n	8019f30 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8019f02:	0529      	lsls	r1, r5, #20
 8019f04:	d514      	bpl.n	8019f30 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8019f06:	6823      	ldr	r3, [r4, #0]
 8019f08:	681a      	ldr	r2, [r3, #0]
 8019f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8019f0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8019f10:	2208      	movs	r2, #8
 8019f12:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8019f14:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8019f16:	f043 0304 	orr.w	r3, r3, #4
 8019f1a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8019f1c:	2304      	movs	r3, #4
 8019f1e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
      __HAL_UNLOCK(hdma2d);
 8019f22:	2300      	movs	r3, #0
 8019f24:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      if (hdma2d->XferErrorCallback != NULL)
 8019f28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8019f2a:	b10b      	cbz	r3, 8019f30 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8019f2c:	4620      	mov	r0, r4
 8019f2e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8019f30:	0772      	lsls	r2, r6, #29
 8019f32:	d50b      	bpl.n	8019f4c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8019f34:	056b      	lsls	r3, r5, #21
 8019f36:	d509      	bpl.n	8019f4c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8019f38:	6823      	ldr	r3, [r4, #0]
 8019f3a:	681a      	ldr	r2, [r3, #0]
 8019f3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8019f40:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8019f42:	2204      	movs	r2, #4
 8019f44:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8019f46:	4620      	mov	r0, r4
 8019f48:	f7ff ffa2 	bl	8019e90 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8019f4c:	07b0      	lsls	r0, r6, #30
 8019f4e:	d514      	bpl.n	8019f7a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8019f50:	05a9      	lsls	r1, r5, #22
 8019f52:	d512      	bpl.n	8019f7a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8019f54:	6823      	ldr	r3, [r4, #0]
 8019f56:	681a      	ldr	r2, [r3, #0]
 8019f58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8019f5c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8019f5e:	2202      	movs	r2, #2
 8019f60:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8019f62:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8019f64:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8019f66:	2301      	movs	r3, #1
 8019f68:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
      __HAL_UNLOCK(hdma2d);
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      if (hdma2d->XferCpltCallback != NULL)
 8019f72:	6a23      	ldr	r3, [r4, #32]
 8019f74:	b10b      	cbz	r3, 8019f7a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8019f76:	4620      	mov	r0, r4
 8019f78:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8019f7a:	06f2      	lsls	r2, r6, #27
 8019f7c:	d513      	bpl.n	8019fa6 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8019f7e:	04eb      	lsls	r3, r5, #19
 8019f80:	d511      	bpl.n	8019fa6 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8019f82:	6823      	ldr	r3, [r4, #0]
 8019f84:	681a      	ldr	r2, [r3, #0]
 8019f86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8019f8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8019f8c:	2210      	movs	r2, #16
 8019f8e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8019f90:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8019f92:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8019f94:	2301      	movs	r3, #1
 8019f96:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
      __HAL_UNLOCK(hdma2d);
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	f7ff ff76 	bl	8019e92 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8019fa6:	bd70      	pop	{r4, r5, r6, pc}

08019fa8 <HAL_DMA2D_ConfigLayer>:
{
 8019fa8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8019faa:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
 8019fae:	2b01      	cmp	r3, #1
{
 8019fb0:	4602      	mov	r2, r0
 8019fb2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8019fb6:	d02f      	beq.n	801a018 <HAL_DMA2D_ConfigLayer+0x70>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8019fb8:	f882 0059 	strb.w	r0, [r2, #89]	@ 0x59
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8019fbc:	2018      	movs	r0, #24
 8019fbe:	fb00 2001 	mla	r0, r0, r1, r2
  __HAL_LOCK(hdma2d);
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8019fc8:	e9d0 450b 	ldrd	r4, r5, [r0, #44]	@ 0x2c
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8019fcc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8019fce:	4e1b      	ldr	r6, [pc, #108]	@ (801a03c <HAL_DMA2D_ConfigLayer+0x94>)
 8019fd0:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8019fd2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8019fd6:	4323      	orrs	r3, r4
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8019fd8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8019fda:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8019fdc:	3c09      	subs	r4, #9
 8019fde:	2c01      	cmp	r4, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8019fe0:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8019fe4:	bf9a      	itte	ls
 8019fe6:	f000 407f 	andls.w	r0, r0, #4278190080	@ 0xff000000
 8019fea:	4303      	orrls	r3, r0
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8019fec:	ea43 6300 	orrhi.w	r3, r3, r0, lsl #24
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8019ff0:	6810      	ldr	r0, [r2, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8019ff2:	b991      	cbnz	r1, 801a01a <HAL_DMA2D_ConfigLayer+0x72>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8019ff4:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8019ff6:	4031      	ands	r1, r6
 8019ff8:	430b      	orrs	r3, r1
 8019ffa:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8019ffc:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8019ffe:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801a000:	6183      	str	r3, [r0, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 801a002:	d803      	bhi.n	801a00c <HAL_DMA2D_ConfigLayer+0x64>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 801a004:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801a006:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801a00a:	6283      	str	r3, [r0, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 801a00c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 801a00e:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 801a010:	f882 3059 	strb.w	r3, [r2, #89]	@ 0x59
  __HAL_UNLOCK(hdma2d);
 801a014:	f882 0058 	strb.w	r0, [r2, #88]	@ 0x58
}
 801a018:	bd70      	pop	{r4, r5, r6, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 801a01a:	69c5      	ldr	r5, [r0, #28]
 801a01c:	4035      	ands	r5, r6
 801a01e:	432b      	orrs	r3, r5
 801a020:	61c3      	str	r3, [r0, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 801a022:	2318      	movs	r3, #24
 801a024:	fb03 2101 	mla	r1, r3, r1, r2
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 801a028:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 801a02a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801a02c:	6103      	str	r3, [r0, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 801a02e:	bf9e      	ittt	ls
 801a030:	6b4b      	ldrls	r3, [r1, #52]	@ 0x34
 801a032:	f023 437f 	bicls.w	r3, r3, #4278190080	@ 0xff000000
 801a036:	6203      	strls	r3, [r0, #32]
 801a038:	e7e8      	b.n	801a00c <HAL_DMA2D_ConfigLayer+0x64>
 801a03a:	bf00      	nop
 801a03c:	00ccfff0 	.word	0x00ccfff0

0801a040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a044:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 801a1e8 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801a048:	4c65      	ldr	r4, [pc, #404]	@ (801a1e0 <HAL_GPIO_Init+0x1a0>)
  uint32_t position = 0x00u;
 801a04a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801a04c:	680a      	ldr	r2, [r1, #0]
 801a04e:	fa32 f503 	lsrs.w	r5, r2, r3
 801a052:	d102      	bne.n	801a05a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 801a054:	b003      	add	sp, #12
 801a056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 801a05a:	2501      	movs	r5, #1
 801a05c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 801a060:	ea18 0202 	ands.w	r2, r8, r2
 801a064:	f000 80ac 	beq.w	801a1c0 <HAL_GPIO_Init+0x180>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a068:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801a06a:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a06c:	f006 0503 	and.w	r5, r6, #3
 801a070:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801a074:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a078:	1e6f      	subs	r7, r5, #1
 801a07a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801a07c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a080:	d834      	bhi.n	801a0ec <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 801a082:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801a084:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 801a088:	68cf      	ldr	r7, [r1, #12]
 801a08a:	fa07 f70e 	lsl.w	r7, r7, lr
 801a08e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 801a092:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 801a094:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801a096:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801a09a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 801a09e:	409f      	lsls	r7, r3
 801a0a0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 801a0a4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 801a0a6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a0a8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a0ac:	688f      	ldr	r7, [r1, #8]
 801a0ae:	fa07 f70e 	lsl.w	r7, r7, lr
 801a0b2:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a0b6:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 801a0b8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a0ba:	d119      	bne.n	801a0f0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 801a0bc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 801a0c0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801a0c4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 801a0c8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 801a0cc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801a0d0:	f04f 0b0f 	mov.w	fp, #15
 801a0d4:	fa0b fb0a 	lsl.w	fp, fp, sl
 801a0d8:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 801a0dc:	690f      	ldr	r7, [r1, #16]
 801a0de:	fa07 f70a 	lsl.w	r7, r7, sl
 801a0e2:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 801a0e6:	f8c8 7020 	str.w	r7, [r8, #32]
 801a0ea:	e001      	b.n	801a0f0 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801a0ec:	2d03      	cmp	r5, #3
 801a0ee:	d1da      	bne.n	801a0a6 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 801a0f0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801a0f2:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 801a0f6:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 801a0fa:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801a0fc:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 801a100:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801a102:	d05d      	beq.n	801a1c0 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a104:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 801a108:	f045 0501 	orr.w	r5, r5, #1
 801a10c:	f8c9 5060 	str.w	r5, [r9, #96]	@ 0x60
 801a110:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 801a114:	f023 0703 	bic.w	r7, r3, #3
 801a118:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 801a11c:	f005 0501 	and.w	r5, r5, #1
 801a120:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 801a124:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801a126:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a12a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 801a12c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801a12e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801a132:	f04f 0e0f 	mov.w	lr, #15
 801a136:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801a13a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801a13e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801a142:	d03f      	beq.n	801a1c4 <HAL_GPIO_Init+0x184>
 801a144:	4d27      	ldr	r5, [pc, #156]	@ (801a1e4 <HAL_GPIO_Init+0x1a4>)
 801a146:	42a8      	cmp	r0, r5
 801a148:	d03e      	beq.n	801a1c8 <HAL_GPIO_Init+0x188>
 801a14a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801a14e:	42a8      	cmp	r0, r5
 801a150:	d03c      	beq.n	801a1cc <HAL_GPIO_Init+0x18c>
 801a152:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801a156:	42a8      	cmp	r0, r5
 801a158:	d03a      	beq.n	801a1d0 <HAL_GPIO_Init+0x190>
 801a15a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801a15e:	42a8      	cmp	r0, r5
 801a160:	d038      	beq.n	801a1d4 <HAL_GPIO_Init+0x194>
 801a162:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801a166:	42a8      	cmp	r0, r5
 801a168:	d036      	beq.n	801a1d8 <HAL_GPIO_Init+0x198>
 801a16a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801a16e:	42a8      	cmp	r0, r5
 801a170:	d034      	beq.n	801a1dc <HAL_GPIO_Init+0x19c>
 801a172:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801a176:	42a8      	cmp	r0, r5
 801a178:	bf14      	ite	ne
 801a17a:	2508      	movne	r5, #8
 801a17c:	2507      	moveq	r5, #7
 801a17e:	fa05 f50c 	lsl.w	r5, r5, ip
 801a182:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 801a186:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 801a188:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 801a18a:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801a18c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 801a190:	bf0c      	ite	eq
 801a192:	403d      	andeq	r5, r7
          temp |= iocurrent;
 801a194:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 801a196:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 801a198:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801a19a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 801a19e:	bf0c      	ite	eq
 801a1a0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 801a1a2:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 801a1a4:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 801a1a6:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801a1a8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 801a1ac:	bf0c      	ite	eq
 801a1ae:	403d      	andeq	r5, r7
          temp |= iocurrent;
 801a1b0:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 801a1b2:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 801a1b4:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801a1b6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 801a1b8:	bf54      	ite	pl
 801a1ba:	403d      	andpl	r5, r7
          temp |= iocurrent;
 801a1bc:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 801a1be:	6025      	str	r5, [r4, #0]
    position++;
 801a1c0:	3301      	adds	r3, #1
 801a1c2:	e743      	b.n	801a04c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 801a1c4:	2500      	movs	r5, #0
 801a1c6:	e7da      	b.n	801a17e <HAL_GPIO_Init+0x13e>
 801a1c8:	2501      	movs	r5, #1
 801a1ca:	e7d8      	b.n	801a17e <HAL_GPIO_Init+0x13e>
 801a1cc:	2502      	movs	r5, #2
 801a1ce:	e7d6      	b.n	801a17e <HAL_GPIO_Init+0x13e>
 801a1d0:	2503      	movs	r5, #3
 801a1d2:	e7d4      	b.n	801a17e <HAL_GPIO_Init+0x13e>
 801a1d4:	2504      	movs	r5, #4
 801a1d6:	e7d2      	b.n	801a17e <HAL_GPIO_Init+0x13e>
 801a1d8:	2505      	movs	r5, #5
 801a1da:	e7d0      	b.n	801a17e <HAL_GPIO_Init+0x13e>
 801a1dc:	2506      	movs	r5, #6
 801a1de:	e7ce      	b.n	801a17e <HAL_GPIO_Init+0x13e>
 801a1e0:	40010400 	.word	0x40010400
 801a1e4:	48000400 	.word	0x48000400
 801a1e8:	40021000 	.word	0x40021000

0801a1ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 801a1ec:	6903      	ldr	r3, [r0, #16]
 801a1ee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 801a1f0:	bf14      	ite	ne
 801a1f2:	2001      	movne	r0, #1
 801a1f4:	2000      	moveq	r0, #0
 801a1f6:	4770      	bx	lr

0801a1f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801a1f8:	b10a      	cbz	r2, 801a1fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801a1fa:	6181      	str	r1, [r0, #24]
 801a1fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801a1fe:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 801a200:	4770      	bx	lr
	...

0801a204 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801a204:	4a04      	ldr	r2, [pc, #16]	@ (801a218 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 801a206:	6951      	ldr	r1, [r2, #20]
 801a208:	4201      	tst	r1, r0
{
 801a20a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 801a20c:	d002      	beq.n	801a214 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801a20e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801a210:	f018 f980 	bl	8032514 <HAL_GPIO_EXTI_Callback>
  }
}
 801a214:	bd08      	pop	{r3, pc}
 801a216:	bf00      	nop
 801a218:	40010400 	.word	0x40010400

0801a21c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801a21c:	6803      	ldr	r3, [r0, #0]
 801a21e:	699a      	ldr	r2, [r3, #24]
 801a220:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 801a222:	bf44      	itt	mi
 801a224:	2200      	movmi	r2, #0
 801a226:	629a      	strmi	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801a228:	699a      	ldr	r2, [r3, #24]
 801a22a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801a22c:	bf5e      	ittt	pl
 801a22e:	699a      	ldrpl	r2, [r3, #24]
 801a230:	f042 0201 	orrpl.w	r2, r2, #1
 801a234:	619a      	strpl	r2, [r3, #24]
  }
}
 801a236:	4770      	bx	lr

0801a238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801a238:	b530      	push	{r4, r5, lr}
 801a23a:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801a23c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801a23e:	432b      	orrs	r3, r5
 801a240:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 801a244:	4a06      	ldr	r2, [pc, #24]	@ (801a260 <I2C_TransferConfig+0x28>)
 801a246:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801a248:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a24c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 801a24e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801a252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 801a256:	ea20 0002 	bic.w	r0, r0, r2
 801a25a:	4303      	orrs	r3, r0
 801a25c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801a25e:	bd30      	pop	{r4, r5, pc}
 801a260:	03ff63ff 	.word	0x03ff63ff

0801a264 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 801a264:	6803      	ldr	r3, [r0, #0]
{
 801a266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 801a26a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801a26c:	f014 0410 	ands.w	r4, r4, #16
{
 801a270:	4605      	mov	r5, r0
 801a272:	460f      	mov	r7, r1
 801a274:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801a276:	d06f      	beq.n	801a358 <I2C_IsErrorOccurred+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a278:	2210      	movs	r2, #16
  uint32_t error_code = 0;
 801a27a:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a27c:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 801a27e:	46a0      	mov	r8, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801a280:	682b      	ldr	r3, [r5, #0]
 801a282:	699a      	ldr	r2, [r3, #24]
 801a284:	0690      	lsls	r0, r2, #26
 801a286:	d461      	bmi.n	801a34c <I2C_IsErrorOccurred+0xe8>
 801a288:	f1b8 0f00 	cmp.w	r8, #0
 801a28c:	d035      	beq.n	801a2fa <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 801a28e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 801a292:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 801a294:	682e      	ldr	r6, [r5, #0]
 801a296:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801a298:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801a29a:	bf41      	itttt	mi
 801a29c:	f44f 7280 	movmi.w	r2, #256	@ 0x100
 801a2a0:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 801a2a2:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 801a2a6:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801a2a8:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801a2aa:	bf41      	itttt	mi
 801a2ac:	f44f 6280 	movmi.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 801a2b0:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801a2b4:	61f2      	strmi	r2, [r6, #28]
    status = HAL_ERROR;
 801a2b6:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801a2b8:	059b      	lsls	r3, r3, #22
 801a2ba:	d54f      	bpl.n	801a35c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801a2bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 801a2c0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801a2c4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	f7ff ffa8 	bl	801a21c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 801a2cc:	6873      	ldr	r3, [r6, #4]
 801a2ce:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 801a2d2:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 801a2d6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 801a2da:	f023 0301 	bic.w	r3, r3, #1
 801a2de:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 801a2e0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801a2e2:	4323      	orrs	r3, r4
 801a2e4:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801a2e6:	2320      	movs	r3, #32
 801a2e8:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 801a2f2:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 801a2f6:	2001      	movs	r0, #1
 801a2f8:	e032      	b.n	801a360 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 801a2fa:	1c7a      	adds	r2, r7, #1
 801a2fc:	d0c1      	beq.n	801a282 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a2fe:	f7fe fa15 	bl	801872c <HAL_GetTick>
 801a302:	1b80      	subs	r0, r0, r6
 801a304:	42b8      	cmp	r0, r7
 801a306:	d801      	bhi.n	801a30c <I2C_IsErrorOccurred+0xa8>
 801a308:	2f00      	cmp	r7, #0
 801a30a:	d1b9      	bne.n	801a280 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801a30c:	682b      	ldr	r3, [r5, #0]
 801a30e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 801a310:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801a314:	6998      	ldr	r0, [r3, #24]
 801a316:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 801a318:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801a31a:	d50a      	bpl.n	801a332 <I2C_IsErrorOccurred+0xce>
 801a31c:	0449      	lsls	r1, r1, #17
 801a31e:	d408      	bmi.n	801a332 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 801a320:	2a20      	cmp	r2, #32
 801a322:	d006      	beq.n	801a332 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801a324:	685a      	ldr	r2, [r3, #4]
 801a326:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a32a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 801a32c:	f7fe f9fe 	bl	801872c <HAL_GetTick>
 801a330:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a332:	682b      	ldr	r3, [r5, #0]
 801a334:	699b      	ldr	r3, [r3, #24]
 801a336:	069b      	lsls	r3, r3, #26
 801a338:	d4a2      	bmi.n	801a280 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801a33a:	f7fe f9f7 	bl	801872c <HAL_GetTick>
 801a33e:	1b80      	subs	r0, r0, r6
 801a340:	2819      	cmp	r0, #25
 801a342:	d9f6      	bls.n	801a332 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801a344:	2420      	movs	r4, #32
              status = HAL_ERROR;
 801a346:	f04f 0801 	mov.w	r8, #1
 801a34a:	e799      	b.n	801a280 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 801a34c:	f1b8 0f00 	cmp.w	r8, #0
 801a350:	d19d      	bne.n	801a28e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a352:	2220      	movs	r2, #32
 801a354:	61da      	str	r2, [r3, #28]
 801a356:	e79a      	b.n	801a28e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 801a358:	4620      	mov	r0, r4
 801a35a:	e79b      	b.n	801a294 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 801a35c:	2800      	cmp	r0, #0
 801a35e:	d1b2      	bne.n	801a2c6 <I2C_IsErrorOccurred+0x62>
}
 801a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a364 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 801a364:	b570      	push	{r4, r5, r6, lr}
 801a366:	4604      	mov	r4, r0
 801a368:	460d      	mov	r5, r1
 801a36a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801a36c:	6823      	ldr	r3, [r4, #0]
 801a36e:	699b      	ldr	r3, [r3, #24]
 801a370:	079b      	lsls	r3, r3, #30
 801a372:	d501      	bpl.n	801a378 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 801a374:	2000      	movs	r0, #0
 801a376:	e01f      	b.n	801a3b8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801a378:	4632      	mov	r2, r6
 801a37a:	4629      	mov	r1, r5
 801a37c:	4620      	mov	r0, r4
 801a37e:	f7ff ff71 	bl	801a264 <I2C_IsErrorOccurred>
 801a382:	b9c0      	cbnz	r0, 801a3b6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 801a384:	1c6a      	adds	r2, r5, #1
 801a386:	d0f1      	beq.n	801a36c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a388:	f7fe f9d0 	bl	801872c <HAL_GetTick>
 801a38c:	1b80      	subs	r0, r0, r6
 801a38e:	42a8      	cmp	r0, r5
 801a390:	d801      	bhi.n	801a396 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 801a392:	2d00      	cmp	r5, #0
 801a394:	d1ea      	bne.n	801a36c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801a396:	6823      	ldr	r3, [r4, #0]
 801a398:	699b      	ldr	r3, [r3, #24]
 801a39a:	f013 0302 	ands.w	r3, r3, #2
 801a39e:	d1e5      	bne.n	801a36c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a3a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 801a3a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a3a6:	f042 0220 	orr.w	r2, r2, #32
 801a3aa:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a3ac:	2220      	movs	r2, #32
 801a3ae:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a3b2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 801a3b6:	2001      	movs	r0, #1
}
 801a3b8:	bd70      	pop	{r4, r5, r6, pc}

0801a3ba <I2C_WaitOnFlagUntilTimeout>:
{
 801a3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3be:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a3c2:	4604      	mov	r4, r0
 801a3c4:	460f      	mov	r7, r1
 801a3c6:	4616      	mov	r6, r2
 801a3c8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801a3ca:	6823      	ldr	r3, [r4, #0]
 801a3cc:	699b      	ldr	r3, [r3, #24]
 801a3ce:	ea37 0303 	bics.w	r3, r7, r3
 801a3d2:	bf0c      	ite	eq
 801a3d4:	2301      	moveq	r3, #1
 801a3d6:	2300      	movne	r3, #0
 801a3d8:	42b3      	cmp	r3, r6
 801a3da:	d001      	beq.n	801a3e0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 801a3dc:	2000      	movs	r0, #0
 801a3de:	e025      	b.n	801a42c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801a3e0:	4642      	mov	r2, r8
 801a3e2:	4629      	mov	r1, r5
 801a3e4:	4620      	mov	r0, r4
 801a3e6:	f7ff ff3d 	bl	801a264 <I2C_IsErrorOccurred>
 801a3ea:	b9f0      	cbnz	r0, 801a42a <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 801a3ec:	1c6b      	adds	r3, r5, #1
 801a3ee:	d0ec      	beq.n	801a3ca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a3f0:	f7fe f99c 	bl	801872c <HAL_GetTick>
 801a3f4:	eba0 0008 	sub.w	r0, r0, r8
 801a3f8:	42a8      	cmp	r0, r5
 801a3fa:	d801      	bhi.n	801a400 <I2C_WaitOnFlagUntilTimeout+0x46>
 801a3fc:	2d00      	cmp	r5, #0
 801a3fe:	d1e4      	bne.n	801a3ca <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801a400:	6823      	ldr	r3, [r4, #0]
 801a402:	699b      	ldr	r3, [r3, #24]
 801a404:	ea37 0303 	bics.w	r3, r7, r3
 801a408:	bf0c      	ite	eq
 801a40a:	2301      	moveq	r3, #1
 801a40c:	2300      	movne	r3, #0
 801a40e:	42b3      	cmp	r3, r6
 801a410:	d1db      	bne.n	801a3ca <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a412:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801a414:	f043 0320 	orr.w	r3, r3, #32
 801a418:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801a41a:	2320      	movs	r3, #32
 801a41c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801a420:	2300      	movs	r3, #0
 801a422:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 801a426:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 801a42a:	2001      	movs	r0, #1
}
 801a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a430 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 801a430:	b570      	push	{r4, r5, r6, lr}
 801a432:	4604      	mov	r4, r0
 801a434:	460d      	mov	r5, r1
 801a436:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801a438:	6823      	ldr	r3, [r4, #0]
 801a43a:	699b      	ldr	r3, [r3, #24]
 801a43c:	069b      	lsls	r3, r3, #26
 801a43e:	d501      	bpl.n	801a444 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 801a440:	2000      	movs	r0, #0
 801a442:	e01d      	b.n	801a480 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801a444:	4632      	mov	r2, r6
 801a446:	4629      	mov	r1, r5
 801a448:	4620      	mov	r0, r4
 801a44a:	f7ff ff0b 	bl	801a264 <I2C_IsErrorOccurred>
 801a44e:	b9b0      	cbnz	r0, 801a47e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a450:	f7fe f96c 	bl	801872c <HAL_GetTick>
 801a454:	1b80      	subs	r0, r0, r6
 801a456:	42a8      	cmp	r0, r5
 801a458:	d801      	bhi.n	801a45e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 801a45a:	2d00      	cmp	r5, #0
 801a45c:	d1ec      	bne.n	801a438 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801a45e:	6823      	ldr	r3, [r4, #0]
 801a460:	699b      	ldr	r3, [r3, #24]
 801a462:	f013 0320 	ands.w	r3, r3, #32
 801a466:	d1e7      	bne.n	801a438 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a468:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801a46a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a46e:	f042 0220 	orr.w	r2, r2, #32
 801a472:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801a474:	2220      	movs	r2, #32
 801a476:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801a47a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 801a47e:	2001      	movs	r0, #1
}
 801a480:	bd70      	pop	{r4, r5, r6, pc}

0801a482 <HAL_I2C_Init>:
{
 801a482:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 801a484:	4604      	mov	r4, r0
 801a486:	2800      	cmp	r0, #0
 801a488:	d04e      	beq.n	801a528 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 801a48a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 801a48e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801a492:	b91b      	cbnz	r3, 801a49c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 801a494:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 801a498:	f7fd f9a8 	bl	80177ec <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801a49c:	2324      	movs	r3, #36	@ 0x24
 801a49e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 801a4a2:	6823      	ldr	r3, [r4, #0]
 801a4a4:	681a      	ldr	r2, [r3, #0]
 801a4a6:	f022 0201 	bic.w	r2, r2, #1
 801a4aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801a4ac:	6862      	ldr	r2, [r4, #4]
 801a4ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801a4b2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801a4b4:	689a      	ldr	r2, [r3, #8]
 801a4b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801a4ba:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801a4bc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801a4c0:	2901      	cmp	r1, #1
 801a4c2:	d106      	bne.n	801a4d2 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801a4c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801a4c8:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801a4ca:	685a      	ldr	r2, [r3, #4]
 801a4cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801a4d0:	e007      	b.n	801a4e2 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801a4d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a4d6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801a4d8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a4da:	d1f6      	bne.n	801a4ca <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801a4dc:	685a      	ldr	r2, [r3, #4]
 801a4de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801a4e2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801a4e4:	685a      	ldr	r2, [r3, #4]
 801a4e6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 801a4ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801a4ee:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801a4f0:	68da      	ldr	r2, [r3, #12]
 801a4f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801a4f6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a4f8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 801a4fc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 801a4fe:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a500:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801a504:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801a506:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 801a50a:	430a      	orrs	r2, r1
 801a50c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 801a50e:	681a      	ldr	r2, [r3, #0]
 801a510:	f042 0201 	orr.w	r2, r2, #1
 801a514:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a516:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 801a518:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a51a:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801a51c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801a520:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a522:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 801a526:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801a528:	2001      	movs	r0, #1
 801a52a:	e7fc      	b.n	801a526 <HAL_I2C_Init+0xa4>

0801a52c <HAL_I2C_Mem_Read>:
{
 801a52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a530:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a532:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 801a536:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 801a53a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a53e:	2b20      	cmp	r3, #32
{
 801a540:	4604      	mov	r4, r0
 801a542:	460f      	mov	r7, r1
 801a544:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a546:	f040 80c9 	bne.w	801a6dc <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 801a54a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a54c:	b113      	cbz	r3, 801a554 <HAL_I2C_Mem_Read+0x28>
 801a54e:	f1ba 0f00 	cmp.w	sl, #0
 801a552:	d106      	bne.n	801a562 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801a554:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a558:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 801a55a:	2001      	movs	r0, #1
}
 801a55c:	b003      	add	sp, #12
 801a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 801a562:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801a566:	2b01      	cmp	r3, #1
 801a568:	f000 80b8 	beq.w	801a6dc <HAL_I2C_Mem_Read+0x1b0>
 801a56c:	f04f 0b01 	mov.w	fp, #1
 801a570:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 801a574:	f7fe f8da 	bl	801872c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801a578:	2319      	movs	r3, #25
 801a57a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 801a57c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801a57e:	465a      	mov	r2, fp
 801a580:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801a584:	4620      	mov	r0, r4
 801a586:	f7ff ff18 	bl	801a3ba <I2C_WaitOnFlagUntilTimeout>
 801a58a:	4603      	mov	r3, r0
 801a58c:	2800      	cmp	r0, #0
 801a58e:	d1e4      	bne.n	801a55a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801a590:	2222      	movs	r2, #34	@ 0x22
 801a592:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801a596:	2240      	movs	r2, #64	@ 0x40
 801a598:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 801a59c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a59e:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801a5a0:	4a4f      	ldr	r2, [pc, #316]	@ (801a6e0 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a5a2:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferISR   = NULL;
 801a5a4:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 801a5a6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801a5aa:	4639      	mov	r1, r7
 801a5ac:	9200      	str	r2, [sp, #0]
 801a5ae:	4620      	mov	r0, r4
 801a5b0:	fa5f f289 	uxtb.w	r2, r9
 801a5b4:	f7ff fe40 	bl	801a238 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a5b8:	462a      	mov	r2, r5
 801a5ba:	4641      	mov	r1, r8
 801a5bc:	4620      	mov	r0, r4
 801a5be:	f7ff fed1 	bl	801a364 <I2C_WaitOnTXISFlagUntilTimeout>
 801a5c2:	bb20      	cbnz	r0, 801a60e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801a5c4:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a5c8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801a5ca:	d116      	bne.n	801a5fa <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a5cc:	b2f6      	uxtb	r6, r6
 801a5ce:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	9500      	str	r5, [sp, #0]
 801a5d4:	4643      	mov	r3, r8
 801a5d6:	2140      	movs	r1, #64	@ 0x40
 801a5d8:	4620      	mov	r0, r4
 801a5da:	f7ff feee 	bl	801a3ba <I2C_WaitOnFlagUntilTimeout>
 801a5de:	b9b0      	cbnz	r0, 801a60e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a5e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	2bff      	cmp	r3, #255	@ 0xff
 801a5e6:	4b3f      	ldr	r3, [pc, #252]	@ (801a6e4 <HAL_I2C_Mem_Read+0x1b8>)
 801a5e8:	d815      	bhi.n	801a616 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 801a5ea:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 801a5ec:	b292      	uxth	r2, r2
 801a5ee:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a5f0:	9300      	str	r3, [sp, #0]
 801a5f2:	b2d2      	uxtb	r2, r2
 801a5f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801a5f8:	e012      	b.n	801a620 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801a5fa:	0a32      	lsrs	r2, r6, #8
 801a5fc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801a5fe:	4641      	mov	r1, r8
 801a600:	462a      	mov	r2, r5
 801a602:	4620      	mov	r0, r4
 801a604:	f7ff feae 	bl	801a364 <I2C_WaitOnTXISFlagUntilTimeout>
 801a608:	b908      	cbnz	r0, 801a60e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801a60a:	6823      	ldr	r3, [r4, #0]
 801a60c:	e7de      	b.n	801a5cc <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 801a60e:	2300      	movs	r3, #0
 801a610:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 801a614:	e7a1      	b.n	801a55a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = 1U;
 801a616:	2201      	movs	r2, #1
 801a618:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801a61a:	9300      	str	r3, [sp, #0]
 801a61c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a620:	4639      	mov	r1, r7
 801a622:	4620      	mov	r0, r4
 801a624:	f7ff fe08 	bl	801a238 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801a628:	9500      	str	r5, [sp, #0]
 801a62a:	4643      	mov	r3, r8
 801a62c:	2200      	movs	r2, #0
 801a62e:	2104      	movs	r1, #4
 801a630:	4620      	mov	r0, r4
 801a632:	f7ff fec2 	bl	801a3ba <I2C_WaitOnFlagUntilTimeout>
 801a636:	2800      	cmp	r0, #0
 801a638:	d18f      	bne.n	801a55a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a63a:	6823      	ldr	r3, [r4, #0]
 801a63c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a63e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801a640:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 801a642:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 801a644:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 801a646:	3301      	adds	r3, #1
 801a648:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 801a64a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a64c:	3b01      	subs	r3, #1
 801a64e:	b29b      	uxth	r3, r3
 801a650:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a652:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 801a654:	3a01      	subs	r2, #1
 801a656:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a658:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 801a65a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a65c:	b1b3      	cbz	r3, 801a68c <HAL_I2C_Mem_Read+0x160>
 801a65e:	b9aa      	cbnz	r2, 801a68c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801a660:	9500      	str	r5, [sp, #0]
 801a662:	4643      	mov	r3, r8
 801a664:	2180      	movs	r1, #128	@ 0x80
 801a666:	4620      	mov	r0, r4
 801a668:	f7ff fea7 	bl	801a3ba <I2C_WaitOnFlagUntilTimeout>
 801a66c:	2800      	cmp	r0, #0
 801a66e:	f47f af74 	bne.w	801a55a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a672:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a674:	b29b      	uxth	r3, r3
 801a676:	2bff      	cmp	r3, #255	@ 0xff
 801a678:	d928      	bls.n	801a6cc <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 801a67a:	2201      	movs	r2, #1
 801a67c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801a67e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a682:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a684:	4639      	mov	r1, r7
 801a686:	4620      	mov	r0, r4
 801a688:	f7ff fdd6 	bl	801a238 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 801a68c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801a68e:	b29b      	uxth	r3, r3
 801a690:	2b00      	cmp	r3, #0
 801a692:	d1c9      	bne.n	801a628 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a694:	462a      	mov	r2, r5
 801a696:	4641      	mov	r1, r8
 801a698:	4620      	mov	r0, r4
 801a69a:	f7ff fec9 	bl	801a430 <I2C_WaitOnSTOPFlagUntilTimeout>
 801a69e:	2800      	cmp	r0, #0
 801a6a0:	f47f af5b 	bne.w	801a55a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a6a4:	6823      	ldr	r3, [r4, #0]
 801a6a6:	2120      	movs	r1, #32
 801a6a8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 801a6aa:	685a      	ldr	r2, [r3, #4]
 801a6ac:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 801a6b0:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 801a6b4:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 801a6b8:	f022 0201 	bic.w	r2, r2, #1
 801a6bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801a6be:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 801a6c2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801a6c6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 801a6ca:	e747      	b.n	801a55c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 801a6cc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 801a6ce:	b292      	uxth	r2, r2
 801a6d0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a6d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801a6d6:	9000      	str	r0, [sp, #0]
 801a6d8:	b2d2      	uxtb	r2, r2
 801a6da:	e7d3      	b.n	801a684 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 801a6dc:	2002      	movs	r0, #2
 801a6de:	e73d      	b.n	801a55c <HAL_I2C_Mem_Read+0x30>
 801a6e0:	80002000 	.word	0x80002000
 801a6e4:	80002400 	.word	0x80002400

0801a6e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801a6e8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a6ea:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 801a6ee:	2a20      	cmp	r2, #32
{
 801a6f0:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a6f2:	b2d4      	uxtb	r4, r2
 801a6f4:	d11c      	bne.n	801a730 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a6f6:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 801a6fa:	2a01      	cmp	r2, #1
 801a6fc:	d018      	beq.n	801a730 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a6fe:	2224      	movs	r2, #36	@ 0x24
 801a700:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801a704:	6802      	ldr	r2, [r0, #0]
 801a706:	6810      	ldr	r0, [r2, #0]
 801a708:	f020 0001 	bic.w	r0, r0, #1
 801a70c:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801a70e:	6810      	ldr	r0, [r2, #0]
 801a710:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 801a714:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801a716:	6810      	ldr	r0, [r2, #0]
 801a718:	4301      	orrs	r1, r0
 801a71a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 801a71c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a71e:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 801a720:	f041 0101 	orr.w	r1, r1, #1
 801a724:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801a726:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 801a72a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 801a72e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 801a730:	2002      	movs	r0, #2
 801a732:	e7fc      	b.n	801a72e <HAL_I2CEx_ConfigAnalogFilter+0x46>

0801a734 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801a734:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a736:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 801a73a:	2a20      	cmp	r2, #32
{
 801a73c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 801a73e:	b2d4      	uxtb	r4, r2
 801a740:	d11b      	bne.n	801a77a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a742:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 801a746:	2a01      	cmp	r2, #1
 801a748:	d017      	beq.n	801a77a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a74a:	2224      	movs	r2, #36	@ 0x24
 801a74c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801a750:	6802      	ldr	r2, [r0, #0]
 801a752:	6810      	ldr	r0, [r2, #0]
 801a754:	f020 0001 	bic.w	r0, r0, #1
 801a758:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801a75a:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801a75c:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801a760:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801a764:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 801a766:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a768:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 801a76a:	f041 0101 	orr.w	r1, r1, #1
 801a76e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 801a770:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 801a774:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 801a778:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 801a77a:	2002      	movs	r0, #2
 801a77c:	e7fc      	b.n	801a778 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

0801a780 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801a780:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801a782:	01d2      	lsls	r2, r2, #7
 801a784:	3284      	adds	r2, #132	@ 0x84
 801a786:	1883      	adds	r3, r0, r2
{
 801a788:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801a78a:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801a78c:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801a78e:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 801a790:	680e      	ldr	r6, [r1, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801a792:	f005 25f0 	and.w	r5, r5, #4026593280	@ 0xf000f000
 801a796:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801a798:	68c5      	ldr	r5, [r0, #12]
 801a79a:	f106 0c01 	add.w	ip, r6, #1
 801a79e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801a7a2:	f3c7 470b 	ubfx	r7, r7, #16, #12
 801a7a6:	4427      	add	r7, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801a7a8:	4465      	add	r5, ip
 801a7aa:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 801a7ae:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801a7b0:	68c7      	ldr	r7, [r0, #12]
 801a7b2:	68cd      	ldr	r5, [r1, #12]
 801a7b4:	f3c7 070a 	ubfx	r7, r7, #0, #11
 801a7b8:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801a7ba:	689d      	ldr	r5, [r3, #8]
 801a7bc:	f005 25f0 	and.w	r5, r5, #4026593280	@ 0xf000f000
 801a7c0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801a7c2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a7c6:	688d      	ldr	r5, [r1, #8]
 801a7c8:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 801a7cc:	3501      	adds	r5, #1
 801a7ce:	4465      	add	r5, ip
 801a7d0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 801a7d4:	609d      	str	r5, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801a7d6:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801a7d8:	f8d1 c010 	ldr.w	ip, [r1, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 801a7dc:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801a7de:	f025 0507 	bic.w	r5, r5, #7
 801a7e2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 801a7e4:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 801a7e8:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 801a7ec:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 801a7f0:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 801a7f4:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 801a7f8:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 801a7fc:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 801a800:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 801a802:	695d      	ldr	r5, [r3, #20]
 801a804:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 801a808:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 801a80a:	694d      	ldr	r5, [r1, #20]
 801a80c:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 801a80e:	69dd      	ldr	r5, [r3, #28]
 801a810:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 801a814:	f025 0507 	bic.w	r5, r5, #7
 801a818:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801a81a:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 801a81e:	433d      	orrs	r5, r7
 801a820:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 801a822:	f1bc 0f07 	cmp.w	ip, #7
 801a826:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 801a828:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 801a82a:	bf9c      	itt	ls
 801a82c:	4d0d      	ldrls	r5, [pc, #52]	@ (801a864 <LTDC_SetConfig+0xe4>)
 801a82e:	f815 700c 	ldrbls.w	r7, [r5, ip]
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801a832:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 801a834:	f005 25e0 	and.w	r5, r5, #3758153728	@ 0xe000e000
 801a838:	62dd      	str	r5, [r3, #44]	@ 0x2c
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 801a83a:	bf88      	it	hi
 801a83c:	2701      	movhi	r7, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 801a83e:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801a840:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801a842:	1ba4      	subs	r4, r4, r6
 801a844:	437c      	muls	r4, r7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 801a846:	437d      	muls	r5, r7
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 801a848:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 801a84a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801a84e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801a850:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 801a852:	f36f 040a 	bfc	r4, #0, #11
 801a856:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801a858:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801a85a:	5883      	ldr	r3, [r0, r2]
 801a85c:	f043 0301 	orr.w	r3, r3, #1
 801a860:	5083      	str	r3, [r0, r2]
}
 801a862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a864:	08041e18 	.word	0x08041e18

0801a868 <HAL_LTDC_Init>:
{
 801a868:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 801a86a:	4604      	mov	r4, r0
 801a86c:	2800      	cmp	r0, #0
 801a86e:	d04e      	beq.n	801a90e <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 801a870:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 801a874:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801a878:	b91b      	cbnz	r3, 801a882 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 801a87a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 801a87e:	f7fc fff9 	bl	8017874 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801a882:	2302      	movs	r3, #2
 801a884:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801a888:	6823      	ldr	r3, [r4, #0]
 801a88a:	699a      	ldr	r2, [r3, #24]
 801a88c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 801a890:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801a892:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 801a896:	4302      	orrs	r2, r0
 801a898:	68e0      	ldr	r0, [r4, #12]
 801a89a:	6999      	ldr	r1, [r3, #24]
 801a89c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801a89e:	6920      	ldr	r0, [r4, #16]
 801a8a0:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801a8a2:	430a      	orrs	r2, r1
 801a8a4:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 801a8a6:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 801a8aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801a8ae:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 801a8b0:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801a8b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801a8b8:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 801a8ba:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 801a8be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801a8c2:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 801a8c4:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 801a8c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801a8cc:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801a8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 801a8d0:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801a8d4:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 801a8d8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 801a8dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 801a8de:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 801a8e0:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 801a8e4:	432a      	orrs	r2, r5
 801a8e6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 801a8ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801a8ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 801a8f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a8f2:	f042 0206 	orr.w	r2, r2, #6
 801a8f6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 801a8f8:	699a      	ldr	r2, [r3, #24]
 801a8fa:	f042 0201 	orr.w	r2, r2, #1
 801a8fe:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 801a900:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 801a902:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 801a904:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 801a908:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 801a90c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801a90e:	2001      	movs	r0, #1
 801a910:	e7fc      	b.n	801a90c <HAL_LTDC_Init+0xa4>

0801a912 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 801a912:	4770      	bx	lr

0801a914 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 801a914:	4770      	bx	lr

0801a916 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801a916:	6803      	ldr	r3, [r0, #0]
{
 801a918:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801a91a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 801a91c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 801a91e:	0772      	lsls	r2, r6, #29
{
 801a920:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 801a922:	d514      	bpl.n	801a94e <HAL_LTDC_IRQHandler+0x38>
 801a924:	0769      	lsls	r1, r5, #29
 801a926:	d512      	bpl.n	801a94e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 801a928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a92a:	f022 0204 	bic.w	r2, r2, #4
 801a92e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 801a930:	2204      	movs	r2, #4
 801a932:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 801a934:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 801a938:	f043 0301 	orr.w	r3, r3, #1
 801a93c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 801a940:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801a942:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801a946:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 801a94a:	f7ff ffe2 	bl	801a912 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 801a94e:	07b2      	lsls	r2, r6, #30
 801a950:	d516      	bpl.n	801a980 <HAL_LTDC_IRQHandler+0x6a>
 801a952:	07ab      	lsls	r3, r5, #30
 801a954:	d514      	bpl.n	801a980 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 801a956:	6823      	ldr	r3, [r4, #0]
 801a958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a95a:	f022 0202 	bic.w	r2, r2, #2
 801a95e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 801a960:	2202      	movs	r2, #2
 801a962:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 801a964:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 801a968:	4313      	orrs	r3, r2
 801a96a:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 801a96e:	2304      	movs	r3, #4
 801a970:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801a974:	2300      	movs	r3, #0
 801a976:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 801a97a:	4620      	mov	r0, r4
 801a97c:	f7ff ffc9 	bl	801a912 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 801a980:	07f0      	lsls	r0, r6, #31
 801a982:	d510      	bpl.n	801a9a6 <HAL_LTDC_IRQHandler+0x90>
 801a984:	07e9      	lsls	r1, r5, #31
 801a986:	d50e      	bpl.n	801a9a6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801a988:	6823      	ldr	r3, [r4, #0]
 801a98a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a98c:	f022 0201 	bic.w	r2, r2, #1
 801a990:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 801a992:	2201      	movs	r2, #1
 801a994:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 801a996:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 801a998:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801a99c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 801a9a0:	4620      	mov	r0, r4
 801a9a2:	f00d f96d 	bl	8027c80 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 801a9a6:	0732      	lsls	r2, r6, #28
 801a9a8:	d511      	bpl.n	801a9ce <HAL_LTDC_IRQHandler+0xb8>
 801a9aa:	072b      	lsls	r3, r5, #28
 801a9ac:	d50f      	bpl.n	801a9ce <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 801a9ae:	6823      	ldr	r3, [r4, #0]
 801a9b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a9b2:	f022 0208 	bic.w	r2, r2, #8
 801a9b6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 801a9b8:	2208      	movs	r2, #8
 801a9ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 801a9bc:	2301      	movs	r3, #1
 801a9be:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 801a9c8:	4620      	mov	r0, r4
 801a9ca:	f7ff ffa3 	bl	801a914 <HAL_LTDC_ReloadEventCallback>
}
 801a9ce:	bd70      	pop	{r4, r5, r6, pc}

0801a9d0 <HAL_LTDC_ConfigLayer>:
{
 801a9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 801a9d4:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 801a9d8:	2b01      	cmp	r3, #1
{
 801a9da:	4606      	mov	r6, r0
 801a9dc:	460f      	mov	r7, r1
 801a9de:	4694      	mov	ip, r2
 801a9e0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 801a9e4:	d01f      	beq.n	801aa26 <HAL_LTDC_ConfigLayer+0x56>
 801a9e6:	f04f 0801 	mov.w	r8, #1
 801a9ea:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801a9ee:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801a9f2:	2434      	movs	r4, #52	@ 0x34
 801a9f4:	460d      	mov	r5, r1
 801a9f6:	fb04 6402 	mla	r4, r4, r2, r6
 801a9fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a9fc:	3438      	adds	r4, #56	@ 0x38
 801a9fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aa02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aa06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801aa08:	682b      	ldr	r3, [r5, #0]
 801aa0a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 801aa0c:	4630      	mov	r0, r6
 801aa0e:	4662      	mov	r2, ip
 801aa10:	4639      	mov	r1, r7
 801aa12:	f7ff feb5 	bl	801a780 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801aa16:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 801aa18:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801aa1a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 801aa1e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 801aa22:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 801aa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801aa2c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 801aa2c:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 801aa30:	2a01      	cmp	r2, #1
{
 801aa32:	4603      	mov	r3, r0
 801aa34:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 801aa38:	d012      	beq.n	801aa60 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801aa3a:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801aa3c:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 801aa40:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 801aa42:	f020 0001 	bic.w	r0, r0, #1
 801aa46:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 801aa48:	4806      	ldr	r0, [pc, #24]	@ (801aa64 <HAL_LTDC_ProgramLineEvent+0x38>)
 801aa4a:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 801aa4c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 801aa4e:	f041 0101 	orr.w	r1, r1, #1
 801aa52:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 801aa54:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 801aa56:	2201      	movs	r2, #1
 801aa58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 801aa5c:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 801aa60:	4770      	bx	lr
 801aa62:	bf00      	nop
 801aa64:	40016800 	.word	0x40016800

0801aa68 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 801aa68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 801aa6c:	6804      	ldr	r4, [r0, #0]
 801aa6e:	6823      	ldr	r3, [r4, #0]
 801aa70:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 801aa74:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 801aa76:	6883      	ldr	r3, [r0, #8]
 801aa78:	b92b      	cbnz	r3, 801aa86 <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 801aa7a:	6823      	ldr	r3, [r4, #0]
 801aa7c:	684a      	ldr	r2, [r1, #4]
 801aa7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801aa82:	4313      	orrs	r3, r2
 801aa84:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 801aa86:	680b      	ldr	r3, [r1, #0]
 801aa88:	2b02      	cmp	r3, #2
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 801aa8a:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	@ 0x48
    ccr_reg = &(hospi->Instance->WCCR);
 801aa8e:	bf0c      	ite	eq
 801aa90:	f504 72c0 	addeq.w	r2, r4, #384	@ 0x180
    ccr_reg = &(hospi->Instance->CCR);
 801aa94:	f504 7280 	addne.w	r2, r4, #256	@ 0x100
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 801aa98:	ea43 0307 	orr.w	r3, r3, r7
 801aa9c:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 801aa9e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
    tcr_reg = &(hospi->Instance->WTCR);
 801aaa0:	bf03      	ittte	eq
 801aaa2:	f504 76c4 	addeq.w	r6, r4, #392	@ 0x188
    ir_reg  = &(hospi->Instance->WIR);
 801aaa6:	f504 75c8 	addeq.w	r5, r4, #400	@ 0x190
    abr_reg = &(hospi->Instance->WABR);
 801aaaa:	f504 7cd0 	addeq.w	ip, r4, #416	@ 0x1a0
    tcr_reg = &(hospi->Instance->TCR);
 801aaae:	f504 7684 	addne.w	r6, r4, #264	@ 0x108
    ir_reg  = &(hospi->Instance->IR);
 801aab2:	bf1c      	itt	ne
 801aab4:	f504 7588 	addne.w	r5, r4, #272	@ 0x110
    abr_reg = &(hospi->Instance->ABR);
 801aab8:	f504 7c90 	addne.w	ip, r4, #288	@ 0x120
  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 801aabc:	b16b      	cbz	r3, 801aada <OSPI_ConfigCmd+0x72>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 801aabe:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 801aac0:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 801aac4:	6b4f      	ldr	r7, [r1, #52]	@ 0x34
 801aac6:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 801aac8:	f8d2 c000 	ldr.w	ip, [r2]
 801aacc:	433b      	orrs	r3, r7
 801aace:	6b0f      	ldr	r7, [r1, #48]	@ 0x30
 801aad0:	433b      	orrs	r3, r7
 801aad2:	f42c 177c 	bic.w	r7, ip, #4128768	@ 0x3f0000
 801aad6:	433b      	orrs	r3, r7
 801aad8:	6013      	str	r3, [r2, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 801aada:	6833      	ldr	r3, [r6, #0]
 801aadc:	6c4f      	ldr	r7, [r1, #68]	@ 0x44
 801aade:	f023 031f 	bic.w	r3, r3, #31
 801aae2:	433b      	orrs	r3, r7
 801aae4:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801aae6:	f8d1 e038 	ldr.w	lr, [r1, #56]	@ 0x38
 801aaea:	f1be 0f00 	cmp.w	lr, #0
 801aaee:	d004      	beq.n	801aafa <OSPI_ConfigCmd+0x92>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801aaf0:	680b      	ldr	r3, [r1, #0]
 801aaf2:	b913      	cbnz	r3, 801aafa <OSPI_ConfigCmd+0x92>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 801aaf4:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 801aaf6:	3b01      	subs	r3, #1
 801aaf8:	6423      	str	r3, [r4, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 801aafa:	68cb      	ldr	r3, [r1, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801aafc:	f8d1 901c 	ldr.w	r9, [r1, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d066      	beq.n	801abd2 <OSPI_ConfigCmd+0x16a>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801ab04:	e9d1 c804 	ldrd	ip, r8, [r1, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801ab08:	f1b9 0f00 	cmp.w	r9, #0
 801ab0c:	d036      	beq.n	801ab7c <OSPI_ConfigCmd+0x114>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801ab0e:	e9d1 6708 	ldrd	r6, r7, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801ab12:	f1be 0f00 	cmp.w	lr, #0
 801ab16:	d015      	beq.n	801ab44 <OSPI_ConfigCmd+0xdc>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801ab18:	ea4e 0303 	orr.w	r3, lr, r3
 801ab1c:	ea43 0309 	orr.w	r3, r3, r9
 801ab20:	ea43 0308 	orr.w	r3, r3, r8
 801ab24:	ea43 030c 	orr.w	r3, r3, ip
 801ab28:	433b      	orrs	r3, r7
 801ab2a:	4333      	orrs	r3, r6
 801ab2c:	6c0e      	ldr	r6, [r1, #64]	@ 0x40
 801ab2e:	6810      	ldr	r0, [r2, #0]
 801ab30:	4333      	orrs	r3, r6
 801ab32:	4e39      	ldr	r6, [pc, #228]	@ (801ac18 <OSPI_ConfigCmd+0x1b0>)
 801ab34:	4006      	ands	r6, r0
 801ab36:	4333      	orrs	r3, r6

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801ab38:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 801ab3a:	688b      	ldr	r3, [r1, #8]
 801ab3c:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 801ab3e:	698b      	ldr	r3, [r1, #24]
 801ab40:	64a3      	str	r3, [r4, #72]	@ 0x48
 801ab42:	e02f      	b.n	801aba4 <OSPI_ConfigCmd+0x13c>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801ab44:	ea43 0309 	orr.w	r3, r3, r9
 801ab48:	f8d2 e000 	ldr.w	lr, [r2]
 801ab4c:	ea43 0308 	orr.w	r3, r3, r8
 801ab50:	ea43 030c 	orr.w	r3, r3, ip
 801ab54:	433b      	orrs	r3, r7
 801ab56:	f42e 5e7c 	bic.w	lr, lr, #16128	@ 0x3f00
 801ab5a:	4333      	orrs	r3, r6
 801ab5c:	f02e 0e3f 	bic.w	lr, lr, #63	@ 0x3f
 801ab60:	ea43 030e 	orr.w	r3, r3, lr
 801ab64:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801ab66:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801ab68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ab6c:	d1e5      	bne.n	801ab3a <OSPI_ConfigCmd+0xd2>
 801ab6e:	694b      	ldr	r3, [r1, #20]
 801ab70:	2b08      	cmp	r3, #8
 801ab72:	d1e2      	bne.n	801ab3a <OSPI_ConfigCmd+0xd2>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801ab74:	6813      	ldr	r3, [r2, #0]
 801ab76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801ab7a:	e7dd      	b.n	801ab38 <OSPI_ConfigCmd+0xd0>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801ab7c:	f1be 0f00 	cmp.w	lr, #0
 801ab80:	d013      	beq.n	801abaa <OSPI_ConfigCmd+0x142>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 801ab82:	6810      	ldr	r0, [r2, #0]
 801ab84:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 801ab86:	ea4e 0303 	orr.w	r3, lr, r3
 801ab8a:	ea43 0308 	orr.w	r3, r3, r8
 801ab8e:	ea43 030c 	orr.w	r3, r3, ip
 801ab92:	f020 6070 	bic.w	r0, r0, #251658240	@ 0xf000000
 801ab96:	4323      	orrs	r3, r4
 801ab98:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 801ab9c:	4303      	orrs	r3, r0
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801ab9e:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 801aba0:	688b      	ldr	r3, [r1, #8]
 801aba2:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801aba4:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 801aba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 801abaa:	6814      	ldr	r4, [r2, #0]
 801abac:	ea43 0308 	orr.w	r3, r3, r8
 801abb0:	ea43 030c 	orr.w	r3, r3, ip
 801abb4:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 801abb8:	4323      	orrs	r3, r4
 801abba:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801abbc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801abbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801abc2:	d1ed      	bne.n	801aba0 <OSPI_ConfigCmd+0x138>
 801abc4:	694b      	ldr	r3, [r1, #20]
 801abc6:	2b08      	cmp	r3, #8
 801abc8:	d1ea      	bne.n	801aba0 <OSPI_ConfigCmd+0x138>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801abca:	6813      	ldr	r3, [r2, #0]
 801abcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801abd0:	e7e5      	b.n	801ab9e <OSPI_ConfigCmd+0x136>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801abd2:	f1b9 0f00 	cmp.w	r9, #0
 801abd6:	d01b      	beq.n	801ac10 <OSPI_ConfigCmd+0x1a8>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801abd8:	e9d1 6008 	ldrd	r6, r0, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801abdc:	f1be 0f00 	cmp.w	lr, #0
 801abe0:	d00d      	beq.n	801abfe <OSPI_ConfigCmd+0x196>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 801abe2:	ea4e 0309 	orr.w	r3, lr, r9
 801abe6:	6815      	ldr	r5, [r2, #0]
 801abe8:	4303      	orrs	r3, r0
 801abea:	6c08      	ldr	r0, [r1, #64]	@ 0x40
 801abec:	4333      	orrs	r3, r6
 801abee:	4303      	orrs	r3, r0
 801abf0:	f025 6070 	bic.w	r0, r5, #251658240	@ 0xf000000
 801abf4:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 801abf8:	4303      	orrs	r3, r0
 801abfa:	6013      	str	r3, [r2, #0]
 801abfc:	e79f      	b.n	801ab3e <OSPI_ConfigCmd+0xd6>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 801abfe:	6813      	ldr	r3, [r2, #0]
 801ac00:	ea40 0009 	orr.w	r0, r0, r9
 801ac04:	4330      	orrs	r0, r6
 801ac06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801ac0a:	4318      	orrs	r0, r3
 801ac0c:	6010      	str	r0, [r2, #0]
 801ac0e:	e796      	b.n	801ab3e <OSPI_ConfigCmd+0xd6>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801ac10:	2308      	movs	r3, #8
 801ac12:	6483      	str	r3, [r0, #72]	@ 0x48
      status = HAL_ERROR;
 801ac14:	2001      	movs	r0, #1
 801ac16:	e7c6      	b.n	801aba6 <OSPI_ConfigCmd+0x13e>
 801ac18:	f0ffc0c0 	.word	0xf0ffc0c0

0801ac1c <OSPI_WaitFlagStateUntilTimeout>:
{
 801ac1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac20:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ac24:	4604      	mov	r4, r0
 801ac26:	460e      	mov	r6, r1
 801ac28:	4615      	mov	r5, r2
 801ac2a:	461f      	mov	r7, r3
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 801ac2c:	6822      	ldr	r2, [r4, #0]
 801ac2e:	6a13      	ldr	r3, [r2, #32]
 801ac30:	4233      	tst	r3, r6
 801ac32:	bf14      	ite	ne
 801ac34:	2301      	movne	r3, #1
 801ac36:	2300      	moveq	r3, #0
 801ac38:	42ab      	cmp	r3, r5
 801ac3a:	d101      	bne.n	801ac40 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 801ac3c:	2000      	movs	r0, #0
 801ac3e:	e00f      	b.n	801ac60 <OSPI_WaitFlagStateUntilTimeout+0x44>
    if (Timeout != HAL_MAX_DELAY)
 801ac40:	f1b8 3fff 	cmp.w	r8, #4294967295
 801ac44:	d0f3      	beq.n	801ac2e <OSPI_WaitFlagStateUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ac46:	f7fd fd71 	bl	801872c <HAL_GetTick>
 801ac4a:	1bc0      	subs	r0, r0, r7
 801ac4c:	4540      	cmp	r0, r8
 801ac4e:	d909      	bls.n	801ac64 <OSPI_WaitFlagStateUntilTimeout+0x48>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 801ac50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801ac54:	6463      	str	r3, [r4, #68]	@ 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 801ac56:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 801ac58:	f043 0301 	orr.w	r3, r3, #1
 801ac5c:	64a3      	str	r3, [r4, #72]	@ 0x48
 801ac5e:	2001      	movs	r0, #1
}
 801ac60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ac64:	f1b8 0f00 	cmp.w	r8, #0
 801ac68:	d1e0      	bne.n	801ac2c <OSPI_WaitFlagStateUntilTimeout+0x10>
 801ac6a:	e7f1      	b.n	801ac50 <OSPI_WaitFlagStateUntilTimeout+0x34>

0801ac6c <HAL_OSPI_Init>:
{
 801ac6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801ac70:	f7fd fd5c 	bl	801872c <HAL_GetTick>
 801ac74:	4606      	mov	r6, r0
  if (hospi == NULL)
 801ac76:	2c00      	cmp	r4, #0
 801ac78:	d05e      	beq.n	801ad38 <HAL_OSPI_Init+0xcc>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	64a3      	str	r3, [r4, #72]	@ 0x48
    if (hospi->State == HAL_OSPI_STATE_RESET)
 801ac7e:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 801ac80:	2f00      	cmp	r7, #0
 801ac82:	d154      	bne.n	801ad2e <HAL_OSPI_Init+0xc2>
      HAL_OSPI_MspInit(hospi);
 801ac84:	4620      	mov	r0, r4
 801ac86:	f7fc fe65 	bl	8017954 <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 801ac8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801ac8c:	68e1      	ldr	r1, [r4, #12]
 801ac8e:	6825      	ldr	r5, [r4, #0]
 801ac90:	4319      	orrs	r1, r3
 801ac92:	69e3      	ldr	r3, [r4, #28]
 801ac94:	68a8      	ldr	r0, [r5, #8]
 801ac96:	4319      	orrs	r1, r3
 801ac98:	4b28      	ldr	r3, [pc, #160]	@ (801ad3c <HAL_OSPI_Init+0xd0>)
 801ac9a:	4003      	ands	r3, r0
 801ac9c:	4319      	orrs	r1, r3
 801ac9e:	6923      	ldr	r3, [r4, #16]
 801aca0:	3b01      	subs	r3, #1
 801aca2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801aca6:	6963      	ldr	r3, [r4, #20]
 801aca8:	3b01      	subs	r3, #1
 801acaa:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 801acae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  hospi->Timeout = Timeout;
 801acb0:	f241 3288 	movw	r2, #5000	@ 0x1388
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 801acb4:	041b      	lsls	r3, r3, #16
  hospi->Timeout = Timeout;
 801acb6:	64e2      	str	r2, [r4, #76]	@ 0x4c
      MODIFY_REG(hospi->Instance->DCR1,
 801acb8:	60a9      	str	r1, [r5, #8]
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 801acba:	612b      	str	r3, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 801acbc:	682b      	ldr	r3, [r5, #0]
 801acbe:	6861      	ldr	r1, [r4, #4]
 801acc0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 801acc4:	3901      	subs	r1, #1
 801acc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801acca:	602b      	str	r3, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 801accc:	2120      	movs	r1, #32
 801acce:	9200      	str	r2, [sp, #0]
 801acd0:	4633      	mov	r3, r6
 801acd2:	463a      	mov	r2, r7
 801acd4:	4620      	mov	r0, r4
 801acd6:	f7ff ffa1 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 801acda:	bb48      	cbnz	r0, 801ad30 <HAL_OSPI_Init+0xc4>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 801acdc:	6823      	ldr	r3, [r4, #0]
 801acde:	6a22      	ldr	r2, [r4, #32]
 801ace0:	68d9      	ldr	r1, [r3, #12]
 801ace2:	3a01      	subs	r2, #1
 801ace4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 801ace8:	430a      	orrs	r2, r1
 801acea:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 801acec:	681a      	ldr	r2, [r3, #0]
 801acee:	68a1      	ldr	r1, [r4, #8]
 801acf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801acf4:	430a      	orrs	r2, r1
 801acf6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 801acf8:	e9d4 2009 	ldrd	r2, r0, [r4, #36]	@ 0x24
 801acfc:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 801ad00:	4302      	orrs	r2, r0
 801ad02:	f021 41a0 	bic.w	r1, r1, #1342177280	@ 0x50000000
 801ad06:	430a      	orrs	r2, r1
 801ad08:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
        __HAL_OSPI_ENABLE(hospi);
 801ad0c:	681a      	ldr	r2, [r3, #0]
 801ad0e:	f042 0201 	orr.w	r2, r2, #1
 801ad12:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 801ad14:	69a2      	ldr	r2, [r4, #24]
 801ad16:	2a02      	cmp	r2, #2
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 801ad18:	bf02      	ittt	eq
 801ad1a:	689a      	ldreq	r2, [r3, #8]
 801ad1c:	f042 0202 	orreq.w	r2, r2, #2
 801ad20:	609a      	streq	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 801ad22:	68e3      	ldr	r3, [r4, #12]
 801ad24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ad28:	d104      	bne.n	801ad34 <HAL_OSPI_Init+0xc8>
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 801ad2a:	2301      	movs	r3, #1
 801ad2c:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_StatusTypeDef status = HAL_OK;
 801ad2e:	2000      	movs	r0, #0
}
 801ad30:	b003      	add	sp, #12
 801ad32:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hospi->State = HAL_OSPI_STATE_READY;
 801ad34:	2302      	movs	r3, #2
 801ad36:	e7f9      	b.n	801ad2c <HAL_OSPI_Init+0xc0>
    status = HAL_ERROR;
 801ad38:	2001      	movs	r0, #1
 801ad3a:	e7f9      	b.n	801ad30 <HAL_OSPI_Init+0xc4>
 801ad3c:	f8e0f8f4 	.word	0xf8e0f8f4

0801ad40 <HAL_OSPI_Command>:
{
 801ad40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad42:	4604      	mov	r4, r0
 801ad44:	460d      	mov	r5, r1
 801ad46:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 801ad48:	f7fd fcf0 	bl	801872c <HAL_GetTick>
  state = hospi->State;
 801ad4c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 801ad4e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 801ad50:	4606      	mov	r6, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 801ad52:	d107      	bne.n	801ad64 <HAL_OSPI_Command+0x24>
 801ad54:	68e3      	ldr	r3, [r4, #12]
 801ad56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ad5a:	d108      	bne.n	801ad6e <HAL_OSPI_Command+0x2e>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801ad5c:	2310      	movs	r3, #16
 801ad5e:	64a3      	str	r3, [r4, #72]	@ 0x48
    status = HAL_ERROR;
 801ad60:	2001      	movs	r0, #1
 801ad62:	e01e      	b.n	801ada2 <HAL_OSPI_Command+0x62>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 801ad64:	2b14      	cmp	r3, #20
 801ad66:	d11e      	bne.n	801ada6 <HAL_OSPI_Command+0x66>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 801ad68:	682b      	ldr	r3, [r5, #0]
 801ad6a:	2b02      	cmp	r3, #2
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 801ad6c:	d1f6      	bne.n	801ad5c <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801ad6e:	9700      	str	r7, [sp, #0]
 801ad70:	4633      	mov	r3, r6
 801ad72:	2200      	movs	r2, #0
 801ad74:	2120      	movs	r1, #32
 801ad76:	4620      	mov	r0, r4
 801ad78:	f7ff ff50 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 801ad7c:	b988      	cbnz	r0, 801ada2 <HAL_OSPI_Command+0x62>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 801ad7e:	64a0      	str	r0, [r4, #72]	@ 0x48
      status = OSPI_ConfigCmd(hospi, cmd);
 801ad80:	4629      	mov	r1, r5
 801ad82:	4620      	mov	r0, r4
 801ad84:	f7ff fe70 	bl	801aa68 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 801ad88:	b958      	cbnz	r0, 801ada2 <HAL_OSPI_Command+0x62>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 801ad8a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 801ad8c:	b983      	cbnz	r3, 801adb0 <HAL_OSPI_Command+0x70>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 801ad8e:	4633      	mov	r3, r6
 801ad90:	2201      	movs	r2, #1
 801ad92:	9700      	str	r7, [sp, #0]
 801ad94:	2102      	movs	r1, #2
 801ad96:	4620      	mov	r0, r4
 801ad98:	f7ff ff40 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801ad9c:	6823      	ldr	r3, [r4, #0]
 801ad9e:	2202      	movs	r2, #2
 801ada0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801ada2:	b003      	add	sp, #12
 801ada4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 801ada6:	2b24      	cmp	r3, #36	@ 0x24
 801ada8:	d1d8      	bne.n	801ad5c <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 801adaa:	682b      	ldr	r3, [r5, #0]
 801adac:	2b01      	cmp	r3, #1
 801adae:	e7dd      	b.n	801ad6c <HAL_OSPI_Command+0x2c>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801adb0:	682b      	ldr	r3, [r5, #0]
 801adb2:	b90b      	cbnz	r3, 801adb8 <HAL_OSPI_Command+0x78>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 801adb4:	2304      	movs	r3, #4
 801adb6:	e005      	b.n	801adc4 <HAL_OSPI_Command+0x84>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 801adb8:	2b01      	cmp	r3, #1
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 801adba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 801adbc:	d104      	bne.n	801adc8 <HAL_OSPI_Command+0x88>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 801adbe:	2b24      	cmp	r3, #36	@ 0x24
 801adc0:	d0f8      	beq.n	801adb4 <HAL_OSPI_Command+0x74>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 801adc2:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 801adc4:	6463      	str	r3, [r4, #68]	@ 0x44
 801adc6:	e7ec      	b.n	801ada2 <HAL_OSPI_Command+0x62>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 801adc8:	2b14      	cmp	r3, #20
 801adca:	d0f3      	beq.n	801adb4 <HAL_OSPI_Command+0x74>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 801adcc:	2324      	movs	r3, #36	@ 0x24
 801adce:	e7f9      	b.n	801adc4 <HAL_OSPI_Command+0x84>

0801add0 <HAL_OSPI_Transmit>:
{
 801add0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801add4:	4604      	mov	r4, r0
 801add6:	4688      	mov	r8, r1
 801add8:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 801adda:	f7fd fca7 	bl	801872c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 801adde:	6827      	ldr	r7, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 801ade0:	4605      	mov	r5, r0
  if (pData == NULL)
 801ade2:	f1b8 0f00 	cmp.w	r8, #0
 801ade6:	d103      	bne.n	801adf0 <HAL_OSPI_Transmit+0x20>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801ade8:	2308      	movs	r3, #8
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801adea:	64a3      	str	r3, [r4, #72]	@ 0x48
    status = HAL_ERROR;
 801adec:	2001      	movs	r0, #1
 801adee:	e02e      	b.n	801ae4e <HAL_OSPI_Transmit+0x7e>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 801adf0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801adf2:	2b04      	cmp	r3, #4
 801adf4:	d12e      	bne.n	801ae54 <HAL_OSPI_Transmit+0x84>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801adf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 801adf8:	f8c4 8034 	str.w	r8, [r4, #52]	@ 0x34
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801adfc:	3301      	adds	r3, #1
 801adfe:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hospi->XferSize  = hospi->XferCount;
 801ae00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801ae02:	63a3      	str	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801ae04:	683b      	ldr	r3, [r7, #0]
 801ae06:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 801ae0a:	603b      	str	r3, [r7, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 801ae0c:	9600      	str	r6, [sp, #0]
 801ae0e:	462b      	mov	r3, r5
 801ae10:	2201      	movs	r2, #1
 801ae12:	2104      	movs	r1, #4
 801ae14:	4620      	mov	r0, r4
 801ae16:	f7ff ff01 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 801ae1a:	b9c0      	cbnz	r0, 801ae4e <HAL_OSPI_Transmit+0x7e>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 801ae1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ae1e:	781b      	ldrb	r3, [r3, #0]
 801ae20:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
        hospi->pBuffPtr++;
 801ae24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ae26:	3301      	adds	r3, #1
 801ae28:	6363      	str	r3, [r4, #52]	@ 0x34
        hospi->XferCount--;
 801ae2a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801ae2c:	3b01      	subs	r3, #1
 801ae2e:	63e3      	str	r3, [r4, #60]	@ 0x3c
      while (hospi->XferCount > 0U);
 801ae30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d1ea      	bne.n	801ae0c <HAL_OSPI_Transmit+0x3c>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 801ae36:	9600      	str	r6, [sp, #0]
 801ae38:	462b      	mov	r3, r5
 801ae3a:	2201      	movs	r2, #1
 801ae3c:	2102      	movs	r1, #2
 801ae3e:	4620      	mov	r0, r4
 801ae40:	f7ff feec 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 801ae44:	b918      	cbnz	r0, 801ae4e <HAL_OSPI_Transmit+0x7e>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801ae46:	6822      	ldr	r2, [r4, #0]
 801ae48:	2302      	movs	r3, #2
 801ae4a:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 801ae4c:	6463      	str	r3, [r4, #68]	@ 0x44
}
 801ae4e:	b002      	add	sp, #8
 801ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801ae54:	2310      	movs	r3, #16
 801ae56:	e7c8      	b.n	801adea <HAL_OSPI_Transmit+0x1a>

0801ae58 <HAL_OSPI_Receive>:
{
 801ae58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ae5c:	4604      	mov	r4, r0
 801ae5e:	4616      	mov	r6, r2
 801ae60:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 801ae62:	f7fd fc63 	bl	801872c <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 801ae66:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 801ae68:	4607      	mov	r7, r0
  uint32_t addr_reg = hospi->Instance->AR;
 801ae6a:	6caa      	ldr	r2, [r5, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 801ae6c:	f8d5 0110 	ldr.w	r0, [r5, #272]	@ 0x110
  if (pData == NULL)
 801ae70:	f1b8 0f00 	cmp.w	r8, #0
 801ae74:	d103      	bne.n	801ae7e <HAL_OSPI_Receive+0x26>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801ae76:	2308      	movs	r3, #8
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801ae78:	64a3      	str	r3, [r4, #72]	@ 0x48
    status = HAL_ERROR;
 801ae7a:	2001      	movs	r0, #1
 801ae7c:	e035      	b.n	801aeea <HAL_OSPI_Receive+0x92>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 801ae7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801ae80:	2b04      	cmp	r3, #4
 801ae82:	d13d      	bne.n	801af00 <HAL_OSPI_Receive+0xa8>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801ae84:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      hospi->pBuffPtr  = pData;
 801ae86:	f8c4 8034 	str.w	r8, [r4, #52]	@ 0x34
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801ae8a:	3301      	adds	r3, #1
 801ae8c:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hospi->XferSize  = hospi->XferCount;
 801ae8e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801ae90:	63a3      	str	r3, [r4, #56]	@ 0x38
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801ae92:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 801ae94:	68e3      	ldr	r3, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801ae96:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 801ae9a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 801ae9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801aea2:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 801aea4:	d124      	bne.n	801aef0 <HAL_OSPI_Receive+0x98>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 801aea6:	64aa      	str	r2, [r5, #72]	@ 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 801aea8:	9600      	str	r6, [sp, #0]
 801aeaa:	463b      	mov	r3, r7
 801aeac:	2201      	movs	r2, #1
 801aeae:	2106      	movs	r1, #6
 801aeb0:	4620      	mov	r0, r4
 801aeb2:	f7ff feb3 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 801aeb6:	b9c0      	cbnz	r0, 801aeea <HAL_OSPI_Receive+0x92>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 801aeb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801aeba:	f895 2050 	ldrb.w	r2, [r5, #80]	@ 0x50
 801aebe:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801aec0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801aec2:	3301      	adds	r3, #1
 801aec4:	6363      	str	r3, [r4, #52]	@ 0x34
        hospi->XferCount--;
 801aec6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801aec8:	3b01      	subs	r3, #1
 801aeca:	63e3      	str	r3, [r4, #60]	@ 0x3c
      while (hospi->XferCount > 0U);
 801aecc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d1ea      	bne.n	801aea8 <HAL_OSPI_Receive+0x50>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 801aed2:	9600      	str	r6, [sp, #0]
 801aed4:	463b      	mov	r3, r7
 801aed6:	2201      	movs	r2, #1
 801aed8:	2102      	movs	r1, #2
 801aeda:	4620      	mov	r0, r4
 801aedc:	f7ff fe9e 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 801aee0:	b918      	cbnz	r0, 801aeea <HAL_OSPI_Receive+0x92>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801aee2:	6822      	ldr	r2, [r4, #0]
 801aee4:	2302      	movs	r3, #2
 801aee6:	6253      	str	r3, [r2, #36]	@ 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 801aee8:	6463      	str	r3, [r4, #68]	@ 0x44
}
 801aeea:	b002      	add	sp, #8
 801aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 801aef0:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
 801aef4:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 801aef8:	d1d5      	bne.n	801aea6 <HAL_OSPI_Receive+0x4e>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 801aefa:	f8c5 0110 	str.w	r0, [r5, #272]	@ 0x110
 801aefe:	e7d3      	b.n	801aea8 <HAL_OSPI_Receive+0x50>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801af00:	2310      	movs	r3, #16
 801af02:	e7b9      	b.n	801ae78 <HAL_OSPI_Receive+0x20>

0801af04 <HAL_OSPI_AutoPolling>:
{
 801af04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801af08:	4604      	mov	r4, r0
 801af0a:	460d      	mov	r5, r1
 801af0c:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 801af0e:	f7fd fc0d 	bl	801872c <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 801af12:	6823      	ldr	r3, [r4, #0]
 801af14:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 801af16:	f8d3 8110 	ldr.w	r8, [r3, #272]	@ 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 801af1a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801af1c:	2b04      	cmp	r3, #4
  uint32_t tickstart = HAL_GetTick();
 801af1e:	4681      	mov	r9, r0
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 801af20:	d13c      	bne.n	801af9c <HAL_OSPI_AutoPolling+0x98>
 801af22:	68eb      	ldr	r3, [r5, #12]
 801af24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801af28:	d138      	bne.n	801af9c <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801af2a:	4603      	mov	r3, r0
 801af2c:	9600      	str	r6, [sp, #0]
 801af2e:	2200      	movs	r2, #0
 801af30:	2120      	movs	r1, #32
 801af32:	4620      	mov	r0, r4
 801af34:	f7ff fe72 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 801af38:	bb28      	cbnz	r0, 801af86 <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 801af3a:	6823      	ldr	r3, [r4, #0]
 801af3c:	682a      	ldr	r2, [r5, #0]
 801af3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 801af42:	686a      	ldr	r2, [r5, #4]
 801af44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 801af48:	692a      	ldr	r2, [r5, #16]
 801af4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 801af4e:	e9d5 2002 	ldrd	r2, r0, [r5, #8]
 801af52:	6819      	ldr	r1, [r3, #0]
 801af54:	4302      	orrs	r2, r0
 801af56:	f021 5143 	bic.w	r1, r1, #817889280	@ 0x30c00000
 801af5a:	430a      	orrs	r2, r1
 801af5c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 801af60:	601a      	str	r2, [r3, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 801af62:	68e2      	ldr	r2, [r4, #12]
 801af64:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 801af68:	d110      	bne.n	801af8c <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 801af6a:	649f      	str	r7, [r3, #72]	@ 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 801af6c:	9600      	str	r6, [sp, #0]
 801af6e:	464b      	mov	r3, r9
 801af70:	2201      	movs	r2, #1
 801af72:	2108      	movs	r1, #8
 801af74:	4620      	mov	r0, r4
 801af76:	f7ff fe51 	bl	801ac1c <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 801af7a:	b920      	cbnz	r0, 801af86 <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 801af7c:	6823      	ldr	r3, [r4, #0]
 801af7e:	2208      	movs	r2, #8
 801af80:	625a      	str	r2, [r3, #36]	@ 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 801af82:	2302      	movs	r3, #2
 801af84:	6463      	str	r3, [r4, #68]	@ 0x44
}
 801af86:	b003      	add	sp, #12
 801af88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 801af8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801af90:	f412 6fe0 	tst.w	r2, #1792	@ 0x700
 801af94:	d1e9      	bne.n	801af6a <HAL_OSPI_AutoPolling+0x66>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 801af96:	f8c3 8110 	str.w	r8, [r3, #272]	@ 0x110
 801af9a:	e7e7      	b.n	801af6c <HAL_OSPI_AutoPolling+0x68>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801af9c:	2310      	movs	r3, #16
 801af9e:	64a3      	str	r3, [r4, #72]	@ 0x48
    status = HAL_ERROR;
 801afa0:	2001      	movs	r0, #1
 801afa2:	e7f0      	b.n	801af86 <HAL_OSPI_AutoPolling+0x82>

0801afa4 <HAL_OSPI_SetFifoThreshold>:
{
 801afa4:	4602      	mov	r2, r0
  if ((hospi->State & OSPI_BUSY_STATE_MASK) == 0U)
 801afa6:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801afa8:	f010 0008 	ands.w	r0, r0, #8
 801afac:	d109      	bne.n	801afc2 <HAL_OSPI_SetFifoThreshold+0x1e>
    hospi->Init.FifoThreshold = Threshold;
 801afae:	6051      	str	r1, [r2, #4]
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 801afb0:	6812      	ldr	r2, [r2, #0]
 801afb2:	6813      	ldr	r3, [r2, #0]
 801afb4:	3901      	subs	r1, #1
 801afb6:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 801afba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801afbe:	6013      	str	r3, [r2, #0]
 801afc0:	4770      	bx	lr
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801afc2:	2310      	movs	r3, #16
 801afc4:	6493      	str	r3, [r2, #72]	@ 0x48
    status = HAL_ERROR;
 801afc6:	2001      	movs	r0, #1
}
 801afc8:	4770      	bx	lr
	...

0801afcc <HAL_OSPIM_Config>:
{
 801afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hospi->Instance == OCTOSPI1)
 801afd0:	6802      	ldr	r2, [r0, #0]
    other_instance = 1U;
 801afd2:	4bb8      	ldr	r3, [pc, #736]	@ (801b2b4 <HAL_OSPIM_Config+0x2e8>)
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t reg;
  uint32_t value = 0U;
 801afd4:	f8df 82e8 	ldr.w	r8, [pc, #744]	@ 801b2c0 <HAL_OSPIM_Config+0x2f4>
    other_instance = 1U;
 801afd8:	429a      	cmp	r2, r3
{
 801afda:	b08d      	sub	sp, #52	@ 0x34
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
    {
      reg = OCTOSPIM->PCR[index];
 801afdc:	4bb6      	ldr	r3, [pc, #728]	@ (801b2b8 <HAL_OSPIM_Config+0x2ec>)
    other_instance = 1U;
 801afde:	bf15      	itete	ne
 801afe0:	f04f 0900 	movne.w	r9, #0
 801afe4:	f04f 0901 	moveq.w	r9, #1
 801afe8:	2201      	movne	r2, #1
 801afea:	2200      	moveq	r2, #0
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 801afec:	a802      	add	r0, sp, #8
 801afee:	f04f 0e01 	mov.w	lr, #1
    cfg->ClkPort    = 0U;
 801aff2:	2600      	movs	r6, #0
    cfg->DQSPort    = 0U;
 801aff4:	e9c0 6600 	strd	r6, r6, [r0]
    cfg->IOLowPort  = 0U;
 801aff8:	e9c0 6602 	strd	r6, r6, [r0, #8]
  uint32_t value = 0U;
 801affc:	f1be 0f02 	cmp.w	lr, #2
 801b000:	bf0c      	ite	eq
 801b002:	4647      	moveq	r7, r8
 801b004:	2700      	movne	r7, #0
    cfg->IOHighPort = 0U;
 801b006:	6106      	str	r6, [r0, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 801b008:	f04f 0c00 	mov.w	ip, #0
      reg = OCTOSPIM->PCR[index];
 801b00c:	eb03 048c 	add.w	r4, r3, ip, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 801b010:	f10c 0501 	add.w	r5, ip, #1
      reg = OCTOSPIM->PCR[index];
 801b014:	6864      	ldr	r4, [r4, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 801b016:	f014 0f01 	tst.w	r4, #1
 801b01a:	d005      	beq.n	801b028 <HAL_OSPIM_Config+0x5c>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 801b01c:	ea84 0c07 	eor.w	ip, r4, r7
 801b020:	f01c 0f02 	tst.w	ip, #2
          cfg->ClkPort = index + 1U;
 801b024:	bf08      	it	eq
 801b026:	6005      	streq	r5, [r0, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 801b028:	f014 0f10 	tst.w	r4, #16
 801b02c:	d005      	beq.n	801b03a <HAL_OSPIM_Config+0x6e>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 801b02e:	ea84 0c07 	eor.w	ip, r4, r7
 801b032:	f01c 0f20 	tst.w	ip, #32
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 801b036:	bf08      	it	eq
 801b038:	6045      	streq	r5, [r0, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 801b03a:	f414 7f80 	tst.w	r4, #256	@ 0x100
 801b03e:	d005      	beq.n	801b04c <HAL_OSPIM_Config+0x80>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 801b040:	ea84 0c07 	eor.w	ip, r4, r7
 801b044:	f41c 7f00 	tst.w	ip, #512	@ 0x200
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 801b048:	bf08      	it	eq
 801b04a:	6085      	streq	r5, [r0, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 801b04c:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 801b050:	d00d      	beq.n	801b06e <HAL_OSPIM_Config+0xa2>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 801b052:	ea84 0c07 	eor.w	ip, r4, r7
 801b056:	f41c 2f80 	tst.w	ip, #262144	@ 0x40000
 801b05a:	d108      	bne.n	801b06e <HAL_OSPIM_Config+0xa2>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 801b05c:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 801b060:	bf0c      	ite	eq
 801b062:	f445 3c80 	orreq.w	ip, r5, #65536	@ 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 801b066:	f045 7c80 	orrne.w	ip, r5, #16777216	@ 0x1000000
 801b06a:	f8c0 c00c 	str.w	ip, [r0, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 801b06e:	f014 7f80 	tst.w	r4, #16777216	@ 0x1000000
 801b072:	d00b      	beq.n	801b08c <HAL_OSPIM_Config+0xc0>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 801b074:	ea84 0c07 	eor.w	ip, r4, r7
 801b078:	f01c 6f80 	tst.w	ip, #67108864	@ 0x4000000
 801b07c:	d106      	bne.n	801b08c <HAL_OSPIM_Config+0xc0>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 801b07e:	01a4      	lsls	r4, r4, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 801b080:	bf54      	ite	pl
 801b082:	f445 3480 	orrpl.w	r4, r5, #65536	@ 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 801b086:	f045 7480 	orrmi.w	r4, r5, #16777216	@ 0x1000000
 801b08a:	6104      	str	r4, [r0, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 801b08c:	2d02      	cmp	r5, #2
 801b08e:	f04f 0c01 	mov.w	ip, #1
 801b092:	d1bb      	bne.n	801b00c <HAL_OSPIM_Config+0x40>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 801b094:	45e6      	cmp	lr, ip
 801b096:	f100 0014 	add.w	r0, r0, #20
 801b09a:	f000 8122 	beq.w	801b2e2 <HAL_OSPIM_Config+0x316>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 801b09e:	4c85      	ldr	r4, [pc, #532]	@ (801b2b4 <HAL_OSPIM_Config+0x2e8>)
 801b0a0:	6820      	ldr	r0, [r4, #0]
 801b0a2:	ea10 000c 	ands.w	r0, r0, ip
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 801b0a6:	bf1e      	ittt	ne
 801b0a8:	6820      	ldrne	r0, [r4, #0]
 801b0aa:	f020 0001 	bicne.w	r0, r0, #1
 801b0ae:	6020      	strne	r0, [r4, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 801b0b0:	4c82      	ldr	r4, [pc, #520]	@ (801b2bc <HAL_OSPIM_Config+0x2f0>)
 801b0b2:	6825      	ldr	r5, [r4, #0]
      ospi_enabled |= 0x1U;
 801b0b4:	bf18      	it	ne
 801b0b6:	4660      	movne	r0, ip
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 801b0b8:	07ee      	lsls	r6, r5, #31
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 801b0ba:	bf49      	itett	mi
 801b0bc:	6825      	ldrmi	r5, [r4, #0]
 801b0be:	9001      	strpl	r0, [sp, #4]
 801b0c0:	f025 0501 	bicmi.w	r5, r5, #1
 801b0c4:	6025      	strmi	r5, [r4, #0]
      ospi_enabled |= 0x2U;
 801b0c6:	bf44      	itt	mi
 801b0c8:	f040 0402 	orrmi.w	r4, r0, #2
 801b0cc:	9401      	strmi	r4, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 801b0ce:	2514      	movs	r5, #20
 801b0d0:	ac0c      	add	r4, sp, #48	@ 0x30
 801b0d2:	fb05 4502 	mla	r5, r5, r2, r4
 801b0d6:	f855 4c20 	ldr.w	r4, [r5, #-32]
 801b0da:	3c01      	subs	r4, #1
 801b0dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b0e0:	6866      	ldr	r6, [r4, #4]
 801b0e2:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 801b0e6:	6066      	str	r6, [r4, #4]
      if (IOM_cfg[instance].ClkPort != 0U)
 801b0e8:	f855 4c28 	ldr.w	r4, [r5, #-40]
 801b0ec:	b384      	cbz	r4, 801b150 <HAL_OSPIM_Config+0x184>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 801b0ee:	3c01      	subs	r4, #1
 801b0f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b0f4:	6866      	ldr	r6, [r4, #4]
 801b0f6:	f026 0601 	bic.w	r6, r6, #1
 801b0fa:	6066      	str	r6, [r4, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 801b0fc:	f855 4c24 	ldr.w	r4, [r5, #-36]
 801b100:	b134      	cbz	r4, 801b110 <HAL_OSPIM_Config+0x144>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 801b102:	3c01      	subs	r4, #1
 801b104:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b108:	6865      	ldr	r5, [r4, #4]
 801b10a:	f025 0510 	bic.w	r5, r5, #16
 801b10e:	6065      	str	r5, [r4, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801b110:	2414      	movs	r4, #20
 801b112:	ad0c      	add	r5, sp, #48	@ 0x30
 801b114:	fb04 5402 	mla	r4, r4, r2, r5
 801b118:	f854 4c1c 	ldr.w	r4, [r4, #-28]
 801b11c:	b144      	cbz	r4, 801b130 <HAL_OSPIM_Config+0x164>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 801b11e:	3c01      	subs	r4, #1
 801b120:	f004 0401 	and.w	r4, r4, #1
 801b124:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b128:	6865      	ldr	r5, [r4, #4]
 801b12a:	f425 3580 	bic.w	r5, r5, #65536	@ 0x10000
 801b12e:	6065      	str	r5, [r4, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801b130:	2414      	movs	r4, #20
 801b132:	ad0c      	add	r5, sp, #48	@ 0x30
 801b134:	fb04 5402 	mla	r4, r4, r2, r5
 801b138:	f854 4c18 	ldr.w	r4, [r4, #-24]
 801b13c:	b144      	cbz	r4, 801b150 <HAL_OSPIM_Config+0x184>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 801b13e:	3c01      	subs	r4, #1
 801b140:	f004 0401 	and.w	r4, r4, #1
 801b144:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b148:	6865      	ldr	r5, [r4, #4]
 801b14a:	f025 7580 	bic.w	r5, r5, #16777216	@ 0x1000000
 801b14e:	6065      	str	r5, [r4, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 801b150:	ac0c      	add	r4, sp, #48	@ 0x30
 801b152:	2514      	movs	r5, #20
 801b154:	fb05 4509 	mla	r5, r5, r9, r4
 801b158:	f8d1 b000 	ldr.w	fp, [r1]
 801b15c:	f855 4c28 	ldr.w	r4, [r5, #-40]
 801b160:	9400      	str	r4, [sp, #0]
 801b162:	9e00      	ldr	r6, [sp, #0]
 801b164:	f855 ec20 	ldr.w	lr, [r5, #-32]
 801b168:	f8d1 c008 	ldr.w	ip, [r1, #8]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 801b16c:	684c      	ldr	r4, [r1, #4]
 801b16e:	f855 5c24 	ldr.w	r5, [r5, #-36]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 801b172:	45b3      	cmp	fp, r6
 801b174:	d013      	beq.n	801b19e <HAL_OSPIM_Config+0x1d2>
 801b176:	45f4      	cmp	ip, lr
 801b178:	d011      	beq.n	801b19e <HAL_OSPIM_Config+0x1d2>
 801b17a:	42ac      	cmp	r4, r5
 801b17c:	d100      	bne.n	801b180 <HAL_OSPIM_Config+0x1b4>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 801b17e:	b974      	cbnz	r4, 801b19e <HAL_OSPIM_Config+0x1d2>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 801b180:	ae0c      	add	r6, sp, #48	@ 0x30
 801b182:	f04f 0a14 	mov.w	sl, #20
 801b186:	fb0a 6a09 	mla	sl, sl, r9, r6
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 801b18a:	68ce      	ldr	r6, [r1, #12]
 801b18c:	f85a 7c1c 	ldr.w	r7, [sl, #-28]
 801b190:	42be      	cmp	r6, r7
 801b192:	d004      	beq.n	801b19e <HAL_OSPIM_Config+0x1d2>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 801b194:	f85a 8c18 	ldr.w	r8, [sl, #-24]
 801b198:	690e      	ldr	r6, [r1, #16]
 801b19a:	4546      	cmp	r6, r8
 801b19c:	d13c      	bne.n	801b218 <HAL_OSPIM_Config+0x24c>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 801b19e:	9e00      	ldr	r6, [sp, #0]
 801b1a0:	f106 38ff 	add.w	r8, r6, #4294967295
 801b1a4:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 801b1a8:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801b1ac:	f026 0601 	bic.w	r6, r6, #1
 801b1b0:	f8c8 6004 	str.w	r6, [r8, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 801b1b4:	b135      	cbz	r5, 801b1c4 <HAL_OSPIM_Config+0x1f8>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 801b1b6:	3d01      	subs	r5, #1
 801b1b8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801b1bc:	686e      	ldr	r6, [r5, #4]
 801b1be:	f026 0610 	bic.w	r6, r6, #16
 801b1c2:	606e      	str	r6, [r5, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 801b1c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b1c8:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801b1cc:	ae0c      	add	r6, sp, #48	@ 0x30
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 801b1ce:	f8de 5004 	ldr.w	r5, [lr, #4]
 801b1d2:	f425 7580 	bic.w	r5, r5, #256	@ 0x100
 801b1d6:	f8ce 5004 	str.w	r5, [lr, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801b1da:	2514      	movs	r5, #20
 801b1dc:	fb05 6509 	mla	r5, r5, r9, r6
 801b1e0:	f855 5c1c 	ldr.w	r5, [r5, #-28]
 801b1e4:	b145      	cbz	r5, 801b1f8 <HAL_OSPIM_Config+0x22c>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801b1e6:	3d01      	subs	r5, #1
 801b1e8:	f005 0501 	and.w	r5, r5, #1
 801b1ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801b1f0:	686e      	ldr	r6, [r5, #4]
 801b1f2:	f426 3680 	bic.w	r6, r6, #65536	@ 0x10000
 801b1f6:	606e      	str	r6, [r5, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801b1f8:	2514      	movs	r5, #20
 801b1fa:	ae0c      	add	r6, sp, #48	@ 0x30
 801b1fc:	fb05 6909 	mla	r9, r5, r9, r6
 801b200:	f859 5c18 	ldr.w	r5, [r9, #-24]
 801b204:	b145      	cbz	r5, 801b218 <HAL_OSPIM_Config+0x24c>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801b206:	3d01      	subs	r5, #1
 801b208:	f005 0501 	and.w	r5, r5, #1
 801b20c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801b210:	686e      	ldr	r6, [r5, #4]
 801b212:	f026 7680 	bic.w	r6, r6, #16777216	@ 0x1000000
 801b216:	606e      	str	r6, [r5, #4]
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 801b218:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b21c:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 801b220:	f10b 3bff 	add.w	fp, fp, #4294967295
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 801b224:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b228:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
 801b22c:	ea45 2542 	orr.w	r5, r5, r2, lsl #9
 801b230:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 801b234:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 801b238:	f8cc 5004 	str.w	r5, [ip, #4]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 801b23c:	f8db 5004 	ldr.w	r5, [fp, #4]
 801b240:	f025 0503 	bic.w	r5, r5, #3
 801b244:	ea45 0542 	orr.w	r5, r5, r2, lsl #1
 801b248:	f045 0501 	orr.w	r5, r5, #1
 801b24c:	f8cb 5004 	str.w	r5, [fp, #4]
      if (cfg->DQSPort != 0U)
 801b250:	b154      	cbz	r4, 801b268 <HAL_OSPIM_Config+0x29c>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 801b252:	3c01      	subs	r4, #1
 801b254:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b258:	6865      	ldr	r5, [r4, #4]
 801b25a:	f025 0530 	bic.w	r5, r5, #48	@ 0x30
 801b25e:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
 801b262:	f045 0510 	orr.w	r5, r5, #16
 801b266:	6065      	str	r5, [r4, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 801b268:	68cc      	ldr	r4, [r1, #12]
 801b26a:	03e5      	lsls	r5, r4, #15
 801b26c:	d53b      	bpl.n	801b2e6 <HAL_OSPIM_Config+0x31a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801b26e:	3c01      	subs	r4, #1
 801b270:	f004 0401 	and.w	r4, r4, #1
 801b274:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b278:	6865      	ldr	r5, [r4, #4]
 801b27a:	f425 25e0 	bic.w	r5, r5, #458752	@ 0x70000
 801b27e:	ea45 4582 	orr.w	r5, r5, r2, lsl #18
 801b282:	f445 3580 	orr.w	r5, r5, #65536	@ 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801b286:	6065      	str	r5, [r4, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 801b288:	6909      	ldr	r1, [r1, #16]
 801b28a:	03cc      	lsls	r4, r1, #15
 801b28c:	d53a      	bpl.n	801b304 <HAL_OSPIM_Config+0x338>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801b28e:	3901      	subs	r1, #1
 801b290:	f001 0101 	and.w	r1, r1, #1
 801b294:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801b298:	684b      	ldr	r3, [r1, #4]
 801b29a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 801b29e:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 801b2a2:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 801b2a6:	604b      	str	r3, [r1, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 801b2a8:	b168      	cbz	r0, 801b2c6 <HAL_OSPIM_Config+0x2fa>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 801b2aa:	4a02      	ldr	r2, [pc, #8]	@ (801b2b4 <HAL_OSPIM_Config+0x2e8>)
 801b2ac:	6813      	ldr	r3, [r2, #0]
 801b2ae:	f043 0301 	orr.w	r3, r3, #1
 801b2b2:	e007      	b.n	801b2c4 <HAL_OSPIM_Config+0x2f8>
 801b2b4:	a0001000 	.word	0xa0001000
 801b2b8:	50061c00 	.word	0x50061c00
 801b2bc:	a0001400 	.word	0xa0001400
 801b2c0:	04040222 	.word	0x04040222
 801b2c4:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 801b2c6:	9b01      	ldr	r3, [sp, #4]
 801b2c8:	079b      	lsls	r3, r3, #30
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 801b2ca:	bf44      	itt	mi
 801b2cc:	4a15      	ldrmi	r2, [pc, #84]	@ (801b324 <HAL_OSPIM_Config+0x358>)
 801b2ce:	6813      	ldrmi	r3, [r2, #0]
}
 801b2d0:	f04f 0000 	mov.w	r0, #0
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 801b2d4:	bf44      	itt	mi
 801b2d6:	f043 0301 	orrmi.w	r3, r3, #1
 801b2da:	6013      	strmi	r3, [r2, #0]
}
 801b2dc:	b00d      	add	sp, #52	@ 0x34
 801b2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2e2:	46ae      	mov	lr, r5
 801b2e4:	e686      	b.n	801aff4 <HAL_OSPIM_Config+0x28>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801b2e6:	2c00      	cmp	r4, #0
 801b2e8:	d0ce      	beq.n	801b288 <HAL_OSPIM_Config+0x2bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801b2ea:	3c01      	subs	r4, #1
 801b2ec:	f004 0401 	and.w	r4, r4, #1
 801b2f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801b2f4:	6865      	ldr	r5, [r4, #4]
 801b2f6:	f025 65e0 	bic.w	r5, r5, #117440512	@ 0x7000000
 801b2fa:	ea45 6582 	orr.w	r5, r5, r2, lsl #26
 801b2fe:	f045 7580 	orr.w	r5, r5, #16777216	@ 0x1000000
 801b302:	e7c0      	b.n	801b286 <HAL_OSPIM_Config+0x2ba>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801b304:	2900      	cmp	r1, #0
 801b306:	d0cf      	beq.n	801b2a8 <HAL_OSPIM_Config+0x2dc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801b308:	3901      	subs	r1, #1
 801b30a:	f001 0101 	and.w	r1, r1, #1
 801b30e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801b312:	6859      	ldr	r1, [r3, #4]
 801b314:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 801b318:	ea41 6282 	orr.w	r2, r1, r2, lsl #26
 801b31c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 801b320:	605a      	str	r2, [r3, #4]
 801b322:	e7c1      	b.n	801b2a8 <HAL_OSPIM_Config+0x2dc>
 801b324:	a0001400 	.word	0xa0001400

0801b328 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 801b328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801b32a:	4604      	mov	r4, r0
 801b32c:	b1f0      	cbz	r0, 801b36c <HAL_PCD_Init+0x44>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801b32e:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 801b332:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801b336:	b91b      	cbnz	r3, 801b340 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801b338:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801b33c:	f016 ff76 	bl	803222c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801b340:	2303      	movs	r3, #3
 801b342:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 801b346:	2300      	movs	r3, #0
 801b348:	71a3      	strb	r3, [r4, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801b34a:	6820      	ldr	r0, [r4, #0]
 801b34c:	f003 f880 	bl	801e450 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801b350:	7c23      	ldrb	r3, [r4, #16]
 801b352:	f88d 3000 	strb.w	r3, [sp]
 801b356:	1d25      	adds	r5, r4, #4
 801b358:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801b35c:	6820      	ldr	r0, [r4, #0]
 801b35e:	f002 ffc8 	bl	801e2f2 <USB_CoreInit>
 801b362:	4601      	mov	r1, r0
 801b364:	b130      	cbz	r0, 801b374 <HAL_PCD_Init+0x4c>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801b366:	2302      	movs	r3, #2
 801b368:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 801b36c:	2501      	movs	r5, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 801b36e:	4628      	mov	r0, r5
 801b370:	b003      	add	sp, #12
 801b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 801b374:	6820      	ldr	r0, [r4, #0]
 801b376:	f003 f871 	bl	801e45c <USB_SetCurrentMode>
 801b37a:	2800      	cmp	r0, #0
 801b37c:	d1f3      	bne.n	801b366 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b37e:	7926      	ldrb	r6, [r4, #4]
 801b380:	f104 0314 	add.w	r3, r4, #20
    hpcd->IN_ep[i].is_in = 1U;
 801b384:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801b386:	4602      	mov	r2, r0
 801b388:	b2c1      	uxtb	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b38a:	428e      	cmp	r6, r1
 801b38c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 801b390:	d821      	bhi.n	801b3d6 <HAL_PCD_Init+0xae>
 801b392:	2100      	movs	r1, #0
 801b394:	f504 7315 	add.w	r3, r4, #596	@ 0x254
    hpcd->OUT_ep[i].is_in = 0U;
 801b398:	460a      	mov	r2, r1
 801b39a:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b39c:	4286      	cmp	r6, r0
 801b39e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 801b3a2:	d826      	bhi.n	801b3f2 <HAL_PCD_Init+0xca>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801b3a4:	7c23      	ldrb	r3, [r4, #16]
 801b3a6:	f88d 3000 	strb.w	r3, [sp]
 801b3aa:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801b3ae:	6820      	ldr	r0, [r4, #0]
 801b3b0:	f003 f8d0 	bl	801e554 <USB_DevInit>
 801b3b4:	4605      	mov	r5, r0
 801b3b6:	2800      	cmp	r0, #0
 801b3b8:	d1d5      	bne.n	801b366 <HAL_PCD_Init+0x3e>
  hpcd->State = HAL_PCD_STATE_READY;
 801b3ba:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 801b3bc:	7460      	strb	r0, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 801b3be:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 801b3c2:	7b23      	ldrb	r3, [r4, #12]
 801b3c4:	2b01      	cmp	r3, #1
 801b3c6:	d102      	bne.n	801b3ce <HAL_PCD_Init+0xa6>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801b3c8:	4620      	mov	r0, r4
 801b3ca:	f000 fca1 	bl	801bd10 <HAL_PCDEx_ActivateLPM>
  (void)USB_DevDisconnect(hpcd->Instance);
 801b3ce:	6820      	ldr	r0, [r4, #0]
 801b3d0:	f003 fbae 	bl	801eb30 <USB_DevDisconnect>
  return HAL_OK;
 801b3d4:	e7cb      	b.n	801b36e <HAL_PCD_Init+0x46>
    hpcd->IN_ep[i].tx_fifo_num = i;
 801b3d6:	f823 0c0a 	strh.w	r0, [r3, #-10]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801b3da:	e943 2207 	strd	r2, r2, [r3, #-28]
    hpcd->IN_ep[i].is_in = 1U;
 801b3de:	f803 7c23 	strb.w	r7, [r3, #-35]
    hpcd->IN_ep[i].num = i;
 801b3e2:	f803 1c24 	strb.w	r1, [r3, #-36]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801b3e6:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->IN_ep[i].xfer_len = 0U;
 801b3ea:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b3ee:	3001      	adds	r0, #1
 801b3f0:	e7ca      	b.n	801b388 <HAL_PCD_Init+0x60>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801b3f2:	e943 2207 	strd	r2, r2, [r3, #-28]
    hpcd->OUT_ep[i].is_in = 0U;
 801b3f6:	f803 2c23 	strb.w	r2, [r3, #-35]
    hpcd->OUT_ep[i].num = i;
 801b3fa:	f803 0c24 	strb.w	r0, [r3, #-36]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801b3fe:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801b402:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b406:	3101      	adds	r1, #1
 801b408:	e7c7      	b.n	801b39a <HAL_PCD_Init+0x72>

0801b40a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801b40a:	b510      	push	{r4, lr}
 801b40c:	4604      	mov	r4, r0
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b40e:	6800      	ldr	r0, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 801b410:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 801b414:	2b01      	cmp	r3, #1
 801b416:	d012      	beq.n	801b43e <HAL_PCD_Start+0x34>
 801b418:	2301      	movs	r3, #1
 801b41a:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 801b41e:	7b63      	ldrb	r3, [r4, #13]
 801b420:	2b01      	cmp	r3, #1
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801b422:	bf02      	ittt	eq
 801b424:	6b83      	ldreq	r3, [r0, #56]	@ 0x38
 801b426:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
 801b42a:	6383      	streq	r3, [r0, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 801b42c:	f003 f80a 	bl	801e444 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801b430:	6820      	ldr	r0, [r4, #0]
 801b432:	f003 fb6f 	bl	801eb14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801b436:	2000      	movs	r0, #0
 801b438:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 801b43c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 801b43e:	2002      	movs	r0, #2
 801b440:	e7fc      	b.n	801b43c <HAL_PCD_Start+0x32>

0801b442 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 801b442:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 801b444:	f890 2494 	ldrb.w	r2, [r0, #1172]	@ 0x494
 801b448:	2a01      	cmp	r2, #1
{
 801b44a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 801b44c:	d00a      	beq.n	801b464 <HAL_PCD_SetAddress+0x22>
 801b44e:	2201      	movs	r2, #1
 801b450:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494
  hpcd->USB_Address = address;
 801b454:	7441      	strb	r1, [r0, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801b456:	6800      	ldr	r0, [r0, #0]
 801b458:	f003 fb4c 	bl	801eaf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801b45c:	2000      	movs	r0, #0
 801b45e:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 801b462:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 801b464:	2002      	movs	r0, #2
 801b466:	e7fc      	b.n	801b462 <HAL_PCD_SetAddress+0x20>

0801b468 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801b468:	b570      	push	{r4, r5, r6, lr}
 801b46a:	f001 060f 	and.w	r6, r1, #15
 801b46e:	eb06 04c6 	add.w	r4, r6, r6, lsl #3
  HAL_StatusTypeDef ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801b472:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 801b476:	4605      	mov	r5, r0
 801b478:	ea4f 0484 	mov.w	r4, r4, lsl #2
 801b47c:	f04f 0024 	mov.w	r0, #36	@ 0x24
  if ((ep_addr & 0x80U) == 0x80U)
 801b480:	d020      	beq.n	801b4c4 <HAL_PCD_EP_Open+0x5c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 801b482:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b486:	f104 0114 	add.w	r1, r4, #20
    ep->is_in = 1U;
 801b48a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b48c:	4429      	add	r1, r5
    ep->is_in = 1U;
 801b48e:	7544      	strb	r4, [r0, #21]
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 801b490:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801b494:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 801b496:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801b498:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 801b49a:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 801b49c:	b102      	cbz	r2, 801b4a0 <HAL_PCD_EP_Open+0x38>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 801b49e:	834e      	strh	r6, [r1, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801b4a0:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 801b4a2:	bf04      	itt	eq
 801b4a4:	2300      	moveq	r3, #0
 801b4a6:	714b      	strbeq	r3, [r1, #5]
  }

  __HAL_LOCK(hpcd);
 801b4a8:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 801b4ac:	2b01      	cmp	r3, #1
 801b4ae:	d012      	beq.n	801b4d6 <HAL_PCD_EP_Open+0x6e>
 801b4b0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801b4b2:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 801b4b4:	f885 3494 	strb.w	r3, [r5, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801b4b8:	f003 f8fc 	bl	801e6b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801b4bc:	2000      	movs	r0, #0
 801b4be:	f885 0494 	strb.w	r0, [r5, #1172]	@ 0x494

  return ret;
}
 801b4c2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 801b4c4:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b4c8:	f504 7115 	add.w	r1, r4, #596	@ 0x254
    ep->is_in = 0U;
 801b4cc:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b4ce:	4429      	add	r1, r5
    ep->is_in = 0U;
 801b4d0:	f880 4255 	strb.w	r4, [r0, #597]	@ 0x255
 801b4d4:	e7dc      	b.n	801b490 <HAL_PCD_EP_Open+0x28>
  __HAL_LOCK(hpcd);
 801b4d6:	2002      	movs	r0, #2
 801b4d8:	e7f3      	b.n	801b4c2 <HAL_PCD_EP_Open+0x5a>

0801b4da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b4da:	b510      	push	{r4, lr}
 801b4dc:	4604      	mov	r4, r0
 801b4de:	f001 000f 	and.w	r0, r1, #15
 801b4e2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801b4e6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 801b4ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801b4ee:	f04f 0224 	mov.w	r2, #36	@ 0x24
 801b4f2:	d015      	beq.n	801b520 <HAL_PCD_EP_Close+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 801b4f4:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b4f8:	f103 0114 	add.w	r1, r3, #20
    ep->is_in = 1U;
 801b4fc:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b4fe:	4421      	add	r1, r4
    ep->is_in = 1U;
 801b500:	7553      	strb	r3, [r2, #21]
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 801b502:	7008      	strb	r0, [r1, #0]

  __HAL_LOCK(hpcd);
 801b504:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 801b508:	2b01      	cmp	r3, #1
 801b50a:	d012      	beq.n	801b532 <HAL_PCD_EP_Close+0x58>
 801b50c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801b50e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 801b510:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801b514:	f003 f90e 	bl	801e734 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801b518:	2000      	movs	r0, #0
 801b51a:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
  return HAL_OK;
}
 801b51e:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 801b520:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b524:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
 801b528:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b52a:	4421      	add	r1, r4
    ep->is_in = 0U;
 801b52c:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
 801b530:	e7e7      	b.n	801b502 <HAL_PCD_EP_Close+0x28>
  __HAL_LOCK(hpcd);
 801b532:	2002      	movs	r0, #2
 801b534:	e7f3      	b.n	801b51e <HAL_PCD_EP_Close+0x44>

0801b536 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801b536:	b570      	push	{r4, r5, r6, lr}
 801b538:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801b53c:	2624      	movs	r6, #36	@ 0x24
 801b53e:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 801b542:	2500      	movs	r5, #0
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 801b544:	f884 1254 	strb.w	r1, [r4, #596]	@ 0x254
  ep->xfer_len = len;
 801b548:	e9c4 2398 	strd	r2, r3, [r4, #608]	@ 0x260
  ep->xfer_count = 0U;
 801b54c:	f8c4 5268 	str.w	r5, [r4, #616]	@ 0x268
  ep->is_in = 0U;
 801b550:	f884 5255 	strb.w	r5, [r4, #597]	@ 0x255

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801b554:	f504 7115 	add.w	r1, r4, #596	@ 0x254
 801b558:	6800      	ldr	r0, [r0, #0]
 801b55a:	f003 f993 	bl	801e884 <USB_EPStartXfer>

  return HAL_OK;
}
 801b55e:	4628      	mov	r0, r5
 801b560:	bd70      	pop	{r4, r5, r6, pc}

0801b562 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801b562:	f001 010f 	and.w	r1, r1, #15
 801b566:	2324      	movs	r3, #36	@ 0x24
 801b568:	fb03 0001 	mla	r0, r3, r1, r0
}
 801b56c:	f8d0 0268 	ldr.w	r0, [r0, #616]	@ 0x268
 801b570:	4770      	bx	lr

0801b572 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801b572:	b570      	push	{r4, r5, r6, lr}
 801b574:	f001 010f 	and.w	r1, r1, #15
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801b578:	2624      	movs	r6, #36	@ 0x24
 801b57a:	fb06 0401 	mla	r4, r6, r1, r0
  ep->xfer_len = len;
 801b57e:	e9c4 2308 	strd	r2, r3, [r4, #32]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 801b582:	2500      	movs	r5, #0
  ep->is_in = 1U;
 801b584:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 801b586:	7521      	strb	r1, [r4, #20]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b588:	4621      	mov	r1, r4
  ep->xfer_count = 0U;
 801b58a:	62a5      	str	r5, [r4, #40]	@ 0x28
  ep->is_in = 1U;
 801b58c:	7563      	strb	r3, [r4, #21]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801b58e:	3114      	adds	r1, #20
 801b590:	6800      	ldr	r0, [r0, #0]
 801b592:	f003 f977 	bl	801e884 <USB_EPStartXfer>

  return HAL_OK;
}
 801b596:	4628      	mov	r0, r5
 801b598:	bd70      	pop	{r4, r5, r6, pc}

0801b59a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b59a:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801b59c:	7903      	ldrb	r3, [r0, #4]
 801b59e:	f001 050f 	and.w	r5, r1, #15
 801b5a2:	42ab      	cmp	r3, r5
{
 801b5a4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801b5a6:	d32a      	bcc.n	801b5fe <HAL_PCD_EP_SetStall+0x64>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 801b5a8:	f011 0f80 	tst.w	r1, #128	@ 0x80
 801b5ac:	f04f 0024 	mov.w	r0, #36	@ 0x24
 801b5b0:	d01c      	beq.n	801b5ec <HAL_PCD_EP_SetStall+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b5b2:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 801b5b6:	fb00 4005 	mla	r0, r0, r5, r4
 801b5ba:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b5bc:	3114      	adds	r1, #20
    ep->is_in = 1U;
 801b5be:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr];
    ep->is_in = 0U;
  }

  ep->is_stall = 1U;
 801b5c0:	2301      	movs	r3, #1
 801b5c2:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801b5c4:	700d      	strb	r5, [r1, #0]

  __HAL_LOCK(hpcd);
 801b5c6:	f894 2494 	ldrb.w	r2, [r4, #1172]	@ 0x494
 801b5ca:	429a      	cmp	r2, r3
 801b5cc:	d019      	beq.n	801b602 <HAL_PCD_EP_SetStall+0x68>

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801b5ce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 801b5d0:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPSetStall(hpcd->Instance, ep);
 801b5d4:	f003 fa3a 	bl	801ea4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801b5d8:	b925      	cbnz	r5, 801b5e4 <HAL_PCD_EP_SetStall+0x4a>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 801b5da:	6820      	ldr	r0, [r4, #0]
 801b5dc:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 801b5e0:	f003 faf4 	bl	801ebcc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801b5e4:	2000      	movs	r0, #0
 801b5e6:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494

  return HAL_OK;
}
 801b5ea:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 801b5ec:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 801b5f0:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 801b5f2:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	f882 3255 	strb.w	r3, [r2, #597]	@ 0x255
 801b5fc:	e7e0      	b.n	801b5c0 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 801b5fe:	2001      	movs	r0, #1
 801b600:	e7f3      	b.n	801b5ea <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 801b602:	2002      	movs	r0, #2
 801b604:	e7f1      	b.n	801b5ea <HAL_PCD_EP_SetStall+0x50>

0801b606 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801b606:	b538      	push	{r3, r4, r5, lr}
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801b608:	7903      	ldrb	r3, [r0, #4]
 801b60a:	f001 020f 	and.w	r2, r1, #15
 801b60e:	4293      	cmp	r3, r2
{
 801b610:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801b612:	d329      	bcc.n	801b668 <HAL_PCD_EP_ClrStall+0x62>
  {
    return HAL_ERROR;
  }

  if ((0x80U & ep_addr) == 0x80U)
 801b614:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
 801b618:	f011 0f80 	tst.w	r1, #128	@ 0x80
 801b61c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801b620:	f04f 0024 	mov.w	r0, #36	@ 0x24
 801b624:	d017      	beq.n	801b656 <HAL_PCD_EP_ClrStall+0x50>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 1U;
 801b626:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b62a:	f103 0114 	add.w	r1, r3, #20
    ep->is_in = 1U;
 801b62e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b630:	4421      	add	r1, r4
    ep->is_in = 1U;
 801b632:	7543      	strb	r3, [r0, #21]
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->is_stall = 0U;
 801b634:	2500      	movs	r5, #0
 801b636:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801b638:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 801b63a:	f894 3494 	ldrb.w	r3, [r4, #1172]	@ 0x494
 801b63e:	2b01      	cmp	r3, #1
 801b640:	d014      	beq.n	801b66c <HAL_PCD_EP_ClrStall+0x66>
 801b642:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801b644:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 801b646:	f884 3494 	strb.w	r3, [r4, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801b64a:	f003 fa2a 	bl	801eaa2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801b64e:	f884 5494 	strb.w	r5, [r4, #1172]	@ 0x494

  return HAL_OK;
 801b652:	4628      	mov	r0, r5
}
 801b654:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 801b656:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b65a:	f503 7115 	add.w	r1, r3, #596	@ 0x254
    ep->is_in = 0U;
 801b65e:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b660:	4421      	add	r1, r4
    ep->is_in = 0U;
 801b662:	f880 3255 	strb.w	r3, [r0, #597]	@ 0x255
 801b666:	e7e5      	b.n	801b634 <HAL_PCD_EP_ClrStall+0x2e>
    return HAL_ERROR;
 801b668:	2001      	movs	r0, #1
 801b66a:	e7f3      	b.n	801b654 <HAL_PCD_EP_ClrStall+0x4e>
  __HAL_LOCK(hpcd);
 801b66c:	2002      	movs	r0, #2
 801b66e:	e7f1      	b.n	801b654 <HAL_PCD_EP_ClrStall+0x4e>

0801b670 <HAL_PCD_EP_Abort>:
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 801b670:	f001 030f 	and.w	r3, r1, #15
 801b674:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 801b678:	060a      	lsls	r2, r1, #24
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b67a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801b67e:	bf4c      	ite	mi
 801b680:	f103 0114 	addmi.w	r1, r3, #20
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801b684:	f503 7115 	addpl.w	r1, r3, #596	@ 0x254
 801b688:	4401      	add	r1, r0
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 801b68a:	6800      	ldr	r0, [r0, #0]
 801b68c:	f003 b8a8 	b.w	801e7e0 <USB_EPStopXfer>

0801b690 <HAL_PCD_IRQHandler>:
{
 801b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b694:	6806      	ldr	r6, [r0, #0]
{
 801b696:	b087      	sub	sp, #28
 801b698:	4604      	mov	r4, r0
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 801b69a:	4630      	mov	r0, r6
 801b69c:	f003 fa84 	bl	801eba8 <USB_GetMode>
 801b6a0:	9001      	str	r0, [sp, #4]
 801b6a2:	2800      	cmp	r0, #0
 801b6a4:	f040 8171 	bne.w	801b98a <HAL_PCD_IRQHandler+0x2fa>
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 801b6a8:	6820      	ldr	r0, [r4, #0]
 801b6aa:	f003 fa4f 	bl	801eb4c <USB_ReadInterrupts>
 801b6ae:	2800      	cmp	r0, #0
 801b6b0:	f000 816b 	beq.w	801b98a <HAL_PCD_IRQHandler+0x2fa>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801b6b4:	f8d6 3808 	ldr.w	r3, [r6, #2056]	@ 0x808
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801b6b8:	6820      	ldr	r0, [r4, #0]
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801b6ba:	f3c3 230d 	ubfx	r3, r3, #8, #14
 801b6be:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 801b6c2:	f003 fa43 	bl	801eb4c <USB_ReadInterrupts>
 801b6c6:	0782      	lsls	r2, r0, #30
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801b6c8:	bf48      	it	mi
 801b6ca:	6822      	ldrmi	r2, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801b6cc:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801b6ce:	bf42      	ittt	mi
 801b6d0:	6953      	ldrmi	r3, [r2, #20]
 801b6d2:	f003 0302 	andmi.w	r3, r3, #2
 801b6d6:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801b6d8:	f003 fa38 	bl	801eb4c <USB_ReadInterrupts>
 801b6dc:	06c3      	lsls	r3, r0, #27
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 801b6de:	f506 6500 	add.w	r5, r6, #2048	@ 0x800
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801b6e2:	d52d      	bpl.n	801b740 <HAL_PCD_IRQHandler+0xb0>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801b6e4:	6822      	ldr	r2, [r4, #0]
 801b6e6:	6993      	ldr	r3, [r2, #24]
 801b6e8:	f023 0310 	bic.w	r3, r3, #16
 801b6ec:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 801b6ee:	f8d6 8020 	ldr.w	r8, [r6, #32]
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801b6f2:	f408 13f0 	and.w	r3, r8, #1966080	@ 0x1e0000
 801b6f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 801b6fa:	f008 070f 	and.w	r7, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 801b6fe:	f040 8147 	bne.w	801b990 <HAL_PCD_IRQHandler+0x300>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 801b702:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 801b706:	ea18 0f03 	tst.w	r8, r3
 801b70a:	d014      	beq.n	801b736 <HAL_PCD_IRQHandler+0xa6>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801b70c:	2324      	movs	r3, #36	@ 0x24
 801b70e:	fb03 4707 	mla	r7, r3, r7, r4
 801b712:	f3c8 190a 	ubfx	r9, r8, #4, #11
 801b716:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801b71a:	464a      	mov	r2, r9
 801b71c:	4630      	mov	r0, r6
 801b71e:	f003 f975 	bl	801ea0c <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801b722:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801b726:	444b      	add	r3, r9
 801b728:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801b72c:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801b730:	444b      	add	r3, r9
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801b732:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 801b736:	6822      	ldr	r2, [r4, #0]
 801b738:	6993      	ldr	r3, [r2, #24]
 801b73a:	f043 0310 	orr.w	r3, r3, #16
 801b73e:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 801b740:	6820      	ldr	r0, [r4, #0]
 801b742:	f003 fa03 	bl	801eb4c <USB_ReadInterrupts>
 801b746:	0307      	lsls	r7, r0, #12
 801b748:	f100 8135 	bmi.w	801b9b6 <HAL_PCD_IRQHandler+0x326>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 801b74c:	6820      	ldr	r0, [r4, #0]
 801b74e:	f003 f9fd 	bl	801eb4c <USB_ReadInterrupts>
 801b752:	0340      	lsls	r0, r0, #13
 801b754:	d50d      	bpl.n	801b772 <HAL_PCD_IRQHandler+0xe2>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 801b756:	6820      	ldr	r0, [r4, #0]
 801b758:	f003 fa04 	bl	801eb64 <USB_ReadDevAllInEpInterrupt>
 801b75c:	4627      	mov	r7, r4
 801b75e:	9002      	str	r0, [sp, #8]
      while (ep_intr != 0U)
 801b760:	f506 6b10 	add.w	fp, r6, #2304	@ 0x900
      epnum = 0U;
 801b764:	f04f 0a00 	mov.w	sl, #0
      while (ep_intr != 0U)
 801b768:	9b02      	ldr	r3, [sp, #8]
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801b76a:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	f040 819d 	bne.w	801baac <HAL_PCD_IRQHandler+0x41c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 801b772:	6820      	ldr	r0, [r4, #0]
 801b774:	f003 f9ea 	bl	801eb4c <USB_ReadInterrupts>
 801b778:	2800      	cmp	r0, #0
 801b77a:	da13      	bge.n	801b7a4 <HAL_PCD_IRQHandler+0x114>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801b77c:	686b      	ldr	r3, [r5, #4]
 801b77e:	f023 0301 	bic.w	r3, r3, #1
 801b782:	606b      	str	r3, [r5, #4]
      if (hpcd->LPM_State == LPM_L1)
 801b784:	f894 34cc 	ldrb.w	r3, [r4, #1228]	@ 0x4cc
 801b788:	2b01      	cmp	r3, #1
 801b78a:	f040 8222 	bne.w	801bbd2 <HAL_PCD_IRQHandler+0x542>
        hpcd->LPM_State = LPM_L0;
 801b78e:	2100      	movs	r1, #0
 801b790:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801b794:	4620      	mov	r0, r4
 801b796:	f016 fec7 	bl	8032528 <HAL_PCDEx_LPM_Callback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801b79a:	6822      	ldr	r2, [r4, #0]
 801b79c:	6953      	ldr	r3, [r2, #20]
 801b79e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801b7a2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801b7a4:	6820      	ldr	r0, [r4, #0]
 801b7a6:	f003 f9d1 	bl	801eb4c <USB_ReadInterrupts>
 801b7aa:	0500      	lsls	r0, r0, #20
 801b7ac:	d50a      	bpl.n	801b7c4 <HAL_PCD_IRQHandler+0x134>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 801b7ae:	68ab      	ldr	r3, [r5, #8]
 801b7b0:	07d9      	lsls	r1, r3, #31
 801b7b2:	d502      	bpl.n	801b7ba <HAL_PCD_IRQHandler+0x12a>
        HAL_PCD_SuspendCallback(hpcd);
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	f016 fdbf 	bl	8032338 <HAL_PCD_SuspendCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801b7ba:	6822      	ldr	r2, [r4, #0]
 801b7bc:	6953      	ldr	r3, [r2, #20]
 801b7be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b7c2:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 801b7c4:	6820      	ldr	r0, [r4, #0]
 801b7c6:	f003 f9c1 	bl	801eb4c <USB_ReadInterrupts>
 801b7ca:	0102      	lsls	r2, r0, #4
 801b7cc:	d514      	bpl.n	801b7f8 <HAL_PCD_IRQHandler+0x168>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 801b7ce:	6823      	ldr	r3, [r4, #0]
 801b7d0:	695a      	ldr	r2, [r3, #20]
 801b7d2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 801b7d6:	615a      	str	r2, [r3, #20]
      if (hpcd->LPM_State == LPM_L0)
 801b7d8:	f894 24cc 	ldrb.w	r2, [r4, #1228]	@ 0x4cc
 801b7dc:	2a00      	cmp	r2, #0
 801b7de:	f040 81fc 	bne.w	801bbda <HAL_PCD_IRQHandler+0x54a>
        hpcd->LPM_State = LPM_L1;
 801b7e2:	2101      	movs	r1, #1
 801b7e4:	f884 14cc 	strb.w	r1, [r4, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 801b7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b7ea:	f3c3 0383 	ubfx	r3, r3, #2, #4
 801b7ee:	f8c4 34d0 	str.w	r3, [r4, #1232]	@ 0x4d0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801b7f2:	4620      	mov	r0, r4
 801b7f4:	f016 fe98 	bl	8032528 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 801b7f8:	6820      	ldr	r0, [r4, #0]
 801b7fa:	f003 f9a7 	bl	801eb4c <USB_ReadInterrupts>
 801b7fe:	04c3      	lsls	r3, r0, #19
 801b800:	d532      	bpl.n	801b868 <HAL_PCD_IRQHandler+0x1d8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801b802:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801b804:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801b806:	f023 0301 	bic.w	r3, r3, #1
 801b80a:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 801b80c:	2110      	movs	r1, #16
 801b80e:	f002 fe55 	bl	801e4bc <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b812:	7920      	ldrb	r0, [r4, #4]
 801b814:	f506 6310 	add.w	r3, r6, #2304	@ 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801b818:	f64f 317f 	movw	r1, #64383	@ 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801b81c:	9a01      	ldr	r2, [sp, #4]
 801b81e:	4290      	cmp	r0, r2
 801b820:	f200 81df 	bhi.w	801bbe2 <HAL_PCD_IRQHandler+0x552>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 801b824:	69eb      	ldr	r3, [r5, #28]
 801b826:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 801b82a:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801b82c:	7be3      	ldrb	r3, [r4, #15]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	f000 81ef 	beq.w	801bc12 <HAL_PCD_IRQHandler+0x582>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 801b834:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 801b838:	f043 030b 	orr.w	r3, r3, #11
 801b83c:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801b840:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 801b842:	f043 030b 	orr.w	r3, r3, #11
 801b846:	646b      	str	r3, [r5, #68]	@ 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801b848:	f8d6 3800 	ldr.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 801b84c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 801b84e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801b852:	f8c6 3800 	str.w	r3, [r6, #2048]	@ 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 801b856:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 801b85a:	f003 f9b7 	bl	801ebcc <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801b85e:	6822      	ldr	r2, [r4, #0]
 801b860:	6953      	ldr	r3, [r2, #20]
 801b862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801b866:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 801b868:	6820      	ldr	r0, [r4, #0]
 801b86a:	f003 f96f 	bl	801eb4c <USB_ReadInterrupts>
 801b86e:	0487      	lsls	r7, r0, #18
 801b870:	d516      	bpl.n	801b8a0 <HAL_PCD_IRQHandler+0x210>
      (void)USB_ActivateSetup(hpcd->Instance);
 801b872:	6820      	ldr	r0, [r4, #0]
 801b874:	f003 f99c 	bl	801ebb0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 801b878:	6820      	ldr	r0, [r4, #0]
 801b87a:	f002 ff11 	bl	801e6a0 <USB_GetDevSpeed>
 801b87e:	71e0      	strb	r0, [r4, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 801b880:	6827      	ldr	r7, [r4, #0]
 801b882:	f000 ff5b 	bl	801c73c <HAL_RCC_GetHCLKFreq>
 801b886:	79e2      	ldrb	r2, [r4, #7]
 801b888:	4601      	mov	r1, r0
 801b88a:	4638      	mov	r0, r7
 801b88c:	f002 fd6a 	bl	801e364 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 801b890:	4620      	mov	r0, r4
 801b892:	f016 fd3e 	bl	8032312 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 801b896:	6822      	ldr	r2, [r4, #0]
 801b898:	6953      	ldr	r3, [r2, #20]
 801b89a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b89e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801b8a0:	6820      	ldr	r0, [r4, #0]
 801b8a2:	f003 f953 	bl	801eb4c <USB_ReadInterrupts>
 801b8a6:	0700      	lsls	r0, r0, #28
 801b8a8:	d507      	bpl.n	801b8ba <HAL_PCD_IRQHandler+0x22a>
      HAL_PCD_SOFCallback(hpcd);
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	f016 fd2d 	bl	803230a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 801b8b0:	6822      	ldr	r2, [r4, #0]
 801b8b2:	6953      	ldr	r3, [r2, #20]
 801b8b4:	f003 0308 	and.w	r3, r3, #8
 801b8b8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 801b8ba:	6820      	ldr	r0, [r4, #0]
 801b8bc:	f003 f946 	bl	801eb4c <USB_ReadInterrupts>
 801b8c0:	0601      	lsls	r1, r0, #24
 801b8c2:	f100 81b1 	bmi.w	801bc28 <HAL_PCD_IRQHandler+0x598>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801b8c6:	6820      	ldr	r0, [r4, #0]
 801b8c8:	f003 f940 	bl	801eb4c <USB_ReadInterrupts>
 801b8cc:	02c2      	lsls	r2, r0, #11
 801b8ce:	d50c      	bpl.n	801b8ea <HAL_PCD_IRQHandler+0x25a>
 801b8d0:	46a0      	mov	r8, r4
 801b8d2:	f506 6912 	add.w	r9, r6, #2336	@ 0x920
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801b8d6:	2701      	movs	r7, #1
 801b8d8:	7923      	ldrb	r3, [r4, #4]
 801b8da:	42bb      	cmp	r3, r7
 801b8dc:	f200 81bd 	bhi.w	801bc5a <HAL_PCD_IRQHandler+0x5ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801b8e0:	6822      	ldr	r2, [r4, #0]
 801b8e2:	6953      	ldr	r3, [r2, #20]
 801b8e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b8e8:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801b8ea:	6820      	ldr	r0, [r4, #0]
 801b8ec:	f003 f92e 	bl	801eb4c <USB_ReadInterrupts>
 801b8f0:	0283      	lsls	r3, r0, #10
 801b8f2:	d52d      	bpl.n	801b950 <HAL_PCD_IRQHandler+0x2c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801b8f4:	f894 e004 	ldrb.w	lr, [r4, #4]
 801b8f8:	4623      	mov	r3, r4
 801b8fa:	f506 6032 	add.w	r0, r6, #2848	@ 0xb20
 801b8fe:	2101      	movs	r1, #1
 801b900:	458e      	cmp	lr, r1
 801b902:	d920      	bls.n	801b946 <HAL_PCD_IRQHandler+0x2b6>
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801b904:	f893 c27c 	ldrb.w	ip, [r3, #636]	@ 0x27c
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 801b908:	6802      	ldr	r2, [r0, #0]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 801b90a:	f1bc 0f01 	cmp.w	ip, #1
 801b90e:	f040 81ba 	bne.w	801bc86 <HAL_PCD_IRQHandler+0x5f6>
 801b912:	2a00      	cmp	r2, #0
 801b914:	f280 81b7 	bge.w	801bc86 <HAL_PCD_IRQHandler+0x5f6>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 801b918:	f8d4 74d4 	ldr.w	r7, [r4, #1236]	@ 0x4d4
 801b91c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 801b920:	f007 0701 	and.w	r7, r7, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 801b924:	42ba      	cmp	r2, r7
 801b926:	f040 81ae 	bne.w	801bc86 <HAL_PCD_IRQHandler+0x5f6>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 801b92a:	f883 c27b 	strb.w	ip, [r3, #635]	@ 0x27b
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 801b92e:	69b2      	ldr	r2, [r6, #24]
 801b930:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801b934:	61b2      	str	r2, [r6, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 801b936:	6972      	ldr	r2, [r6, #20]
 801b938:	0617      	lsls	r7, r2, #24
 801b93a:	f100 81a4 	bmi.w	801bc86 <HAL_PCD_IRQHandler+0x5f6>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 801b93e:	686b      	ldr	r3, [r5, #4]
 801b940:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801b944:	606b      	str	r3, [r5, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801b946:	6822      	ldr	r2, [r4, #0]
 801b948:	6953      	ldr	r3, [r2, #20]
 801b94a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801b94e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801b950:	6820      	ldr	r0, [r4, #0]
 801b952:	f003 f8fb 	bl	801eb4c <USB_ReadInterrupts>
 801b956:	0041      	lsls	r1, r0, #1
 801b958:	d507      	bpl.n	801b96a <HAL_PCD_IRQHandler+0x2da>
      HAL_PCD_ConnectCallback(hpcd);
 801b95a:	4620      	mov	r0, r4
 801b95c:	f016 fd28 	bl	80323b0 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801b960:	6822      	ldr	r2, [r4, #0]
 801b962:	6953      	ldr	r3, [r2, #20]
 801b964:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801b968:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 801b96a:	6820      	ldr	r0, [r4, #0]
 801b96c:	f003 f8ee 	bl	801eb4c <USB_ReadInterrupts>
 801b970:	0742      	lsls	r2, r0, #29
 801b972:	d50a      	bpl.n	801b98a <HAL_PCD_IRQHandler+0x2fa>
      RegVal = hpcd->Instance->GOTGINT;
 801b974:	6823      	ldr	r3, [r4, #0]
 801b976:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 801b978:	076b      	lsls	r3, r5, #29
 801b97a:	d502      	bpl.n	801b982 <HAL_PCD_IRQHandler+0x2f2>
        HAL_PCD_DisconnectCallback(hpcd);
 801b97c:	4620      	mov	r0, r4
 801b97e:	f016 fd1b 	bl	80323b8 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= RegVal;
 801b982:	6822      	ldr	r2, [r4, #0]
 801b984:	6853      	ldr	r3, [r2, #4]
 801b986:	432b      	orrs	r3, r5
 801b988:	6053      	str	r3, [r2, #4]
}
 801b98a:	b007      	add	sp, #28
 801b98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 801b990:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 801b994:	f47f aecf 	bne.w	801b736 <HAL_PCD_IRQHandler+0xa6>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 801b998:	2208      	movs	r2, #8
 801b99a:	f204 419c 	addw	r1, r4, #1180	@ 0x49c
 801b99e:	4630      	mov	r0, r6
 801b9a0:	f003 f834 	bl	801ea0c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 801b9a4:	2324      	movs	r3, #36	@ 0x24
 801b9a6:	fb03 4707 	mla	r7, r3, r7, r4
 801b9aa:	f3c8 180a 	ubfx	r8, r8, #4, #11
 801b9ae:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 801b9b2:	4443      	add	r3, r8
 801b9b4:	e6bd      	b.n	801b732 <HAL_PCD_IRQHandler+0xa2>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 801b9b6:	6820      	ldr	r0, [r4, #0]
 801b9b8:	f003 f8cc 	bl	801eb54 <USB_ReadDevAllOutEpInterrupt>
 801b9bc:	f506 6730 	add.w	r7, r6, #2816	@ 0xb00
 801b9c0:	4681      	mov	r9, r0
      while (ep_intr != 0U)
 801b9c2:	46a3      	mov	fp, r4
      epnum = 0U;
 801b9c4:	f04f 0a00 	mov.w	sl, #0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801b9c8:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 801b9ca:	f1b9 0f00 	cmp.w	r9, #0
 801b9ce:	f43f aebd 	beq.w	801b74c <HAL_PCD_IRQHandler+0xbc>
        if ((ep_intr & 0x1U) != 0U)
 801b9d2:	f019 0f01 	tst.w	r9, #1
 801b9d6:	d058      	beq.n	801ba8a <HAL_PCD_IRQHandler+0x3fa>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801b9d8:	fa5f f38a 	uxtb.w	r3, sl
 801b9dc:	4619      	mov	r1, r3
 801b9de:	9302      	str	r3, [sp, #8]
 801b9e0:	f003 f8c8 	bl	801eb74 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801b9e4:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801b9e8:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801b9ea:	d010      	beq.n	801ba0e <HAL_PCD_IRQHandler+0x37e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 801b9ec:	2301      	movs	r3, #1
 801b9ee:	60bb      	str	r3, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801b9f0:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801b9f2:	49a7      	ldr	r1, [pc, #668]	@ (801bc90 <HAL_PCD_IRQHandler+0x600>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801b9f4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801b9f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801b9fa:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801b9fe:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ba00:	689a      	ldr	r2, [r3, #8]
  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 801ba02:	d14e      	bne.n	801baa2 <HAL_PCD_IRQHandler+0x412>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801ba04:	0411      	lsls	r1, r2, #16
 801ba06:	d548      	bpl.n	801ba9a <HAL_PCD_IRQHandler+0x40a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ba08:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801ba0c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801ba0e:	f018 0f08 	tst.w	r8, #8
 801ba12:	d013      	beq.n	801ba3c <HAL_PCD_IRQHandler+0x3ac>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 801ba14:	2308      	movs	r3, #8
 801ba16:	60bb      	str	r3, [r7, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801ba18:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ba1a:	499e      	ldr	r1, [pc, #632]	@ (801bc94 <HAL_PCD_IRQHandler+0x604>)
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801ba1c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ba1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801ba22:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ba26:	4288      	cmp	r0, r1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801ba28:	689a      	ldr	r2, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801ba2a:	d904      	bls.n	801ba36 <HAL_PCD_IRQHandler+0x3a6>
 801ba2c:	0411      	lsls	r1, r2, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801ba2e:	bf44      	itt	mi
 801ba30:	f44f 4200 	movmi.w	r2, #32768	@ 0x8000
 801ba34:	609a      	strmi	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801ba36:	4620      	mov	r0, r4
 801ba38:	f016 fc50 	bl	80322dc <HAL_PCD_SetupStageCallback>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 801ba3c:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801ba40:	bf1c      	itt	ne
 801ba42:	2310      	movne	r3, #16
 801ba44:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 801ba46:	f018 0f02 	tst.w	r8, #2
 801ba4a:	d013      	beq.n	801ba74 <HAL_PCD_IRQHandler+0x3e4>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 801ba4c:	6973      	ldr	r3, [r6, #20]
 801ba4e:	061a      	lsls	r2, r3, #24
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 801ba50:	bf42      	ittt	mi
 801ba52:	686b      	ldrmi	r3, [r5, #4]
 801ba54:	f443 6380 	orrmi.w	r3, r3, #1024	@ 0x400
 801ba58:	606b      	strmi	r3, [r5, #4]
            if (ep->is_iso_incomplete == 1U)
 801ba5a:	f89b 3257 	ldrb.w	r3, [fp, #599]	@ 0x257
 801ba5e:	2b01      	cmp	r3, #1
 801ba60:	d106      	bne.n	801ba70 <HAL_PCD_IRQHandler+0x3e0>
              ep->is_iso_incomplete = 0U;
 801ba62:	2300      	movs	r3, #0
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801ba64:	9902      	ldr	r1, [sp, #8]
              ep->is_iso_incomplete = 0U;
 801ba66:	f88b 3257 	strb.w	r3, [fp, #599]	@ 0x257
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 801ba6a:	4620      	mov	r0, r4
 801ba6c:	f016 fc98 	bl	80323a0 <HAL_PCD_ISOOUTIncompleteCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 801ba70:	2302      	movs	r3, #2
 801ba72:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801ba74:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ba78:	bf1c      	itt	ne
 801ba7a:	2320      	movne	r3, #32
 801ba7c:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 801ba7e:	f418 5f00 	tst.w	r8, #8192	@ 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 801ba82:	bf1c      	itt	ne
 801ba84:	f44f 5300 	movne.w	r3, #8192	@ 0x2000
 801ba88:	60bb      	strne	r3, [r7, #8]
        epnum++;
 801ba8a:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 801ba8e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 801ba92:	3720      	adds	r7, #32
 801ba94:	f10b 0b24 	add.w	fp, fp, #36	@ 0x24
 801ba98:	e796      	b.n	801b9c8 <HAL_PCD_IRQHandler+0x338>
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801ba9a:	0690      	lsls	r0, r2, #26
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801ba9c:	bf44      	itt	mi
 801ba9e:	2220      	movmi	r2, #32
 801baa0:	609a      	strmi	r2, [r3, #8]
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801baa2:	9902      	ldr	r1, [sp, #8]
 801baa4:	4620      	mov	r0, r4
 801baa6:	f016 fc1f 	bl	80322e8 <HAL_PCD_DataOutStageCallback>
 801baaa:	e7b0      	b.n	801ba0e <HAL_PCD_IRQHandler+0x37e>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 801baac:	9b02      	ldr	r3, [sp, #8]
 801baae:	07db      	lsls	r3, r3, #31
 801bab0:	f140 8086 	bpl.w	801bbc0 <HAL_PCD_IRQHandler+0x530>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801bab4:	fa5f f38a 	uxtb.w	r3, sl
 801bab8:	4619      	mov	r1, r3
 801baba:	9303      	str	r3, [sp, #12]
 801babc:	f003 f863 	bl	801eb86 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801bac0:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 801bac4:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 801bac6:	d00e      	beq.n	801bae6 <HAL_PCD_IRQHandler+0x456>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801bac8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801baca:	2101      	movs	r1, #1
 801bacc:	f00a 020f 	and.w	r2, sl, #15
 801bad0:	fa01 f202 	lsl.w	r2, r1, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801bad4:	ea23 0302 	bic.w	r3, r3, r2
 801bad8:	636b      	str	r3, [r5, #52]	@ 0x34
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801bada:	4620      	mov	r0, r4
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 801badc:	f8cb 1008 	str.w	r1, [fp, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 801bae0:	9903      	ldr	r1, [sp, #12]
 801bae2:	f016 fc0a 	bl	80322fa <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 801bae6:	f018 0f08 	tst.w	r8, #8
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 801baea:	bf1c      	itt	ne
 801baec:	2308      	movne	r3, #8
 801baee:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 801baf2:	f018 0f10 	tst.w	r8, #16
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 801baf6:	bf1c      	itt	ne
 801baf8:	2310      	movne	r3, #16
 801bafa:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 801bafe:	f018 0f40 	tst.w	r8, #64	@ 0x40
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801bb02:	bf1c      	itt	ne
 801bb04:	2340      	movne	r3, #64	@ 0x40
 801bb06:	f8cb 3008 	strne.w	r3, [fp, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 801bb0a:	f018 0f02 	tst.w	r8, #2
 801bb0e:	d00f      	beq.n	801bb30 <HAL_PCD_IRQHandler+0x4a0>
            (void)USB_FlushTxFifo(USBx, epnum);
 801bb10:	4651      	mov	r1, sl
 801bb12:	4630      	mov	r0, r6
 801bb14:	f002 fcd2 	bl	801e4bc <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 801bb18:	7dfb      	ldrb	r3, [r7, #23]
 801bb1a:	2b01      	cmp	r3, #1
 801bb1c:	d105      	bne.n	801bb2a <HAL_PCD_IRQHandler+0x49a>
              ep->is_iso_incomplete = 0U;
 801bb1e:	2300      	movs	r3, #0
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801bb20:	9903      	ldr	r1, [sp, #12]
              ep->is_iso_incomplete = 0U;
 801bb22:	75fb      	strb	r3, [r7, #23]
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801bb24:	4620      	mov	r0, r4
 801bb26:	f016 fc3f 	bl	80323a8 <HAL_PCD_ISOINIncompleteCallback>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801bb2a:	2302      	movs	r3, #2
 801bb2c:	f8cb 3008 	str.w	r3, [fp, #8]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801bb30:	6823      	ldr	r3, [r4, #0]
 801bb32:	9304      	str	r3, [sp, #16]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801bb34:	f018 0f80 	tst.w	r8, #128	@ 0x80
 801bb38:	d042      	beq.n	801bbc0 <HAL_PCD_IRQHandler+0x530>
  if (ep->xfer_count > ep->xfer_len)
 801bb3a:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
 801bb3e:	429a      	cmp	r2, r3
 801bb40:	d83e      	bhi.n	801bbc0 <HAL_PCD_IRQHandler+0x530>
  len = ep->xfer_len - ep->xfer_count;
 801bb42:	eba3 0802 	sub.w	r8, r3, r2
  if (len > ep->maxpacket)
 801bb46:	69fb      	ldr	r3, [r7, #28]
 801bb48:	4598      	cmp	r8, r3
 801bb4a:	bf28      	it	cs
 801bb4c:	4698      	movcs	r8, r3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801bb4e:	9b04      	ldr	r3, [sp, #16]
 801bb50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
  len32b = (len + 3U) / 4U;
 801bb54:	f108 0803 	add.w	r8, r8, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801bb58:	eb03 134a 	add.w	r3, r3, sl, lsl #5
  len32b = (len + 3U) / 4U;
 801bb5c:	ea4f 0898 	mov.w	r8, r8, lsr #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801bb60:	9305      	str	r3, [sp, #20]
 801bb62:	9b05      	ldr	r3, [sp, #20]
 801bb64:	6999      	ldr	r1, [r3, #24]
 801bb66:	b289      	uxth	r1, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801bb68:	4541      	cmp	r1, r8
 801bb6a:	e9d7 3209 	ldrd	r3, r2, [r7, #36]	@ 0x24
 801bb6e:	d325      	bcc.n	801bbbc <HAL_PCD_IRQHandler+0x52c>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d80b      	bhi.n	801bb8c <HAL_PCD_IRQHandler+0x4fc>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801bb74:	9b04      	ldr	r3, [sp, #16]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801bb76:	f00a 000f 	and.w	r0, sl, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801bb7a:	f8d3 2834 	ldr.w	r2, [r3, #2100]	@ 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801bb7e:	2101      	movs	r1, #1
 801bb80:	4081      	lsls	r1, r0
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801bb82:	ea22 0201 	bic.w	r2, r2, r1
 801bb86:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
 801bb8a:	e019      	b.n	801bbc0 <HAL_PCD_IRQHandler+0x530>
    len = ep->xfer_len - ep->xfer_count;
 801bb8c:	eba3 0902 	sub.w	r9, r3, r2
    if (len > ep->maxpacket)
 801bb90:	69fb      	ldr	r3, [r7, #28]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 801bb92:	9a03      	ldr	r2, [sp, #12]
 801bb94:	6a39      	ldr	r1, [r7, #32]
 801bb96:	9804      	ldr	r0, [sp, #16]
    if (len > ep->maxpacket)
 801bb98:	4599      	cmp	r9, r3
 801bb9a:	bf28      	it	cs
 801bb9c:	4699      	movcs	r9, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 801bb9e:	fa1f f389 	uxth.w	r3, r9
 801bba2:	f002 fe5f 	bl	801e864 <USB_WritePacket>
    ep->xfer_buff  += len;
 801bba6:	6a3b      	ldr	r3, [r7, #32]
 801bba8:	444b      	add	r3, r9
 801bbaa:	623b      	str	r3, [r7, #32]
    ep->xfer_count += len;
 801bbac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    len32b = (len + 3U) / 4U;
 801bbae:	f109 0803 	add.w	r8, r9, #3
    ep->xfer_count += len;
 801bbb2:	444b      	add	r3, r9
    len32b = (len + 3U) / 4U;
 801bbb4:	ea4f 0898 	mov.w	r8, r8, lsr #2
    ep->xfer_count += len;
 801bbb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bbba:	e7d2      	b.n	801bb62 <HAL_PCD_IRQHandler+0x4d2>
  if (ep->xfer_len <= ep->xfer_count)
 801bbbc:	4293      	cmp	r3, r2
 801bbbe:	d9d9      	bls.n	801bb74 <HAL_PCD_IRQHandler+0x4e4>
        ep_intr >>= 1U;
 801bbc0:	9b02      	ldr	r3, [sp, #8]
 801bbc2:	085b      	lsrs	r3, r3, #1
        epnum++;
 801bbc4:	f10a 0a01 	add.w	sl, sl, #1
        ep_intr >>= 1U;
 801bbc8:	9302      	str	r3, [sp, #8]
 801bbca:	3724      	adds	r7, #36	@ 0x24
 801bbcc:	f10b 0b20 	add.w	fp, fp, #32
 801bbd0:	e5ca      	b.n	801b768 <HAL_PCD_IRQHandler+0xd8>
        HAL_PCD_ResumeCallback(hpcd);
 801bbd2:	4620      	mov	r0, r4
 801bbd4:	f016 fbc8 	bl	8032368 <HAL_PCD_ResumeCallback>
 801bbd8:	e5df      	b.n	801b79a <HAL_PCD_IRQHandler+0x10a>
        HAL_PCD_SuspendCallback(hpcd);
 801bbda:	4620      	mov	r0, r4
 801bbdc:	f016 fbac 	bl	8032338 <HAL_PCD_SuspendCallback>
 801bbe0:	e60a      	b.n	801b7f8 <HAL_PCD_IRQHandler+0x168>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 801bbe2:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801bbe4:	681a      	ldr	r2, [r3, #0]
 801bbe6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 801bbea:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 801bbec:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801bbf0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801bbf4:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 801bbf8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801bbfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 801bc00:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 801bc04:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801bc08:	9a01      	ldr	r2, [sp, #4]
 801bc0a:	3201      	adds	r2, #1
 801bc0c:	9201      	str	r2, [sp, #4]
 801bc0e:	3320      	adds	r3, #32
 801bc10:	e604      	b.n	801b81c <HAL_PCD_IRQHandler+0x18c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 801bc12:	696b      	ldr	r3, [r5, #20]
 801bc14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801bc18:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 801bc1c:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801bc1e:	692b      	ldr	r3, [r5, #16]
 801bc20:	f043 030b 	orr.w	r3, r3, #11
 801bc24:	612b      	str	r3, [r5, #16]
 801bc26:	e60f      	b.n	801b848 <HAL_PCD_IRQHandler+0x1b8>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 801bc28:	69b3      	ldr	r3, [r6, #24]
 801bc2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801bc2e:	61b3      	str	r3, [r6, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801bc30:	2701      	movs	r7, #1
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801bc32:	f204 2857 	addw	r8, r4, #599	@ 0x257
 801bc36:	f04f 0924 	mov.w	r9, #36	@ 0x24
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801bc3a:	7923      	ldrb	r3, [r4, #4]
 801bc3c:	42bb      	cmp	r3, r7
 801bc3e:	f67f ae42 	bls.w	801b8c6 <HAL_PCD_IRQHandler+0x236>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 801bc42:	fb09 f307 	mul.w	r3, r9, r7
 801bc46:	f818 3003 	ldrb.w	r3, [r8, r3]
 801bc4a:	2b01      	cmp	r3, #1
 801bc4c:	d103      	bne.n	801bc56 <HAL_PCD_IRQHandler+0x5c6>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801bc4e:	b2f9      	uxtb	r1, r7
 801bc50:	4620      	mov	r0, r4
 801bc52:	f7ff fd0d 	bl	801b670 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801bc56:	3701      	adds	r7, #1
 801bc58:	e7ef      	b.n	801bc3a <HAL_PCD_IRQHandler+0x5aa>
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801bc5a:	f898 303c 	ldrb.w	r3, [r8, #60]	@ 0x3c
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 801bc5e:	f8d9 2000 	ldr.w	r2, [r9]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801bc62:	2b01      	cmp	r3, #1
 801bc64:	d109      	bne.n	801bc7a <HAL_PCD_IRQHandler+0x5ea>
 801bc66:	2a00      	cmp	r2, #0
 801bc68:	da07      	bge.n	801bc7a <HAL_PCD_IRQHandler+0x5ea>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801bc6a:	f067 017f 	orn	r1, r7, #127	@ 0x7f
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 801bc6e:	f888 303b 	strb.w	r3, [r8, #59]	@ 0x3b
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 801bc72:	b2c9      	uxtb	r1, r1
 801bc74:	4620      	mov	r0, r4
 801bc76:	f7ff fcfb 	bl	801b670 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801bc7a:	3701      	adds	r7, #1
 801bc7c:	f108 0824 	add.w	r8, r8, #36	@ 0x24
 801bc80:	f109 0920 	add.w	r9, r9, #32
 801bc84:	e628      	b.n	801b8d8 <HAL_PCD_IRQHandler+0x248>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801bc86:	3101      	adds	r1, #1
 801bc88:	3324      	adds	r3, #36	@ 0x24
 801bc8a:	3020      	adds	r0, #32
 801bc8c:	e638      	b.n	801b900 <HAL_PCD_IRQHandler+0x270>
 801bc8e:	bf00      	nop
 801bc90:	4f54310a 	.word	0x4f54310a
 801bc94:	4f54300a 	.word	0x4f54300a

0801bc98 <HAL_PCD_EP_Flush>:
{
 801bc98:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 801bc9a:	f890 3494 	ldrb.w	r3, [r0, #1172]	@ 0x494
 801bc9e:	2b01      	cmp	r3, #1
{
 801bca0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 801bca2:	d010      	beq.n	801bcc6 <HAL_PCD_EP_Flush+0x2e>
 801bca4:	2301      	movs	r3, #1
 801bca6:	f880 3494 	strb.w	r3, [r0, #1172]	@ 0x494
  if ((ep_addr & 0x80U) == 0x80U)
 801bcaa:	060b      	lsls	r3, r1, #24
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801bcac:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
 801bcae:	d507      	bpl.n	801bcc0 <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 801bcb0:	f001 010f 	and.w	r1, r1, #15
 801bcb4:	f002 fc02 	bl	801e4bc <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 801bcb8:	2000      	movs	r0, #0
 801bcba:	f884 0494 	strb.w	r0, [r4, #1172]	@ 0x494
}
 801bcbe:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 801bcc0:	f002 fc1f 	bl	801e502 <USB_FlushRxFifo>
 801bcc4:	e7f8      	b.n	801bcb8 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 801bcc6:	2002      	movs	r0, #2
 801bcc8:	e7f9      	b.n	801bcbe <HAL_PCD_EP_Flush+0x26>

0801bcca <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801bcca:	6800      	ldr	r0, [r0, #0]
{
 801bccc:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801bcce:	6a43      	ldr	r3, [r0, #36]	@ 0x24

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801bcd0:	0412      	lsls	r2, r2, #16
  if (fifo == 0U)
 801bcd2:	b919      	cbnz	r1, 801bcdc <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801bcd4:	4313      	orrs	r3, r2
 801bcd6:	6283      	str	r3, [r0, #40]	@ 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 801bcd8:	2000      	movs	r0, #0
 801bcda:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801bcdc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 801bcde:	1e4e      	subs	r6, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801bce0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 801bce4:	2400      	movs	r4, #0
 801bce6:	42b4      	cmp	r4, r6
 801bce8:	d305      	bcc.n	801bcf6 <HAL_PCDEx_SetTxFiFo+0x2c>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801bcea:	313f      	adds	r1, #63	@ 0x3f
 801bcec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801bcf0:	4313      	orrs	r3, r2
 801bcf2:	6043      	str	r3, [r0, #4]
 801bcf4:	e7f0      	b.n	801bcd8 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801bcf6:	f104 0540 	add.w	r5, r4, #64	@ 0x40
 801bcfa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801bcfe:	3401      	adds	r4, #1
 801bd00:	686d      	ldr	r5, [r5, #4]
 801bd02:	eb03 4315 	add.w	r3, r3, r5, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 801bd06:	e7ee      	b.n	801bce6 <HAL_PCDEx_SetTxFiFo+0x1c>

0801bd08 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 801bd08:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 801bd0a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 801bd0c:	6259      	str	r1, [r3, #36]	@ 0x24
}
 801bd0e:	4770      	bx	lr

0801bd10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801bd10:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 801bd12:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801bd14:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 801bd16:	f8c0 14d8 	str.w	r1, [r0, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	f883 04cc 	strb.w	r0, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801bd20:	6993      	ldr	r3, [r2, #24]
 801bd22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801bd26:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801bd28:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 801bd2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801bd2e:	f043 0303 	orr.w	r3, r3, #3
 801bd32:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 801bd34:	4770      	bx	lr

0801bd36 <HAL_PCDEx_DeActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801bd36:	6803      	ldr	r3, [r0, #0]

  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
 801bd38:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801bd3a:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 801bd3e:	6399      	str	r1, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 801bd40:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801bd42:	f421 2100 	bic.w	r1, r1, #524288	@ 0x80000
 801bd46:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Disable Battery charging */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 801bd48:	6b99      	ldr	r1, [r3, #56]	@ 0x38
{
 801bd4a:	4602      	mov	r2, r0
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 801bd4c:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000

  hpcd->battery_charging_active = 0U;
 801bd50:	2000      	movs	r0, #0
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 801bd52:	6399      	str	r1, [r3, #56]	@ 0x38
  hpcd->battery_charging_active = 0U;
 801bd54:	f8c2 04dc 	str.w	r0, [r2, #1244]	@ 0x4dc

  return HAL_OK;
}
 801bd58:	4770      	bx	lr

0801bd5a <HAL_PCDEx_BCD_Callback>:
  * @brief  Send BatteryCharging message to user layer callback.
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
 801bd5a:	4770      	bx	lr

0801bd5c <HAL_PCDEx_BCD_VBUSDetect>:
{
 801bd5c:	b570      	push	{r4, r5, r6, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801bd5e:	6804      	ldr	r4, [r0, #0]
{
 801bd60:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 801bd62:	f7fc fce3 	bl	801872c <HAL_GetTick>
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 801bd66:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bd68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801bd6c:	63a3      	str	r3, [r4, #56]	@ 0x38
  uint32_t tickstart = HAL_GetTick();
 801bd6e:	4606      	mov	r6, r0
  HAL_Delay(300U);
 801bd70:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801bd74:	f7fc fce0 	bl	8018738 <HAL_Delay>
  if ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == USB_OTG_GCCFG_DCDET)
 801bd78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bd7a:	07d9      	lsls	r1, r3, #31
 801bd7c:	d503      	bpl.n	801bd86 <HAL_PCDEx_BCD_VBUSDetect+0x2a>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
 801bd7e:	21fe      	movs	r1, #254	@ 0xfe
 801bd80:	4628      	mov	r0, r5
 801bd82:	f7ff ffea 	bl	801bd5a <HAL_PCDEx_BCD_Callback>
  USBx->GCCFG &= ~USB_OTG_GCCFG_DCDEN;
 801bd86:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bd88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801bd8c:	63a3      	str	r3, [r4, #56]	@ 0x38
  HAL_Delay(50U);
 801bd8e:	2032      	movs	r0, #50	@ 0x32
 801bd90:	f7fc fcd2 	bl	8018738 <HAL_Delay>
  USBx->GCCFG |= USB_OTG_GCCFG_PDEN;
 801bd94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bd96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801bd9a:	63a3      	str	r3, [r4, #56]	@ 0x38
  HAL_Delay(50U);
 801bd9c:	2032      	movs	r0, #50	@ 0x32
 801bd9e:	f7fc fccb 	bl	8018738 <HAL_Delay>
  if ((USBx->GCCFG & USB_OTG_GCCFG_PDET) == 0U)
 801bda2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bda4:	079a      	lsls	r2, r3, #30
 801bda6:	d412      	bmi.n	801bdce <HAL_PCDEx_BCD_VBUSDetect+0x72>
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
 801bda8:	21fd      	movs	r1, #253	@ 0xfd
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 801bdaa:	4628      	mov	r0, r5
 801bdac:	f7ff ffd5 	bl	801bd5a <HAL_PCDEx_BCD_Callback>
  (void)HAL_PCDEx_DeActivateBCD(hpcd);
 801bdb0:	4628      	mov	r0, r5
 801bdb2:	f7ff ffc0 	bl	801bd36 <HAL_PCDEx_DeActivateBCD>
  if ((HAL_GetTick() - tickstart) > 1000U)
 801bdb6:	f7fc fcb9 	bl	801872c <HAL_GetTick>
 801bdba:	1b80      	subs	r0, r0, r6
 801bdbc:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
 801bdc0:	bf8c      	ite	hi
 801bdc2:	21ff      	movhi	r1, #255	@ 0xff
    HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
 801bdc4:	2100      	movls	r1, #0
 801bdc6:	4628      	mov	r0, r5
 801bdc8:	f7ff ffc7 	bl	801bd5a <HAL_PCDEx_BCD_Callback>
}
 801bdcc:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
 801bdce:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bdd0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801bdd4:	63a3      	str	r3, [r4, #56]	@ 0x38
    HAL_Delay(50U);
 801bdd6:	2032      	movs	r0, #50	@ 0x32
 801bdd8:	f7fc fcae 	bl	8018738 <HAL_Delay>
    USBx->GCCFG |= USB_OTG_GCCFG_SDEN;
 801bddc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bdde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bde2:	63a3      	str	r3, [r4, #56]	@ 0x38
    HAL_Delay(50U);
 801bde4:	2032      	movs	r0, #50	@ 0x32
 801bde6:	f7fc fca7 	bl	8018738 <HAL_Delay>
    if ((USBx->GCCFG & USB_OTG_GCCFG_SDET) == USB_OTG_GCCFG_SDET)
 801bdea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801bdec:	075b      	lsls	r3, r3, #29
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
 801bdee:	bf4c      	ite	mi
 801bdf0:	21fb      	movmi	r1, #251	@ 0xfb
      HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
 801bdf2:	21fc      	movpl	r1, #252	@ 0xfc
 801bdf4:	e7d9      	b.n	801bdaa <HAL_PCDEx_BCD_VBUSDetect+0x4e>
	...

0801bdf8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801bdf8:	4a02      	ldr	r2, [pc, #8]	@ (801be04 <HAL_PWR_EnableBkUpAccess+0xc>)
 801bdfa:	6813      	ldr	r3, [r2, #0]
 801bdfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801be00:	6013      	str	r3, [r2, #0]
}
 801be02:	4770      	bx	lr
 801be04:	40007000 	.word	0x40007000

0801be08 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801be08:	4b06      	ldr	r3, [pc, #24]	@ (801be24 <HAL_PWREx_GetVoltageRange+0x1c>)
 801be0a:	6818      	ldr	r0, [r3, #0]
 801be0c:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 801be10:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 801be14:	bf1e      	ittt	ne
 801be16:	f8d3 0080 	ldrne.w	r0, [r3, #128]	@ 0x80
 801be1a:	f3c0 2000 	ubfxne	r0, r0, #8, #1
 801be1e:	0240      	lslne	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 801be20:	4770      	bx	lr
 801be22:	bf00      	nop
 801be24:	40007000 	.word	0x40007000

0801be28 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801be28:	4b28      	ldr	r3, [pc, #160]	@ (801becc <HAL_PWREx_ControlVoltageScaling+0xa4>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801be2a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801be2c:	bb18      	cbnz	r0, 801be76 <HAL_PWREx_ControlVoltageScaling+0x4e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801be2e:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 801be32:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801be36:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801be3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801be3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801be42:	d140      	bne.n	801bec6 <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801be44:	681a      	ldr	r2, [r3, #0]
 801be46:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 801be4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801be4e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 801be50:	4a1f      	ldr	r2, [pc, #124]	@ (801bed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801be52:	6812      	ldr	r2, [r2, #0]
 801be54:	2132      	movs	r1, #50	@ 0x32
 801be56:	434a      	muls	r2, r1
 801be58:	491e      	ldr	r1, [pc, #120]	@ (801bed4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 801be5a:	fbb2 f2f1 	udiv	r2, r2, r1
 801be5e:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801be60:	6959      	ldr	r1, [r3, #20]
 801be62:	0549      	lsls	r1, r1, #21
 801be64:	d500      	bpl.n	801be68 <HAL_PWREx_ControlVoltageScaling+0x40>
 801be66:	b922      	cbnz	r2, 801be72 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801be68:	695b      	ldr	r3, [r3, #20]
 801be6a:	0558      	lsls	r0, r3, #21
 801be6c:	d52b      	bpl.n	801bec6 <HAL_PWREx_ControlVoltageScaling+0x9e>
      {
        return HAL_TIMEOUT;
 801be6e:	2003      	movs	r0, #3
 801be70:	4770      	bx	lr
        wait_loop_index--;
 801be72:	3a01      	subs	r2, #1
 801be74:	e7f4      	b.n	801be60 <HAL_PWREx_ControlVoltageScaling+0x38>
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801be76:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801be7a:	d11f      	bne.n	801bebc <HAL_PWREx_ControlVoltageScaling+0x94>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801be7c:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 801be80:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801be84:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801be88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801be8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801be90:	d119      	bne.n	801bec6 <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801be92:	681a      	ldr	r2, [r3, #0]
 801be94:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 801be98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801be9c:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 801be9e:	4a0c      	ldr	r2, [pc, #48]	@ (801bed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 801bea0:	6812      	ldr	r2, [r2, #0]
 801bea2:	2132      	movs	r1, #50	@ 0x32
 801bea4:	434a      	muls	r2, r1
 801bea6:	490b      	ldr	r1, [pc, #44]	@ (801bed4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 801bea8:	fbb2 f2f1 	udiv	r2, r2, r1
 801beac:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801beae:	6959      	ldr	r1, [r3, #20]
 801beb0:	0549      	lsls	r1, r1, #21
 801beb2:	d5d9      	bpl.n	801be68 <HAL_PWREx_ControlVoltageScaling+0x40>
 801beb4:	2a00      	cmp	r2, #0
 801beb6:	d0d7      	beq.n	801be68 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
 801beb8:	3a01      	subs	r2, #1
 801beba:	e7f8      	b.n	801beae <HAL_PWREx_ControlVoltageScaling+0x86>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801bebc:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 801bec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801bec4:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 801bec6:	2000      	movs	r0, #0
}
 801bec8:	4770      	bx	lr
 801beca:	bf00      	nop
 801becc:	40007000 	.word	0x40007000
 801bed0:	20000424 	.word	0x20000424
 801bed4:	000f4240 	.word	0x000f4240

0801bed8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 801bed8:	4a02      	ldr	r2, [pc, #8]	@ (801bee4 <HAL_PWREx_EnableVddUSB+0xc>)
 801beda:	6853      	ldr	r3, [r2, #4]
 801bedc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801bee0:	6053      	str	r3, [r2, #4]
}
 801bee2:	4770      	bx	lr
 801bee4:	40007000 	.word	0x40007000

0801bee8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801bee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801beea:	4d1c      	ldr	r5, [pc, #112]	@ (801bf5c <RCC_SetFlashLatencyFromMSIRange+0x74>)
 801beec:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801beee:	00da      	lsls	r2, r3, #3
{
 801bef0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801bef2:	d518      	bpl.n	801bf26 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801bef4:	f7ff ff88 	bl	801be08 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bef8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 801befc:	d123      	bne.n	801bf46 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 801befe:	2c80      	cmp	r4, #128	@ 0x80
 801bf00:	d928      	bls.n	801bf54 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    else
    {
      if(msirange == RCC_MSIRANGE_7)
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 801bf02:	2ca0      	cmp	r4, #160	@ 0xa0
 801bf04:	bf8c      	ite	hi
 801bf06:	2402      	movhi	r4, #2
 801bf08:	2401      	movls	r4, #1
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801bf0a:	4915      	ldr	r1, [pc, #84]	@ (801bf60 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 801bf0c:	680a      	ldr	r2, [r1, #0]
 801bf0e:	f022 020f 	bic.w	r2, r2, #15
 801bf12:	4322      	orrs	r2, r4
 801bf14:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 801bf16:	6808      	ldr	r0, [r1, #0]
 801bf18:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 801bf1c:	1b00      	subs	r0, r0, r4
 801bf1e:	bf18      	it	ne
 801bf20:	2001      	movne	r0, #1
 801bf22:	b003      	add	sp, #12
 801bf24:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 801bf26:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801bf28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801bf2c:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bf2e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801bf30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801bf34:	9301      	str	r3, [sp, #4]
 801bf36:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 801bf38:	f7ff ff66 	bl	801be08 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 801bf3c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 801bf3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801bf42:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bf44:	e7d8      	b.n	801bef8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 801bf46:	2c7f      	cmp	r4, #127	@ 0x7f
 801bf48:	d806      	bhi.n	801bf58 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 801bf4a:	f1a4 0370 	sub.w	r3, r4, #112	@ 0x70
 801bf4e:	425c      	negs	r4, r3
 801bf50:	415c      	adcs	r4, r3
 801bf52:	e7da      	b.n	801bf0a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801bf54:	2400      	movs	r4, #0
 801bf56:	e7d8      	b.n	801bf0a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 801bf58:	2402      	movs	r4, #2
 801bf5a:	e7d6      	b.n	801bf0a <RCC_SetFlashLatencyFromMSIRange+0x22>
 801bf5c:	40021000 	.word	0x40021000
 801bf60:	40022000 	.word	0x40022000

0801bf64 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bf64:	4b20      	ldr	r3, [pc, #128]	@ (801bfe8 <HAL_RCC_GetSysClockFreq+0x84>)
 801bf66:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801bf68:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801bf6a:	f012 020c 	ands.w	r2, r2, #12
 801bf6e:	d005      	beq.n	801bf7c <HAL_RCC_GetSysClockFreq+0x18>
 801bf70:	2a0c      	cmp	r2, #12
 801bf72:	d12c      	bne.n	801bfce <HAL_RCC_GetSysClockFreq+0x6a>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801bf74:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801bf78:	2901      	cmp	r1, #1
 801bf7a:	d12f      	bne.n	801bfdc <HAL_RCC_GetSysClockFreq+0x78>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801bf7c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 801bf7e:	481b      	ldr	r0, [pc, #108]	@ (801bfec <HAL_RCC_GetSysClockFreq+0x88>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801bf80:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801bf82:	bf55      	itete	pl
 801bf84:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801bf88:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801bf8a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801bf8e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 801bf92:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801bf96:	b332      	cbz	r2, 801bfe6 <HAL_RCC_GetSysClockFreq+0x82>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801bf98:	68da      	ldr	r2, [r3, #12]
 801bf9a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 801bf9e:	2a02      	cmp	r2, #2
 801bfa0:	d01e      	beq.n	801bfe0 <HAL_RCC_GetSysClockFreq+0x7c>
 801bfa2:	4913      	ldr	r1, [pc, #76]	@ (801bff0 <HAL_RCC_GetSysClockFreq+0x8c>)
 801bfa4:	2a03      	cmp	r2, #3
 801bfa6:	bf08      	it	eq
 801bfa8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801bfaa:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801bfac:	68da      	ldr	r2, [r3, #12]
 801bfae:	f3c2 2206 	ubfx	r2, r2, #8, #7
 801bfb2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801bfb4:	68d8      	ldr	r0, [r3, #12]
 801bfb6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801bfba:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801bfbe:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801bfc0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801bfc2:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801bfc4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 801bfc8:	fbb2 f0f0 	udiv	r0, r2, r0
 801bfcc:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801bfce:	2a04      	cmp	r2, #4
 801bfd0:	d008      	beq.n	801bfe4 <HAL_RCC_GetSysClockFreq+0x80>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801bfd2:	2a08      	cmp	r2, #8
 801bfd4:	4806      	ldr	r0, [pc, #24]	@ (801bff0 <HAL_RCC_GetSysClockFreq+0x8c>)
 801bfd6:	bf18      	it	ne
 801bfd8:	2000      	movne	r0, #0
 801bfda:	4770      	bx	lr
 801bfdc:	2000      	movs	r0, #0
 801bfde:	e7db      	b.n	801bf98 <HAL_RCC_GetSysClockFreq+0x34>
      pllvco = HSI_VALUE;
 801bfe0:	4804      	ldr	r0, [pc, #16]	@ (801bff4 <HAL_RCC_GetSysClockFreq+0x90>)
 801bfe2:	e7e2      	b.n	801bfaa <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 801bfe4:	4803      	ldr	r0, [pc, #12]	@ (801bff4 <HAL_RCC_GetSysClockFreq+0x90>)
}
 801bfe6:	4770      	bx	lr
 801bfe8:	40021000 	.word	0x40021000
 801bfec:	08041dc8 	.word	0x08041dc8
 801bff0:	017d7840 	.word	0x017d7840
 801bff4:	00f42400 	.word	0x00f42400

0801bff8 <HAL_RCC_OscConfig>:
{
 801bff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 801bffc:	4605      	mov	r5, r0
 801bffe:	2800      	cmp	r0, #0
 801c000:	d060      	beq.n	801c0c4 <HAL_RCC_OscConfig+0xcc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c002:	4c95      	ldr	r4, [pc, #596]	@ (801c258 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c004:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c006:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c008:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c00a:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c00c:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c010:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801c014:	d576      	bpl.n	801c104 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 801c016:	b11e      	cbz	r6, 801c020 <HAL_RCC_OscConfig+0x28>
 801c018:	2e0c      	cmp	r6, #12
 801c01a:	d155      	bne.n	801c0c8 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 801c01c:	2f01      	cmp	r7, #1
 801c01e:	d153      	bne.n	801c0c8 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801c020:	6823      	ldr	r3, [r4, #0]
 801c022:	0798      	lsls	r0, r3, #30
 801c024:	d502      	bpl.n	801c02c <HAL_RCC_OscConfig+0x34>
 801c026:	69ab      	ldr	r3, [r5, #24]
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d04b      	beq.n	801c0c4 <HAL_RCC_OscConfig+0xcc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801c02c:	6823      	ldr	r3, [r4, #0]
 801c02e:	6a28      	ldr	r0, [r5, #32]
 801c030:	0719      	lsls	r1, r3, #28
 801c032:	bf56      	itet	pl
 801c034:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
 801c038:	6823      	ldrmi	r3, [r4, #0]
 801c03a:	091b      	lsrpl	r3, r3, #4
 801c03c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c040:	4298      	cmp	r0, r3
 801c042:	d929      	bls.n	801c098 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c044:	f7ff ff50 	bl	801bee8 <RCC_SetFlashLatencyFromMSIRange>
 801c048:	2800      	cmp	r0, #0
 801c04a:	d13b      	bne.n	801c0c4 <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c04c:	6823      	ldr	r3, [r4, #0]
 801c04e:	f043 0308 	orr.w	r3, r3, #8
 801c052:	6023      	str	r3, [r4, #0]
 801c054:	6823      	ldr	r3, [r4, #0]
 801c056:	6a2a      	ldr	r2, [r5, #32]
 801c058:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801c05c:	4313      	orrs	r3, r2
 801c05e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c060:	6863      	ldr	r3, [r4, #4]
 801c062:	69ea      	ldr	r2, [r5, #28]
 801c064:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801c068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c06c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c06e:	f7ff ff79 	bl	801bf64 <HAL_RCC_GetSysClockFreq>
 801c072:	68a3      	ldr	r3, [r4, #8]
 801c074:	4a79      	ldr	r2, [pc, #484]	@ (801c25c <HAL_RCC_OscConfig+0x264>)
 801c076:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801c07a:	5cd3      	ldrb	r3, [r2, r3]
 801c07c:	f003 031f 	and.w	r3, r3, #31
 801c080:	40d8      	lsrs	r0, r3
 801c082:	4b77      	ldr	r3, [pc, #476]	@ (801c260 <HAL_RCC_OscConfig+0x268>)
 801c084:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 801c086:	4b77      	ldr	r3, [pc, #476]	@ (801c264 <HAL_RCC_OscConfig+0x26c>)
 801c088:	6818      	ldr	r0, [r3, #0]
 801c08a:	f7fb fe23 	bl	8017cd4 <HAL_InitTick>
        if(status != HAL_OK)
 801c08e:	2800      	cmp	r0, #0
 801c090:	d038      	beq.n	801c104 <HAL_RCC_OscConfig+0x10c>
}
 801c092:	b003      	add	sp, #12
 801c094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c098:	6823      	ldr	r3, [r4, #0]
 801c09a:	f043 0308 	orr.w	r3, r3, #8
 801c09e:	6023      	str	r3, [r4, #0]
 801c0a0:	6823      	ldr	r3, [r4, #0]
 801c0a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801c0a6:	4303      	orrs	r3, r0
 801c0a8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c0aa:	6863      	ldr	r3, [r4, #4]
 801c0ac:	69ea      	ldr	r2, [r5, #28]
 801c0ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801c0b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c0b6:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 801c0b8:	2e00      	cmp	r6, #0
 801c0ba:	d1d8      	bne.n	801c06e <HAL_RCC_OscConfig+0x76>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801c0bc:	f7ff ff14 	bl	801bee8 <RCC_SetFlashLatencyFromMSIRange>
 801c0c0:	2800      	cmp	r0, #0
 801c0c2:	d0d4      	beq.n	801c06e <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 801c0c4:	2001      	movs	r0, #1
 801c0c6:	e7e4      	b.n	801c092 <HAL_RCC_OscConfig+0x9a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801c0c8:	69ab      	ldr	r3, [r5, #24]
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d03a      	beq.n	801c144 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 801c0ce:	6823      	ldr	r3, [r4, #0]
 801c0d0:	f043 0301 	orr.w	r3, r3, #1
 801c0d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801c0d6:	f7fc fb29 	bl	801872c <HAL_GetTick>
 801c0da:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c0dc:	6823      	ldr	r3, [r4, #0]
 801c0de:	079a      	lsls	r2, r3, #30
 801c0e0:	d528      	bpl.n	801c134 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801c0e2:	6823      	ldr	r3, [r4, #0]
 801c0e4:	f043 0308 	orr.w	r3, r3, #8
 801c0e8:	6023      	str	r3, [r4, #0]
 801c0ea:	6823      	ldr	r3, [r4, #0]
 801c0ec:	6a2a      	ldr	r2, [r5, #32]
 801c0ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801c0f2:	4313      	orrs	r3, r2
 801c0f4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801c0f6:	6863      	ldr	r3, [r4, #4]
 801c0f8:	69ea      	ldr	r2, [r5, #28]
 801c0fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801c0fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c102:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c104:	682b      	ldr	r3, [r5, #0]
 801c106:	07d8      	lsls	r0, r3, #31
 801c108:	d42d      	bmi.n	801c166 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c10a:	682b      	ldr	r3, [r5, #0]
 801c10c:	0799      	lsls	r1, r3, #30
 801c10e:	d46b      	bmi.n	801c1e8 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c110:	682b      	ldr	r3, [r5, #0]
 801c112:	0718      	lsls	r0, r3, #28
 801c114:	f100 80a8 	bmi.w	801c268 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c118:	682b      	ldr	r3, [r5, #0]
 801c11a:	0759      	lsls	r1, r3, #29
 801c11c:	f100 80ce 	bmi.w	801c2bc <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c120:	682b      	ldr	r3, [r5, #0]
 801c122:	069f      	lsls	r7, r3, #26
 801c124:	f100 8137 	bmi.w	801c396 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c128:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	f040 815d 	bne.w	801c3ea <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 801c130:	2000      	movs	r0, #0
 801c132:	e7ae      	b.n	801c092 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c134:	f7fc fafa 	bl	801872c <HAL_GetTick>
 801c138:	eba0 0008 	sub.w	r0, r0, r8
 801c13c:	2802      	cmp	r0, #2
 801c13e:	d9cd      	bls.n	801c0dc <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 801c140:	2003      	movs	r0, #3
 801c142:	e7a6      	b.n	801c092 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 801c144:	6823      	ldr	r3, [r4, #0]
 801c146:	f023 0301 	bic.w	r3, r3, #1
 801c14a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801c14c:	f7fc faee 	bl	801872c <HAL_GetTick>
 801c150:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801c152:	6823      	ldr	r3, [r4, #0]
 801c154:	079b      	lsls	r3, r3, #30
 801c156:	d5d5      	bpl.n	801c104 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801c158:	f7fc fae8 	bl	801872c <HAL_GetTick>
 801c15c:	eba0 0008 	sub.w	r0, r0, r8
 801c160:	2802      	cmp	r0, #2
 801c162:	d9f6      	bls.n	801c152 <HAL_RCC_OscConfig+0x15a>
 801c164:	e7ec      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 801c166:	2e08      	cmp	r6, #8
 801c168:	d003      	beq.n	801c172 <HAL_RCC_OscConfig+0x17a>
 801c16a:	2e0c      	cmp	r6, #12
 801c16c:	d108      	bne.n	801c180 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 801c16e:	2f03      	cmp	r7, #3
 801c170:	d106      	bne.n	801c180 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c172:	6823      	ldr	r3, [r4, #0]
 801c174:	039a      	lsls	r2, r3, #14
 801c176:	d5c8      	bpl.n	801c10a <HAL_RCC_OscConfig+0x112>
 801c178:	686b      	ldr	r3, [r5, #4]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d1c5      	bne.n	801c10a <HAL_RCC_OscConfig+0x112>
 801c17e:	e7a1      	b.n	801c0c4 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c180:	686b      	ldr	r3, [r5, #4]
 801c182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c186:	d110      	bne.n	801c1aa <HAL_RCC_OscConfig+0x1b2>
 801c188:	6823      	ldr	r3, [r4, #0]
 801c18a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c18e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801c190:	f7fc facc 	bl	801872c <HAL_GetTick>
 801c194:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c196:	6823      	ldr	r3, [r4, #0]
 801c198:	039b      	lsls	r3, r3, #14
 801c19a:	d4b6      	bmi.n	801c10a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c19c:	f7fc fac6 	bl	801872c <HAL_GetTick>
 801c1a0:	eba0 0008 	sub.w	r0, r0, r8
 801c1a4:	2864      	cmp	r0, #100	@ 0x64
 801c1a6:	d9f6      	bls.n	801c196 <HAL_RCC_OscConfig+0x19e>
 801c1a8:	e7ca      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c1aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c1ae:	d104      	bne.n	801c1ba <HAL_RCC_OscConfig+0x1c2>
 801c1b0:	6823      	ldr	r3, [r4, #0]
 801c1b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c1b6:	6023      	str	r3, [r4, #0]
 801c1b8:	e7e6      	b.n	801c188 <HAL_RCC_OscConfig+0x190>
 801c1ba:	6822      	ldr	r2, [r4, #0]
 801c1bc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801c1c0:	6022      	str	r2, [r4, #0]
 801c1c2:	6822      	ldr	r2, [r4, #0]
 801c1c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801c1c8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d1e0      	bne.n	801c190 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 801c1ce:	f7fc faad 	bl	801872c <HAL_GetTick>
 801c1d2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c1d4:	6823      	ldr	r3, [r4, #0]
 801c1d6:	0398      	lsls	r0, r3, #14
 801c1d8:	d597      	bpl.n	801c10a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c1da:	f7fc faa7 	bl	801872c <HAL_GetTick>
 801c1de:	eba0 0008 	sub.w	r0, r0, r8
 801c1e2:	2864      	cmp	r0, #100	@ 0x64
 801c1e4:	d9f6      	bls.n	801c1d4 <HAL_RCC_OscConfig+0x1dc>
 801c1e6:	e7ab      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 801c1e8:	2e04      	cmp	r6, #4
 801c1ea:	d003      	beq.n	801c1f4 <HAL_RCC_OscConfig+0x1fc>
 801c1ec:	2e0c      	cmp	r6, #12
 801c1ee:	d110      	bne.n	801c212 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 801c1f0:	2f02      	cmp	r7, #2
 801c1f2:	d10e      	bne.n	801c212 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c1f4:	6823      	ldr	r3, [r4, #0]
 801c1f6:	0559      	lsls	r1, r3, #21
 801c1f8:	d503      	bpl.n	801c202 <HAL_RCC_OscConfig+0x20a>
 801c1fa:	68eb      	ldr	r3, [r5, #12]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	f43f af61 	beq.w	801c0c4 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c202:	6863      	ldr	r3, [r4, #4]
 801c204:	692a      	ldr	r2, [r5, #16]
 801c206:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 801c20a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c20e:	6063      	str	r3, [r4, #4]
 801c210:	e77e      	b.n	801c110 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c212:	68eb      	ldr	r3, [r5, #12]
 801c214:	b17b      	cbz	r3, 801c236 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 801c216:	6823      	ldr	r3, [r4, #0]
 801c218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c21c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801c21e:	f7fc fa85 	bl	801872c <HAL_GetTick>
 801c222:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c224:	6823      	ldr	r3, [r4, #0]
 801c226:	055a      	lsls	r2, r3, #21
 801c228:	d4eb      	bmi.n	801c202 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c22a:	f7fc fa7f 	bl	801872c <HAL_GetTick>
 801c22e:	1bc0      	subs	r0, r0, r7
 801c230:	2802      	cmp	r0, #2
 801c232:	d9f7      	bls.n	801c224 <HAL_RCC_OscConfig+0x22c>
 801c234:	e784      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 801c236:	6823      	ldr	r3, [r4, #0]
 801c238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801c23c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801c23e:	f7fc fa75 	bl	801872c <HAL_GetTick>
 801c242:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c244:	6823      	ldr	r3, [r4, #0]
 801c246:	055b      	lsls	r3, r3, #21
 801c248:	f57f af62 	bpl.w	801c110 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c24c:	f7fc fa6e 	bl	801872c <HAL_GetTick>
 801c250:	1bc0      	subs	r0, r0, r7
 801c252:	2802      	cmp	r0, #2
 801c254:	d9f6      	bls.n	801c244 <HAL_RCC_OscConfig+0x24c>
 801c256:	e773      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
 801c258:	40021000 	.word	0x40021000
 801c25c:	08041e00 	.word	0x08041e00
 801c260:	20000424 	.word	0x20000424
 801c264:	2000042c 	.word	0x2000042c
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c268:	696b      	ldr	r3, [r5, #20]
 801c26a:	b19b      	cbz	r3, 801c294 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 801c26c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 801c270:	f043 0301 	orr.w	r3, r3, #1
 801c274:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 801c278:	f7fc fa58 	bl	801872c <HAL_GetTick>
 801c27c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c27e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 801c282:	079a      	lsls	r2, r3, #30
 801c284:	f53f af48 	bmi.w	801c118 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c288:	f7fc fa50 	bl	801872c <HAL_GetTick>
 801c28c:	1bc0      	subs	r0, r0, r7
 801c28e:	2802      	cmp	r0, #2
 801c290:	d9f5      	bls.n	801c27e <HAL_RCC_OscConfig+0x286>
 801c292:	e755      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 801c294:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 801c298:	f023 0301 	bic.w	r3, r3, #1
 801c29c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 801c2a0:	f7fc fa44 	bl	801872c <HAL_GetTick>
 801c2a4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c2a6:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 801c2aa:	079b      	lsls	r3, r3, #30
 801c2ac:	f57f af34 	bpl.w	801c118 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c2b0:	f7fc fa3c 	bl	801872c <HAL_GetTick>
 801c2b4:	1bc0      	subs	r0, r0, r7
 801c2b6:	2802      	cmp	r0, #2
 801c2b8:	d9f5      	bls.n	801c2a6 <HAL_RCC_OscConfig+0x2ae>
 801c2ba:	e741      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 801c2bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c2be:	00df      	lsls	r7, r3, #3
 801c2c0:	d429      	bmi.n	801c316 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 801c2c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c2c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c2c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 801c2ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c2cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801c2d0:	9301      	str	r3, [sp, #4]
 801c2d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801c2d4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c2d8:	4f97      	ldr	r7, [pc, #604]	@ (801c538 <HAL_RCC_OscConfig+0x540>)
 801c2da:	683b      	ldr	r3, [r7, #0]
 801c2dc:	05d8      	lsls	r0, r3, #23
 801c2de:	d51d      	bpl.n	801c31c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c2e0:	68ab      	ldr	r3, [r5, #8]
 801c2e2:	2b01      	cmp	r3, #1
 801c2e4:	d12b      	bne.n	801c33e <HAL_RCC_OscConfig+0x346>
 801c2e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 801c2ea:	f043 0301 	orr.w	r3, r3, #1
 801c2ee:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      tickstart = HAL_GetTick();
 801c2f2:	f7fc fa1b 	bl	801872c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c2f6:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 801c2fa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c2fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 801c300:	079a      	lsls	r2, r3, #30
 801c302:	d542      	bpl.n	801c38a <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 801c304:	f1b8 0f00 	cmp.w	r8, #0
 801c308:	f43f af0a 	beq.w	801c120 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 801c30c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801c30e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801c312:	65a3      	str	r3, [r4, #88]	@ 0x58
 801c314:	e704      	b.n	801c120 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 801c316:	f04f 0800 	mov.w	r8, #0
 801c31a:	e7dd      	b.n	801c2d8 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c31c:	683b      	ldr	r3, [r7, #0]
 801c31e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c322:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 801c324:	f7fc fa02 	bl	801872c <HAL_GetTick>
 801c328:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c32a:	683b      	ldr	r3, [r7, #0]
 801c32c:	05d9      	lsls	r1, r3, #23
 801c32e:	d4d7      	bmi.n	801c2e0 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c330:	f7fc f9fc 	bl	801872c <HAL_GetTick>
 801c334:	eba0 0009 	sub.w	r0, r0, r9
 801c338:	2802      	cmp	r0, #2
 801c33a:	d9f6      	bls.n	801c32a <HAL_RCC_OscConfig+0x332>
 801c33c:	e700      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c33e:	2b05      	cmp	r3, #5
 801c340:	d106      	bne.n	801c350 <HAL_RCC_OscConfig+0x358>
 801c342:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 801c346:	f043 0304 	orr.w	r3, r3, #4
 801c34a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 801c34e:	e7ca      	b.n	801c2e6 <HAL_RCC_OscConfig+0x2ee>
 801c350:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 801c354:	f022 0201 	bic.w	r2, r2, #1
 801c358:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
 801c35c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 801c360:	f022 0204 	bic.w	r2, r2, #4
 801c364:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d1c2      	bne.n	801c2f2 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 801c36c:	f7fc f9de 	bl	801872c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c370:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 801c374:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c376:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 801c37a:	079b      	lsls	r3, r3, #30
 801c37c:	d5c2      	bpl.n	801c304 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c37e:	f7fc f9d5 	bl	801872c <HAL_GetTick>
 801c382:	1bc0      	subs	r0, r0, r7
 801c384:	4548      	cmp	r0, r9
 801c386:	d9f6      	bls.n	801c376 <HAL_RCC_OscConfig+0x37e>
 801c388:	e6da      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c38a:	f7fc f9cf 	bl	801872c <HAL_GetTick>
 801c38e:	1bc0      	subs	r0, r0, r7
 801c390:	4548      	cmp	r0, r9
 801c392:	d9b3      	bls.n	801c2fc <HAL_RCC_OscConfig+0x304>
 801c394:	e6d4      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c396:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801c398:	b19b      	cbz	r3, 801c3c2 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 801c39a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 801c39e:	f043 0301 	orr.w	r3, r3, #1
 801c3a2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
      tickstart = HAL_GetTick();
 801c3a6:	f7fc f9c1 	bl	801872c <HAL_GetTick>
 801c3aa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c3ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 801c3b0:	0798      	lsls	r0, r3, #30
 801c3b2:	f53f aeb9 	bmi.w	801c128 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c3b6:	f7fc f9b9 	bl	801872c <HAL_GetTick>
 801c3ba:	1bc0      	subs	r0, r0, r7
 801c3bc:	2802      	cmp	r0, #2
 801c3be:	d9f5      	bls.n	801c3ac <HAL_RCC_OscConfig+0x3b4>
 801c3c0:	e6be      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 801c3c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 801c3c6:	f023 0301 	bic.w	r3, r3, #1
 801c3ca:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
      tickstart = HAL_GetTick();
 801c3ce:	f7fc f9ad 	bl	801872c <HAL_GetTick>
 801c3d2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c3d4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 801c3d8:	0799      	lsls	r1, r3, #30
 801c3da:	f57f aea5 	bpl.w	801c128 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c3de:	f7fc f9a5 	bl	801872c <HAL_GetTick>
 801c3e2:	1bc0      	subs	r0, r0, r7
 801c3e4:	2802      	cmp	r0, #2
 801c3e6:	d9f5      	bls.n	801c3d4 <HAL_RCC_OscConfig+0x3dc>
 801c3e8:	e6aa      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c3ea:	2b02      	cmp	r3, #2
 801c3ec:	f040 808c 	bne.w	801c508 <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 801c3f0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c3f2:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801c3f4:	f003 0103 	and.w	r1, r3, #3
 801c3f8:	4291      	cmp	r1, r2
 801c3fa:	d122      	bne.n	801c442 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c3fc:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 801c3fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 801c402:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 801c404:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 801c408:	d11b      	bne.n	801c442 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c40a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801c40c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c410:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 801c414:	d115      	bne.n	801c442 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c416:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 801c418:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c41c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 801c420:	d10f      	bne.n	801c442 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c422:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801c424:	0852      	lsrs	r2, r2, #1
 801c426:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 801c42a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c42c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 801c430:	d107      	bne.n	801c442 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c432:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801c434:	0852      	lsrs	r2, r2, #1
 801c436:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 801c43a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c43c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 801c440:	d049      	beq.n	801c4d6 <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c442:	2e0c      	cmp	r6, #12
 801c444:	f43f ae3e 	beq.w	801c0c4 <HAL_RCC_OscConfig+0xcc>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 801c448:	6823      	ldr	r3, [r4, #0]
 801c44a:	015a      	lsls	r2, r3, #5
 801c44c:	f53f ae3a 	bmi.w	801c0c4 <HAL_RCC_OscConfig+0xcc>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 801c450:	6823      	ldr	r3, [r4, #0]
 801c452:	00db      	lsls	r3, r3, #3
 801c454:	f53f ae36 	bmi.w	801c0c4 <HAL_RCC_OscConfig+0xcc>
            __HAL_RCC_PLL_DISABLE();
 801c458:	6823      	ldr	r3, [r4, #0]
 801c45a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c45e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 801c460:	f7fc f964 	bl	801872c <HAL_GetTick>
 801c464:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c466:	6823      	ldr	r3, [r4, #0]
 801c468:	019f      	lsls	r7, r3, #6
 801c46a:	d42e      	bmi.n	801c4ca <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c46c:	68e2      	ldr	r2, [r4, #12]
 801c46e:	4b33      	ldr	r3, [pc, #204]	@ (801c53c <HAL_RCC_OscConfig+0x544>)
 801c470:	4013      	ands	r3, r2
 801c472:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801c474:	4313      	orrs	r3, r2
 801c476:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 801c478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801c47c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 801c47e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 801c482:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801c484:	3a01      	subs	r2, #1
 801c486:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801c48a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 801c48c:	0852      	lsrs	r2, r2, #1
 801c48e:	3a01      	subs	r2, #1
 801c490:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 801c494:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 801c496:	0852      	lsrs	r2, r2, #1
 801c498:	3a01      	subs	r2, #1
 801c49a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 801c49e:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 801c4a0:	6823      	ldr	r3, [r4, #0]
 801c4a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c4a6:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c4a8:	68e3      	ldr	r3, [r4, #12]
 801c4aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c4ae:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 801c4b0:	f7fc f93c 	bl	801872c <HAL_GetTick>
 801c4b4:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c4b6:	6823      	ldr	r3, [r4, #0]
 801c4b8:	0198      	lsls	r0, r3, #6
 801c4ba:	f53f ae39 	bmi.w	801c130 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c4be:	f7fc f935 	bl	801872c <HAL_GetTick>
 801c4c2:	1b40      	subs	r0, r0, r5
 801c4c4:	2802      	cmp	r0, #2
 801c4c6:	d9f6      	bls.n	801c4b6 <HAL_RCC_OscConfig+0x4be>
 801c4c8:	e63a      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c4ca:	f7fc f92f 	bl	801872c <HAL_GetTick>
 801c4ce:	1b80      	subs	r0, r0, r6
 801c4d0:	2802      	cmp	r0, #2
 801c4d2:	d9c8      	bls.n	801c466 <HAL_RCC_OscConfig+0x46e>
 801c4d4:	e634      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c4d6:	6823      	ldr	r3, [r4, #0]
 801c4d8:	0199      	lsls	r1, r3, #6
 801c4da:	f53f ae29 	bmi.w	801c130 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 801c4de:	6823      	ldr	r3, [r4, #0]
 801c4e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c4e4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c4e6:	68e3      	ldr	r3, [r4, #12]
 801c4e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c4ec:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 801c4ee:	f7fc f91d 	bl	801872c <HAL_GetTick>
 801c4f2:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c4f4:	6823      	ldr	r3, [r4, #0]
 801c4f6:	019a      	lsls	r2, r3, #6
 801c4f8:	f53f ae1a 	bmi.w	801c130 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c4fc:	f7fc f916 	bl	801872c <HAL_GetTick>
 801c500:	1b40      	subs	r0, r0, r5
 801c502:	2802      	cmp	r0, #2
 801c504:	d9f6      	bls.n	801c4f4 <HAL_RCC_OscConfig+0x4fc>
 801c506:	e61b      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 801c508:	2e0c      	cmp	r6, #12
 801c50a:	f43f addb 	beq.w	801c0c4 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_PLL_DISABLE();
 801c50e:	6823      	ldr	r3, [r4, #0]
 801c510:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c514:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 801c516:	f7fc f909 	bl	801872c <HAL_GetTick>
 801c51a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c51c:	6823      	ldr	r3, [r4, #0]
 801c51e:	019b      	lsls	r3, r3, #6
 801c520:	d404      	bmi.n	801c52c <HAL_RCC_OscConfig+0x534>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 801c522:	68e2      	ldr	r2, [r4, #12]
 801c524:	4b06      	ldr	r3, [pc, #24]	@ (801c540 <HAL_RCC_OscConfig+0x548>)
 801c526:	4013      	ands	r3, r2
 801c528:	60e3      	str	r3, [r4, #12]
 801c52a:	e601      	b.n	801c130 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c52c:	f7fc f8fe 	bl	801872c <HAL_GetTick>
 801c530:	1b40      	subs	r0, r0, r5
 801c532:	2802      	cmp	r0, #2
 801c534:	d9f2      	bls.n	801c51c <HAL_RCC_OscConfig+0x524>
 801c536:	e603      	b.n	801c140 <HAL_RCC_OscConfig+0x148>
 801c538:	40007000 	.word	0x40007000
 801c53c:	019d800c 	.word	0x019d800c
 801c540:	feeefffc 	.word	0xfeeefffc

0801c544 <HAL_RCC_ClockConfig>:
{
 801c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c548:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 801c54a:	4605      	mov	r5, r0
 801c54c:	b910      	cbnz	r0, 801c554 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 801c54e:	2001      	movs	r0, #1
}
 801c550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801c554:	4a70      	ldr	r2, [pc, #448]	@ (801c718 <HAL_RCC_ClockConfig+0x1d4>)
 801c556:	6813      	ldr	r3, [r2, #0]
 801c558:	f003 030f 	and.w	r3, r3, #15
 801c55c:	428b      	cmp	r3, r1
 801c55e:	d343      	bcc.n	801c5e8 <HAL_RCC_ClockConfig+0xa4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c560:	6829      	ldr	r1, [r5, #0]
 801c562:	078f      	lsls	r7, r1, #30
 801c564:	d44b      	bmi.n	801c5fe <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c566:	07cc      	lsls	r4, r1, #31
 801c568:	d576      	bpl.n	801c658 <HAL_RCC_ClockConfig+0x114>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c56a:	686f      	ldr	r7, [r5, #4]
 801c56c:	4c6b      	ldr	r4, [pc, #428]	@ (801c71c <HAL_RCC_ClockConfig+0x1d8>)
 801c56e:	2f03      	cmp	r7, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c570:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c572:	f040 80a5 	bne.w	801c6c0 <HAL_RCC_ClockConfig+0x17c>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c576:	0198      	lsls	r0, r3, #6
 801c578:	d5e9      	bpl.n	801c54e <HAL_RCC_ClockConfig+0xa>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c57a:	68e3      	ldr	r3, [r4, #12]
 801c57c:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 801c580:	2b02      	cmp	r3, #2
 801c582:	d049      	beq.n	801c618 <HAL_RCC_ClockConfig+0xd4>
 801c584:	2b03      	cmp	r3, #3
 801c586:	d049      	beq.n	801c61c <HAL_RCC_ClockConfig+0xd8>
 801c588:	2b01      	cmp	r3, #1
 801c58a:	d149      	bne.n	801c620 <HAL_RCC_ClockConfig+0xdc>
    pllvco = HSE_VALUE;
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801c58c:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 801c58e:	4a64      	ldr	r2, [pc, #400]	@ (801c720 <HAL_RCC_ClockConfig+0x1dc>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801c590:	0719      	lsls	r1, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801c592:	bf55      	itete	pl
 801c594:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801c598:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 801c59a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 801c59e:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    pllvco = MSIRangeTable[msirange];
 801c5a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c5a6:	68e1      	ldr	r1, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801c5a8:	68e3      	ldr	r3, [r4, #12]
 801c5aa:	f3c3 2306 	ubfx	r3, r3, #8, #7
 801c5ae:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801c5b0:	68e2      	ldr	r2, [r4, #12]
 801c5b2:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c5b6:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801c5ba:	3201      	adds	r2, #1
 801c5bc:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c5be:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801c5c0:	fbb3 f3f1 	udiv	r3, r3, r1
  sysclockfreq = pllvco / pllr;
 801c5c4:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 801c5c8:	4a56      	ldr	r2, [pc, #344]	@ (801c724 <HAL_RCC_ClockConfig+0x1e0>)
 801c5ca:	4293      	cmp	r3, r2
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 801c5cc:	d92a      	bls.n	801c624 <HAL_RCC_ClockConfig+0xe0>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 801c5ce:	68a3      	ldr	r3, [r4, #8]
 801c5d0:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 801c5d4:	d126      	bne.n	801c624 <HAL_RCC_ClockConfig+0xe0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c5d6:	68a3      	ldr	r3, [r4, #8]
 801c5d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801c5dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c5e0:	60a3      	str	r3, [r4, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c5e2:	f04f 0880 	mov.w	r8, #128	@ 0x80
 801c5e6:	e01f      	b.n	801c628 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c5e8:	6813      	ldr	r3, [r2, #0]
 801c5ea:	f023 030f 	bic.w	r3, r3, #15
 801c5ee:	430b      	orrs	r3, r1
 801c5f0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c5f2:	6813      	ldr	r3, [r2, #0]
 801c5f4:	f003 030f 	and.w	r3, r3, #15
 801c5f8:	428b      	cmp	r3, r1
 801c5fa:	d1a8      	bne.n	801c54e <HAL_RCC_ClockConfig+0xa>
 801c5fc:	e7b0      	b.n	801c560 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801c5fe:	4a47      	ldr	r2, [pc, #284]	@ (801c71c <HAL_RCC_ClockConfig+0x1d8>)
 801c600:	68a8      	ldr	r0, [r5, #8]
 801c602:	6893      	ldr	r3, [r2, #8]
 801c604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c608:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c60a:	bf81      	itttt	hi
 801c60c:	6893      	ldrhi	r3, [r2, #8]
 801c60e:	f023 03f0 	bichi.w	r3, r3, #240	@ 0xf0
 801c612:	4303      	orrhi	r3, r0
 801c614:	6093      	strhi	r3, [r2, #8]
 801c616:	e7a6      	b.n	801c566 <HAL_RCC_ClockConfig+0x22>
    pllvco = HSI_VALUE;
 801c618:	4a43      	ldr	r2, [pc, #268]	@ (801c728 <HAL_RCC_ClockConfig+0x1e4>)
 801c61a:	e7c4      	b.n	801c5a6 <HAL_RCC_ClockConfig+0x62>
  switch (pllsource)
 801c61c:	4a43      	ldr	r2, [pc, #268]	@ (801c72c <HAL_RCC_ClockConfig+0x1e8>)
 801c61e:	e7c2      	b.n	801c5a6 <HAL_RCC_ClockConfig+0x62>
    pllvco = 0;
 801c620:	2200      	movs	r2, #0
 801c622:	e7c0      	b.n	801c5a6 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c624:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c628:	68a3      	ldr	r3, [r4, #8]
 801c62a:	f023 0303 	bic.w	r3, r3, #3
 801c62e:	433b      	orrs	r3, r7
 801c630:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 801c632:	f7fc f87b 	bl	801872c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c636:	f241 3988 	movw	r9, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 801c63a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c63c:	68a3      	ldr	r3, [r4, #8]
 801c63e:	686a      	ldr	r2, [r5, #4]
 801c640:	f003 030c 	and.w	r3, r3, #12
 801c644:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801c648:	d14c      	bne.n	801c6e4 <HAL_RCC_ClockConfig+0x1a0>
  if(hpre == RCC_SYSCLK_DIV2)
 801c64a:	f1b8 0f00 	cmp.w	r8, #0
 801c64e:	d003      	beq.n	801c658 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801c650:	68a3      	ldr	r3, [r4, #8]
 801c652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801c656:	60a3      	str	r3, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c658:	6829      	ldr	r1, [r5, #0]
 801c65a:	078a      	lsls	r2, r1, #30
 801c65c:	d50b      	bpl.n	801c676 <HAL_RCC_ClockConfig+0x132>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 801c65e:	4a2f      	ldr	r2, [pc, #188]	@ (801c71c <HAL_RCC_ClockConfig+0x1d8>)
 801c660:	68a8      	ldr	r0, [r5, #8]
 801c662:	6893      	ldr	r3, [r2, #8]
 801c664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c668:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c66a:	bf3f      	itttt	cc
 801c66c:	6893      	ldrcc	r3, [r2, #8]
 801c66e:	f023 03f0 	biccc.w	r3, r3, #240	@ 0xf0
 801c672:	4303      	orrcc	r3, r0
 801c674:	6093      	strcc	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801c676:	4a28      	ldr	r2, [pc, #160]	@ (801c718 <HAL_RCC_ClockConfig+0x1d4>)
 801c678:	6813      	ldr	r3, [r2, #0]
 801c67a:	f003 030f 	and.w	r3, r3, #15
 801c67e:	42b3      	cmp	r3, r6
 801c680:	d837      	bhi.n	801c6f2 <HAL_RCC_ClockConfig+0x1ae>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c682:	f011 0f04 	tst.w	r1, #4
 801c686:	4c25      	ldr	r4, [pc, #148]	@ (801c71c <HAL_RCC_ClockConfig+0x1d8>)
 801c688:	d13f      	bne.n	801c70a <HAL_RCC_ClockConfig+0x1c6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c68a:	070b      	lsls	r3, r1, #28
 801c68c:	d506      	bpl.n	801c69c <HAL_RCC_ClockConfig+0x158>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c68e:	68a3      	ldr	r3, [r4, #8]
 801c690:	692a      	ldr	r2, [r5, #16]
 801c692:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 801c696:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c69a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c69c:	f7ff fc62 	bl	801bf64 <HAL_RCC_GetSysClockFreq>
 801c6a0:	68a3      	ldr	r3, [r4, #8]
 801c6a2:	4a23      	ldr	r2, [pc, #140]	@ (801c730 <HAL_RCC_ClockConfig+0x1ec>)
 801c6a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801c6a8:	5cd3      	ldrb	r3, [r2, r3]
 801c6aa:	f003 031f 	and.w	r3, r3, #31
 801c6ae:	40d8      	lsrs	r0, r3
 801c6b0:	4b20      	ldr	r3, [pc, #128]	@ (801c734 <HAL_RCC_ClockConfig+0x1f0>)
 801c6b2:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 801c6b4:	4b20      	ldr	r3, [pc, #128]	@ (801c738 <HAL_RCC_ClockConfig+0x1f4>)
 801c6b6:	6818      	ldr	r0, [r3, #0]
}
 801c6b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 801c6bc:	f7fb bb0a 	b.w	8017cd4 <HAL_InitTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c6c0:	2f02      	cmp	r7, #2
 801c6c2:	d108      	bne.n	801c6d6 <HAL_RCC_ClockConfig+0x192>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c6c4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c6c8:	f43f af41 	beq.w	801c54e <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 801c6cc:	f7ff fc4a 	bl	801bf64 <HAL_RCC_GetSysClockFreq>
 801c6d0:	4b14      	ldr	r3, [pc, #80]	@ (801c724 <HAL_RCC_ClockConfig+0x1e0>)
 801c6d2:	4298      	cmp	r0, r3
 801c6d4:	e77a      	b.n	801c5cc <HAL_RCC_ClockConfig+0x88>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801c6d6:	b917      	cbnz	r7, 801c6de <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801c6d8:	f013 0f02 	tst.w	r3, #2
 801c6dc:	e7f4      	b.n	801c6c8 <HAL_RCC_ClockConfig+0x184>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c6de:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 801c6e2:	e7f1      	b.n	801c6c8 <HAL_RCC_ClockConfig+0x184>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c6e4:	f7fc f822 	bl	801872c <HAL_GetTick>
 801c6e8:	1bc0      	subs	r0, r0, r7
 801c6ea:	4548      	cmp	r0, r9
 801c6ec:	d9a6      	bls.n	801c63c <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 801c6ee:	2003      	movs	r0, #3
 801c6f0:	e72e      	b.n	801c550 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c6f2:	6813      	ldr	r3, [r2, #0]
 801c6f4:	f023 030f 	bic.w	r3, r3, #15
 801c6f8:	4333      	orrs	r3, r6
 801c6fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801c6fc:	6813      	ldr	r3, [r2, #0]
 801c6fe:	f003 030f 	and.w	r3, r3, #15
 801c702:	42b3      	cmp	r3, r6
 801c704:	f47f af23 	bne.w	801c54e <HAL_RCC_ClockConfig+0xa>
 801c708:	e7bb      	b.n	801c682 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c70a:	68a3      	ldr	r3, [r4, #8]
 801c70c:	68ea      	ldr	r2, [r5, #12]
 801c70e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 801c712:	4313      	orrs	r3, r2
 801c714:	60a3      	str	r3, [r4, #8]
 801c716:	e7b8      	b.n	801c68a <HAL_RCC_ClockConfig+0x146>
 801c718:	40022000 	.word	0x40022000
 801c71c:	40021000 	.word	0x40021000
 801c720:	08041dc8 	.word	0x08041dc8
 801c724:	04c4b400 	.word	0x04c4b400
 801c728:	00f42400 	.word	0x00f42400
 801c72c:	017d7840 	.word	0x017d7840
 801c730:	08041e00 	.word	0x08041e00
 801c734:	20000424 	.word	0x20000424
 801c738:	2000042c 	.word	0x2000042c

0801c73c <HAL_RCC_GetHCLKFreq>:
}
 801c73c:	4b01      	ldr	r3, [pc, #4]	@ (801c744 <HAL_RCC_GetHCLKFreq+0x8>)
 801c73e:	6818      	ldr	r0, [r3, #0]
 801c740:	4770      	bx	lr
 801c742:	bf00      	nop
 801c744:	20000424 	.word	0x20000424

0801c748 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801c748:	4b05      	ldr	r3, [pc, #20]	@ (801c760 <HAL_RCC_GetPCLK1Freq+0x18>)
 801c74a:	4a06      	ldr	r2, [pc, #24]	@ (801c764 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801c74c:	689b      	ldr	r3, [r3, #8]
 801c74e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 801c752:	5cd3      	ldrb	r3, [r2, r3]
 801c754:	4a04      	ldr	r2, [pc, #16]	@ (801c768 <HAL_RCC_GetPCLK1Freq+0x20>)
 801c756:	6810      	ldr	r0, [r2, #0]
 801c758:	f003 031f 	and.w	r3, r3, #31
}
 801c75c:	40d8      	lsrs	r0, r3
 801c75e:	4770      	bx	lr
 801c760:	40021000 	.word	0x40021000
 801c764:	08041df8 	.word	0x08041df8
 801c768:	20000424 	.word	0x20000424

0801c76c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801c76c:	4b05      	ldr	r3, [pc, #20]	@ (801c784 <HAL_RCC_GetPCLK2Freq+0x18>)
 801c76e:	4a06      	ldr	r2, [pc, #24]	@ (801c788 <HAL_RCC_GetPCLK2Freq+0x1c>)
 801c770:	689b      	ldr	r3, [r3, #8]
 801c772:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 801c776:	5cd3      	ldrb	r3, [r2, r3]
 801c778:	4a04      	ldr	r2, [pc, #16]	@ (801c78c <HAL_RCC_GetPCLK2Freq+0x20>)
 801c77a:	6810      	ldr	r0, [r2, #0]
 801c77c:	f003 031f 	and.w	r3, r3, #31
}
 801c780:	40d8      	lsrs	r0, r3
 801c782:	4770      	bx	lr
 801c784:	40021000 	.word	0x40021000
 801c788:	08041df8 	.word	0x08041df8
 801c78c:	20000424 	.word	0x20000424

0801c790 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801c790:	230f      	movs	r3, #15
 801c792:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 801c794:	4b0b      	ldr	r3, [pc, #44]	@ (801c7c4 <HAL_RCC_GetClockConfig+0x34>)
 801c796:	689a      	ldr	r2, [r3, #8]
 801c798:	f002 0203 	and.w	r2, r2, #3
 801c79c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 801c79e:	689a      	ldr	r2, [r3, #8]
 801c7a0:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 801c7a4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 801c7a6:	689a      	ldr	r2, [r3, #8]
 801c7a8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 801c7ac:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 801c7ae:	689b      	ldr	r3, [r3, #8]
 801c7b0:	08db      	lsrs	r3, r3, #3
 801c7b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c7b6:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 801c7b8:	4b03      	ldr	r3, [pc, #12]	@ (801c7c8 <HAL_RCC_GetClockConfig+0x38>)
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	f003 030f 	and.w	r3, r3, #15
 801c7c0:	600b      	str	r3, [r1, #0]
}
 801c7c2:	4770      	bx	lr
 801c7c4:	40021000 	.word	0x40021000
 801c7c8:	40022000 	.word	0x40022000

0801c7cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801c7ce:	4c3b      	ldr	r4, [pc, #236]	@ (801c8bc <RCCEx_PLLSAI1_Config+0xf0>)
 801c7d0:	68e3      	ldr	r3, [r4, #12]
 801c7d2:	079b      	lsls	r3, r3, #30
{
 801c7d4:	4605      	mov	r5, r0
 801c7d6:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801c7d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801c7da:	d022      	beq.n	801c822 <RCCEx_PLLSAI1_Config+0x56>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801c7dc:	68e3      	ldr	r3, [r4, #12]
 801c7de:	f003 0303 	and.w	r3, r3, #3
 801c7e2:	4283      	cmp	r3, r0
 801c7e4:	d130      	bne.n	801c848 <RCCEx_PLLSAI1_Config+0x7c>
       ||
 801c7e6:	b37b      	cbz	r3, 801c848 <RCCEx_PLLSAI1_Config+0x7c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801c7e8:	6823      	ldr	r3, [r4, #0]
 801c7ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801c7ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c7f0:	f7fb ff9c 	bl	801872c <HAL_GetTick>
 801c7f4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801c7f6:	6823      	ldr	r3, [r4, #0]
 801c7f8:	011a      	lsls	r2, r3, #4
 801c7fa:	d42e      	bmi.n	801c85a <RCCEx_PLLSAI1_Config+0x8e>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c7fc:	686a      	ldr	r2, [r5, #4]
 801c7fe:	68a8      	ldr	r0, [r5, #8]
 801c800:	3a01      	subs	r2, #1
 801c802:	0200      	lsls	r0, r0, #8
 801c804:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 801c806:	b37e      	cbz	r6, 801c868 <RCCEx_PLLSAI1_Config+0x9c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801c808:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c80a:	6926      	ldr	r6, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 801c80c:	d145      	bne.n	801c89a <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c80e:	692b      	ldr	r3, [r5, #16]
 801c810:	085b      	lsrs	r3, r3, #1
 801c812:	1e59      	subs	r1, r3, #1
 801c814:	4b2a      	ldr	r3, [pc, #168]	@ (801c8c0 <RCCEx_PLLSAI1_Config+0xf4>)
 801c816:	4033      	ands	r3, r6
 801c818:	4303      	orrs	r3, r0
 801c81a:	4313      	orrs	r3, r2
 801c81c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 801c820:	e02a      	b.n	801c878 <RCCEx_PLLSAI1_Config+0xac>
    switch(PllSai1->PLLSAI1Source)
 801c822:	2802      	cmp	r0, #2
 801c824:	d00c      	beq.n	801c840 <RCCEx_PLLSAI1_Config+0x74>
 801c826:	2803      	cmp	r0, #3
 801c828:	d010      	beq.n	801c84c <RCCEx_PLLSAI1_Config+0x80>
 801c82a:	2801      	cmp	r0, #1
 801c82c:	d10c      	bne.n	801c848 <RCCEx_PLLSAI1_Config+0x7c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801c82e:	6823      	ldr	r3, [r4, #0]
 801c830:	079f      	lsls	r7, r3, #30
 801c832:	d518      	bpl.n	801c866 <RCCEx_PLLSAI1_Config+0x9a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 801c834:	68e3      	ldr	r3, [r4, #12]
 801c836:	f023 0303 	bic.w	r3, r3, #3
 801c83a:	4303      	orrs	r3, r0
 801c83c:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 801c83e:	e7d3      	b.n	801c7e8 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801c840:	6823      	ldr	r3, [r4, #0]
 801c842:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801c846:	d1f5      	bne.n	801c834 <RCCEx_PLLSAI1_Config+0x68>
 801c848:	2001      	movs	r0, #1
 801c84a:	e00c      	b.n	801c866 <RCCEx_PLLSAI1_Config+0x9a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801c84c:	6823      	ldr	r3, [r4, #0]
 801c84e:	0399      	lsls	r1, r3, #14
 801c850:	d4f0      	bmi.n	801c834 <RCCEx_PLLSAI1_Config+0x68>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801c852:	6823      	ldr	r3, [r4, #0]
 801c854:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c858:	e7f5      	b.n	801c846 <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c85a:	f7fb ff67 	bl	801872c <HAL_GetTick>
 801c85e:	1bc0      	subs	r0, r0, r7
 801c860:	2802      	cmp	r0, #2
 801c862:	d9c8      	bls.n	801c7f6 <RCCEx_PLLSAI1_Config+0x2a>
 801c864:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 801c866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c868:	6926      	ldr	r6, [r4, #16]
 801c86a:	68eb      	ldr	r3, [r5, #12]
 801c86c:	4915      	ldr	r1, [pc, #84]	@ (801c8c4 <RCCEx_PLLSAI1_Config+0xf8>)
 801c86e:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
 801c872:	4031      	ands	r1, r6
 801c874:	430b      	orrs	r3, r1
 801c876:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c878:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 801c87a:	6823      	ldr	r3, [r4, #0]
 801c87c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801c880:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 801c882:	f7fb ff53 	bl	801872c <HAL_GetTick>
 801c886:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801c888:	6823      	ldr	r3, [r4, #0]
 801c88a:	011b      	lsls	r3, r3, #4
 801c88c:	d50f      	bpl.n	801c8ae <RCCEx_PLLSAI1_Config+0xe2>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801c88e:	6923      	ldr	r3, [r4, #16]
 801c890:	69aa      	ldr	r2, [r5, #24]
 801c892:	4313      	orrs	r3, r2
 801c894:	6123      	str	r3, [r4, #16]
 801c896:	2000      	movs	r0, #0
  return status;
 801c898:	e7e5      	b.n	801c866 <RCCEx_PLLSAI1_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801c89a:	696b      	ldr	r3, [r5, #20]
 801c89c:	085b      	lsrs	r3, r3, #1
 801c89e:	1e59      	subs	r1, r3, #1
 801c8a0:	4b09      	ldr	r3, [pc, #36]	@ (801c8c8 <RCCEx_PLLSAI1_Config+0xfc>)
 801c8a2:	4033      	ands	r3, r6
 801c8a4:	4303      	orrs	r3, r0
 801c8a6:	4313      	orrs	r3, r2
 801c8a8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 801c8ac:	e7e4      	b.n	801c878 <RCCEx_PLLSAI1_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801c8ae:	f7fb ff3d 	bl	801872c <HAL_GetTick>
 801c8b2:	1b80      	subs	r0, r0, r6
 801c8b4:	2802      	cmp	r0, #2
 801c8b6:	d9e7      	bls.n	801c888 <RCCEx_PLLSAI1_Config+0xbc>
 801c8b8:	e7d4      	b.n	801c864 <RCCEx_PLLSAI1_Config+0x98>
 801c8ba:	bf00      	nop
 801c8bc:	40021000 	.word	0x40021000
 801c8c0:	ff9f800f 	.word	0xff9f800f
 801c8c4:	07ff800f 	.word	0x07ff800f
 801c8c8:	f9ff800f 	.word	0xf9ff800f

0801c8cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 801c8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801c8ce:	4c35      	ldr	r4, [pc, #212]	@ (801c9a4 <RCCEx_PLLSAI2_Config+0xd8>)
 801c8d0:	68e3      	ldr	r3, [r4, #12]
 801c8d2:	079b      	lsls	r3, r3, #30
{
 801c8d4:	4605      	mov	r5, r0
 801c8d6:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801c8d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801c8da:	d021      	beq.n	801c920 <RCCEx_PLLSAI2_Config+0x54>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801c8dc:	68e3      	ldr	r3, [r4, #12]
 801c8de:	f003 0303 	and.w	r3, r3, #3
 801c8e2:	4283      	cmp	r3, r0
 801c8e4:	d12f      	bne.n	801c946 <RCCEx_PLLSAI2_Config+0x7a>
       ||
 801c8e6:	b373      	cbz	r3, 801c946 <RCCEx_PLLSAI2_Config+0x7a>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801c8e8:	6823      	ldr	r3, [r4, #0]
 801c8ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801c8ee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c8f0:	f7fb ff1c 	bl	801872c <HAL_GetTick>
 801c8f4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801c8f6:	6823      	ldr	r3, [r4, #0]
 801c8f8:	009a      	lsls	r2, r3, #2
 801c8fa:	d42d      	bmi.n	801c958 <RCCEx_PLLSAI2_Config+0x8c>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801c8fc:	6868      	ldr	r0, [r5, #4]
 801c8fe:	68ab      	ldr	r3, [r5, #8]
 801c900:	3801      	subs	r0, #1
 801c902:	021b      	lsls	r3, r3, #8
 801c904:	0100      	lsls	r0, r0, #4
      if(Divider == DIVIDER_P_UPDATE)
 801c906:	b376      	cbz	r6, 801c966 <RCCEx_PLLSAI2_Config+0x9a>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801c908:	696a      	ldr	r2, [r5, #20]
 801c90a:	6966      	ldr	r6, [r4, #20]
 801c90c:	0852      	lsrs	r2, r2, #1
 801c90e:	1e51      	subs	r1, r2, #1
 801c910:	4a25      	ldr	r2, [pc, #148]	@ (801c9a8 <RCCEx_PLLSAI2_Config+0xdc>)
 801c912:	4032      	ands	r2, r6
 801c914:	431a      	orrs	r2, r3
 801c916:	4302      	orrs	r2, r0
 801c918:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 801c91c:	6162      	str	r2, [r4, #20]
 801c91e:	e02b      	b.n	801c978 <RCCEx_PLLSAI2_Config+0xac>
    switch(PllSai2->PLLSAI2Source)
 801c920:	2802      	cmp	r0, #2
 801c922:	d00c      	beq.n	801c93e <RCCEx_PLLSAI2_Config+0x72>
 801c924:	2803      	cmp	r0, #3
 801c926:	d010      	beq.n	801c94a <RCCEx_PLLSAI2_Config+0x7e>
 801c928:	2801      	cmp	r0, #1
 801c92a:	d10c      	bne.n	801c946 <RCCEx_PLLSAI2_Config+0x7a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801c92c:	6823      	ldr	r3, [r4, #0]
 801c92e:	079f      	lsls	r7, r3, #30
 801c930:	d518      	bpl.n	801c964 <RCCEx_PLLSAI2_Config+0x98>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 801c932:	68e3      	ldr	r3, [r4, #12]
 801c934:	f023 0303 	bic.w	r3, r3, #3
 801c938:	4303      	orrs	r3, r0
 801c93a:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 801c93c:	e7d4      	b.n	801c8e8 <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801c93e:	6823      	ldr	r3, [r4, #0]
 801c940:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801c944:	d1f5      	bne.n	801c932 <RCCEx_PLLSAI2_Config+0x66>
 801c946:	2001      	movs	r0, #1
 801c948:	e00c      	b.n	801c964 <RCCEx_PLLSAI2_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801c94a:	6823      	ldr	r3, [r4, #0]
 801c94c:	0399      	lsls	r1, r3, #14
 801c94e:	d4f0      	bmi.n	801c932 <RCCEx_PLLSAI2_Config+0x66>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801c950:	6823      	ldr	r3, [r4, #0]
 801c952:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 801c956:	e7f5      	b.n	801c944 <RCCEx_PLLSAI2_Config+0x78>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801c958:	f7fb fee8 	bl	801872c <HAL_GetTick>
 801c95c:	1bc0      	subs	r0, r0, r7
 801c95e:	2802      	cmp	r0, #2
 801c960:	d9c9      	bls.n	801c8f6 <RCCEx_PLLSAI2_Config+0x2a>
 801c962:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 801c964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801c966:	68ea      	ldr	r2, [r5, #12]
 801c968:	6961      	ldr	r1, [r4, #20]
 801c96a:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 801c96e:	4a0f      	ldr	r2, [pc, #60]	@ (801c9ac <RCCEx_PLLSAI2_Config+0xe0>)
 801c970:	400a      	ands	r2, r1
 801c972:	4313      	orrs	r3, r2
 801c974:	4303      	orrs	r3, r0
 801c976:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 801c978:	6823      	ldr	r3, [r4, #0]
 801c97a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801c97e:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 801c980:	f7fb fed4 	bl	801872c <HAL_GetTick>
 801c984:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801c986:	6823      	ldr	r3, [r4, #0]
 801c988:	009b      	lsls	r3, r3, #2
 801c98a:	d505      	bpl.n	801c998 <RCCEx_PLLSAI2_Config+0xcc>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 801c98c:	6963      	ldr	r3, [r4, #20]
 801c98e:	69aa      	ldr	r2, [r5, #24]
 801c990:	4313      	orrs	r3, r2
 801c992:	6163      	str	r3, [r4, #20]
 801c994:	2000      	movs	r0, #0
  return status;
 801c996:	e7e5      	b.n	801c964 <RCCEx_PLLSAI2_Config+0x98>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801c998:	f7fb fec8 	bl	801872c <HAL_GetTick>
 801c99c:	1b80      	subs	r0, r0, r6
 801c99e:	2802      	cmp	r0, #2
 801c9a0:	d9f1      	bls.n	801c986 <RCCEx_PLLSAI2_Config+0xba>
 801c9a2:	e7de      	b.n	801c962 <RCCEx_PLLSAI2_Config+0x96>
 801c9a4:	40021000 	.word	0x40021000
 801c9a8:	f9ff800f 	.word	0xf9ff800f
 801c9ac:	07ff800f 	.word	0x07ff800f

0801c9b0 <HAL_RCCEx_PeriphCLKConfig>:
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801c9b0:	6803      	ldr	r3, [r0, #0]
 801c9b2:	051a      	lsls	r2, r3, #20
{
 801c9b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801c9b8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801c9ba:	d527      	bpl.n	801ca0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch(PeriphClkInit->Sai1ClockSelection)
 801c9bc:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 801c9be:	2940      	cmp	r1, #64	@ 0x40
 801c9c0:	d026      	beq.n	801ca10 <HAL_RCCEx_PeriphCLKConfig+0x60>
 801c9c2:	d816      	bhi.n	801c9f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 801c9c4:	b351      	cbz	r1, 801ca1c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 801c9c6:	2920      	cmp	r1, #32
 801c9c8:	d02f      	beq.n	801ca2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801c9ca:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801c9cc:	6823      	ldr	r3, [r4, #0]
 801c9ce:	04db      	lsls	r3, r3, #19
 801c9d0:	d50d      	bpl.n	801c9ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 801c9d2:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801c9d4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801c9d8:	f000 81ac 	beq.w	801cd34 <HAL_RCCEx_PeriphCLKConfig+0x384>
 801c9dc:	d82c      	bhi.n	801ca38 <HAL_RCCEx_PeriphCLKConfig+0x88>
 801c9de:	2900      	cmp	r1, #0
 801c9e0:	f000 81ae 	beq.w	801cd40 <HAL_RCCEx_PeriphCLKConfig+0x390>
 801c9e4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 801c9e8:	f000 81af 	beq.w	801cd4a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 801c9ec:	2601      	movs	r6, #1
 801c9ee:	4635      	mov	r5, r6
 801c9f0:	e035      	b.n	801ca5e <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai1ClockSelection)
 801c9f2:	2960      	cmp	r1, #96	@ 0x60
 801c9f4:	d001      	beq.n	801c9fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
 801c9f6:	2980      	cmp	r1, #128	@ 0x80
 801c9f8:	d1e7      	bne.n	801c9ca <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c9fa:	4a0e      	ldr	r2, [pc, #56]	@ (801ca34 <HAL_RCCEx_PeriphCLKConfig+0x84>)
 801c9fc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 801c9fe:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 801ca02:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 801ca06:	430b      	orrs	r3, r1
 801ca08:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801ca0c:	2600      	movs	r6, #0
 801ca0e:	e7dd      	b.n	801c9cc <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801ca10:	4a08      	ldr	r2, [pc, #32]	@ (801ca34 <HAL_RCCEx_PeriphCLKConfig+0x84>)
 801ca12:	68d3      	ldr	r3, [r2, #12]
 801ca14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ca18:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 801ca1a:	e7ee      	b.n	801c9fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801ca1c:	3004      	adds	r0, #4
 801ca1e:	f7ff fed5 	bl	801c7cc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801ca22:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 801ca24:	2800      	cmp	r0, #0
 801ca26:	d1d1      	bne.n	801c9cc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801ca28:	e7e7      	b.n	801c9fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801ca2a:	2100      	movs	r1, #0
 801ca2c:	3020      	adds	r0, #32
 801ca2e:	f7ff ff4d 	bl	801c8cc <RCCEx_PLLSAI2_Config>
 801ca32:	e7f6      	b.n	801ca22 <HAL_RCCEx_PeriphCLKConfig+0x72>
 801ca34:	40021000 	.word	0x40021000
    switch(PeriphClkInit->Sai2ClockSelection)
 801ca38:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 801ca3c:	d002      	beq.n	801ca44 <HAL_RCCEx_PeriphCLKConfig+0x94>
 801ca3e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801ca42:	d1d3      	bne.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai1ClockSelection)
 801ca44:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 801ca46:	2d00      	cmp	r5, #0
 801ca48:	f040 8185 	bne.w	801cd56 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801ca4c:	4ab3      	ldr	r2, [pc, #716]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801ca4e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801ca50:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 801ca54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 801ca58:	430b      	orrs	r3, r1
 801ca5a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ca5e:	6823      	ldr	r3, [r4, #0]
 801ca60:	039f      	lsls	r7, r3, #14
 801ca62:	d53a      	bpl.n	801cada <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801ca64:	4fad      	ldr	r7, [pc, #692]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801ca66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ca68:	00d8      	lsls	r0, r3, #3
 801ca6a:	f100 8176 	bmi.w	801cd5a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      __HAL_RCC_PWR_CLK_ENABLE();
 801ca6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ca70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801ca74:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ca76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ca78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801ca7c:	9301      	str	r3, [sp, #4]
 801ca7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801ca80:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ca84:	f8df 9298 	ldr.w	r9, [pc, #664]	@ 801cd20 <HAL_RCCEx_PeriphCLKConfig+0x370>
 801ca88:	f8d9 3000 	ldr.w	r3, [r9]
 801ca8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ca90:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 801ca94:	f7fb fe4a 	bl	801872c <HAL_GetTick>
 801ca98:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801ca9a:	f8d9 3000 	ldr.w	r3, [r9]
 801ca9e:	05d9      	lsls	r1, r3, #23
 801caa0:	f140 815e 	bpl.w	801cd60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    if(ret == HAL_OK)
 801caa4:	2d00      	cmp	r5, #0
 801caa6:	f040 818e 	bne.w	801cdc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801caaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801caae:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 801cab2:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 801cab6:	f040 815d 	bne.w	801cd74 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801caba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cabe:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 801cac2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801cac6:	4313      	orrs	r3, r2
 801cac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(pwrclkchanged == SET)
 801cacc:	f1b8 0f00 	cmp.w	r8, #0
 801cad0:	d003      	beq.n	801cada <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_DISABLE();
 801cad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801cad8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801cada:	6823      	ldr	r3, [r4, #0]
 801cadc:	07d8      	lsls	r0, r3, #31
 801cade:	d508      	bpl.n	801caf2 <HAL_RCCEx_PeriphCLKConfig+0x142>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801cae0:	498e      	ldr	r1, [pc, #568]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cae2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801cae4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cae8:	f022 0203 	bic.w	r2, r2, #3
 801caec:	4302      	orrs	r2, r0
 801caee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801caf2:	0799      	lsls	r1, r3, #30
 801caf4:	d508      	bpl.n	801cb08 <HAL_RCCEx_PeriphCLKConfig+0x158>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801caf6:	4989      	ldr	r1, [pc, #548]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801caf8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 801cafa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cafe:	f022 020c 	bic.w	r2, r2, #12
 801cb02:	4302      	orrs	r2, r0
 801cb04:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801cb08:	075a      	lsls	r2, r3, #29
 801cb0a:	d508      	bpl.n	801cb1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801cb0c:	4983      	ldr	r1, [pc, #524]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cb0e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 801cb10:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cb14:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 801cb18:	4302      	orrs	r2, r0
 801cb1a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801cb1e:	071f      	lsls	r7, r3, #28
 801cb20:	d508      	bpl.n	801cb34 <HAL_RCCEx_PeriphCLKConfig+0x184>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801cb22:	497e      	ldr	r1, [pc, #504]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cb24:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 801cb26:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cb2a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 801cb2e:	4302      	orrs	r2, r0
 801cb30:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801cb34:	06d8      	lsls	r0, r3, #27
 801cb36:	d508      	bpl.n	801cb4a <HAL_RCCEx_PeriphCLKConfig+0x19a>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801cb38:	4978      	ldr	r1, [pc, #480]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cb3a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801cb3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cb40:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 801cb44:	4302      	orrs	r2, r0
 801cb46:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cb4a:	0699      	lsls	r1, r3, #26
 801cb4c:	d508      	bpl.n	801cb60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cb4e:	4973      	ldr	r1, [pc, #460]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cb50:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 801cb52:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cb56:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801cb5a:	4302      	orrs	r2, r0
 801cb5c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801cb60:	059a      	lsls	r2, r3, #22
 801cb62:	d508      	bpl.n	801cb76 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cb64:	496d      	ldr	r1, [pc, #436]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cb66:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 801cb68:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cb6c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 801cb70:	4302      	orrs	r2, r0
 801cb72:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801cb76:	055f      	lsls	r7, r3, #21
 801cb78:	d508      	bpl.n	801cb8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801cb7a:	4968      	ldr	r1, [pc, #416]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cb7c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 801cb7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cb82:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 801cb86:	4302      	orrs	r2, r0
 801cb88:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cb8c:	0658      	lsls	r0, r3, #25
 801cb8e:	d508      	bpl.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cb90:	4962      	ldr	r1, [pc, #392]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cb92:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801cb94:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cb98:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 801cb9c:	4302      	orrs	r2, r0
 801cb9e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cba2:	0619      	lsls	r1, r3, #24
 801cba4:	d508      	bpl.n	801cbb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cba6:	495d      	ldr	r1, [pc, #372]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cbaa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cbae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801cbb2:	4302      	orrs	r2, r0
 801cbb4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801cbb8:	05da      	lsls	r2, r3, #23
 801cbba:	d508      	bpl.n	801cbce <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cbbc:	4957      	ldr	r1, [pc, #348]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cbbe:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 801cbc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 801cbc4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 801cbc8:	4302      	orrs	r2, r0
 801cbca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801cbce:	02df      	lsls	r7, r3, #11
 801cbd0:	d508      	bpl.n	801cbe4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801cbd2:	4952      	ldr	r1, [pc, #328]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cbd4:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 801cbd6:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 801cbda:	f022 0203 	bic.w	r2, r2, #3
 801cbde:	4302      	orrs	r2, r0
 801cbe0:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801cbe4:	0498      	lsls	r0, r3, #18
 801cbe6:	d510      	bpl.n	801cc0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cbe8:	4a4c      	ldr	r2, [pc, #304]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cbea:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801cbec:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 801cbf0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 801cbf4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cbf6:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cbfa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cbfe:	f040 80e4 	bne.w	801cdca <HAL_RCCEx_PeriphCLKConfig+0x41a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cc02:	68d3      	ldr	r3, [r2, #12]
 801cc04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801cc08:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801cc0a:	6823      	ldr	r3, [r4, #0]
 801cc0c:	0319      	lsls	r1, r3, #12
 801cc0e:	d50f      	bpl.n	801cc30 <HAL_RCCEx_PeriphCLKConfig+0x280>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801cc10:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 801cc12:	4b42      	ldr	r3, [pc, #264]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cc14:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 801cc18:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 801cc1c:	f040 80e1 	bne.w	801cde2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 801cc20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801cc24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801cc28:	68da      	ldr	r2, [r3, #12]
 801cc2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cc2e:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801cc30:	6823      	ldr	r3, [r4, #0]
 801cc32:	035a      	lsls	r2, r3, #13
 801cc34:	d510      	bpl.n	801cc58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cc36:	4a39      	ldr	r2, [pc, #228]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cc38:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 801cc3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 801cc3e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 801cc42:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801cc44:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cc48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801cc4c:	f040 80db 	bne.w	801ce06 <HAL_RCCEx_PeriphCLKConfig+0x456>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cc50:	68d3      	ldr	r3, [r2, #12]
 801cc52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801cc56:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cc58:	6823      	ldr	r3, [r4, #0]
 801cc5a:	045b      	lsls	r3, r3, #17
 801cc5c:	d513      	bpl.n	801cc86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cc5e:	492f      	ldr	r1, [pc, #188]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cc60:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 801cc64:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 801cc68:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 801cc6c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801cc6e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cc72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801cc76:	d106      	bne.n	801cc86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801cc78:	2102      	movs	r1, #2
 801cc7a:	1d20      	adds	r0, r4, #4
 801cc7c:	f7ff fda6 	bl	801c7cc <RCCEx_PLLSAI1_Config>
        status = ret;
 801cc80:	1e05      	subs	r5, r0, #0
 801cc82:	bf18      	it	ne
 801cc84:	462e      	movne	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801cc86:	6822      	ldr	r2, [r4, #0]
 801cc88:	03d7      	lsls	r7, r2, #15
 801cc8a:	d509      	bpl.n	801cca0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801cc8c:	4923      	ldr	r1, [pc, #140]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cc8e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 801cc92:	f8d1 309c 	ldr.w	r3, [r1, #156]	@ 0x9c
 801cc96:	f023 0304 	bic.w	r3, r3, #4
 801cc9a:	4303      	orrs	r3, r0
 801cc9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 801cca0:	0290      	lsls	r0, r2, #10
 801cca2:	d509      	bpl.n	801ccb8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801cca4:	491d      	ldr	r1, [pc, #116]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cca6:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 801ccaa:	f8d1 309c 	ldr.w	r3, [r1, #156]	@ 0x9c
 801ccae:	f023 0318 	bic.w	r3, r3, #24
 801ccb2:	4303      	orrs	r3, r0
 801ccb4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801ccb8:	0251      	lsls	r1, r2, #9
 801ccba:	d51c      	bpl.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0x346>
    __HAL_RCC_PLLSAI2_DISABLE();
 801ccbc:	4f17      	ldr	r7, [pc, #92]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801ccbe:	683b      	ldr	r3, [r7, #0]
 801ccc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ccc4:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 801ccc6:	f7fb fd31 	bl	801872c <HAL_GetTick>
 801ccca:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	009a      	lsls	r2, r3, #2
 801ccd0:	f100 80a5 	bmi.w	801ce1e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    if(ret == HAL_OK)
 801ccd4:	b985      	cbnz	r5, 801ccf8 <HAL_RCCEx_PeriphCLKConfig+0x348>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 801ccd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ccda:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 801ccde:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 801cce2:	4313      	orrs	r3, r2
 801cce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801cce8:	2102      	movs	r1, #2
 801ccea:	f104 0020 	add.w	r0, r4, #32
 801ccee:	f7ff fded 	bl	801c8cc <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 801ccf2:	4605      	mov	r5, r0
 801ccf4:	b900      	cbnz	r0, 801ccf8 <HAL_RCCEx_PeriphCLKConfig+0x348>
        status = ret;
 801ccf6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801ccf8:	6823      	ldr	r3, [r4, #0]
 801ccfa:	01db      	lsls	r3, r3, #7
 801ccfc:	d516      	bpl.n	801cd2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801ccfe:	4a07      	ldr	r2, [pc, #28]	@ (801cd1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 801cd00:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 801cd04:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 801cd08:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 801cd0c:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 801cd0e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801cd12:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 801cd16:	d109      	bne.n	801cd2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 801cd18:	e004      	b.n	801cd24 <HAL_RCCEx_PeriphCLKConfig+0x374>
 801cd1a:	bf00      	nop
 801cd1c:	40021000 	.word	0x40021000
 801cd20:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cd24:	68d3      	ldr	r3, [r2, #12]
 801cd26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801cd2a:	60d3      	str	r3, [r2, #12]
}
 801cd2c:	4628      	mov	r0, r5
 801cd2e:	b002      	add	sp, #8
 801cd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 801cd34:	4a44      	ldr	r2, [pc, #272]	@ (801ce48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 801cd36:	68d3      	ldr	r3, [r2, #12]
 801cd38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cd3c:	60d3      	str	r3, [r2, #12]
      break;
 801cd3e:	e681      	b.n	801ca44 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801cd40:	1d20      	adds	r0, r4, #4
 801cd42:	f7ff fd43 	bl	801c7cc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801cd46:	4605      	mov	r5, r0
      break;
 801cd48:	e67d      	b.n	801ca46 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 801cd4a:	2100      	movs	r1, #0
 801cd4c:	f104 0020 	add.w	r0, r4, #32
 801cd50:	f7ff fdbc 	bl	801c8cc <RCCEx_PLLSAI2_Config>
 801cd54:	e7f7      	b.n	801cd46 <HAL_RCCEx_PeriphCLKConfig+0x396>
      status = ret;
 801cd56:	462e      	mov	r6, r5
 801cd58:	e681      	b.n	801ca5e <HAL_RCCEx_PeriphCLKConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 801cd5a:	f04f 0800 	mov.w	r8, #0
 801cd5e:	e691      	b.n	801ca84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cd60:	f7fb fce4 	bl	801872c <HAL_GetTick>
 801cd64:	eba0 000a 	sub.w	r0, r0, sl
 801cd68:	2802      	cmp	r0, #2
 801cd6a:	f67f ae96 	bls.w	801ca9a <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = HAL_TIMEOUT;
 801cd6e:	2603      	movs	r6, #3
 801cd70:	4635      	mov	r5, r6
 801cd72:	e6ab      	b.n	801cacc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cd74:	4293      	cmp	r3, r2
 801cd76:	f43f aea0 	beq.w	801caba <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cd7a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 801cd7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cd82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cd86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cd8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cd8e:	f422 7140 	bic.w	r1, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cd92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cd96:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cd98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 801cd9c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cda0:	f57f ae8b 	bpl.w	801caba <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 801cda4:	f7fb fcc2 	bl	801872c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cda8:	f241 3a88 	movw	sl, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 801cdac:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cdae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801cdb2:	079b      	lsls	r3, r3, #30
 801cdb4:	f53f ae81 	bmi.w	801caba <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cdb8:	f7fb fcb8 	bl	801872c <HAL_GetTick>
 801cdbc:	eba0 0009 	sub.w	r0, r0, r9
 801cdc0:	4550      	cmp	r0, sl
 801cdc2:	d9f4      	bls.n	801cdae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 801cdc4:	e7d3      	b.n	801cd6e <HAL_RCCEx_PeriphCLKConfig+0x3be>
      status = ret;
 801cdc6:	462e      	mov	r6, r5
 801cdc8:	e680      	b.n	801cacc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801cdca:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 801cdce:	f47f af1c 	bne.w	801cc0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801cdd2:	2101      	movs	r1, #1
 801cdd4:	1d20      	adds	r0, r4, #4
 801cdd6:	f7ff fcf9 	bl	801c7cc <RCCEx_PLLSAI1_Config>
          status = ret;
 801cdda:	1e05      	subs	r5, r0, #0
 801cddc:	bf18      	it	ne
 801cdde:	462e      	movne	r6, r5
 801cde0:	e713      	b.n	801cc0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801cde2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801cde6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 801cdea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801cdee:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 801cdf2:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801cdf4:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801cdf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801cdfc:	d118      	bne.n	801ce30 <HAL_RCCEx_PeriphCLKConfig+0x480>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cdfe:	68da      	ldr	r2, [r3, #12]
 801ce00:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 801ce04:	e713      	b.n	801cc2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801ce06:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 801ce0a:	f47f af25 	bne.w	801cc58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801ce0e:	2101      	movs	r1, #1
 801ce10:	1d20      	adds	r0, r4, #4
 801ce12:	f7ff fcdb 	bl	801c7cc <RCCEx_PLLSAI1_Config>
        status = ret;
 801ce16:	1e05      	subs	r5, r0, #0
 801ce18:	bf18      	it	ne
 801ce1a:	462e      	movne	r6, r5
 801ce1c:	e71c      	b.n	801cc58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801ce1e:	f7fb fc85 	bl	801872c <HAL_GetTick>
 801ce22:	eba0 0008 	sub.w	r0, r0, r8
 801ce26:	2802      	cmp	r0, #2
 801ce28:	f67f af50 	bls.w	801cccc <HAL_RCCEx_PeriphCLKConfig+0x31c>
        ret = HAL_TIMEOUT;
 801ce2c:	2503      	movs	r5, #3
 801ce2e:	e763      	b.n	801ccf8 <HAL_RCCEx_PeriphCLKConfig+0x348>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801ce30:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 801ce34:	f47f aefc 	bne.w	801cc30 <HAL_RCCEx_PeriphCLKConfig+0x280>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801ce38:	2101      	movs	r1, #1
 801ce3a:	1d20      	adds	r0, r4, #4
 801ce3c:	f7ff fcc6 	bl	801c7cc <RCCEx_PLLSAI1_Config>
        status = ret;
 801ce40:	1e05      	subs	r5, r0, #0
 801ce42:	bf18      	it	ne
 801ce44:	462e      	movne	r6, r5
 801ce46:	e6f3      	b.n	801cc30 <HAL_RCCEx_PeriphCLKConfig+0x280>
 801ce48:	40021000 	.word	0x40021000

0801ce4c <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 801ce4c:	4a02      	ldr	r2, [pc, #8]	@ (801ce58 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 801ce4e:	6813      	ldr	r3, [r2, #0]
 801ce50:	f043 0304 	orr.w	r3, r3, #4
 801ce54:	6013      	str	r3, [r2, #0]
}
 801ce56:	4770      	bx	lr
 801ce58:	40021000 	.word	0x40021000

0801ce5c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801ce5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801ce5e:	4604      	mov	r4, r0
 801ce60:	b1c0      	cbz	r0, 801ce94 <HAL_RNG_Init+0x38>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801ce62:	7a43      	ldrb	r3, [r0, #9]
 801ce64:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801ce68:	b913      	cbnz	r3, 801ce70 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801ce6a:	7202      	strb	r2, [r0, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801ce6c:	f7fa fde2 	bl	8017a34 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801ce70:	2302      	movs	r3, #2
 801ce72:	7263      	strb	r3, [r4, #9]
    }
  }
#else
#if defined(RNG_CR_CED)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801ce74:	6823      	ldr	r3, [r4, #0]
 801ce76:	6861      	ldr	r1, [r4, #4]
 801ce78:	681a      	ldr	r2, [r3, #0]
 801ce7a:	f022 0220 	bic.w	r2, r2, #32
 801ce7e:	430a      	orrs	r2, r1
 801ce80:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801ce82:	681a      	ldr	r2, [r3, #0]
 801ce84:	f042 0204 	orr.w	r2, r2, #4
 801ce88:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801ce8a:	685b      	ldr	r3, [r3, #4]
 801ce8c:	0659      	lsls	r1, r3, #25
 801ce8e:	d503      	bpl.n	801ce98 <HAL_RNG_Init+0x3c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801ce90:	2304      	movs	r3, #4
 801ce92:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 801ce94:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 801ce96:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 801ce98:	f7fb fc48 	bl	801872c <HAL_GetTick>
 801ce9c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 801ce9e:	6823      	ldr	r3, [r4, #0]
 801cea0:	685b      	ldr	r3, [r3, #4]
 801cea2:	07db      	lsls	r3, r3, #31
 801cea4:	d504      	bpl.n	801ceb0 <HAL_RNG_Init+0x54>
  hrng->State = HAL_RNG_STATE_READY;
 801cea6:	2301      	movs	r3, #1
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801cea8:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 801ceaa:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801ceac:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 801ceae:	e7f2      	b.n	801ce96 <HAL_RNG_Init+0x3a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801ceb0:	f7fb fc3c 	bl	801872c <HAL_GetTick>
 801ceb4:	1b40      	subs	r0, r0, r5
 801ceb6:	2802      	cmp	r0, #2
 801ceb8:	d9f1      	bls.n	801ce9e <HAL_RNG_Init+0x42>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 801ceba:	6823      	ldr	r3, [r4, #0]
 801cebc:	685b      	ldr	r3, [r3, #4]
 801cebe:	07da      	lsls	r2, r3, #31
 801cec0:	d4ed      	bmi.n	801ce9e <HAL_RNG_Init+0x42>
        hrng->State = HAL_RNG_STATE_ERROR;
 801cec2:	2304      	movs	r3, #4
 801cec4:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801cec6:	2302      	movs	r3, #2
 801cec8:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 801ceca:	e7e3      	b.n	801ce94 <HAL_RNG_Init+0x38>

0801cecc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cecc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801cece:	6a02      	ldr	r2, [r0, #32]
 801ced0:	f022 0201 	bic.w	r2, r2, #1
{
 801ced4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ced6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ced8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ceda:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cedc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801cede:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801cee2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 801cee6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801cee8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 801ceea:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 801ceee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801cef0:	4d12      	ldr	r5, [pc, #72]	@ (801cf3c <TIM_OC1_SetConfig+0x70>)
 801cef2:	42a8      	cmp	r0, r5
 801cef4:	d00f      	beq.n	801cf16 <TIM_OC1_SetConfig+0x4a>
 801cef6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 801cefa:	42a8      	cmp	r0, r5
 801cefc:	d00b      	beq.n	801cf16 <TIM_OC1_SetConfig+0x4a>
 801cefe:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 801cf02:	42a8      	cmp	r0, r5
 801cf04:	d007      	beq.n	801cf16 <TIM_OC1_SetConfig+0x4a>
 801cf06:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801cf0a:	42a8      	cmp	r0, r5
 801cf0c:	d003      	beq.n	801cf16 <TIM_OC1_SetConfig+0x4a>
 801cf0e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801cf12:	42a8      	cmp	r0, r5
 801cf14:	d10b      	bne.n	801cf2e <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801cf16:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 801cf18:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 801cf1c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801cf1e:	f424 7540 	bic.w	r5, r4, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801cf22:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 801cf26:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 801cf28:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 801cf2c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cf2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801cf30:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801cf32:	684a      	ldr	r2, [r1, #4]
 801cf34:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cf36:	6203      	str	r3, [r0, #32]
}
 801cf38:	bd70      	pop	{r4, r5, r6, pc}
 801cf3a:	bf00      	nop
 801cf3c:	40012c00 	.word	0x40012c00

0801cf40 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cf40:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801cf42:	6a02      	ldr	r2, [r0, #32]
 801cf44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 801cf48:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801cf4a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cf4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801cf4e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801cf50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801cf52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801cf56:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 801cf5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801cf5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 801cf5e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801cf62:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801cf66:	4d14      	ldr	r5, [pc, #80]	@ (801cfb8 <TIM_OC3_SetConfig+0x78>)
 801cf68:	42a8      	cmp	r0, r5
 801cf6a:	d00f      	beq.n	801cf8c <TIM_OC3_SetConfig+0x4c>
 801cf6c:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 801cf70:	42a8      	cmp	r0, r5
 801cf72:	d00b      	beq.n	801cf8c <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801cf74:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 801cf78:	42a8      	cmp	r0, r5
 801cf7a:	d10f      	bne.n	801cf9c <TIM_OC3_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801cf7c:	f424 5540 	bic.w	r5, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801cf80:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 801cf84:	4334      	orrs	r4, r6
 801cf86:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 801cf8a:	e00e      	b.n	801cfaa <TIM_OC3_SetConfig+0x6a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801cf8c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 801cf8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801cf92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 801cf96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801cf9a:	e7ef      	b.n	801cf7c <TIM_OC3_SetConfig+0x3c>
 801cf9c:	4d07      	ldr	r5, [pc, #28]	@ (801cfbc <TIM_OC3_SetConfig+0x7c>)
 801cf9e:	42a8      	cmp	r0, r5
 801cfa0:	d0ec      	beq.n	801cf7c <TIM_OC3_SetConfig+0x3c>
 801cfa2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801cfa6:	42a8      	cmp	r0, r5
 801cfa8:	d0e8      	beq.n	801cf7c <TIM_OC3_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801cfaa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801cfac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801cfae:	684a      	ldr	r2, [r1, #4]
 801cfb0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801cfb2:	6203      	str	r3, [r0, #32]
}
 801cfb4:	bd70      	pop	{r4, r5, r6, pc}
 801cfb6:	bf00      	nop
 801cfb8:	40012c00 	.word	0x40012c00
 801cfbc:	40014400 	.word	0x40014400

0801cfc0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801cfc0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801cfc2:	6a02      	ldr	r2, [r0, #32]
 801cfc4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 801cfc8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801cfca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801cfcc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801cfce:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801cfd0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801cfd2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 801cfd6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801cfda:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801cfde:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 801cfe0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801cfe4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801cfe8:	4d0e      	ldr	r5, [pc, #56]	@ (801d024 <TIM_OC4_SetConfig+0x64>)
 801cfea:	42a8      	cmp	r0, r5
 801cfec:	d00f      	beq.n	801d00e <TIM_OC4_SetConfig+0x4e>
 801cfee:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 801cff2:	42a8      	cmp	r0, r5
 801cff4:	d00b      	beq.n	801d00e <TIM_OC4_SetConfig+0x4e>
 801cff6:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 801cffa:	42a8      	cmp	r0, r5
 801cffc:	d007      	beq.n	801d00e <TIM_OC4_SetConfig+0x4e>
 801cffe:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801d002:	42a8      	cmp	r0, r5
 801d004:	d003      	beq.n	801d00e <TIM_OC4_SetConfig+0x4e>
 801d006:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801d00a:	42a8      	cmp	r0, r5
 801d00c:	d104      	bne.n	801d018 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d00e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 801d010:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801d014:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d018:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d01a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d01c:	684a      	ldr	r2, [r1, #4]
 801d01e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d020:	6203      	str	r3, [r0, #32]
}
 801d022:	bd30      	pop	{r4, r5, pc}
 801d024:	40012c00 	.word	0x40012c00

0801d028 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d028:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801d02a:	6a02      	ldr	r2, [r0, #32]
 801d02c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
{
 801d030:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801d032:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d034:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801d036:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d038:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801d03a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801d03e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 801d042:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801d044:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 801d046:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801d04a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d04e:	4d0f      	ldr	r5, [pc, #60]	@ (801d08c <TIM_OC5_SetConfig+0x64>)
 801d050:	42a8      	cmp	r0, r5
 801d052:	d00f      	beq.n	801d074 <TIM_OC5_SetConfig+0x4c>
 801d054:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 801d058:	42a8      	cmp	r0, r5
 801d05a:	d00b      	beq.n	801d074 <TIM_OC5_SetConfig+0x4c>
 801d05c:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 801d060:	42a8      	cmp	r0, r5
 801d062:	d007      	beq.n	801d074 <TIM_OC5_SetConfig+0x4c>
 801d064:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801d068:	42a8      	cmp	r0, r5
 801d06a:	d003      	beq.n	801d074 <TIM_OC5_SetConfig+0x4c>
 801d06c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801d070:	42a8      	cmp	r0, r5
 801d072:	d104      	bne.n	801d07e <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801d074:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 801d076:	f424 3480 	bic.w	r4, r4, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801d07a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d07e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801d080:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801d082:	684a      	ldr	r2, [r1, #4]
 801d084:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d086:	6203      	str	r3, [r0, #32]
}
 801d088:	bd30      	pop	{r4, r5, pc}
 801d08a:	bf00      	nop
 801d08c:	40012c00 	.word	0x40012c00

0801d090 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d090:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801d092:	6a02      	ldr	r2, [r0, #32]
 801d094:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
{
 801d098:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801d09a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d09c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801d09e:	6d42      	ldr	r2, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d0a0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801d0a2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 801d0a6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d0aa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801d0ae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801d0b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801d0b4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d0b8:	4d0e      	ldr	r5, [pc, #56]	@ (801d0f4 <TIM_OC6_SetConfig+0x64>)
 801d0ba:	42a8      	cmp	r0, r5
 801d0bc:	d00f      	beq.n	801d0de <TIM_OC6_SetConfig+0x4e>
 801d0be:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 801d0c2:	42a8      	cmp	r0, r5
 801d0c4:	d00b      	beq.n	801d0de <TIM_OC6_SetConfig+0x4e>
 801d0c6:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 801d0ca:	42a8      	cmp	r0, r5
 801d0cc:	d007      	beq.n	801d0de <TIM_OC6_SetConfig+0x4e>
 801d0ce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801d0d2:	42a8      	cmp	r0, r5
 801d0d4:	d003      	beq.n	801d0de <TIM_OC6_SetConfig+0x4e>
 801d0d6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801d0da:	42a8      	cmp	r0, r5
 801d0dc:	d104      	bne.n	801d0e8 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801d0de:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 801d0e0:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801d0e4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d0e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801d0ea:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801d0ec:	684a      	ldr	r2, [r1, #4]
 801d0ee:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d0f0:	6203      	str	r3, [r0, #32]
}
 801d0f2:	bd30      	pop	{r4, r5, pc}
 801d0f4:	40012c00 	.word	0x40012c00

0801d0f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 801d0f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801d0fc:	2b01      	cmp	r3, #1
 801d0fe:	d12f      	bne.n	801d160 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 801d100:	2302      	movs	r3, #2
 801d102:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801d106:	6803      	ldr	r3, [r0, #0]
 801d108:	68da      	ldr	r2, [r3, #12]
 801d10a:	f042 0201 	orr.w	r2, r2, #1
 801d10e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d110:	4a14      	ldr	r2, [pc, #80]	@ (801d164 <HAL_TIM_Base_Start_IT+0x6c>)
 801d112:	4293      	cmp	r3, r2
 801d114:	d016      	beq.n	801d144 <HAL_TIM_Base_Start_IT+0x4c>
 801d116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d11a:	d013      	beq.n	801d144 <HAL_TIM_Base_Start_IT+0x4c>
 801d11c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 801d120:	4293      	cmp	r3, r2
 801d122:	d00f      	beq.n	801d144 <HAL_TIM_Base_Start_IT+0x4c>
 801d124:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d128:	4293      	cmp	r3, r2
 801d12a:	d00b      	beq.n	801d144 <HAL_TIM_Base_Start_IT+0x4c>
 801d12c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d130:	4293      	cmp	r3, r2
 801d132:	d007      	beq.n	801d144 <HAL_TIM_Base_Start_IT+0x4c>
 801d134:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 801d138:	4293      	cmp	r3, r2
 801d13a:	d003      	beq.n	801d144 <HAL_TIM_Base_Start_IT+0x4c>
 801d13c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 801d140:	4293      	cmp	r3, r2
 801d142:	d107      	bne.n	801d154 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d144:	6899      	ldr	r1, [r3, #8]
 801d146:	4a08      	ldr	r2, [pc, #32]	@ (801d168 <HAL_TIM_Base_Start_IT+0x70>)
 801d148:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d14a:	2a06      	cmp	r2, #6
 801d14c:	d006      	beq.n	801d15c <HAL_TIM_Base_Start_IT+0x64>
 801d14e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801d152:	d003      	beq.n	801d15c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 801d154:	681a      	ldr	r2, [r3, #0]
 801d156:	f042 0201 	orr.w	r2, r2, #1
 801d15a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 801d15c:	2000      	movs	r0, #0
 801d15e:	4770      	bx	lr
    return HAL_ERROR;
 801d160:	2001      	movs	r0, #1
}
 801d162:	4770      	bx	lr
 801d164:	40012c00 	.word	0x40012c00
 801d168:	00010007 	.word	0x00010007

0801d16c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 801d16c:	4770      	bx	lr

0801d16e <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 801d16e:	4770      	bx	lr

0801d170 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 801d170:	4770      	bx	lr

0801d172 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 801d172:	4770      	bx	lr

0801d174 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 801d174:	4770      	bx	lr

0801d176 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 801d176:	6803      	ldr	r3, [r0, #0]
{
 801d178:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 801d17a:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 801d17c:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801d17e:	07b2      	lsls	r2, r6, #30
{
 801d180:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801d182:	d50d      	bpl.n	801d1a0 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801d184:	07a9      	lsls	r1, r5, #30
 801d186:	d50b      	bpl.n	801d1a0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801d188:	f06f 0202 	mvn.w	r2, #2
 801d18c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d18e:	2201      	movs	r2, #1
 801d190:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d192:	699b      	ldr	r3, [r3, #24]
 801d194:	079a      	lsls	r2, r3, #30
 801d196:	d075      	beq.n	801d284 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 801d198:	f7ff ffea 	bl	801d170 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d19c:	2300      	movs	r3, #0
 801d19e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801d1a0:	0773      	lsls	r3, r6, #29
 801d1a2:	d510      	bpl.n	801d1c6 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801d1a4:	0768      	lsls	r0, r5, #29
 801d1a6:	d50e      	bpl.n	801d1c6 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801d1a8:	6823      	ldr	r3, [r4, #0]
 801d1aa:	f06f 0204 	mvn.w	r2, #4
 801d1ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d1b0:	2202      	movs	r2, #2
 801d1b2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d1b4:	699b      	ldr	r3, [r3, #24]
 801d1b6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 801d1ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d1bc:	d068      	beq.n	801d290 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 801d1be:	f7ff ffd7 	bl	801d170 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d1c2:	2300      	movs	r3, #0
 801d1c4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801d1c6:	0731      	lsls	r1, r6, #28
 801d1c8:	d50f      	bpl.n	801d1ea <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801d1ca:	072a      	lsls	r2, r5, #28
 801d1cc:	d50d      	bpl.n	801d1ea <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801d1ce:	6823      	ldr	r3, [r4, #0]
 801d1d0:	f06f 0208 	mvn.w	r2, #8
 801d1d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d1d6:	2204      	movs	r2, #4
 801d1d8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d1da:	69db      	ldr	r3, [r3, #28]
 801d1dc:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 801d1de:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d1e0:	d05c      	beq.n	801d29c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 801d1e2:	f7ff ffc5 	bl	801d170 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d1e6:	2300      	movs	r3, #0
 801d1e8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801d1ea:	06f1      	lsls	r1, r6, #27
 801d1ec:	d510      	bpl.n	801d210 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801d1ee:	06ea      	lsls	r2, r5, #27
 801d1f0:	d50e      	bpl.n	801d210 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801d1f2:	6823      	ldr	r3, [r4, #0]
 801d1f4:	f06f 0210 	mvn.w	r2, #16
 801d1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d1fa:	2208      	movs	r2, #8
 801d1fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d1fe:	69db      	ldr	r3, [r3, #28]
 801d200:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 801d204:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d206:	d04f      	beq.n	801d2a8 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 801d208:	f7ff ffb2 	bl	801d170 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d20c:	2300      	movs	r3, #0
 801d20e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801d210:	07f3      	lsls	r3, r6, #31
 801d212:	d508      	bpl.n	801d226 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801d214:	07e8      	lsls	r0, r5, #31
 801d216:	d506      	bpl.n	801d226 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801d218:	6823      	ldr	r3, [r4, #0]
 801d21a:	f06f 0201 	mvn.w	r2, #1
 801d21e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801d220:	4620      	mov	r0, r4
 801d222:	f7fa f9bb 	bl	801759c <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801d226:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 801d22a:	d008      	beq.n	801d23e <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801d22c:	0629      	lsls	r1, r5, #24
 801d22e:	d506      	bpl.n	801d23e <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801d230:	6823      	ldr	r3, [r4, #0]
 801d232:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801d236:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801d238:	4620      	mov	r0, r4
 801d23a:	f000 fb36 	bl	801d8aa <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801d23e:	05f2      	lsls	r2, r6, #23
 801d240:	d508      	bpl.n	801d254 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801d242:	062b      	lsls	r3, r5, #24
 801d244:	d506      	bpl.n	801d254 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d246:	6823      	ldr	r3, [r4, #0]
 801d248:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801d24c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801d24e:	4620      	mov	r0, r4
 801d250:	f000 fb2c 	bl	801d8ac <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801d254:	0670      	lsls	r0, r6, #25
 801d256:	d508      	bpl.n	801d26a <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801d258:	0669      	lsls	r1, r5, #25
 801d25a:	d506      	bpl.n	801d26a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801d25c:	6823      	ldr	r3, [r4, #0]
 801d25e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801d262:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801d264:	4620      	mov	r0, r4
 801d266:	f7ff ff85 	bl	801d174 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801d26a:	06b2      	lsls	r2, r6, #26
 801d26c:	d522      	bpl.n	801d2b4 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801d26e:	06ab      	lsls	r3, r5, #26
 801d270:	d520      	bpl.n	801d2b4 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801d272:	6823      	ldr	r3, [r4, #0]
 801d274:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801d278:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801d27a:	611a      	str	r2, [r3, #16]
}
 801d27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 801d280:	f000 bb12 	b.w	801d8a8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d284:	f7ff ff73 	bl	801d16e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d288:	4620      	mov	r0, r4
 801d28a:	f7ff ff72 	bl	801d172 <HAL_TIM_PWM_PulseFinishedCallback>
 801d28e:	e785      	b.n	801d19c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d290:	f7ff ff6d 	bl	801d16e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d294:	4620      	mov	r0, r4
 801d296:	f7ff ff6c 	bl	801d172 <HAL_TIM_PWM_PulseFinishedCallback>
 801d29a:	e792      	b.n	801d1c2 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d29c:	f7ff ff67 	bl	801d16e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	f7ff ff66 	bl	801d172 <HAL_TIM_PWM_PulseFinishedCallback>
 801d2a6:	e79e      	b.n	801d1e6 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d2a8:	f7ff ff61 	bl	801d16e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d2ac:	4620      	mov	r0, r4
 801d2ae:	f7ff ff60 	bl	801d172 <HAL_TIM_PWM_PulseFinishedCallback>
 801d2b2:	e7ab      	b.n	801d20c <HAL_TIM_IRQHandler+0x96>
}
 801d2b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d2b8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d2b8:	4a29      	ldr	r2, [pc, #164]	@ (801d360 <TIM_Base_SetConfig+0xa8>)
  tmpcr1 = TIMx->CR1;
 801d2ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d2bc:	4290      	cmp	r0, r2
 801d2be:	d012      	beq.n	801d2e6 <TIM_Base_SetConfig+0x2e>
 801d2c0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801d2c4:	d00f      	beq.n	801d2e6 <TIM_Base_SetConfig+0x2e>
 801d2c6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 801d2ca:	4290      	cmp	r0, r2
 801d2cc:	d00b      	beq.n	801d2e6 <TIM_Base_SetConfig+0x2e>
 801d2ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d2d2:	4290      	cmp	r0, r2
 801d2d4:	d007      	beq.n	801d2e6 <TIM_Base_SetConfig+0x2e>
 801d2d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d2da:	4290      	cmp	r0, r2
 801d2dc:	d003      	beq.n	801d2e6 <TIM_Base_SetConfig+0x2e>
 801d2de:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 801d2e2:	4290      	cmp	r0, r2
 801d2e4:	d108      	bne.n	801d2f8 <TIM_Base_SetConfig+0x40>
    tmpcr1 |= Structure->CounterMode;
 801d2e6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d2e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 801d2ec:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d2ee:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 801d2f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d2f4:	4313      	orrs	r3, r2
 801d2f6:	e00a      	b.n	801d30e <TIM_Base_SetConfig+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d2f8:	4a1a      	ldr	r2, [pc, #104]	@ (801d364 <TIM_Base_SetConfig+0xac>)
 801d2fa:	4290      	cmp	r0, r2
 801d2fc:	d0f7      	beq.n	801d2ee <TIM_Base_SetConfig+0x36>
 801d2fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d302:	4290      	cmp	r0, r2
 801d304:	d0f3      	beq.n	801d2ee <TIM_Base_SetConfig+0x36>
 801d306:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d30a:	4290      	cmp	r0, r2
 801d30c:	d0ef      	beq.n	801d2ee <TIM_Base_SetConfig+0x36>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d30e:	694a      	ldr	r2, [r1, #20]
 801d310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d314:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801d316:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d318:	688b      	ldr	r3, [r1, #8]
 801d31a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 801d31c:	680b      	ldr	r3, [r1, #0]
 801d31e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d320:	4b0f      	ldr	r3, [pc, #60]	@ (801d360 <TIM_Base_SetConfig+0xa8>)
 801d322:	4298      	cmp	r0, r3
 801d324:	d00f      	beq.n	801d346 <TIM_Base_SetConfig+0x8e>
 801d326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801d32a:	4298      	cmp	r0, r3
 801d32c:	d00b      	beq.n	801d346 <TIM_Base_SetConfig+0x8e>
 801d32e:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 801d332:	4298      	cmp	r0, r3
 801d334:	d007      	beq.n	801d346 <TIM_Base_SetConfig+0x8e>
 801d336:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d33a:	4298      	cmp	r0, r3
 801d33c:	d003      	beq.n	801d346 <TIM_Base_SetConfig+0x8e>
 801d33e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d342:	4298      	cmp	r0, r3
 801d344:	d101      	bne.n	801d34a <TIM_Base_SetConfig+0x92>
    TIMx->RCR = Structure->RepetitionCounter;
 801d346:	690b      	ldr	r3, [r1, #16]
 801d348:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 801d34a:	2301      	movs	r3, #1
 801d34c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801d34e:	6903      	ldr	r3, [r0, #16]
 801d350:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801d352:	bf42      	ittt	mi
 801d354:	6903      	ldrmi	r3, [r0, #16]
 801d356:	f023 0301 	bicmi.w	r3, r3, #1
 801d35a:	6103      	strmi	r3, [r0, #16]
}
 801d35c:	4770      	bx	lr
 801d35e:	bf00      	nop
 801d360:	40012c00 	.word	0x40012c00
 801d364:	40014000 	.word	0x40014000

0801d368 <HAL_TIM_Base_Init>:
{
 801d368:	b510      	push	{r4, lr}
  if (htim == NULL)
 801d36a:	4604      	mov	r4, r0
 801d36c:	b350      	cbz	r0, 801d3c4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 801d36e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801d372:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801d376:	b91b      	cbnz	r3, 801d380 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 801d378:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 801d37c:	f7fa fb70 	bl	8017a60 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 801d380:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d382:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801d384:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d388:	1d21      	adds	r1, r4, #4
 801d38a:	f7ff ff95 	bl	801d2b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d38e:	2301      	movs	r3, #1
 801d390:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 801d394:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d396:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 801d39a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 801d39e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801d3a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801d3a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d3aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d3ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801d3b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801d3b6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 801d3ba:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 801d3be:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 801d3c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801d3c4:	2001      	movs	r0, #1
 801d3c6:	e7fc      	b.n	801d3c2 <HAL_TIM_Base_Init+0x5a>

0801d3c8 <HAL_TIM_PWM_Init>:
{
 801d3c8:	b510      	push	{r4, lr}
  if (htim == NULL)
 801d3ca:	4604      	mov	r4, r0
 801d3cc:	b350      	cbz	r0, 801d424 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 801d3ce:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801d3d2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 801d3d6:	b91b      	cbnz	r3, 801d3e0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 801d3d8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 801d3dc:	f7ff fec6 	bl	801d16c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 801d3e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d3e2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 801d3e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801d3e8:	1d21      	adds	r1, r4, #4
 801d3ea:	f7ff ff65 	bl	801d2b8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801d3ee:	2301      	movs	r3, #1
 801d3f0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  return HAL_OK;
 801d3f4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d3f6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 801d3fa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 801d3fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 801d402:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 801d406:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d40a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801d40e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 801d412:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 801d416:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 801d41a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 801d41e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 801d422:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 801d424:	2001      	movs	r0, #1
 801d426:	e7fc      	b.n	801d422 <HAL_TIM_PWM_Init+0x5a>

0801d428 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 801d428:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d42a:	6a02      	ldr	r2, [r0, #32]
 801d42c:	f022 0210 	bic.w	r2, r2, #16
{
 801d430:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d432:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 801d434:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 801d436:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d438:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d43a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 801d43e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d442:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d446:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 801d448:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d44c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d450:	4d13      	ldr	r5, [pc, #76]	@ (801d4a0 <TIM_OC2_SetConfig+0x78>)
 801d452:	42a8      	cmp	r0, r5
 801d454:	d00f      	beq.n	801d476 <TIM_OC2_SetConfig+0x4e>
 801d456:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 801d45a:	42a8      	cmp	r0, r5
 801d45c:	d00b      	beq.n	801d476 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d45e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 801d462:	42a8      	cmp	r0, r5
 801d464:	d10f      	bne.n	801d486 <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d466:	f424 6540 	bic.w	r5, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d46a:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 801d46e:	4334      	orrs	r4, r6
 801d470:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
 801d474:	e00e      	b.n	801d494 <TIM_OC2_SetConfig+0x6c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d476:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 801d478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d47c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 801d480:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d484:	e7ef      	b.n	801d466 <TIM_OC2_SetConfig+0x3e>
 801d486:	4d07      	ldr	r5, [pc, #28]	@ (801d4a4 <TIM_OC2_SetConfig+0x7c>)
 801d488:	42a8      	cmp	r0, r5
 801d48a:	d0ec      	beq.n	801d466 <TIM_OC2_SetConfig+0x3e>
 801d48c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 801d490:	42a8      	cmp	r0, r5
 801d492:	d0e8      	beq.n	801d466 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 801d494:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 801d496:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 801d498:	684a      	ldr	r2, [r1, #4]
 801d49a:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 801d49c:	6203      	str	r3, [r0, #32]
}
 801d49e:	bd70      	pop	{r4, r5, r6, pc}
 801d4a0:	40012c00 	.word	0x40012c00
 801d4a4:	40014400 	.word	0x40014400

0801d4a8 <HAL_TIM_PWM_ConfigChannel>:
{
 801d4a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 801d4aa:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 801d4ae:	2b01      	cmp	r3, #1
{
 801d4b0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 801d4b2:	d073      	beq.n	801d59c <HAL_TIM_PWM_ConfigChannel+0xf4>
 801d4b4:	2001      	movs	r0, #1
  switch (Channel)
 801d4b6:	2a0c      	cmp	r2, #12
  __HAL_LOCK(htim);
 801d4b8:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
  switch (Channel)
 801d4bc:	d04e      	beq.n	801d55c <HAL_TIM_PWM_ConfigChannel+0xb4>
 801d4be:	d808      	bhi.n	801d4d2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 801d4c0:	2a04      	cmp	r2, #4
 801d4c2:	d02b      	beq.n	801d51c <HAL_TIM_PWM_ConfigChannel+0x74>
 801d4c4:	2a08      	cmp	r2, #8
 801d4c6:	d039      	beq.n	801d53c <HAL_TIM_PWM_ConfigChannel+0x94>
 801d4c8:	b1ba      	cbz	r2, 801d4fa <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_UNLOCK(htim);
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 801d4d0:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 801d4d2:	2a10      	cmp	r2, #16
 801d4d4:	d052      	beq.n	801d57c <HAL_TIM_PWM_ConfigChannel+0xd4>
 801d4d6:	2a14      	cmp	r2, #20
 801d4d8:	d1f7      	bne.n	801d4ca <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d4da:	6820      	ldr	r0, [r4, #0]
 801d4dc:	f7ff fdd8 	bl	801d090 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d4e0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d4e2:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d4e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801d4e8:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d4ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d4ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801d4f0:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d4f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d4f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d4f8:	e04e      	b.n	801d598 <HAL_TIM_PWM_ConfigChannel+0xf0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d4fa:	6820      	ldr	r0, [r4, #0]
 801d4fc:	f7ff fce6 	bl	801cecc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d500:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d502:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d504:	f043 0308 	orr.w	r3, r3, #8
 801d508:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d50a:	6983      	ldr	r3, [r0, #24]
 801d50c:	f023 0304 	bic.w	r3, r3, #4
 801d510:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d512:	6983      	ldr	r3, [r0, #24]
 801d514:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d516:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 801d518:	2000      	movs	r0, #0
 801d51a:	e7d6      	b.n	801d4ca <HAL_TIM_PWM_ConfigChannel+0x22>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d51c:	6820      	ldr	r0, [r4, #0]
 801d51e:	f7ff ff83 	bl	801d428 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d522:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d524:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d526:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801d52a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d52c:	6983      	ldr	r3, [r0, #24]
 801d52e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801d532:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d534:	6983      	ldr	r3, [r0, #24]
 801d536:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d53a:	e7ec      	b.n	801d516 <HAL_TIM_PWM_ConfigChannel+0x6e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d53c:	6820      	ldr	r0, [r4, #0]
 801d53e:	f7ff fcff 	bl	801cf40 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d542:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d544:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d546:	f043 0308 	orr.w	r3, r3, #8
 801d54a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d54c:	69c3      	ldr	r3, [r0, #28]
 801d54e:	f023 0304 	bic.w	r3, r3, #4
 801d552:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d554:	69c3      	ldr	r3, [r0, #28]
 801d556:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d558:	61c3      	str	r3, [r0, #28]
      break;
 801d55a:	e7dd      	b.n	801d518 <HAL_TIM_PWM_ConfigChannel+0x70>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d55c:	6820      	ldr	r0, [r4, #0]
 801d55e:	f7ff fd2f 	bl	801cfc0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d562:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d564:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d566:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801d56a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d56c:	69c3      	ldr	r3, [r0, #28]
 801d56e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801d572:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d574:	69c3      	ldr	r3, [r0, #28]
 801d576:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d57a:	e7ed      	b.n	801d558 <HAL_TIM_PWM_ConfigChannel+0xb0>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d57c:	6820      	ldr	r0, [r4, #0]
 801d57e:	f7ff fd53 	bl	801d028 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d582:	6d43      	ldr	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d584:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d586:	f043 0308 	orr.w	r3, r3, #8
 801d58a:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d58c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d58e:	f023 0304 	bic.w	r3, r3, #4
 801d592:	6543      	str	r3, [r0, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d594:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801d596:	4313      	orrs	r3, r2
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d598:	6543      	str	r3, [r0, #84]	@ 0x54
      break;
 801d59a:	e7bd      	b.n	801d518 <HAL_TIM_PWM_ConfigChannel+0x70>
  __HAL_LOCK(htim);
 801d59c:	2002      	movs	r0, #2
 801d59e:	e797      	b.n	801d4d0 <HAL_TIM_PWM_ConfigChannel+0x28>

0801d5a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801d5a0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801d5a2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d5a4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d5a6:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801d5aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801d5ae:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801d5b0:	6082      	str	r2, [r0, #8]
}
 801d5b2:	bd10      	pop	{r4, pc}

0801d5b4 <HAL_TIM_ConfigClockSource>:
{
 801d5b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 801d5b6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 801d5ba:	2b01      	cmp	r3, #1
{
 801d5bc:	4604      	mov	r4, r0
 801d5be:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 801d5c2:	f000 808c 	beq.w	801d6de <HAL_TIM_ConfigClockSource+0x12a>
  htim->State = HAL_TIM_STATE_BUSY;
 801d5c6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 801d5ca:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 801d5cc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 801d5ce:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 801d5d2:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801d5d4:	4b43      	ldr	r3, [pc, #268]	@ (801d6e4 <HAL_TIM_ConfigClockSource+0x130>)
 801d5d6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 801d5d8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 801d5da:	680b      	ldr	r3, [r1, #0]
 801d5dc:	2b60      	cmp	r3, #96	@ 0x60
 801d5de:	d04f      	beq.n	801d680 <HAL_TIM_ConfigClockSource+0xcc>
 801d5e0:	d832      	bhi.n	801d648 <HAL_TIM_ConfigClockSource+0x94>
 801d5e2:	2b40      	cmp	r3, #64	@ 0x40
 801d5e4:	d064      	beq.n	801d6b0 <HAL_TIM_ConfigClockSource+0xfc>
 801d5e6:	d816      	bhi.n	801d616 <HAL_TIM_ConfigClockSource+0x62>
 801d5e8:	2b20      	cmp	r3, #32
 801d5ea:	d00d      	beq.n	801d608 <HAL_TIM_ConfigClockSource+0x54>
 801d5ec:	d80a      	bhi.n	801d604 <HAL_TIM_ConfigClockSource+0x50>
 801d5ee:	f033 0110 	bics.w	r1, r3, #16
 801d5f2:	d009      	beq.n	801d608 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 801d5f4:	2301      	movs	r3, #1
 801d5f6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 801d600:	4610      	mov	r0, r2
 801d602:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 801d604:	2b30      	cmp	r3, #48	@ 0x30
 801d606:	d1f5      	bne.n	801d5f4 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 801d608:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801d60a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d60e:	4313      	orrs	r3, r2
 801d610:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 801d614:	e028      	b.n	801d668 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 801d616:	2b50      	cmp	r3, #80	@ 0x50
 801d618:	d1ec      	bne.n	801d5f4 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 801d61a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 801d61c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 801d61e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d620:	6a03      	ldr	r3, [r0, #32]
 801d622:	f023 0301 	bic.w	r3, r3, #1
 801d626:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d628:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d62a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d62e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d632:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 801d636:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 801d638:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 801d63a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 801d63c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801d63e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d642:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 801d646:	e00f      	b.n	801d668 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 801d648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d64c:	d00d      	beq.n	801d66a <HAL_TIM_ConfigClockSource+0xb6>
 801d64e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d652:	d00c      	beq.n	801d66e <HAL_TIM_ConfigClockSource+0xba>
 801d654:	2b70      	cmp	r3, #112	@ 0x70
 801d656:	d1cd      	bne.n	801d5f4 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 801d658:	68cb      	ldr	r3, [r1, #12]
 801d65a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801d65e:	f7ff ff9f 	bl	801d5a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801d662:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801d664:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 801d668:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801d66a:	2200      	movs	r2, #0
 801d66c:	e7c2      	b.n	801d5f4 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 801d66e:	68cb      	ldr	r3, [r1, #12]
 801d670:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801d674:	f7ff ff94 	bl	801d5a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801d678:	6883      	ldr	r3, [r0, #8]
 801d67a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d67e:	e7f3      	b.n	801d668 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 801d680:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d682:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 801d684:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 801d686:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d688:	f022 0210 	bic.w	r2, r2, #16
 801d68c:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d68e:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801d690:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801d694:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 801d698:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801d69c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 801d6a0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 801d6a2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 801d6a4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801d6a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d6aa:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 801d6ae:	e7db      	b.n	801d668 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 801d6b0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 801d6b2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 801d6b4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d6b6:	6a03      	ldr	r3, [r0, #32]
 801d6b8:	f023 0301 	bic.w	r3, r3, #1
 801d6bc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801d6be:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801d6c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801d6c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801d6c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 801d6cc:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 801d6ce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 801d6d0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 801d6d2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 801d6d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801d6d8:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 801d6dc:	e7c4      	b.n	801d668 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 801d6de:	4602      	mov	r2, r0
 801d6e0:	e78e      	b.n	801d600 <HAL_TIM_ConfigClockSource+0x4c>
 801d6e2:	bf00      	nop
 801d6e4:	fffe0088 	.word	0xfffe0088

0801d6e8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d6e8:	6a03      	ldr	r3, [r0, #32]
{
 801d6ea:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d6ec:	f001 011f 	and.w	r1, r1, #31
 801d6f0:	2401      	movs	r4, #1
 801d6f2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 801d6f4:	ea23 0304 	bic.w	r3, r3, r4
 801d6f8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d6fa:	6a03      	ldr	r3, [r0, #32]
 801d6fc:	408a      	lsls	r2, r1
 801d6fe:	431a      	orrs	r2, r3
 801d700:	6202      	str	r2, [r0, #32]
}
 801d702:	bd10      	pop	{r4, pc}

0801d704 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801d704:	2908      	cmp	r1, #8
{
 801d706:	b508      	push	{r3, lr}
 801d708:	d018      	beq.n	801d73c <HAL_TIM_OC_Start+0x38>
 801d70a:	d805      	bhi.n	801d718 <HAL_TIM_OC_Start+0x14>
 801d70c:	b159      	cbz	r1, 801d726 <HAL_TIM_OC_Start+0x22>
 801d70e:	2904      	cmp	r1, #4
 801d710:	d011      	beq.n	801d736 <HAL_TIM_OC_Start+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801d712:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 801d716:	e008      	b.n	801d72a <HAL_TIM_OC_Start+0x26>
 801d718:	290c      	cmp	r1, #12
 801d71a:	d012      	beq.n	801d742 <HAL_TIM_OC_Start+0x3e>
 801d71c:	2910      	cmp	r1, #16
 801d71e:	d1f8      	bne.n	801d712 <HAL_TIM_OC_Start+0xe>
 801d720:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801d724:	e001      	b.n	801d72a <HAL_TIM_OC_Start+0x26>
 801d726:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 801d72a:	3b01      	subs	r3, #1
 801d72c:	bf18      	it	ne
 801d72e:	2301      	movne	r3, #1
 801d730:	b153      	cbz	r3, 801d748 <HAL_TIM_OC_Start+0x44>
    return HAL_ERROR;
 801d732:	2001      	movs	r0, #1
 801d734:	e045      	b.n	801d7c2 <HAL_TIM_OC_Start+0xbe>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801d736:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 801d73a:	e7f6      	b.n	801d72a <HAL_TIM_OC_Start+0x26>
 801d73c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801d740:	e7f3      	b.n	801d72a <HAL_TIM_OC_Start+0x26>
 801d742:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 801d746:	e7f0      	b.n	801d72a <HAL_TIM_OC_Start+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801d748:	2908      	cmp	r1, #8
 801d74a:	f04f 0302 	mov.w	r3, #2
 801d74e:	d03c      	beq.n	801d7ca <HAL_TIM_OC_Start+0xc6>
 801d750:	d806      	bhi.n	801d760 <HAL_TIM_OC_Start+0x5c>
 801d752:	b161      	cbz	r1, 801d76e <HAL_TIM_OC_Start+0x6a>
 801d754:	2904      	cmp	r1, #4
 801d756:	d035      	beq.n	801d7c4 <HAL_TIM_OC_Start+0xc0>
 801d758:	2302      	movs	r3, #2
 801d75a:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
 801d75e:	e008      	b.n	801d772 <HAL_TIM_OC_Start+0x6e>
 801d760:	290c      	cmp	r1, #12
 801d762:	d035      	beq.n	801d7d0 <HAL_TIM_OC_Start+0xcc>
 801d764:	2910      	cmp	r1, #16
 801d766:	d1f7      	bne.n	801d758 <HAL_TIM_OC_Start+0x54>
 801d768:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
 801d76c:	e001      	b.n	801d772 <HAL_TIM_OC_Start+0x6e>
 801d76e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801d772:	6800      	ldr	r0, [r0, #0]
 801d774:	2201      	movs	r2, #1
 801d776:	f7ff ffb7 	bl	801d6e8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801d77a:	4b23      	ldr	r3, [pc, #140]	@ (801d808 <HAL_TIM_OC_Start+0x104>)
 801d77c:	4298      	cmp	r0, r3
 801d77e:	d00f      	beq.n	801d7a0 <HAL_TIM_OC_Start+0x9c>
 801d780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801d784:	4298      	cmp	r0, r3
 801d786:	d00b      	beq.n	801d7a0 <HAL_TIM_OC_Start+0x9c>
 801d788:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 801d78c:	4298      	cmp	r0, r3
 801d78e:	d007      	beq.n	801d7a0 <HAL_TIM_OC_Start+0x9c>
 801d790:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d794:	4298      	cmp	r0, r3
 801d796:	d003      	beq.n	801d7a0 <HAL_TIM_OC_Start+0x9c>
 801d798:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d79c:	4298      	cmp	r0, r3
 801d79e:	d11a      	bne.n	801d7d6 <HAL_TIM_OC_Start+0xd2>
    __HAL_TIM_MOE_ENABLE(htim);
 801d7a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801d7a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801d7a6:	6443      	str	r3, [r0, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d7a8:	4b17      	ldr	r3, [pc, #92]	@ (801d808 <HAL_TIM_OC_Start+0x104>)
 801d7aa:	4298      	cmp	r0, r3
 801d7ac:	d003      	beq.n	801d7b6 <HAL_TIM_OC_Start+0xb2>
 801d7ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801d7b2:	4298      	cmp	r0, r3
 801d7b4:	d122      	bne.n	801d7fc <HAL_TIM_OC_Start+0xf8>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801d7b6:	6882      	ldr	r2, [r0, #8]
 801d7b8:	4b14      	ldr	r3, [pc, #80]	@ (801d80c <HAL_TIM_OC_Start+0x108>)
 801d7ba:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d7bc:	2b06      	cmp	r3, #6
 801d7be:	d11f      	bne.n	801d800 <HAL_TIM_OC_Start+0xfc>
  return HAL_OK;
 801d7c0:	2000      	movs	r0, #0
}
 801d7c2:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801d7c4:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 801d7c8:	e7d3      	b.n	801d772 <HAL_TIM_OC_Start+0x6e>
 801d7ca:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801d7ce:	e7d0      	b.n	801d772 <HAL_TIM_OC_Start+0x6e>
 801d7d0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 801d7d4:	e7cd      	b.n	801d772 <HAL_TIM_OC_Start+0x6e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d7d6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801d7da:	d0ec      	beq.n	801d7b6 <HAL_TIM_OC_Start+0xb2>
 801d7dc:	4b0c      	ldr	r3, [pc, #48]	@ (801d810 <HAL_TIM_OC_Start+0x10c>)
 801d7de:	4298      	cmp	r0, r3
 801d7e0:	d0e9      	beq.n	801d7b6 <HAL_TIM_OC_Start+0xb2>
 801d7e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d7e6:	4298      	cmp	r0, r3
 801d7e8:	d0e5      	beq.n	801d7b6 <HAL_TIM_OC_Start+0xb2>
 801d7ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801d7ee:	4298      	cmp	r0, r3
 801d7f0:	d0e1      	beq.n	801d7b6 <HAL_TIM_OC_Start+0xb2>
      __HAL_TIM_ENABLE(htim);
 801d7f2:	6803      	ldr	r3, [r0, #0]
 801d7f4:	f043 0301 	orr.w	r3, r3, #1
 801d7f8:	6003      	str	r3, [r0, #0]
 801d7fa:	e7e1      	b.n	801d7c0 <HAL_TIM_OC_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d7fc:	4b05      	ldr	r3, [pc, #20]	@ (801d814 <HAL_TIM_OC_Start+0x110>)
 801d7fe:	e7f6      	b.n	801d7ee <HAL_TIM_OC_Start+0xea>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801d800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d804:	d1f5      	bne.n	801d7f2 <HAL_TIM_OC_Start+0xee>
 801d806:	e7db      	b.n	801d7c0 <HAL_TIM_OC_Start+0xbc>
 801d808:	40012c00 	.word	0x40012c00
 801d80c:	00010007 	.word	0x00010007
 801d810:	40000400 	.word	0x40000400
 801d814:	40014000 	.word	0x40014000

0801d818 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 801d818:	f7ff bf74 	b.w	801d704 <HAL_TIM_OC_Start>

0801d81c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d81c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d81e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 801d822:	2b01      	cmp	r3, #1
{
 801d824:	4604      	mov	r4, r0
 801d826:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 801d82a:	d036      	beq.n	801d89a <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d82c:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801d82e:	4d1b      	ldr	r5, [pc, #108]	@ (801d89c <HAL_TIMEx_MasterConfigSynchronization+0x80>)
  htim->State = HAL_TIM_STATE_BUSY;
 801d830:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801d834:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 801d836:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 801d838:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801d83a:	d002      	beq.n	801d842 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 801d83c:	4e18      	ldr	r6, [pc, #96]	@ (801d8a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 801d83e:	42b3      	cmp	r3, r6
 801d840:	d103      	bne.n	801d84a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801d842:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 801d844:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801d848:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d84a:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 801d84c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d850:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d852:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 801d854:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d856:	d015      	beq.n	801d884 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 801d858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d85c:	d012      	beq.n	801d884 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 801d85e:	4a11      	ldr	r2, [pc, #68]	@ (801d8a4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 801d860:	4293      	cmp	r3, r2
 801d862:	d00f      	beq.n	801d884 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 801d864:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d868:	4293      	cmp	r3, r2
 801d86a:	d00b      	beq.n	801d884 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 801d86c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801d870:	4293      	cmp	r3, r2
 801d872:	d007      	beq.n	801d884 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 801d874:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 801d878:	4293      	cmp	r3, r2
 801d87a:	d003      	beq.n	801d884 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 801d87c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 801d880:	4293      	cmp	r3, r2
 801d882:	d104      	bne.n	801d88e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d884:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d886:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d88a:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d88c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d88e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 801d890:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 801d892:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 801d896:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 801d89a:	bd70      	pop	{r4, r5, r6, pc}
 801d89c:	40012c00 	.word	0x40012c00
 801d8a0:	40013400 	.word	0x40013400
 801d8a4:	40000400 	.word	0x40000400

0801d8a8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 801d8a8:	4770      	bx	lr

0801d8aa <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 801d8aa:	4770      	bx	lr

0801d8ac <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 801d8ac:	4770      	bx	lr
	...

0801d8b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801d8b0:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801d8b2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d8b4:	e852 3f00 	ldrex	r3, [r2]
 801d8b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d8bc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 801d8c0:	6802      	ldr	r2, [r0, #0]
 801d8c2:	2900      	cmp	r1, #0
 801d8c4:	d1f5      	bne.n	801d8b2 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801d8c6:	4c0f      	ldr	r4, [pc, #60]	@ (801d904 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d8c8:	f102 0308 	add.w	r3, r2, #8
 801d8cc:	e853 3f00 	ldrex	r3, [r3]
 801d8d0:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d8d2:	f102 0c08 	add.w	ip, r2, #8
 801d8d6:	e84c 3100 	strex	r1, r3, [ip]
 801d8da:	2900      	cmp	r1, #0
 801d8dc:	d1f4      	bne.n	801d8c8 <UART_EndRxTransfer+0x18>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801d8de:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801d8e0:	2b01      	cmp	r3, #1
 801d8e2:	d107      	bne.n	801d8f4 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801d8e4:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801d8e8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801d8ec:	e842 3100 	strex	r1, r3, [r2]
 801d8f0:	2900      	cmp	r1, #0
 801d8f2:	d1f7      	bne.n	801d8e4 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801d8f4:	2320      	movs	r3, #32
 801d8f6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801d8fe:	6743      	str	r3, [r0, #116]	@ 0x74
}
 801d900:	bd10      	pop	{r4, pc}
 801d902:	bf00      	nop
 801d904:	effffffe 	.word	0xeffffffe

0801d908 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 801d908:	4770      	bx	lr

0801d90a <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 801d90a:	4770      	bx	lr

0801d90c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801d90c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801d90e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 801d910:	2300      	movs	r3, #0
 801d912:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801d916:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801d91a:	f7ff fff6 	bl	801d90a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801d91e:	bd08      	pop	{r3, pc}

0801d920 <HAL_UARTEx_RxEventCallback>:
}
 801d920:	4770      	bx	lr
	...

0801d924 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d924:	6803      	ldr	r3, [r0, #0]
 801d926:	69d9      	ldr	r1, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d928:	681a      	ldr	r2, [r3, #0]
{
 801d92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (errorflags == 0U)
 801d92e:	f640 060f 	movw	r6, #2063	@ 0x80f
 801d932:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d934:	689d      	ldr	r5, [r3, #8]
{
 801d936:	4604      	mov	r4, r0
  if (errorflags == 0U)
 801d938:	d110      	bne.n	801d95c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801d93a:	068e      	lsls	r6, r1, #26
 801d93c:	f140 8097 	bpl.w	801da6e <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801d940:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801d944:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 801d948:	433e      	orrs	r6, r7
 801d94a:	f000 8090 	beq.w	801da6e <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 801d94e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801d950:	2b00      	cmp	r3, #0
 801d952:	f000 8085 	beq.w	801da60 <HAL_UART_IRQHandler+0x13c>
}
 801d956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801d95a:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801d95c:	4ea8      	ldr	r6, [pc, #672]	@ (801dc00 <HAL_UART_IRQHandler+0x2dc>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801d95e:	48a9      	ldr	r0, [pc, #676]	@ (801dc04 <HAL_UART_IRQHandler+0x2e0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801d960:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801d962:	4010      	ands	r0, r2
 801d964:	4330      	orrs	r0, r6
 801d966:	f000 8082 	beq.w	801da6e <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801d96a:	07cf      	lsls	r7, r1, #31
 801d96c:	d509      	bpl.n	801d982 <HAL_UART_IRQHandler+0x5e>
 801d96e:	05d0      	lsls	r0, r2, #23
 801d970:	d507      	bpl.n	801d982 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801d972:	2001      	movs	r0, #1
 801d974:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801d976:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801d97a:	f040 0001 	orr.w	r0, r0, #1
 801d97e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d982:	078f      	lsls	r7, r1, #30
 801d984:	d509      	bpl.n	801d99a <HAL_UART_IRQHandler+0x76>
 801d986:	07e8      	lsls	r0, r5, #31
 801d988:	d507      	bpl.n	801d99a <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801d98a:	2002      	movs	r0, #2
 801d98c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801d98e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801d992:	f040 0004 	orr.w	r0, r0, #4
 801d996:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801d99a:	074f      	lsls	r7, r1, #29
 801d99c:	d509      	bpl.n	801d9b2 <HAL_UART_IRQHandler+0x8e>
 801d99e:	07e8      	lsls	r0, r5, #31
 801d9a0:	d507      	bpl.n	801d9b2 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801d9a2:	2004      	movs	r0, #4
 801d9a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801d9a6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801d9aa:	f040 0002 	orr.w	r0, r0, #2
 801d9ae:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 801d9b2:	070f      	lsls	r7, r1, #28
 801d9b4:	d50b      	bpl.n	801d9ce <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801d9b6:	f002 0020 	and.w	r0, r2, #32
 801d9ba:	4330      	orrs	r0, r6
 801d9bc:	d007      	beq.n	801d9ce <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d9be:	2008      	movs	r0, #8
 801d9c0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801d9c2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 801d9c6:	f040 0008 	orr.w	r0, r0, #8
 801d9ca:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801d9ce:	050e      	lsls	r6, r1, #20
 801d9d0:	d50a      	bpl.n	801d9e8 <HAL_UART_IRQHandler+0xc4>
 801d9d2:	0150      	lsls	r0, r2, #5
 801d9d4:	d508      	bpl.n	801d9e8 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d9d6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801d9da:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801d9dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 801d9e0:	f043 0320 	orr.w	r3, r3, #32
 801d9e4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801d9e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d037      	beq.n	801da60 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801d9f0:	068b      	lsls	r3, r1, #26
 801d9f2:	d509      	bpl.n	801da08 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801d9f4:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801d9f8:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 801d9fc:	432a      	orrs	r2, r5
 801d9fe:	d003      	beq.n	801da08 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 801da00:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801da02:	b10b      	cbz	r3, 801da08 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 801da04:	4620      	mov	r0, r4
 801da06:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da08:	6826      	ldr	r6, [r4, #0]
      errorcode = huart->ErrorCode;
 801da0a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da0e:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801da10:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801da18:	ea53 0502 	orrs.w	r5, r3, r2
        UART_EndRxTransfer(huart);
 801da1c:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801da1e:	d021      	beq.n	801da64 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 801da20:	f7ff ff46 	bl	801d8b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da24:	68b3      	ldr	r3, [r6, #8]
 801da26:	065f      	lsls	r7, r3, #25
 801da28:	d517      	bpl.n	801da5a <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801da2a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801da2c:	f102 0308 	add.w	r3, r2, #8
 801da30:	e853 3f00 	ldrex	r3, [r3]
 801da34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801da38:	3208      	adds	r2, #8
 801da3a:	e842 3100 	strex	r1, r3, [r2]
 801da3e:	2900      	cmp	r1, #0
 801da40:	d1f3      	bne.n	801da2a <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 801da42:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 801da46:	b140      	cbz	r0, 801da5a <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801da48:	4b6f      	ldr	r3, [pc, #444]	@ (801dc08 <HAL_UART_IRQHandler+0x2e4>)
 801da4a:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801da4c:	f7fc f888 	bl	8019b60 <HAL_DMA_Abort_IT>
 801da50:	b130      	cbz	r0, 801da60 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801da52:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 801da56:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801da58:	e77d      	b.n	801d956 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 801da5a:	4620      	mov	r0, r4
 801da5c:	f7ff ff55 	bl	801d90a <HAL_UART_ErrorCallback>
}
 801da60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 801da64:	f7ff ff51 	bl	801d90a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801da68:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 801da6c:	e7f8      	b.n	801da60 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801da6e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 801da70:	2801      	cmp	r0, #1
 801da72:	f040 808d 	bne.w	801db90 <HAL_UART_IRQHandler+0x26c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801da76:	06ce      	lsls	r6, r1, #27
 801da78:	f140 808a 	bpl.w	801db90 <HAL_UART_IRQHandler+0x26c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801da7c:	06d0      	lsls	r0, r2, #27
 801da7e:	f140 8087 	bpl.w	801db90 <HAL_UART_IRQHandler+0x26c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801da82:	2210      	movs	r2, #16
 801da84:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da86:	6899      	ldr	r1, [r3, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 801da88:	f8b4 205c 	ldrh.w	r2, [r4, #92]	@ 0x5c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801da8c:	0649      	lsls	r1, r1, #25
 801da8e:	d551      	bpl.n	801db34 <HAL_UART_IRQHandler+0x210>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801da90:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 801da94:	6808      	ldr	r0, [r1, #0]
 801da96:	6841      	ldr	r1, [r0, #4]
 801da98:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 801da9a:	2900      	cmp	r1, #0
 801da9c:	d042      	beq.n	801db24 <HAL_UART_IRQHandler+0x200>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801da9e:	4291      	cmp	r1, r2
 801daa0:	d240      	bcs.n	801db24 <HAL_UART_IRQHandler+0x200>
        huart->RxXferCount = nb_remaining_rx_data;
 801daa2:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801daa6:	6802      	ldr	r2, [r0, #0]
 801daa8:	0692      	lsls	r2, r2, #26
 801daaa:	d42f      	bmi.n	801db0c <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801daac:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dab0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dab4:	e843 2100 	strex	r1, r2, [r3]
 801dab8:	2900      	cmp	r1, #0
 801daba:	d1f7      	bne.n	801daac <HAL_UART_IRQHandler+0x188>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dabc:	f103 0208 	add.w	r2, r3, #8
 801dac0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dac4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dac8:	f103 0008 	add.w	r0, r3, #8
 801dacc:	e840 2100 	strex	r1, r2, [r0]
 801dad0:	2900      	cmp	r1, #0
 801dad2:	d1f3      	bne.n	801dabc <HAL_UART_IRQHandler+0x198>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dad4:	f103 0208 	add.w	r2, r3, #8
 801dad8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dadc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dae0:	f103 0008 	add.w	r0, r3, #8
 801dae4:	e840 2100 	strex	r1, r2, [r0]
 801dae8:	2900      	cmp	r1, #0
 801daea:	d1f3      	bne.n	801dad4 <HAL_UART_IRQHandler+0x1b0>
          huart->RxState = HAL_UART_STATE_READY;
 801daec:	2220      	movs	r2, #32
 801daee:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801daf2:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801daf4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801daf8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dafc:	e843 2100 	strex	r1, r2, [r3]
 801db00:	2900      	cmp	r1, #0
 801db02:	d1f7      	bne.n	801daf4 <HAL_UART_IRQHandler+0x1d0>
          (void)HAL_DMA_Abort(huart->hdmarx);
 801db04:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 801db08:	f7fb fff8 	bl	8019afc <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801db0c:	2302      	movs	r3, #2
 801db0e:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801db10:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 801db14:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801db18:	1ac9      	subs	r1, r1, r3
 801db1a:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801db1c:	4620      	mov	r0, r4
 801db1e:	f7ff feff 	bl	801d920 <HAL_UARTEx_RxEventCallback>
 801db22:	e79d      	b.n	801da60 <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 801db24:	4291      	cmp	r1, r2
 801db26:	d19b      	bne.n	801da60 <HAL_UART_IRQHandler+0x13c>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801db28:	6803      	ldr	r3, [r0, #0]
 801db2a:	069b      	lsls	r3, r3, #26
 801db2c:	d598      	bpl.n	801da60 <HAL_UART_IRQHandler+0x13c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801db2e:	2302      	movs	r3, #2
 801db30:	6723      	str	r3, [r4, #112]	@ 0x70
 801db32:	e7f3      	b.n	801db1c <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801db34:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 801db38:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
 801db3c:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801db3e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 801db40:	2800      	cmp	r0, #0
 801db42:	d08d      	beq.n	801da60 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801db44:	1a52      	subs	r2, r2, r1
 801db46:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 801db48:	2900      	cmp	r1, #0
 801db4a:	d089      	beq.n	801da60 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db4c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801db50:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db54:	e843 2000 	strex	r0, r2, [r3]
 801db58:	2800      	cmp	r0, #0
 801db5a:	d1f7      	bne.n	801db4c <HAL_UART_IRQHandler+0x228>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801db5c:	4d2b      	ldr	r5, [pc, #172]	@ (801dc0c <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db5e:	f103 0208 	add.w	r2, r3, #8
 801db62:	e852 2f00 	ldrex	r2, [r2]
 801db66:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db68:	f103 0608 	add.w	r6, r3, #8
 801db6c:	e846 2000 	strex	r0, r2, [r6]
 801db70:	2800      	cmp	r0, #0
 801db72:	d1f4      	bne.n	801db5e <HAL_UART_IRQHandler+0x23a>
        huart->RxState = HAL_UART_STATE_READY;
 801db74:	2220      	movs	r2, #32
 801db76:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 801db7a:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801db7c:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801db7e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801db82:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801db86:	e843 2000 	strex	r0, r2, [r3]
 801db8a:	2800      	cmp	r0, #0
 801db8c:	d1f7      	bne.n	801db7e <HAL_UART_IRQHandler+0x25a>
 801db8e:	e7ce      	b.n	801db2e <HAL_UART_IRQHandler+0x20a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801db90:	02cf      	lsls	r7, r1, #11
 801db92:	d509      	bpl.n	801dba8 <HAL_UART_IRQHandler+0x284>
 801db94:	026e      	lsls	r6, r5, #9
 801db96:	d507      	bpl.n	801dba8 <HAL_UART_IRQHandler+0x284>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801db98:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 801db9c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801db9e:	621a      	str	r2, [r3, #32]
}
 801dba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 801dba4:	f000 bb47 	b.w	801e236 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801dba8:	0608      	lsls	r0, r1, #24
 801dbaa:	d50b      	bpl.n	801dbc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801dbac:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801dbb0:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 801dbb4:	4328      	orrs	r0, r5
 801dbb6:	d005      	beq.n	801dbc4 <HAL_UART_IRQHandler+0x2a0>
    if (huart->TxISR != NULL)
 801dbb8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	f43f af50 	beq.w	801da60 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 801dbc0:	4620      	mov	r0, r4
 801dbc2:	e6c8      	b.n	801d956 <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801dbc4:	064f      	lsls	r7, r1, #25
 801dbc6:	d511      	bpl.n	801dbec <HAL_UART_IRQHandler+0x2c8>
 801dbc8:	0656      	lsls	r6, r2, #25
 801dbca:	d50f      	bpl.n	801dbec <HAL_UART_IRQHandler+0x2c8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801dbcc:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801dbd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801dbd4:	e843 2100 	strex	r1, r2, [r3]
 801dbd8:	2900      	cmp	r1, #0
 801dbda:	d1f7      	bne.n	801dbcc <HAL_UART_IRQHandler+0x2a8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801dbdc:	2320      	movs	r3, #32
 801dbde:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801dbe2:	67a1      	str	r1, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f7ff fe8f 	bl	801d908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801dbea:	e739      	b.n	801da60 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801dbec:	020d      	lsls	r5, r1, #8
 801dbee:	d50f      	bpl.n	801dc10 <HAL_UART_IRQHandler+0x2ec>
 801dbf0:	0050      	lsls	r0, r2, #1
 801dbf2:	d50d      	bpl.n	801dc10 <HAL_UART_IRQHandler+0x2ec>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801dbf4:	4620      	mov	r0, r4
}
 801dbf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801dbfa:	f000 bb1e 	b.w	801e23a <HAL_UARTEx_TxFifoEmptyCallback>
 801dbfe:	bf00      	nop
 801dc00:	10000001 	.word	0x10000001
 801dc04:	04000120 	.word	0x04000120
 801dc08:	0801d90d 	.word	0x0801d90d
 801dc0c:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801dc10:	01cb      	lsls	r3, r1, #7
 801dc12:	f57f af25 	bpl.w	801da60 <HAL_UART_IRQHandler+0x13c>
 801dc16:	2a00      	cmp	r2, #0
 801dc18:	f6bf af22 	bge.w	801da60 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 801dc1c:	4620      	mov	r0, r4
}
 801dc1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 801dc22:	f000 bb09 	b.w	801e238 <HAL_UARTEx_RxFifoFullCallback>
 801dc26:	bf00      	nop

0801dc28 <UART_SetConfig>:
{
 801dc28:	b538      	push	{r3, r4, r5, lr}
 801dc2a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dc2c:	69c0      	ldr	r0, [r0, #28]
 801dc2e:	6921      	ldr	r1, [r4, #16]
 801dc30:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dc32:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dc34:	430a      	orrs	r2, r1
 801dc36:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dc38:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dc3a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dc3c:	4985      	ldr	r1, [pc, #532]	@ (801de54 <UART_SetConfig+0x22c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801dc3e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801dc40:	4029      	ands	r1, r5
 801dc42:	430a      	orrs	r2, r1
 801dc44:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801dc46:	685a      	ldr	r2, [r3, #4]
 801dc48:	68e1      	ldr	r1, [r4, #12]
 801dc4a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 801dc4e:	430a      	orrs	r2, r1
 801dc50:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801dc52:	4a81      	ldr	r2, [pc, #516]	@ (801de58 <UART_SetConfig+0x230>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801dc54:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801dc56:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 801dc58:	bf1c      	itt	ne
 801dc5a:	6a22      	ldrne	r2, [r4, #32]
 801dc5c:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801dc5e:	689a      	ldr	r2, [r3, #8]
 801dc60:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 801dc64:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 801dc68:	430a      	orrs	r2, r1
 801dc6a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801dc6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801dc6e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801dc70:	f022 020f 	bic.w	r2, r2, #15
 801dc74:	430a      	orrs	r2, r1
 801dc76:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dc78:	4a78      	ldr	r2, [pc, #480]	@ (801de5c <UART_SetConfig+0x234>)
 801dc7a:	4293      	cmp	r3, r2
 801dc7c:	d130      	bne.n	801dce0 <UART_SetConfig+0xb8>
 801dc7e:	4b78      	ldr	r3, [pc, #480]	@ (801de60 <UART_SetConfig+0x238>)
 801dc80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dc84:	f003 0303 	and.w	r3, r3, #3
 801dc88:	2b02      	cmp	r3, #2
 801dc8a:	f000 80da 	beq.w	801de42 <UART_SetConfig+0x21a>
 801dc8e:	2b03      	cmp	r3, #3
 801dc90:	f000 80ca 	beq.w	801de28 <UART_SetConfig+0x200>
 801dc94:	2b01      	cmp	r3, #1
 801dc96:	f000 80ce 	beq.w	801de36 <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801dc9a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801dc9e:	f040 80d5 	bne.w	801de4c <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 801dca2:	f7fe fd63 	bl	801c76c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 801dca6:	2800      	cmp	r0, #0
 801dca8:	d077      	beq.n	801dd9a <UART_SetConfig+0x172>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801dcaa:	6861      	ldr	r1, [r4, #4]
 801dcac:	4b6d      	ldr	r3, [pc, #436]	@ (801de64 <UART_SetConfig+0x23c>)
 801dcae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801dcb0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801dcb4:	fbb0 f2f2 	udiv	r2, r0, r2
 801dcb8:	084b      	lsrs	r3, r1, #1
 801dcba:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801dcbe:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801dcc2:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801dcc6:	f1a3 0110 	sub.w	r1, r3, #16
 801dcca:	4291      	cmp	r1, r2
 801dccc:	d820      	bhi.n	801dd10 <UART_SetConfig+0xe8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801dcce:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 801dcd2:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801dcd4:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801dcd6:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 801dcda:	4313      	orrs	r3, r2
 801dcdc:	60cb      	str	r3, [r1, #12]
 801dcde:	e05c      	b.n	801dd9a <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dce0:	4a61      	ldr	r2, [pc, #388]	@ (801de68 <UART_SetConfig+0x240>)
 801dce2:	4293      	cmp	r3, r2
 801dce4:	d116      	bne.n	801dd14 <UART_SetConfig+0xec>
 801dce6:	4b5e      	ldr	r3, [pc, #376]	@ (801de60 <UART_SetConfig+0x238>)
 801dce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dcec:	f003 030c 	and.w	r3, r3, #12
 801dcf0:	2b08      	cmp	r3, #8
 801dcf2:	f000 80a6 	beq.w	801de42 <UART_SetConfig+0x21a>
 801dcf6:	d808      	bhi.n	801dd0a <UART_SetConfig+0xe2>
 801dcf8:	2b00      	cmp	r3, #0
 801dcfa:	f040 809c 	bne.w	801de36 <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801dcfe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801dd02:	d17a      	bne.n	801ddfa <UART_SetConfig+0x1d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 801dd04:	f7fe fd20 	bl	801c748 <HAL_RCC_GetPCLK1Freq>
        break;
 801dd08:	e7cd      	b.n	801dca6 <UART_SetConfig+0x7e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dd0a:	2b0c      	cmp	r3, #12
 801dd0c:	f000 808c 	beq.w	801de28 <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801dd10:	2001      	movs	r0, #1
 801dd12:	e043      	b.n	801dd9c <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dd14:	4a55      	ldr	r2, [pc, #340]	@ (801de6c <UART_SetConfig+0x244>)
 801dd16:	4293      	cmp	r3, r2
 801dd18:	d10a      	bne.n	801dd30 <UART_SetConfig+0x108>
 801dd1a:	4b51      	ldr	r3, [pc, #324]	@ (801de60 <UART_SetConfig+0x238>)
 801dd1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801dd24:	2b20      	cmp	r3, #32
 801dd26:	f000 808c 	beq.w	801de42 <UART_SetConfig+0x21a>
 801dd2a:	d9e5      	bls.n	801dcf8 <UART_SetConfig+0xd0>
 801dd2c:	2b30      	cmp	r3, #48	@ 0x30
 801dd2e:	e7ed      	b.n	801dd0c <UART_SetConfig+0xe4>
 801dd30:	4a4f      	ldr	r2, [pc, #316]	@ (801de70 <UART_SetConfig+0x248>)
 801dd32:	4293      	cmp	r3, r2
 801dd34:	d109      	bne.n	801dd4a <UART_SetConfig+0x122>
 801dd36:	4b4a      	ldr	r3, [pc, #296]	@ (801de60 <UART_SetConfig+0x238>)
 801dd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd3c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801dd40:	2b80      	cmp	r3, #128	@ 0x80
 801dd42:	d07e      	beq.n	801de42 <UART_SetConfig+0x21a>
 801dd44:	d9d8      	bls.n	801dcf8 <UART_SetConfig+0xd0>
 801dd46:	2bc0      	cmp	r3, #192	@ 0xc0
 801dd48:	e7e0      	b.n	801dd0c <UART_SetConfig+0xe4>
 801dd4a:	4a4a      	ldr	r2, [pc, #296]	@ (801de74 <UART_SetConfig+0x24c>)
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	d10b      	bne.n	801dd68 <UART_SetConfig+0x140>
 801dd50:	4b43      	ldr	r3, [pc, #268]	@ (801de60 <UART_SetConfig+0x238>)
 801dd52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801dd5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dd5e:	d070      	beq.n	801de42 <UART_SetConfig+0x21a>
 801dd60:	d9ca      	bls.n	801dcf8 <UART_SetConfig+0xd0>
 801dd62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dd66:	e7d1      	b.n	801dd0c <UART_SetConfig+0xe4>
 801dd68:	4a3b      	ldr	r2, [pc, #236]	@ (801de58 <UART_SetConfig+0x230>)
 801dd6a:	4293      	cmp	r3, r2
 801dd6c:	d1d0      	bne.n	801dd10 <UART_SetConfig+0xe8>
 801dd6e:	4b3c      	ldr	r3, [pc, #240]	@ (801de60 <UART_SetConfig+0x238>)
 801dd70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dd74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801dd78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801dd7c:	d015      	beq.n	801ddaa <UART_SetConfig+0x182>
 801dd7e:	d803      	bhi.n	801dd88 <UART_SetConfig+0x160>
 801dd80:	b943      	cbnz	r3, 801dd94 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 801dd82:	f7fe fce1 	bl	801c748 <HAL_RCC_GetPCLK1Freq>
        break;
 801dd86:	e007      	b.n	801dd98 <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801dd88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801dd8c:	d1c0      	bne.n	801dd10 <UART_SetConfig+0xe8>
 801dd8e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 801dd92:	e00b      	b.n	801ddac <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetSysClockFreq();
 801dd94:	f7fe f8e6 	bl	801bf64 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 801dd98:	b940      	cbnz	r0, 801ddac <UART_SetConfig+0x184>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801dd9a:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 801dd9c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 801dda0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 801dda2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 801dda4:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 801dda8:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 801ddaa:	4833      	ldr	r0, [pc, #204]	@ (801de78 <UART_SetConfig+0x250>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ddac:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801ddae:	4b2d      	ldr	r3, [pc, #180]	@ (801de64 <UART_SetConfig+0x23c>)
 801ddb0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ddb2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801ddb6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801ddba:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801ddbe:	4299      	cmp	r1, r3
 801ddc0:	d8a6      	bhi.n	801dd10 <UART_SetConfig+0xe8>
 801ddc2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 801ddc6:	d8a3      	bhi.n	801dd10 <UART_SetConfig+0xe8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801ddc8:	2300      	movs	r3, #0
 801ddca:	4619      	mov	r1, r3
 801ddcc:	f7f8 f884 	bl	8015ed8 <__aeabi_uldivmod>
 801ddd0:	0209      	lsls	r1, r1, #8
 801ddd2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 801ddd6:	086b      	lsrs	r3, r5, #1
 801ddd8:	0200      	lsls	r0, r0, #8
 801ddda:	18c0      	adds	r0, r0, r3
 801dddc:	462a      	mov	r2, r5
 801ddde:	f04f 0300 	mov.w	r3, #0
 801dde2:	f141 0100 	adc.w	r1, r1, #0
 801dde6:	f7f8 f877 	bl	8015ed8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801ddea:	4b24      	ldr	r3, [pc, #144]	@ (801de7c <UART_SetConfig+0x254>)
 801ddec:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ddf0:	429a      	cmp	r2, r3
 801ddf2:	d88d      	bhi.n	801dd10 <UART_SetConfig+0xe8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 801ddf4:	6823      	ldr	r3, [r4, #0]
 801ddf6:	60d8      	str	r0, [r3, #12]
 801ddf8:	e7cf      	b.n	801dd9a <UART_SetConfig+0x172>
        pclk = HAL_RCC_GetPCLK1Freq();
 801ddfa:	f7fe fca5 	bl	801c748 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 801ddfe:	2800      	cmp	r0, #0
 801de00:	d0cb      	beq.n	801dd9a <UART_SetConfig+0x172>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801de02:	6863      	ldr	r3, [r4, #4]
 801de04:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801de06:	4a17      	ldr	r2, [pc, #92]	@ (801de64 <UART_SetConfig+0x23c>)
 801de08:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801de0c:	fbb0 f0f2 	udiv	r0, r0, r2
 801de10:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 801de14:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801de18:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 801de1c:	f1a0 0210 	sub.w	r2, r0, #16
 801de20:	e7e6      	b.n	801ddf0 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 801de22:	f7fe f89f 	bl	801bf64 <HAL_RCC_GetSysClockFreq>
        break;
 801de26:	e7ea      	b.n	801ddfe <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801de28:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801de2c:	f43f af3d 	beq.w	801dcaa <UART_SetConfig+0x82>
        pclk = (uint32_t) LSE_VALUE;
 801de30:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 801de34:	e7e5      	b.n	801de02 <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801de36:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801de3a:	d1f2      	bne.n	801de22 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 801de3c:	f7fe f892 	bl	801bf64 <HAL_RCC_GetSysClockFreq>
        break;
 801de40:	e731      	b.n	801dca6 <UART_SetConfig+0x7e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801de42:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801de46:	480c      	ldr	r0, [pc, #48]	@ (801de78 <UART_SetConfig+0x250>)
 801de48:	d1db      	bne.n	801de02 <UART_SetConfig+0x1da>
 801de4a:	e72e      	b.n	801dcaa <UART_SetConfig+0x82>
        pclk = HAL_RCC_GetPCLK2Freq();
 801de4c:	f7fe fc8e 	bl	801c76c <HAL_RCC_GetPCLK2Freq>
        break;
 801de50:	e7d5      	b.n	801ddfe <UART_SetConfig+0x1d6>
 801de52:	bf00      	nop
 801de54:	cfff69f3 	.word	0xcfff69f3
 801de58:	40008000 	.word	0x40008000
 801de5c:	40013800 	.word	0x40013800
 801de60:	40021000 	.word	0x40021000
 801de64:	08041e20 	.word	0x08041e20
 801de68:	40004400 	.word	0x40004400
 801de6c:	40004800 	.word	0x40004800
 801de70:	40004c00 	.word	0x40004c00
 801de74:	40005000 	.word	0x40005000
 801de78:	00f42400 	.word	0x00f42400
 801de7c:	000ffcff 	.word	0x000ffcff

0801de80 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801de80:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801de82:	071a      	lsls	r2, r3, #28
{
 801de84:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801de86:	d506      	bpl.n	801de96 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801de88:	6801      	ldr	r1, [r0, #0]
 801de8a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801de8c:	684a      	ldr	r2, [r1, #4]
 801de8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801de92:	4322      	orrs	r2, r4
 801de94:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801de96:	07dc      	lsls	r4, r3, #31
 801de98:	d506      	bpl.n	801dea8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801de9a:	6801      	ldr	r1, [r0, #0]
 801de9c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 801de9e:	684a      	ldr	r2, [r1, #4]
 801dea0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801dea4:	4322      	orrs	r2, r4
 801dea6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801dea8:	0799      	lsls	r1, r3, #30
 801deaa:	d506      	bpl.n	801deba <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801deac:	6801      	ldr	r1, [r0, #0]
 801deae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801deb0:	684a      	ldr	r2, [r1, #4]
 801deb2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801deb6:	4322      	orrs	r2, r4
 801deb8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801deba:	075a      	lsls	r2, r3, #29
 801debc:	d506      	bpl.n	801decc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801debe:	6801      	ldr	r1, [r0, #0]
 801dec0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 801dec2:	684a      	ldr	r2, [r1, #4]
 801dec4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801dec8:	4322      	orrs	r2, r4
 801deca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801decc:	06dc      	lsls	r4, r3, #27
 801dece:	d506      	bpl.n	801dede <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801ded0:	6801      	ldr	r1, [r0, #0]
 801ded2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 801ded4:	688a      	ldr	r2, [r1, #8]
 801ded6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801deda:	4322      	orrs	r2, r4
 801dedc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801dede:	0699      	lsls	r1, r3, #26
 801dee0:	d506      	bpl.n	801def0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801dee2:	6801      	ldr	r1, [r0, #0]
 801dee4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 801dee6:	688a      	ldr	r2, [r1, #8]
 801dee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801deec:	4322      	orrs	r2, r4
 801deee:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801def0:	065a      	lsls	r2, r3, #25
 801def2:	d50f      	bpl.n	801df14 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801def4:	6801      	ldr	r1, [r0, #0]
 801def6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 801def8:	684a      	ldr	r2, [r1, #4]
 801defa:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 801defe:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801df00:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801df04:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801df06:	d105      	bne.n	801df14 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801df08:	684a      	ldr	r2, [r1, #4]
 801df0a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 801df0c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 801df10:	4322      	orrs	r2, r4
 801df12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801df14:	061b      	lsls	r3, r3, #24
 801df16:	d506      	bpl.n	801df26 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801df18:	6802      	ldr	r2, [r0, #0]
 801df1a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801df1c:	6853      	ldr	r3, [r2, #4]
 801df1e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 801df22:	430b      	orrs	r3, r1
 801df24:	6053      	str	r3, [r2, #4]
}
 801df26:	bd10      	pop	{r4, pc}

0801df28 <UART_WaitOnFlagUntilTimeout>:
{
 801df28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801df30:	4604      	mov	r4, r0
 801df32:	460d      	mov	r5, r1
 801df34:	4617      	mov	r7, r2
 801df36:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801df38:	6822      	ldr	r2, [r4, #0]
 801df3a:	69d3      	ldr	r3, [r2, #28]
 801df3c:	ea35 0303 	bics.w	r3, r5, r3
 801df40:	bf0c      	ite	eq
 801df42:	2301      	moveq	r3, #1
 801df44:	2300      	movne	r3, #0
 801df46:	42bb      	cmp	r3, r7
 801df48:	d001      	beq.n	801df4e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 801df4a:	2000      	movs	r0, #0
 801df4c:	e022      	b.n	801df94 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 801df4e:	f1b9 3fff 	cmp.w	r9, #4294967295
 801df52:	d0f2      	beq.n	801df3a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801df54:	f7fa fbea 	bl	801872c <HAL_GetTick>
 801df58:	eba0 0008 	sub.w	r0, r0, r8
 801df5c:	4548      	cmp	r0, r9
 801df5e:	d829      	bhi.n	801dfb4 <UART_WaitOnFlagUntilTimeout+0x8c>
 801df60:	f1b9 0f00 	cmp.w	r9, #0
 801df64:	d026      	beq.n	801dfb4 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801df66:	6821      	ldr	r1, [r4, #0]
 801df68:	680b      	ldr	r3, [r1, #0]
 801df6a:	075a      	lsls	r2, r3, #29
 801df6c:	d5e4      	bpl.n	801df38 <UART_WaitOnFlagUntilTimeout+0x10>
 801df6e:	2d80      	cmp	r5, #128	@ 0x80
 801df70:	d0e2      	beq.n	801df38 <UART_WaitOnFlagUntilTimeout+0x10>
 801df72:	2d40      	cmp	r5, #64	@ 0x40
 801df74:	d0e0      	beq.n	801df38 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801df76:	69ce      	ldr	r6, [r1, #28]
 801df78:	f016 0608 	ands.w	r6, r6, #8
 801df7c:	d00c      	beq.n	801df98 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801df7e:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 801df80:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801df82:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 801df84:	f7ff fc94 	bl	801d8b0 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 801df88:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801df8a:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 801df8e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
          return HAL_ERROR;
 801df92:	2001      	movs	r0, #1
}
 801df94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801df98:	69cb      	ldr	r3, [r1, #28]
 801df9a:	051b      	lsls	r3, r3, #20
 801df9c:	d5cc      	bpl.n	801df38 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801df9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801dfa2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	f7ff fc83 	bl	801d8b0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801dfaa:	2320      	movs	r3, #32
 801dfac:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 801dfb0:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
        return HAL_TIMEOUT;
 801dfb4:	2003      	movs	r0, #3
 801dfb6:	e7ed      	b.n	801df94 <UART_WaitOnFlagUntilTimeout+0x6c>

0801dfb8 <HAL_UART_Transmit>:
{
 801dfb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dfbc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 801dfbe:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 801dfc2:	2b20      	cmp	r3, #32
{
 801dfc4:	4604      	mov	r4, r0
 801dfc6:	460e      	mov	r6, r1
 801dfc8:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 801dfca:	d146      	bne.n	801e05a <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 801dfcc:	2900      	cmp	r1, #0
 801dfce:	d046      	beq.n	801e05e <HAL_UART_Transmit+0xa6>
 801dfd0:	2a00      	cmp	r2, #0
 801dfd2:	d044      	beq.n	801e05e <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801dfd4:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dfd6:	2500      	movs	r5, #0
 801dfd8:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801dfdc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 801dfe0:	f7fa fba4 	bl	801872c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801dfe4:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 801dfe6:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801dfea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 801dfee:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 801dff0:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801dff4:	d103      	bne.n	801dffe <HAL_UART_Transmit+0x46>
 801dff6:	6923      	ldr	r3, [r4, #16]
 801dff8:	b90b      	cbnz	r3, 801dffe <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 801dffa:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 801dffc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 801dffe:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e002:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 801e006:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e008:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 801e00a:	b942      	cbnz	r2, 801e01e <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e00c:	2140      	movs	r1, #64	@ 0x40
 801e00e:	4620      	mov	r0, r4
 801e010:	f7ff ff8a 	bl	801df28 <UART_WaitOnFlagUntilTimeout>
 801e014:	2320      	movs	r3, #32
 801e016:	b948      	cbnz	r0, 801e02c <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 801e018:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 801e01c:	e009      	b.n	801e032 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e01e:	2200      	movs	r2, #0
 801e020:	2180      	movs	r1, #128	@ 0x80
 801e022:	4620      	mov	r0, r4
 801e024:	f7ff ff80 	bl	801df28 <UART_WaitOnFlagUntilTimeout>
 801e028:	b130      	cbz	r0, 801e038 <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 801e02a:	2320      	movs	r3, #32
 801e02c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 801e030:	2003      	movs	r0, #3
}
 801e032:	b003      	add	sp, #12
 801e034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e038:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 801e03a:	b95e      	cbnz	r6, 801e054 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e03c:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e040:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e044:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 801e046:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 801e04a:	3a01      	subs	r2, #1
 801e04c:	b292      	uxth	r2, r2
 801e04e:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 801e052:	e7d4      	b.n	801dffe <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e054:	f816 3b01 	ldrb.w	r3, [r6], #1
 801e058:	e7f4      	b.n	801e044 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 801e05a:	2002      	movs	r0, #2
 801e05c:	e7e9      	b.n	801e032 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 801e05e:	2001      	movs	r0, #1
 801e060:	e7e7      	b.n	801e032 <HAL_UART_Transmit+0x7a>

0801e062 <UART_CheckIdleState>:
{
 801e062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e064:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e066:	2600      	movs	r6, #0
 801e068:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 801e06c:	f7fa fb5e 	bl	801872c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e070:	6823      	ldr	r3, [r4, #0]
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 801e076:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e078:	d51c      	bpl.n	801e0b4 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e07a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801e07e:	9300      	str	r3, [sp, #0]
 801e080:	4632      	mov	r2, r6
 801e082:	4603      	mov	r3, r0
 801e084:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801e088:	4620      	mov	r0, r4
 801e08a:	f7ff ff4d 	bl	801df28 <UART_WaitOnFlagUntilTimeout>
 801e08e:	b188      	cbz	r0, 801e0b4 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801e090:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e092:	e852 3f00 	ldrex	r3, [r2]
 801e096:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e09a:	e842 3100 	strex	r1, r3, [r2]
 801e09e:	2900      	cmp	r1, #0
 801e0a0:	d1f6      	bne.n	801e090 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 801e0a2:	2320      	movs	r3, #32
 801e0a4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 801e0a8:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 801e0aa:	2300      	movs	r3, #0
 801e0ac:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 801e0b0:	b002      	add	sp, #8
 801e0b2:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e0b4:	6823      	ldr	r3, [r4, #0]
 801e0b6:	681b      	ldr	r3, [r3, #0]
 801e0b8:	075b      	lsls	r3, r3, #29
 801e0ba:	d524      	bpl.n	801e106 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e0bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801e0c0:	9300      	str	r3, [sp, #0]
 801e0c2:	2200      	movs	r2, #0
 801e0c4:	462b      	mov	r3, r5
 801e0c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801e0ca:	4620      	mov	r0, r4
 801e0cc:	f7ff ff2c 	bl	801df28 <UART_WaitOnFlagUntilTimeout>
 801e0d0:	b1c8      	cbz	r0, 801e106 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801e0d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e0d4:	e852 3f00 	ldrex	r3, [r2]
 801e0d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e0dc:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 801e0e0:	6822      	ldr	r2, [r4, #0]
 801e0e2:	2900      	cmp	r1, #0
 801e0e4:	d1f5      	bne.n	801e0d2 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e0e6:	f102 0308 	add.w	r3, r2, #8
 801e0ea:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e0ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e0f2:	f102 0008 	add.w	r0, r2, #8
 801e0f6:	e840 3100 	strex	r1, r3, [r0]
 801e0fa:	2900      	cmp	r1, #0
 801e0fc:	d1f3      	bne.n	801e0e6 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 801e0fe:	2320      	movs	r3, #32
 801e100:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 801e104:	e7d0      	b.n	801e0a8 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 801e106:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e108:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 801e10a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801e10e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e112:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e114:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 801e116:	e7c8      	b.n	801e0aa <UART_CheckIdleState+0x48>

0801e118 <HAL_UART_Init>:
{
 801e118:	b510      	push	{r4, lr}
  if (huart == NULL)
 801e11a:	4604      	mov	r4, r0
 801e11c:	b350      	cbz	r0, 801e174 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 801e11e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 801e122:	b91b      	cbnz	r3, 801e12c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 801e124:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 801e128:	f7f9 fd04 	bl	8017b34 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 801e12c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801e12e:	2324      	movs	r3, #36	@ 0x24
 801e130:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 801e134:	6813      	ldr	r3, [r2, #0]
 801e136:	f023 0301 	bic.w	r3, r3, #1
 801e13a:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e13c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e13e:	b113      	cbz	r3, 801e146 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 801e140:	4620      	mov	r0, r4
 801e142:	f7ff fe9d 	bl	801de80 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e146:	4620      	mov	r0, r4
 801e148:	f7ff fd6e 	bl	801dc28 <UART_SetConfig>
 801e14c:	2801      	cmp	r0, #1
 801e14e:	d011      	beq.n	801e174 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e150:	6823      	ldr	r3, [r4, #0]
 801e152:	685a      	ldr	r2, [r3, #4]
 801e154:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801e158:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e15a:	689a      	ldr	r2, [r3, #8]
 801e15c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801e160:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801e162:	681a      	ldr	r2, [r3, #0]
 801e164:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 801e168:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 801e16a:	601a      	str	r2, [r3, #0]
}
 801e16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 801e170:	f7ff bf77 	b.w	801e062 <UART_CheckIdleState>
}
 801e174:	2001      	movs	r0, #1
 801e176:	bd10      	pop	{r4, pc}

0801e178 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801e178:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 801e17a:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801e17c:	b92b      	cbnz	r3, 801e18a <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 801e17e:	2301      	movs	r3, #1
 801e180:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801e184:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801e188:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801e18a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801e18c:	4d09      	ldr	r5, [pc, #36]	@ (801e1b4 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801e18e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801e190:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 801e192:	4c09      	ldr	r4, [pc, #36]	@ (801e1b8 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801e194:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801e196:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801e19a:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 801e19c:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801e19e:	00db      	lsls	r3, r3, #3
 801e1a0:	fbb3 f3f1 	udiv	r3, r3, r1
 801e1a4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801e1a8:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 801e1aa:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801e1ac:	00db      	lsls	r3, r3, #3
 801e1ae:	fbb3 f3f2 	udiv	r3, r3, r2
}
 801e1b2:	e7e7      	b.n	801e184 <UARTEx_SetNbDataToProcess+0xc>
 801e1b4:	08041e40 	.word	0x08041e40
 801e1b8:	08041e38 	.word	0x08041e38

0801e1bc <HAL_RS485Ex_Init>:
{
 801e1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1be:	460f      	mov	r7, r1
 801e1c0:	4616      	mov	r6, r2
 801e1c2:	461d      	mov	r5, r3
  if (huart == NULL)
 801e1c4:	4604      	mov	r4, r0
 801e1c6:	2800      	cmp	r0, #0
 801e1c8:	d033      	beq.n	801e232 <HAL_RS485Ex_Init+0x76>
  if (huart->gState == HAL_UART_STATE_RESET)
 801e1ca:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 801e1ce:	b91b      	cbnz	r3, 801e1d8 <HAL_RS485Ex_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 801e1d0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 801e1d4:	f7f9 fcae 	bl	8017b34 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 801e1d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801e1da:	2324      	movs	r3, #36	@ 0x24
 801e1dc:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 801e1e0:	6813      	ldr	r3, [r2, #0]
 801e1e2:	f023 0301 	bic.w	r3, r3, #1
 801e1e6:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e1e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e1ea:	b113      	cbz	r3, 801e1f2 <HAL_RS485Ex_Init+0x36>
    UART_AdvFeatureConfig(huart);
 801e1ec:	4620      	mov	r0, r4
 801e1ee:	f7ff fe47 	bl	801de80 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e1f2:	4620      	mov	r0, r4
 801e1f4:	f7ff fd18 	bl	801dc28 <UART_SetConfig>
 801e1f8:	2801      	cmp	r0, #1
 801e1fa:	d01a      	beq.n	801e232 <HAL_RS485Ex_Init+0x76>
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801e1fc:	6823      	ldr	r3, [r4, #0]
 801e1fe:	689a      	ldr	r2, [r3, #8]
 801e200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801e204:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 801e206:	6898      	ldr	r0, [r3, #8]
 801e208:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 801e20c:	4338      	orrs	r0, r7
 801e20e:	6098      	str	r0, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801e210:	681a      	ldr	r2, [r3, #0]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801e212:	042d      	lsls	r5, r5, #16
 801e214:	ea45 5546 	orr.w	r5, r5, r6, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801e218:	f36f 4219 	bfc	r2, #16, #10
 801e21c:	4315      	orrs	r5, r2
 801e21e:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801e220:	681a      	ldr	r2, [r3, #0]
 801e222:	f042 0201 	orr.w	r2, r2, #1
 801e226:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801e228:	4620      	mov	r0, r4
}
 801e22a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 801e22e:	f7ff bf18 	b.w	801e062 <UART_CheckIdleState>
}
 801e232:	2001      	movs	r0, #1
 801e234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e236 <HAL_UARTEx_WakeupCallback>:
}
 801e236:	4770      	bx	lr

0801e238 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 801e238:	4770      	bx	lr

0801e23a <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 801e23a:	4770      	bx	lr

0801e23c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 801e23c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801e240:	2b01      	cmp	r3, #1
 801e242:	d014      	beq.n	801e26e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e244:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801e246:	2324      	movs	r3, #36	@ 0x24
 801e248:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e24c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 801e24e:	6813      	ldr	r3, [r2, #0]
 801e250:	f023 0301 	bic.w	r3, r3, #1
 801e254:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801e256:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801e25a:	2300      	movs	r3, #0
 801e25c:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e25e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 801e260:	2220      	movs	r2, #32
 801e262:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 801e266:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 801e26a:	4618      	mov	r0, r3
 801e26c:	4770      	bx	lr
  __HAL_LOCK(huart);
 801e26e:	2002      	movs	r0, #2
}
 801e270:	4770      	bx	lr

0801e272 <HAL_UARTEx_SetTxFifoThreshold>:
{
 801e272:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 801e274:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801e278:	2b01      	cmp	r3, #1
{
 801e27a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 801e27c:	d017      	beq.n	801e2ae <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e27e:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801e280:	2324      	movs	r3, #36	@ 0x24
 801e282:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e286:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 801e288:	682b      	ldr	r3, [r5, #0]
 801e28a:	f023 0301 	bic.w	r3, r3, #1
 801e28e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801e290:	68ab      	ldr	r3, [r5, #8]
 801e292:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 801e296:	4319      	orrs	r1, r3
 801e298:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 801e29a:	f7ff ff6d 	bl	801e178 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 801e29e:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e2a0:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 801e2a2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 801e2a6:	2000      	movs	r0, #0
 801e2a8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 801e2ac:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 801e2ae:	2002      	movs	r0, #2
 801e2b0:	e7fc      	b.n	801e2ac <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0801e2b2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 801e2b2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 801e2b4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 801e2b8:	2b01      	cmp	r3, #1
{
 801e2ba:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 801e2bc:	d017      	beq.n	801e2ee <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e2be:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801e2c0:	2324      	movs	r3, #36	@ 0x24
 801e2c2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801e2c6:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 801e2c8:	682b      	ldr	r3, [r5, #0]
 801e2ca:	f023 0301 	bic.w	r3, r3, #1
 801e2ce:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801e2d0:	68ab      	ldr	r3, [r5, #8]
 801e2d2:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 801e2d6:	4319      	orrs	r1, r3
 801e2d8:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 801e2da:	f7ff ff4d 	bl	801e178 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 801e2de:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801e2e0:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 801e2e2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 801e2e6:	2000      	movs	r0, #0
 801e2e8:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 801e2ec:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 801e2ee:	2002      	movs	r0, #2
 801e2f0:	e7fc      	b.n	801e2ec <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0801e2f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801e2f2:	b084      	sub	sp, #16
 801e2f4:	b513      	push	{r0, r1, r4, lr}
 801e2f6:	4604      	mov	r4, r0
 801e2f8:	a805      	add	r0, sp, #20
 801e2fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801e2fe:	68e3      	ldr	r3, [r4, #12]
 801e300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e304:	60e3      	str	r3, [r4, #12]
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 801e306:	2300      	movs	r3, #0
 801e308:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801e30a:	9b01      	ldr	r3, [sp, #4]
 801e30c:	3301      	adds	r3, #1
 801e30e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 801e310:	9b01      	ldr	r3, [sp, #4]
 801e312:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801e316:	d81f      	bhi.n	801e358 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801e318:	6923      	ldr	r3, [r4, #16]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	daf5      	bge.n	801e30a <USB_CoreInit+0x18>

  /* Core Soft Reset */
  count = 0U;
 801e31e:	2300      	movs	r3, #0
 801e320:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801e322:	6923      	ldr	r3, [r4, #16]
 801e324:	f043 0301 	orr.w	r3, r3, #1
 801e328:	6123      	str	r3, [r4, #16]

  do
  {
    count++;
 801e32a:	9b01      	ldr	r3, [sp, #4]
 801e32c:	3301      	adds	r3, #1
 801e32e:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 801e330:	9b01      	ldr	r3, [sp, #4]
 801e332:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801e336:	d80f      	bhi.n	801e358 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801e338:	6920      	ldr	r0, [r4, #16]
 801e33a:	f010 0001 	ands.w	r0, r0, #1
 801e33e:	d1f4      	bne.n	801e32a <USB_CoreInit+0x38>
  if (cfg.battery_charging_enable == 0U)
 801e340:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801e344:	b953      	cbnz	r3, 801e35c <USB_CoreInit+0x6a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801e346:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801e34c:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 801e34e:	b002      	add	sp, #8
 801e350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e354:	b004      	add	sp, #16
 801e356:	4770      	bx	lr
      return HAL_TIMEOUT;
 801e358:	2003      	movs	r0, #3
 801e35a:	e7f1      	b.n	801e340 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801e35c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e35e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e362:	e7f3      	b.n	801e34c <USB_CoreInit+0x5a>

0801e364 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 801e364:	2a02      	cmp	r2, #2
 801e366:	d14a      	bne.n	801e3fe <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801e368:	4b27      	ldr	r3, [pc, #156]	@ (801e408 <USB_SetTurnaroundTime+0xa4>)
 801e36a:	4a28      	ldr	r2, [pc, #160]	@ (801e40c <USB_SetTurnaroundTime+0xa8>)
 801e36c:	440b      	add	r3, r1
 801e36e:	4293      	cmp	r3, r2
 801e370:	d939      	bls.n	801e3e6 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801e372:	4b27      	ldr	r3, [pc, #156]	@ (801e410 <USB_SetTurnaroundTime+0xac>)
 801e374:	4a27      	ldr	r2, [pc, #156]	@ (801e414 <USB_SetTurnaroundTime+0xb0>)
 801e376:	440b      	add	r3, r1
 801e378:	4293      	cmp	r3, r2
 801e37a:	d936      	bls.n	801e3ea <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801e37c:	4a26      	ldr	r2, [pc, #152]	@ (801e418 <USB_SetTurnaroundTime+0xb4>)
 801e37e:	f5a1 0374 	sub.w	r3, r1, #15990784	@ 0xf40000
 801e382:	f5a3 5310 	sub.w	r3, r3, #9216	@ 0x2400
 801e386:	4293      	cmp	r3, r2
 801e388:	d931      	bls.n	801e3ee <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801e38a:	4a24      	ldr	r2, [pc, #144]	@ (801e41c <USB_SetTurnaroundTime+0xb8>)
 801e38c:	f1a1 7383 	sub.w	r3, r1, #17170432	@ 0x1060000
 801e390:	f5a3 43e7 	sub.w	r3, r3, #29568	@ 0x7380
 801e394:	4293      	cmp	r3, r2
 801e396:	d32c      	bcc.n	801e3f2 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801e398:	4b21      	ldr	r3, [pc, #132]	@ (801e420 <USB_SetTurnaroundTime+0xbc>)
 801e39a:	4a22      	ldr	r2, [pc, #136]	@ (801e424 <USB_SetTurnaroundTime+0xc0>)
 801e39c:	440b      	add	r3, r1
 801e39e:	4293      	cmp	r3, r2
 801e3a0:	d929      	bls.n	801e3f6 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801e3a2:	4b21      	ldr	r3, [pc, #132]	@ (801e428 <USB_SetTurnaroundTime+0xc4>)
 801e3a4:	4a21      	ldr	r2, [pc, #132]	@ (801e42c <USB_SetTurnaroundTime+0xc8>)
 801e3a6:	440b      	add	r3, r1
 801e3a8:	4293      	cmp	r3, r2
 801e3aa:	d326      	bcc.n	801e3fa <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801e3ac:	4b20      	ldr	r3, [pc, #128]	@ (801e430 <USB_SetTurnaroundTime+0xcc>)
 801e3ae:	4a21      	ldr	r2, [pc, #132]	@ (801e434 <USB_SetTurnaroundTime+0xd0>)
 801e3b0:	440b      	add	r3, r1
 801e3b2:	4293      	cmp	r3, r2
 801e3b4:	d323      	bcc.n	801e3fe <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801e3b6:	4a20      	ldr	r2, [pc, #128]	@ (801e438 <USB_SetTurnaroundTime+0xd4>)
 801e3b8:	f1a1 73b7 	sub.w	r3, r1, #23986176	@ 0x16e0000
 801e3bc:	f5a3 5358 	sub.w	r3, r3, #13824	@ 0x3600
 801e3c0:	4293      	cmp	r3, r2
 801e3c2:	d31e      	bcc.n	801e402 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801e3c4:	4b1d      	ldr	r3, [pc, #116]	@ (801e43c <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x7U;
 801e3c6:	4a1e      	ldr	r2, [pc, #120]	@ (801e440 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801e3c8:	440b      	add	r3, r1
      UsbTrd = 0x7U;
 801e3ca:	4293      	cmp	r3, r2
 801e3cc:	bf2c      	ite	cs
 801e3ce:	2306      	movcs	r3, #6
 801e3d0:	2307      	movcc	r3, #7
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801e3d2:	68c2      	ldr	r2, [r0, #12]
 801e3d4:	f422 5270 	bic.w	r2, r2, #15360	@ 0x3c00
 801e3d8:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801e3da:	68c2      	ldr	r2, [r0, #12]
 801e3dc:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 801e3e0:	60c3      	str	r3, [r0, #12]
}
 801e3e2:	2000      	movs	r0, #0
 801e3e4:	4770      	bx	lr
      UsbTrd = 0xFU;
 801e3e6:	230f      	movs	r3, #15
 801e3e8:	e7f3      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 801e3ea:	230e      	movs	r3, #14
 801e3ec:	e7f1      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 801e3ee:	230d      	movs	r3, #13
 801e3f0:	e7ef      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 801e3f2:	230c      	movs	r3, #12
 801e3f4:	e7ed      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 801e3f6:	230b      	movs	r3, #11
 801e3f8:	e7eb      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 801e3fa:	230a      	movs	r3, #10
 801e3fc:	e7e9      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801e3fe:	2309      	movs	r3, #9
 801e400:	e7e7      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 801e402:	2308      	movs	r3, #8
 801e404:	e7e5      	b.n	801e3d2 <USB_SetTurnaroundTime+0x6e>
 801e406:	bf00      	nop
 801e408:	ff275340 	.word	0xff275340
 801e40c:	000c34ff 	.word	0x000c34ff
 801e410:	ff1b1e40 	.word	0xff1b1e40
 801e414:	000f423f 	.word	0x000f423f
 801e418:	00124f7f 	.word	0x00124f7f
 801e41c:	0013d620 	.word	0x0013d620
 801e420:	fee5b660 	.word	0xfee5b660
 801e424:	0016e35f 	.word	0x0016e35f
 801e428:	feced300 	.word	0xfeced300
 801e42c:	001b7740 	.word	0x001b7740
 801e430:	feb35bc0 	.word	0xfeb35bc0
 801e434:	002191c0 	.word	0x002191c0
 801e438:	00387520 	.word	0x00387520
 801e43c:	fe5954e0 	.word	0xfe5954e0
 801e440:	00419ce0 	.word	0x00419ce0

0801e444 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801e444:	6883      	ldr	r3, [r0, #8]
 801e446:	f043 0301 	orr.w	r3, r3, #1
 801e44a:	6083      	str	r3, [r0, #8]
}
 801e44c:	2000      	movs	r0, #0
 801e44e:	4770      	bx	lr

0801e450 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801e450:	6883      	ldr	r3, [r0, #8]
 801e452:	f023 0301 	bic.w	r3, r3, #1
 801e456:	6083      	str	r3, [r0, #8]
}
 801e458:	2000      	movs	r0, #0
 801e45a:	4770      	bx	lr

0801e45c <USB_SetCurrentMode>:
{
 801e45c:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801e45e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 801e460:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801e462:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 801e466:	4605      	mov	r5, r0
 801e468:	460c      	mov	r4, r1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801e46a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 801e46c:	d114      	bne.n	801e498 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801e46e:	68c3      	ldr	r3, [r0, #12]
 801e470:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801e474:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 801e476:	2400      	movs	r4, #0
      HAL_Delay(10U);
 801e478:	200a      	movs	r0, #10
 801e47a:	f7fa f95d 	bl	8018738 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 801e47e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801e480:	07d9      	lsls	r1, r3, #31
      ms += 10U;
 801e482:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801e486:	d402      	bmi.n	801e48e <USB_SetCurrentMode+0x32>
 801e488:	2cc8      	cmp	r4, #200	@ 0xc8
 801e48a:	d1f5      	bne.n	801e478 <USB_SetCurrentMode+0x1c>
      ms += 10U;
 801e48c:	24c8      	movs	r4, #200	@ 0xc8
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801e48e:	f1a4 03c8 	sub.w	r3, r4, #200	@ 0xc8
 801e492:	4258      	negs	r0, r3
 801e494:	4158      	adcs	r0, r3
}
 801e496:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 801e498:	b971      	cbnz	r1, 801e4b8 <USB_SetCurrentMode+0x5c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801e49a:	68c3      	ldr	r3, [r0, #12]
 801e49c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801e4a0:	60c3      	str	r3, [r0, #12]
      HAL_Delay(10U);
 801e4a2:	200a      	movs	r0, #10
 801e4a4:	f7fa f948 	bl	8018738 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 801e4a8:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801e4aa:	07da      	lsls	r2, r3, #31
      ms += 10U;
 801e4ac:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801e4b0:	d5ed      	bpl.n	801e48e <USB_SetCurrentMode+0x32>
 801e4b2:	2cc8      	cmp	r4, #200	@ 0xc8
 801e4b4:	d1f5      	bne.n	801e4a2 <USB_SetCurrentMode+0x46>
 801e4b6:	e7e9      	b.n	801e48c <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 801e4b8:	2001      	movs	r0, #1
 801e4ba:	e7ec      	b.n	801e496 <USB_SetCurrentMode+0x3a>

0801e4bc <USB_FlushTxFifo>:
{
 801e4bc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801e4be:	2300      	movs	r3, #0
{
 801e4c0:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 801e4c2:	9301      	str	r3, [sp, #4]
    count++;
 801e4c4:	9b01      	ldr	r3, [sp, #4]
 801e4c6:	3301      	adds	r3, #1
 801e4c8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 801e4ca:	9b01      	ldr	r3, [sp, #4]
 801e4cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801e4d0:	d815      	bhi.n	801e4fe <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801e4d2:	6913      	ldr	r3, [r2, #16]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	daf5      	bge.n	801e4c4 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e4d8:	0189      	lsls	r1, r1, #6
  count = 0U;
 801e4da:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e4dc:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 801e4e0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801e4e2:	6111      	str	r1, [r2, #16]
    count++;
 801e4e4:	9b01      	ldr	r3, [sp, #4]
 801e4e6:	3301      	adds	r3, #1
 801e4e8:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 801e4ea:	9b01      	ldr	r3, [sp, #4]
 801e4ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801e4f0:	d805      	bhi.n	801e4fe <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801e4f2:	6910      	ldr	r0, [r2, #16]
 801e4f4:	f010 0020 	ands.w	r0, r0, #32
 801e4f8:	d1f4      	bne.n	801e4e4 <USB_FlushTxFifo+0x28>
}
 801e4fa:	b002      	add	sp, #8
 801e4fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 801e4fe:	2003      	movs	r0, #3
 801e500:	e7fb      	b.n	801e4fa <USB_FlushTxFifo+0x3e>

0801e502 <USB_FlushRxFifo>:
{
 801e502:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801e504:	2300      	movs	r3, #0
{
 801e506:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 801e508:	9301      	str	r3, [sp, #4]
    count++;
 801e50a:	9b01      	ldr	r3, [sp, #4]
 801e50c:	3301      	adds	r3, #1
 801e50e:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 801e510:	9b01      	ldr	r3, [sp, #4]
 801e512:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801e516:	d813      	bhi.n	801e540 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801e518:	6913      	ldr	r3, [r2, #16]
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	daf5      	bge.n	801e50a <USB_FlushRxFifo+0x8>
  count = 0U;
 801e51e:	2300      	movs	r3, #0
 801e520:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801e522:	2310      	movs	r3, #16
 801e524:	6113      	str	r3, [r2, #16]
    count++;
 801e526:	9b01      	ldr	r3, [sp, #4]
 801e528:	3301      	adds	r3, #1
 801e52a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 801e52c:	9b01      	ldr	r3, [sp, #4]
 801e52e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801e532:	d805      	bhi.n	801e540 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801e534:	6910      	ldr	r0, [r2, #16]
 801e536:	f010 0010 	ands.w	r0, r0, #16
 801e53a:	d1f4      	bne.n	801e526 <USB_FlushRxFifo+0x24>
}
 801e53c:	b002      	add	sp, #8
 801e53e:	4770      	bx	lr
      return HAL_TIMEOUT;
 801e540:	2003      	movs	r0, #3
 801e542:	e7fb      	b.n	801e53c <USB_FlushRxFifo+0x3a>

0801e544 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 801e544:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 801e548:	4319      	orrs	r1, r3
 801e54a:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 801e54e:	2000      	movs	r0, #0
 801e550:	4770      	bx	lr
	...

0801e554 <USB_DevInit>:
{
 801e554:	b084      	sub	sp, #16
 801e556:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e55a:	4604      	mov	r4, r0
 801e55c:	a809      	add	r0, sp, #36	@ 0x24
 801e55e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 801e562:	2300      	movs	r3, #0
 801e564:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 801e568:	f89d 702e 	ldrb.w	r7, [sp, #46]	@ 0x2e
    USBx->DIEPTXF[i] = 0U;
 801e56c:	4619      	mov	r1, r3
 801e56e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 801e572:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 801e576:	3301      	adds	r3, #1
 801e578:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 801e57a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 801e57c:	d1f7      	bne.n	801e56e <USB_DevInit+0x1a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801e57e:	f504 6600 	add.w	r6, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 801e582:	2f00      	cmp	r7, #0
 801e584:	d161      	bne.n	801e64a <USB_DevInit+0xf6>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801e586:	6873      	ldr	r3, [r6, #4]
 801e588:	f043 0302 	orr.w	r3, r3, #2
 801e58c:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801e58e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e590:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801e594:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801e596:	6823      	ldr	r3, [r4, #0]
 801e598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e59c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801e59e:	6823      	ldr	r3, [r4, #0]
 801e5a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e5a4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 801e5a6:	2500      	movs	r5, #0
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801e5a8:	2103      	movs	r1, #3
  USBx_PCGCCTL = 0U;
 801e5aa:	f8c4 5e00 	str.w	r5, [r4, #3584]	@ 0xe00
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801e5ae:	4620      	mov	r0, r4
 801e5b0:	f7ff ffc8 	bl	801e544 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801e5b4:	2110      	movs	r1, #16
 801e5b6:	4620      	mov	r0, r4
 801e5b8:	f7ff ff80 	bl	801e4bc <USB_FlushTxFifo>
 801e5bc:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801e5be:	4620      	mov	r0, r4
 801e5c0:	f7ff ff9f 	bl	801e502 <USB_FlushRxFifo>
 801e5c4:	4308      	orrs	r0, r1
 801e5c6:	b2c0      	uxtb	r0, r0
 801e5c8:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 801e5ca:	6135      	str	r5, [r6, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801e5cc:	bf18      	it	ne
 801e5ce:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 801e5d0:	6175      	str	r5, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801e5d2:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 801e5d6:	61f5      	str	r5, [r6, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 801e5d8:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801e5da:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801e5de:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801e5e2:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e5e6:	45a8      	cmp	r8, r5
 801e5e8:	d834      	bhi.n	801e654 <USB_DevInit+0x100>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e5f0:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e5f2:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e5f6:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e5fa:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e5fe:	4590      	cmp	r8, r2
 801e600:	d83a      	bhi.n	801e678 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801e602:	6933      	ldr	r3, [r6, #16]
 801e604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e608:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 801e60a:	2300      	movs	r3, #0
 801e60c:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 801e60e:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 801e612:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801e614:	69a3      	ldr	r3, [r4, #24]
 801e616:	f043 0310 	orr.w	r3, r3, #16
 801e61a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801e61c:	69a2      	ldr	r2, [r4, #24]
 801e61e:	4b1f      	ldr	r3, [pc, #124]	@ (801e69c <USB_DevInit+0x148>)
 801e620:	4313      	orrs	r3, r2
 801e622:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 801e624:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 801e628:	b11b      	cbz	r3, 801e632 <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801e62a:	69a3      	ldr	r3, [r4, #24]
 801e62c:	f043 0308 	orr.w	r3, r3, #8
 801e630:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 801e632:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801e634:	bf01      	itttt	eq
 801e636:	69a3      	ldreq	r3, [r4, #24]
 801e638:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 801e63c:	f043 0304 	orreq.w	r3, r3, #4
 801e640:	61a3      	streq	r3, [r4, #24]
}
 801e642:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e646:	b004      	add	sp, #16
 801e648:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801e64a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801e64c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801e650:	63a3      	str	r3, [r4, #56]	@ 0x38
 801e652:	e7a8      	b.n	801e5a6 <USB_DevInit+0x52>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e654:	f8d3 9000 	ldr.w	r9, [r3]
 801e658:	f1b9 0f00 	cmp.w	r9, #0
 801e65c:	da0a      	bge.n	801e674 <USB_DevInit+0x120>
      if (i == 0U)
 801e65e:	b93d      	cbnz	r5, 801e670 <USB_DevInit+0x11c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801e660:	f8c3 c000 	str.w	ip, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 801e664:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e666:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801e668:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e66c:	3320      	adds	r3, #32
 801e66e:	e7ba      	b.n	801e5e6 <USB_DevInit+0x92>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801e670:	6019      	str	r1, [r3, #0]
 801e672:	e7f7      	b.n	801e664 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 801e674:	601a      	str	r2, [r3, #0]
 801e676:	e7f5      	b.n	801e664 <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e678:	f8d3 9000 	ldr.w	r9, [r3]
 801e67c:	f1b9 0f00 	cmp.w	r9, #0
 801e680:	da0a      	bge.n	801e698 <USB_DevInit+0x144>
      if (i == 0U)
 801e682:	b93a      	cbnz	r2, 801e694 <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801e684:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801e688:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e68a:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801e68c:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801e690:	3320      	adds	r3, #32
 801e692:	e7b4      	b.n	801e5fe <USB_DevInit+0xaa>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801e694:	601d      	str	r5, [r3, #0]
 801e696:	e7f7      	b.n	801e688 <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801e698:	6019      	str	r1, [r3, #0]
 801e69a:	e7f5      	b.n	801e688 <USB_DevInit+0x134>
 801e69c:	803c3800 	.word	0x803c3800

0801e6a0 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e6a0:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
    speed = 0xFU;
 801e6a4:	f013 0f02 	tst.w	r3, #2
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801e6a8:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
}
 801e6ac:	bf14      	ite	ne
 801e6ae:	2002      	movne	r0, #2
 801e6b0:	200f      	moveq	r0, #15
 801e6b2:	4770      	bx	lr

0801e6b4 <USB_ActivateEndpoint>:
{
 801e6b4:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 801e6b6:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e6b8:	2201      	movs	r2, #1
 801e6ba:	f004 050f 	and.w	r5, r4, #15
 801e6be:	40aa      	lsls	r2, r5
  if (ep->is_in == 1U)
 801e6c0:	784d      	ldrb	r5, [r1, #1]
 801e6c2:	2d01      	cmp	r5, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e6c4:	f500 6300 	add.w	r3, r0, #2048	@ 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e6c8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
  if (ep->is_in == 1U)
 801e6cc:	d119      	bne.n	801e702 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801e6ce:	69dd      	ldr	r5, [r3, #28]
 801e6d0:	432a      	orrs	r2, r5
 801e6d2:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801e6d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 801e6d8:	041a      	lsls	r2, r3, #16
 801e6da:	d410      	bmi.n	801e6fe <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e6dc:	688a      	ldr	r2, [r1, #8]
 801e6de:	f8d0 5900 	ldr.w	r5, [r0, #2304]	@ 0x900
 801e6e2:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801e6e6:	790a      	ldrb	r2, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801e6e8:	432b      	orrs	r3, r5
 801e6ea:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 801e6ee:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 801e6f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801e6f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801e6fa:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 801e6fe:	2000      	movs	r0, #0
 801e700:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801e702:	69dc      	ldr	r4, [r3, #28]
 801e704:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 801e708:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801e70a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 801e70e:	041b      	lsls	r3, r3, #16
 801e710:	d4f5      	bmi.n	801e6fe <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e712:	688b      	ldr	r3, [r1, #8]
 801e714:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 801e718:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e71c:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 801e71e:	790a      	ldrb	r2, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801e720:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 801e724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801e728:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801e72c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 801e730:	e7e5      	b.n	801e6fe <USB_ActivateEndpoint+0x4a>
	...

0801e734 <USB_DeactivateEndpoint>:
{
 801e734:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 801e736:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 801e738:	7849      	ldrb	r1, [r1, #1]
 801e73a:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e73c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 801e740:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
 801e744:	f002 020f 	and.w	r2, r2, #15
  if (ep->is_in == 1U)
 801e748:	d122      	bne.n	801e790 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e74a:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 801e74e:	2900      	cmp	r1, #0
 801e750:	da0b      	bge.n	801e76a <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801e752:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 801e756:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 801e75a:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801e75e:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 801e762:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 801e766:	f8c3 1900 	str.w	r1, [r3, #2304]	@ 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e76a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 801e76c:	2101      	movs	r1, #1
 801e76e:	fa01 f202 	lsl.w	r2, r1, r2
 801e772:	ea24 0402 	bic.w	r4, r4, r2
 801e776:	63c4      	str	r4, [r0, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801e778:	69c1      	ldr	r1, [r0, #28]
 801e77a:	ea21 0202 	bic.w	r2, r1, r2
 801e77e:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801e780:	f8d3 1900 	ldr.w	r1, [r3, #2304]	@ 0x900
 801e784:	4a14      	ldr	r2, [pc, #80]	@ (801e7d8 <USB_DeactivateEndpoint+0xa4>)
 801e786:	400a      	ands	r2, r1
 801e788:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
}
 801e78c:	2000      	movs	r0, #0
 801e78e:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e790:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 801e794:	2900      	cmp	r1, #0
 801e796:	da0b      	bge.n	801e7b0 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801e798:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 801e79c:	f041 6100 	orr.w	r1, r1, #134217728	@ 0x8000000
 801e7a0:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801e7a4:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 801e7a8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 801e7ac:	f8c3 1b00 	str.w	r1, [r3, #2816]	@ 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e7b0:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 801e7b2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801e7b6:	fa01 f202 	lsl.w	r2, r1, r2
 801e7ba:	ea24 0402 	bic.w	r4, r4, r2
 801e7be:	63c4      	str	r4, [r0, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801e7c0:	69c1      	ldr	r1, [r0, #28]
 801e7c2:	ea21 0202 	bic.w	r2, r1, r2
 801e7c6:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801e7c8:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	@ 0xb00
 801e7cc:	4a03      	ldr	r2, [pc, #12]	@ (801e7dc <USB_DeactivateEndpoint+0xa8>)
 801e7ce:	400a      	ands	r2, r1
 801e7d0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 801e7d4:	e7da      	b.n	801e78c <USB_DeactivateEndpoint+0x58>
 801e7d6:	bf00      	nop
 801e7d8:	ec337800 	.word	0xec337800
 801e7dc:	eff37800 	.word	0xeff37800

0801e7e0 <USB_EPStopXfer>:
{
 801e7e0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801e7e2:	2300      	movs	r3, #0
  if (ep->is_in == 1U)
 801e7e4:	784a      	ldrb	r2, [r1, #1]
  __IO uint32_t count = 0U;
 801e7e6:	9301      	str	r3, [sp, #4]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e7e8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 801e7ea:	2a01      	cmp	r2, #1
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e7ec:	ea4f 1343 	mov.w	r3, r3, lsl #5
  if (ep->is_in == 1U)
 801e7f0:	d11e      	bne.n	801e830 <USB_EPStopXfer+0x50>
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801e7f2:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
 801e7f6:	18c1      	adds	r1, r0, r3
 801e7f8:	58c2      	ldr	r2, [r0, r3]
 801e7fa:	2a00      	cmp	r2, #0
 801e7fc:	db02      	blt.n	801e804 <USB_EPStopXfer+0x24>
  HAL_StatusTypeDef ret = HAL_OK;
 801e7fe:	2000      	movs	r0, #0
}
 801e800:	b002      	add	sp, #8
 801e802:	4770      	bx	lr
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801e804:	58c2      	ldr	r2, [r0, r3]
 801e806:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 801e80a:	50c2      	str	r2, [r0, r3]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801e80c:	58c2      	ldr	r2, [r0, r3]
 801e80e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801e812:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 801e814:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 801e818:	9b01      	ldr	r3, [sp, #4]
 801e81a:	3301      	adds	r3, #1
 801e81c:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 801e81e:	9b01      	ldr	r3, [sp, #4]
 801e820:	4293      	cmp	r3, r2
 801e822:	d901      	bls.n	801e828 <USB_EPStopXfer+0x48>
          ret = HAL_ERROR;
 801e824:	2001      	movs	r0, #1
 801e826:	e7eb      	b.n	801e800 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801e828:	680b      	ldr	r3, [r1, #0]
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	dbf4      	blt.n	801e818 <USB_EPStopXfer+0x38>
 801e82e:	e7e6      	b.n	801e7fe <USB_EPStopXfer+0x1e>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801e830:	f500 6030 	add.w	r0, r0, #2816	@ 0xb00
 801e834:	18c1      	adds	r1, r0, r3
 801e836:	58c2      	ldr	r2, [r0, r3]
 801e838:	2a00      	cmp	r2, #0
 801e83a:	dae0      	bge.n	801e7fe <USB_EPStopXfer+0x1e>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801e83c:	58c2      	ldr	r2, [r0, r3]
 801e83e:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 801e842:	50c2      	str	r2, [r0, r3]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801e844:	58c2      	ldr	r2, [r0, r3]
 801e846:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 801e84a:	50c2      	str	r2, [r0, r3]
        if (count > 10000U)
 801e84c:	f242 7210 	movw	r2, #10000	@ 0x2710
        count++;
 801e850:	9b01      	ldr	r3, [sp, #4]
 801e852:	3301      	adds	r3, #1
 801e854:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 801e856:	9b01      	ldr	r3, [sp, #4]
 801e858:	4293      	cmp	r3, r2
 801e85a:	d8e3      	bhi.n	801e824 <USB_EPStopXfer+0x44>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801e85c:	680b      	ldr	r3, [r1, #0]
 801e85e:	2b00      	cmp	r3, #0
 801e860:	dbf6      	blt.n	801e850 <USB_EPStopXfer+0x70>
 801e862:	e7cc      	b.n	801e7fe <USB_EPStopXfer+0x1e>

0801e864 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 801e864:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801e866:	3201      	adds	r2, #1
  count32b = ((uint32_t)len + 3U) / 4U;
 801e868:	089b      	lsrs	r3, r3, #2
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801e86a:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 801e86e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (i = 0U; i < count32b; i++)
 801e872:	4299      	cmp	r1, r3
 801e874:	d101      	bne.n	801e87a <USB_WritePacket+0x16>
}
 801e876:	2000      	movs	r0, #0
 801e878:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801e87a:	f851 2b04 	ldr.w	r2, [r1], #4
 801e87e:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < count32b; i++)
 801e880:	e7f7      	b.n	801e872 <USB_WritePacket+0xe>
	...

0801e884 <USB_EPStartXfer>:
{
 801e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 801e886:	784c      	ldrb	r4, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801e888:	780a      	ldrb	r2, [r1, #0]
    if (ep->xfer_len == 0U)
 801e88a:	690b      	ldr	r3, [r1, #16]
        if (ep->type == EP_TYPE_ISOC)
 801e88c:	790f      	ldrb	r7, [r1, #4]
 801e88e:	f8df c174 	ldr.w	ip, [pc, #372]	@ 801ea04 <USB_EPStartXfer+0x180>
 801e892:	f8df e174 	ldr.w	lr, [pc, #372]	@ 801ea08 <USB_EPStartXfer+0x184>
  if (ep->is_in == 1U)
 801e896:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e898:	eb00 1642 	add.w	r6, r0, r2, lsl #5
  if (ep->is_in == 1U)
 801e89c:	d169      	bne.n	801e972 <USB_EPStartXfer+0xee>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e89e:	f506 6510 	add.w	r5, r6, #2304	@ 0x900
    if (ep->xfer_len == 0U)
 801e8a2:	bb03      	cbnz	r3, 801e8e6 <USB_EPStartXfer+0x62>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e8a4:	692b      	ldr	r3, [r5, #16]
 801e8a6:	ea03 030c 	and.w	r3, r3, ip
 801e8aa:	612b      	str	r3, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e8ac:	692b      	ldr	r3, [r5, #16]
 801e8ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e8b2:	612b      	str	r3, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e8b4:	692b      	ldr	r3, [r5, #16]
 801e8b6:	ea03 030e 	and.w	r3, r3, lr
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e8ba:	612b      	str	r3, [r5, #16]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e8bc:	f8d6 3900 	ldr.w	r3, [r6, #2304]	@ 0x900
    if (ep->type != EP_TYPE_ISOC)
 801e8c0:	2f01      	cmp	r7, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801e8c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801e8c6:	f8c6 3900 	str.w	r3, [r6, #2304]	@ 0x900
      if (ep->xfer_len > 0U)
 801e8ca:	690b      	ldr	r3, [r1, #16]
    if (ep->type != EP_TYPE_ISOC)
 801e8cc:	d03f      	beq.n	801e94e <USB_EPStartXfer+0xca>
      if (ep->xfer_len > 0U)
 801e8ce:	b143      	cbz	r3, 801e8e2 <USB_EPStartXfer+0x5e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801e8d0:	f8d0 1834 	ldr.w	r1, [r0, #2100]	@ 0x834
 801e8d4:	f002 020f 	and.w	r2, r2, #15
 801e8d8:	2301      	movs	r3, #1
 801e8da:	4093      	lsls	r3, r2
 801e8dc:	430b      	orrs	r3, r1
 801e8de:	f8c0 3834 	str.w	r3, [r0, #2100]	@ 0x834
}
 801e8e2:	2000      	movs	r0, #0
 801e8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801e8e6:	692c      	ldr	r4, [r5, #16]
 801e8e8:	ea04 040e 	and.w	r4, r4, lr
 801e8ec:	612c      	str	r4, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801e8ee:	692c      	ldr	r4, [r5, #16]
 801e8f0:	ea04 040c 	and.w	r4, r4, ip
 801e8f4:	612c      	str	r4, [r5, #16]
        if (ep->xfer_len > ep->maxpacket)
 801e8f6:	f8d1 c008 	ldr.w	ip, [r1, #8]
      if (epnum == 0U)
 801e8fa:	b96a      	cbnz	r2, 801e918 <USB_EPStartXfer+0x94>
        if (ep->xfer_len > ep->maxpacket)
 801e8fc:	459c      	cmp	ip, r3
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e8fe:	692b      	ldr	r3, [r5, #16]
          ep->xfer_len = ep->maxpacket;
 801e900:	bf38      	it	cc
 801e902:	f8c1 c010 	strcc.w	ip, [r1, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801e906:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 801e90a:	612b      	str	r3, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801e90c:	690b      	ldr	r3, [r1, #16]
 801e90e:	692c      	ldr	r4, [r5, #16]
 801e910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801e914:	4323      	orrs	r3, r4
 801e916:	e7d0      	b.n	801e8ba <USB_EPStartXfer+0x36>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e918:	eb0c 0403 	add.w	r4, ip, r3
 801e91c:	3c01      	subs	r4, #1
 801e91e:	fbb4 f4fc 	udiv	r4, r4, ip
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 801e922:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 801ea00 <USB_EPStartXfer+0x17c>
 801e926:	f8d5 e010 	ldr.w	lr, [r5, #16]
 801e92a:	b2a3      	uxth	r3, r4
 801e92c:	ea0c 44c4 	and.w	r4, ip, r4, lsl #19
 801e930:	ea44 040e 	orr.w	r4, r4, lr
        if (ep->type == EP_TYPE_ISOC)
 801e934:	2f01      	cmp	r7, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 801e936:	612c      	str	r4, [r5, #16]
        if (ep->type == EP_TYPE_ISOC)
 801e938:	d1e8      	bne.n	801e90c <USB_EPStartXfer+0x88>
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801e93a:	692c      	ldr	r4, [r5, #16]
 801e93c:	f024 44c0 	bic.w	r4, r4, #1610612736	@ 0x60000000
 801e940:	612c      	str	r4, [r5, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 801e942:	692c      	ldr	r4, [r5, #16]
 801e944:	075b      	lsls	r3, r3, #29
 801e946:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801e94a:	4323      	orrs	r3, r4
 801e94c:	e7dd      	b.n	801e90a <USB_EPStartXfer+0x86>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e94e:	f8d0 4808 	ldr.w	r4, [r0, #2056]	@ 0x808
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 801e952:	68c9      	ldr	r1, [r1, #12]
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e954:	f414 7f80 	tst.w	r4, #256	@ 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801e958:	f8d6 4900 	ldr.w	r4, [r6, #2304]	@ 0x900
 801e95c:	bf0c      	ite	eq
 801e95e:	f044 5400 	orreq.w	r4, r4, #536870912	@ 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801e962:	f044 5480 	orrne.w	r4, r4, #268435456	@ 0x10000000
 801e966:	f8c6 4900 	str.w	r4, [r6, #2304]	@ 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 801e96a:	b29b      	uxth	r3, r3
 801e96c:	f7ff ff7a 	bl	801e864 <USB_WritePacket>
 801e970:	e7b7      	b.n	801e8e2 <USB_EPStartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e972:	f8d6 4b10 	ldr.w	r4, [r6, #2832]	@ 0xb10
 801e976:	ea04 040e 	and.w	r4, r4, lr
 801e97a:	f8c6 4b10 	str.w	r4, [r6, #2832]	@ 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e97e:	f8d6 4b10 	ldr.w	r4, [r6, #2832]	@ 0xb10
 801e982:	ea04 040c 	and.w	r4, r4, ip
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801e986:	f506 6530 	add.w	r5, r6, #2816	@ 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801e98a:	612c      	str	r4, [r5, #16]
        ep->xfer_len = ep->maxpacket;
 801e98c:	688c      	ldr	r4, [r1, #8]
    if (epnum == 0U)
 801e98e:	bb0a      	cbnz	r2, 801e9d4 <USB_EPStartXfer+0x150>
      if (ep->xfer_len > 0U)
 801e990:	b103      	cbz	r3, 801e994 <USB_EPStartXfer+0x110>
        ep->xfer_len = ep->maxpacket;
 801e992:	610c      	str	r4, [r1, #16]
      ep->xfer_size = ep->maxpacket;
 801e994:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801e996:	692b      	ldr	r3, [r5, #16]
 801e998:	f3c4 0412 	ubfx	r4, r4, #0, #19
 801e99c:	431c      	orrs	r4, r3
 801e99e:	612c      	str	r4, [r5, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801e9a0:	692b      	ldr	r3, [r5, #16]
 801e9a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e9a6:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 801e9a8:	2f01      	cmp	r7, #1
 801e9aa:	d10c      	bne.n	801e9c6 <USB_EPStartXfer+0x142>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801e9ac:	f8d0 3808 	ldr.w	r3, [r0, #2056]	@ 0x808
 801e9b0:	f413 7f80 	tst.w	r3, #256	@ 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801e9b4:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
 801e9b8:	bf0c      	ite	eq
 801e9ba:	f043 5300 	orreq.w	r3, r3, #536870912	@ 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801e9be:	f043 5380 	orrne.w	r3, r3, #268435456	@ 0x10000000
 801e9c2:	f8c6 3b00 	str.w	r3, [r6, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801e9c6:	f8d6 3b00 	ldr.w	r3, [r6, #2816]	@ 0xb00
 801e9ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801e9ce:	f8c6 3b00 	str.w	r3, [r6, #2816]	@ 0xb00
 801e9d2:	e786      	b.n	801e8e2 <USB_EPStartXfer+0x5e>
      if (ep->xfer_len == 0U)
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	d0de      	beq.n	801e996 <USB_EPStartXfer+0x112>
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801e9d8:	4423      	add	r3, r4
 801e9da:	3b01      	subs	r3, #1
 801e9dc:	fbb3 f3f4 	udiv	r3, r3, r4
 801e9e0:	b29b      	uxth	r3, r3
        ep->xfer_size = ep->maxpacket * pktcnt;
 801e9e2:	435c      	muls	r4, r3
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e9e4:	4a06      	ldr	r2, [pc, #24]	@ (801ea00 <USB_EPStartXfer+0x17c>)
        ep->xfer_size = ep->maxpacket * pktcnt;
 801e9e6:	620c      	str	r4, [r1, #32]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801e9e8:	6929      	ldr	r1, [r5, #16]
 801e9ea:	ea02 43c3 	and.w	r3, r2, r3, lsl #19
 801e9ee:	430b      	orrs	r3, r1
 801e9f0:	612b      	str	r3, [r5, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801e9f2:	692b      	ldr	r3, [r5, #16]
 801e9f4:	f3c4 0412 	ubfx	r4, r4, #0, #19
 801e9f8:	431c      	orrs	r4, r3
 801e9fa:	612c      	str	r4, [r5, #16]
 801e9fc:	e7d4      	b.n	801e9a8 <USB_EPStartXfer+0x124>
 801e9fe:	bf00      	nop
 801ea00:	1ff80000 	.word	0x1ff80000
 801ea04:	e007ffff 	.word	0xe007ffff
 801ea08:	fff80000 	.word	0xfff80000

0801ea0c <USB_ReadPacket>:
{
 801ea0c:	4603      	mov	r3, r0
 801ea0e:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 801ea10:	2000      	movs	r0, #0
  uint32_t count32b = (uint32_t)len >> 2U;
 801ea12:	0894      	lsrs	r4, r2, #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ea14:	f503 5580 	add.w	r5, r3, #4096	@ 0x1000
  uint16_t remaining_bytes = len % 4U;
 801ea18:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 801ea1c:	42a0      	cmp	r0, r4
 801ea1e:	d310      	bcc.n	801ea42 <USB_ReadPacket+0x36>
 801ea20:	eb01 0084 	add.w	r0, r1, r4, lsl #2
  if (remaining_bytes != 0U)
 801ea24:	b162      	cbz	r2, 801ea40 <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801ea26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ea2a:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 801ea2c:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801ea2e:	00d9      	lsls	r1, r3, #3
 801ea30:	fa24 f101 	lsr.w	r1, r4, r1
 801ea34:	54c1      	strb	r1, [r0, r3]
      i++;
 801ea36:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 801ea38:	b299      	uxth	r1, r3
 801ea3a:	428a      	cmp	r2, r1
 801ea3c:	d1f7      	bne.n	801ea2e <USB_ReadPacket+0x22>
 801ea3e:	4410      	add	r0, r2
}
 801ea40:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801ea42:	682e      	ldr	r6, [r5, #0]
 801ea44:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
  for (i = 0U; i < count32b; i++)
 801ea48:	3001      	adds	r0, #1
 801ea4a:	e7e7      	b.n	801ea1c <USB_ReadPacket+0x10>

0801ea4c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 801ea4c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801ea4e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 801ea50:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ea52:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801ea56:	d112      	bne.n	801ea7e <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ea58:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
 801ea5c:	2a00      	cmp	r2, #0
 801ea5e:	db06      	blt.n	801ea6e <USB_EPSetStall+0x22>
 801ea60:	b12b      	cbz	r3, 801ea6e <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801ea62:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 801ea66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801ea6a:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801ea6e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 801ea72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801ea76:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 801ea7a:	2000      	movs	r0, #0
 801ea7c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801ea7e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 801ea82:	2a00      	cmp	r2, #0
 801ea84:	db06      	blt.n	801ea94 <USB_EPSetStall+0x48>
 801ea86:	b12b      	cbz	r3, 801ea94 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801ea88:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 801ea8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801ea90:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801ea94:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	@ 0xb00
 801ea98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801ea9c:	f8c0 3b00 	str.w	r3, [r0, #2816]	@ 0xb00
 801eaa0:	e7eb      	b.n	801ea7a <USB_EPSetStall+0x2e>

0801eaa2 <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801eaa2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 801eaa4:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801eaa6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eaaa:	790b      	ldrb	r3, [r1, #4]
  if (ep->is_in == 1U)
 801eaac:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eaae:	f1a3 0302 	sub.w	r3, r3, #2
 801eab2:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 801eab4:	d10f      	bne.n	801ead6 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801eab6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eaba:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801eabc:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 801eac0:	f8c0 2900 	str.w	r2, [r0, #2304]	@ 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eac4:	d805      	bhi.n	801ead2 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801eac6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 801eaca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801eace:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
}
 801ead2:	2000      	movs	r0, #0
 801ead4:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ead6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 801eada:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801eade:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801eae0:	f8c0 2b00 	str.w	r2, [r0, #2816]	@ 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801eae4:	bf9e      	ittt	ls
 801eae6:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	@ 0xb00
 801eaea:	f043 5380 	orrls.w	r3, r3, #268435456	@ 0x10000000
 801eaee:	f8c0 3b00 	strls.w	r3, [r0, #2816]	@ 0xb00
 801eaf2:	e7ee      	b.n	801ead2 <USB_EPClearStall+0x30>

0801eaf4 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801eaf4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 801eaf8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801eafc:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801eb00:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 801eb04:	0109      	lsls	r1, r1, #4
 801eb06:	f401 61fe 	and.w	r1, r1, #2032	@ 0x7f0
 801eb0a:	4319      	orrs	r1, r3
 801eb0c:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 801eb10:	2000      	movs	r0, #0
 801eb12:	4770      	bx	lr

0801eb14 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801eb14:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 801eb18:	f023 0303 	bic.w	r3, r3, #3
 801eb1c:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801eb20:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 801eb24:	f023 0302 	bic.w	r3, r3, #2
 801eb28:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 801eb2c:	2000      	movs	r0, #0
 801eb2e:	4770      	bx	lr

0801eb30 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801eb30:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 801eb34:	f023 0303 	bic.w	r3, r3, #3
 801eb38:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801eb3c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 801eb40:	f043 0302 	orr.w	r3, r3, #2
 801eb44:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 801eb48:	2000      	movs	r0, #0
 801eb4a:	4770      	bx	lr

0801eb4c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 801eb4c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 801eb4e:	6980      	ldr	r0, [r0, #24]
}
 801eb50:	4010      	ands	r0, r2
 801eb52:	4770      	bx	lr

0801eb54 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 801eb54:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 801eb58:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801eb5c:	69c0      	ldr	r0, [r0, #28]
 801eb5e:	4018      	ands	r0, r3
}
 801eb60:	0c00      	lsrs	r0, r0, #16
 801eb62:	4770      	bx	lr

0801eb64 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 801eb64:	f8d0 3818 	ldr.w	r3, [r0, #2072]	@ 0x818
 801eb68:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801eb6c:	69c0      	ldr	r0, [r0, #28]
 801eb6e:	4018      	ands	r0, r3
}
 801eb70:	b280      	uxth	r0, r0
 801eb72:	4770      	bx	lr

0801eb74 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801eb74:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801eb78:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801eb7c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	@ 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801eb80:	6940      	ldr	r0, [r0, #20]
}
 801eb82:	4010      	ands	r0, r2
 801eb84:	4770      	bx	lr

0801eb86 <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 801eb86:	f8d0 2810 	ldr.w	r2, [r0, #2064]	@ 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 801eb8a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	@ 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801eb8e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801eb92:	f001 010f 	and.w	r1, r1, #15
 801eb96:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801eb98:	f500 6010 	add.w	r0, r0, #2304	@ 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801eb9c:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801eb9e:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	4313      	orrs	r3, r2
}
 801eba4:	4018      	ands	r0, r3
 801eba6:	4770      	bx	lr

0801eba8 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 801eba8:	6940      	ldr	r0, [r0, #20]
}
 801ebaa:	f000 0001 	and.w	r0, r0, #1
 801ebae:	4770      	bx	lr

0801ebb0 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801ebb0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	@ 0x900
 801ebb4:	f36f 030a 	bfc	r3, #0, #11
 801ebb8:	f8c0 3900 	str.w	r3, [r0, #2304]	@ 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801ebbc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 801ebc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ebc4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 801ebc8:	2000      	movs	r0, #0
 801ebca:	4770      	bx	lr

0801ebcc <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801ebcc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801ebce:	4a0c      	ldr	r2, [pc, #48]	@ (801ec00 <USB_EP0_OutStart+0x34>)
 801ebd0:	4291      	cmp	r1, r2
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ebd2:	f500 6330 	add.w	r3, r0, #2816	@ 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801ebd6:	d903      	bls.n	801ebe0 <USB_EP0_OutStart+0x14>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801ebd8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	@ 0xb00
 801ebdc:	2a00      	cmp	r2, #0
 801ebde:	db0d      	blt.n	801ebfc <USB_EP0_OutStart+0x30>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801ebe0:	2200      	movs	r2, #0
 801ebe2:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ebe4:	691a      	ldr	r2, [r3, #16]
 801ebe6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 801ebea:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801ebec:	691a      	ldr	r2, [r3, #16]
 801ebee:	f042 0218 	orr.w	r2, r2, #24
 801ebf2:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801ebf4:	691a      	ldr	r2, [r3, #16]
 801ebf6:	f042 42c0 	orr.w	r2, r2, #1610612736	@ 0x60000000
 801ebfa:	611a      	str	r2, [r3, #16]
}
 801ebfc:	2000      	movs	r0, #0
 801ebfe:	4770      	bx	lr
 801ec00:	4f54300a 	.word	0x4f54300a

0801ec04 <clear_CAN_tx_data>:
void clear_CAN_tx_data()
{
	uint8_t i;

	for(i=0;i<8;++i)
		can_tx_data[i] = 0xFF;
 801ec04:	4b02      	ldr	r3, [pc, #8]	@ (801ec10 <clear_CAN_tx_data+0xc>)
 801ec06:	f04f 32ff 	mov.w	r2, #4294967295
 801ec0a:	601a      	str	r2, [r3, #0]
 801ec0c:	605a      	str	r2, [r3, #4]
}
 801ec0e:	4770      	bx	lr
 801ec10:	20001de4 	.word	0x20001de4

0801ec14 <CAN_transmit_coms>:
//    Parameters:
//       none
//
////////////////////////////////////////////////////////////////////////
void CAN_transmit_coms()
{
 801ec14:	b538      	push	{r3, r4, r5, lr}
	 //Transmit 29 bit message at 50mS rate
     if(can_tx_timer == 0 && HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 801ec16:	4da0      	ldr	r5, [pc, #640]	@ (801ee98 <CAN_transmit_coms+0x284>)
 801ec18:	882c      	ldrh	r4, [r5, #0]
 801ec1a:	b9f4      	cbnz	r4, 801ec5a <CAN_transmit_coms+0x46>
 801ec1c:	489f      	ldr	r0, [pc, #636]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ec1e:	f7fa fc0d 	bl	801943c <HAL_CAN_GetTxMailboxesFreeLevel>
 801ec22:	b1d0      	cbz	r0, 801ec5a <CAN_transmit_coms+0x46>
	 {
		can_tx_timer = 50;

		CAN_tx_header.IDE=CAN_ID_EXT; 							//set identifier to extended
 801ec24:	499e      	ldr	r1, [pc, #632]	@ (801eea0 <CAN_transmit_coms+0x28c>)

		can_tx_data[0] = 0x00;
		can_tx_data[1] = 0x11;
		can_tx_data[2] = 0x22;

		if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ec26:	489d      	ldr	r0, [pc, #628]	@ (801ee9c <CAN_transmit_coms+0x288>)
		can_tx_timer = 50;
 801ec28:	2332      	movs	r3, #50	@ 0x32
 801ec2a:	802b      	strh	r3, [r5, #0]
		CAN_tx_header.IDE=CAN_ID_EXT; 							//set identifier to extended
 801ec2c:	2304      	movs	r3, #4
 801ec2e:	608b      	str	r3, [r1, #8]
		CAN_tx_header.DLC=8; 									//set message data length (0-8)
 801ec30:	2308      	movs	r3, #8
		CAN_tx_header.RTR=CAN_RTR_DATA; 						//set data type to DATA
 801ec32:	e9c1 4303 	strd	r4, r3, [r1, #12]
		CAN_tx_header.ExtId=0x18FEF100 + CAN_SOURCE_ADDRESS;	//set message identifier (29 bits)
 801ec36:	4b9b      	ldr	r3, [pc, #620]	@ (801eea4 <CAN_transmit_coms+0x290>)
 801ec38:	604b      	str	r3, [r1, #4]
		clear_CAN_tx_data();
 801ec3a:	f7ff ffe3 	bl	801ec04 <clear_CAN_tx_data>
		can_tx_data[0] = 0x00;
 801ec3e:	4a9a      	ldr	r2, [pc, #616]	@ (801eea8 <CAN_transmit_coms+0x294>)
		can_tx_data[1] = 0x11;
 801ec40:	2311      	movs	r3, #17
 801ec42:	7053      	strb	r3, [r2, #1]
		can_tx_data[2] = 0x22;
 801ec44:	2322      	movs	r3, #34	@ 0x22
 801ec46:	7093      	strb	r3, [r2, #2]
		if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ec48:	4b98      	ldr	r3, [pc, #608]	@ (801eeac <CAN_transmit_coms+0x298>)
		can_tx_data[0] = 0x00;
 801ec4a:	7014      	strb	r4, [r2, #0]
		if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ec4c:	f7fa fbab 	bl	80193a6 <HAL_CAN_AddTxMessage>
 801ec50:	b918      	cbnz	r0, 801ec5a <CAN_transmit_coms+0x46>
			//Error_Handler ();
		}
		else
		{
			//Successful TX
			++can_tx_count;
 801ec52:	4a97      	ldr	r2, [pc, #604]	@ (801eeb0 <CAN_transmit_coms+0x29c>)
 801ec54:	6813      	ldr	r3, [r2, #0]
 801ec56:	3301      	adds	r3, #1
 801ec58:	6013      	str	r3, [r2, #0]
		}
	 }

     //Transmit PGN 66521 message at 100mS rate
     if(can_tx_timer2 == 0 && HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 801ec5a:	4d96      	ldr	r5, [pc, #600]	@ (801eeb4 <CAN_transmit_coms+0x2a0>)
 801ec5c:	882c      	ldrh	r4, [r5, #0]
 801ec5e:	2c00      	cmp	r4, #0
 801ec60:	d132      	bne.n	801ecc8 <CAN_transmit_coms+0xb4>
 801ec62:	488e      	ldr	r0, [pc, #568]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ec64:	f7fa fbea 	bl	801943c <HAL_CAN_GetTxMailboxesFreeLevel>
 801ec68:	2800      	cmp	r0, #0
 801ec6a:	d02d      	beq.n	801ecc8 <CAN_transmit_coms+0xb4>
     	{
     		can_tx_timer2 = 100;

     		CAN_tx_header.IDE=CAN_ID_EXT; 							//set identifier to extended
 801ec6c:	498c      	ldr	r1, [pc, #560]	@ (801eea0 <CAN_transmit_coms+0x28c>)
     		can_tx_data[4] = TrailerRaisetest;
     		can_tx_data[5] = TrailerLowertest;
     		can_tx_data[6] = TrailerLatchtest;
     		can_tx_data[7] = TrailerTraystate;

     		if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ec6e:	488b      	ldr	r0, [pc, #556]	@ (801ee9c <CAN_transmit_coms+0x288>)
     		can_tx_timer2 = 100;
 801ec70:	2364      	movs	r3, #100	@ 0x64
 801ec72:	802b      	strh	r3, [r5, #0]
     		CAN_tx_header.IDE=CAN_ID_EXT; 							//set identifier to extended
 801ec74:	2304      	movs	r3, #4
 801ec76:	608b      	str	r3, [r1, #8]
     		CAN_tx_header.DLC=8; 									//set message data length (0-8)
 801ec78:	2308      	movs	r3, #8
     		CAN_tx_header.RTR=CAN_RTR_DATA; 						//set data type to DATA
 801ec7a:	e9c1 4303 	strd	r4, r3, [r1, #12]
     		CAN_tx_header.ExtId=0x18FFF100 + CAN_SOURCE_ADDRESS;	//set message identifier (29 bits)
 801ec7e:	4b8e      	ldr	r3, [pc, #568]	@ (801eeb8 <CAN_transmit_coms+0x2a4>)
 801ec80:	604b      	str	r3, [r1, #4]
     		clear_CAN_tx_data();
 801ec82:	f7ff ffbf 	bl	801ec04 <clear_CAN_tx_data>
     		can_tx_data[0] = Raisetest;	// Byte 1: 0x01 as requested
 801ec86:	4b8d      	ldr	r3, [pc, #564]	@ (801eebc <CAN_transmit_coms+0x2a8>)
 801ec88:	4a87      	ldr	r2, [pc, #540]	@ (801eea8 <CAN_transmit_coms+0x294>)
 801ec8a:	781b      	ldrb	r3, [r3, #0]
 801ec8c:	7013      	strb	r3, [r2, #0]
     		can_tx_data[1] = Lowertest;	// Byte 2: 0x01 as requested
 801ec8e:	4b8c      	ldr	r3, [pc, #560]	@ (801eec0 <CAN_transmit_coms+0x2ac>)
 801ec90:	781b      	ldrb	r3, [r3, #0]
 801ec92:	7053      	strb	r3, [r2, #1]
     		can_tx_data[2] = Latchtest;
 801ec94:	4b8b      	ldr	r3, [pc, #556]	@ (801eec4 <CAN_transmit_coms+0x2b0>)
 801ec96:	781b      	ldrb	r3, [r3, #0]
 801ec98:	7093      	strb	r3, [r2, #2]
     		can_tx_data[3] = Traystate;
 801ec9a:	4b8b      	ldr	r3, [pc, #556]	@ (801eec8 <CAN_transmit_coms+0x2b4>)
 801ec9c:	781b      	ldrb	r3, [r3, #0]
 801ec9e:	70d3      	strb	r3, [r2, #3]
     		can_tx_data[4] = TrailerRaisetest;
 801eca0:	4b8a      	ldr	r3, [pc, #552]	@ (801eecc <CAN_transmit_coms+0x2b8>)
 801eca2:	781b      	ldrb	r3, [r3, #0]
 801eca4:	7113      	strb	r3, [r2, #4]
     		can_tx_data[5] = TrailerLowertest;
 801eca6:	4b8a      	ldr	r3, [pc, #552]	@ (801eed0 <CAN_transmit_coms+0x2bc>)
 801eca8:	781b      	ldrb	r3, [r3, #0]
 801ecaa:	7153      	strb	r3, [r2, #5]
     		can_tx_data[6] = TrailerLatchtest;
 801ecac:	4b89      	ldr	r3, [pc, #548]	@ (801eed4 <CAN_transmit_coms+0x2c0>)
 801ecae:	781b      	ldrb	r3, [r3, #0]
 801ecb0:	7193      	strb	r3, [r2, #6]
     		can_tx_data[7] = TrailerTraystate;
 801ecb2:	4b89      	ldr	r3, [pc, #548]	@ (801eed8 <CAN_transmit_coms+0x2c4>)
 801ecb4:	781b      	ldrb	r3, [r3, #0]
 801ecb6:	71d3      	strb	r3, [r2, #7]
     		if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ecb8:	4b7c      	ldr	r3, [pc, #496]	@ (801eeac <CAN_transmit_coms+0x298>)
 801ecba:	f7fa fb74 	bl	80193a6 <HAL_CAN_AddTxMessage>
 801ecbe:	b918      	cbnz	r0, 801ecc8 <CAN_transmit_coms+0xb4>
     			//Error_Handler ();
     		}
     		else
     		{
     			//Successful TX
     			++can_tx_count;
 801ecc0:	4a7b      	ldr	r2, [pc, #492]	@ (801eeb0 <CAN_transmit_coms+0x29c>)
 801ecc2:	6813      	ldr	r3, [r2, #0]
 801ecc4:	3301      	adds	r3, #1
 801ecc6:	6013      	str	r3, [r2, #0]
     		}
     	 }
         // NEW: TouchGFX Settings transmission - PGN 65522 (0xFFF2) at 1000ms rate
         if(can_tx_timer3 == 0 && HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 801ecc8:	4d84      	ldr	r5, [pc, #528]	@ (801eedc <CAN_transmit_coms+0x2c8>)
 801ecca:	882c      	ldrh	r4, [r5, #0]
 801eccc:	2c00      	cmp	r4, #0
 801ecce:	d13b      	bne.n	801ed48 <CAN_transmit_coms+0x134>
 801ecd0:	4872      	ldr	r0, [pc, #456]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ecd2:	f7fa fbb3 	bl	801943c <HAL_CAN_GetTxMailboxesFreeLevel>
 801ecd6:	2800      	cmp	r0, #0
 801ecd8:	d036      	beq.n	801ed48 <CAN_transmit_coms+0x134>
         {
             can_tx_timer3 = 1000;

             CAN_tx_header.IDE=CAN_ID_EXT;
 801ecda:	4971      	ldr	r1, [pc, #452]	@ (801eea0 <CAN_transmit_coms+0x28c>)
             CAN_tx_header.ExtId=0x18FFF200 + CAN_SOURCE_ADDRESS;

             clear_CAN_tx_data();

             // Byte 0: Vehicle Type (single byte, max value is 1)
             can_tx_data[0] = (uint8_t)S35_config[TOUCHGFX_VEHICLETYPE];
 801ecdc:	4880      	ldr	r0, [pc, #512]	@ (801eee0 <CAN_transmit_coms+0x2cc>)
             can_tx_timer3 = 1000;
 801ecde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801ece2:	802b      	strh	r3, [r5, #0]
             CAN_tx_header.IDE=CAN_ID_EXT;
 801ece4:	2304      	movs	r3, #4
 801ece6:	608b      	str	r3, [r1, #8]
             CAN_tx_header.DLC=8;
 801ece8:	2308      	movs	r3, #8
             CAN_tx_header.RTR=CAN_RTR_DATA;
 801ecea:	e9c1 4303 	strd	r4, r3, [r1, #12]
             CAN_tx_header.ExtId=0x18FFF200 + CAN_SOURCE_ADDRESS;
 801ecee:	4b7d      	ldr	r3, [pc, #500]	@ (801eee4 <CAN_transmit_coms+0x2d0>)
 801ecf0:	604b      	str	r3, [r1, #4]
             clear_CAN_tx_data();
 801ecf2:	f7ff ff87 	bl	801ec04 <clear_CAN_tx_data>
             can_tx_data[0] = (uint8_t)S35_config[TOUCHGFX_VEHICLETYPE];
 801ecf6:	4b7c      	ldr	r3, [pc, #496]	@ (801eee8 <CAN_transmit_coms+0x2d4>)
 801ecf8:	8800      	ldrh	r0, [r0, #0]
 801ecfa:	4a6b      	ldr	r2, [pc, #428]	@ (801eea8 <CAN_transmit_coms+0x294>)
 801ecfc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ed00:	7010      	strb	r0, [r2, #0]

             // Byte 1-2: Truck Max (2 bytes, default 400)
             can_tx_data[1] = (uint8_t)(S35_config[TOUCHGFX_TRUCKMAX] & 0xFF);        // Low byte
 801ed02:	487a      	ldr	r0, [pc, #488]	@ (801eeec <CAN_transmit_coms+0x2d8>)
 801ed04:	8800      	ldrh	r0, [r0, #0]
 801ed06:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ed0a:	7050      	strb	r0, [r2, #1]
             can_tx_data[2] = (uint8_t)((S35_config[TOUCHGFX_TRUCKMAX] >> 8) & 0xFF); // High byte
 801ed0c:	0a00      	lsrs	r0, r0, #8
 801ed0e:	7090      	strb	r0, [r2, #2]

             // Byte 3: Truck Min (single byte, max value 100)
             can_tx_data[3] = (uint8_t)S35_config[TOUCHGFX_TRUCKMIN];
 801ed10:	4877      	ldr	r0, [pc, #476]	@ (801eef0 <CAN_transmit_coms+0x2dc>)
 801ed12:	8800      	ldrh	r0, [r0, #0]
 801ed14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ed18:	70d0      	strb	r0, [r2, #3]

             // Byte 4-5: Trailer Max (2 bytes, default 400)
             can_tx_data[4] = (uint8_t)(S35_config[TOUCHGFX_TRAILERMAX] & 0xFF);        // Low byte
 801ed1a:	4876      	ldr	r0, [pc, #472]	@ (801eef4 <CAN_transmit_coms+0x2e0>)
 801ed1c:	8800      	ldrh	r0, [r0, #0]
 801ed1e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ed22:	7110      	strb	r0, [r2, #4]
             can_tx_data[5] = (uint8_t)((S35_config[TOUCHGFX_TRAILERMAX] >> 8) & 0xFF); // High byte
 801ed24:	0a00      	lsrs	r0, r0, #8
 801ed26:	7150      	strb	r0, [r2, #5]

             // Byte 6: Trailer Min (single byte, max value 100)
             can_tx_data[6] = (uint8_t)S35_config[TOUCHGFX_TRAILERMIN];
 801ed28:	4873      	ldr	r0, [pc, #460]	@ (801eef8 <CAN_transmit_coms+0x2e4>)
 801ed2a:	8800      	ldrh	r0, [r0, #0]
 801ed2c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 801ed30:	7193      	strb	r3, [r2, #6]

             // Byte 7: Reserved for future use
             can_tx_data[7] = 0xFF;
 801ed32:	23ff      	movs	r3, #255	@ 0xff
 801ed34:	71d3      	strb	r3, [r2, #7]

             if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ed36:	4859      	ldr	r0, [pc, #356]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ed38:	4b5c      	ldr	r3, [pc, #368]	@ (801eeac <CAN_transmit_coms+0x298>)
 801ed3a:	f7fa fb34 	bl	80193a6 <HAL_CAN_AddTxMessage>
 801ed3e:	b918      	cbnz	r0, 801ed48 <CAN_transmit_coms+0x134>
             {
                 //Error_Handler ();
             }
             else
             {
                 ++can_tx_count;
 801ed40:	4a5b      	ldr	r2, [pc, #364]	@ (801eeb0 <CAN_transmit_coms+0x29c>)
 801ed42:	6813      	ldr	r3, [r2, #0]
 801ed44:	3301      	adds	r3, #1
 801ed46:	6013      	str	r3, [r2, #0]
             }
         }

         // NEW: Pressure Settings transmission - PGN 65523 (0xFFF3) at 1000ms rate
         if(can_tx_timer4 == 0 && HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 801ed48:	4d6c      	ldr	r5, [pc, #432]	@ (801eefc <CAN_transmit_coms+0x2e8>)
 801ed4a:	882c      	ldrh	r4, [r5, #0]
 801ed4c:	2c00      	cmp	r4, #0
 801ed4e:	d138      	bne.n	801edc2 <CAN_transmit_coms+0x1ae>
 801ed50:	4852      	ldr	r0, [pc, #328]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ed52:	f7fa fb73 	bl	801943c <HAL_CAN_GetTxMailboxesFreeLevel>
 801ed56:	2800      	cmp	r0, #0
 801ed58:	d033      	beq.n	801edc2 <CAN_transmit_coms+0x1ae>
         {
             can_tx_timer4 = 1000;

             CAN_tx_header.IDE=CAN_ID_EXT;
 801ed5a:	4951      	ldr	r1, [pc, #324]	@ (801eea0 <CAN_transmit_coms+0x28c>)
             can_tx_timer4 = 1000;
 801ed5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801ed60:	802b      	strh	r3, [r5, #0]
             CAN_tx_header.IDE=CAN_ID_EXT;
 801ed62:	2304      	movs	r3, #4
 801ed64:	608b      	str	r3, [r1, #8]
             CAN_tx_header.DLC=8;
 801ed66:	2308      	movs	r3, #8
             CAN_tx_header.RTR=CAN_RTR_DATA;
 801ed68:	e9c1 4303 	strd	r4, r3, [r1, #12]
             // PGN 65523 (0xFFF3) with source address
             CAN_tx_header.ExtId=0x18FFF300 + CAN_SOURCE_ADDRESS;
 801ed6c:	4b64      	ldr	r3, [pc, #400]	@ (801ef00 <CAN_transmit_coms+0x2ec>)
 801ed6e:	604b      	str	r3, [r1, #4]

             clear_CAN_tx_data();
 801ed70:	f7ff ff48 	bl	801ec04 <clear_CAN_tx_data>

             // Byte 0-1: Lowered Setpoint (2 bytes, default 50)
             can_tx_data[0] = (uint8_t)(S35_config[TOUCHGFX_TRUCK_LOWERED] & 0xFF);        // Low byte
 801ed74:	4a63      	ldr	r2, [pc, #396]	@ (801ef04 <CAN_transmit_coms+0x2f0>)
 801ed76:	4b5c      	ldr	r3, [pc, #368]	@ (801eee8 <CAN_transmit_coms+0x2d4>)
 801ed78:	8812      	ldrh	r2, [r2, #0]
 801ed7a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ed7e:	4a4a      	ldr	r2, [pc, #296]	@ (801eea8 <CAN_transmit_coms+0x294>)
 801ed80:	7010      	strb	r0, [r2, #0]
             can_tx_data[1] = (uint8_t)((S35_config[TOUCHGFX_TRUCK_LOWERED] >> 8) & 0xFF); // High byte
 801ed82:	0a00      	lsrs	r0, r0, #8
 801ed84:	7050      	strb	r0, [r2, #1]

             // Byte 2-3: Raised Setpoint (2 bytes, default 280)
             can_tx_data[2] = (uint8_t)(S35_config[TOUCHGFX_TRUCK_RAISED] & 0xFF);        // Low byte
 801ed86:	4860      	ldr	r0, [pc, #384]	@ (801ef08 <CAN_transmit_coms+0x2f4>)
 801ed88:	8800      	ldrh	r0, [r0, #0]
 801ed8a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ed8e:	7090      	strb	r0, [r2, #2]
             can_tx_data[3] = (uint8_t)((S35_config[TOUCHGFX_TRUCK_RAISED] >> 8) & 0xFF); // High byte
 801ed90:	0a00      	lsrs	r0, r0, #8
 801ed92:	70d0      	strb	r0, [r2, #3]

             // Byte 4-5: Overload Setpoint (2 bytes, default 380)
             can_tx_data[4] = (uint8_t)(S35_config[TOUCHGFX_TRUCK_OVERLOAD] & 0xFF);        // Low byte
 801ed94:	485d      	ldr	r0, [pc, #372]	@ (801ef0c <CAN_transmit_coms+0x2f8>)
 801ed96:	8800      	ldrh	r0, [r0, #0]
 801ed98:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ed9c:	7110      	strb	r0, [r2, #4]
             can_tx_data[5] = (uint8_t)((S35_config[TOUCHGFX_TRUCK_OVERLOAD] >> 8) & 0xFF); // High byte
 801ed9e:	0a00      	lsrs	r0, r0, #8
 801eda0:	7150      	strb	r0, [r2, #5]

             // Byte 6-7: Emergency Setpoint (2 bytes, default 395)
             can_tx_data[6] = (uint8_t)(S35_config[TOUCHGFX_TRUCK_EMERGENCY] & 0xFF);        // Low byte
 801eda2:	485b      	ldr	r0, [pc, #364]	@ (801ef10 <CAN_transmit_coms+0x2fc>)
 801eda4:	8800      	ldrh	r0, [r0, #0]
 801eda6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 801edaa:	7193      	strb	r3, [r2, #6]
             can_tx_data[7] = (uint8_t)((S35_config[TOUCHGFX_TRUCK_EMERGENCY] >> 8) & 0xFF); // High byte
 801edac:	0a1b      	lsrs	r3, r3, #8
 801edae:	71d3      	strb	r3, [r2, #7]

             if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801edb0:	483a      	ldr	r0, [pc, #232]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801edb2:	4b3e      	ldr	r3, [pc, #248]	@ (801eeac <CAN_transmit_coms+0x298>)
 801edb4:	f7fa faf7 	bl	80193a6 <HAL_CAN_AddTxMessage>
 801edb8:	b918      	cbnz	r0, 801edc2 <CAN_transmit_coms+0x1ae>
             {
                 //Error_Handler ();
             }
             else
             {
                 ++can_tx_count;
 801edba:	4a3d      	ldr	r2, [pc, #244]	@ (801eeb0 <CAN_transmit_coms+0x29c>)
 801edbc:	6813      	ldr	r3, [r2, #0]
 801edbe:	3301      	adds	r3, #1
 801edc0:	6013      	str	r3, [r2, #0]
             }
         }
         // NEW: Trailer Pressure Settings transmission - PGN 65524 (0xFFF4) at 1000ms rate
         if(can_tx_timer5 == 0 && HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 801edc2:	4d54      	ldr	r5, [pc, #336]	@ (801ef14 <CAN_transmit_coms+0x300>)
 801edc4:	882c      	ldrh	r4, [r5, #0]
 801edc6:	2c00      	cmp	r4, #0
 801edc8:	d138      	bne.n	801ee3c <CAN_transmit_coms+0x228>
 801edca:	4834      	ldr	r0, [pc, #208]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801edcc:	f7fa fb36 	bl	801943c <HAL_CAN_GetTxMailboxesFreeLevel>
 801edd0:	2800      	cmp	r0, #0
 801edd2:	d033      	beq.n	801ee3c <CAN_transmit_coms+0x228>
         {
             can_tx_timer5 = 1000;

             CAN_tx_header.IDE=CAN_ID_EXT;
 801edd4:	4932      	ldr	r1, [pc, #200]	@ (801eea0 <CAN_transmit_coms+0x28c>)
             can_tx_timer5 = 1000;
 801edd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801edda:	802b      	strh	r3, [r5, #0]
             CAN_tx_header.IDE=CAN_ID_EXT;
 801eddc:	2304      	movs	r3, #4
 801edde:	608b      	str	r3, [r1, #8]
             CAN_tx_header.DLC=8;
 801ede0:	2308      	movs	r3, #8
             CAN_tx_header.RTR=CAN_RTR_DATA;
 801ede2:	e9c1 4303 	strd	r4, r3, [r1, #12]
             // PGN 65524 (0xFFF4) with source address
             CAN_tx_header.ExtId=0x18FFF400 + CAN_SOURCE_ADDRESS;
 801ede6:	4b4c      	ldr	r3, [pc, #304]	@ (801ef18 <CAN_transmit_coms+0x304>)
 801ede8:	604b      	str	r3, [r1, #4]

             clear_CAN_tx_data();
 801edea:	f7ff ff0b 	bl	801ec04 <clear_CAN_tx_data>

             // Byte 0-1: Trailer Lowered Setpoint (2 bytes, default 50)
             can_tx_data[0] = (uint8_t)(S35_config[TOUCHGFX_TRAILER_LOWERED] & 0xFF);        // Low byte
 801edee:	4a4b      	ldr	r2, [pc, #300]	@ (801ef1c <CAN_transmit_coms+0x308>)
 801edf0:	4b3d      	ldr	r3, [pc, #244]	@ (801eee8 <CAN_transmit_coms+0x2d4>)
 801edf2:	8812      	ldrh	r2, [r2, #0]
 801edf4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801edf8:	4a2b      	ldr	r2, [pc, #172]	@ (801eea8 <CAN_transmit_coms+0x294>)
 801edfa:	7010      	strb	r0, [r2, #0]
             can_tx_data[1] = (uint8_t)((S35_config[TOUCHGFX_TRAILER_LOWERED] >> 8) & 0xFF); // High byte
 801edfc:	0a00      	lsrs	r0, r0, #8
 801edfe:	7050      	strb	r0, [r2, #1]

             // Byte 2-3: Trailer Raised Setpoint (2 bytes, default 280)
             can_tx_data[2] = (uint8_t)(S35_config[TOUCHGFX_TRAILER_RAISED] & 0xFF);        // Low byte
 801ee00:	4847      	ldr	r0, [pc, #284]	@ (801ef20 <CAN_transmit_coms+0x30c>)
 801ee02:	8800      	ldrh	r0, [r0, #0]
 801ee04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ee08:	7090      	strb	r0, [r2, #2]
             can_tx_data[3] = (uint8_t)((S35_config[TOUCHGFX_TRAILER_RAISED] >> 8) & 0xFF); // High byte
 801ee0a:	0a00      	lsrs	r0, r0, #8
 801ee0c:	70d0      	strb	r0, [r2, #3]

             // Byte 4-5: Trailer Overload Setpoint (2 bytes, default 380)
             can_tx_data[4] = (uint8_t)(S35_config[TOUCHGFX_TRAILER_OVERLOAD] & 0xFF);        // Low byte
 801ee0e:	4845      	ldr	r0, [pc, #276]	@ (801ef24 <CAN_transmit_coms+0x310>)
 801ee10:	8800      	ldrh	r0, [r0, #0]
 801ee12:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ee16:	7110      	strb	r0, [r2, #4]
             can_tx_data[5] = (uint8_t)((S35_config[TOUCHGFX_TRAILER_OVERLOAD] >> 8) & 0xFF); // High byte
 801ee18:	0a00      	lsrs	r0, r0, #8
 801ee1a:	7150      	strb	r0, [r2, #5]

             // Byte 6-7: Trailer Emergency Setpoint (2 bytes, default 395)
             can_tx_data[6] = (uint8_t)(S35_config[TOUCHGFX_TRAILER_EMERGENCY] & 0xFF);        // Low byte
 801ee1c:	4842      	ldr	r0, [pc, #264]	@ (801ef28 <CAN_transmit_coms+0x314>)
 801ee1e:	8800      	ldrh	r0, [r0, #0]
 801ee20:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 801ee24:	7193      	strb	r3, [r2, #6]
             can_tx_data[7] = (uint8_t)((S35_config[TOUCHGFX_TRAILER_EMERGENCY] >> 8) & 0xFF); // High byte
 801ee26:	0a1b      	lsrs	r3, r3, #8
 801ee28:	71d3      	strb	r3, [r2, #7]

             if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ee2a:	481c      	ldr	r0, [pc, #112]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ee2c:	4b1f      	ldr	r3, [pc, #124]	@ (801eeac <CAN_transmit_coms+0x298>)
 801ee2e:	f7fa faba 	bl	80193a6 <HAL_CAN_AddTxMessage>
 801ee32:	b918      	cbnz	r0, 801ee3c <CAN_transmit_coms+0x228>
             {
                 //Error_Handler ();
             }
             else
             {
                 ++can_tx_count;
 801ee34:	4a1e      	ldr	r2, [pc, #120]	@ (801eeb0 <CAN_transmit_coms+0x29c>)
 801ee36:	6813      	ldr	r3, [r2, #0]
 801ee38:	3301      	adds	r3, #1
 801ee3a:	6013      	str	r3, [r2, #0]
             }
         }
         if(can_tx_timer6 == 0 && HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0)
 801ee3c:	4d3b      	ldr	r5, [pc, #236]	@ (801ef2c <CAN_transmit_coms+0x318>)
 801ee3e:	882c      	ldrh	r4, [r5, #0]
 801ee40:	bb4c      	cbnz	r4, 801ee96 <CAN_transmit_coms+0x282>
 801ee42:	4816      	ldr	r0, [pc, #88]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ee44:	f7fa fafa 	bl	801943c <HAL_CAN_GetTxMailboxesFreeLevel>
 801ee48:	b328      	cbz	r0, 801ee96 <CAN_transmit_coms+0x282>
         {
             can_tx_timer6 = 100;

             CAN_tx_header.IDE=CAN_ID_EXT;
 801ee4a:	4915      	ldr	r1, [pc, #84]	@ (801eea0 <CAN_transmit_coms+0x28c>)
             // PGN 66522 (0x1040A) with source address
             CAN_tx_header.ExtId=0x18FFF500 + CAN_SOURCE_ADDRESS;

             clear_CAN_tx_data();

             can_tx_data[0] = S35_config[TOUCHGFX_ANGLE];   // Byte 1: Trailer raise command
 801ee4c:	4838      	ldr	r0, [pc, #224]	@ (801ef30 <CAN_transmit_coms+0x31c>)
             can_tx_timer6 = 100;
 801ee4e:	2364      	movs	r3, #100	@ 0x64
 801ee50:	802b      	strh	r3, [r5, #0]
             CAN_tx_header.IDE=CAN_ID_EXT;
 801ee52:	2304      	movs	r3, #4
 801ee54:	608b      	str	r3, [r1, #8]
             CAN_tx_header.DLC=8;
 801ee56:	2308      	movs	r3, #8
             CAN_tx_header.RTR=CAN_RTR_DATA;
 801ee58:	e9c1 4303 	strd	r4, r3, [r1, #12]
             CAN_tx_header.ExtId=0x18FFF500 + CAN_SOURCE_ADDRESS;
 801ee5c:	4b35      	ldr	r3, [pc, #212]	@ (801ef34 <CAN_transmit_coms+0x320>)
 801ee5e:	604b      	str	r3, [r1, #4]
             clear_CAN_tx_data();
 801ee60:	f7ff fed0 	bl	801ec04 <clear_CAN_tx_data>
             can_tx_data[0] = S35_config[TOUCHGFX_ANGLE];   // Byte 1: Trailer raise command
 801ee64:	4b20      	ldr	r3, [pc, #128]	@ (801eee8 <CAN_transmit_coms+0x2d4>)
 801ee66:	8800      	ldrh	r0, [r0, #0]
 801ee68:	4a0f      	ldr	r2, [pc, #60]	@ (801eea8 <CAN_transmit_coms+0x294>)
 801ee6a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ee6e:	7010      	strb	r0, [r2, #0]
             can_tx_data[1] =  S35_config[TOUCHGFX_INCLO_BUBBLE];   // Byte 2: Trailer lower command
 801ee70:	4831      	ldr	r0, [pc, #196]	@ (801ef38 <CAN_transmit_coms+0x324>)
 801ee72:	8800      	ldrh	r0, [r0, #0]
 801ee74:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801ee78:	7050      	strb	r0, [r2, #1]
             can_tx_data[2] = S35_config[TOUCHGFX_PRESSURE_BUBBLE];   // Byte 3: Trailer latch command
 801ee7a:	4830      	ldr	r0, [pc, #192]	@ (801ef3c <CAN_transmit_coms+0x328>)
 801ee7c:	8800      	ldrh	r0, [r0, #0]
 801ee7e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 801ee82:	7093      	strb	r3, [r2, #2]
             //can_tx_data[3] = TrailerTraystate;   // Byte 4: Trailer state

             if (HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_header, can_tx_data, &CAN_tx_mailbox) != HAL_OK)
 801ee84:	4805      	ldr	r0, [pc, #20]	@ (801ee9c <CAN_transmit_coms+0x288>)
 801ee86:	4b09      	ldr	r3, [pc, #36]	@ (801eeac <CAN_transmit_coms+0x298>)
 801ee88:	f7fa fa8d 	bl	80193a6 <HAL_CAN_AddTxMessage>
 801ee8c:	b918      	cbnz	r0, 801ee96 <CAN_transmit_coms+0x282>
             {
                 //Error_Handler ();
             }
             else
             {
                 ++can_tx_count;
 801ee8e:	4a08      	ldr	r2, [pc, #32]	@ (801eeb0 <CAN_transmit_coms+0x29c>)
 801ee90:	6813      	ldr	r3, [r2, #0]
 801ee92:	3301      	adds	r3, #1
 801ee94:	6013      	str	r3, [r2, #0]
             }
         }

}
 801ee96:	bd38      	pop	{r3, r4, r5, pc}
 801ee98:	20001ed6 	.word	0x20001ed6
 801ee9c:	20001c10 	.word	0x20001c10
 801eea0:	20001df0 	.word	0x20001df0
 801eea4:	18fef17b 	.word	0x18fef17b
 801eea8:	20001de4 	.word	0x20001de4
 801eeac:	20001dec 	.word	0x20001dec
 801eeb0:	20001dd4 	.word	0x20001dd4
 801eeb4:	20001ed4 	.word	0x20001ed4
 801eeb8:	18fff17b 	.word	0x18fff17b
 801eebc:	20001da0 	.word	0x20001da0
 801eec0:	20001d9f 	.word	0x20001d9f
 801eec4:	20001d9e 	.word	0x20001d9e
 801eec8:	20001d9d 	.word	0x20001d9d
 801eecc:	20001d9c 	.word	0x20001d9c
 801eed0:	20001d9b 	.word	0x20001d9b
 801eed4:	20001d9a 	.word	0x20001d9a
 801eed8:	20001d99 	.word	0x20001d99
 801eedc:	20001ed2 	.word	0x20001ed2
 801eee0:	08041e68 	.word	0x08041e68
 801eee4:	18fff27b 	.word	0x18fff27b
 801eee8:	20001e72 	.word	0x20001e72
 801eeec:	08041e64 	.word	0x08041e64
 801eef0:	08041e62 	.word	0x08041e62
 801eef4:	08041e60 	.word	0x08041e60
 801eef8:	08041e5e 	.word	0x08041e5e
 801eefc:	20001ed0 	.word	0x20001ed0
 801ef00:	18fff37b 	.word	0x18fff37b
 801ef04:	08041e5c 	.word	0x08041e5c
 801ef08:	08041e5a 	.word	0x08041e5a
 801ef0c:	08041e58 	.word	0x08041e58
 801ef10:	08041e56 	.word	0x08041e56
 801ef14:	20001ece 	.word	0x20001ece
 801ef18:	18fff47b 	.word	0x18fff47b
 801ef1c:	08041e54 	.word	0x08041e54
 801ef20:	08041e52 	.word	0x08041e52
 801ef24:	08041e50 	.word	0x08041e50
 801ef28:	08041e4e 	.word	0x08041e4e
 801ef2c:	20001ecc 	.word	0x20001ecc
 801ef30:	08041e4c 	.word	0x08041e4c
 801ef34:	18fff57b 	.word	0x18fff57b
 801ef38:	08041e4a 	.word	0x08041e4a
 801ef3c:	08041e48 	.word	0x08041e48

0801ef40 <CAN_receive_coms>:
//    Parameters:
//       none
//
////////////////////////////////////////////////////////////////////////
void CAN_receive_coms()
{
 801ef40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
				j1939EngineLoad = can_rx_data[2];
				break;
			case 0xF013:
				//SPN 3318: Pitch Angle
	            uint16_t newRoll = make16(can_rx_data[3], can_rx_data[2]);
	            newRoll *= 0.002;
 801ef44:	a79e      	add	r7, pc, #632	@ (adr r7, 801f1c0 <CAN_receive_coms+0x280>)
 801ef46:	e9d7 6700 	ldrd	r6, r7, [r7]
	while(can_fifo_in_pointer != can_fifo_out_pointer)
 801ef4a:	4d7d      	ldr	r5, [pc, #500]	@ (801f140 <CAN_receive_coms+0x200>)
 801ef4c:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 801f1c8 <CAN_receive_coms+0x288>
 801ef50:	f898 3000 	ldrb.w	r3, [r8]
 801ef54:	782a      	ldrb	r2, [r5, #0]
 801ef56:	4293      	cmp	r3, r2
 801ef58:	4b7a      	ldr	r3, [pc, #488]	@ (801f144 <CAN_receive_coms+0x204>)
 801ef5a:	d123      	bne.n	801efa4 <CAN_receive_coms+0x64>
	}

	//////////////////////////////
	// Check for CAN RX timeout //
	//////////////////////////////
	if(can_rx_timer == 0)
 801ef5c:	881b      	ldrh	r3, [r3, #0]
 801ef5e:	b9fb      	cbnz	r3, 801efa0 <CAN_receive_coms+0x60>
	{
		//RX timeout:
		j1939EngineSpeed = 0xFFFF;
 801ef60:	4a79      	ldr	r2, [pc, #484]	@ (801f148 <CAN_receive_coms+0x208>)
 801ef62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ef66:	8013      	strh	r3, [r2, #0]
		j1939EngineOilPressure = 0xFFFF;
 801ef68:	4a78      	ldr	r2, [pc, #480]	@ (801f14c <CAN_receive_coms+0x20c>)
 801ef6a:	8013      	strh	r3, [r2, #0]
		j1939EngineCoolantTemp = 0xFFFF;
 801ef6c:	4a78      	ldr	r2, [pc, #480]	@ (801f150 <CAN_receive_coms+0x210>)
 801ef6e:	8013      	strh	r3, [r2, #0]
		j1939EngineLoad = 0xFFFF;
 801ef70:	4a78      	ldr	r2, [pc, #480]	@ (801f154 <CAN_receive_coms+0x214>)
 801ef72:	8013      	strh	r3, [r2, #0]
		j1939Pitch = 0xFFFF;
 801ef74:	4a78      	ldr	r2, [pc, #480]	@ (801f158 <CAN_receive_coms+0x218>)
 801ef76:	8013      	strh	r3, [r2, #0]
		j1939Roll = 0xFFFF;
 801ef78:	4a78      	ldr	r2, [pc, #480]	@ (801f15c <CAN_receive_coms+0x21c>)
 801ef7a:	8013      	strh	r3, [r2, #0]
		j1939PTOStatus = 0xFFFF;
 801ef7c:	4a78      	ldr	r2, [pc, #480]	@ (801f160 <CAN_receive_coms+0x220>)
 801ef7e:	8013      	strh	r3, [r2, #0]
		j1939EStopStatus = 0xFFFF;
 801ef80:	4a78      	ldr	r2, [pc, #480]	@ (801f164 <CAN_receive_coms+0x224>)
 801ef82:	8013      	strh	r3, [r2, #0]
		//j1939Truck_Latched = 0xFFFF;
		//j1939Truck_Lowered = 0xFFFF;
		//j1939Truck_Moving = 0xFFFF;
		//j1939Truck_Raised = 0xFFFF;
		j1939PTO_Disabled = 0xFFFF;
 801ef84:	4a78      	ldr	r2, [pc, #480]	@ (801f168 <CAN_receive_coms+0x228>)
 801ef86:	8013      	strh	r3, [r2, #0]
		j1939EStop_Active = 0xFFFF;
 801ef88:	4a78      	ldr	r2, [pc, #480]	@ (801f16c <CAN_receive_coms+0x22c>)
 801ef8a:	8013      	strh	r3, [r2, #0]
		j1939Angle_Exceeded = 0xFFFF;
 801ef8c:	4a78      	ldr	r2, [pc, #480]	@ (801f170 <CAN_receive_coms+0x230>)
 801ef8e:	8013      	strh	r3, [r2, #0]
		j1939Truck_Press = 0xFFFF;
 801ef90:	4a78      	ldr	r2, [pc, #480]	@ (801f174 <CAN_receive_coms+0x234>)
 801ef92:	8013      	strh	r3, [r2, #0]
		j1939TruckProximity = 0xFFFF;
 801ef94:	4a78      	ldr	r2, [pc, #480]	@ (801f178 <CAN_receive_coms+0x238>)
 801ef96:	8013      	strh	r3, [r2, #0]
		j1939Trailer_Press = 0xFFFF;
 801ef98:	4a78      	ldr	r2, [pc, #480]	@ (801f17c <CAN_receive_coms+0x23c>)
 801ef9a:	8013      	strh	r3, [r2, #0]
		j1939TrailerProximity = 0xFFFF;
 801ef9c:	4a78      	ldr	r2, [pc, #480]	@ (801f180 <CAN_receive_coms+0x240>)
 801ef9e:	8013      	strh	r3, [r2, #0]
	}
}
 801efa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		can_rx_timer = CAN_RX_TIMEOUT;
 801efa4:	2164      	movs	r1, #100	@ 0x64
 801efa6:	8019      	strh	r1, [r3, #0]
		++can_rx_count;
 801efa8:	4976      	ldr	r1, [pc, #472]	@ (801f184 <CAN_receive_coms+0x244>)
 801efaa:	4877      	ldr	r0, [pc, #476]	@ (801f188 <CAN_receive_coms+0x248>)
 801efac:	680b      	ldr	r3, [r1, #0]
 801efae:	3301      	adds	r3, #1
 801efb0:	600b      	str	r3, [r1, #0]
		can_rx_Dlen = can_fifo_dlen[can_fifo_out_pointer];			//Message data length
 801efb2:	4b76      	ldr	r3, [pc, #472]	@ (801f18c <CAN_receive_coms+0x24c>)
 801efb4:	4976      	ldr	r1, [pc, #472]	@ (801f190 <CAN_receive_coms+0x250>)
 801efb6:	f813 e002 	ldrb.w	lr, [r3, r2]
		j1939PGN = ((can_fifo_arbid[can_fifo_out_pointer] & 0x00FFFF00) / 0x100);
 801efba:	4b76      	ldr	r3, [pc, #472]	@ (801f194 <CAN_receive_coms+0x254>)
 801efbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801efc0:	4604      	mov	r4, r0
 801efc2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801efc6:	f3c3 230f 	ubfx	r3, r3, #8, #16
		for(i=0;i<can_rx_Dlen;++i)
 801efca:	2100      	movs	r1, #0
 801efcc:	fa5f fc81 	uxtb.w	ip, r1
 801efd0:	45e6      	cmp	lr, ip
 801efd2:	d81a      	bhi.n	801f00a <CAN_receive_coms+0xca>
		switch(j1939PGN)
 801efd4:	f64f 62ef 	movw	r2, #65263	@ 0xfeef
 801efd8:	4293      	cmp	r3, r2
 801efda:	d039      	beq.n	801f050 <CAN_receive_coms+0x110>
 801efdc:	d823      	bhi.n	801f026 <CAN_receive_coms+0xe6>
 801efde:	f24f 0213 	movw	r2, #61459	@ 0xf013
 801efe2:	4293      	cmp	r3, r2
 801efe4:	d03d      	beq.n	801f062 <CAN_receive_coms+0x122>
 801efe6:	d816      	bhi.n	801f016 <CAN_receive_coms+0xd6>
 801efe8:	f24f 0203 	movw	r2, #61443	@ 0xf003
 801efec:	4293      	cmp	r3, r2
 801efee:	d034      	beq.n	801f05a <CAN_receive_coms+0x11a>
 801eff0:	f24f 0204 	movw	r2, #61444	@ 0xf004
 801eff4:	4293      	cmp	r3, r2
 801eff6:	d023      	beq.n	801f040 <CAN_receive_coms+0x100>
		if(++can_fifo_out_pointer >= CAN_FIFO_DEPTH)
 801eff8:	782b      	ldrb	r3, [r5, #0]
 801effa:	3301      	adds	r3, #1
 801effc:	b2db      	uxtb	r3, r3
 801effe:	2b07      	cmp	r3, #7
 801f000:	702b      	strb	r3, [r5, #0]
 801f002:	d9a5      	bls.n	801ef50 <CAN_receive_coms+0x10>
			can_fifo_out_pointer = 0;
 801f004:	2300      	movs	r3, #0
 801f006:	702b      	strb	r3, [r5, #0]
 801f008:	e7a0      	b.n	801ef4c <CAN_receive_coms+0xc>
			can_rx_data[i] = can_fifo_data[can_fifo_out_pointer][i];	//Message data
 801f00a:	f812 cb01 	ldrb.w	ip, [r2], #1
 801f00e:	f800 cb01 	strb.w	ip, [r0], #1
		for(i=0;i<can_rx_Dlen;++i)
 801f012:	3101      	adds	r1, #1
 801f014:	e7da      	b.n	801efcc <CAN_receive_coms+0x8c>
		switch(j1939PGN)
 801f016:	f64f 62ee 	movw	r2, #65262	@ 0xfeee
 801f01a:	4293      	cmp	r3, r2
 801f01c:	d1ec      	bne.n	801eff8 <CAN_receive_coms+0xb8>
				j1939EngineCoolantTemp -= 40;		//j1939 offset
 801f01e:	7823      	ldrb	r3, [r4, #0]
 801f020:	4a4b      	ldr	r2, [pc, #300]	@ (801f150 <CAN_receive_coms+0x210>)
 801f022:	3b28      	subs	r3, #40	@ 0x28
 801f024:	e017      	b.n	801f056 <CAN_receive_coms+0x116>
		switch(j1939PGN)
 801f026:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 801f02a:	f1a3 0216 	sub.w	r2, r3, #22
 801f02e:	2a03      	cmp	r2, #3
 801f030:	d8e2      	bhi.n	801eff8 <CAN_receive_coms+0xb8>
 801f032:	3b17      	subs	r3, #23
 801f034:	2b02      	cmp	r3, #2
 801f036:	d830      	bhi.n	801f09a <CAN_receive_coms+0x15a>
 801f038:	e8df f003 	tbb	[pc, r3]
 801f03c:	5d4c      	.short	0x5d4c
 801f03e:	6e          	.byte	0x6e
 801f03f:	00          	.byte	0x00
				j1939EngineSpeed = make16(can_rx_data[4], can_rx_data[3]);
 801f040:	78e1      	ldrb	r1, [r4, #3]
 801f042:	7920      	ldrb	r0, [r4, #4]
 801f044:	f000 fa3a 	bl	801f4bc <make16>
				j1939EngineSpeed /= 8;				//J1939 scaling
 801f048:	4b3f      	ldr	r3, [pc, #252]	@ (801f148 <CAN_receive_coms+0x208>)
 801f04a:	08c0      	lsrs	r0, r0, #3
				j1939Trailer_Press = make16(can_rx_data[4], can_rx_data[3]);
 801f04c:	8018      	strh	r0, [r3, #0]
				break;
 801f04e:	e7d3      	b.n	801eff8 <CAN_receive_coms+0xb8>
				j1939EngineOilPressure = can_rx_data[3];
 801f050:	78e3      	ldrb	r3, [r4, #3]
				j1939EngineOilPressure *= 4;		//j1939 scaling
 801f052:	4a3e      	ldr	r2, [pc, #248]	@ (801f14c <CAN_receive_coms+0x20c>)
 801f054:	009b      	lsls	r3, r3, #2
			    j1939Trailer_Raised = (can_rx_data[0] & 0x08) ? 1 : 0;
 801f056:	8013      	strh	r3, [r2, #0]
 801f058:	e7ce      	b.n	801eff8 <CAN_receive_coms+0xb8>
				j1939EngineLoad = can_rx_data[2];
 801f05a:	4b3e      	ldr	r3, [pc, #248]	@ (801f154 <CAN_receive_coms+0x214>)
 801f05c:	78a2      	ldrb	r2, [r4, #2]
 801f05e:	801a      	strh	r2, [r3, #0]
				break;
 801f060:	e7ca      	b.n	801eff8 <CAN_receive_coms+0xb8>
	            uint16_t newRoll = make16(can_rx_data[3], can_rx_data[2]);
 801f062:	78a1      	ldrb	r1, [r4, #2]
 801f064:	78e0      	ldrb	r0, [r4, #3]
 801f066:	f000 fa29 	bl	801f4bc <make16>
	            newRoll *= 0.002;
 801f06a:	f7f6 fb83 	bl	8015774 <__aeabi_i2d>
 801f06e:	4632      	mov	r2, r6
 801f070:	463b      	mov	r3, r7
 801f072:	f7f6 fbe9 	bl	8015848 <__aeabi_dmul>
 801f076:	f7f6 febf 	bl	8015df8 <__aeabi_d2uiz>
	            if (abs((int16_t)newRoll - (int16_t)j1939Roll) > 1)
 801f07a:	4b38      	ldr	r3, [pc, #224]	@ (801f15c <CAN_receive_coms+0x21c>)
 801f07c:	f9b3 1000 	ldrsh.w	r1, [r3]
	            newRoll *= 0.002;
 801f080:	b282      	uxth	r2, r0
	            if (abs((int16_t)newRoll - (int16_t)j1939Roll) > 1)
 801f082:	b200      	sxth	r0, r0
 801f084:	1a40      	subs	r0, r0, r1
 801f086:	2800      	cmp	r0, #0
 801f088:	bfb8      	it	lt
 801f08a:	4240      	neglt	r0, r0
 801f08c:	2801      	cmp	r0, #1
 801f08e:	ddb3      	ble.n	801eff8 <CAN_receive_coms+0xb8>
	                j1939Roll = newRoll;
 801f090:	801a      	strh	r2, [r3, #0]
	                can_data_updated = 1;
 801f092:	4b41      	ldr	r3, [pc, #260]	@ (801f198 <CAN_receive_coms+0x258>)
 801f094:	2201      	movs	r2, #1
 801f096:	701a      	strb	r2, [r3, #0]
 801f098:	e7ae      	b.n	801eff8 <CAN_receive_coms+0xb8>
				j1939PTOStatus = (can_rx_data[0] & 0x01) ? 1 : 0;
 801f09a:	7823      	ldrb	r3, [r4, #0]
 801f09c:	4a30      	ldr	r2, [pc, #192]	@ (801f160 <CAN_receive_coms+0x220>)
				j1939Truck_Press = make16(can_rx_data[2], can_rx_data[1]);
 801f09e:	78a0      	ldrb	r0, [r4, #2]
				j1939PTOStatus = (can_rx_data[0] & 0x01) ? 1 : 0;
 801f0a0:	f003 0101 	and.w	r1, r3, #1
 801f0a4:	8011      	strh	r1, [r2, #0]
				j1939EStopStatus = (can_rx_data[0] & 0x02) ? 1 : 0;
 801f0a6:	4a2f      	ldr	r2, [pc, #188]	@ (801f164 <CAN_receive_coms+0x224>)
 801f0a8:	f3c3 0140 	ubfx	r1, r3, #1, #1
 801f0ac:	8011      	strh	r1, [r2, #0]
				j1939TruckProximity = (can_rx_data[0] & 0x04) ? 1 : 0;
 801f0ae:	4a32      	ldr	r2, [pc, #200]	@ (801f178 <CAN_receive_coms+0x238>)
 801f0b0:	f3c3 0180 	ubfx	r1, r3, #2, #1
 801f0b4:	8011      	strh	r1, [r2, #0]
				j1939TrailerProximity = (can_rx_data[0] & 0x08) ? 1 : 0;
 801f0b6:	4a32      	ldr	r2, [pc, #200]	@ (801f180 <CAN_receive_coms+0x240>)
				j1939Truck_Press = make16(can_rx_data[2], can_rx_data[1]);
 801f0b8:	7861      	ldrb	r1, [r4, #1]
				j1939TrailerProximity = (can_rx_data[0] & 0x08) ? 1 : 0;
 801f0ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f0be:	8013      	strh	r3, [r2, #0]
				j1939Truck_Press = make16(can_rx_data[2], can_rx_data[1]);
 801f0c0:	f000 f9fc 	bl	801f4bc <make16>
 801f0c4:	4b2b      	ldr	r3, [pc, #172]	@ (801f174 <CAN_receive_coms+0x234>)
				j1939Trailer_Press = make16(can_rx_data[4], can_rx_data[3]);
 801f0c6:	78e1      	ldrb	r1, [r4, #3]
				j1939Truck_Press = make16(can_rx_data[2], can_rx_data[1]);
 801f0c8:	8018      	strh	r0, [r3, #0]
				j1939Trailer_Press = make16(can_rx_data[4], can_rx_data[3]);
 801f0ca:	7920      	ldrb	r0, [r4, #4]
 801f0cc:	f000 f9f6 	bl	801f4bc <make16>
 801f0d0:	4b2a      	ldr	r3, [pc, #168]	@ (801f17c <CAN_receive_coms+0x23c>)
 801f0d2:	e7bb      	b.n	801f04c <CAN_receive_coms+0x10c>
				j1939Truck_Latched = (can_rx_data[0] & 0x01) ? 1 : 0;
 801f0d4:	7823      	ldrb	r3, [r4, #0]
 801f0d6:	4a31      	ldr	r2, [pc, #196]	@ (801f19c <CAN_receive_coms+0x25c>)
 801f0d8:	f003 0101 	and.w	r1, r3, #1
 801f0dc:	8011      	strh	r1, [r2, #0]
				j1939Truck_Lowered = (can_rx_data[0] & 0x02) ? 1 : 0;
 801f0de:	4a30      	ldr	r2, [pc, #192]	@ (801f1a0 <CAN_receive_coms+0x260>)
 801f0e0:	f3c3 0140 	ubfx	r1, r3, #1, #1
 801f0e4:	8011      	strh	r1, [r2, #0]
				j1939Truck_Moving = (can_rx_data[0] & 0x04) ? 1 : 0;
 801f0e6:	4a2f      	ldr	r2, [pc, #188]	@ (801f1a4 <CAN_receive_coms+0x264>)
 801f0e8:	f3c3 0180 	ubfx	r1, r3, #2, #1
 801f0ec:	8011      	strh	r1, [r2, #0]
				j1939Truck_Raised = (can_rx_data[0] & 0x08) ? 1 : 0;
 801f0ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f0f2:	4a2d      	ldr	r2, [pc, #180]	@ (801f1a8 <CAN_receive_coms+0x268>)
 801f0f4:	e7af      	b.n	801f056 <CAN_receive_coms+0x116>
				j1939PTO_Disabled = (can_rx_data[0] & 0x01) ? 1 : 0;
 801f0f6:	7823      	ldrb	r3, [r4, #0]
 801f0f8:	4a1b      	ldr	r2, [pc, #108]	@ (801f168 <CAN_receive_coms+0x228>)
 801f0fa:	f003 0101 	and.w	r1, r3, #1
 801f0fe:	8011      	strh	r1, [r2, #0]
				j1939EStop_Active = (can_rx_data[0] & 0x02) ? 1 : 0;
 801f100:	4a1a      	ldr	r2, [pc, #104]	@ (801f16c <CAN_receive_coms+0x22c>)
 801f102:	f3c3 0140 	ubfx	r1, r3, #1, #1
 801f106:	8011      	strh	r1, [r2, #0]
				j1939Angle_Exceeded = (can_rx_data[0] & 0x04) ? 1 : 0;
 801f108:	4a19      	ldr	r2, [pc, #100]	@ (801f170 <CAN_receive_coms+0x230>)
 801f10a:	f3c3 0180 	ubfx	r1, r3, #2, #1
 801f10e:	8011      	strh	r1, [r2, #0]
				j1939Overpressure = (can_rx_data[0] & 0x08) ? 1 : 0;
 801f110:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f114:	4a25      	ldr	r2, [pc, #148]	@ (801f1ac <CAN_receive_coms+0x26c>)
 801f116:	e79e      	b.n	801f056 <CAN_receive_coms+0x116>
			    j1939Trailer_Latched = (can_rx_data[0] & 0x01) ? 1 : 0;
 801f118:	7823      	ldrb	r3, [r4, #0]
 801f11a:	4a25      	ldr	r2, [pc, #148]	@ (801f1b0 <CAN_receive_coms+0x270>)
 801f11c:	f003 0101 	and.w	r1, r3, #1
 801f120:	8011      	strh	r1, [r2, #0]
			    j1939Trailer_Lowered = (can_rx_data[0] & 0x02) ? 1 : 0;
 801f122:	4a24      	ldr	r2, [pc, #144]	@ (801f1b4 <CAN_receive_coms+0x274>)
 801f124:	f3c3 0140 	ubfx	r1, r3, #1, #1
 801f128:	8011      	strh	r1, [r2, #0]
			    j1939Trailer_Moving = (can_rx_data[0] & 0x04) ? 1 : 0;
 801f12a:	4a23      	ldr	r2, [pc, #140]	@ (801f1b8 <CAN_receive_coms+0x278>)
 801f12c:	f3c3 0180 	ubfx	r1, r3, #2, #1
 801f130:	8011      	strh	r1, [r2, #0]
			    j1939Trailer_Raised = (can_rx_data[0] & 0x08) ? 1 : 0;
 801f132:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f136:	4a21      	ldr	r2, [pc, #132]	@ (801f1bc <CAN_receive_coms+0x27c>)
 801f138:	e78d      	b.n	801f056 <CAN_receive_coms+0x116>
 801f13a:	bf00      	nop
 801f13c:	f3af 8000 	nop.w
 801f140:	20001e70 	.word	0x20001e70
 801f144:	20001ed8 	.word	0x20001ed8
 801f148:	20001dd0 	.word	0x20001dd0
 801f14c:	20001dce 	.word	0x20001dce
 801f150:	20001dcc 	.word	0x20001dcc
 801f154:	20001dca 	.word	0x20001dca
 801f158:	20001dc8 	.word	0x20001dc8
 801f15c:	20001dc6 	.word	0x20001dc6
 801f160:	20001dc4 	.word	0x20001dc4
 801f164:	20001dc2 	.word	0x20001dc2
 801f168:	20001db8 	.word	0x20001db8
 801f16c:	20001db6 	.word	0x20001db6
 801f170:	20001db4 	.word	0x20001db4
 801f174:	20001db2 	.word	0x20001db2
 801f178:	20001db0 	.word	0x20001db0
 801f17c:	20001da6 	.word	0x20001da6
 801f180:	20001da4 	.word	0x20001da4
 801f184:	20001dd8 	.word	0x20001dd8
 801f188:	20001ddc 	.word	0x20001ddc
 801f18c:	20001e48 	.word	0x20001e48
 801f190:	20001e08 	.word	0x20001e08
 801f194:	20001e50 	.word	0x20001e50
 801f198:	20001d98 	.word	0x20001d98
 801f19c:	20001dc0 	.word	0x20001dc0
 801f1a0:	20001dbe 	.word	0x20001dbe
 801f1a4:	20001dbc 	.word	0x20001dbc
 801f1a8:	20001dba 	.word	0x20001dba
 801f1ac:	20001da2 	.word	0x20001da2
 801f1b0:	20001dae 	.word	0x20001dae
 801f1b4:	20001dac 	.word	0x20001dac
 801f1b8:	20001daa 	.word	0x20001daa
 801f1bc:	20001da8 	.word	0x20001da8
 801f1c0:	d2f1a9fc 	.word	0xd2f1a9fc
 801f1c4:	3f60624d 	.word	0x3f60624d
 801f1c8:	20001e71 	.word	0x20001e71

0801f1cc <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 801f1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t CAN_rx_data[8];
	uint8_t i;

	do
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 801f1ce:	4d16      	ldr	r5, [pc, #88]	@ (801f228 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)

		//Store latest 29 bit data in software FIFO
		if(CAN_rx_header.IDE == CAN_ID_EXT)
		{

			can_fifo_arbid[can_fifo_in_pointer] = CAN_rx_header.ExtId;
 801f1d0:	4c16      	ldr	r4, [pc, #88]	@ (801f22c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
{
 801f1d2:	b08b      	sub	sp, #44	@ 0x2c
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN_rx_header, CAN_rx_data);
 801f1d4:	ab01      	add	r3, sp, #4
 801f1d6:	aa03      	add	r2, sp, #12
 801f1d8:	2100      	movs	r1, #0
 801f1da:	4628      	mov	r0, r5
 801f1dc:	f7fa f942 	bl	8019464 <HAL_CAN_GetRxMessage>
		if(CAN_rx_header.IDE == CAN_ID_EXT)
 801f1e0:	9b05      	ldr	r3, [sp, #20]
 801f1e2:	2b04      	cmp	r3, #4
 801f1e4:	d115      	bne.n	801f212 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
			can_fifo_arbid[can_fifo_in_pointer] = CAN_rx_header.ExtId;
 801f1e6:	7823      	ldrb	r3, [r4, #0]
 801f1e8:	4a11      	ldr	r2, [pc, #68]	@ (801f230 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 801f1ea:	9904      	ldr	r1, [sp, #16]
 801f1ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			can_fifo_dlen[can_fifo_in_pointer] = CAN_rx_header.DLC;
 801f1f0:	4a10      	ldr	r2, [pc, #64]	@ (801f234 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 801f1f2:	9907      	ldr	r1, [sp, #28]
 801f1f4:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<8;++i)
				can_fifo_data[can_fifo_in_pointer][i] = CAN_rx_data[i];
 801f1f6:	aa01      	add	r2, sp, #4
 801f1f8:	ca03      	ldmia	r2!, {r0, r1}
 801f1fa:	4e0f      	ldr	r6, [pc, #60]	@ (801f238 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 801f1fc:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
 801f200:	eb06 07c3 	add.w	r7, r6, r3, lsl #3

			if(++can_fifo_in_pointer >= CAN_FIFO_DEPTH)
 801f204:	3301      	adds	r3, #1
 801f206:	b2db      	uxtb	r3, r3
 801f208:	2b07      	cmp	r3, #7
				can_fifo_in_pointer = 0;
 801f20a:	bf88      	it	hi
 801f20c:	2300      	movhi	r3, #0
				can_fifo_data[can_fifo_in_pointer][i] = CAN_rx_data[i];
 801f20e:	6079      	str	r1, [r7, #4]
				can_fifo_in_pointer = 0;
 801f210:	7023      	strb	r3, [r4, #0]

		}
	}while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0);
 801f212:	2100      	movs	r1, #0
 801f214:	4628      	mov	r0, r5
 801f216:	f7fa f9a1 	bl	801955c <HAL_CAN_GetRxFifoFillLevel>
 801f21a:	2800      	cmp	r0, #0
 801f21c:	d1da      	bne.n	801f1d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x8>

	can_data_updated = 1;  // Signal update
 801f21e:	4b07      	ldr	r3, [pc, #28]	@ (801f23c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 801f220:	2201      	movs	r2, #1
 801f222:	701a      	strb	r2, [r3, #0]
}
 801f224:	b00b      	add	sp, #44	@ 0x2c
 801f226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f228:	20001c10 	.word	0x20001c10
 801f22c:	20001e71 	.word	0x20001e71
 801f230:	20001e50 	.word	0x20001e50
 801f234:	20001e48 	.word	0x20001e48
 801f238:	20001e08 	.word	0x20001e08
 801f23c:	20001d98 	.word	0x20001d98

0801f240 <CAN_InitTask>:

void CAN_InitTask(void)
{
 801f240:	b510      	push	{r4, lr}
    canfilterconfig.FilterMaskIdLow = 0x0000;
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 801f242:	4c0e      	ldr	r4, [pc, #56]	@ (801f27c <CAN_InitTask+0x3c>)
{
 801f244:	b08a      	sub	sp, #40	@ 0x28
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 801f246:	2201      	movs	r2, #1
    canfilterconfig.FilterBank = 0;  // single can interfaces only have 14, 0-13
 801f248:	2300      	movs	r3, #0
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 801f24a:	e9cd 3206 	strd	r3, r2, [sp, #24]
    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 801f24e:	4669      	mov	r1, sp
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 801f250:	e9cd 3304 	strd	r3, r3, [sp, #16]
    canfilterconfig.FilterIdLow = 0;
 801f254:	e9cd 3300 	strd	r3, r3, [sp]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 801f258:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 801f25c:	4620      	mov	r0, r4
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 801f25e:	2314      	movs	r3, #20
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 801f260:	9208      	str	r2, [sp, #32]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 801f262:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 801f264:	f7fa f806 	bl	8019274 <HAL_CAN_ConfigFilter>

    //
    HAL_CAN_Start(&hcan1);
 801f268:	4620      	mov	r0, r4
 801f26a:	f7fa f871 	bl	8019350 <HAL_CAN_Start>

    // activate rx notifications
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 801f26e:	2102      	movs	r1, #2
 801f270:	4620      	mov	r0, r4
 801f272:	f7fa f982 	bl	801957a <HAL_CAN_ActivateNotification>
}
 801f276:	b00a      	add	sp, #40	@ 0x28
 801f278:	bd10      	pop	{r4, pc}
 801f27a:	bf00      	nop
 801f27c:	20001c10 	.word	0x20001c10

0801f280 <SetDefaultConfig>:
//
////////////////////////////////////////////////////////////////////////
void SetDefaultConfig()
{
	//DISPLAY MENU
	S35_config[LCD_BRIGHTNESS] = 80;				//LCD backlight brightness (%)
 801f280:	4b21      	ldr	r3, [pc, #132]	@ (801f308 <SetDefaultConfig+0x88>)
{
 801f282:	b510      	push	{r4, lr}
	S35_config[FOUR_UP_SCREEN1_GAUGE1_SPN] = 100;	//SPN 100 engine Oil pressure
	S35_config[FOUR_UP_SCREEN1_GAUGE2_SPN] = 110;	//SPN 110 Coolant temperature
	S35_config[FOUR_UP_SCREEN1_GAUGE3_SPN] = 92;	//SPN 92 engine load
	S35_config[FOUR_UP_SCREEN1_GAUGE4_SPN] = 3719;	//SPN 3917 DPF soot level
	//four up screen 2 gauge setup
	S35_config[FOUR_UP_SCREEN2_GAUGE1_SPN] = 98;	//SPN 98 engine Oil level
 801f284:	2462      	movs	r4, #98	@ 0x62
	S35_config[LCD_BRIGHTNESS] = 80;				//LCD backlight brightness (%)
 801f286:	2250      	movs	r2, #80	@ 0x50
	S35_config[FOUR_UP_SCREEN2_GAUGE1_SPN] = 98;	//SPN 98 engine Oil level
 801f288:	815c      	strh	r4, [r3, #10]
	S35_config[FOUR_UP_SCREEN2_GAUGE2_SPN] = 167;	//SPN 167 charging system voltage
 801f28a:	24a7      	movs	r4, #167	@ 0xa7
	S35_config[LCD_BRIGHTNESS] = 80;				//LCD backlight brightness (%)
 801f28c:	801a      	strh	r2, [r3, #0]
	S35_config[FOUR_UP_SCREEN2_GAUGE2_SPN] = 167;	//SPN 167 charging system voltage
 801f28e:	819c      	strh	r4, [r3, #12]
	S35_config[FOUR_UP_SCREEN1_GAUGE1_SPN] = 100;	//SPN 100 engine Oil pressure
 801f290:	2264      	movs	r2, #100	@ 0x64
	S35_config[FOUR_UP_SCREEN2_GAUGE3_SPN] = 173;	//SPN 173 engine exhaust temperature
 801f292:	24ad      	movs	r4, #173	@ 0xad
	S35_config[FOUR_UP_SCREEN1_GAUGE1_SPN] = 100;	//SPN 100 engine Oil pressure
 801f294:	805a      	strh	r2, [r3, #2]
	S35_config[FOUR_UP_SCREEN2_GAUGE3_SPN] = 173;	//SPN 173 engine exhaust temperature
 801f296:	81dc      	strh	r4, [r3, #14]
	S35_config[FOUR_UP_SCREEN1_GAUGE3_SPN] = 92;	//SPN 92 engine load
 801f298:	225c      	movs	r2, #92	@ 0x5c
	S35_config[FOUR_UP_SCREEN2_GAUGE4_SPN] = 247;	//SPN 247 engine hours
 801f29a:	24f7      	movs	r4, #247	@ 0xf7
	S35_config[FOUR_UP_SCREEN1_GAUGE2_SPN] = 110;	//SPN 110 Coolant temperature
 801f29c:	216e      	movs	r1, #110	@ 0x6e
	S35_config[FOUR_UP_SCREEN1_GAUGE3_SPN] = 92;	//SPN 92 engine load
 801f29e:	80da      	strh	r2, [r3, #6]
	S35_config[FOUR_UP_SCREEN2_GAUGE4_SPN] = 247;	//SPN 247 engine hours
 801f2a0:	821c      	strh	r4, [r3, #16]
	S35_config[TSC1_SCREEN_PRESET1_SPEED] = 1200;
	S35_config[TSC1_SCREEN_PRESET2_SPEED] = 2000;
	//Regen screen gauge setup
	S35_config[REGEN_SCREEN_GAUGE1_SPN] = 3719;		//SPN 3917 DPF soot level
	S35_config[REGEN_SCREEN_GAUGE2_SPN] = 110;		//SPN 110 Coolant temperature
	S35_config[REGEN_SCREEN_GAUGE3_SPN] = 92;		//SPN 92 engine load
 801f2a2:	839a      	strh	r2, [r3, #28]
	S35_config[TSC1_SCREEN_IDLE_SPEED] = 800;
 801f2a4:	f44f 7448 	mov.w	r4, #800	@ 0x320
	S35_config[REGEN_SCREEN_GAUGE4_SPN] = 190;		//SPN 190 engine speed
 801f2a8:	22be      	movs	r2, #190	@ 0xbe
	S35_config[FOUR_UP_SCREEN1_GAUGE2_SPN] = 110;	//SPN 110 Coolant temperature
 801f2aa:	8099      	strh	r1, [r3, #4]
	S35_config[TSC1_SCREEN_IDLE_SPEED] = 800;
 801f2ac:	825c      	strh	r4, [r3, #18]
	S35_config[REGEN_SCREEN_GAUGE2_SPN] = 110;		//SPN 110 Coolant temperature
 801f2ae:	8359      	strh	r1, [r3, #26]
	S35_config[TSC1_SCREEN_PRESET1_SPEED] = 1200;
 801f2b0:	f44f 6496 	mov.w	r4, #1200	@ 0x4b0
	S35_config[REGEN_SCREEN_GAUGE4_SPN] = 190;		//SPN 190 engine speed
 801f2b4:	83da      	strh	r2, [r3, #30]

    // ADD THESE NEW TOUCHGFX DEFAULTS:
    S35_config[TOUCHGFX_VEHICLETYPE] = 0;           // Default to Truck (index 0)
    S35_config[TOUCHGFX_BRIGHTNESS] = 75;        // Default to Stereo (index 0)
 801f2b6:	214b      	movs	r1, #75	@ 0x4b
    S35_config[TOUCHGFX_VEHICLETYPE] = 0;           // Default to Truck (index 0)
 801f2b8:	2200      	movs	r2, #0
	S35_config[FOUR_UP_SCREEN1_GAUGE4_SPN] = 3719;	//SPN 3917 DPF soot level
 801f2ba:	f640 6087 	movw	r0, #3719	@ 0xe87
	S35_config[TSC1_SCREEN_PRESET1_SPEED] = 1200;
 801f2be:	829c      	strh	r4, [r3, #20]
    S35_config[TOUCHGFX_VEHICLETYPE] = 0;           // Default to Truck (index 0)
 801f2c0:	841a      	strh	r2, [r3, #32]
	S35_config[TSC1_SCREEN_PRESET2_SPEED] = 2000;
 801f2c2:	f44f 64fa 	mov.w	r4, #2000	@ 0x7d0
    S35_config[TOUCHGFX_BRIGHTNESS] = 75;        // Default to Stereo (index 0)
 801f2c6:	8459      	strh	r1, [r3, #34]	@ 0x22
    S35_config[TOUCHGFX_TRUCKMAX] = 400;          // Default timeout 30 seconds
    S35_config[TOUCHGFX_TRUCKMIN] = 0;       // Default brightness 75%
 801f2c8:	84da      	strh	r2, [r3, #38]	@ 0x26
    S35_config[TOUCHGFX_TRUCKMAX] = 400;          // Default timeout 30 seconds
 801f2ca:	f44f 71c8 	mov.w	r1, #400	@ 0x190
    S35_config[TOUCHGFX_TRAILERMAX] = 400;      // Default to Normal (index 0)
    S35_config[TOUCHGFX_TRAILERMIN] = 0;         // Default contrast 60%
 801f2ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    S35_config[TOUCHGFX_TRUCK_LOWERED] = 50;
    S35_config[TOUCHGFX_TRUCK_RAISED] = 280;
    S35_config[TOUCHGFX_TRUCK_OVERLOAD] = 380;
    S35_config[TOUCHGFX_TRUCK_EMERGENCY] = 395;
 801f2d0:	f240 128b 	movw	r2, #395	@ 0x18b
	S35_config[FOUR_UP_SCREEN1_GAUGE4_SPN] = 3719;	//SPN 3917 DPF soot level
 801f2d4:	8118      	strh	r0, [r3, #8]
	S35_config[TSC1_SCREEN_PRESET2_SPEED] = 2000;
 801f2d6:	82dc      	strh	r4, [r3, #22]
	S35_config[REGEN_SCREEN_GAUGE1_SPN] = 3719;		//SPN 3917 DPF soot level
 801f2d8:	8318      	strh	r0, [r3, #24]
    S35_config[TOUCHGFX_TRUCKMAX] = 400;          // Default timeout 30 seconds
 801f2da:	8499      	strh	r1, [r3, #36]	@ 0x24
    S35_config[TOUCHGFX_TRAILERMAX] = 400;      // Default to Normal (index 0)
 801f2dc:	8519      	strh	r1, [r3, #40]	@ 0x28
    S35_config[TOUCHGFX_TRUCK_LOWERED] = 50;
 801f2de:	2432      	movs	r4, #50	@ 0x32
    S35_config[TOUCHGFX_TRUCK_RAISED] = 280;
 801f2e0:	f44f 708c 	mov.w	r0, #280	@ 0x118
    S35_config[TOUCHGFX_TRUCK_OVERLOAD] = 380;
 801f2e4:	f44f 71be 	mov.w	r1, #380	@ 0x17c
    S35_config[TOUCHGFX_TRUCK_EMERGENCY] = 395;
 801f2e8:	865a      	strh	r2, [r3, #50]	@ 0x32
    S35_config[TOUCHGFX_TRAILER_LOWERED] = 50;
    S35_config[TOUCHGFX_TRAILER_RAISED] = 280;
    S35_config[TOUCHGFX_TRAILER_OVERLOAD] = 380;
    S35_config[TOUCHGFX_TRAILER_EMERGENCY] = 395;
 801f2ea:	875a      	strh	r2, [r3, #58]	@ 0x3a
    S35_config[TOUCHGFX_ANGLE] = 15;
 801f2ec:	220f      	movs	r2, #15
    S35_config[TOUCHGFX_TRUCK_LOWERED] = 50;
 801f2ee:	859c      	strh	r4, [r3, #44]	@ 0x2c
    S35_config[TOUCHGFX_TRUCK_RAISED] = 280;
 801f2f0:	85d8      	strh	r0, [r3, #46]	@ 0x2e
    S35_config[TOUCHGFX_TRUCK_OVERLOAD] = 380;
 801f2f2:	8619      	strh	r1, [r3, #48]	@ 0x30
    S35_config[TOUCHGFX_TRAILER_LOWERED] = 50;
 801f2f4:	869c      	strh	r4, [r3, #52]	@ 0x34
    S35_config[TOUCHGFX_TRAILER_RAISED] = 280;
 801f2f6:	86d8      	strh	r0, [r3, #54]	@ 0x36
    S35_config[TOUCHGFX_TRAILER_OVERLOAD] = 380;
 801f2f8:	8719      	strh	r1, [r3, #56]	@ 0x38
    S35_config[TOUCHGFX_ANGLE] = 15;
 801f2fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
    S35_config[TOUCHGFX_INCLO_BUBBLE] = 5;
 801f2fc:	2205      	movs	r2, #5
 801f2fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    S35_config[TOUCHGFX_PRESSURE_BUBBLE] = 5;
 801f300:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
}
 801f304:	bd10      	pop	{r4, pc}
 801f306:	bf00      	nop
 801f308:	20001e72 	.word	0x20001e72

0801f30c <UpdateAllConfigFeatures>:
////////////////////////////////////////////////////////////////////////
void UpdateAllConfigFeatures()
{


}
 801f30c:	4770      	bx	lr
	...

0801f310 <digital_output_control>:
//    Returns:
// 			none
//
////////////////////////////////////////////////////////////////////////
void digital_output_control()
{
 801f310:	b508      	push	{r3, lr}
	uint32_t backlight_pwm_value;


	//Digital OP 1
	HAL_GPIO_WritePin(DIGITAL_OUT1_GPIO_Port, DIGITAL_OUT1_Pin, Output1_control);
 801f312:	4b10      	ldr	r3, [pc, #64]	@ (801f354 <digital_output_control+0x44>)
 801f314:	4810      	ldr	r0, [pc, #64]	@ (801f358 <digital_output_control+0x48>)
 801f316:	781a      	ldrb	r2, [r3, #0]
 801f318:	2140      	movs	r1, #64	@ 0x40
 801f31a:	f7fa ff6d 	bl	801a1f8 <HAL_GPIO_WritePin>

	//Digital OP 2
	HAL_GPIO_WritePin(DIGITAL_OUT2_GPIO_Port, DIGITAL_OUT2_Pin, Output2_control);
 801f31e:	4b0f      	ldr	r3, [pc, #60]	@ (801f35c <digital_output_control+0x4c>)
 801f320:	480d      	ldr	r0, [pc, #52]	@ (801f358 <digital_output_control+0x48>)
 801f322:	781a      	ldrb	r2, [r3, #0]
 801f324:	2180      	movs	r1, #128	@ 0x80
 801f326:	f7fa ff67 	bl	801a1f8 <HAL_GPIO_WritePin>

	//LCD backlight control
	backlight_pwm_value = TIMER2_COUNTER_PERIOD;		//Timer 2 counter period
	backlight_pwm_value *= LCD_brightness;
 801f32a:	4b0d      	ldr	r3, [pc, #52]	@ (801f360 <digital_output_control+0x50>)
 801f32c:	781b      	ldrb	r3, [r3, #0]
 801f32e:	ebc3 3383 	rsb	r3, r3, r3, lsl #14
	backlight_pwm_value /= 100;

	if(backlight_pwm_value < 1)
 801f332:	2b63      	cmp	r3, #99	@ 0x63
 801f334:	d909      	bls.n	801f34a <digital_output_control+0x3a>
		backlight_pwm_value = 1;
	else if(backlight_pwm_value > TIMER2_COUNTER_PERIOD)
 801f336:	f5b3 1fc8 	cmp.w	r3, #1638400	@ 0x190000
 801f33a:	d208      	bcs.n	801f34e <digital_output_control+0x3e>
	backlight_pwm_value /= 100;
 801f33c:	2264      	movs	r2, #100	@ 0x64
 801f33e:	fbb3 f3f2 	udiv	r3, r3, r2
		backlight_pwm_value = TIMER2_COUNTER_PERIOD;

	TIM2->CCR2 = backlight_pwm_value;
 801f342:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801f346:	6393      	str	r3, [r2, #56]	@ 0x38
}
 801f348:	bd08      	pop	{r3, pc}
		backlight_pwm_value = 1;
 801f34a:	2301      	movs	r3, #1
 801f34c:	e7f9      	b.n	801f342 <digital_output_control+0x32>
		backlight_pwm_value = TIMER2_COUNTER_PERIOD;
 801f34e:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 801f352:	e7f6      	b.n	801f342 <digital_output_control+0x32>
 801f354:	20001eb5 	.word	0x20001eb5
 801f358:	48000800 	.word	0x48000800
 801f35c:	20001eb4 	.word	0x20001eb4
 801f360:	20000430 	.word	0x20000430
 801f364:	00000000 	.word	0x00000000

0801f368 <process_frequency_measurement>:

////////////////////////////////////////////////////
// Process frequency measurement from pulse count //
////////////////////////////////////////////////////
void process_frequency_measurement()
{
 801f368:	b508      	push	{r3, lr}
	if(frequency_valid)
 801f36a:	4b0d      	ldr	r3, [pc, #52]	@ (801f3a0 <process_frequency_measurement+0x38>)
 801f36c:	781b      	ldrb	r3, [r3, #0]
 801f36e:	b183      	cbz	r3, 801f392 <process_frequency_measurement+0x2a>
		frequency = (19.68e6 / freq_timer);
 801f370:	4b0c      	ldr	r3, [pc, #48]	@ (801f3a4 <process_frequency_measurement+0x3c>)
 801f372:	6818      	ldr	r0, [r3, #0]
 801f374:	f7f6 f9ee 	bl	8015754 <__aeabi_ui2d>
 801f378:	4602      	mov	r2, r0
 801f37a:	460b      	mov	r3, r1
 801f37c:	a106      	add	r1, pc, #24	@ (adr r1, 801f398 <process_frequency_measurement+0x30>)
 801f37e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f382:	f7f6 fb8b 	bl	8015a9c <__aeabi_ddiv>
 801f386:	f7f6 fd37 	bl	8015df8 <__aeabi_d2uiz>
 801f38a:	b280      	uxth	r0, r0
 801f38c:	4b06      	ldr	r3, [pc, #24]	@ (801f3a8 <process_frequency_measurement+0x40>)
 801f38e:	8018      	strh	r0, [r3, #0]
	else
		frequency = 0xFFFF;
}
 801f390:	bd08      	pop	{r3, pc}
		frequency = 0xFFFF;
 801f392:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801f396:	e7f9      	b.n	801f38c <process_frequency_measurement+0x24>
 801f398:	00000000 	.word	0x00000000
 801f39c:	4172c4b0 	.word	0x4172c4b0
 801f3a0:	20001eb6 	.word	0x20001eb6
 801f3a4:	20001ebc 	.word	0x20001ebc
 801f3a8:	20000432 	.word	0x20000432

0801f3ac <lcd_heater_control>:
{
	float max_pwm_value_for_Vin;
	float pwm_proportional_value;
	static float lcd_heater_pwm_duty;

	if(lcd_heater_timer == 0)
 801f3ac:	4a38      	ldr	r2, [pc, #224]	@ (801f490 <lcd_heater_control+0xe4>)
 801f3ae:	4b39      	ldr	r3, [pc, #228]	@ (801f494 <lcd_heater_control+0xe8>)
 801f3b0:	8811      	ldrh	r1, [r2, #0]
 801f3b2:	2900      	cmp	r1, #0
 801f3b4:	d13e      	bne.n	801f434 <lcd_heater_control+0x88>
	{
		//Update heater control once per second
		lcd_heater_timer = LCD_CONTROL_PERIOD_MS;
 801f3b6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801f3ba:	8011      	strh	r1, [r2, #0]

		//Determine maximum possible heater PWM duty depending on supply voltage
		if(SupplyVoltage <= 12)
 801f3bc:	4a36      	ldr	r2, [pc, #216]	@ (801f498 <lcd_heater_control+0xec>)
 801f3be:	eddf 5a37 	vldr	s11, [pc, #220]	@ 801f49c <lcd_heater_control+0xf0>
 801f3c2:	edd2 7a00 	vldr	s15, [r2]
 801f3c6:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 801f3ca:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3d2:	d957      	bls.n	801f484 <lcd_heater_control+0xd8>
		{
			//Supply <= 12V: PWM 100% duty available
			max_pwm_value_for_Vin = 100;
		}
		else if(SupplyVoltage <= 24)
 801f3d4:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 801f3d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3e0:	d83e      	bhi.n	801f460 <lcd_heater_control+0xb4>
		{
			//Supply 12 - 24V: De-rate max PWM duty from 100% to 50%
			max_pwm_value_for_Vin = 24 - SupplyVoltage;
 801f3e2:	ee37 7a67 	vsub.f32	s14, s14, s15
			max_pwm_value_for_Vin /= 12;
			max_pwm_value_for_Vin *= 50;
			max_pwm_value_for_Vin += 50;
 801f3e6:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 801f4a0 <lcd_heater_control+0xf4>
			max_pwm_value_for_Vin /= 12;
 801f3ea:	ee87 6a26 	vdiv.f32	s12, s14, s13
			max_pwm_value_for_Vin += 50;
 801f3ee:	eee6 7a27 	vfma.f32	s15, s12, s15
			//Supply greater than 36V: use fixed 10% duty
			max_pwm_value_for_Vin = 10;
		}

		//Determine proportional value for heater depending on LCD temperature
		if(LCD_temperature < LCD_HEATER_SET_POINT)
 801f3f2:	4a2c      	ldr	r2, [pc, #176]	@ (801f4a4 <lcd_heater_control+0xf8>)
 801f3f4:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 801f4a8 <lcd_heater_control+0xfc>
 801f3f8:	ed92 7a00 	vldr	s14, [r2]
 801f3fc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801f400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f404:	d50c      	bpl.n	801f420 <lcd_heater_control+0x74>
		{
			//LCD temp less than set point: Determine proportional PWM value
			pwm_proportional_value = LCD_HEATER_SET_POINT - LCD_temperature;		//Get temperature 'error'
 801f406:	ee36 7ac7 	vsub.f32	s14, s13, s14

			if(pwm_proportional_value > LCD_HEATER_PROPORTIONAL_BAND)
 801f40a:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
				pwm_proportional_value = LCD_HEATER_PROPORTIONAL_BAND;
 801f40e:	eeb4 7a46 	vcmp.f32	s14, s12
 801f412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f416:	bfc8      	it	gt
 801f418:	eeb0 7a46 	vmovgt.f32	s14, s12

			pwm_proportional_value /= LCD_HEATER_PROPORTIONAL_BAND;		// calculate 0-1 multiplier
 801f41c:	eec7 6a06 	vdiv.f32	s13, s14, s12
			//LCD temp > set point for heater: heater off
			pwm_proportional_value = 0;
		}

		//Determine PWM value
		lcd_heater_pwm_duty = pwm_proportional_value * max_pwm_value_for_Vin;
 801f420:	ee67 7aa6 	vmul.f32	s15, s15, s13

		//Convert to 1mS 'ticks' for tick-timer control
		lcd_heater_pwm_duty /= 100;
 801f424:	ee87 7aa5 	vdiv.f32	s14, s15, s11
		lcd_heater_pwm_duty *= LCD_CONTROL_PERIOD_MS;
 801f428:	eddf 7a20 	vldr	s15, [pc, #128]	@ 801f4ac <lcd_heater_control+0x100>
 801f42c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f430:	edc3 7a00 	vstr	s15, [r3]
	}

	//Control heater output
	if(lcd_heater_PWM_timer == 0)
 801f434:	4a1e      	ldr	r2, [pc, #120]	@ (801f4b0 <lcd_heater_control+0x104>)
 801f436:	8811      	ldrh	r1, [r2, #0]
 801f438:	b911      	cbnz	r1, 801f440 <lcd_heater_control+0x94>
		lcd_heater_PWM_timer = LCD_CONTROL_PERIOD_MS;
 801f43a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801f43e:	8011      	strh	r1, [r2, #0]

	if(((uint16_t)lcd_heater_pwm_duty) > lcd_heater_PWM_timer)
 801f440:	edd3 7a00 	vldr	s15, [r3]
 801f444:	8812      	ldrh	r2, [r2, #0]
		HAL_GPIO_WritePin(LCD_HEATER_GPIO_Port, LCD_HEATER_Pin, 1);
	}
	else
	{
		//Heater off
		HAL_GPIO_WritePin(LCD_HEATER_GPIO_Port, LCD_HEATER_Pin, 0);
 801f446:	481b      	ldr	r0, [pc, #108]	@ (801f4b4 <lcd_heater_control+0x108>)
	if(((uint16_t)lcd_heater_pwm_duty) > lcd_heater_PWM_timer)
 801f448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		HAL_GPIO_WritePin(LCD_HEATER_GPIO_Port, LCD_HEATER_Pin, 0);
 801f44c:	2108      	movs	r1, #8
	if(((uint16_t)lcd_heater_pwm_duty) > lcd_heater_PWM_timer)
 801f44e:	ee17 3a90 	vmov	r3, s15
 801f452:	b29b      	uxth	r3, r3
 801f454:	4293      	cmp	r3, r2
		HAL_GPIO_WritePin(LCD_HEATER_GPIO_Port, LCD_HEATER_Pin, 1);
 801f456:	bf8c      	ite	hi
 801f458:	2201      	movhi	r2, #1
		HAL_GPIO_WritePin(LCD_HEATER_GPIO_Port, LCD_HEATER_Pin, 0);
 801f45a:	2200      	movls	r2, #0
 801f45c:	f7fa becc 	b.w	801a1f8 <HAL_GPIO_WritePin>
		else if(SupplyVoltage <= 36)
 801f460:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 801f4b8 <lcd_heater_control+0x10c>
 801f464:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f46c:	d80d      	bhi.n	801f48a <lcd_heater_control+0xde>
			max_pwm_value_for_Vin = 36 - SupplyVoltage;
 801f46e:	ee37 7a67 	vsub.f32	s14, s14, s15
			max_pwm_value_for_Vin += 20;
 801f472:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
			max_pwm_value_for_Vin /= 12;
 801f476:	ee87 6a26 	vdiv.f32	s12, s14, s13
			max_pwm_value_for_Vin += 20;
 801f47a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 801f47e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f482:	e7b6      	b.n	801f3f2 <lcd_heater_control+0x46>
			max_pwm_value_for_Vin = 100;
 801f484:	eef0 7a65 	vmov.f32	s15, s11
 801f488:	e7b3      	b.n	801f3f2 <lcd_heater_control+0x46>
			max_pwm_value_for_Vin = 10;
 801f48a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801f48e:	e7b0      	b.n	801f3f2 <lcd_heater_control+0x46>
 801f490:	20001eca 	.word	0x20001eca
 801f494:	20001ec4 	.word	0x20001ec4
 801f498:	20001ee8 	.word	0x20001ee8
 801f49c:	42c80000 	.word	0x42c80000
 801f4a0:	42480000 	.word	0x42480000
 801f4a4:	20001ee4 	.word	0x20001ee4
 801f4a8:	00000000 	.word	0x00000000
 801f4ac:	447a0000 	.word	0x447a0000
 801f4b0:	20001ec8 	.word	0x20001ec8
 801f4b4:	48001000 	.word	0x48001000
 801f4b8:	42100000 	.word	0x42100000

0801f4bc <make16>:
{
	uint16_t return_value;

	return_value = msb;
	return_value *= 0x100;
	return_value += lsb;
 801f4bc:	eb01 2000 	add.w	r0, r1, r0, lsl #8

	return(return_value);
}
 801f4c0:	b280      	uxth	r0, r0
 801f4c2:	4770      	bx	lr

0801f4c4 <initialise_timers>:
//		none
//
////////////////////////////////////////////////////////////////////////
void initialise_timers()
{
	can_rx_timer = 0;
 801f4c4:	4a0a      	ldr	r2, [pc, #40]	@ (801f4f0 <initialise_timers+0x2c>)
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	8013      	strh	r3, [r2, #0]
	can_tx_timer = 0;
 801f4ca:	4a0a      	ldr	r2, [pc, #40]	@ (801f4f4 <initialise_timers+0x30>)
 801f4cc:	8013      	strh	r3, [r2, #0]
	can_tx_timer2 = 0;
 801f4ce:	4a0a      	ldr	r2, [pc, #40]	@ (801f4f8 <initialise_timers+0x34>)
 801f4d0:	8013      	strh	r3, [r2, #0]
	can_tx_timer3 = 0;
 801f4d2:	4a0a      	ldr	r2, [pc, #40]	@ (801f4fc <initialise_timers+0x38>)
 801f4d4:	8013      	strh	r3, [r2, #0]
	can_tx_timer4 = 0;
 801f4d6:	4a0a      	ldr	r2, [pc, #40]	@ (801f500 <initialise_timers+0x3c>)
 801f4d8:	8013      	strh	r3, [r2, #0]
	can_tx_timer5 = 0;
 801f4da:	4a0a      	ldr	r2, [pc, #40]	@ (801f504 <initialise_timers+0x40>)
 801f4dc:	8013      	strh	r3, [r2, #0]
	can_tx_timer6 = 0;
 801f4de:	4a0a      	ldr	r2, [pc, #40]	@ (801f508 <initialise_timers+0x44>)
 801f4e0:	8013      	strh	r3, [r2, #0]
	lcd_heater_timer = 1000;
 801f4e2:	4a0a      	ldr	r2, [pc, #40]	@ (801f50c <initialise_timers+0x48>)
 801f4e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801f4e8:	8011      	strh	r1, [r2, #0]
	lcd_heater_PWM_timer = 0;
 801f4ea:	4a09      	ldr	r2, [pc, #36]	@ (801f510 <initialise_timers+0x4c>)
 801f4ec:	8013      	strh	r3, [r2, #0]
}
 801f4ee:	4770      	bx	lr
 801f4f0:	20001ed8 	.word	0x20001ed8
 801f4f4:	20001ed6 	.word	0x20001ed6
 801f4f8:	20001ed4 	.word	0x20001ed4
 801f4fc:	20001ed2 	.word	0x20001ed2
 801f500:	20001ed0 	.word	0x20001ed0
 801f504:	20001ece 	.word	0x20001ece
 801f508:	20001ecc 	.word	0x20001ecc
 801f50c:	20001eca 	.word	0x20001eca
 801f510:	20001ec8 	.word	0x20001ec8

0801f514 <update_tick_timers>:
//
////////////////////////////////////////////////////////////////////////
void update_tick_timers()
{
	//Global CAN RX timeout
	if(can_rx_timer != 0)
 801f514:	4a16      	ldr	r2, [pc, #88]	@ (801f570 <update_tick_timers+0x5c>)
 801f516:	8813      	ldrh	r3, [r2, #0]
 801f518:	b10b      	cbz	r3, 801f51e <update_tick_timers+0xa>
		--can_rx_timer;
 801f51a:	3b01      	subs	r3, #1
 801f51c:	8013      	strh	r3, [r2, #0]

	//CAN TX timer
	if(can_tx_timer != 0)
 801f51e:	4a15      	ldr	r2, [pc, #84]	@ (801f574 <update_tick_timers+0x60>)
 801f520:	8813      	ldrh	r3, [r2, #0]
 801f522:	b10b      	cbz	r3, 801f528 <update_tick_timers+0x14>
			--can_tx_timer;
 801f524:	3b01      	subs	r3, #1
 801f526:	8013      	strh	r3, [r2, #0]

	//CAN TX timer 2
	if(can_tx_timer2 != 0)
 801f528:	4a13      	ldr	r2, [pc, #76]	@ (801f578 <update_tick_timers+0x64>)
 801f52a:	8813      	ldrh	r3, [r2, #0]
 801f52c:	b10b      	cbz	r3, 801f532 <update_tick_timers+0x1e>
			--can_tx_timer2;
 801f52e:	3b01      	subs	r3, #1
 801f530:	8013      	strh	r3, [r2, #0]

	//CAN TX timer 3
	if(can_tx_timer3 != 0)
 801f532:	4a12      	ldr	r2, [pc, #72]	@ (801f57c <update_tick_timers+0x68>)
 801f534:	8813      	ldrh	r3, [r2, #0]
 801f536:	b10b      	cbz	r3, 801f53c <update_tick_timers+0x28>
			--can_tx_timer3;
 801f538:	3b01      	subs	r3, #1
 801f53a:	8013      	strh	r3, [r2, #0]

	//CAN TX timer 4
	if(can_tx_timer4 != 0)
 801f53c:	4a10      	ldr	r2, [pc, #64]	@ (801f580 <update_tick_timers+0x6c>)
 801f53e:	8813      	ldrh	r3, [r2, #0]
 801f540:	b10b      	cbz	r3, 801f546 <update_tick_timers+0x32>
			--can_tx_timer4;
 801f542:	3b01      	subs	r3, #1
 801f544:	8013      	strh	r3, [r2, #0]

	//CAN TX timer 5
	if(can_tx_timer5 != 0)
 801f546:	4a0f      	ldr	r2, [pc, #60]	@ (801f584 <update_tick_timers+0x70>)
 801f548:	8813      	ldrh	r3, [r2, #0]
 801f54a:	b10b      	cbz	r3, 801f550 <update_tick_timers+0x3c>
			--can_tx_timer5;
 801f54c:	3b01      	subs	r3, #1
 801f54e:	8013      	strh	r3, [r2, #0]

	//CAN TX timer 6
	if(can_tx_timer6 != 0)
 801f550:	4a0d      	ldr	r2, [pc, #52]	@ (801f588 <update_tick_timers+0x74>)
 801f552:	8813      	ldrh	r3, [r2, #0]
 801f554:	b10b      	cbz	r3, 801f55a <update_tick_timers+0x46>
			--can_tx_timer6;
 801f556:	3b01      	subs	r3, #1
 801f558:	8013      	strh	r3, [r2, #0]

	if(lcd_heater_timer != 0)
 801f55a:	4a0c      	ldr	r2, [pc, #48]	@ (801f58c <update_tick_timers+0x78>)
 801f55c:	8813      	ldrh	r3, [r2, #0]
 801f55e:	b10b      	cbz	r3, 801f564 <update_tick_timers+0x50>
		--lcd_heater_timer;
 801f560:	3b01      	subs	r3, #1
 801f562:	8013      	strh	r3, [r2, #0]

	if(lcd_heater_PWM_timer != 0)
 801f564:	4a0a      	ldr	r2, [pc, #40]	@ (801f590 <update_tick_timers+0x7c>)
 801f566:	8813      	ldrh	r3, [r2, #0]
 801f568:	b10b      	cbz	r3, 801f56e <update_tick_timers+0x5a>
		--lcd_heater_PWM_timer;
 801f56a:	3b01      	subs	r3, #1
 801f56c:	8013      	strh	r3, [r2, #0]
}
 801f56e:	4770      	bx	lr
 801f570:	20001ed8 	.word	0x20001ed8
 801f574:	20001ed6 	.word	0x20001ed6
 801f578:	20001ed4 	.word	0x20001ed4
 801f57c:	20001ed2 	.word	0x20001ed2
 801f580:	20001ed0 	.word	0x20001ed0
 801f584:	20001ece 	.word	0x20001ece
 801f588:	20001ecc 	.word	0x20001ecc
 801f58c:	20001eca 	.word	0x20001eca
 801f590:	20001ec8 	.word	0x20001ec8

0801f594 <setup_input_hardware>:

///////////////////////////////////
// Setup analogue input hardware //
///////////////////////////////////
void setup_input_hardware()
{
 801f594:	b510      	push	{r4, lr}
	//Analog input #1
	switch(analog_config[0])
 801f596:	4c18      	ldr	r4, [pc, #96]	@ (801f5f8 <setup_input_hardware+0x64>)
 801f598:	7822      	ldrb	r2, [r4, #0]
 801f59a:	2a01      	cmp	r2, #1
 801f59c:	d009      	beq.n	801f5b2 <setup_input_hardware+0x1e>
 801f59e:	2a03      	cmp	r2, #3
 801f5a0:	d106      	bne.n	801f5b0 <setup_input_hardware+0x1c>
		case ANALOG_CONFIG_VOLTAGE:
			HAL_GPIO_WritePin(ENABLE_RESISTIVE_AIN1_GPIO_Port, ENABLE_RESISTIVE_AIN1_Pin, 0);		//Pull-up resistor OFF
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN1_GPIO_Port, ENABLE_CURRENT_AIN1_Pin, 0);			//Pull-down resistor OFF
			break;
		case ANALOG_CONFIG_4_to_20mA:
			HAL_GPIO_WritePin(ENABLE_RESISTIVE_AIN1_GPIO_Port, ENABLE_RESISTIVE_AIN1_Pin, 0);		//Pull-up resistor OFF
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	4815      	ldr	r0, [pc, #84]	@ (801f5fc <setup_input_hardware+0x68>)
 801f5a6:	2180      	movs	r1, #128	@ 0x80
 801f5a8:	f7fa fe26 	bl	801a1f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN1_GPIO_Port, ENABLE_CURRENT_AIN1_Pin, 1);			//Pull-down resistor ON
 801f5ac:	2201      	movs	r2, #1
 801f5ae:	e005      	b.n	801f5bc <setup_input_hardware+0x28>
			HAL_GPIO_WritePin(ENABLE_RESISTIVE_AIN1_GPIO_Port, ENABLE_RESISTIVE_AIN1_Pin, 0);		//Pull-up resistor OFF
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	4812      	ldr	r0, [pc, #72]	@ (801f5fc <setup_input_hardware+0x68>)
 801f5b4:	2180      	movs	r1, #128	@ 0x80
 801f5b6:	f7fa fe1f 	bl	801a1f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN1_GPIO_Port, ENABLE_CURRENT_AIN1_Pin, 0);			//Pull-down resistor OFF
 801f5ba:	2200      	movs	r2, #0
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN1_GPIO_Port, ENABLE_CURRENT_AIN1_Pin, 1);			//Pull-down resistor ON
 801f5bc:	4810      	ldr	r0, [pc, #64]	@ (801f600 <setup_input_hardware+0x6c>)
 801f5be:	2120      	movs	r1, #32
 801f5c0:	f7fa fe1a 	bl	801a1f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN1_GPIO_Port, ENABLE_CURRENT_AIN1_Pin, 0);			//Pull-down resistor OFF
			break;
	}

	//Analog input #2
	switch(analog_config[1])
 801f5c4:	7862      	ldrb	r2, [r4, #1]
 801f5c6:	2a01      	cmp	r2, #1
 801f5c8:	d009      	beq.n	801f5de <setup_input_hardware+0x4a>
 801f5ca:	2a03      	cmp	r2, #3
 801f5cc:	d106      	bne.n	801f5dc <setup_input_hardware+0x48>
		case ANALOG_CONFIG_VOLTAGE:
			HAL_GPIO_WritePin(ENABLE_RESISTIVE_AIN2_GPIO_Port, ENABLE_RESISTIVE_AIN2_Pin, 0);		//Pull-up resistor OFF
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN2_GPIO_Port, ENABLE_CURRENT_AIN2_Pin, 0);			//Pull-down resistor OFF
			break;
		case ANALOG_CONFIG_4_to_20mA:
			HAL_GPIO_WritePin(ENABLE_RESISTIVE_AIN2_GPIO_Port, ENABLE_RESISTIVE_AIN2_Pin, 0);		//Pull-up resistor OFF
 801f5ce:	2200      	movs	r2, #0
 801f5d0:	480a      	ldr	r0, [pc, #40]	@ (801f5fc <setup_input_hardware+0x68>)
 801f5d2:	2104      	movs	r1, #4
 801f5d4:	f7fa fe10 	bl	801a1f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN2_GPIO_Port, ENABLE_CURRENT_AIN2_Pin, 1);			//Pull-down resistor ON
 801f5d8:	2201      	movs	r2, #1
 801f5da:	e005      	b.n	801f5e8 <setup_input_hardware+0x54>
			HAL_GPIO_WritePin(ENABLE_RESISTIVE_AIN2_GPIO_Port, ENABLE_RESISTIVE_AIN2_Pin, 0);		//Pull-up resistor OFF
 801f5dc:	2200      	movs	r2, #0
 801f5de:	4807      	ldr	r0, [pc, #28]	@ (801f5fc <setup_input_hardware+0x68>)
 801f5e0:	2104      	movs	r1, #4
 801f5e2:	f7fa fe09 	bl	801a1f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN2_GPIO_Port, ENABLE_CURRENT_AIN2_Pin, 0);			//Pull-down resistor OFF
 801f5e6:	2200      	movs	r2, #0
			//Set to 0-32V range by default
			HAL_GPIO_WritePin(ENABLE_RESISTIVE_AIN2_GPIO_Port, ENABLE_RESISTIVE_AIN2_Pin, 0);		//Pull-up resistor OFF
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN2_GPIO_Port, ENABLE_CURRENT_AIN2_Pin, 0);			//Pull-down resistor OFF
			break;
	}
}
 801f5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_GPIO_WritePin(ENABLE_CURRENT_AIN2_GPIO_Port, ENABLE_CURRENT_AIN2_Pin, 1);			//Pull-down resistor ON
 801f5ec:	4805      	ldr	r0, [pc, #20]	@ (801f604 <setup_input_hardware+0x70>)
 801f5ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801f5f2:	f7fa be01 	b.w	801a1f8 <HAL_GPIO_WritePin>
 801f5f6:	bf00      	nop
 801f5f8:	20001eec 	.word	0x20001eec
 801f5fc:	48000c00 	.word	0x48000c00
 801f600:	48000400 	.word	0x48000400
 801f604:	48000800 	.word	0x48000800

0801f608 <SaveConfigFile>:
//    Parameters:
//       none
//
////////////////////////////////////////////////////////////////////////
void SaveConfigFile()
{
 801f608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f60a:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
    uint16_t i;
    char ConfigDataString[(CONFIG_LENGTH * 6) + 4] = "";
 801f60e:	22ca      	movs	r2, #202	@ 0xca
 801f610:	2100      	movs	r1, #0
 801f612:	a81a      	add	r0, sp, #104	@ 0x68
 801f614:	f01d ff46 	bl	803d4a4 <memset>
    char filename[] = CONFIG_FILENAME;
 801f618:	4b2c      	ldr	r3, [pc, #176]	@ (801f6cc <SaveConfigFile+0xc4>)
 801f61a:	aa01      	add	r2, sp, #4
 801f61c:	f103 0508 	add.w	r5, r3, #8
 801f620:	6818      	ldr	r0, [r3, #0]
 801f622:	6859      	ldr	r1, [r3, #4]
 801f624:	4614      	mov	r4, r2
 801f626:	c403      	stmia	r4!, {r0, r1}
 801f628:	3308      	adds	r3, #8
 801f62a:	42ab      	cmp	r3, r5
 801f62c:	4622      	mov	r2, r4
 801f62e:	d1f7      	bne.n	801f620 <SaveConfigFile+0x18>
 801f630:	6818      	ldr	r0, [r3, #0]
 801f632:	8899      	ldrh	r1, [r3, #4]
 801f634:	799b      	ldrb	r3, [r3, #6]
 801f636:	6020      	str	r0, [r4, #0]
 801f638:	80a1      	strh	r1, [r4, #4]
 801f63a:	71a3      	strb	r3, [r4, #6]
    uint16_t checksum = 0;
    int result;
    char FileVerifyBuffer[(CONFIG_LENGTH * 6) + 4];

    FS_mount();
 801f63c:	f7f7 f96e 	bl	801691c <FS_mount>

    //Create CSV string to write to file
    for(i=0; i<CONFIG_LENGTH; ++i)  // ONLY CHANGE: < instead of <=
 801f640:	4e23      	ldr	r6, [pc, #140]	@ (801f6d0 <SaveConfigFile+0xc8>)
    {
        sprintf(ConfigDataString + strlen(ConfigDataString), "%d,", S35_config[i]);
 801f642:	4f24      	ldr	r7, [pc, #144]	@ (801f6d4 <SaveConfigFile+0xcc>)
    FS_mount();
 801f644:	2521      	movs	r5, #33	@ 0x21
    uint16_t checksum = 0;
 801f646:	2400      	movs	r4, #0
        sprintf(ConfigDataString + strlen(ConfigDataString), "%d,", S35_config[i]);
 801f648:	a81a      	add	r0, sp, #104	@ 0x68
 801f64a:	f7f5 ff39 	bl	80154c0 <strlen>
 801f64e:	ab1a      	add	r3, sp, #104	@ 0x68
 801f650:	8832      	ldrh	r2, [r6, #0]
 801f652:	4418      	add	r0, r3
 801f654:	4639      	mov	r1, r7
 801f656:	f01d fe1b 	bl	803d290 <siprintf>
        checksum += S35_config[i];
 801f65a:	f836 3b02 	ldrh.w	r3, [r6], #2
    for(i=0; i<CONFIG_LENGTH; ++i)  // ONLY CHANGE: < instead of <=
 801f65e:	3d01      	subs	r5, #1
        checksum += S35_config[i];
 801f660:	441c      	add	r4, r3
    for(i=0; i<CONFIG_LENGTH; ++i)  // ONLY CHANGE: < instead of <=
 801f662:	b2ad      	uxth	r5, r5
        checksum += S35_config[i];
 801f664:	b2a4      	uxth	r4, r4
    for(i=0; i<CONFIG_LENGTH; ++i)  // ONLY CHANGE: < instead of <=
 801f666:	2d00      	cmp	r5, #0
 801f668:	d1ee      	bne.n	801f648 <SaveConfigFile+0x40>
    }

    //Append checksum
    checksum = ~checksum + 1;
    sprintf(ConfigDataString + strlen(ConfigDataString), "%d\n\r", checksum);
 801f66a:	a81a      	add	r0, sp, #104	@ 0x68
 801f66c:	f7f5 ff28 	bl	80154c0 <strlen>
 801f670:	ab1a      	add	r3, sp, #104	@ 0x68
    checksum = ~checksum + 1;
 801f672:	4262      	negs	r2, r4
    sprintf(ConfigDataString + strlen(ConfigDataString), "%d\n\r", checksum);
 801f674:	4918      	ldr	r1, [pc, #96]	@ (801f6d8 <SaveConfigFile+0xd0>)
 801f676:	b292      	uxth	r2, r2
 801f678:	4418      	add	r0, r3
 801f67a:	f01d fe09 	bl	803d290 <siprintf>

    //Write config data to file (overwriting existing file)
    result = FS_write(filename, ConfigDataString, sizeof(ConfigDataString), false);
 801f67e:	462b      	mov	r3, r5
 801f680:	22ca      	movs	r2, #202	@ 0xca
 801f682:	a91a      	add	r1, sp, #104	@ 0x68
 801f684:	a801      	add	r0, sp, #4
 801f686:	f7f7 fa09 	bl	8016a9c <FS_write>

    // check if file got created
    if(result == 0)
 801f68a:	b9b8      	cbnz	r0, 801f6bc <SaveConfigFile+0xb4>
    {
        lfs_t* lfs = FS_getFS();
 801f68c:	f7f7 f93c 	bl	8016908 <FS_getFS>
        lfs_file_t  lfsFile;
        result = lfs_file_open(lfs, &lfsFile, filename, LFS_O_RDONLY);
 801f690:	2301      	movs	r3, #1
 801f692:	aa01      	add	r2, sp, #4
 801f694:	a905      	add	r1, sp, #20
        lfs_t* lfs = FS_getFS();
 801f696:	4604      	mov	r4, r0
        result = lfs_file_open(lfs, &lfsFile, filename, LFS_O_RDONLY);
 801f698:	f007 fcce 	bl	8027038 <lfs_file_open>
        if(result == 0)
 801f69c:	b970      	cbnz	r0, 801f6bc <SaveConfigFile+0xb4>
        {
            //check file length and read file back in to RAM
            result = lfs_file_read(lfs, &lfsFile, &FileVerifyBuffer, (CONFIG_LENGTH * 6) + 4);
 801f69e:	23ca      	movs	r3, #202	@ 0xca
 801f6a0:	aa4d      	add	r2, sp, #308	@ 0x134
 801f6a2:	a905      	add	r1, sp, #20
 801f6a4:	4620      	mov	r0, r4
 801f6a6:	f007 fcfb 	bl	80270a0 <lfs_file_read>
            if(result == 0)
 801f6aa:	b918      	cbnz	r0, 801f6b4 <SaveConfigFile+0xac>
            {
                //Display file contents (string)
                printf("Config file saved content: %s\n\r", FileVerifyBuffer);
 801f6ac:	480b      	ldr	r0, [pc, #44]	@ (801f6dc <SaveConfigFile+0xd4>)
 801f6ae:	a94d      	add	r1, sp, #308	@ 0x134
 801f6b0:	f01d fddc 	bl	803d26c <iprintf>
            }
            // ADD ONLY THIS LINE:
            lfs_file_close(lfs, &lfsFile);
 801f6b4:	a905      	add	r1, sp, #20
 801f6b6:	4620      	mov	r0, r4
 801f6b8:	f007 fcda 	bl	8027070 <lfs_file_close>
        }
    }

    //Unmount
    FS_umount();
 801f6bc:	f7f7 f98c 	bl	80169d8 <FS_umount>

    //update all features affected by changed config data
    UpdateAllConfigFeatures();
 801f6c0:	f7ff fe24 	bl	801f30c <UpdateAllConfigFeatures>
}
 801f6c4:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
 801f6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6ca:	bf00      	nop
 801f6cc:	0803f6f5 	.word	0x0803f6f5
 801f6d0:	20001e72 	.word	0x20001e72
 801f6d4:	0803f6cc 	.word	0x0803f6cc
 801f6d8:	0803f6d0 	.word	0x0803f6d0
 801f6dc:	0803f6d5 	.word	0x0803f6d5

0801f6e0 <LoadConfigFile>:
{
 801f6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    char filename[] = CONFIG_FILENAME;
 801f6e4:	4b2c      	ldr	r3, [pc, #176]	@ (801f798 <LoadConfigFile+0xb8>)
{
 801f6e6:	b0cb      	sub	sp, #300	@ 0x12c
    char filename[] = CONFIG_FILENAME;
 801f6e8:	aa01      	add	r2, sp, #4
 801f6ea:	f103 0508 	add.w	r5, r3, #8
 801f6ee:	6818      	ldr	r0, [r3, #0]
 801f6f0:	6859      	ldr	r1, [r3, #4]
 801f6f2:	4614      	mov	r4, r2
 801f6f4:	c403      	stmia	r4!, {r0, r1}
 801f6f6:	3308      	adds	r3, #8
 801f6f8:	42ab      	cmp	r3, r5
 801f6fa:	4622      	mov	r2, r4
 801f6fc:	d1f7      	bne.n	801f6ee <LoadConfigFile+0xe>
 801f6fe:	6818      	ldr	r0, [r3, #0]
 801f700:	8899      	ldrh	r1, [r3, #4]
 801f702:	799b      	ldrb	r3, [r3, #6]
 801f704:	6020      	str	r0, [r4, #0]
 801f706:	80a1      	strh	r1, [r4, #4]
 801f708:	71a3      	strb	r3, [r4, #6]
    result = FS_read(filename, fileReadBuffer, ((CONFIG_LENGTH + 1) * 6) + 4);
 801f70a:	22d0      	movs	r2, #208	@ 0xd0
 801f70c:	a916      	add	r1, sp, #88	@ 0x58
 801f70e:	a801      	add	r0, sp, #4
 801f710:	f7f7 f984 	bl	8016a1c <FS_read>
    if(result == 0)
 801f714:	4604      	mov	r4, r0
 801f716:	b978      	cbnz	r0, 801f738 <LoadConfigFile+0x58>
        char* token = strtok(fileReadBuffer, ",");
 801f718:	4920      	ldr	r1, [pc, #128]	@ (801f79c <LoadConfigFile+0xbc>)
            token = strtok(NULL, ",");
 801f71a:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 801f79c <LoadConfigFile+0xbc>
        char* token = strtok(fileReadBuffer, ",");
 801f71e:	a816      	add	r0, sp, #88	@ 0x58
 801f720:	f01d fef6 	bl	803d510 <strtok>
    uint16_t configFileChecksum = 0;
 801f724:	4626      	mov	r6, r4
    uint16_t calculatedChecksum = 0;
 801f726:	4625      	mov	r5, r4
                configFileData[configPointer] = atoi(token);
 801f728:	af05      	add	r7, sp, #20
 801f72a:	fa1f f984 	uxth.w	r9, r4
        while(token != NULL)
 801f72e:	b958      	cbnz	r0, 801f748 <LoadConfigFile+0x68>
    ++calculatedChecksum;
 801f730:	426d      	negs	r5, r5
    if(calculatedChecksum != configFileChecksum)
 801f732:	b2ad      	uxth	r5, r5
 801f734:	42ae      	cmp	r6, r5
 801f736:	d01f      	beq.n	801f778 <LoadConfigFile+0x98>
    FS_umount();
 801f738:	f7f7 f94e 	bl	80169d8 <FS_umount>
        SetDefaultConfig();
 801f73c:	f7ff fda0 	bl	801f280 <SetDefaultConfig>
        SaveConfigFile();
 801f740:	f7ff ff62 	bl	801f608 <SaveConfigFile>
        printf("Config file load error, checksum error or length error: Default values loaded\n\r");
 801f744:	4816      	ldr	r0, [pc, #88]	@ (801f7a0 <LoadConfigFile+0xc0>)
 801f746:	e022      	b.n	801f78e <LoadConfigFile+0xae>
            if(configPointer < CONFIG_LENGTH)  // Config data (0-32)
 801f748:	f1b9 0f20 	cmp.w	r9, #32
 801f74c:	d80d      	bhi.n	801f76a <LoadConfigFile+0x8a>
                configFileData[configPointer] = atoi(token);
 801f74e:	f01c ff0f 	bl	803c570 <atoi>
 801f752:	b2a3      	uxth	r3, r4
 801f754:	b280      	uxth	r0, r0
 801f756:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
                calculatedChecksum += configFileData[configPointer];
 801f75a:	4428      	add	r0, r5
 801f75c:	b285      	uxth	r5, r0
            token = strtok(NULL, ",");
 801f75e:	4641      	mov	r1, r8
 801f760:	2000      	movs	r0, #0
 801f762:	f01d fed5 	bl	803d510 <strtok>
 801f766:	3401      	adds	r4, #1
 801f768:	e7df      	b.n	801f72a <LoadConfigFile+0x4a>
            else if(configPointer == CONFIG_LENGTH)  // Checksum (33)
 801f76a:	f1b9 0f21 	cmp.w	r9, #33	@ 0x21
 801f76e:	d1f6      	bne.n	801f75e <LoadConfigFile+0x7e>
                configFileChecksum = atoi(token);
 801f770:	f01c fefe 	bl	803c570 <atoi>
 801f774:	b286      	uxth	r6, r0
 801f776:	e7f2      	b.n	801f75e <LoadConfigFile+0x7e>
    FS_umount();
 801f778:	f7f7 f92e 	bl	80169d8 <FS_umount>
    if(result == 0)
 801f77c:	f1b9 0f22 	cmp.w	r9, #34	@ 0x22
 801f780:	d1dc      	bne.n	801f73c <LoadConfigFile+0x5c>
            S35_config[i] = configFileData[i];
 801f782:	4808      	ldr	r0, [pc, #32]	@ (801f7a4 <LoadConfigFile+0xc4>)
 801f784:	2242      	movs	r2, #66	@ 0x42
 801f786:	a905      	add	r1, sp, #20
 801f788:	f01e f84c 	bl	803d824 <memcpy>
        printf("Config file valid\n\r");
 801f78c:	4806      	ldr	r0, [pc, #24]	@ (801f7a8 <LoadConfigFile+0xc8>)
        printf("Config file load error, checksum error or length error: Default values loaded\n\r");
 801f78e:	f01d fd6d 	bl	803d26c <iprintf>
}
 801f792:	b04b      	add	sp, #300	@ 0x12c
 801f794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f798:	0803f6f5 	.word	0x0803f6f5
 801f79c:	0803f6ce 	.word	0x0803f6ce
 801f7a0:	0803f718 	.word	0x0803f718
 801f7a4:	20001e72 	.word	0x20001e72
 801f7a8:	0803f704 	.word	0x0803f704

0801f7ac <MX_FATFS_Init>:
// function prototypes
static FRESULT _createFS(void);
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801f7ac:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801f7ae:	4903      	ldr	r1, [pc, #12]	@ (801f7bc <MX_FATFS_Init+0x10>)
 801f7b0:	4803      	ldr	r0, [pc, #12]	@ (801f7c0 <MX_FATFS_Init+0x14>)
 801f7b2:	f002 f8b5 	bl	8021920 <FATFS_LinkDriver>
 801f7b6:	4b03      	ldr	r3, [pc, #12]	@ (801f7c4 <MX_FATFS_Init+0x18>)
 801f7b8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801f7ba:	bd08      	pop	{r3, pc}
 801f7bc:	20002f24 	.word	0x20002f24
 801f7c0:	20000434 	.word	0x20000434
 801f7c4:	20002f28 	.word	0x20002f28

0801f7c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801f7c8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN get_fattime */

    RX8900SA_DateTime dateTime;
    RX8900SA_ReadTimeDate(&dateTime);
 801f7ca:	4668      	mov	r0, sp
 801f7cc:	f7f8 ff4e 	bl	801866c <RX8900SA_ReadTimeDate>

    return (DWORD)(dateTime.year - 80) << 25 |
           (DWORD)(dateTime.month + 1) << 21 |
           (DWORD) dateTime.day << 16 |
           (DWORD) dateTime.hour << 11 |
 801f7d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
           (DWORD) dateTime.day << 16 |
 801f7d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
           (DWORD)(dateTime.month + 1) << 21 |
 801f7d8:	f89d 0005 	ldrb.w	r0, [sp, #5]
           (DWORD) dateTime.hour << 11 |
 801f7dc:	02db      	lsls	r3, r3, #11
           (DWORD) dateTime.minute << 5 |
 801f7de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f7e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801f7e6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
           (DWORD) dateTime.second >> 1;
 801f7ea:	f89d 2000 	ldrb.w	r2, [sp]
           (DWORD) dateTime.minute << 5 |
 801f7ee:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
    return (DWORD)(dateTime.year - 80) << 25 |
 801f7f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801f7f6:	3a50      	subs	r2, #80	@ 0x50
           (DWORD) dateTime.minute << 5 |
 801f7f8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
           (DWORD)(dateTime.month + 1) << 21 |
 801f7fc:	3001      	adds	r0, #1

  /* USER CODE END get_fattime */
}
 801f7fe:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 801f802:	b003      	add	sp, #12
 801f804:	f85d fb04 	ldr.w	pc, [sp], #4

0801f808 <FATFS_eraseFS>:
  f_mount(NULL, "", 1); // unmount

  return ffResult;
}

FRESULT FATFS_eraseFS(void){
 801f808:	b510      	push	{r4, lr}
 801f80a:	2400      	movs	r4, #0
	// startAddress = 0x000000;
	// endAddress = 0x24E000; // littlefs start address

	// 24 x 64kB blocks
	for (uint8_t b=0; b<24;b++){
		if(MX25L32_EraseBlock64kb(b * 0x10000) != FLASHDRV_OK ){
 801f80c:	4620      	mov	r0, r4
 801f80e:	f7f8 fe93 	bl	8018538 <MX25L32_EraseBlock64kb>
 801f812:	b980      	cbnz	r0, 801f836 <FATFS_eraseFS+0x2e>
	for (uint8_t b=0; b<24;b++){
 801f814:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 801f818:	f5b4 1fc0 	cmp.w	r4, #1572864	@ 0x180000
 801f81c:	d1f6      	bne.n	801f80c <FATFS_eraseFS+0x4>
 801f81e:	f44f 3410 	mov.w	r4, #147456	@ 0x24000
			return FR_DISK_ERR;
		}
	}
	// E x 4kB sectors
	for (uint8_t s=0; s<14; s++){
		if (MX25L32_EraseSector(0x24000 + s*0x1000) != FLASHDRV_OK){
 801f822:	4620      	mov	r0, r4
 801f824:	f7f8 fe62 	bl	80184ec <MX25L32_EraseSector>
 801f828:	b928      	cbnz	r0, 801f836 <FATFS_eraseFS+0x2e>
	for (uint8_t s=0; s<14; s++){
 801f82a:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 801f82e:	f5b4 3f48 	cmp.w	r4, #204800	@ 0x32000
 801f832:	d1f6      	bne.n	801f822 <FATFS_eraseFS+0x1a>
			return FR_DISK_ERR;
		}
	}
	return FR_OK;
}
 801f834:	bd10      	pop	{r4, pc}
			return FR_DISK_ERR;
 801f836:	2001      	movs	r0, #1
 801f838:	e7fc      	b.n	801f834 <FATFS_eraseFS+0x2c>
	...

0801f83c <_createFS>:
static FRESULT _createFS(void) {
 801f83c:	b510      	push	{r4, lr}
 801f83e:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 801f842:	b082      	sub	sp, #8
	FRESULT result = f_mount(&USERFatFS, USERPath, MOUNT_IMMEDIATELY);
 801f844:	4913      	ldr	r1, [pc, #76]	@ (801f894 <_createFS+0x58>)
 801f846:	4814      	ldr	r0, [pc, #80]	@ (801f898 <_createFS+0x5c>)
 801f848:	2201      	movs	r2, #1
 801f84a:	f001 fd51 	bl	80212f0 <f_mount>
	if ( result != FR_OK ){
 801f84e:	b170      	cbz	r0, 801f86e <_createFS+0x32>
	  result = f_mkfs(USERPath, FM_FAT, _MAX_SS, &workBuffer, _MAX_SS);
 801f850:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 801f854:	480f      	ldr	r0, [pc, #60]	@ (801f894 <_createFS+0x58>)
 801f856:	9400      	str	r4, [sp, #0]
 801f858:	ab02      	add	r3, sp, #8
 801f85a:	4622      	mov	r2, r4
 801f85c:	2101      	movs	r1, #1
 801f85e:	f001 fd6d 	bl	802133c <f_mkfs>
	  if( result == FR_OK ){
 801f862:	b968      	cbnz	r0, 801f880 <_createFS+0x44>
		  result = f_mount(&USERFatFS, USERPath, MOUNT_IMMEDIATELY);
 801f864:	490b      	ldr	r1, [pc, #44]	@ (801f894 <_createFS+0x58>)
 801f866:	480c      	ldr	r0, [pc, #48]	@ (801f898 <_createFS+0x5c>)
 801f868:	2201      	movs	r2, #1
 801f86a:	f001 fd41 	bl	80212f0 <f_mount>
	result = f_mount(NULL, USERPath, MOUNT_IMMEDIATELY);
 801f86e:	4909      	ldr	r1, [pc, #36]	@ (801f894 <_createFS+0x58>)
 801f870:	2201      	movs	r2, #1
 801f872:	2000      	movs	r0, #0
 801f874:	f001 fd3c 	bl	80212f0 <f_mount>
}
 801f878:	f50d 5d80 	add.w	sp, sp, #4096	@ 0x1000
 801f87c:	b002      	add	sp, #8
 801f87e:	bd10      	pop	{r4, pc}
		  FATFS_eraseFS();
 801f880:	f7ff ffc2 	bl	801f808 <FATFS_eraseFS>
		  result = f_mkfs(USERPath, FM_FAT, _MAX_SS, &workBuffer, _MAX_SS);
 801f884:	9400      	str	r4, [sp, #0]
 801f886:	ab02      	add	r3, sp, #8
 801f888:	4622      	mov	r2, r4
 801f88a:	2101      	movs	r1, #1
 801f88c:	4801      	ldr	r0, [pc, #4]	@ (801f894 <_createFS+0x58>)
 801f88e:	f001 fd55 	bl	802133c <f_mkfs>
 801f892:	e7ec      	b.n	801f86e <_createFS+0x32>
 801f894:	20002f24 	.word	0x20002f24
 801f898:	20001ef0 	.word	0x20001ef0

0801f89c <FATFS_Init>:
	  return _createFS();
 801f89c:	f7ff bfce 	b.w	801f83c <_createFS>

0801f8a0 <USER_initialize>:
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	// nothing to do: flash driver is initialized and configured at startup
    Stat = 0;
 801f8a0:	4b03      	ldr	r3, [pc, #12]	@ (801f8b0 <USER_initialize+0x10>)
 801f8a2:	2200      	movs	r2, #0
 801f8a4:	701a      	strb	r2, [r3, #0]

    if (pdrv != 0)
 801f8a6:	b108      	cbz	r0, 801f8ac <USER_initialize+0xc>
    	Stat = STA_NOINIT;
 801f8a8:	2201      	movs	r2, #1
 801f8aa:	701a      	strb	r2, [r3, #0]

    return Stat;
 801f8ac:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 801f8ae:	4770      	bx	lr
 801f8b0:	20000448 	.word	0x20000448

0801f8b4 <USER_ioctl>:
)
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;

    switch(cmd){
 801f8b4:	2904      	cmp	r1, #4
 801f8b6:	d80e      	bhi.n	801f8d6 <USER_ioctl+0x22>
 801f8b8:	e8df f001 	tbb	[pc, r1]
 801f8bc:	0b080306 	.word	0x0b080306
 801f8c0:	06          	.byte	0x06
 801f8c1:	00          	.byte	0x00
    case CTRL_TRIM:
    	// nothing to do
    	res = RES_OK;
    	break;
    case GET_SECTOR_COUNT:
    	*(DWORD*)buff = SECTOR_COUNT;
 801f8c2:	f240 234e 	movw	r3, #590	@ 0x24e
 801f8c6:	6013      	str	r3, [r2, #0]
    	res = RES_OK;
 801f8c8:	2000      	movs	r0, #0
 801f8ca:	4770      	bx	lr
    	res = RES_OK;
    	break;
    case GET_SECTOR_SIZE:
    	*(DWORD*)buff = SECTOR_SIZE;
 801f8cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801f8d0:	e7f9      	b.n	801f8c6 <USER_ioctl+0x12>
    	res = RES_OK;
    	break;
    case GET_BLOCK_SIZE:
    	*(DWORD*)buff = BLOCK_SIZE; // size in number of blocks?
 801f8d2:	2301      	movs	r3, #1
 801f8d4:	e7f7      	b.n	801f8c6 <USER_ioctl+0x12>
    	res = RES_OK;
    	break;
    default:
    	res = RES_PARERR;
 801f8d6:	2004      	movs	r0, #4
    	break;
    }

    return res;
  /* USER CODE END IOCTL */
}
 801f8d8:	4770      	bx	lr
	...

0801f8dc <USER_status>:
{
 801f8dc:	b507      	push	{r0, r1, r2, lr}
	uint8_t status = 0x0;
 801f8de:	2300      	movs	r3, #0
	MX25L32_GetState(&status);
 801f8e0:	f10d 0007 	add.w	r0, sp, #7
	uint8_t status = 0x0;
 801f8e4:	f88d 3007 	strb.w	r3, [sp, #7]
	MX25L32_GetState(&status);
 801f8e8:	f7f8 fd36 	bl	8018358 <MX25L32_GetState>
    switch (status) {
 801f8ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801f8f0:	4a09      	ldr	r2, [pc, #36]	@ (801f918 <USER_status+0x3c>)
 801f8f2:	2b06      	cmp	r3, #6
 801f8f4:	d003      	beq.n	801f8fe <USER_status+0x22>
 801f8f6:	d804      	bhi.n	801f902 <USER_status+0x26>
 801f8f8:	3b03      	subs	r3, #3
 801f8fa:	2b01      	cmp	r3, #1
 801f8fc:	d809      	bhi.n	801f912 <USER_status+0x36>
    		Stat = STA_PROTECT;
 801f8fe:	2304      	movs	r3, #4
 801f900:	e002      	b.n	801f908 <USER_status+0x2c>
    switch (status) {
 801f902:	2b07      	cmp	r3, #7
 801f904:	d105      	bne.n	801f912 <USER_status+0x36>
    		Stat = STA_NOINIT;
 801f906:	2301      	movs	r3, #1
    		Stat = 0;
 801f908:	7013      	strb	r3, [r2, #0]
    return Stat;
 801f90a:	7810      	ldrb	r0, [r2, #0]
}
 801f90c:	b003      	add	sp, #12
 801f90e:	f85d fb04 	ldr.w	pc, [sp], #4
    		Stat = 0;
 801f912:	2300      	movs	r3, #0
 801f914:	e7f8      	b.n	801f908 <USER_status+0x2c>
 801f916:	bf00      	nop
 801f918:	20000448 	.word	0x20000448

0801f91c <USER_read>:
{
 801f91c:	b510      	push	{r4, lr}
 801f91e:	4614      	mov	r4, r2
	if ( pdrv != 0 ){
 801f920:	b938      	cbnz	r0, 801f932 <USER_read+0x16>
	FlashDrv_Status result = MX25L32_ReadX(address, buff, size);
 801f922:	031a      	lsls	r2, r3, #12
 801f924:	0320      	lsls	r0, r4, #12
 801f926:	f7f8 fd3f 	bl	80183a8 <MX25L32_ReadX>
	if ( result == FLASHDRV_OK ){
 801f92a:	3800      	subs	r0, #0
 801f92c:	bf18      	it	ne
 801f92e:	2001      	movne	r0, #1
}
 801f930:	bd10      	pop	{r4, pc}
		return RES_ERROR;
 801f932:	2001      	movs	r0, #1
 801f934:	e7fc      	b.n	801f930 <USER_read+0x14>

0801f936 <USER_write>:
{
 801f936:	b570      	push	{r4, r5, r6, lr}
 801f938:	460d      	mov	r5, r1
 801f93a:	461e      	mov	r6, r3
	if ( pdrv != 0 ){
 801f93c:	b108      	cbz	r0, 801f942 <USER_write+0xc>
		return RES_ERROR;
 801f93e:	2001      	movs	r0, #1
}
 801f940:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t address = sector * SECTOR_SIZE;
 801f942:	0314      	lsls	r4, r2, #12
	FlashDrv_Status res = MX25L32_EraseSector(address);
 801f944:	4620      	mov	r0, r4
 801f946:	f7f8 fdd1 	bl	80184ec <MX25L32_EraseSector>
	if (res == FLASHDRV_ERROR){
 801f94a:	2801      	cmp	r0, #1
 801f94c:	d0f7      	beq.n	801f93e <USER_write+0x8>
	FlashDrv_Status result = MX25L32_PageProgramX(address, (uint8_t*) buff, size);
 801f94e:	0332      	lsls	r2, r6, #12
 801f950:	4629      	mov	r1, r5
 801f952:	4620      	mov	r0, r4
 801f954:	f7f8 fd76 	bl	8018444 <MX25L32_PageProgramX>
	if ( result == FLASHDRV_OK ){
 801f958:	3800      	subs	r0, #0
 801f95a:	bf18      	it	ne
 801f95c:	2001      	movne	r0, #1
 801f95e:	e7ef      	b.n	801f940 <USER_write+0xa>

0801f960 <USBD_MSC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801f960:	230a      	movs	r3, #10
 801f962:	8003      	strh	r3, [r0, #0]

  return USBD_MSC_DeviceQualifierDesc;
}
 801f964:	4800      	ldr	r0, [pc, #0]	@ (801f968 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 801f966:	4770      	bx	lr
 801f968:	2000044c 	.word	0x2000044c

0801f96c <USBD_MSC_Init>:
{
 801f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f96e:	4604      	mov	r4, r0
  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801f970:	f241 0074 	movw	r0, #4212	@ 0x1074
 801f974:	f012 fe0a 	bl	803258c <USBD_static_malloc>
  if (hmsc == NULL)
 801f978:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801f97c:	33b0      	adds	r3, #176	@ 0xb0
 801f97e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
  if (hmsc == NULL)
 801f982:	b908      	cbnz	r0, 801f988 <USBD_MSC_Init+0x1c>
    return (uint8_t)USBD_EMEM;
 801f984:	2002      	movs	r0, #2
}
 801f986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f988:	4e1b      	ldr	r6, [pc, #108]	@ (801f9f8 <USBD_MSC_Init+0x8c>)
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f98a:	7c23      	ldrb	r3, [r4, #16]
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f98c:	7831      	ldrb	r1, [r6, #0]
 801f98e:	4d1b      	ldr	r5, [pc, #108]	@ (801f9fc <USBD_MSC_Init+0x90>)
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801f990:	f8c4 02bc 	str.w	r0, [r4, #700]	@ 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801f994:	bb03      	cbnz	r3, 801f9d8 <USBD_MSC_Init+0x6c>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801f99a:	2202      	movs	r2, #2
 801f99c:	4620      	mov	r0, r4
 801f99e:	f012 fd48 	bl	8032432 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801f9a2:	7833      	ldrb	r3, [r6, #0]
 801f9a4:	2714      	movs	r7, #20
 801f9a6:	f003 030f 	and.w	r3, r3, #15
 801f9aa:	fb07 4303 	mla	r3, r7, r3, r4
 801f9ae:	2601      	movs	r6, #1
 801f9b0:	f8a3 6164 	strh.w	r6, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801f9b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f9b8:	7829      	ldrb	r1, [r5, #0]
 801f9ba:	2202      	movs	r2, #2
 801f9bc:	4620      	mov	r0, r4
 801f9be:	f012 fd38 	bl	8032432 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801f9c2:	782b      	ldrb	r3, [r5, #0]
 801f9c4:	f003 030f 	and.w	r3, r3, #15
 801f9c8:	fb07 4303 	mla	r3, r7, r3, r4
  MSC_BOT_Init(pdev);
 801f9cc:	4620      	mov	r0, r4
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 801f9ce:	849e      	strh	r6, [r3, #36]	@ 0x24
  MSC_BOT_Init(pdev);
 801f9d0:	f000 f94c 	bl	801fc6c <MSC_BOT_Init>
  return (uint8_t)USBD_OK;
 801f9d4:	2000      	movs	r0, #0
 801f9d6:	e7d6      	b.n	801f986 <USBD_MSC_Init+0x1a>
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f9d8:	2340      	movs	r3, #64	@ 0x40
 801f9da:	2202      	movs	r2, #2
 801f9dc:	4620      	mov	r0, r4
 801f9de:	f012 fd28 	bl	8032432 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801f9e2:	7833      	ldrb	r3, [r6, #0]
 801f9e4:	2714      	movs	r7, #20
 801f9e6:	f003 030f 	and.w	r3, r3, #15
 801f9ea:	fb07 4303 	mla	r3, r7, r3, r4
 801f9ee:	2601      	movs	r6, #1
 801f9f0:	f8a3 6164 	strh.w	r6, [r3, #356]	@ 0x164
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801f9f4:	2340      	movs	r3, #64	@ 0x40
 801f9f6:	e7df      	b.n	801f9b8 <USBD_MSC_Init+0x4c>
 801f9f8:	20000449 	.word	0x20000449
 801f9fc:	2000044a 	.word	0x2000044a

0801fa00 <USBD_MSC_Setup>:
{
 801fa00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa02:	460d      	mov	r5, r1
 801fa04:	f8d0 12d4 	ldr.w	r1, [r0, #724]	@ 0x2d4
 801fa08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  uint16_t status_info = 0U;
 801fa0c:	2300      	movs	r3, #0
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fa0e:	f8d1 62c0 	ldr.w	r6, [r1, #704]	@ 0x2c0
  uint16_t status_info = 0U;
 801fa12:	f8ad 3006 	strh.w	r3, [sp, #6]
{
 801fa16:	4604      	mov	r4, r0
  if (hmsc == NULL)
 801fa18:	b176      	cbz	r6, 801fa38 <USBD_MSC_Setup+0x38>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801fa1a:	782b      	ldrb	r3, [r5, #0]
 801fa1c:	f013 0260 	ands.w	r2, r3, #96	@ 0x60
 801fa20:	d02c      	beq.n	801fa7c <USBD_MSC_Setup+0x7c>
 801fa22:	2a20      	cmp	r2, #32
 801fa24:	d104      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
      switch (req->bRequest)
 801fa26:	786a      	ldrb	r2, [r5, #1]
 801fa28:	2afe      	cmp	r2, #254	@ 0xfe
 801fa2a:	d007      	beq.n	801fa3c <USBD_MSC_Setup+0x3c>
 801fa2c:	2aff      	cmp	r2, #255	@ 0xff
 801fa2e:	d018      	beq.n	801fa62 <USBD_MSC_Setup+0x62>
          USBD_CtlError(pdev, req);
 801fa30:	4629      	mov	r1, r5
 801fa32:	4620      	mov	r0, r4
 801fa34:	f001 f9e9 	bl	8020e0a <USBD_CtlError>
    return (uint8_t)USBD_FAIL;
 801fa38:	2003      	movs	r0, #3
 801fa3a:	e01d      	b.n	801fa78 <USBD_MSC_Setup+0x78>
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801fa3c:	886a      	ldrh	r2, [r5, #2]
 801fa3e:	2a00      	cmp	r2, #0
 801fa40:	d1f6      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
 801fa42:	88ef      	ldrh	r7, [r5, #6]
 801fa44:	2f01      	cmp	r7, #1
 801fa46:	d1f3      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
 801fa48:	061a      	lsls	r2, r3, #24
 801fa4a:	d5f1      	bpl.n	801fa30 <USBD_MSC_Setup+0x30>
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 801fa4c:	f8d1 32c4 	ldr.w	r3, [r1, #708]	@ 0x2c4
 801fa50:	699b      	ldr	r3, [r3, #24]
 801fa52:	4798      	blx	r3
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801fa54:	463a      	mov	r2, r7
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 801fa56:	6030      	str	r0, [r6, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 801fa58:	4631      	mov	r1, r6
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801fa5a:	4620      	mov	r0, r4
 801fa5c:	f001 f9fc 	bl	8020e58 <USBD_CtlSendData>
 801fa60:	e009      	b.n	801fa76 <USBD_MSC_Setup+0x76>
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801fa62:	886a      	ldrh	r2, [r5, #2]
 801fa64:	2a00      	cmp	r2, #0
 801fa66:	d1e3      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
 801fa68:	88ea      	ldrh	r2, [r5, #6]
 801fa6a:	2a00      	cmp	r2, #0
 801fa6c:	d1e0      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
 801fa6e:	061b      	lsls	r3, r3, #24
 801fa70:	d4de      	bmi.n	801fa30 <USBD_MSC_Setup+0x30>
            MSC_BOT_Reset(pdev);
 801fa72:	f000 f929 	bl	801fcc8 <MSC_BOT_Reset>
  USBD_StatusTypeDef ret = USBD_OK;
 801fa76:	2000      	movs	r0, #0
}
 801fa78:	b003      	add	sp, #12
 801fa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      switch (req->bRequest)
 801fa7c:	786b      	ldrb	r3, [r5, #1]
 801fa7e:	2b0b      	cmp	r3, #11
 801fa80:	d8d6      	bhi.n	801fa30 <USBD_MSC_Setup+0x30>
 801fa82:	a201      	add	r2, pc, #4	@ (adr r2, 801fa88 <USBD_MSC_Setup+0x88>)
 801fa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa88:	0801fab9 	.word	0x0801fab9
 801fa8c:	0801fae5 	.word	0x0801fae5
 801fa90:	0801fa31 	.word	0x0801fa31
 801fa94:	0801fa31 	.word	0x0801fa31
 801fa98:	0801fa31 	.word	0x0801fa31
 801fa9c:	0801fa31 	.word	0x0801fa31
 801faa0:	0801fa31 	.word	0x0801fa31
 801faa4:	0801fa31 	.word	0x0801fa31
 801faa8:	0801fa31 	.word	0x0801fa31
 801faac:	0801fa31 	.word	0x0801fa31
 801fab0:	0801fac9 	.word	0x0801fac9
 801fab4:	0801fad7 	.word	0x0801fad7
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801fab8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801fabc:	2b03      	cmp	r3, #3
 801fabe:	d1b7      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801fac0:	2202      	movs	r2, #2
 801fac2:	f10d 0106 	add.w	r1, sp, #6
 801fac6:	e7c8      	b.n	801fa5a <USBD_MSC_Setup+0x5a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801fac8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801facc:	2b03      	cmp	r3, #3
 801face:	d1af      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 801fad0:	2201      	movs	r2, #1
 801fad2:	1d31      	adds	r1, r6, #4
 801fad4:	e7c1      	b.n	801fa5a <USBD_MSC_Setup+0x5a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801fad6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801fada:	2b03      	cmp	r3, #3
 801fadc:	d1a8      	bne.n	801fa30 <USBD_MSC_Setup+0x30>
            hmsc->interface = (uint8_t)(req->wValue);
 801fade:	78ab      	ldrb	r3, [r5, #2]
 801fae0:	6073      	str	r3, [r6, #4]
 801fae2:	e7c8      	b.n	801fa76 <USBD_MSC_Setup+0x76>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801fae4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 801fae8:	2b03      	cmp	r3, #3
 801faea:	d1c4      	bne.n	801fa76 <USBD_MSC_Setup+0x76>
            if (req->wValue == USB_FEATURE_EP_HALT)
 801faec:	886b      	ldrh	r3, [r5, #2]
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d1c1      	bne.n	801fa76 <USBD_MSC_Setup+0x76>
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801faf2:	7929      	ldrb	r1, [r5, #4]
 801faf4:	f012 fcb6 	bl	8032464 <USBD_LL_FlushEP>
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801faf8:	7929      	ldrb	r1, [r5, #4]
 801fafa:	4620      	mov	r0, r4
 801fafc:	f000 f9d4 	bl	801fea8 <MSC_BOT_CplClrFeature>
 801fb00:	e7b9      	b.n	801fa76 <USBD_MSC_Setup+0x76>
 801fb02:	bf00      	nop

0801fb04 <USBD_MSC_DataIn>:
{
 801fb04:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev, epnum);
 801fb06:	f000 f937 	bl	801fd78 <MSC_BOT_DataIn>
}
 801fb0a:	2000      	movs	r0, #0
 801fb0c:	bd08      	pop	{r3, pc}

0801fb0e <USBD_MSC_DataOut>:
{
 801fb0e:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev, epnum);
 801fb10:	f000 f952 	bl	801fdb8 <MSC_BOT_DataOut>
}
 801fb14:	2000      	movs	r0, #0
 801fb16:	bd08      	pop	{r3, pc}

0801fb18 <USBD_MSC_GetHSCfgDesc>:
{
 801fb18:	b538      	push	{r3, r4, r5, lr}
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fb1a:	2181      	movs	r1, #129	@ 0x81
{
 801fb1c:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fb1e:	480b      	ldr	r0, [pc, #44]	@ (801fb4c <USBD_MSC_GetHSCfgDesc+0x34>)
 801fb20:	f000 ff02 	bl	8020928 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801fb24:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fb26:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801fb28:	4808      	ldr	r0, [pc, #32]	@ (801fb4c <USBD_MSC_GetHSCfgDesc+0x34>)
 801fb2a:	f000 fefd 	bl	8020928 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 801fb2e:	b11c      	cbz	r4, 801fb38 <USBD_MSC_GetHSCfgDesc+0x20>
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801fb30:	2200      	movs	r2, #0
 801fb32:	7122      	strb	r2, [r4, #4]
 801fb34:	2202      	movs	r2, #2
 801fb36:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 801fb38:	b118      	cbz	r0, 801fb42 <USBD_MSC_GetHSCfgDesc+0x2a>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801fb3a:	2200      	movs	r2, #0
 801fb3c:	7102      	strb	r2, [r0, #4]
 801fb3e:	2202      	movs	r2, #2
 801fb40:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fb42:	2320      	movs	r3, #32
}
 801fb44:	4801      	ldr	r0, [pc, #4]	@ (801fb4c <USBD_MSC_GetHSCfgDesc+0x34>)
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fb46:	802b      	strh	r3, [r5, #0]
}
 801fb48:	bd38      	pop	{r3, r4, r5, pc}
 801fb4a:	bf00      	nop
 801fb4c:	20000458 	.word	0x20000458

0801fb50 <USBD_MSC_GetFSCfgDesc>:
{
 801fb50:	b538      	push	{r3, r4, r5, lr}
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fb52:	2181      	movs	r1, #129	@ 0x81
{
 801fb54:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fb56:	480b      	ldr	r0, [pc, #44]	@ (801fb84 <USBD_MSC_GetFSCfgDesc+0x34>)
 801fb58:	f000 fee6 	bl	8020928 <USBD_GetEpDesc>
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801fb5c:	2101      	movs	r1, #1
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801fb5e:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 801fb60:	4808      	ldr	r0, [pc, #32]	@ (801fb84 <USBD_MSC_GetFSCfgDesc+0x34>)
 801fb62:	f000 fee1 	bl	8020928 <USBD_GetEpDesc>
  if (pEpInDesc != NULL)
 801fb66:	b11c      	cbz	r4, 801fb70 <USBD_MSC_GetFSCfgDesc+0x20>
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fb68:	2240      	movs	r2, #64	@ 0x40
 801fb6a:	7122      	strb	r2, [r4, #4]
 801fb6c:	2200      	movs	r2, #0
 801fb6e:	7162      	strb	r2, [r4, #5]
  if (pEpOutDesc != NULL)
 801fb70:	b118      	cbz	r0, 801fb7a <USBD_MSC_GetFSCfgDesc+0x2a>
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801fb72:	2240      	movs	r2, #64	@ 0x40
 801fb74:	7102      	strb	r2, [r0, #4]
 801fb76:	2200      	movs	r2, #0
 801fb78:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fb7a:	2320      	movs	r3, #32
}
 801fb7c:	4801      	ldr	r0, [pc, #4]	@ (801fb84 <USBD_MSC_GetFSCfgDesc+0x34>)
  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801fb7e:	802b      	strh	r3, [r5, #0]
}
 801fb80:	bd38      	pop	{r3, r4, r5, pc}
 801fb82:	bf00      	nop
 801fb84:	20000458 	.word	0x20000458

0801fb88 <USBD_MSC_GetOtherSpeedCfgDesc>:
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
 801fb88:	f7ff bfe2 	b.w	801fb50 <USBD_MSC_GetFSCfgDesc>

0801fb8c <USBD_MSC_DeInit>:
{
 801fb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801fb8e:	4d19      	ldr	r5, [pc, #100]	@ (801fbf4 <USBD_MSC_DeInit+0x68>)
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 801fb90:	4f19      	ldr	r7, [pc, #100]	@ (801fbf8 <USBD_MSC_DeInit+0x6c>)
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801fb92:	7829      	ldrb	r1, [r5, #0]
{
 801fb94:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801fb96:	f012 fc5a 	bl	803244e <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 801fb9a:	782b      	ldrb	r3, [r5, #0]
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 801fb9c:	7839      	ldrb	r1, [r7, #0]
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 801fb9e:	2614      	movs	r6, #20
 801fba0:	f003 030f 	and.w	r3, r3, #15
 801fba4:	fb06 4303 	mla	r3, r6, r3, r4
 801fba8:	2500      	movs	r5, #0
 801fbaa:	f8a3 5164 	strh.w	r5, [r3, #356]	@ 0x164
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 801fbae:	4620      	mov	r0, r4
 801fbb0:	f012 fc4d 	bl	803244e <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 801fbb4:	783b      	ldrb	r3, [r7, #0]
 801fbb6:	f003 030f 	and.w	r3, r3, #15
 801fbba:	fb06 4303 	mla	r3, r6, r3, r4
 801fbbe:	849d      	strh	r5, [r3, #36]	@ 0x24
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801fbc0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 801fbc4:	33b0      	adds	r3, #176	@ 0xb0
 801fbc6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fbca:	b183      	cbz	r3, 801fbee <USBD_MSC_DeInit+0x62>
    MSC_BOT_DeInit(pdev);
 801fbcc:	4620      	mov	r0, r4
 801fbce:	f000 f89f 	bl	801fd10 <MSC_BOT_DeInit>
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801fbd2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 801fbd6:	33b0      	adds	r3, #176	@ 0xb0
 801fbd8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801fbdc:	f012 fcda 	bl	8032594 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 801fbe0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 801fbe4:	33b0      	adds	r3, #176	@ 0xb0
 801fbe6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 801fbea:	f8c4 52bc 	str.w	r5, [r4, #700]	@ 0x2bc
}
 801fbee:	2000      	movs	r0, #0
 801fbf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbf2:	bf00      	nop
 801fbf4:	20000449 	.word	0x20000449
 801fbf8:	2000044a 	.word	0x2000044a

0801fbfc <USBD_MSC_RegisterStorage>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
  if (fops == NULL)
 801fbfc:	b139      	cbz	r1, 801fc0e <USBD_MSC_RegisterStorage+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 801fbfe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fc02:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fc06:	f8c0 12c4 	str.w	r1, [r0, #708]	@ 0x2c4

  return (uint8_t)USBD_OK;
 801fc0a:	2000      	movs	r0, #0
 801fc0c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 801fc0e:	2003      	movs	r0, #3
}
 801fc10:	4770      	bx	lr
	...

0801fc14 <MSC_BOT_Abort>:
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc14:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fc18:	33b0      	adds	r3, #176	@ 0xb0
{
 801fc1a:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc1c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
{
 801fc20:	4604      	mov	r4, r0
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801fc22:	b1f5      	cbz	r5, 801fc62 <MSC_BOT_Abort+0x4e>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801fc24:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 801fc28:	7f1a      	ldrb	r2, [r3, #28]
 801fc2a:	b93a      	cbnz	r2, 801fc3c <MSC_BOT_Abort+0x28>
 801fc2c:	699b      	ldr	r3, [r3, #24]
 801fc2e:	b12b      	cbz	r3, 801fc3c <MSC_BOT_Abort+0x28>
      (hmsc->cbw.dDataLength != 0U) &&
 801fc30:	7a6b      	ldrb	r3, [r5, #9]
 801fc32:	b91b      	cbnz	r3, 801fc3c <MSC_BOT_Abort+0x28>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801fc34:	4b0b      	ldr	r3, [pc, #44]	@ (801fc64 <MSC_BOT_Abort+0x50>)
 801fc36:	7819      	ldrb	r1, [r3, #0]
 801fc38:	f012 fc1f 	bl	803247a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801fc3c:	4e0a      	ldr	r6, [pc, #40]	@ (801fc68 <MSC_BOT_Abort+0x54>)
 801fc3e:	4620      	mov	r0, r4
 801fc40:	7831      	ldrb	r1, [r6, #0]
 801fc42:	f012 fc1a 	bl	803247a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801fc46:	7a6b      	ldrb	r3, [r5, #9]
 801fc48:	2b02      	cmp	r3, #2
 801fc4a:	d10a      	bne.n	801fc62 <MSC_BOT_Abort+0x4e>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801fc4c:	7831      	ldrb	r1, [r6, #0]
 801fc4e:	4620      	mov	r0, r4
 801fc50:	f012 fc13 	bl	803247a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801fc54:	4b03      	ldr	r3, [pc, #12]	@ (801fc64 <MSC_BOT_Abort+0x50>)
 801fc56:	4620      	mov	r0, r4
 801fc58:	7819      	ldrb	r1, [r3, #0]
  }
}
 801fc5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801fc5e:	f012 bc0c 	b.w	803247a <USBD_LL_StallEP>
}
 801fc62:	bd70      	pop	{r4, r5, r6, pc}
 801fc64:	20000449 	.word	0x20000449
 801fc68:	2000044a 	.word	0x2000044a

0801fc6c <MSC_BOT_Init>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc6c:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fc70:	eb00 0383 	add.w	r3, r0, r3, lsl #2
{
 801fc74:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fc76:	f8d3 52c0 	ldr.w	r5, [r3, #704]	@ 0x2c0
{
 801fc7a:	4604      	mov	r4, r0
  if (hmsc == NULL)
 801fc7c:	b1fd      	cbz	r5, 801fcbe <MSC_BOT_Init+0x52>
  hmsc->scsi_sense_head = 0U;
 801fc7e:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
  hmsc->bot_state = USBD_BOT_IDLE;
 801fc82:	2000      	movs	r0, #0
 801fc84:	8128      	strh	r0, [r5, #8]
  hmsc->scsi_sense_head = 0U;
 801fc86:	f8a2 0060 	strh.w	r0, [r2, #96]	@ 0x60
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801fc8a:	f882 0062 	strb.w	r0, [r2, #98]	@ 0x62
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801fc8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801fc92:	4e0b      	ldr	r6, [pc, #44]	@ (801fcc0 <MSC_BOT_Init+0x54>)
  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	4798      	blx	r3
  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801fc98:	7831      	ldrb	r1, [r6, #0]
 801fc9a:	4620      	mov	r0, r4
 801fc9c:	f012 fbe2 	bl	8032464 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 801fca0:	4b08      	ldr	r3, [pc, #32]	@ (801fcc4 <MSC_BOT_Init+0x58>)
 801fca2:	4620      	mov	r0, r4
 801fca4:	7819      	ldrb	r1, [r3, #0]
 801fca6:	f012 fbdd 	bl	8032464 <USBD_LL_FlushEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fcaa:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 801fcae:	7831      	ldrb	r1, [r6, #0]
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	231f      	movs	r3, #31
}
 801fcb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fcb8:	3210      	adds	r2, #16
 801fcba:	f012 bc1c 	b.w	80324f6 <USBD_LL_PrepareReceive>
}
 801fcbe:	bd70      	pop	{r4, r5, r6, pc}
 801fcc0:	20000449 	.word	0x20000449
 801fcc4:	2000044a 	.word	0x2000044a

0801fcc8 <MSC_BOT_Reset>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fcc8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fccc:	33b0      	adds	r3, #176	@ 0xb0
{
 801fcce:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fcd0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
{
 801fcd4:	4604      	mov	r4, r0
  if (hmsc == NULL)
 801fcd6:	b1ad      	cbz	r5, 801fd04 <MSC_BOT_Reset+0x3c>
  hmsc->bot_state  = USBD_BOT_IDLE;
 801fcd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801fcdc:	812b      	strh	r3, [r5, #8]
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801fcde:	4b0a      	ldr	r3, [pc, #40]	@ (801fd08 <MSC_BOT_Reset+0x40>)
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801fce0:	4e0a      	ldr	r6, [pc, #40]	@ (801fd0c <MSC_BOT_Reset+0x44>)
  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801fce2:	7819      	ldrb	r1, [r3, #0]
 801fce4:	f012 fbd4 	bl	8032490 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801fce8:	7831      	ldrb	r1, [r6, #0]
 801fcea:	4620      	mov	r0, r4
 801fcec:	f012 fbd0 	bl	8032490 <USBD_LL_ClearStallEP>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fcf0:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 801fcf4:	7831      	ldrb	r1, [r6, #0]
 801fcf6:	4620      	mov	r0, r4
 801fcf8:	231f      	movs	r3, #31
}
 801fcfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fcfe:	3210      	adds	r2, #16
 801fd00:	f012 bbf9 	b.w	80324f6 <USBD_LL_PrepareReceive>
}
 801fd04:	bd70      	pop	{r4, r5, r6, pc}
 801fd06:	bf00      	nop
 801fd08:	2000044a 	.word	0x2000044a
 801fd0c:	20000449 	.word	0x20000449

0801fd10 <MSC_BOT_DeInit>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fd10:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fd14:	33b0      	adds	r3, #176	@ 0xb0
 801fd16:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  if (hmsc != NULL)
 801fd1a:	b10b      	cbz	r3, 801fd20 <MSC_BOT_DeInit+0x10>
    hmsc->bot_state = USBD_BOT_IDLE;
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	721a      	strb	r2, [r3, #8]
}
 801fd20:	4770      	bx	lr
	...

0801fd24 <MSC_BOT_SendCSW>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fd24:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fd28:	33b0      	adds	r3, #176	@ 0xb0
{
 801fd2a:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fd2c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
{
 801fd30:	4604      	mov	r4, r0
  if (hmsc == NULL)
 801fd32:	b1d5      	cbz	r5, 801fd6a <MSC_BOT_SendCSW+0x46>
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801fd34:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 801fd38:	4a0c      	ldr	r2, [pc, #48]	@ (801fd6c <MSC_BOT_SendCSW+0x48>)
  hmsc->csw.bStatus = CSW_Status;
 801fd3a:	f883 103c 	strb.w	r1, [r3, #60]	@ 0x3c
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 801fd3e:	490c      	ldr	r1, [pc, #48]	@ (801fd70 <MSC_BOT_SendCSW+0x4c>)
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801fd40:	631a      	str	r2, [r3, #48]	@ 0x30
  hmsc->bot_state = USBD_BOT_IDLE;
 801fd42:	2300      	movs	r3, #0
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 801fd44:	f505 5281 	add.w	r2, r5, #4128	@ 0x1020
  hmsc->bot_state = USBD_BOT_IDLE;
 801fd48:	722b      	strb	r3, [r5, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 801fd4a:	7809      	ldrb	r1, [r1, #0]
 801fd4c:	230d      	movs	r3, #13
 801fd4e:	3210      	adds	r2, #16
 801fd50:	f012 fbc6 	bl	80324e0 <USBD_LL_Transmit>
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fd54:	4907      	ldr	r1, [pc, #28]	@ (801fd74 <MSC_BOT_SendCSW+0x50>)
 801fd56:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 801fd5a:	4620      	mov	r0, r4
 801fd5c:	7809      	ldrb	r1, [r1, #0]
}
 801fd5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801fd62:	231f      	movs	r3, #31
 801fd64:	3210      	adds	r2, #16
 801fd66:	f012 bbc6 	b.w	80324f6 <USBD_LL_PrepareReceive>
}
 801fd6a:	bd70      	pop	{r4, r5, r6, pc}
 801fd6c:	53425355 	.word	0x53425355
 801fd70:	2000044a 	.word	0x2000044a
 801fd74:	20000449 	.word	0x20000449

0801fd78 <MSC_BOT_DataIn>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fd78:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fd7c:	33b0      	adds	r3, #176	@ 0xb0
{
 801fd7e:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fd80:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
{
 801fd84:	4604      	mov	r4, r0
  if (hmsc == NULL)
 801fd86:	b1b2      	cbz	r2, 801fdb6 <MSC_BOT_DataIn+0x3e>
  switch (hmsc->bot_state)
 801fd88:	7a13      	ldrb	r3, [r2, #8]
 801fd8a:	2b02      	cmp	r3, #2
 801fd8c:	d007      	beq.n	801fd9e <MSC_BOT_DataIn+0x26>
 801fd8e:	3b03      	subs	r3, #3
 801fd90:	2b01      	cmp	r3, #1
 801fd92:	d810      	bhi.n	801fdb6 <MSC_BOT_DataIn+0x3e>
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fd94:	2100      	movs	r1, #0
}
 801fd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fd9a:	f7ff bfc3 	b.w	801fd24 <MSC_BOT_SendCSW>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fd9e:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 801fda2:	461a      	mov	r2, r3
 801fda4:	7f59      	ldrb	r1, [r3, #29]
 801fda6:	321f      	adds	r2, #31
 801fda8:	f000 f97e 	bl	80200a8 <SCSI_ProcessCmd>
 801fdac:	2800      	cmp	r0, #0
 801fdae:	da02      	bge.n	801fdb6 <MSC_BOT_DataIn+0x3e>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fdb0:	2101      	movs	r1, #1
 801fdb2:	4620      	mov	r0, r4
 801fdb4:	e7ef      	b.n	801fd96 <MSC_BOT_DataIn+0x1e>
}
 801fdb6:	bd10      	pop	{r4, pc}

0801fdb8 <MSC_BOT_DataOut>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fdb8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fdbc:	33b0      	adds	r3, #176	@ 0xb0
{
 801fdbe:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fdc0:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
{
 801fdc4:	4604      	mov	r4, r0
  if (hmsc == NULL)
 801fdc6:	b11d      	cbz	r5, 801fdd0 <MSC_BOT_DataOut+0x18>
  switch (hmsc->bot_state)
 801fdc8:	7a2b      	ldrb	r3, [r5, #8]
 801fdca:	b113      	cbz	r3, 801fdd2 <MSC_BOT_DataOut+0x1a>
 801fdcc:	2b01      	cmp	r3, #1
 801fdce:	d05a      	beq.n	801fe86 <MSC_BOT_DataOut+0xce>
}
 801fdd0:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 801fdd2:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 801fdd6:	6973      	ldr	r3, [r6, #20]
 801fdd8:	6373      	str	r3, [r6, #52]	@ 0x34
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801fdda:	69b3      	ldr	r3, [r6, #24]
 801fddc:	63b3      	str	r3, [r6, #56]	@ 0x38
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801fdde:	4b2f      	ldr	r3, [pc, #188]	@ (801fe9c <MSC_BOT_DataOut+0xe4>)
 801fde0:	7819      	ldrb	r1, [r3, #0]
 801fde2:	f012 fb93 	bl	803250c <USBD_LL_GetRxDataSize>
 801fde6:	281f      	cmp	r0, #31
 801fde8:	d10a      	bne.n	801fe00 <MSC_BOT_DataOut+0x48>
 801fdea:	6932      	ldr	r2, [r6, #16]
 801fdec:	4b2c      	ldr	r3, [pc, #176]	@ (801fea0 <MSC_BOT_DataOut+0xe8>)
 801fdee:	429a      	cmp	r2, r3
 801fdf0:	d106      	bne.n	801fe00 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fdf2:	7f71      	ldrb	r1, [r6, #29]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801fdf4:	2901      	cmp	r1, #1
 801fdf6:	d803      	bhi.n	801fe00 <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801fdf8:	7fb3      	ldrb	r3, [r6, #30]
 801fdfa:	3b01      	subs	r3, #1
 801fdfc:	2b0f      	cmp	r3, #15
 801fdfe:	d90c      	bls.n	801fe1a <MSC_BOT_DataOut+0x62>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801fe00:	2320      	movs	r3, #32
 801fe02:	7f71      	ldrb	r1, [r6, #29]
 801fe04:	2205      	movs	r2, #5
 801fe06:	4620      	mov	r0, r4
 801fe08:	f000 fbe4 	bl	80205d4 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801fe0c:	2302      	movs	r3, #2
 801fe0e:	726b      	strb	r3, [r5, #9]
        MSC_BOT_Abort(pdev);
 801fe10:	4620      	mov	r0, r4
}
 801fe12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 801fe16:	f7ff befd 	b.w	801fc14 <MSC_BOT_Abort>
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fe1a:	f505 5280 	add.w	r2, r5, #4096	@ 0x1000
 801fe1e:	321f      	adds	r2, #31
 801fe20:	4620      	mov	r0, r4
 801fe22:	f000 f941 	bl	80200a8 <SCSI_ProcessCmd>
 801fe26:	2800      	cmp	r0, #0
 801fe28:	7a2b      	ldrb	r3, [r5, #8]
 801fe2a:	da07      	bge.n	801fe3c <MSC_BOT_DataOut+0x84>
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801fe2c:	2b05      	cmp	r3, #5
 801fe2e:	d1ef      	bne.n	801fe10 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fe30:	2101      	movs	r1, #1
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fe32:	4620      	mov	r0, r4
}
 801fe34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801fe38:	f7ff bf74 	b.w	801fd24 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801fe3c:	3b01      	subs	r3, #1
 801fe3e:	2b02      	cmp	r3, #2
 801fe40:	d9c6      	bls.n	801fdd0 <MSC_BOT_DataOut+0x18>
      if (hmsc->bot_data_length > 0U)
 801fe42:	68e9      	ldr	r1, [r5, #12]
 801fe44:	2900      	cmp	r1, #0
 801fe46:	d0f4      	beq.n	801fe32 <MSC_BOT_DataOut+0x7a>
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fe48:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 801fe4c:	33b0      	adds	r3, #176	@ 0xb0
 801fe4e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  if (hmsc == NULL)
 801fe52:	2800      	cmp	r0, #0
 801fe54:	d0bc      	beq.n	801fdd0 <MSC_BOT_DataOut+0x18>
  length = MIN(hmsc->cbw.dDataLength, len);
 801fe56:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
  hmsc->csw.dDataResidue -= len;
 801fe5a:	6b96      	ldr	r6, [r2, #56]	@ 0x38
  length = MIN(hmsc->cbw.dDataLength, len);
 801fe5c:	6993      	ldr	r3, [r2, #24]
  hmsc->csw.dDataResidue -= len;
 801fe5e:	1a76      	subs	r6, r6, r1
 801fe60:	6396      	str	r6, [r2, #56]	@ 0x38
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801fe62:	428b      	cmp	r3, r1
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801fe64:	f04f 0600 	mov.w	r6, #0
 801fe68:	f882 603c 	strb.w	r6, [r2, #60]	@ 0x3c
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801fe6c:	bf28      	it	cs
 801fe6e:	460b      	movcs	r3, r1
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801fe70:	2204      	movs	r2, #4
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801fe72:	490c      	ldr	r1, [pc, #48]	@ (801fea4 <MSC_BOT_DataOut+0xec>)
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801fe74:	7202      	strb	r2, [r0, #8]
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801fe76:	7809      	ldrb	r1, [r1, #0]
 801fe78:	f105 0210 	add.w	r2, r5, #16
 801fe7c:	4620      	mov	r0, r4
}
 801fe7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801fe82:	f012 bb2d 	b.w	80324e0 <USBD_LL_Transmit>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801fe86:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 801fe8a:	461a      	mov	r2, r3
 801fe8c:	7f59      	ldrb	r1, [r3, #29]
 801fe8e:	321f      	adds	r2, #31
 801fe90:	f000 f90a 	bl	80200a8 <SCSI_ProcessCmd>
 801fe94:	2800      	cmp	r0, #0
 801fe96:	da9b      	bge.n	801fdd0 <MSC_BOT_DataOut+0x18>
 801fe98:	e7ca      	b.n	801fe30 <MSC_BOT_DataOut+0x78>
 801fe9a:	bf00      	nop
 801fe9c:	20000449 	.word	0x20000449
 801fea0:	43425355 	.word	0x43425355
 801fea4:	2000044a 	.word	0x2000044a

0801fea8 <MSC_BOT_CplClrFeature>:
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fea8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801feac:	33b0      	adds	r3, #176	@ 0xb0
{
 801feae:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801feb0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
{
 801feb4:	4604      	mov	r4, r0
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801feb6:	b1b3      	cbz	r3, 801fee6 <MSC_BOT_CplClrFeature+0x3e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801feb8:	7a5b      	ldrb	r3, [r3, #9]
 801feba:	2b02      	cmp	r3, #2
 801febc:	d10a      	bne.n	801fed4 <MSC_BOT_CplClrFeature+0x2c>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801febe:	4b0a      	ldr	r3, [pc, #40]	@ (801fee8 <MSC_BOT_CplClrFeature+0x40>)
 801fec0:	7819      	ldrb	r1, [r3, #0]
 801fec2:	f012 fada 	bl	803247a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801fec6:	4b09      	ldr	r3, [pc, #36]	@ (801feec <MSC_BOT_CplClrFeature+0x44>)
 801fec8:	4620      	mov	r0, r4
 801feca:	7819      	ldrb	r1, [r3, #0]
  }
  else
  {
    return;
  }
}
 801fecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801fed0:	f012 bad3 	b.w	803247a <USBD_LL_StallEP>
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 801fed4:	060a      	lsls	r2, r1, #24
 801fed6:	d506      	bpl.n	801fee6 <MSC_BOT_CplClrFeature+0x3e>
 801fed8:	2b01      	cmp	r3, #1
 801feda:	d004      	beq.n	801fee6 <MSC_BOT_CplClrFeature+0x3e>
}
 801fedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801fee0:	2101      	movs	r1, #1
 801fee2:	f7ff bf1f 	b.w	801fd24 <MSC_BOT_SendCSW>
}
 801fee6:	bd10      	pop	{r4, pc}
 801fee8:	2000044a 	.word	0x2000044a
 801feec:	20000449 	.word	0x20000449

0801fef0 <SCSI_SenseCode.constprop.0>:

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fef0:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 801fef4:	33b0      	adds	r3, #176	@ 0xb0
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 801fef6:	b530      	push	{r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801fef8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hmsc == NULL)
 801fefc:	b1b3      	cbz	r3, 801ff2c <SCSI_SenseCode.constprop.0+0x3c>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801fefe:	f503 5480 	add.w	r4, r3, #4096	@ 0x1000
 801ff02:	f894 0061 	ldrb.w	r0, [r4, #97]	@ 0x61
 801ff06:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801ff0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801ff0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801ff12:	2200      	movs	r2, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801ff14:	f883 1040 	strb.w	r1, [r3, #64]	@ 0x40
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801ff18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  hmsc->scsi_sense_tail++;
 801ff1c:	1c43      	adds	r3, r0, #1
 801ff1e:	b2db      	uxtb	r3, r3

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801ff20:	2b04      	cmp	r3, #4
  hmsc->scsi_sense_tail++;
 801ff22:	bf14      	ite	ne
 801ff24:	f884 3061 	strbne.w	r3, [r4, #97]	@ 0x61
  {
    hmsc->scsi_sense_tail = 0U;
 801ff28:	f884 2061 	strbeq.w	r2, [r4, #97]	@ 0x61
  }
}
 801ff2c:	bd30      	pop	{r4, r5, pc}
	...

0801ff30 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801ff30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff34:	4605      	mov	r5, r0
 801ff36:	4608      	mov	r0, r1
 801ff38:	f8d5 22d4 	ldr.w	r2, [r5, #724]	@ 0x2d4
 801ff3c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ff40:	f8d2 72c0 	ldr.w	r7, [r2, #704]	@ 0x2c0
  uint32_t len;

  if (hmsc == NULL)
 801ff44:	b1ef      	cbz	r7, 801ff82 <SCSI_ProcessWrite+0x52>
  {
    return -1;
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ff46:	f507 5480 	add.w	r4, r7, #4096	@ 0x1000
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801ff4a:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ff4e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 801ff52:	6f26      	ldr	r6, [r4, #112]	@ 0x70
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801ff54:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801ff58:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ff5a:	435e      	muls	r6, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 801ff5c:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801ff60:	f107 0710 	add.w	r7, r7, #16
  len = MIN(len, MSC_MEDIA_PACKET);
 801ff64:	bf28      	it	cs
 801ff66:	f44f 5680 	movcs.w	r6, #4096	@ 0x1000
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801ff6a:	4639      	mov	r1, r7
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 801ff6c:	fbb6 f3f3 	udiv	r3, r6, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801ff70:	b29b      	uxth	r3, r3
 801ff72:	47c0      	blx	r8
 801ff74:	2800      	cmp	r0, #0
 801ff76:	da07      	bge.n	801ff88 <SCSI_ProcessWrite+0x58>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801ff78:	2203      	movs	r2, #3
 801ff7a:	2104      	movs	r1, #4
 801ff7c:	4628      	mov	r0, r5
 801ff7e:	f7ff ffb7 	bl	801fef0 <SCSI_SenseCode.constprop.0>
    return -1;
 801ff82:	f04f 30ff 	mov.w	r0, #4294967295
 801ff86:	e011      	b.n	801ffac <SCSI_ProcessWrite+0x7c>
    return -1;
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801ff88:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 801ff8a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 801ff8e:	fbb6 f0f3 	udiv	r0, r6, r3
 801ff92:	4402      	add	r2, r0
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ff94:	6f21      	ldr	r1, [r4, #112]	@ 0x70
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801ff96:	66e2      	str	r2, [r4, #108]	@ 0x6c

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801ff98:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ff9a:	1a09      	subs	r1, r1, r0
  hmsc->csw.dDataResidue -= len;
 801ff9c:	1b92      	subs	r2, r2, r6
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801ff9e:	6721      	str	r1, [r4, #112]	@ 0x70
  hmsc->csw.dDataResidue -= len;
 801ffa0:	63a2      	str	r2, [r4, #56]	@ 0x38

  if (hmsc->scsi_blk_len == 0U)
 801ffa2:	b929      	cbnz	r1, 801ffb0 <SCSI_ProcessWrite+0x80>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801ffa4:	4628      	mov	r0, r5
 801ffa6:	f7ff febd 	bl	801fd24 <MSC_BOT_SendCSW>

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
  }

  return 0;
 801ffaa:	2000      	movs	r0, #0
}
 801ffac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801ffb0:	434b      	muls	r3, r1
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801ffb2:	4906      	ldr	r1, [pc, #24]	@ (801ffcc <SCSI_ProcessWrite+0x9c>)
 801ffb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ffb8:	7809      	ldrb	r1, [r1, #0]
 801ffba:	bf28      	it	cs
 801ffbc:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 801ffc0:	463a      	mov	r2, r7
 801ffc2:	4628      	mov	r0, r5
 801ffc4:	f012 fa97 	bl	80324f6 <USBD_LL_PrepareReceive>
 801ffc8:	e7ef      	b.n	801ffaa <SCSI_ProcessWrite+0x7a>
 801ffca:	bf00      	nop
 801ffcc:	20000449 	.word	0x20000449

0801ffd0 <SCSI_ProcessRead>:
{
 801ffd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffd4:	4606      	mov	r6, r0
 801ffd6:	4608      	mov	r0, r1
 801ffd8:	f8d6 22d4 	ldr.w	r2, [r6, #724]	@ 0x2d4
 801ffdc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801ffe0:	f8d2 72c0 	ldr.w	r7, [r2, #704]	@ 0x2c0
  if (hmsc == NULL)
 801ffe4:	b1ef      	cbz	r7, 8020022 <SCSI_ProcessRead+0x52>
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ffe6:	f507 5480 	add.w	r4, r7, #4096	@ 0x1000
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 801ffea:	f8d2 22c4 	ldr.w	r2, [r2, #708]	@ 0x2c4
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801ffee:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 801fff2:	6f25      	ldr	r5, [r4, #112]	@ 0x70
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 801fff4:	f8d2 9010 	ldr.w	r9, [r2, #16]
 801fff8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801fffa:	435d      	muls	r5, r3
  len = MIN(len, MSC_MEDIA_PACKET);
 801fffc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8020000:	f107 0810 	add.w	r8, r7, #16
  len = MIN(len, MSC_MEDIA_PACKET);
 8020004:	bf28      	it	cs
 8020006:	f44f 5580 	movcs.w	r5, #4096	@ 0x1000
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 802000a:	4641      	mov	r1, r8
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 802000c:	fbb5 f3f3 	udiv	r3, r5, r3
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8020010:	b29b      	uxth	r3, r3
 8020012:	47c8      	blx	r9
 8020014:	2800      	cmp	r0, #0
 8020016:	da07      	bge.n	8020028 <SCSI_ProcessRead+0x58>
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8020018:	2211      	movs	r2, #17
 802001a:	2104      	movs	r1, #4
 802001c:	4630      	mov	r0, r6
 802001e:	f7ff ff67 	bl	801fef0 <SCSI_SenseCode.constprop.0>
    return -1;
 8020022:	f04f 30ff 	mov.w	r0, #4294967295
 8020026:	e015      	b.n	8020054 <SCSI_ProcessRead+0x84>
  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8020028:	490d      	ldr	r1, [pc, #52]	@ (8020060 <SCSI_ProcessRead+0x90>)
 802002a:	462b      	mov	r3, r5
 802002c:	4642      	mov	r2, r8
 802002e:	7809      	ldrb	r1, [r1, #0]
 8020030:	4630      	mov	r0, r6
 8020032:	f012 fa55 	bl	80324e0 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8020036:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8020038:	f8b4 2064 	ldrh.w	r2, [r4, #100]	@ 0x64
 802003c:	fbb5 f2f2 	udiv	r2, r5, r2
 8020040:	4413      	add	r3, r2
 8020042:	66e3      	str	r3, [r4, #108]	@ 0x6c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8020044:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8020046:	1a9b      	subs	r3, r3, r2
  hmsc->csw.dDataResidue -= len;
 8020048:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 802004a:	6723      	str	r3, [r4, #112]	@ 0x70
  hmsc->csw.dDataResidue -= len;
 802004c:	1b52      	subs	r2, r2, r5
 802004e:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hmsc->scsi_blk_len == 0U)
 8020050:	b113      	cbz	r3, 8020058 <SCSI_ProcessRead+0x88>
  return 0;
 8020052:	2000      	movs	r0, #0
}
 8020054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8020058:	2303      	movs	r3, #3
 802005a:	723b      	strb	r3, [r7, #8]
 802005c:	e7f9      	b.n	8020052 <SCSI_ProcessRead+0x82>
 802005e:	bf00      	nop
 8020060:	2000044a 	.word	0x2000044a

08020064 <SCSI_UpdateBotData.isra.0>:
  * @param  hmsc handler
  * @param  pBuff: Data buffer
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
 8020064:	b510      	push	{r4, lr}
                                 uint8_t *pBuff, uint16_t length)
{
  uint16_t len = length;

  if (hmsc == NULL)
 8020066:	b108      	cbz	r0, 802006c <SCSI_UpdateBotData.isra.0+0x8>
  {
    return -1;
  }

  hmsc->bot_data_length = len;
 8020068:	60c2      	str	r2, [r0, #12]

  while (len != 0U)
 802006a:	b902      	cbnz	r2, 802006e <SCSI_UpdateBotData.isra.0+0xa>
    len--;
    hmsc->bot_data[len] = pBuff[len];
  }

  return 0;
}
 802006c:	bd10      	pop	{r4, pc}
    len--;
 802006e:	3a01      	subs	r2, #1
 8020070:	b292      	uxth	r2, r2
    hmsc->bot_data[len] = pBuff[len];
 8020072:	1883      	adds	r3, r0, r2
 8020074:	5c8c      	ldrb	r4, [r1, r2]
 8020076:	741c      	strb	r4, [r3, #16]
 8020078:	e7f7      	b.n	802006a <SCSI_UpdateBotData.isra.0+0x6>

0802007a <SCSI_CheckAddressRange.isra.0>:
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
 802007a:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802007c:	f8d0 42d4 	ldr.w	r4, [r0, #724]	@ 0x2d4
 8020080:	34b0      	adds	r4, #176	@ 0xb0
 8020082:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
  if (hmsc == NULL)
 8020086:	b14b      	cbz	r3, 802009c <SCSI_CheckAddressRange.isra.0+0x22>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8020088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802008c:	4411      	add	r1, r2
 802008e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020090:	4299      	cmp	r1, r3
 8020092:	d906      	bls.n	80200a2 <SCSI_CheckAddressRange.isra.0+0x28>
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8020094:	2221      	movs	r2, #33	@ 0x21
 8020096:	2105      	movs	r1, #5
 8020098:	f7ff ff2a 	bl	801fef0 <SCSI_SenseCode.constprop.0>
    return -1;
 802009c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80200a0:	bd10      	pop	{r4, pc}
  return 0;
 80200a2:	2000      	movs	r0, #0
 80200a4:	e7fc      	b.n	80200a0 <SCSI_CheckAddressRange.isra.0+0x26>
	...

080200a8 <SCSI_ProcessCmd>:
{
 80200a8:	f8d0 32d4 	ldr.w	r3, [r0, #724]	@ 0x2d4
 80200ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80200b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80200b4:	f8d3 42c0 	ldr.w	r4, [r3, #704]	@ 0x2c0
{
 80200b8:	4605      	mov	r5, r0
 80200ba:	460f      	mov	r7, r1
 80200bc:	4616      	mov	r6, r2
  if (hmsc == NULL)
 80200be:	2c00      	cmp	r4, #0
 80200c0:	f000 80af 	beq.w	8020222 <SCSI_ProcessCmd+0x17a>
  switch (cmd[0])
 80200c4:	7812      	ldrb	r2, [r2, #0]
 80200c6:	2a2f      	cmp	r2, #47	@ 0x2f
 80200c8:	d844      	bhi.n	8020154 <SCSI_ProcessCmd+0xac>
 80200ca:	2a19      	cmp	r2, #25
 80200cc:	d810      	bhi.n	80200f0 <SCSI_ProcessCmd+0x48>
 80200ce:	2a03      	cmp	r2, #3
 80200d0:	f000 80c3 	beq.w	802025a <SCSI_ProcessCmd+0x1b2>
 80200d4:	2a12      	cmp	r2, #18
 80200d6:	f000 80f0 	beq.w	80202ba <SCSI_ProcessCmd+0x212>
 80200da:	2a00      	cmp	r2, #0
 80200dc:	f000 8098 	beq.w	8020210 <SCSI_ProcessCmd+0x168>
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80200e0:	2220      	movs	r2, #32
 80200e2:	2105      	movs	r1, #5
 80200e4:	4628      	mov	r0, r5
 80200e6:	f7ff ff03 	bl	801fef0 <SCSI_SenseCode.constprop.0>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80200ea:	2302      	movs	r3, #2
 80200ec:	7263      	strb	r3, [r4, #9]
      break;
 80200ee:	e098      	b.n	8020222 <SCSI_ProcessCmd+0x17a>
  switch (cmd[0])
 80200f0:	3a1a      	subs	r2, #26
 80200f2:	2a15      	cmp	r2, #21
 80200f4:	d8f4      	bhi.n	80200e0 <SCSI_ProcessCmd+0x38>
 80200f6:	a101      	add	r1, pc, #4	@ (adr r1, 80200fc <SCSI_ProcessCmd+0x54>)
 80200f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80200fc:	0802033f 	.word	0x0802033f
 8020100:	08020301 	.word	0x08020301
 8020104:	080200e1 	.word	0x080200e1
 8020108:	080200e1 	.word	0x080200e1
 802010c:	08020331 	.word	0x08020331
 8020110:	080200e1 	.word	0x080200e1
 8020114:	080200e1 	.word	0x080200e1
 8020118:	080200e1 	.word	0x080200e1
 802011c:	080200e1 	.word	0x080200e1
 8020120:	08020383 	.word	0x08020383
 8020124:	080200e1 	.word	0x080200e1
 8020128:	080203d3 	.word	0x080203d3
 802012c:	080200e1 	.word	0x080200e1
 8020130:	080200e1 	.word	0x080200e1
 8020134:	0802041f 	.word	0x0802041f
 8020138:	080200e1 	.word	0x080200e1
 802013c:	080204d5 	.word	0x080204d5
 8020140:	080200e1 	.word	0x080200e1
 8020144:	080200e1 	.word	0x080200e1
 8020148:	080200e1 	.word	0x080200e1
 802014c:	080200e1 	.word	0x080200e1
 8020150:	0802058f 	.word	0x0802058f
 8020154:	2aa8      	cmp	r2, #168	@ 0xa8
 8020156:	f000 819d 	beq.w	8020494 <SCSI_ProcessCmd+0x3ec>
 802015a:	d836      	bhi.n	80201ca <SCSI_ProcessCmd+0x122>
 802015c:	2a5a      	cmp	r2, #90	@ 0x5a
 802015e:	f000 80ff 	beq.w	8020360 <SCSI_ProcessCmd+0x2b8>
 8020162:	2a9e      	cmp	r2, #158	@ 0x9e
 8020164:	d1bc      	bne.n	80200e0 <SCSI_ProcessCmd+0x38>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 8020166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 802016a:	f504 5283 	add.w	r2, r4, #4192	@ 0x1060
 802016e:	f504 5183 	add.w	r1, r4, #4192	@ 0x1060
 8020172:	685b      	ldr	r3, [r3, #4]
 8020174:	3204      	adds	r2, #4
 8020176:	3108      	adds	r1, #8
 8020178:	4638      	mov	r0, r7
 802017a:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 802017c:	2800      	cmp	r0, #0
 802017e:	f040 810f 	bne.w	80203a0 <SCSI_ProcessCmd+0x2f8>
 8020182:	f504 5180 	add.w	r1, r4, #4096	@ 0x1000
 8020186:	f891 3062 	ldrb.w	r3, [r1, #98]	@ 0x62
 802018a:	2b02      	cmp	r3, #2
 802018c:	f000 8108 	beq.w	80203a0 <SCSI_ProcessCmd+0x2f8>
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8020190:	f8d6 300a 	ldr.w	r3, [r6, #10]
 8020194:	f104 020f 	add.w	r2, r4, #15
 8020198:	ba1b      	rev	r3, r3
 802019a:	60e3      	str	r3, [r4, #12]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 802019c:	4413      	add	r3, r2
 802019e:	429a      	cmp	r2, r3
 80201a0:	f040 813a 	bne.w	8020418 <SCSI_ProcessCmd+0x370>
  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80201a4:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 80201a6:	3b01      	subs	r3, #1
 80201a8:	0e1a      	lsrs	r2, r3, #24
 80201aa:	7522      	strb	r2, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80201ac:	0c1a      	lsrs	r2, r3, #16
 80201ae:	7562      	strb	r2, [r4, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80201b0:	0a1a      	lsrs	r2, r3, #8
 80201b2:	75a2      	strb	r2, [r4, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80201b4:	75e3      	strb	r3, [r4, #23]
  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80201b6:	f8b1 3064 	ldrh.w	r3, [r1, #100]	@ 0x64
 80201ba:	2200      	movs	r2, #0
 80201bc:	ba5b      	rev16	r3, r3
 80201be:	8322      	strh	r2, [r4, #24]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80201c0:	8363      	strh	r3, [r4, #26]
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80201c2:	f8d6 300a 	ldr.w	r3, [r6, #10]
 80201c6:	ba1b      	rev	r3, r3
 80201c8:	e075      	b.n	80202b6 <SCSI_ProcessCmd+0x20e>
  switch (cmd[0])
 80201ca:	2aaa      	cmp	r2, #170	@ 0xaa
 80201cc:	d188      	bne.n	80200e0 <SCSI_ProcessCmd+0x38>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80201ce:	7a22      	ldrb	r2, [r4, #8]
 80201d0:	2a00      	cmp	r2, #0
 80201d2:	f040 81cc 	bne.w	802056e <SCSI_ProcessCmd+0x4c6>
    if (hmsc->cbw.dDataLength == 0U)
 80201d6:	f504 5880 	add.w	r8, r4, #4096	@ 0x1000
 80201da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80201de:	b1da      	cbz	r2, 8020218 <SCSI_ProcessCmd+0x170>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80201e0:	f998 201c 	ldrsb.w	r2, [r8, #28]
 80201e4:	2a00      	cmp	r2, #0
 80201e6:	db17      	blt.n	8020218 <SCSI_ProcessCmd+0x170>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80201e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80201ec:	4608      	mov	r0, r1
 80201ee:	689b      	ldr	r3, [r3, #8]
 80201f0:	4798      	blx	r3
 80201f2:	bb48      	cbnz	r0, 8020248 <SCSI_ProcessCmd+0x1a0>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80201f4:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 80201f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80201fc:	4638      	mov	r0, r7
 80201fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8020202:	68db      	ldr	r3, [r3, #12]
 8020204:	4798      	blx	r3
 8020206:	2800      	cmp	r0, #0
 8020208:	f000 81b8 	beq.w	802057c <SCSI_ProcessCmd+0x4d4>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 802020c:	2227      	movs	r2, #39	@ 0x27
 802020e:	e01c      	b.n	802024a <SCSI_ProcessCmd+0x1a2>
  if (hmsc->cbw.dDataLength != 0U)
 8020210:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8020214:	6991      	ldr	r1, [r2, #24]
 8020216:	b139      	cbz	r1, 8020228 <SCSI_ProcessCmd+0x180>
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8020218:	2220      	movs	r2, #32
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 802021a:	2105      	movs	r1, #5
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 802021c:	4628      	mov	r0, r5
 802021e:	f7ff fe67 	bl	801fef0 <SCSI_SenseCode.constprop.0>
    return -1;
 8020222:	f04f 30ff 	mov.w	r0, #4294967295
 8020226:	e015      	b.n	8020254 <SCSI_ProcessCmd+0x1ac>
  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020228:	f892 1062 	ldrb.w	r1, [r2, #98]	@ 0x62
 802022c:	2902      	cmp	r1, #2
 802022e:	d105      	bne.n	802023c <SCSI_ProcessCmd+0x194>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020230:	223a      	movs	r2, #58	@ 0x3a
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020232:	f7ff fe5d 	bl	801fef0 <SCSI_SenseCode.constprop.0>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8020236:	2305      	movs	r3, #5
 8020238:	7223      	strb	r3, [r4, #8]
      return -1;
 802023a:	e7f2      	b.n	8020222 <SCSI_ProcessCmd+0x17a>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 802023c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8020240:	4638      	mov	r0, r7
 8020242:	689b      	ldr	r3, [r3, #8]
 8020244:	4798      	blx	r3
 8020246:	b118      	cbz	r0, 8020250 <SCSI_ProcessCmd+0x1a8>
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8020248:	223a      	movs	r2, #58	@ 0x3a
 802024a:	2102      	movs	r1, #2
 802024c:	4628      	mov	r0, r5
 802024e:	e7f0      	b.n	8020232 <SCSI_ProcessCmd+0x18a>
  hmsc->bot_data_length = 0U;
 8020250:	60e0      	str	r0, [r4, #12]
  return 0;
 8020252:	2000      	movs	r0, #0
}
 8020254:	b002      	add	sp, #8
 8020256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hmsc->cbw.dDataLength == 0U)
 802025a:	f504 5780 	add.w	r7, r4, #4096	@ 0x1000
 802025e:	69bb      	ldr	r3, [r7, #24]
 8020260:	2b00      	cmp	r3, #0
 8020262:	d0d9      	beq.n	8020218 <SCSI_ProcessCmd+0x170>
    hmsc->bot_data[i] = 0U;
 8020264:	2211      	movs	r2, #17
 8020266:	18a0      	adds	r0, r4, r2
 8020268:	2100      	movs	r1, #0
 802026a:	f01d f91b 	bl	803d4a4 <memset>
  hmsc->bot_data[0] = 0x70U;
 802026e:	2370      	movs	r3, #112	@ 0x70
 8020270:	7423      	strb	r3, [r4, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8020272:	230c      	movs	r3, #12
 8020274:	75e3      	strb	r3, [r4, #23]
  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8020276:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 802027a:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 802027e:	429a      	cmp	r2, r3
 8020280:	d013      	beq.n	80202aa <SCSI_ProcessCmd+0x202>
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8020282:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8020286:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
    hmsc->scsi_sense_head++;
 802028a:	3301      	adds	r3, #1
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 802028c:	f892 1040 	ldrb.w	r1, [r2, #64]	@ 0x40
 8020290:	74a1      	strb	r1, [r4, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8020292:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 8020296:	7721      	strb	r1, [r4, #28]
    hmsc->scsi_sense_head++;
 8020298:	b2db      	uxtb	r3, r3
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 802029a:	2b04      	cmp	r3, #4
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 802029c:	f892 2045 	ldrb.w	r2, [r2, #69]	@ 0x45
 80202a0:	7762      	strb	r2, [r4, #29]
      hmsc->scsi_sense_head = 0U;
 80202a2:	bf08      	it	eq
 80202a4:	2300      	moveq	r3, #0
 80202a6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80202aa:	2312      	movs	r3, #18
 80202ac:	60e3      	str	r3, [r4, #12]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80202ae:	7932      	ldrb	r2, [r6, #4]
    hmsc->bot_data_length = params[4];
 80202b0:	429a      	cmp	r2, r3
 80202b2:	bf98      	it	ls
 80202b4:	4613      	movls	r3, r2
 80202b6:	60e3      	str	r3, [r4, #12]
 80202b8:	e7cb      	b.n	8020252 <SCSI_ProcessCmd+0x1aa>
  if (hmsc->cbw.dDataLength == 0U)
 80202ba:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 80202be:	6992      	ldr	r2, [r2, #24]
 80202c0:	2a00      	cmp	r2, #0
 80202c2:	d0a9      	beq.n	8020218 <SCSI_ProcessCmd+0x170>
  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80202c4:	7872      	ldrb	r2, [r6, #1]
 80202c6:	07d2      	lsls	r2, r2, #31
 80202c8:	d50c      	bpl.n	80202e4 <SCSI_ProcessCmd+0x23c>
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80202ca:	78b3      	ldrb	r3, [r6, #2]
 80202cc:	b92b      	cbnz	r3, 80202da <SCSI_ProcessCmd+0x232>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80202ce:	49bc      	ldr	r1, [pc, #752]	@ (80205c0 <SCSI_ProcessCmd+0x518>)
 80202d0:	2206      	movs	r2, #6
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80202d2:	4620      	mov	r0, r4
 80202d4:	f7ff fec6 	bl	8020064 <SCSI_UpdateBotData.isra.0>
      break;
 80202d8:	e7bb      	b.n	8020252 <SCSI_ProcessCmd+0x1aa>
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80202da:	2b80      	cmp	r3, #128	@ 0x80
 80202dc:	d11c      	bne.n	8020318 <SCSI_ProcessCmd+0x270>
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80202de:	49b9      	ldr	r1, [pc, #740]	@ (80205c4 <SCSI_ProcessCmd+0x51c>)
 80202e0:	2208      	movs	r2, #8
 80202e2:	e7f6      	b.n	80202d2 <SCSI_ProcessCmd+0x22a>
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80202e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
    if (params[4] <= len)
 80202e8:	7932      	ldrb	r2, [r6, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80202ea:	eb01 07c1 	add.w	r7, r1, r1, lsl #3
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 80202ee:	69d9      	ldr	r1, [r3, #28]
 80202f0:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    len = (uint16_t)pPage[4] + 5U;
 80202f4:	790b      	ldrb	r3, [r1, #4]
    if (params[4] <= len)
 80202f6:	3305      	adds	r3, #5
    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80202f8:	429a      	cmp	r2, r3
 80202fa:	bf28      	it	cs
 80202fc:	461a      	movcs	r2, r3
 80202fe:	e7e8      	b.n	80202d2 <SCSI_ProcessCmd+0x22a>
  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8020300:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8020304:	7933      	ldrb	r3, [r6, #4]
 8020306:	f892 1062 	ldrb.w	r1, [r2, #98]	@ 0x62
 802030a:	2901      	cmp	r1, #1
 802030c:	f003 0303 	and.w	r3, r3, #3
 8020310:	d104      	bne.n	802031c <SCSI_ProcessCmd+0x274>
 8020312:	2b02      	cmp	r3, #2
 8020314:	f040 814b 	bne.w	80205ae <SCSI_ProcessCmd+0x506>
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8020318:	2224      	movs	r2, #36	@ 0x24
 802031a:	e77e      	b.n	802021a <SCSI_ProcessCmd+0x172>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 802031c:	2b01      	cmp	r3, #1
 802031e:	d101      	bne.n	8020324 <SCSI_ProcessCmd+0x27c>
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8020320:	2300      	movs	r3, #0
 8020322:	e002      	b.n	802032a <SCSI_ProcessCmd+0x282>
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8020324:	2b02      	cmp	r3, #2
 8020326:	f040 8145 	bne.w	80205b4 <SCSI_ProcessCmd+0x50c>
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 802032a:	f882 3062 	strb.w	r3, [r2, #98]	@ 0x62
 802032e:	e144      	b.n	80205ba <SCSI_ProcessCmd+0x512>
  if (params[4] == 0U)
 8020330:	7933      	ldrb	r3, [r6, #4]
 8020332:	3b00      	subs	r3, #0
 8020334:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8020338:	bf18      	it	ne
 802033a:	2301      	movne	r3, #1
 802033c:	e7f5      	b.n	802032a <SCSI_ProcessCmd+0x282>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 802033e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8020342:	4638      	mov	r0, r7
 8020344:	68db      	ldr	r3, [r3, #12]
 8020346:	4798      	blx	r3
 8020348:	b120      	cbz	r0, 8020354 <SCSI_ProcessCmd+0x2ac>
    MSC_Mode_Sense6_data[2] |= 0x80U;
 802034a:	4a9f      	ldr	r2, [pc, #636]	@ (80205c8 <SCSI_ProcessCmd+0x520>)
 802034c:	7893      	ldrb	r3, [r2, #2]
 802034e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8020352:	7093      	strb	r3, [r2, #2]
  if (params[4] <= len)
 8020354:	7932      	ldrb	r2, [r6, #4]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8020356:	499c      	ldr	r1, [pc, #624]	@ (80205c8 <SCSI_ProcessCmd+0x520>)
 8020358:	2a04      	cmp	r2, #4
 802035a:	bf28      	it	cs
 802035c:	2204      	movcs	r2, #4
 802035e:	e7b8      	b.n	80202d2 <SCSI_ProcessCmd+0x22a>
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8020360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8020364:	4608      	mov	r0, r1
 8020366:	68db      	ldr	r3, [r3, #12]
 8020368:	4798      	blx	r3
 802036a:	b120      	cbz	r0, 8020376 <SCSI_ProcessCmd+0x2ce>
    MSC_Mode_Sense10_data[3] |= 0x80U;
 802036c:	4a97      	ldr	r2, [pc, #604]	@ (80205cc <SCSI_ProcessCmd+0x524>)
 802036e:	78d3      	ldrb	r3, [r2, #3]
 8020370:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8020374:	70d3      	strb	r3, [r2, #3]
  if (params[8] <= len)
 8020376:	7a32      	ldrb	r2, [r6, #8]
  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8020378:	4994      	ldr	r1, [pc, #592]	@ (80205cc <SCSI_ProcessCmd+0x524>)
 802037a:	2a08      	cmp	r2, #8
 802037c:	bf28      	it	cs
 802037e:	2208      	movcs	r2, #8
 8020380:	e7a7      	b.n	80202d2 <SCSI_ProcessCmd+0x22a>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8020382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8020386:	f10d 0202 	add.w	r2, sp, #2
 802038a:	685b      	ldr	r3, [r3, #4]
 802038c:	a901      	add	r1, sp, #4
 802038e:	4638      	mov	r0, r7
 8020390:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8020392:	b928      	cbnz	r0, 80203a0 <SCSI_ProcessCmd+0x2f8>
 8020394:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8020398:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 802039c:	2b02      	cmp	r3, #2
 802039e:	d102      	bne.n	80203a6 <SCSI_ProcessCmd+0x2fe>
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80203a0:	223a      	movs	r2, #58	@ 0x3a
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80203a2:	2102      	movs	r1, #2
 80203a4:	e73a      	b.n	802021c <SCSI_ProcessCmd+0x174>
    hmsc->bot_data[i] = 0U;
 80203a6:	6120      	str	r0, [r4, #16]
  hmsc->bot_data[3] = 0x08U;
 80203a8:	2308      	movs	r3, #8
 80203aa:	74e3      	strb	r3, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80203ac:	9b01      	ldr	r3, [sp, #4]
    hmsc->bot_data[i] = 0U;
 80203ae:	61a0      	str	r0, [r4, #24]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80203b0:	3b01      	subs	r3, #1
 80203b2:	0e1a      	lsrs	r2, r3, #24
 80203b4:	7522      	strb	r2, [r4, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80203b6:	0c1a      	lsrs	r2, r3, #16
 80203b8:	7562      	strb	r2, [r4, #21]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80203ba:	75e3      	strb	r3, [r4, #23]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80203bc:	0a1a      	lsrs	r2, r3, #8
  hmsc->bot_data[8] = 0x02U;
 80203be:	2302      	movs	r3, #2
 80203c0:	7623      	strb	r3, [r4, #24]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80203c2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80203c6:	75a2      	strb	r2, [r4, #22]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80203c8:	ba5b      	rev16	r3, r3
 80203ca:	8363      	strh	r3, [r4, #26]
  hmsc->bot_data_length = 12U;
 80203cc:	230c      	movs	r3, #12
 80203ce:	60e3      	str	r3, [r4, #12]
      break;
 80203d0:	e740      	b.n	8020254 <SCSI_ProcessCmd+0x1ac>
  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 80203d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80203d6:	f504 5283 	add.w	r2, r4, #4192	@ 0x1060
 80203da:	f504 5183 	add.w	r1, r4, #4192	@ 0x1060
 80203de:	685b      	ldr	r3, [r3, #4]
 80203e0:	3204      	adds	r2, #4
 80203e2:	3108      	adds	r1, #8
 80203e4:	4638      	mov	r0, r7
 80203e6:	4798      	blx	r3
  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80203e8:	2800      	cmp	r0, #0
 80203ea:	d1d9      	bne.n	80203a0 <SCSI_ProcessCmd+0x2f8>
 80203ec:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 80203f0:	f892 3062 	ldrb.w	r3, [r2, #98]	@ 0x62
 80203f4:	2b02      	cmp	r3, #2
 80203f6:	d0d3      	beq.n	80203a0 <SCSI_ProcessCmd+0x2f8>
  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80203f8:	6e93      	ldr	r3, [r2, #104]	@ 0x68
 80203fa:	3b01      	subs	r3, #1
 80203fc:	0e19      	lsrs	r1, r3, #24
 80203fe:	7421      	strb	r1, [r4, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8020400:	0c19      	lsrs	r1, r3, #16
 8020402:	7461      	strb	r1, [r4, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8020404:	0a19      	lsrs	r1, r3, #8
 8020406:	74a1      	strb	r1, [r4, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8020408:	74e3      	strb	r3, [r4, #19]
  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 802040a:	f8b2 3064 	ldrh.w	r3, [r2, #100]	@ 0x64
 802040e:	82a0      	strh	r0, [r4, #20]
 8020410:	ba5b      	rev16	r3, r3
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8020412:	82e3      	strh	r3, [r4, #22]
  hmsc->bot_data_length = 8U;
 8020414:	2308      	movs	r3, #8
 8020416:	e74e      	b.n	80202b6 <SCSI_ProcessCmd+0x20e>
    hmsc->bot_data[idx] = 0U;
 8020418:	f802 0f01 	strb.w	r0, [r2, #1]!
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 802041c:	e6bf      	b.n	802019e <SCSI_ProcessCmd+0xf6>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 802041e:	7a22      	ldrb	r2, [r4, #8]
 8020420:	bb72      	cbnz	r2, 8020480 <SCSI_ProcessCmd+0x3d8>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8020422:	f504 5880 	add.w	r8, r4, #4096	@ 0x1000
 8020426:	f998 201c 	ldrsb.w	r2, [r8, #28]
 802042a:	2a00      	cmp	r2, #0
 802042c:	f6bf aef4 	bge.w	8020218 <SCSI_ProcessCmd+0x170>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8020430:	f898 2062 	ldrb.w	r2, [r8, #98]	@ 0x62
 8020434:	2a02      	cmp	r2, #2
 8020436:	d0b3      	beq.n	80203a0 <SCSI_ProcessCmd+0x2f8>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8020438:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 802043c:	4638      	mov	r0, r7
 802043e:	689b      	ldr	r3, [r3, #8]
 8020440:	4798      	blx	r3
 8020442:	2800      	cmp	r0, #0
 8020444:	d1ac      	bne.n	80203a0 <SCSI_ProcessCmd+0x2f8>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8020446:	f8d6 1002 	ldr.w	r1, [r6, #2]
 802044a:	ba09      	rev	r1, r1
 802044c:	f8c8 106c 	str.w	r1, [r8, #108]	@ 0x6c
    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8020450:	f8b6 2007 	ldrh.w	r2, [r6, #7]
 8020454:	ba52      	rev16	r2, r2
 8020456:	b292      	uxth	r2, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020458:	f8c8 2070 	str.w	r2, [r8, #112]	@ 0x70
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 802045c:	4628      	mov	r0, r5
 802045e:	f7ff fe0c 	bl	802007a <SCSI_CheckAddressRange.isra.0>
 8020462:	2800      	cmp	r0, #0
 8020464:	f6ff aedd 	blt.w	8020222 <SCSI_ProcessCmd+0x17a>
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8020468:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 802046c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 8020470:	4353      	muls	r3, r2
 8020472:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8020476:	429a      	cmp	r2, r3
 8020478:	f47f aece 	bne.w	8020218 <SCSI_ProcessCmd+0x170>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 802047c:	2302      	movs	r3, #2
 802047e:	7223      	strb	r3, [r4, #8]
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  return SCSI_ProcessRead(pdev, lun);
 8020484:	4639      	mov	r1, r7
 8020486:	4628      	mov	r0, r5
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8020488:	60e3      	str	r3, [r4, #12]
}
 802048a:	b002      	add	sp, #8
 802048c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return SCSI_ProcessRead(pdev, lun);
 8020490:	f7ff bd9e 	b.w	801ffd0 <SCSI_ProcessRead>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8020494:	7a22      	ldrb	r2, [r4, #8]
 8020496:	2a00      	cmp	r2, #0
 8020498:	d1f2      	bne.n	8020480 <SCSI_ProcessCmd+0x3d8>
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 802049a:	f504 5880 	add.w	r8, r4, #4096	@ 0x1000
 802049e:	f998 201c 	ldrsb.w	r2, [r8, #28]
 80204a2:	2a00      	cmp	r2, #0
 80204a4:	f6bf aeb8 	bge.w	8020218 <SCSI_ProcessCmd+0x170>
    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80204a8:	f898 2062 	ldrb.w	r2, [r8, #98]	@ 0x62
 80204ac:	2a02      	cmp	r2, #2
 80204ae:	f43f af77 	beq.w	80203a0 <SCSI_ProcessCmd+0x2f8>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80204b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80204b6:	4608      	mov	r0, r1
 80204b8:	689b      	ldr	r3, [r3, #8]
 80204ba:	4798      	blx	r3
 80204bc:	2800      	cmp	r0, #0
 80204be:	f47f af6f 	bne.w	80203a0 <SCSI_ProcessCmd+0x2f8>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80204c2:	f8d6 1002 	ldr.w	r1, [r6, #2]
 80204c6:	ba09      	rev	r1, r1
 80204c8:	f8c8 106c 	str.w	r1, [r8, #108]	@ 0x6c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80204cc:	f8d6 2006 	ldr.w	r2, [r6, #6]
 80204d0:	ba12      	rev	r2, r2
 80204d2:	e7c1      	b.n	8020458 <SCSI_ProcessCmd+0x3b0>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80204d4:	7a22      	ldrb	r2, [r4, #8]
 80204d6:	2a00      	cmp	r2, #0
 80204d8:	d149      	bne.n	802056e <SCSI_ProcessCmd+0x4c6>
    if (hmsc->cbw.dDataLength == 0U)
 80204da:	f504 5880 	add.w	r8, r4, #4096	@ 0x1000
 80204de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80204e2:	2a00      	cmp	r2, #0
 80204e4:	f43f ae98 	beq.w	8020218 <SCSI_ProcessCmd+0x170>
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80204e8:	f998 201c 	ldrsb.w	r2, [r8, #28]
 80204ec:	2a00      	cmp	r2, #0
 80204ee:	f6ff ae93 	blt.w	8020218 <SCSI_ProcessCmd+0x170>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80204f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80204f6:	4638      	mov	r0, r7
 80204f8:	689b      	ldr	r3, [r3, #8]
 80204fa:	4798      	blx	r3
 80204fc:	2800      	cmp	r0, #0
 80204fe:	f47f af4f 	bne.w	80203a0 <SCSI_ProcessCmd+0x2f8>
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8020502:	f8d5 32d4 	ldr.w	r3, [r5, #724]	@ 0x2d4
 8020506:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802050a:	4638      	mov	r0, r7
 802050c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8020510:	68db      	ldr	r3, [r3, #12]
 8020512:	4798      	blx	r3
 8020514:	b108      	cbz	r0, 802051a <SCSI_ProcessCmd+0x472>
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8020516:	2227      	movs	r2, #39	@ 0x27
 8020518:	e743      	b.n	80203a2 <SCSI_ProcessCmd+0x2fa>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802051a:	f8d6 1002 	ldr.w	r1, [r6, #2]
 802051e:	ba09      	rev	r1, r1
 8020520:	f8c8 106c 	str.w	r1, [r8, #108]	@ 0x6c
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8020524:	f8b6 2007 	ldrh.w	r2, [r6, #7]
 8020528:	ba52      	rev16	r2, r2
 802052a:	b292      	uxth	r2, r2
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 802052c:	f8c8 2070 	str.w	r2, [r8, #112]	@ 0x70
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8020530:	4628      	mov	r0, r5
 8020532:	f7ff fda2 	bl	802007a <SCSI_CheckAddressRange.isra.0>
 8020536:	2800      	cmp	r0, #0
 8020538:	f6ff ae73 	blt.w	8020222 <SCSI_ProcessCmd+0x17a>
    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 802053c:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8020540:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 8020544:	4353      	muls	r3, r2
    if (hmsc->cbw.dDataLength != len)
 8020546:	f8d8 2018 	ldr.w	r2, [r8, #24]
 802054a:	4293      	cmp	r3, r2
 802054c:	f47f ae64 	bne.w	8020218 <SCSI_ProcessCmd+0x170>
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8020550:	491f      	ldr	r1, [pc, #124]	@ (80205d0 <SCSI_ProcessCmd+0x528>)
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020552:	2201      	movs	r2, #1
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8020554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8020558:	7222      	strb	r2, [r4, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 802055a:	7809      	ldrb	r1, [r1, #0]
 802055c:	bf28      	it	cs
 802055e:	f44f 5380 	movcs.w	r3, #4096	@ 0x1000
 8020562:	f104 0210 	add.w	r2, r4, #16
 8020566:	4628      	mov	r0, r5
 8020568:	f011 ffc5 	bl	80324f6 <USBD_LL_PrepareReceive>
  return 0;
 802056c:	e671      	b.n	8020252 <SCSI_ProcessCmd+0x1aa>
    return SCSI_ProcessWrite(pdev, lun);
 802056e:	4639      	mov	r1, r7
 8020570:	4628      	mov	r0, r5
}
 8020572:	b002      	add	sp, #8
 8020574:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return SCSI_ProcessWrite(pdev, lun);
 8020578:	f7ff bcda 	b.w	801ff30 <SCSI_ProcessWrite>
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 802057c:	f8d6 1002 	ldr.w	r1, [r6, #2]
 8020580:	ba09      	rev	r1, r1
 8020582:	f8c8 106c 	str.w	r1, [r8, #108]	@ 0x6c
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8020586:	f8d6 2006 	ldr.w	r2, [r6, #6]
 802058a:	ba12      	rev	r2, r2
 802058c:	e7ce      	b.n	802052c <SCSI_ProcessCmd+0x484>
  if ((params[1] & 0x02U) == 0x02U)
 802058e:	7873      	ldrb	r3, [r6, #1]
 8020590:	f013 0602 	ands.w	r6, r3, #2
 8020594:	f47f aec0 	bne.w	8020318 <SCSI_ProcessCmd+0x270>
  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8020598:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 802059c:	e9d3 121b 	ldrd	r1, r2, [r3, #108]	@ 0x6c
 80205a0:	f7ff fd6b 	bl	802007a <SCSI_CheckAddressRange.isra.0>
 80205a4:	2800      	cmp	r0, #0
 80205a6:	f6ff ae3c 	blt.w	8020222 <SCSI_ProcessCmd+0x17a>
  hmsc->bot_data_length = 0U;
 80205aa:	60e6      	str	r6, [r4, #12]
  return 0;
 80205ac:	e651      	b.n	8020252 <SCSI_ProcessCmd+0x1aa>
  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80205ae:	2b01      	cmp	r3, #1
 80205b0:	f43f aeb6 	beq.w	8020320 <SCSI_ProcessCmd+0x278>
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80205b4:	2b03      	cmp	r3, #3
 80205b6:	f43f aeb3 	beq.w	8020320 <SCSI_ProcessCmd+0x278>
  hmsc->bot_data_length = 0U;
 80205ba:	2300      	movs	r3, #0
 80205bc:	e67b      	b.n	80202b6 <SCSI_ProcessCmd+0x20e>
 80205be:	bf00      	nop
 80205c0:	200004c4 	.word	0x200004c4
 80205c4:	200004bc 	.word	0x200004bc
 80205c8:	200004b8 	.word	0x200004b8
 80205cc:	200004b0 	.word	0x200004b0
 80205d0:	20000449 	.word	0x20000449

080205d4 <SCSI_SenseCode>:
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80205d4:	f8d0 12d4 	ldr.w	r1, [r0, #724]	@ 0x2d4
 80205d8:	31b0      	adds	r1, #176	@ 0xb0
{
 80205da:	b530      	push	{r4, r5, lr}
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80205dc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
  if (hmsc == NULL)
 80205e0:	b1b9      	cbz	r1, 8020612 <SCSI_SenseCode+0x3e>
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80205e2:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
 80205e6:	f894 0061 	ldrb.w	r0, [r4, #97]	@ 0x61
 80205ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80205ee:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80205f2:	f881 3044 	strb.w	r3, [r1, #68]	@ 0x44
  hmsc->scsi_sense_tail++;
 80205f6:	1c43      	adds	r3, r0, #1
 80205f8:	b2db      	uxtb	r3, r3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80205fa:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80205fe:	2b04      	cmp	r3, #4
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8020600:	f04f 0200 	mov.w	r2, #0
 8020604:	f881 2045 	strb.w	r2, [r1, #69]	@ 0x45
  hmsc->scsi_sense_tail++;
 8020608:	bf14      	ite	ne
 802060a:	f884 3061 	strbne.w	r3, [r4, #97]	@ 0x61
    hmsc->scsi_sense_tail = 0U;
 802060e:	f884 2061 	strbeq.w	r2, [r4, #97]	@ 0x61
}
 8020612:	bd30      	pop	{r4, r5, pc}

08020614 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020614:	b178      	cbz	r0, 8020636 <USBD_Init+0x22>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8020616:	2300      	movs	r3, #0
 8020618:	f8c0 32b8 	str.w	r3, [r0, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 802061c:	f8c0 32c4 	str.w	r3, [r0, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8020620:	f8c0 32d0 	str.w	r3, [r0, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020624:	b109      	cbz	r1, 802062a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8020626:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802062a:	2301      	movs	r3, #1
 802062c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  pdev->id = id;
 8020630:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8020632:	f011 bec5 	b.w	80323c0 <USBD_LL_Init>

  return ret;
}
 8020636:	2003      	movs	r0, #3
 8020638:	4770      	bx	lr

0802063a <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 802063a:	b513      	push	{r0, r1, r4, lr}
  uint16_t len = 0U;
 802063c:	2300      	movs	r3, #0
{
 802063e:	4604      	mov	r4, r0
  uint16_t len = 0U;
 8020640:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8020644:	b181      	cbz	r1, 8020668 <USBD_RegisterClass+0x2e>
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8020646:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  pdev->pClass[0] = pclass;
 8020648:	f8c0 12b8 	str.w	r1, [r0, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 802064c:	b123      	cbz	r3, 8020658 <USBD_RegisterClass+0x1e>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 802064e:	f10d 0006 	add.w	r0, sp, #6
 8020652:	4798      	blx	r3
 8020654:	f8c4 02d0 	str.w	r0, [r4, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8020658:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 802065c:	3301      	adds	r3, #1
 802065e:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8

  return USBD_OK;
 8020662:	2000      	movs	r0, #0
}
 8020664:	b002      	add	sp, #8
 8020666:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8020668:	2003      	movs	r0, #3
 802066a:	e7fb      	b.n	8020664 <USBD_RegisterClass+0x2a>

0802066c <USBD_Start>:
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 802066c:	f011 bed6 	b.w	803241c <USBD_LL_Start>

08020670 <USBD_SetClassConfig>:
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8020670:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8020674:	b10b      	cbz	r3, 802067a <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8020676:	681b      	ldr	r3, [r3, #0]
 8020678:	4718      	bx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 802067a:	4618      	mov	r0, r3
 802067c:	4770      	bx	lr

0802067e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 802067e:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8020680:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8020684:	685b      	ldr	r3, [r3, #4]
 8020686:	4798      	blx	r3
  {
    ret = USBD_FAIL;
 8020688:	2800      	cmp	r0, #0
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 802068a:	bf18      	it	ne
 802068c:	2003      	movne	r0, #3
 802068e:	bd08      	pop	{r3, pc}

08020690 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020690:	b538      	push	{r3, r4, r5, lr}
 8020692:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020694:	f200 25aa 	addw	r5, r0, #682	@ 0x2aa
 8020698:	4628      	mov	r0, r5
 802069a:	f000 fbab 	bl	8020df4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802069e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80206a0:	f894 12aa 	ldrb.w	r1, [r4, #682]	@ 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 80206a4:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80206a8:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	@ 0x2b0
 80206ac:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80206b0:	f001 031f 	and.w	r3, r1, #31
 80206b4:	2b01      	cmp	r3, #1
 80206b6:	d008      	beq.n	80206ca <USBD_LL_SetupStage+0x3a>
 80206b8:	2b02      	cmp	r3, #2
 80206ba:	d00c      	beq.n	80206d6 <USBD_LL_SetupStage+0x46>
 80206bc:	b98b      	cbnz	r3, 80206e2 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80206be:	4629      	mov	r1, r5
 80206c0:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 80206c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80206c6:	f000 b94d 	b.w	8020964 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80206ca:	4629      	mov	r1, r5
 80206cc:	4620      	mov	r0, r4
}
 80206ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80206d2:	f000 babf 	b.w	8020c54 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80206d6:	4629      	mov	r1, r5
 80206d8:	4620      	mov	r0, r4
}
 80206da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80206de:	f000 bae8 	b.w	8020cb2 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80206e2:	4620      	mov	r0, r4
 80206e4:	f001 0180 	and.w	r1, r1, #128	@ 0x80
}
 80206e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80206ec:	f011 bec5 	b.w	803247a <USBD_LL_StallEP>

080206f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80206f0:	b570      	push	{r4, r5, r6, lr}
 80206f2:	4604      	mov	r4, r0
 80206f4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
  uint8_t idx;

  if (epnum == 0U)
 80206f6:	bb09      	cbnz	r1, 802073c <USBD_LL_DataOutStage+0x4c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80206f8:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 80206fc:	2b03      	cmp	r3, #3
 80206fe:	d10c      	bne.n	802071a <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8020700:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	@ 0x15c
 8020704:	4293      	cmp	r3, r2
 8020706:	d90a      	bls.n	802071e <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 8020708:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 802070a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 802070c:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8020710:	bf28      	it	cs
 8020712:	461a      	movcs	r2, r3
 8020714:	4631      	mov	r1, r6
 8020716:	f000 fbb4 	bl	8020e82 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 802071a:	2000      	movs	r0, #0
 802071c:	bd70      	pop	{r4, r5, r6, pc}
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802071e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020722:	2b03      	cmp	r3, #3
 8020724:	d106      	bne.n	8020734 <USBD_LL_DataOutStage+0x44>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8020726:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 802072a:	691b      	ldr	r3, [r3, #16]
 802072c:	b113      	cbz	r3, 8020734 <USBD_LL_DataOutStage+0x44>
              pdev->classId = idx;
 802072e:	f8c0 12d4 	str.w	r1, [r0, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8020732:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8020734:	4620      	mov	r0, r4
 8020736:	f000 fbac 	bl	8020e92 <USBD_CtlSendStatus>
 802073a:	e7ee      	b.n	802071a <USBD_LL_DataOutStage+0x2a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802073c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020740:	2b03      	cmp	r3, #3
 8020742:	d1ea      	bne.n	802071a <USBD_LL_DataOutStage+0x2a>
        if (pdev->pClass[idx]->DataOut != NULL)
 8020744:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8020748:	699b      	ldr	r3, [r3, #24]
 802074a:	2b00      	cmp	r3, #0
 802074c:	d0e5      	beq.n	802071a <USBD_LL_DataOutStage+0x2a>
          pdev->classId = idx;
 802074e:	2200      	movs	r2, #0
}
 8020750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 8020754:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8020758:	4718      	bx	r3

0802075a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 802075a:	b570      	push	{r4, r5, r6, lr}
 802075c:	4604      	mov	r4, r0
 802075e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8020760:	460d      	mov	r5, r1
 8020762:	2900      	cmp	r1, #0
 8020764:	d13d      	bne.n	80207e2 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8020766:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 802076a:	2b02      	cmp	r3, #2
 802076c:	d10e      	bne.n	802078c <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 802076e:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 8020772:	4293      	cmp	r3, r2
 8020774:	d912      	bls.n	802079c <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 8020776:	1a9a      	subs	r2, r3, r2
 8020778:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 802077a:	4631      	mov	r1, r6
 802077c:	f000 fb79 	bl	8020e72 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020780:	462b      	mov	r3, r5
 8020782:	462a      	mov	r2, r5
 8020784:	4629      	mov	r1, r5
 8020786:	4620      	mov	r0, r4
 8020788:	f011 feb5 	bl	80324f6 <USBD_LL_PrepareReceive>
          (void)USBD_CtlReceiveStatus(pdev);
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 802078c:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8020790:	b113      	cbz	r3, 8020798 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8020792:	2300      	movs	r3, #0
 8020794:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8020798:	2000      	movs	r0, #0
 802079a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 802079c:	d10c      	bne.n	80207b8 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 802079e:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80207a0:	4293      	cmp	r3, r2
 80207a2:	d809      	bhi.n	80207b8 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 80207a4:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
 80207a8:	429a      	cmp	r2, r3
 80207aa:	d205      	bcs.n	80207b8 <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80207ac:	460a      	mov	r2, r1
 80207ae:	f000 fb60 	bl	8020e72 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80207b2:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
 80207b6:	e7e3      	b.n	8020780 <USBD_LL_DataInStage+0x26>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80207b8:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 80207bc:	2b03      	cmp	r3, #3
 80207be:	d108      	bne.n	80207d2 <USBD_LL_DataInStage+0x78>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80207c0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80207c4:	68db      	ldr	r3, [r3, #12]
 80207c6:	b123      	cbz	r3, 80207d2 <USBD_LL_DataInStage+0x78>
              pdev->classId = 0U;
 80207c8:	2200      	movs	r2, #0
 80207ca:	f8c4 22d4 	str.w	r2, [r4, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80207ce:	4620      	mov	r0, r4
 80207d0:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80207d2:	2180      	movs	r1, #128	@ 0x80
 80207d4:	4620      	mov	r0, r4
 80207d6:	f011 fe50 	bl	803247a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80207da:	4620      	mov	r0, r4
 80207dc:	f000 fb64 	bl	8020ea8 <USBD_CtlReceiveStatus>
 80207e0:	e7d4      	b.n	802078c <USBD_LL_DataInStage+0x32>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80207e2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80207e6:	2b03      	cmp	r3, #3
 80207e8:	d1d6      	bne.n	8020798 <USBD_LL_DataInStage+0x3e>
        if (pdev->pClass[idx]->DataIn != NULL)
 80207ea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80207ee:	695b      	ldr	r3, [r3, #20]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d0d1      	beq.n	8020798 <USBD_LL_DataInStage+0x3e>
          pdev->classId = idx;
 80207f4:	2200      	movs	r2, #0
}
 80207f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          pdev->classId = idx;
 80207fa:	f8c0 22d4 	str.w	r2, [r0, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80207fe:	4718      	bx	r3

08020800 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8020800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020802:	2301      	movs	r3, #1
 8020804:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8020808:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 802080c:	2100      	movs	r1, #0
{
 802080e:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8020810:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  pdev->dev_config = 0U;
 8020814:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8020816:	f8c0 12a4 	str.w	r1, [r0, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 802081a:	f880 12a0 	strb.w	r1, [r0, #672]	@ 0x2a0
  if (pdev->pClass[0] != NULL)
 802081e:	b9b3      	cbnz	r3, 802084e <USBD_LL_Reset+0x4e>
  USBD_StatusTypeDef ret = USBD_OK;
 8020820:	2600      	movs	r6, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020822:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8020824:	2540      	movs	r5, #64	@ 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020826:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8020828:	2701      	movs	r7, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802082a:	2340      	movs	r3, #64	@ 0x40
 802082c:	4620      	mov	r0, r4
 802082e:	f011 fe00 	bl	8032432 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8020832:	f8a4 7164 	strh.w	r7, [r4, #356]	@ 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8020836:	f8c4 5160 	str.w	r5, [r4, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802083a:	462b      	mov	r3, r5
 802083c:	2200      	movs	r2, #0
 802083e:	2180      	movs	r1, #128	@ 0x80
 8020840:	4620      	mov	r0, r4
 8020842:	f011 fdf6 	bl	8032432 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8020846:	84a7      	strh	r7, [r4, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8020848:	6225      	str	r5, [r4, #32]

  return ret;
}
 802084a:	4630      	mov	r0, r6
 802084c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pdev->pClass[0]->DeInit != NULL)
 802084e:	685b      	ldr	r3, [r3, #4]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d0e5      	beq.n	8020820 <USBD_LL_Reset+0x20>
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8020854:	4798      	blx	r3
 8020856:	2800      	cmp	r0, #0
 8020858:	d0e2      	beq.n	8020820 <USBD_LL_Reset+0x20>
        ret = USBD_FAIL;
 802085a:	2603      	movs	r6, #3
 802085c:	e7e1      	b.n	8020822 <USBD_LL_Reset+0x22>

0802085e <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 802085e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8020860:	2000      	movs	r0, #0
 8020862:	4770      	bx	lr

08020864 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8020864:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020868:	2b04      	cmp	r3, #4
  {
    pdev->dev_old_state = pdev->dev_state;
 802086a:	bf1e      	ittt	ne
 802086c:	f890 329c 	ldrbne.w	r3, [r0, #668]	@ 0x29c
 8020870:	b2db      	uxtbne	r3, r3
 8020872:	f880 329d 	strbne.w	r3, [r0, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8020876:	2304      	movs	r3, #4
 8020878:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 802087c:	2000      	movs	r0, #0
 802087e:	4770      	bx	lr

08020880 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8020880:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020884:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8020886:	bf02      	ittt	eq
 8020888:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 802088c:	b2db      	uxtbeq	r3, r3
 802088e:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8020892:	2000      	movs	r0, #0
 8020894:	4770      	bx	lr

08020896 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8020896:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020898:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 802089c:	2a03      	cmp	r2, #3
 802089e:	d105      	bne.n	80208ac <USBD_LL_SOF+0x16>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80208a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 80208a4:	b113      	cbz	r3, 80208ac <USBD_LL_SOF+0x16>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80208a6:	69db      	ldr	r3, [r3, #28]
 80208a8:	b103      	cbz	r3, 80208ac <USBD_LL_SOF+0x16>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80208aa:	4798      	blx	r3
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 80208ac:	2000      	movs	r0, #0
 80208ae:	bd08      	pop	{r3, pc}

080208b0 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 80208b0:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80208b4:	32ae      	adds	r2, #174	@ 0xae
{
 80208b6:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80208b8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80208bc:	b14a      	cbz	r2, 80208d2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80208be:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80208c2:	2b03      	cmp	r3, #3
 80208c4:	d101      	bne.n	80208ca <USBD_LL_IsoINIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80208c6:	6a13      	ldr	r3, [r2, #32]
 80208c8:	b90b      	cbnz	r3, 80208ce <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80208ca:	2000      	movs	r0, #0
}
 80208cc:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80208ce:	4798      	blx	r3
 80208d0:	e7fb      	b.n	80208ca <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 80208d2:	2003      	movs	r0, #3
 80208d4:	e7fa      	b.n	80208cc <USBD_LL_IsoINIncomplete+0x1c>

080208d6 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass[pdev->classId] == NULL)
 80208d6:	f8d0 22d4 	ldr.w	r2, [r0, #724]	@ 0x2d4
 80208da:	32ae      	adds	r2, #174	@ 0xae
{
 80208dc:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 80208de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80208e2:	b14a      	cbz	r2, 80208f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80208e4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80208e8:	2b03      	cmp	r3, #3
 80208ea:	d101      	bne.n	80208f0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80208ec:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80208ee:	b90b      	cbnz	r3, 80208f4 <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 80208f0:	2000      	movs	r0, #0
}
 80208f2:	bd08      	pop	{r3, pc}
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80208f4:	4798      	blx	r3
 80208f6:	e7fb      	b.n	80208f0 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 80208f8:	2003      	movs	r0, #3
 80208fa:	e7fa      	b.n	80208f2 <USBD_LL_IsoOUTIncomplete+0x1c>

080208fc <USBD_LL_DevConnected>:
  * @brief  USBD_LL_DevConnected
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 80208fc:	2000      	movs	r0, #0
 80208fe:	4770      	bx	lr

08020900 <USBD_LL_DevDisconnected>:
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020900:	2201      	movs	r2, #1
{
 8020902:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020904:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8020908:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
 802090c:	b90a      	cbnz	r2, 8020912 <USBD_LL_DevDisconnected+0x12>
  USBD_StatusTypeDef   ret = USBD_OK;
 802090e:	2000      	movs	r0, #0
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8020910:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8020912:	6852      	ldr	r2, [r2, #4]
 8020914:	7901      	ldrb	r1, [r0, #4]
 8020916:	4790      	blx	r2
 8020918:	2800      	cmp	r0, #0
 802091a:	d0f8      	beq.n	802090e <USBD_LL_DevDisconnected+0xe>
      ret = USBD_FAIL;
 802091c:	2003      	movs	r0, #3
 802091e:	e7f7      	b.n	8020910 <USBD_LL_DevDisconnected+0x10>

08020920 <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8020920:	2000      	movs	r0, #0
 8020922:	4770      	bx	lr

08020924 <USBD_CoreFindEP>:
  *         return the class index relative to the selected endpoint
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
 8020924:	2000      	movs	r0, #0
 8020926:	4770      	bx	lr

08020928 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8020928:	b510      	push	{r4, lr}
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
  USBD_EpDescTypeDef *pEpDesc = NULL;
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 802092a:	8842      	ldrh	r2, [r0, #2]
 802092c:	7803      	ldrb	r3, [r0, #0]
 802092e:	429a      	cmp	r2, r3
 8020930:	d801      	bhi.n	8020936 <USBD_GetEpDesc+0xe>
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8020932:	2000      	movs	r0, #0
      }
    }
  }

  return (void *)pEpDesc;
}
 8020934:	bd10      	pop	{r4, pc}
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8020936:	7804      	ldrb	r4, [r0, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8020938:	4420      	add	r0, r4
  *ptr += pnext->bLength;
 802093a:	4423      	add	r3, r4
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802093c:	7844      	ldrb	r4, [r0, #1]
 802093e:	2c05      	cmp	r4, #5
  *ptr += pnext->bLength;
 8020940:	b29b      	uxth	r3, r3
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8020942:	d1f4      	bne.n	802092e <USBD_GetEpDesc+0x6>
        if (pEpDesc->bEndpointAddress == EpAddr)
 8020944:	7884      	ldrb	r4, [r0, #2]
 8020946:	428c      	cmp	r4, r1
 8020948:	d1f1      	bne.n	802092e <USBD_GetEpDesc+0x6>
 802094a:	e7f3      	b.n	8020934 <USBD_GetEpDesc+0xc>

0802094c <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 802094c:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 802094e:	2180      	movs	r1, #128	@ 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8020950:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8020952:	f011 fd92 	bl	803247a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8020956:	4620      	mov	r0, r4
 8020958:	2100      	movs	r1, #0
}
 802095a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 802095e:	f011 bd8c 	b.w	803247a <USBD_LL_StallEP>
	...

08020964 <USBD_StdDevReq>:
{
 8020964:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020966:	780b      	ldrb	r3, [r1, #0]
 8020968:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802096c:	2b20      	cmp	r3, #32
{
 802096e:	4604      	mov	r4, r0
 8020970:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020972:	d009      	beq.n	8020988 <USBD_StdDevReq+0x24>
 8020974:	2b40      	cmp	r3, #64	@ 0x40
 8020976:	d007      	beq.n	8020988 <USBD_StdDevReq+0x24>
 8020978:	b193      	cbz	r3, 80209a0 <USBD_StdDevReq+0x3c>
      USBD_CtlError(pdev, req);
 802097a:	4620      	mov	r0, r4
 802097c:	f7ff ffe6 	bl	802094c <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8020980:	2500      	movs	r5, #0
}
 8020982:	4628      	mov	r0, r5
 8020984:	b002      	add	sp, #8
 8020986:	bd70      	pop	{r4, r5, r6, pc}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8020988:	f8d4 32d4 	ldr.w	r3, [r4, #724]	@ 0x2d4
 802098c:	33ae      	adds	r3, #174	@ 0xae
 802098e:	4629      	mov	r1, r5
 8020990:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020994:	689b      	ldr	r3, [r3, #8]
 8020996:	4620      	mov	r0, r4
}
 8020998:	b002      	add	sp, #8
 802099a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 802099e:	4718      	bx	r3
      switch (req->bRequest)
 80209a0:	784b      	ldrb	r3, [r1, #1]
 80209a2:	2b09      	cmp	r3, #9
 80209a4:	d8e9      	bhi.n	802097a <USBD_StdDevReq+0x16>
 80209a6:	a201      	add	r2, pc, #4	@ (adr r2, 80209ac <USBD_StdDevReq+0x48>)
 80209a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209ac:	08020bf5 	.word	0x08020bf5
 80209b0:	08020c39 	.word	0x08020c39
 80209b4:	0802097b 	.word	0x0802097b
 80209b8:	08020c1d 	.word	0x08020c1d
 80209bc:	0802097b 	.word	0x0802097b
 80209c0:	08020aef 	.word	0x08020aef
 80209c4:	080209d5 	.word	0x080209d5
 80209c8:	0802097b 	.word	0x0802097b
 80209cc:	08020bc9 	.word	0x08020bc9
 80209d0:	08020b31 	.word	0x08020b31
  uint16_t len = 0U;
 80209d4:	2300      	movs	r3, #0
 80209d6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80209da:	884b      	ldrh	r3, [r1, #2]
 80209dc:	0a1a      	lsrs	r2, r3, #8
 80209de:	3a01      	subs	r2, #1
 80209e0:	2a0e      	cmp	r2, #14
 80209e2:	d8ca      	bhi.n	802097a <USBD_StdDevReq+0x16>
 80209e4:	a101      	add	r1, pc, #4	@ (adr r1, 80209ec <USBD_StdDevReq+0x88>)
 80209e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80209ea:	bf00      	nop
 80209ec:	08020a33 	.word	0x08020a33
 80209f0:	08020a65 	.word	0x08020a65
 80209f4:	08020a7f 	.word	0x08020a7f
 80209f8:	0802097b 	.word	0x0802097b
 80209fc:	0802097b 	.word	0x0802097b
 8020a00:	08020ac1 	.word	0x08020ac1
 8020a04:	08020ad7 	.word	0x08020ad7
 8020a08:	0802097b 	.word	0x0802097b
 8020a0c:	0802097b 	.word	0x0802097b
 8020a10:	0802097b 	.word	0x0802097b
 8020a14:	0802097b 	.word	0x0802097b
 8020a18:	0802097b 	.word	0x0802097b
 8020a1c:	0802097b 	.word	0x0802097b
 8020a20:	0802097b 	.word	0x0802097b
 8020a24:	08020a29 	.word	0x08020a29
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8020a28:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020a2c:	69db      	ldr	r3, [r3, #28]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8020a2e:	b91b      	cbnz	r3, 8020a38 <USBD_StdDevReq+0xd4>
 8020a30:	e7a3      	b.n	802097a <USBD_StdDevReq+0x16>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8020a32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	7c20      	ldrb	r0, [r4, #16]
 8020a3a:	f10d 0106 	add.w	r1, sp, #6
 8020a3e:	4798      	blx	r3
  if (req->wLength != 0U)
 8020a40:	88ea      	ldrh	r2, [r5, #6]
 8020a42:	2a00      	cmp	r2, #0
 8020a44:	f000 80a3 	beq.w	8020b8e <USBD_StdDevReq+0x22a>
    if (len != 0U)
 8020a48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8020a4c:	2b00      	cmp	r3, #0
 8020a4e:	d094      	beq.n	802097a <USBD_StdDevReq+0x16>
      len = MIN(len, req->wLength);
 8020a50:	429a      	cmp	r2, r3
 8020a52:	bf28      	it	cs
 8020a54:	461a      	movcs	r2, r3
 8020a56:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8020a5a:	4601      	mov	r1, r0
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8020a5c:	4620      	mov	r0, r4
 8020a5e:	f000 f9fb 	bl	8020e58 <USBD_CtlSendData>
      break;
 8020a62:	e78d      	b.n	8020980 <USBD_StdDevReq+0x1c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020a64:	7c02      	ldrb	r2, [r0, #16]
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8020a66:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020a6a:	b932      	cbnz	r2, 8020a7a <USBD_StdDevReq+0x116>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8020a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8020a6e:	f10d 0006 	add.w	r0, sp, #6
 8020a72:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8020a74:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8020a76:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8020a78:	e7e2      	b.n	8020a40 <USBD_StdDevReq+0xdc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8020a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020a7c:	e7f7      	b.n	8020a6e <USBD_StdDevReq+0x10a>
      switch ((uint8_t)(req->wValue))
 8020a7e:	b2db      	uxtb	r3, r3
 8020a80:	2b05      	cmp	r3, #5
 8020a82:	f63f af7a 	bhi.w	802097a <USBD_StdDevReq+0x16>
 8020a86:	e8df f003 	tbb	[pc, r3]
 8020a8a:	0703      	.short	0x0703
 8020a8c:	17130f0b 	.word	0x17130f0b
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8020a90:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020a94:	685b      	ldr	r3, [r3, #4]
 8020a96:	e7ca      	b.n	8020a2e <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8020a98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020a9c:	689b      	ldr	r3, [r3, #8]
 8020a9e:	e7c6      	b.n	8020a2e <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8020aa0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020aa4:	68db      	ldr	r3, [r3, #12]
 8020aa6:	e7c2      	b.n	8020a2e <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8020aa8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020aac:	691b      	ldr	r3, [r3, #16]
 8020aae:	e7be      	b.n	8020a2e <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8020ab0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020ab4:	695b      	ldr	r3, [r3, #20]
 8020ab6:	e7ba      	b.n	8020a2e <USBD_StdDevReq+0xca>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8020ab8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8020abc:	699b      	ldr	r3, [r3, #24]
 8020abe:	e7b6      	b.n	8020a2e <USBD_StdDevReq+0xca>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020ac0:	7c03      	ldrb	r3, [r0, #16]
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	f47f af59 	bne.w	802097a <USBD_StdDevReq+0x16>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8020ac8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8020acc:	f10d 0006 	add.w	r0, sp, #6
 8020ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020ad2:	4798      	blx	r3
  if (err != 0U)
 8020ad4:	e7b4      	b.n	8020a40 <USBD_StdDevReq+0xdc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020ad6:	7c03      	ldrb	r3, [r0, #16]
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	f47f af4e 	bne.w	802097a <USBD_StdDevReq+0x16>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8020ade:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8
 8020ae2:	f10d 0006 	add.w	r0, sp, #6
 8020ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020ae8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8020aea:	2307      	movs	r3, #7
 8020aec:	e7c3      	b.n	8020a76 <USBD_StdDevReq+0x112>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8020aee:	888b      	ldrh	r3, [r1, #4]
 8020af0:	2b00      	cmp	r3, #0
 8020af2:	f47f af42 	bne.w	802097a <USBD_StdDevReq+0x16>
 8020af6:	88cb      	ldrh	r3, [r1, #6]
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	f47f af3e 	bne.w	802097a <USBD_StdDevReq+0x16>
 8020afe:	884d      	ldrh	r5, [r1, #2]
 8020b00:	2d7f      	cmp	r5, #127	@ 0x7f
 8020b02:	f63f af3a 	bhi.w	802097a <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020b06:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020b0a:	2b03      	cmp	r3, #3
 8020b0c:	f43f af35 	beq.w	802097a <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8020b10:	b2ed      	uxtb	r5, r5
      pdev->dev_address = dev_addr;
 8020b12:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8020b16:	4629      	mov	r1, r5
 8020b18:	f011 fcd7 	bl	80324ca <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8020b1c:	4620      	mov	r0, r4
 8020b1e:	f000 f9b8 	bl	8020e92 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8020b22:	b11d      	cbz	r5, 8020b2c <USBD_StdDevReq+0x1c8>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8020b24:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8020b26:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8020b2a:	e729      	b.n	8020980 <USBD_StdDevReq+0x1c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8020b2c:	2301      	movs	r3, #1
 8020b2e:	e7fa      	b.n	8020b26 <USBD_StdDevReq+0x1c2>
  cfgidx = (uint8_t)(req->wValue);
 8020b30:	7889      	ldrb	r1, [r1, #2]
 8020b32:	4d47      	ldr	r5, [pc, #284]	@ (8020c50 <USBD_StdDevReq+0x2ec>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8020b34:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8020b36:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8020b38:	d903      	bls.n	8020b42 <USBD_StdDevReq+0x1de>
    USBD_CtlError(pdev, req);
 8020b3a:	f7ff ff07 	bl	802094c <USBD_CtlError.constprop.0>
    return USBD_FAIL;
 8020b3e:	2503      	movs	r5, #3
 8020b40:	e71f      	b.n	8020982 <USBD_StdDevReq+0x1e>
  switch (pdev->dev_state)
 8020b42:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020b46:	2b02      	cmp	r3, #2
 8020b48:	b2de      	uxtb	r6, r3
 8020b4a:	d008      	beq.n	8020b5e <USBD_StdDevReq+0x1fa>
 8020b4c:	2e03      	cmp	r6, #3
 8020b4e:	d017      	beq.n	8020b80 <USBD_StdDevReq+0x21c>
      USBD_CtlError(pdev, req);
 8020b50:	f7ff fefc 	bl	802094c <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8020b54:	7829      	ldrb	r1, [r5, #0]
 8020b56:	4620      	mov	r0, r4
 8020b58:	f7ff fd91 	bl	802067e <USBD_ClrClassConfig>
      break;
 8020b5c:	e7ef      	b.n	8020b3e <USBD_StdDevReq+0x1da>
      if (cfgidx != 0U)
 8020b5e:	b1b1      	cbz	r1, 8020b8e <USBD_StdDevReq+0x22a>
        pdev->dev_config = cfgidx;
 8020b60:	2101      	movs	r1, #1
 8020b62:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8020b64:	f7ff fd84 	bl	8020670 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8020b68:	4605      	mov	r5, r0
          USBD_CtlError(pdev, req);
 8020b6a:	4620      	mov	r0, r4
        if (ret != USBD_OK)
 8020b6c:	b125      	cbz	r5, 8020b78 <USBD_StdDevReq+0x214>
          USBD_CtlError(pdev, req);
 8020b6e:	f7ff feed 	bl	802094c <USBD_CtlError.constprop.0>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8020b72:	f884 629c 	strb.w	r6, [r4, #668]	@ 0x29c
 8020b76:	e704      	b.n	8020982 <USBD_StdDevReq+0x1e>
          (void)USBD_CtlSendStatus(pdev);
 8020b78:	f000 f98b 	bl	8020e92 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8020b7c:	2303      	movs	r3, #3
 8020b7e:	e7d2      	b.n	8020b26 <USBD_StdDevReq+0x1c2>
      if (cfgidx == 0U)
 8020b80:	b949      	cbnz	r1, 8020b96 <USBD_StdDevReq+0x232>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8020b82:	2302      	movs	r3, #2
 8020b84:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8020b88:	6041      	str	r1, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8020b8a:	f7ff fd78 	bl	802067e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8020b8e:	4620      	mov	r0, r4
 8020b90:	f000 f97f 	bl	8020e92 <USBD_CtlSendStatus>
 8020b94:	e6f4      	b.n	8020980 <USBD_StdDevReq+0x1c>
      else if (cfgidx != pdev->dev_config)
 8020b96:	6841      	ldr	r1, [r0, #4]
 8020b98:	2901      	cmp	r1, #1
 8020b9a:	d0f8      	beq.n	8020b8e <USBD_StdDevReq+0x22a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8020b9c:	b2c9      	uxtb	r1, r1
 8020b9e:	f7ff fd6e 	bl	802067e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8020ba2:	7829      	ldrb	r1, [r5, #0]
 8020ba4:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8020ba6:	4620      	mov	r0, r4
 8020ba8:	f7ff fd62 	bl	8020670 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8020bac:	4605      	mov	r5, r0
 8020bae:	2800      	cmp	r0, #0
 8020bb0:	d0ed      	beq.n	8020b8e <USBD_StdDevReq+0x22a>
          USBD_CtlError(pdev, req);
 8020bb2:	4620      	mov	r0, r4
 8020bb4:	f7ff feca 	bl	802094c <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8020bb8:	7921      	ldrb	r1, [r4, #4]
 8020bba:	4620      	mov	r0, r4
 8020bbc:	f7ff fd5f 	bl	802067e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8020bc0:	2302      	movs	r3, #2
 8020bc2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8020bc6:	e6dc      	b.n	8020982 <USBD_StdDevReq+0x1e>
  if (req->wLength != 1U)
 8020bc8:	88ca      	ldrh	r2, [r1, #6]
 8020bca:	2a01      	cmp	r2, #1
 8020bcc:	f47f aed5 	bne.w	802097a <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8020bd0:	f890 129c 	ldrb.w	r1, [r0, #668]	@ 0x29c
 8020bd4:	2902      	cmp	r1, #2
 8020bd6:	b2cb      	uxtb	r3, r1
 8020bd8:	d807      	bhi.n	8020bea <USBD_StdDevReq+0x286>
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	f43f aecd 	beq.w	802097a <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8020be0:	4601      	mov	r1, r0
 8020be2:	2300      	movs	r3, #0
 8020be4:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8020be8:	e738      	b.n	8020a5c <USBD_StdDevReq+0xf8>
    switch (pdev->dev_state)
 8020bea:	2b03      	cmp	r3, #3
 8020bec:	f47f aec5 	bne.w	802097a <USBD_StdDevReq+0x16>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8020bf0:	1d01      	adds	r1, r0, #4
 8020bf2:	e733      	b.n	8020a5c <USBD_StdDevReq+0xf8>
  switch (pdev->dev_state)
 8020bf4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020bf8:	3b01      	subs	r3, #1
 8020bfa:	2b02      	cmp	r3, #2
 8020bfc:	f63f aebd 	bhi.w	802097a <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8020c00:	88ca      	ldrh	r2, [r1, #6]
 8020c02:	2a02      	cmp	r2, #2
 8020c04:	f47f aeb9 	bne.w	802097a <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup != 0U)
 8020c08:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8020c0c:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	bf0c      	ite	eq
 8020c12:	2301      	moveq	r3, #1
 8020c14:	2303      	movne	r3, #3
 8020c16:	f841 3f0c 	str.w	r3, [r1, #12]!
 8020c1a:	e71f      	b.n	8020a5c <USBD_StdDevReq+0xf8>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8020c1c:	884b      	ldrh	r3, [r1, #2]
 8020c1e:	2b01      	cmp	r3, #1
 8020c20:	d102      	bne.n	8020c28 <USBD_StdDevReq+0x2c4>
        pdev->dev_remote_wakeup = 0U;
 8020c22:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8020c26:	e7b2      	b.n	8020b8e <USBD_StdDevReq+0x22a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8020c28:	2b02      	cmp	r3, #2
 8020c2a:	f47f aea6 	bne.w	802097a <USBD_StdDevReq+0x16>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8020c2e:	888b      	ldrh	r3, [r1, #4]
 8020c30:	0a1b      	lsrs	r3, r3, #8
 8020c32:	f880 32a0 	strb.w	r3, [r0, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8020c36:	e7aa      	b.n	8020b8e <USBD_StdDevReq+0x22a>
  switch (pdev->dev_state)
 8020c38:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020c3c:	3b01      	subs	r3, #1
 8020c3e:	2b02      	cmp	r3, #2
 8020c40:	f63f ae9b 	bhi.w	802097a <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8020c44:	884b      	ldrh	r3, [r1, #2]
 8020c46:	2b01      	cmp	r3, #1
 8020c48:	f47f ae9a 	bne.w	8020980 <USBD_StdDevReq+0x1c>
        pdev->dev_remote_wakeup = 0U;
 8020c4c:	2300      	movs	r3, #0
 8020c4e:	e7e8      	b.n	8020c22 <USBD_StdDevReq+0x2be>
 8020c50:	20002f29 	.word	0x20002f29

08020c54 <USBD_StdItfReq>:
{
 8020c54:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020c56:	780b      	ldrb	r3, [r1, #0]
 8020c58:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8020c5c:	065b      	lsls	r3, r3, #25
{
 8020c5e:	4604      	mov	r4, r0
 8020c60:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020c62:	d501      	bpl.n	8020c68 <USBD_StdItfReq+0x14>
 8020c64:	2a40      	cmp	r2, #64	@ 0x40
 8020c66:	d11f      	bne.n	8020ca8 <USBD_StdItfReq+0x54>
      switch (pdev->dev_state)
 8020c68:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8020c6c:	3b01      	subs	r3, #1
 8020c6e:	2b02      	cmp	r3, #2
 8020c70:	d81a      	bhi.n	8020ca8 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8020c72:	7931      	ldrb	r1, [r6, #4]
 8020c74:	2901      	cmp	r1, #1
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8020c76:	4620      	mov	r0, r4
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8020c78:	d817      	bhi.n	8020caa <USBD_StdItfReq+0x56>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8020c7a:	f7ff fe51 	bl	8020920 <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8020c7e:	b988      	cbnz	r0, 8020ca4 <USBD_StdItfReq+0x50>
              if (pdev->pClass[idx]->Setup != NULL)
 8020c80:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8020c84:	689b      	ldr	r3, [r3, #8]
 8020c86:	b16b      	cbz	r3, 8020ca4 <USBD_StdItfReq+0x50>
                pdev->classId = idx;
 8020c88:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8020c8c:	4631      	mov	r1, r6
 8020c8e:	4620      	mov	r0, r4
 8020c90:	4798      	blx	r3
 8020c92:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8020c94:	88f3      	ldrh	r3, [r6, #6]
 8020c96:	b91b      	cbnz	r3, 8020ca0 <USBD_StdItfReq+0x4c>
 8020c98:	b915      	cbnz	r5, 8020ca0 <USBD_StdItfReq+0x4c>
              (void)USBD_CtlSendStatus(pdev);
 8020c9a:	4620      	mov	r0, r4
 8020c9c:	f000 f8f9 	bl	8020e92 <USBD_CtlSendStatus>
}
 8020ca0:	4628      	mov	r0, r5
 8020ca2:	bd70      	pop	{r4, r5, r6, pc}
                ret = USBD_FAIL;
 8020ca4:	2503      	movs	r5, #3
 8020ca6:	e7f5      	b.n	8020c94 <USBD_StdItfReq+0x40>
          USBD_CtlError(pdev, req);
 8020ca8:	4620      	mov	r0, r4
            USBD_CtlError(pdev, req);
 8020caa:	f7ff fe4f 	bl	802094c <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8020cae:	2500      	movs	r5, #0
 8020cb0:	e7f6      	b.n	8020ca0 <USBD_StdItfReq+0x4c>

08020cb2 <USBD_StdEPReq>:
{
 8020cb2:	b570      	push	{r4, r5, r6, lr}
 8020cb4:	780b      	ldrb	r3, [r1, #0]
  ep_addr = LOBYTE(req->wIndex);
 8020cb6:	888a      	ldrh	r2, [r1, #4]
 8020cb8:	790d      	ldrb	r5, [r1, #4]
 8020cba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020cbe:	2b20      	cmp	r3, #32
{
 8020cc0:	4604      	mov	r4, r0
 8020cc2:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020cc4:	d058      	beq.n	8020d78 <USBD_StdEPReq+0xc6>
 8020cc6:	2b40      	cmp	r3, #64	@ 0x40
 8020cc8:	d056      	beq.n	8020d78 <USBD_StdEPReq+0xc6>
 8020cca:	b11b      	cbz	r3, 8020cd4 <USBD_StdEPReq+0x22>
              USBD_CtlError(pdev, req);
 8020ccc:	4620      	mov	r0, r4
 8020cce:	f7ff fe3d 	bl	802094c <USBD_CtlError.constprop.0>
              break;
 8020cd2:	e03d      	b.n	8020d50 <USBD_StdEPReq+0x9e>
      switch (req->bRequest)
 8020cd4:	784b      	ldrb	r3, [r1, #1]
 8020cd6:	2b01      	cmp	r3, #1
 8020cd8:	d03c      	beq.n	8020d54 <USBD_StdEPReq+0xa2>
 8020cda:	2b03      	cmp	r3, #3
 8020cdc:	d025      	beq.n	8020d2a <USBD_StdEPReq+0x78>
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d1f4      	bne.n	8020ccc <USBD_StdEPReq+0x1a>
          switch (pdev->dev_state)
 8020ce2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020ce6:	2b02      	cmp	r3, #2
 8020ce8:	b2d9      	uxtb	r1, r3
 8020cea:	d061      	beq.n	8020db0 <USBD_StdEPReq+0xfe>
 8020cec:	2903      	cmp	r1, #3
 8020cee:	d1ed      	bne.n	8020ccc <USBD_StdEPReq+0x1a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8020cf0:	f005 030f 	and.w	r3, r5, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8020cf4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8020cf8:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8020cfc:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8020d00:	d065      	beq.n	8020dce <USBD_StdEPReq+0x11c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8020d02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8020d04:	2b00      	cmp	r3, #0
 8020d06:	d0e1      	beq.n	8020ccc <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020d08:	f005 067f 	and.w	r6, r5, #127	@ 0x7f
 8020d0c:	3601      	adds	r6, #1
 8020d0e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8020d12:	2d80      	cmp	r5, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020d14:	eb00 0686 	add.w	r6, r0, r6, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8020d18:	d065      	beq.n	8020de6 <USBD_StdEPReq+0x134>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8020d1a:	4629      	mov	r1, r5
 8020d1c:	4620      	mov	r0, r4
 8020d1e:	f011 fbc2 	bl	80324a6 <USBD_LL_IsStallEP>
 8020d22:	2800      	cmp	r0, #0
 8020d24:	d064      	beq.n	8020df0 <USBD_StdEPReq+0x13e>
                pep->status = 0x0001U;
 8020d26:	2301      	movs	r3, #1
 8020d28:	e05e      	b.n	8020de8 <USBD_StdEPReq+0x136>
          switch (pdev->dev_state)
 8020d2a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020d2e:	2b02      	cmp	r3, #2
 8020d30:	b2da      	uxtb	r2, r3
 8020d32:	d033      	beq.n	8020d9c <USBD_StdEPReq+0xea>
 8020d34:	2a03      	cmp	r2, #3
 8020d36:	d1c9      	bne.n	8020ccc <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8020d38:	884b      	ldrh	r3, [r1, #2]
 8020d3a:	b933      	cbnz	r3, 8020d4a <USBD_StdEPReq+0x98>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8020d3c:	0669      	lsls	r1, r5, #25
 8020d3e:	d004      	beq.n	8020d4a <USBD_StdEPReq+0x98>
 8020d40:	88f3      	ldrh	r3, [r6, #6]
 8020d42:	b913      	cbnz	r3, 8020d4a <USBD_StdEPReq+0x98>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8020d44:	4629      	mov	r1, r5
 8020d46:	f011 fb98 	bl	803247a <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8020d4a:	4620      	mov	r0, r4
 8020d4c:	f000 f8a1 	bl	8020e92 <USBD_CtlSendStatus>
}
 8020d50:	2000      	movs	r0, #0
 8020d52:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8020d54:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8020d58:	2b02      	cmp	r3, #2
 8020d5a:	b2da      	uxtb	r2, r3
 8020d5c:	d01e      	beq.n	8020d9c <USBD_StdEPReq+0xea>
 8020d5e:	2a03      	cmp	r2, #3
 8020d60:	d1b4      	bne.n	8020ccc <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8020d62:	884b      	ldrh	r3, [r1, #2]
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d1f3      	bne.n	8020d50 <USBD_StdEPReq+0x9e>
                if ((ep_addr & 0x7FU) != 0x00U)
 8020d68:	066b      	lsls	r3, r5, #25
 8020d6a:	d002      	beq.n	8020d72 <USBD_StdEPReq+0xc0>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8020d6c:	4629      	mov	r1, r5
 8020d6e:	f011 fb8f 	bl	8032490 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 8020d72:	4620      	mov	r0, r4
 8020d74:	f000 f88d 	bl	8020e92 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8020d78:	4629      	mov	r1, r5
 8020d7a:	4620      	mov	r0, r4
 8020d7c:	f7ff fdd2 	bl	8020924 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8020d80:	2800      	cmp	r0, #0
 8020d82:	d1e5      	bne.n	8020d50 <USBD_StdEPReq+0x9e>
                  if (pdev->pClass[idx]->Setup != NULL)
 8020d84:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
                  pdev->classId = idx;
 8020d88:	f8c4 02d4 	str.w	r0, [r4, #724]	@ 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 8020d8c:	689b      	ldr	r3, [r3, #8]
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	d0de      	beq.n	8020d50 <USBD_StdEPReq+0x9e>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8020d92:	4631      	mov	r1, r6
 8020d94:	4620      	mov	r0, r4
}
 8020d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8020d9a:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020d9c:	066a      	lsls	r2, r5, #25
 8020d9e:	d095      	beq.n	8020ccc <USBD_StdEPReq+0x1a>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8020da0:	4629      	mov	r1, r5
 8020da2:	f011 fb6a 	bl	803247a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8020da6:	2180      	movs	r1, #128	@ 0x80
 8020da8:	4620      	mov	r0, r4
 8020daa:	f011 fb66 	bl	803247a <USBD_LL_StallEP>
 8020dae:	e7cf      	b.n	8020d50 <USBD_StdEPReq+0x9e>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8020db0:	0669      	lsls	r1, r5, #25
 8020db2:	d18b      	bne.n	8020ccc <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020db4:	0613      	lsls	r3, r2, #24
 8020db6:	bf4c      	ite	mi
 8020db8:	f100 0114 	addmi.w	r1, r0, #20
 8020dbc:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8020dc0:	2300      	movs	r3, #0
 8020dc2:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8020dc4:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8020dc6:	4620      	mov	r0, r4
 8020dc8:	f000 f846 	bl	8020e58 <USBD_CtlSendData>
              break;
 8020dcc:	e7c0      	b.n	8020d50 <USBD_StdEPReq+0x9e>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8020dce:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	f43f af7a 	beq.w	8020ccc <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8020dd8:	2614      	movs	r6, #20
 8020dda:	fb06 0605 	mla	r6, r6, r5, r0
 8020dde:	f506 76aa 	add.w	r6, r6, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8020de2:	2d00      	cmp	r5, #0
 8020de4:	d199      	bne.n	8020d1a <USBD_StdEPReq+0x68>
                pep->status = 0x0000U;
 8020de6:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8020de8:	6033      	str	r3, [r6, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8020dea:	2202      	movs	r2, #2
 8020dec:	4631      	mov	r1, r6
 8020dee:	e7ea      	b.n	8020dc6 <USBD_StdEPReq+0x114>
                pep->status = 0x0000U;
 8020df0:	6030      	str	r0, [r6, #0]
 8020df2:	e7fa      	b.n	8020dea <USBD_StdEPReq+0x138>

08020df4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8020df4:	780b      	ldrb	r3, [r1, #0]
 8020df6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8020df8:	784b      	ldrb	r3, [r1, #1]
 8020dfa:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pbuff);
 8020dfc:	884b      	ldrh	r3, [r1, #2]
 8020dfe:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pbuff);
 8020e00:	888b      	ldrh	r3, [r1, #4]
 8020e02:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pbuff);
 8020e04:	88cb      	ldrh	r3, [r1, #6]
 8020e06:	80c3      	strh	r3, [r0, #6]
}
 8020e08:	4770      	bx	lr

08020e0a <USBD_CtlError>:
{
 8020e0a:	b510      	push	{r4, lr}
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8020e0c:	2180      	movs	r1, #128	@ 0x80
{
 8020e0e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8020e10:	f011 fb33 	bl	803247a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8020e14:	4620      	mov	r0, r4
 8020e16:	2100      	movs	r1, #0
}
 8020e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8020e1c:	f011 bb2d 	b.w	803247a <USBD_LL_StallEP>

08020e20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8020e20:	b570      	push	{r4, r5, r6, lr}
 8020e22:	460d      	mov	r5, r1
 8020e24:	4616      	mov	r6, r2
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8020e26:	4604      	mov	r4, r0
 8020e28:	b170      	cbz	r0, 8020e48 <USBD_GetString+0x28>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8020e2a:	f7f4 fb49 	bl	80154c0 <strlen>
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8020e2e:	b2c3      	uxtb	r3, r0
 8020e30:	3301      	adds	r3, #1
 8020e32:	005b      	lsls	r3, r3, #1
 8020e34:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8020e36:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8020e38:	2303      	movs	r3, #3
 8020e3a:	706b      	strb	r3, [r5, #1]
  while (*pdesc != (uint8_t)'\0')
 8020e3c:	3c01      	subs	r4, #1
  idx++;
 8020e3e:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8020e40:	2100      	movs	r1, #0
  while (*pdesc != (uint8_t)'\0')
 8020e42:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8020e46:	b902      	cbnz	r2, 8020e4a <USBD_GetString+0x2a>
}
 8020e48:	bd70      	pop	{r4, r5, r6, pc}
    unicode[idx] = *pdesc;
 8020e4a:	54ea      	strb	r2, [r5, r3]
    idx++;
 8020e4c:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 8020e4e:	b2d2      	uxtb	r2, r2
    idx++;
 8020e50:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8020e52:	54a9      	strb	r1, [r5, r2]
    idx++;
 8020e54:	b2db      	uxtb	r3, r3
 8020e56:	e7f4      	b.n	8020e42 <USBD_GetString+0x22>

08020e58 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8020e58:	b510      	push	{r4, lr}
 8020e5a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8020e5c:	2202      	movs	r2, #2
  pdev->ep_in[0].total_length = len;

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8020e5e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8020e62:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8020e66:	460a      	mov	r2, r1
 8020e68:	2100      	movs	r1, #0
 8020e6a:	f011 fb39 	bl	80324e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8020e6e:	2000      	movs	r0, #0
 8020e70:	bd10      	pop	{r4, pc}

08020e72 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8020e72:	b508      	push	{r3, lr}
 8020e74:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8020e76:	460a      	mov	r2, r1
 8020e78:	2100      	movs	r1, #0
 8020e7a:	f011 fb31 	bl	80324e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8020e7e:	2000      	movs	r0, #0
 8020e80:	bd08      	pop	{r3, pc}

08020e82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8020e82:	b508      	push	{r3, lr}
 8020e84:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8020e86:	460a      	mov	r2, r1
 8020e88:	2100      	movs	r1, #0
 8020e8a:	f011 fb34 	bl	80324f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8020e8e:	2000      	movs	r0, #0
 8020e90:	bd08      	pop	{r3, pc}

08020e92 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8020e92:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8020e94:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8020e96:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8020e98:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8020e9c:	4619      	mov	r1, r3
 8020e9e:	461a      	mov	r2, r3
 8020ea0:	f011 fb1e 	bl	80324e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8020ea4:	2000      	movs	r0, #0
 8020ea6:	bd08      	pop	{r3, pc}

08020ea8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8020ea8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8020eaa:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020eac:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8020eae:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020eb2:	4619      	mov	r1, r3
 8020eb4:	461a      	mov	r2, r3
 8020eb6:	f011 fb1e 	bl	80324f6 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8020eba:	2000      	movs	r0, #0
 8020ebc:	bd08      	pop	{r3, pc}
	...

08020ec0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8020ec0:	4b03      	ldr	r3, [pc, #12]	@ (8020ed0 <disk_status+0x10>)
 8020ec2:	181a      	adds	r2, r3, r0
 8020ec4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8020ec8:	7a10      	ldrb	r0, [r2, #8]
 8020eca:	685b      	ldr	r3, [r3, #4]
 8020ecc:	685b      	ldr	r3, [r3, #4]
 8020ece:	4718      	bx	r3
 8020ed0:	20002fb4 	.word	0x20002fb4

08020ed4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8020ed4:	4b06      	ldr	r3, [pc, #24]	@ (8020ef0 <disk_initialize+0x1c>)
 8020ed6:	5c1a      	ldrb	r2, [r3, r0]
 8020ed8:	b942      	cbnz	r2, 8020eec <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8020eda:	2201      	movs	r2, #1
 8020edc:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8020ede:	181a      	adds	r2, r3, r0
 8020ee0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8020ee4:	7a10      	ldrb	r0, [r2, #8]
 8020ee6:	685b      	ldr	r3, [r3, #4]
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	4718      	bx	r3
  }
  return stat;
}
 8020eec:	2000      	movs	r0, #0
 8020eee:	4770      	bx	lr
 8020ef0:	20002fb4 	.word	0x20002fb4

08020ef4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8020ef4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8020ef6:	4c05      	ldr	r4, [pc, #20]	@ (8020f0c <disk_read+0x18>)
 8020ef8:	1825      	adds	r5, r4, r0
 8020efa:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8020efe:	6860      	ldr	r0, [r4, #4]
 8020f00:	6884      	ldr	r4, [r0, #8]
 8020f02:	7a28      	ldrb	r0, [r5, #8]
 8020f04:	46a4      	mov	ip, r4
  return res;
}
 8020f06:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8020f08:	4760      	bx	ip
 8020f0a:	bf00      	nop
 8020f0c:	20002fb4 	.word	0x20002fb4

08020f10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8020f10:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8020f12:	4c05      	ldr	r4, [pc, #20]	@ (8020f28 <disk_write+0x18>)
 8020f14:	1825      	adds	r5, r4, r0
 8020f16:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8020f1a:	6860      	ldr	r0, [r4, #4]
 8020f1c:	68c4      	ldr	r4, [r0, #12]
 8020f1e:	7a28      	ldrb	r0, [r5, #8]
 8020f20:	46a4      	mov	ip, r4
  return res;
}
 8020f22:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8020f24:	4760      	bx	ip
 8020f26:	bf00      	nop
 8020f28:	20002fb4 	.word	0x20002fb4

08020f2c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8020f2c:	4b05      	ldr	r3, [pc, #20]	@ (8020f44 <disk_ioctl+0x18>)
{
 8020f2e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8020f30:	181c      	adds	r4, r3, r0
 8020f32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8020f36:	7a20      	ldrb	r0, [r4, #8]
 8020f38:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8020f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8020f3e:	691b      	ldr	r3, [r3, #16]
 8020f40:	4718      	bx	r3
 8020f42:	bf00      	nop
 8020f44:	20002fb4 	.word	0x20002fb4

08020f48 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8020f48:	6800      	ldr	r0, [r0, #0]
 8020f4a:	4770      	bx	lr

08020f4c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8020f4c:	0a0b      	lsrs	r3, r1, #8
 8020f4e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8020f50:	7043      	strb	r3, [r0, #1]
 8020f52:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8020f54:	0e09      	lsrs	r1, r1, #24
 8020f56:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8020f58:	70c1      	strb	r1, [r0, #3]
}
 8020f5a:	4770      	bx	lr

08020f5c <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8020f5c:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8020f5e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8020f62:	4290      	cmp	r0, r2
 8020f64:	d1fb      	bne.n	8020f5e <mem_set+0x2>
}
 8020f66:	4770      	bx	lr

08020f68 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8020f68:	6803      	ldr	r3, [r0, #0]
{
 8020f6a:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8020f6c:	b18b      	cbz	r3, 8020f92 <get_ldnumber+0x2a>
 8020f6e:	4619      	mov	r1, r3
 8020f70:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8020f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020f76:	2c1f      	cmp	r4, #31
 8020f78:	d909      	bls.n	8020f8e <get_ldnumber+0x26>
 8020f7a:	2c3a      	cmp	r4, #58	@ 0x3a
 8020f7c:	d1f8      	bne.n	8020f70 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8020f7e:	7819      	ldrb	r1, [r3, #0]
 8020f80:	2930      	cmp	r1, #48	@ 0x30
 8020f82:	d106      	bne.n	8020f92 <get_ldnumber+0x2a>
			i = *tp++ - '0';
 8020f84:	3301      	adds	r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8020f86:	429a      	cmp	r2, r3
 8020f88:	d103      	bne.n	8020f92 <get_ldnumber+0x2a>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = ++tt;
 8020f8a:	3201      	adds	r2, #1
 8020f8c:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 8020f8e:	2000      	movs	r0, #0
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8020f90:	bd10      	pop	{r4, pc}
	int vol = -1;
 8020f92:	f04f 30ff 	mov.w	r0, #4294967295
 8020f96:	e7fb      	b.n	8020f90 <get_ldnumber+0x28>

08020f98 <sync_window>:
{
 8020f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8020f9a:	78c3      	ldrb	r3, [r0, #3]
{
 8020f9c:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8020f9e:	b90b      	cbnz	r3, 8020fa4 <sync_window+0xc>
	FRESULT res = FR_OK;
 8020fa0:	2000      	movs	r0, #0
}
 8020fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8020fa4:	6b05      	ldr	r5, [r0, #48]	@ 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8020fa6:	f100 0734 	add.w	r7, r0, #52	@ 0x34
 8020faa:	2301      	movs	r3, #1
 8020fac:	7840      	ldrb	r0, [r0, #1]
 8020fae:	462a      	mov	r2, r5
 8020fb0:	4639      	mov	r1, r7
 8020fb2:	f7ff ffad 	bl	8020f10 <disk_write>
 8020fb6:	b990      	cbnz	r0, 8020fde <sync_window+0x46>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8020fb8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8020fba:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8020fbc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8020fbe:	1aeb      	subs	r3, r5, r3
 8020fc0:	4293      	cmp	r3, r2
 8020fc2:	d2ed      	bcs.n	8020fa0 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8020fc4:	78a6      	ldrb	r6, [r4, #2]
 8020fc6:	2e01      	cmp	r6, #1
 8020fc8:	d9ea      	bls.n	8020fa0 <sync_window+0x8>
					wsect += fs->fsize;
 8020fca:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8020fcc:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8020fce:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8020fd0:	462a      	mov	r2, r5
 8020fd2:	2301      	movs	r3, #1
 8020fd4:	4639      	mov	r1, r7
 8020fd6:	f7ff ff9b 	bl	8020f10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8020fda:	3e01      	subs	r6, #1
 8020fdc:	e7f3      	b.n	8020fc6 <sync_window+0x2e>
			res = FR_DISK_ERR;
 8020fde:	2001      	movs	r0, #1
 8020fe0:	e7df      	b.n	8020fa2 <sync_window+0xa>

08020fe2 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8020fe2:	3801      	subs	r0, #1
 8020fe4:	440a      	add	r2, r1
			*d++ = *s++;
 8020fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020fea:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8020fee:	4291      	cmp	r1, r2
 8020ff0:	d1f9      	bne.n	8020fe6 <mem_cpy.part.0+0x4>
}
 8020ff2:	4770      	bx	lr

08020ff4 <move_window>:
{
 8020ff4:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8020ff6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8020ff8:	428b      	cmp	r3, r1
{
 8020ffa:	4605      	mov	r5, r0
 8020ffc:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8020ffe:	d010      	beq.n	8021022 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8021000:	f7ff ffca 	bl	8020f98 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8021004:	b960      	cbnz	r0, 8021020 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8021006:	4622      	mov	r2, r4
 8021008:	7868      	ldrb	r0, [r5, #1]
 802100a:	2301      	movs	r3, #1
 802100c:	f105 0134 	add.w	r1, r5, #52	@ 0x34
 8021010:	f7ff ff70 	bl	8020ef4 <disk_read>
				res = FR_DISK_ERR;
 8021014:	2800      	cmp	r0, #0
 8021016:	bf1c      	itt	ne
 8021018:	f04f 34ff 	movne.w	r4, #4294967295
 802101c:	2001      	movne	r0, #1
			fs->winsect = sector;
 802101e:	632c      	str	r4, [r5, #48]	@ 0x30
}
 8021020:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8021022:	2000      	movs	r0, #0
 8021024:	e7fc      	b.n	8021020 <move_window+0x2c>
	...

08021028 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8021028:	2300      	movs	r3, #0
{
 802102a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 802102c:	70c3      	strb	r3, [r0, #3]
 802102e:	f04f 33ff 	mov.w	r3, #4294967295
 8021032:	6303      	str	r3, [r0, #48]	@ 0x30
{
 8021034:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8021036:	f7ff ffdd 	bl	8020ff4 <move_window>
 802103a:	4603      	mov	r3, r0
 802103c:	bb18      	cbnz	r0, 8021086 <check_fs+0x5e>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802103e:	f8b4 1232 	ldrh.w	r1, [r4, #562]	@ 0x232
 8021042:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8021046:	4291      	cmp	r1, r2
 8021048:	d11f      	bne.n	802108a <check_fs+0x62>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 802104a:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 802104e:	2ae9      	cmp	r2, #233	@ 0xe9
 8021050:	d005      	beq.n	802105e <check_fs+0x36>
 8021052:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8021054:	490f      	ldr	r1, [pc, #60]	@ (8021094 <check_fs+0x6c>)
 8021056:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802105a:	428a      	cmp	r2, r1
 802105c:	d117      	bne.n	802108e <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 802105e:	f104 006a 	add.w	r0, r4, #106	@ 0x6a
 8021062:	f7ff ff71 	bl	8020f48 <ld_dword>
 8021066:	4a0c      	ldr	r2, [pc, #48]	@ (8021098 <check_fs+0x70>)
 8021068:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 802106c:	4290      	cmp	r0, r2
 802106e:	d008      	beq.n	8021082 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8021070:	f104 0086 	add.w	r0, r4, #134	@ 0x86
 8021074:	f7ff ff68 	bl	8020f48 <ld_dword>
 8021078:	4b08      	ldr	r3, [pc, #32]	@ (802109c <check_fs+0x74>)
 802107a:	1ac3      	subs	r3, r0, r3
 802107c:	bf18      	it	ne
 802107e:	2301      	movne	r3, #1
 8021080:	005b      	lsls	r3, r3, #1
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8021082:	4618      	mov	r0, r3
 8021084:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8021086:	2304      	movs	r3, #4
 8021088:	e7fb      	b.n	8021082 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 802108a:	2303      	movs	r3, #3
 802108c:	e7f9      	b.n	8021082 <check_fs+0x5a>
	return 2;
 802108e:	2302      	movs	r3, #2
 8021090:	e7f7      	b.n	8021082 <check_fs+0x5a>
 8021092:	bf00      	nop
 8021094:	009000eb 	.word	0x009000eb
 8021098:	00544146 	.word	0x00544146
 802109c:	33544146 	.word	0x33544146

080210a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80210a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80210a2:	2300      	movs	r3, #0
{
 80210a4:	b085      	sub	sp, #20
	*rfs = 0;
 80210a6:	600b      	str	r3, [r1, #0]
{
 80210a8:	460f      	mov	r7, r1
 80210aa:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 80210ac:	f7ff ff5c 	bl	8020f68 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80210b0:	1e05      	subs	r5, r0, #0
 80210b2:	f2c0 810e 	blt.w	80212d2 <find_volume+0x232>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80210b6:	4b8a      	ldr	r3, [pc, #552]	@ (80212e0 <find_volume+0x240>)
 80210b8:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80210bc:	2c00      	cmp	r4, #0
 80210be:	f000 810a 	beq.w	80212d6 <find_volume+0x236>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80210c2:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
 80210c4:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80210c6:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80210ca:	b16b      	cbz	r3, 80210e8 <find_volume+0x48>
		stat = disk_status(fs->drv);
 80210cc:	7860      	ldrb	r0, [r4, #1]
 80210ce:	f7ff fef7 	bl	8020ec0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80210d2:	07c7      	lsls	r7, r0, #31
 80210d4:	d408      	bmi.n	80210e8 <find_volume+0x48>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80210d6:	2e00      	cmp	r6, #0
 80210d8:	f000 80d6 	beq.w	8021288 <find_volume+0x1e8>
 80210dc:	0740      	lsls	r0, r0, #29
 80210de:	f140 80d3 	bpl.w	8021288 <find_volume+0x1e8>
				return FR_WRITE_PROTECTED;
 80210e2:	200a      	movs	r0, #10
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80210e4:	b005      	add	sp, #20
 80210e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80210e8:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80210ea:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 80210ec:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80210ee:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80210f0:	f7ff fef0 	bl	8020ed4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80210f4:	07c1      	lsls	r1, r0, #31
 80210f6:	f100 80f0 	bmi.w	80212da <find_volume+0x23a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80210fa:	b10e      	cbz	r6, 8021100 <find_volume+0x60>
 80210fc:	0742      	lsls	r2, r0, #29
 80210fe:	d4f0      	bmi.n	80210e2 <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8021100:	2100      	movs	r1, #0
 8021102:	4620      	mov	r0, r4
 8021104:	f7ff ff90 	bl	8021028 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8021108:	2802      	cmp	r0, #2
 802110a:	f040 80c7 	bne.w	802129c <find_volume+0x1fc>
 802110e:	466f      	mov	r7, sp
 8021110:	f504 73fd 	add.w	r3, r4, #506	@ 0x1fa
 8021114:	f204 213a 	addw	r1, r4, #570	@ 0x23a
 8021118:	463a      	mov	r2, r7
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802111a:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 802111e:	b110      	cbz	r0, 8021126 <find_volume+0x86>
 8021120:	4618      	mov	r0, r3
 8021122:	f7ff ff11 	bl	8020f48 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8021126:	3310      	adds	r3, #16
 8021128:	428b      	cmp	r3, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 802112a:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 802112e:	d1f4      	bne.n	802111a <find_volume+0x7a>
 8021130:	2500      	movs	r5, #0
			bsect = br[i];
 8021132:	f857 6b04 	ldr.w	r6, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8021136:	2e00      	cmp	r6, #0
 8021138:	f000 80a8 	beq.w	802128c <find_volume+0x1ec>
 802113c:	4631      	mov	r1, r6
 802113e:	4620      	mov	r0, r4
 8021140:	f7ff ff72 	bl	8021028 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8021144:	2801      	cmp	r0, #1
 8021146:	f200 80a2 	bhi.w	802128e <find_volume+0x1ee>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 802114a:	f8b4 303f 	ldrh.w	r3, [r4, #63]	@ 0x3f
 802114e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8021152:	f040 80a9 	bne.w	80212a8 <find_volume+0x208>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8021156:	f8b4 104a 	ldrh.w	r1, [r4, #74]	@ 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 802115a:	b921      	cbnz	r1, 8021166 <find_volume+0xc6>
 802115c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021160:	f7ff fef2 	bl	8020f48 <ld_dword>
 8021164:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8021166:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
		fs->fsize = fasize;
 802116a:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 802116c:	1e53      	subs	r3, r2, #1
 802116e:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8021170:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8021172:	f200 8099 	bhi.w	80212a8 <find_volume+0x208>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8021176:	f894 5041 	ldrb.w	r5, [r4, #65]	@ 0x41
 802117a:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 802117c:	2d00      	cmp	r5, #0
 802117e:	f000 8093 	beq.w	80212a8 <find_volume+0x208>
 8021182:	1e6b      	subs	r3, r5, #1
 8021184:	422b      	tst	r3, r5
 8021186:	f040 808f 	bne.w	80212a8 <find_volume+0x208>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 802118a:	f8b4 7045 	ldrh.w	r7, [r4, #69]	@ 0x45
 802118e:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8021190:	067b      	lsls	r3, r7, #25
 8021192:	f040 8089 	bne.w	80212a8 <find_volume+0x208>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8021196:	f8b4 0047 	ldrh.w	r0, [r4, #71]	@ 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 802119a:	b918      	cbnz	r0, 80211a4 <find_volume+0x104>
 802119c:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80211a0:	f7ff fed2 	bl	8020f48 <ld_dword>
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80211a4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d07d      	beq.n	80212a8 <find_volume+0x208>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80211ac:	fb01 fe02 	mul.w	lr, r1, r2
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80211b0:	eb03 1cd7 	add.w	ip, r3, r7, lsr #7
 80211b4:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80211b6:	4560      	cmp	r0, ip
 80211b8:	d376      	bcc.n	80212a8 <find_volume+0x208>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80211ba:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80211be:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80211c0:	fbb0 f2f5 	udiv	r2, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80211c4:	d370      	bcc.n	80212a8 <find_volume+0x208>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80211c6:	f64f 70f5 	movw	r0, #65525	@ 0xfff5
 80211ca:	4282      	cmp	r2, r0
 80211cc:	d870      	bhi.n	80212b0 <find_volume+0x210>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80211ce:	f640 75f5 	movw	r5, #4085	@ 0xff5
 80211d2:	42aa      	cmp	r2, r5
 80211d4:	bf94      	ite	ls
 80211d6:	2501      	movls	r5, #1
 80211d8:	2502      	movhi	r5, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80211da:	3202      	adds	r2, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80211dc:	4433      	add	r3, r6
		fs->database = bsect + sysect;					/* Data start sector */
 80211de:	eb06 000c 	add.w	r0, r6, ip
		if (fmt == FS_FAT32) {
 80211e2:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80211e4:	61a2      	str	r2, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80211e6:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80211e8:	6263      	str	r3, [r4, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80211ea:	62e0      	str	r0, [r4, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80211ec:	d162      	bne.n	80212b4 <find_volume+0x214>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80211ee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80211f2:	433b      	orrs	r3, r7
 80211f4:	d158      	bne.n	80212a8 <find_volume+0x208>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80211f6:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80211fa:	f7ff fea5 	bl	8020f48 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80211fe:	0092      	lsls	r2, r2, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8021200:	f602 72ff 	addw	r2, r2, #4095	@ 0xfff
 8021204:	ebb1 3f12 	cmp.w	r1, r2, lsr #12
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8021208:	62a0      	str	r0, [r4, #40]	@ 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 802120a:	d34d      	bcc.n	80212a8 <find_volume+0x208>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 802120c:	f04f 33ff 	mov.w	r3, #4294967295
 8021210:	e9c4 3304 	strd	r3, r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8021214:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
 8021216:	f04f 0380 	mov.w	r3, #128	@ 0x80
 802121a:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 802121c:	d12b      	bne.n	8021276 <find_volume+0x1d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 802121e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8021222:	2b01      	cmp	r3, #1
 8021224:	d127      	bne.n	8021276 <find_volume+0x1d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8021226:	1c71      	adds	r1, r6, #1
 8021228:	4620      	mov	r0, r4
 802122a:	f7ff fee3 	bl	8020ff4 <move_window>
 802122e:	bb10      	cbnz	r0, 8021276 <find_volume+0x1d6>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8021230:	f8b4 2232 	ldrh.w	r2, [r4, #562]	@ 0x232
			fs->fsi_flag = 0;
 8021234:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8021236:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 802123a:	429a      	cmp	r2, r3
 802123c:	d11b      	bne.n	8021276 <find_volume+0x1d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 802123e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8021242:	f7ff fe81 	bl	8020f48 <ld_dword>
 8021246:	4b27      	ldr	r3, [pc, #156]	@ (80212e4 <find_volume+0x244>)
 8021248:	4298      	cmp	r0, r3
 802124a:	d114      	bne.n	8021276 <find_volume+0x1d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 802124c:	f504 7006 	add.w	r0, r4, #536	@ 0x218
 8021250:	f7ff fe7a 	bl	8020f48 <ld_dword>
 8021254:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 8021258:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 802125c:	3320      	adds	r3, #32
 802125e:	4298      	cmp	r0, r3
 8021260:	d109      	bne.n	8021276 <find_volume+0x1d6>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8021262:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8021266:	f7ff fe6f 	bl	8020f48 <ld_dword>
 802126a:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 802126c:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 8021270:	f7ff fe6a 	bl	8020f48 <ld_dword>
 8021274:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8021276:	4a1c      	ldr	r2, [pc, #112]	@ (80212e8 <find_volume+0x248>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8021278:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 802127a:	8813      	ldrh	r3, [r2, #0]
 802127c:	3301      	adds	r3, #1
 802127e:	b29b      	uxth	r3, r3
 8021280:	8013      	strh	r3, [r2, #0]
 8021282:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8021284:	4b19      	ldr	r3, [pc, #100]	@ (80212ec <find_volume+0x24c>)
 8021286:	60e3      	str	r3, [r4, #12]
			return FR_OK;				/* The file system object is valid */
 8021288:	2000      	movs	r0, #0
 802128a:	e72b      	b.n	80210e4 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 802128c:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 802128e:	3501      	adds	r5, #1
 8021290:	2d04      	cmp	r5, #4
 8021292:	f47f af4e 	bne.w	8021132 <find_volume+0x92>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8021296:	2804      	cmp	r0, #4
 8021298:	d106      	bne.n	80212a8 <find_volume+0x208>
 802129a:	e001      	b.n	80212a0 <find_volume+0x200>
 802129c:	2804      	cmp	r0, #4
 802129e:	d101      	bne.n	80212a4 <find_volume+0x204>
 80212a0:	2001      	movs	r0, #1
 80212a2:	e71f      	b.n	80210e4 <find_volume+0x44>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80212a4:	2801      	cmp	r0, #1
 80212a6:	d901      	bls.n	80212ac <find_volume+0x20c>
 80212a8:	200d      	movs	r0, #13
 80212aa:	e71b      	b.n	80210e4 <find_volume+0x44>
 80212ac:	2600      	movs	r6, #0
 80212ae:	e74c      	b.n	802114a <find_volume+0xaa>
		fmt = FS_FAT32;
 80212b0:	2503      	movs	r5, #3
 80212b2:	e792      	b.n	80211da <find_volume+0x13a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80212b4:	2f00      	cmp	r7, #0
 80212b6:	d0f7      	beq.n	80212a8 <find_volume+0x208>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80212b8:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80212ba:	eb03 000e 	add.w	r0, r3, lr
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80212be:	ea4f 0342 	mov.w	r3, r2, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80212c2:	bf1b      	ittet	ne
 80212c4:	189b      	addne	r3, r3, r2
 80212c6:	f002 0201 	andne.w	r2, r2, #1
 80212ca:	461a      	moveq	r2, r3
 80212cc:	eb02 0253 	addne.w	r2, r2, r3, lsr #1
 80212d0:	e796      	b.n	8021200 <find_volume+0x160>
	if (vol < 0) return FR_INVALID_DRIVE;
 80212d2:	200b      	movs	r0, #11
 80212d4:	e706      	b.n	80210e4 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80212d6:	200c      	movs	r0, #12
 80212d8:	e704      	b.n	80210e4 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80212da:	2003      	movs	r0, #3
 80212dc:	e702      	b.n	80210e4 <find_volume+0x44>
 80212de:	bf00      	nop
 80212e0:	20002fb0 	.word	0x20002fb0
 80212e4:	41615252 	.word	0x41615252
 80212e8:	20002fac 	.word	0x20002fac
 80212ec:	20002f2a 	.word	0x20002f2a

080212f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80212f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80212f2:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80212f6:	a803      	add	r0, sp, #12
{
 80212f8:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 80212fa:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80212fc:	f7ff fe34 	bl	8020f68 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8021300:	2800      	cmp	r0, #0
 8021302:	db17      	blt.n	8021334 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8021304:	490c      	ldr	r1, [pc, #48]	@ (8021338 <f_mount+0x48>)
 8021306:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]

	if (cfs) {
 802130a:	b10b      	cbz	r3, 8021310 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 802130c:	2200      	movs	r2, #0
 802130e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8021310:	9b01      	ldr	r3, [sp, #4]
 8021312:	b923      	cbnz	r3, 802131e <f_mount+0x2e>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8021314:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8021318:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 802131a:	b004      	add	sp, #16
 802131c:	bd10      	pop	{r4, pc}
		fs->fs_type = 0;				/* Clear new fs object */
 802131e:	2200      	movs	r2, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8021320:	2c01      	cmp	r4, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8021322:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8021326:	701a      	strb	r2, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8021328:	d1f6      	bne.n	8021318 <f_mount+0x28>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 802132a:	a901      	add	r1, sp, #4
 802132c:	4668      	mov	r0, sp
 802132e:	f7ff feb7 	bl	80210a0 <find_volume>
	LEAVE_FF(fs, res);
 8021332:	e7f2      	b.n	802131a <f_mount+0x2a>
	if (vol < 0) return FR_INVALID_DRIVE;
 8021334:	200b      	movs	r0, #11
 8021336:	e7f0      	b.n	802131a <f_mount+0x2a>
 8021338:	20002fb0 	.word	0x20002fb0

0802133c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 802133c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021340:	b089      	sub	sp, #36	@ 0x24
 8021342:	460d      	mov	r5, r1
 8021344:	9005      	str	r0, [sp, #20]
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8021346:	a805      	add	r0, sp, #20
{
 8021348:	4616      	mov	r6, r2
 802134a:	461c      	mov	r4, r3
	vol = get_ldnumber(&path);					/* Get target logical drive */
 802134c:	f7ff fe0c 	bl	8020f68 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8021350:	1e07      	subs	r7, r0, #0
 8021352:	f2c0 8225 	blt.w	80217a0 <f_mkfs+0x464>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8021356:	4b94      	ldr	r3, [pc, #592]	@ (80215a8 <f_mkfs+0x26c>)
 8021358:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 802135c:	b10b      	cbz	r3, 8021362 <f_mkfs+0x26>
 802135e:	2200      	movs	r2, #0
 8021360:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8021362:	b2ff      	uxtb	r7, r7
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8021364:	4638      	mov	r0, r7
 8021366:	f7ff fdb5 	bl	8020ed4 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 802136a:	07c1      	lsls	r1, r0, #31
 802136c:	f100 821a 	bmi.w	80217a4 <f_mkfs+0x468>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8021370:	0742      	lsls	r2, r0, #29
 8021372:	f100 8219 	bmi.w	80217a8 <f_mkfs+0x46c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8021376:	aa06      	add	r2, sp, #24
 8021378:	2103      	movs	r1, #3
 802137a:	4638      	mov	r0, r7
 802137c:	f7ff fdd6 	bl	8020f2c <disk_ioctl>
 8021380:	b930      	cbnz	r0, 8021390 <f_mkfs+0x54>
 8021382:	9a06      	ldr	r2, [sp, #24]
 8021384:	1e53      	subs	r3, r2, #1
 8021386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 802138a:	d201      	bcs.n	8021390 <f_mkfs+0x54>
 802138c:	421a      	tst	r2, r3
 802138e:	d001      	beq.n	8021394 <f_mkfs+0x58>
 8021390:	2301      	movs	r3, #1
 8021392:	9306      	str	r3, [sp, #24]
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8021394:	b15e      	cbz	r6, 80213ae <f_mkfs+0x72>
 8021396:	4b85      	ldr	r3, [pc, #532]	@ (80215ac <f_mkfs+0x270>)
 8021398:	f5a6 5280 	sub.w	r2, r6, #4096	@ 0x1000
 802139c:	429a      	cmp	r2, r3
 802139e:	d903      	bls.n	80213a8 <f_mkfs+0x6c>
 80213a0:	2013      	movs	r0, #19
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
 80213a2:	b009      	add	sp, #36	@ 0x24
 80213a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80213a8:	1e73      	subs	r3, r6, #1
 80213aa:	4233      	tst	r3, r6
 80213ac:	d1f8      	bne.n	80213a0 <f_mkfs+0x64>
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80213ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80213b0:	f36f 030b 	bfc	r3, #0, #12
 80213b4:	9303      	str	r3, [sp, #12]
	if (!szb_buf) return FR_MKFS_ABORTED;
 80213b6:	b90b      	cbnz	r3, 80213bc <f_mkfs+0x80>
 80213b8:	200e      	movs	r0, #14
 80213ba:	e7f2      	b.n	80213a2 <f_mkfs+0x66>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80213bc:	aa07      	add	r2, sp, #28
 80213be:	2101      	movs	r1, #1
 80213c0:	4638      	mov	r0, r7
 80213c2:	f7ff fdb3 	bl	8020f2c <disk_ioctl>
 80213c6:	2800      	cmp	r0, #0
 80213c8:	f040 8281 	bne.w	80218ce <f_mkfs+0x592>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80213cc:	f015 0208 	ands.w	r2, r5, #8
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80213d0:	9b07      	ldr	r3, [sp, #28]
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80213d2:	9201      	str	r2, [sp, #4]
 80213d4:	d14a      	bne.n	802146c <f_mkfs+0x130>
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80213d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80213d8:	d9ee      	bls.n	80213b8 <f_mkfs+0x7c>
 80213da:	f04f 083f 	mov.w	r8, #63	@ 0x3f
		sz_vol -= b_vol;						/* Volume size */
 80213de:	eba3 0008 	sub.w	r0, r3, r8
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80213e2:	287f      	cmp	r0, #127	@ 0x7f
		sz_vol -= b_vol;						/* Volume size */
 80213e4:	9007      	str	r0, [sp, #28]
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80213e6:	d9e7      	bls.n	80213b8 <f_mkfs+0x7c>
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80213e8:	f5b6 2f01 	cmp.w	r6, #528384	@ 0x81000
 80213ec:	d2d8      	bcs.n	80213a0 <f_mkfs+0x64>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80213ee:	f015 0c02 	ands.w	ip, r5, #2
 80213f2:	d03d      	beq.n	8021470 <f_mkfs+0x134>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80213f4:	f005 0307 	and.w	r3, r5, #7
 80213f8:	2b02      	cmp	r3, #2
 80213fa:	d03d      	beq.n	8021478 <f_mkfs+0x13c>
 80213fc:	f005 0501 	and.w	r5, r5, #1
 8021400:	f1c5 0503 	rsb	r5, r5, #3
 8021404:	b2ed      	uxtb	r5, r5
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8021406:	9b06      	ldr	r3, [sp, #24]
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8021408:	2d03      	cmp	r5, #3
 802140a:	f103 3eff 	add.w	lr, r3, #4294967295
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 802140e:	f1c3 0300 	rsb	r3, r3, #0
	au /= ss;	/* Cluster size in unit of sector */
 8021412:	ea4f 3616 	mov.w	r6, r6, lsr #12
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8021416:	9304      	str	r3, [sp, #16]
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8021418:	d030      	beq.n	802147c <f_mkfs+0x140>
				if (!pau) {	/* au auto-selection */
 802141a:	2e00      	cmp	r6, #0
 802141c:	f040 8086 	bne.w	802152c <f_mkfs+0x1f0>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8021420:	4963      	ldr	r1, [pc, #396]	@ (80215b0 <f_mkfs+0x274>)
 8021422:	0b05      	lsrs	r5, r0, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8021424:	2201      	movs	r2, #1
 8021426:	f831 3b02 	ldrh.w	r3, [r1], #2
 802142a:	b10b      	cbz	r3, 8021430 <f_mkfs+0xf4>
 802142c:	42ab      	cmp	r3, r5
 802142e:	d97b      	bls.n	8021528 <f_mkfs+0x1ec>
				if (n_clst > MAX_FAT12) {
 8021430:	f640 73f5 	movw	r3, #4085	@ 0xff5
				n_clst = sz_vol / pau;
 8021434:	fbb0 f5f2 	udiv	r5, r0, r2
				if (n_clst > MAX_FAT12) {
 8021438:	429d      	cmp	r5, r3
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 802143a:	bf9b      	ittet	ls
 802143c:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
 8021440:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8021442:	3502      	addhi	r5, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8021444:	086d      	lsrls	r5, r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8021446:	bf8c      	ite	hi
 8021448:	006d      	lslhi	r5, r5, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 802144a:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 802144c:	f605 75ff 	addw	r5, r5, #4095	@ 0xfff
 8021450:	4633      	mov	r3, r6
 8021452:	4616      	mov	r6, r2
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8021454:	f04f 0204 	mov.w	r2, #4
 8021458:	bf8c      	ite	hi
 802145a:	f04f 0902 	movhi.w	r9, #2
					fmt = FS_FAT12;
 802145e:	f04f 0901 	movls.w	r9, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8021462:	0b2d      	lsrs	r5, r5, #12
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8021464:	9200      	str	r2, [sp, #0]
				sz_rsv = 1;						/* Number of reserved sectors */
 8021466:	f04f 0b01 	mov.w	fp, #1
 802146a:	e026      	b.n	80214ba <f_mkfs+0x17e>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 802146c:	4680      	mov	r8, r0
 802146e:	e7b6      	b.n	80213de <f_mkfs+0xa2>
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8021470:	07eb      	lsls	r3, r5, #31
 8021472:	d595      	bpl.n	80213a0 <f_mkfs+0x64>
		fmt = FS_FAT16;
 8021474:	2502      	movs	r5, #2
 8021476:	e7c6      	b.n	8021406 <f_mkfs+0xca>
				fmt = FS_FAT32; break;
 8021478:	2503      	movs	r5, #3
 802147a:	e7c4      	b.n	8021406 <f_mkfs+0xca>
				if (!pau) {	/* au auto-selection */
 802147c:	2e00      	cmp	r6, #0
 802147e:	d14f      	bne.n	8021520 <f_mkfs+0x1e4>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8021480:	4a4c      	ldr	r2, [pc, #304]	@ (80215b4 <f_mkfs+0x278>)
 8021482:	0c41      	lsrs	r1, r0, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8021484:	2601      	movs	r6, #1
 8021486:	f832 3b02 	ldrh.w	r3, [r2], #2
 802148a:	b113      	cbz	r3, 8021492 <f_mkfs+0x156>
 802148c:	428b      	cmp	r3, r1
 802148e:	d949      	bls.n	8021524 <f_mkfs+0x1e8>
 8021490:	2300      	movs	r3, #0
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8021492:	f241 0507 	movw	r5, #4103	@ 0x1007
				n_clst = sz_vol / pau;	/* Number of clusters */
 8021496:	fbb0 f2f6 	udiv	r2, r0, r6
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 802149a:	4947      	ldr	r1, [pc, #284]	@ (80215b8 <f_mkfs+0x27c>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 802149c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80214a0:	f5a2 427f 	sub.w	r2, r2, #65280	@ 0xff00
 80214a4:	3af6      	subs	r2, #246	@ 0xf6
 80214a6:	428a      	cmp	r2, r1
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80214a8:	ea4f 3515 	mov.w	r5, r5, lsr #12
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80214ac:	d884      	bhi.n	80213b8 <f_mkfs+0x7c>
				sz_dir = 0;		/* No static directory */
 80214ae:	2200      	movs	r2, #0
 80214b0:	9200      	str	r2, [sp, #0]
				sz_rsv = 32;	/* Number of reserved sectors */
 80214b2:	f04f 0b20 	mov.w	fp, #32
 80214b6:	f04f 0903 	mov.w	r9, #3
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80214ba:	9a00      	ldr	r2, [sp, #0]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80214bc:	eb0b 0a08 	add.w	sl, fp, r8
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80214c0:	1951      	adds	r1, r2, r5
 80214c2:	eb01 020a 	add.w	r2, r1, sl
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80214c6:	9904      	ldr	r1, [sp, #16]
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80214c8:	9202      	str	r2, [sp, #8]
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80214ca:	4472      	add	r2, lr
 80214cc:	400a      	ands	r2, r1
 80214ce:	9902      	ldr	r1, [sp, #8]
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80214d0:	f1b9 0f03 	cmp.w	r9, #3
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80214d4:	eba2 0201 	sub.w	r2, r2, r1
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80214d8:	9902      	ldr	r1, [sp, #8]
				sz_rsv += n; b_fat += n;
 80214da:	bf06      	itte	eq
 80214dc:	4493      	addeq	fp, r2
 80214de:	4492      	addeq	sl, r2
				sz_fat += n / n_fats;
 80214e0:	18ad      	addne	r5, r5, r2
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80214e2:	ebc8 1206 	rsb	r2, r8, r6, lsl #4
 80214e6:	440a      	add	r2, r1
 80214e8:	4290      	cmp	r0, r2
 80214ea:	f4ff af65 	bcc.w	80213b8 <f_mkfs+0x7c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80214ee:	9a00      	ldr	r2, [sp, #0]
 80214f0:	1a82      	subs	r2, r0, r2
 80214f2:	eba2 020b 	sub.w	r2, r2, fp
			if (fmt == FS_FAT32) {
 80214f6:	f1b9 0f03 	cmp.w	r9, #3
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80214fa:	eba2 0205 	sub.w	r2, r2, r5
 80214fe:	fbb2 f2f6 	udiv	r2, r2, r6
 8021502:	9202      	str	r2, [sp, #8]
			if (fmt == FS_FAT32) {
 8021504:	d114      	bne.n	8021530 <f_mkfs+0x1f4>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8021506:	9902      	ldr	r1, [sp, #8]
 8021508:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 802150c:	4291      	cmp	r1, r2
 802150e:	f200 8164 	bhi.w	80217da <f_mkfs+0x49e>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8021512:	2b00      	cmp	r3, #0
 8021514:	f47f af50 	bne.w	80213b8 <f_mkfs+0x7c>
 8021518:	2e01      	cmp	r6, #1
 802151a:	f67f af4d 	bls.w	80213b8 <f_mkfs+0x7c>
 802151e:	0876      	lsrs	r6, r6, #1
				if (!pau) {	/* au auto-selection */
 8021520:	4633      	mov	r3, r6
 8021522:	e7b6      	b.n	8021492 <f_mkfs+0x156>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8021524:	0076      	lsls	r6, r6, #1
 8021526:	e7ae      	b.n	8021486 <f_mkfs+0x14a>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8021528:	0052      	lsls	r2, r2, #1
 802152a:	e77c      	b.n	8021426 <f_mkfs+0xea>
			pau = au;
 802152c:	4632      	mov	r2, r6
 802152e:	e77f      	b.n	8021430 <f_mkfs+0xf4>
			if (fmt == FS_FAT16) {
 8021530:	f1b9 0f02 	cmp.w	r9, #2
 8021534:	f040 8149 	bne.w	80217ca <f_mkfs+0x48e>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8021538:	9902      	ldr	r1, [sp, #8]
 802153a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 802153e:	4291      	cmp	r1, r2
 8021540:	d908      	bls.n	8021554 <f_mkfs+0x218>
					if (!au && (pau * 2) <= 64) {
 8021542:	2b00      	cmp	r3, #0
 8021544:	f040 813b 	bne.w	80217be <f_mkfs+0x482>
 8021548:	0072      	lsls	r2, r6, #1
 802154a:	2a40      	cmp	r2, #64	@ 0x40
 802154c:	f200 812e 	bhi.w	80217ac <f_mkfs+0x470>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8021550:	4616      	mov	r6, r2
 8021552:	e762      	b.n	802141a <f_mkfs+0xde>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8021554:	9902      	ldr	r1, [sp, #8]
 8021556:	f640 72f5 	movw	r2, #4085	@ 0xff5
 802155a:	4291      	cmp	r1, r2
 802155c:	f200 813d 	bhi.w	80217da <f_mkfs+0x49e>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8021560:	2b00      	cmp	r3, #0
 8021562:	f47f af29 	bne.w	80213b8 <f_mkfs+0x7c>
 8021566:	0076      	lsls	r6, r6, #1
 8021568:	2e80      	cmp	r6, #128	@ 0x80
 802156a:	f67f af56 	bls.w	802141a <f_mkfs+0xde>
 802156e:	e723      	b.n	80213b8 <f_mkfs+0x7c>
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8021570:	f104 0020 	add.w	r0, r4, #32
 8021574:	f7ff fcea 	bl	8020f4c <st_dword>
 8021578:	e157      	b.n	802182a <f_mkfs+0x4ee>
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 802157a:	f7fe f925 	bl	801f7c8 <get_fattime>
 802157e:	4601      	mov	r1, r0
 8021580:	f104 0027 	add.w	r0, r4, #39	@ 0x27
 8021584:	f7ff fce2 	bl	8020f4c <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8021588:	f3c5 2307 	ubfx	r3, r5, #8, #8
	*ptr++ = (BYTE)val;
 802158c:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 802158e:	2380      	movs	r3, #128	@ 0x80
 8021590:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8021594:	2329      	movs	r3, #41	@ 0x29
 8021596:	4909      	ldr	r1, [pc, #36]	@ (80215bc <f_mkfs+0x280>)
	*ptr++ = (BYTE)val; val >>= 8;
 8021598:	75a5      	strb	r5, [r4, #22]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 802159a:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
	if (cnt) {
 802159e:	2213      	movs	r2, #19
 80215a0:	f104 002b 	add.w	r0, r4, #43	@ 0x2b
 80215a4:	e17f      	b.n	80218a6 <f_mkfs+0x56a>
 80215a6:	bf00      	nop
 80215a8:	20002fb0 	.word	0x20002fb0
 80215ac:	00fff000 	.word	0x00fff000
 80215b0:	08041e6a 	.word	0x08041e6a
 80215b4:	08041e78 	.word	0x08041e78
 80215b8:	0ffeffff 	.word	0x0ffeffff
 80215bc:	0803f788 	.word	0x0803f788
		if (fmt == FS_FAT32) {
 80215c0:	f1b9 0f03 	cmp.w	r9, #3
 80215c4:	d141      	bne.n	802164a <f_mkfs+0x30e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80215c6:	2301      	movs	r3, #1
 80215c8:	f108 0206 	add.w	r2, r8, #6
 80215cc:	4621      	mov	r1, r4
 80215ce:	4638      	mov	r0, r7
 80215d0:	f7ff fc9e 	bl	8020f10 <disk_write>
	*ptr++ = (BYTE)val; val >>= 8;
 80215d4:	2352      	movs	r3, #82	@ 0x52
			mem_set(buf, 0, ss);
 80215d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80215da:	4659      	mov	r1, fp
 80215dc:	4620      	mov	r0, r4
 80215de:	f7ff fcbd 	bl	8020f5c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80215e2:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80215e4:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80215e6:	2361      	movs	r3, #97	@ 0x61
 80215e8:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80215ea:	f884 31e7 	strb.w	r3, [r4, #487]	@ 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80215ee:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val;
 80215f0:	2241      	movs	r2, #65	@ 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80215f2:	2172      	movs	r1, #114	@ 0x72
	*ptr++ = (BYTE)val;
 80215f4:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80215f6:	f884 11e4 	strb.w	r1, [r4, #484]	@ 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 80215fa:	f884 11e5 	strb.w	r1, [r4, #485]	@ 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 80215fe:	f884 21e6 	strb.w	r2, [r4, #486]	@ 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8021602:	1e59      	subs	r1, r3, #1
 8021604:	f504 70f4 	add.w	r0, r4, #488	@ 0x1e8
 8021608:	f7ff fca0 	bl	8020f4c <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 802160c:	2302      	movs	r3, #2
 802160e:	f884 31ec 	strb.w	r3, [r4, #492]	@ 0x1ec
	*ptr++ = (BYTE)val; val >>= 8;
 8021612:	f04f 0355 	mov.w	r3, #85	@ 0x55
 8021616:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 802161a:	f06f 0355 	mvn.w	r3, #85	@ 0x55
 802161e:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8021622:	f108 0207 	add.w	r2, r8, #7
 8021626:	2301      	movs	r3, #1
 8021628:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 802162a:	f884 b1ed 	strb.w	fp, [r4, #493]	@ 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 802162e:	f884 b1ee 	strb.w	fp, [r4, #494]	@ 0x1ee
	*ptr++ = (BYTE)val;
 8021632:	f884 b1ef 	strb.w	fp, [r4, #495]	@ 0x1ef
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8021636:	4638      	mov	r0, r7
 8021638:	f7ff fc6a 	bl	8020f10 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 802163c:	2301      	movs	r3, #1
 802163e:	eb08 0203 	add.w	r2, r8, r3
 8021642:	4621      	mov	r1, r4
 8021644:	4638      	mov	r0, r7
 8021646:	f7ff fc63 	bl	8020f10 <disk_write>
		mem_set(buf, 0, (UINT)szb_buf);
 802164a:	9a03      	ldr	r2, [sp, #12]
 802164c:	2100      	movs	r1, #0
 802164e:	4620      	mov	r0, r4
 8021650:	f7ff fc84 	bl	8020f5c <mem_set>
			if (fmt == FS_FAT32) {
 8021654:	f1b9 0f03 	cmp.w	r9, #3
 8021658:	d158      	bne.n	802170c <f_mkfs+0x3d0>
	*ptr++ = (BYTE)val; val >>= 8;
 802165a:	23f8      	movs	r3, #248	@ 0xf8
 802165c:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 802165e:	23ff      	movs	r3, #255	@ 0xff
 8021660:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8021662:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 8021664:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8021666:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8021668:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 802166a:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 802166c:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 802166e:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8021670:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8021672:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 8021674:	230f      	movs	r3, #15
 8021676:	72e3      	strb	r3, [r4, #11]
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8021678:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802167a:	0b1b      	lsrs	r3, r3, #12
 802167c:	9302      	str	r3, [sp, #8]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 802167e:	9b02      	ldr	r3, [sp, #8]
 8021680:	42ab      	cmp	r3, r5
 8021682:	bf28      	it	cs
 8021684:	462b      	movcs	r3, r5
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8021686:	4621      	mov	r1, r4
 8021688:	4652      	mov	r2, sl
 802168a:	4638      	mov	r0, r7
				n = (nsect > sz_buf) ? sz_buf : nsect;
 802168c:	469b      	mov	fp, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 802168e:	f7ff fc3f 	bl	8020f10 <disk_write>
 8021692:	4601      	mov	r1, r0
 8021694:	2800      	cmp	r0, #0
 8021696:	f040 811a 	bne.w	80218ce <f_mkfs+0x592>
				mem_set(buf, 0, ss);
 802169a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 802169e:	4620      	mov	r0, r4
 80216a0:	f7ff fc5c 	bl	8020f5c <mem_set>
			} while (nsect);
 80216a4:	ebb5 050b 	subs.w	r5, r5, fp
				sect += n; nsect -= n;
 80216a8:	44da      	add	sl, fp
			} while (nsect);
 80216aa:	d1e8      	bne.n	802167e <f_mkfs+0x342>
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80216ac:	9b00      	ldr	r3, [sp, #0]
 80216ae:	f1b9 0f03 	cmp.w	r9, #3
 80216b2:	bf08      	it	eq
 80216b4:	4633      	moveq	r3, r6
 80216b6:	9300      	str	r3, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80216b8:	9d00      	ldr	r5, [sp, #0]
 80216ba:	9b02      	ldr	r3, [sp, #8]
 80216bc:	429d      	cmp	r5, r3
 80216be:	bf28      	it	cs
 80216c0:	461d      	movcs	r5, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80216c2:	462b      	mov	r3, r5
 80216c4:	4652      	mov	r2, sl
 80216c6:	4621      	mov	r1, r4
 80216c8:	4638      	mov	r0, r7
 80216ca:	f7ff fc21 	bl	8020f10 <disk_write>
 80216ce:	2800      	cmp	r0, #0
 80216d0:	f040 80fd 	bne.w	80218ce <f_mkfs+0x592>
		} while (nsect);
 80216d4:	9b00      	ldr	r3, [sp, #0]
 80216d6:	1b5b      	subs	r3, r3, r5
			sect += n; nsect -= n;
 80216d8:	44aa      	add	sl, r5
		} while (nsect);
 80216da:	9300      	str	r3, [sp, #0]
 80216dc:	d1ec      	bne.n	80216b8 <f_mkfs+0x37c>
		if (fmt == FS_FAT32) {
 80216de:	f1b9 0f03 	cmp.w	r9, #3
 80216e2:	d01d      	beq.n	8021720 <f_mkfs+0x3e4>
			if (sz_vol >= 0x10000) {
 80216e4:	9b07      	ldr	r3, [sp, #28]
 80216e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80216ea:	d21b      	bcs.n	8021724 <f_mkfs+0x3e8>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80216ec:	f1b9 0f02 	cmp.w	r9, #2
 80216f0:	bf14      	ite	ne
 80216f2:	2301      	movne	r3, #1
 80216f4:	2304      	moveq	r3, #4
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80216f6:	9a01      	ldr	r2, [sp, #4]
 80216f8:	b1b2      	cbz	r2, 8021728 <f_mkfs+0x3ec>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80216fa:	2200      	movs	r2, #0
 80216fc:	4611      	mov	r1, r2
 80216fe:	4638      	mov	r0, r7
 8021700:	f7ff fc14 	bl	8020f2c <disk_ioctl>
 8021704:	3800      	subs	r0, #0
 8021706:	bf18      	it	ne
 8021708:	2001      	movne	r0, #1
 802170a:	e64a      	b.n	80213a2 <f_mkfs+0x66>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 802170c:	f1b9 0f01 	cmp.w	r9, #1
 8021710:	4970      	ldr	r1, [pc, #448]	@ (80218d4 <f_mkfs+0x598>)
 8021712:	4620      	mov	r0, r4
 8021714:	bf18      	it	ne
 8021716:	f06f 0107 	mvnne.w	r1, #7
 802171a:	f7ff fc17 	bl	8020f4c <st_dword>
 802171e:	e7ab      	b.n	8021678 <f_mkfs+0x33c>
			sys = 0x0C;		/* FAT32X */
 8021720:	230c      	movs	r3, #12
 8021722:	e7e8      	b.n	80216f6 <f_mkfs+0x3ba>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8021724:	2306      	movs	r3, #6
 8021726:	e7e6      	b.n	80216f6 <f_mkfs+0x3ba>
			mem_set(buf, 0, ss);
 8021728:	9901      	ldr	r1, [sp, #4]
 802172a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 802172e:	4620      	mov	r0, r4
 8021730:	f7ff fc14 	bl	8020f5c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8021734:	2255      	movs	r2, #85	@ 0x55
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8021736:	9e07      	ldr	r6, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8021738:	f884 21fe 	strb.w	r2, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 802173c:	22aa      	movs	r2, #170	@ 0xaa
 802173e:	f884 21ff 	strb.w	r2, [r4, #511]	@ 0x1ff
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8021742:	9a01      	ldr	r2, [sp, #4]
 8021744:	f884 21be 	strb.w	r2, [r4, #446]	@ 0x1be
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8021748:	f884 21c1 	strb.w	r2, [r4, #449]	@ 0x1c1
			pte[PTE_System] = sys;				/* System type */
 802174c:	f884 31c2 	strb.w	r3, [r4, #450]	@ 0x1c2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8021750:	eb06 0208 	add.w	r2, r6, r8
 8021754:	f643 63c1 	movw	r3, #16065	@ 0x3ec1
 8021758:	fbb2 f2f3 	udiv	r2, r2, r3
			pte[PTE_EdHead] = 254;				/* End head */
 802175c:	23fe      	movs	r3, #254	@ 0xfe
 802175e:	f884 31c3 	strb.w	r3, [r4, #451]	@ 0x1c3
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8021762:	0893      	lsrs	r3, r2, #2
 8021764:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
			pte[PTE_StHead] = 1;				/* Start head */
 8021768:	2501      	movs	r5, #1
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 802176a:	f884 31c4 	strb.w	r3, [r4, #452]	@ 0x1c4
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 802176e:	f884 21c5 	strb.w	r2, [r4, #453]	@ 0x1c5
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8021772:	4641      	mov	r1, r8
 8021774:	f504 70e3 	add.w	r0, r4, #454	@ 0x1c6
			pte[PTE_StHead] = 1;				/* Start head */
 8021778:	f884 51bf 	strb.w	r5, [r4, #447]	@ 0x1bf
			pte[PTE_StSec] = 1;					/* Start sector */
 802177c:	f884 51c0 	strb.w	r5, [r4, #448]	@ 0x1c0
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8021780:	f7ff fbe4 	bl	8020f4c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8021784:	4631      	mov	r1, r6
 8021786:	f504 70e5 	add.w	r0, r4, #458	@ 0x1ca
 802178a:	f7ff fbdf 	bl	8020f4c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 802178e:	9a01      	ldr	r2, [sp, #4]
 8021790:	462b      	mov	r3, r5
 8021792:	4621      	mov	r1, r4
 8021794:	4638      	mov	r0, r7
 8021796:	f7ff fbbb 	bl	8020f10 <disk_write>
 802179a:	2800      	cmp	r0, #0
 802179c:	d0ad      	beq.n	80216fa <f_mkfs+0x3be>
 802179e:	e096      	b.n	80218ce <f_mkfs+0x592>
	if (vol < 0) return FR_INVALID_DRIVE;
 80217a0:	200b      	movs	r0, #11
 80217a2:	e5fe      	b.n	80213a2 <f_mkfs+0x66>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80217a4:	2003      	movs	r0, #3
 80217a6:	e5fc      	b.n	80213a2 <f_mkfs+0x66>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80217a8:	200a      	movs	r0, #10
 80217aa:	e5fa      	b.n	80213a2 <f_mkfs+0x66>
					if ((opt & FM_FAT32)) {
 80217ac:	f1bc 0f00 	cmp.w	ip, #0
 80217b0:	f47f ae66 	bne.w	8021480 <f_mkfs+0x144>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80217b4:	2a80      	cmp	r2, #128	@ 0x80
 80217b6:	f63f adff 	bhi.w	80213b8 <f_mkfs+0x7c>
 80217ba:	4616      	mov	r6, r2
 80217bc:	e638      	b.n	8021430 <f_mkfs+0xf4>
					if ((opt & FM_FAT32)) {
 80217be:	f1bc 0f00 	cmp.w	ip, #0
 80217c2:	f43f adf9 	beq.w	80213b8 <f_mkfs+0x7c>
			pau = au;
 80217c6:	461e      	mov	r6, r3
 80217c8:	e663      	b.n	8021492 <f_mkfs+0x156>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80217ca:	9a02      	ldr	r2, [sp, #8]
 80217cc:	f640 73f5 	movw	r3, #4085	@ 0xff5
 80217d0:	429a      	cmp	r2, r3
 80217d2:	f63f adf1 	bhi.w	80213b8 <f_mkfs+0x7c>
 80217d6:	f04f 0901 	mov.w	r9, #1
		mem_set(buf, 0, ss);
 80217da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80217de:	2100      	movs	r1, #0
 80217e0:	4620      	mov	r0, r4
 80217e2:	f7ff fbbb 	bl	8020f5c <mem_set>
	if (cnt) {
 80217e6:	493c      	ldr	r1, [pc, #240]	@ (80218d8 <f_mkfs+0x59c>)
 80217e8:	220b      	movs	r2, #11
 80217ea:	4620      	mov	r0, r4
 80217ec:	f7ff fbf9 	bl	8020fe2 <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 80217f0:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 80217f2:	2210      	movs	r2, #16
		if (sz_vol < 0x10000) {
 80217f4:	9907      	ldr	r1, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80217f6:	72e3      	strb	r3, [r4, #11]
 80217f8:	7463      	strb	r3, [r4, #17]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80217fa:	f1b9 0303 	subs.w	r3, r9, #3
 80217fe:	bf18      	it	ne
 8021800:	2301      	movne	r3, #1
	*ptr++ = (BYTE)val;
 8021802:	7322      	strb	r2, [r4, #12]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8021804:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8021806:	f884 b00e 	strb.w	fp, [r4, #14]
 802180a:	4093      	lsls	r3, r2
 802180c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
		if (sz_vol < 0x10000) {
 8021810:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8021814:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 8021816:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 802181a:	7422      	strb	r2, [r4, #16]
	*ptr++ = (BYTE)val;
 802181c:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 802181e:	f4bf aea7 	bcs.w	8021570 <f_mkfs+0x234>
	*ptr++ = (BYTE)val; val >>= 8;
 8021822:	74e1      	strb	r1, [r4, #19]
 8021824:	f3c1 2107 	ubfx	r1, r1, #8, #8
	*ptr++ = (BYTE)val;
 8021828:	7521      	strb	r1, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 802182a:	23f8      	movs	r3, #248	@ 0xf8
 802182c:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 802182e:	233f      	movs	r3, #63	@ 0x3f
 8021830:	7623      	strb	r3, [r4, #24]
	*ptr++ = (BYTE)val;
 8021832:	f04f 0b00 	mov.w	fp, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8021836:	23ff      	movs	r3, #255	@ 0xff
	*ptr++ = (BYTE)val;
 8021838:	f884 b019 	strb.w	fp, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 802183c:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
 802183e:	f884 b01b 	strb.w	fp, [r4, #27]
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8021842:	4641      	mov	r1, r8
 8021844:	f104 001c 	add.w	r0, r4, #28
 8021848:	f7ff fb80 	bl	8020f4c <st_dword>
		if (fmt == FS_FAT32) {
 802184c:	f1b9 0f03 	cmp.w	r9, #3
 8021850:	f47f ae93 	bne.w	802157a <f_mkfs+0x23e>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8021854:	f7fd ffb8 	bl	801f7c8 <get_fattime>
 8021858:	4601      	mov	r1, r0
 802185a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 802185e:	f7ff fb75 	bl	8020f4c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8021862:	4629      	mov	r1, r5
 8021864:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8021868:	f7ff fb70 	bl	8020f4c <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 802186c:	2302      	movs	r3, #2
 802186e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8021872:	2301      	movs	r3, #1
 8021874:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8021878:	2306      	movs	r3, #6
 802187a:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 802187e:	2380      	movs	r3, #128	@ 0x80
 8021880:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8021884:	4915      	ldr	r1, [pc, #84]	@ (80218dc <f_mkfs+0x5a0>)
	*ptr++ = (BYTE)val; val >>= 8;
 8021886:	f884 b02d 	strb.w	fp, [r4, #45]	@ 0x2d
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 802188a:	2329      	movs	r3, #41	@ 0x29
	*ptr++ = (BYTE)val; val >>= 8;
 802188c:	f884 b02e 	strb.w	fp, [r4, #46]	@ 0x2e
	*ptr++ = (BYTE)val;
 8021890:	f884 b02f 	strb.w	fp, [r4, #47]	@ 0x2f
	*ptr++ = (BYTE)val;
 8021894:	f884 b031 	strb.w	fp, [r4, #49]	@ 0x31
 8021898:	f884 b033 	strb.w	fp, [r4, #51]	@ 0x33
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 802189c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
	if (cnt) {
 80218a0:	2213      	movs	r2, #19
 80218a2:	f104 0047 	add.w	r0, r4, #71	@ 0x47
 80218a6:	f7ff fb9c 	bl	8020fe2 <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 80218aa:	f04f 0355 	mov.w	r3, #85	@ 0x55
 80218ae:	f884 31fe 	strb.w	r3, [r4, #510]	@ 0x1fe
	*ptr++ = (BYTE)val;
 80218b2:	f06f 0355 	mvn.w	r3, #85	@ 0x55
 80218b6:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80218ba:	4642      	mov	r2, r8
 80218bc:	2301      	movs	r3, #1
 80218be:	4621      	mov	r1, r4
 80218c0:	4638      	mov	r0, r7
 80218c2:	f7ff fb25 	bl	8020f10 <disk_write>
 80218c6:	4683      	mov	fp, r0
 80218c8:	2800      	cmp	r0, #0
 80218ca:	f43f ae79 	beq.w	80215c0 <f_mkfs+0x284>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80218ce:	2001      	movs	r0, #1
 80218d0:	e567      	b.n	80213a2 <f_mkfs+0x66>
 80218d2:	bf00      	nop
 80218d4:	00fffff8 	.word	0x00fffff8
 80218d8:	0803f768 	.word	0x0803f768
 80218dc:	0803f774 	.word	0x0803f774

080218e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80218e0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80218e2:	4b0e      	ldr	r3, [pc, #56]	@ (802191c <FATFS_LinkDriverEx+0x3c>)
 80218e4:	7a5c      	ldrb	r4, [r3, #9]
{
 80218e6:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 80218e8:	f004 00ff 	and.w	r0, r4, #255	@ 0xff
 80218ec:	b9a4      	cbnz	r4, 8021918 <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 80218ee:	7a5c      	ldrb	r4, [r3, #9]
 80218f0:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80218f2:	7a5c      	ldrb	r4, [r3, #9]
 80218f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80218f8:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80218fa:	7a5c      	ldrb	r4, [r3, #9]
 80218fc:	441c      	add	r4, r3
 80218fe:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8021900:	7a5a      	ldrb	r2, [r3, #9]
 8021902:	1c54      	adds	r4, r2, #1
 8021904:	b2e4      	uxtb	r4, r4
 8021906:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8021908:	233a      	movs	r3, #58	@ 0x3a
    path[0] = DiskNum + '0';
 802190a:	3230      	adds	r2, #48	@ 0x30
    path[1] = ':';
 802190c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 802190e:	232f      	movs	r3, #47	@ 0x2f
    path[0] = DiskNum + '0';
 8021910:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8021912:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8021914:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8021916:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8021918:	2001      	movs	r0, #1
 802191a:	e7fc      	b.n	8021916 <FATFS_LinkDriverEx+0x36>
 802191c:	20002fb4 	.word	0x20002fb4

08021920 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8021920:	2200      	movs	r2, #0
 8021922:	f7ff bfdd 	b.w	80218e0 <FATFS_LinkDriverEx>

08021926 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8021926:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8021928:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 802192c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 802192e:	f001 fb6b 	bl	8023008 <xTaskGetSchedulerState>
 8021932:	2801      	cmp	r0, #1
 8021934:	d003      	beq.n	802193e <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8021936:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 802193a:	f001 bf0b 	b.w	8023754 <xPortSysTickHandler>
}
 802193e:	bd08      	pop	{r3, pc}

08021940 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8021940:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8021944:	b92b      	cbnz	r3, 8021952 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8021946:	4b06      	ldr	r3, [pc, #24]	@ (8021960 <osKernelInitialize+0x20>)
 8021948:	6818      	ldr	r0, [r3, #0]
 802194a:	b928      	cbnz	r0, 8021958 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 802194c:	2201      	movs	r2, #1
 802194e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8021950:	4770      	bx	lr
    stat = osErrorISR;
 8021952:	f06f 0005 	mvn.w	r0, #5
 8021956:	4770      	bx	lr
    } else {
      stat = osError;
 8021958:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 802195c:	4770      	bx	lr
 802195e:	bf00      	nop
 8021960:	20003710 	.word	0x20003710

08021964 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8021964:	b510      	push	{r4, lr}
 8021966:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 802196a:	b95c      	cbnz	r4, 8021984 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 802196c:	4b08      	ldr	r3, [pc, #32]	@ (8021990 <osKernelStart+0x2c>)
 802196e:	681a      	ldr	r2, [r3, #0]
 8021970:	2a01      	cmp	r2, #1
 8021972:	d10a      	bne.n	802198a <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021974:	4a07      	ldr	r2, [pc, #28]	@ (8021994 <osKernelStart+0x30>)
 8021976:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8021978:	2202      	movs	r2, #2
 802197a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 802197c:	f001 f8b2 	bl	8022ae4 <vTaskStartScheduler>
      stat = osOK;
 8021980:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8021982:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8021984:	f06f 0005 	mvn.w	r0, #5
 8021988:	e7fb      	b.n	8021982 <osKernelStart+0x1e>
      stat = osError;
 802198a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 802198e:	e7f8      	b.n	8021982 <osKernelStart+0x1e>
 8021990:	20003710 	.word	0x20003710
 8021994:	e000ed00 	.word	0xe000ed00

08021998 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8021998:	b5f0      	push	{r4, r5, r6, r7, lr}
 802199a:	b087      	sub	sp, #28
 802199c:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 802199e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80219a0:	460b      	mov	r3, r1
  hTask = NULL;
 80219a2:	9205      	str	r2, [sp, #20]
 80219a4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80219a8:	b9fa      	cbnz	r2, 80219ea <osThreadNew+0x52>
 80219aa:	b1f0      	cbz	r0, 80219ea <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80219ac:	b354      	cbz	r4, 8021a04 <osThreadNew+0x6c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80219ae:	69a5      	ldr	r5, [r4, #24]
 80219b0:	b125      	cbz	r5, 80219bc <osThreadNew+0x24>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80219b2:	1e69      	subs	r1, r5, #1
 80219b4:	2937      	cmp	r1, #55	@ 0x37
 80219b6:	d902      	bls.n	80219be <osThreadNew+0x26>
        return (NULL);
 80219b8:	2000      	movs	r0, #0
 80219ba:	e017      	b.n	80219ec <osThreadNew+0x54>
    prio  = (UBaseType_t)osPriorityNormal;
 80219bc:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80219be:	6862      	ldr	r2, [r4, #4]
 80219c0:	07d2      	lsls	r2, r2, #31
 80219c2:	d4f9      	bmi.n	80219b8 <osThreadNew+0x20>
      }

      if (attr->stack_size > 0U) {
 80219c4:	6966      	ldr	r6, [r4, #20]
 80219c6:	b19e      	cbz	r6, 80219f0 <osThreadNew+0x58>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80219c8:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80219ca:	e9d4 7c02 	ldrd	r7, ip, [r4, #8]
      if (attr->name != NULL) {
 80219ce:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80219d0:	b187      	cbz	r7, 80219f4 <osThreadNew+0x5c>
 80219d2:	f1bc 0fa7 	cmp.w	ip, #167	@ 0xa7
 80219d6:	d908      	bls.n	80219ea <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80219d8:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80219da:	b134      	cbz	r4, 80219ea <osThreadNew+0x52>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80219dc:	b12e      	cbz	r6, 80219ea <osThreadNew+0x52>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80219de:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80219e2:	9500      	str	r5, [sp, #0]
 80219e4:	f001 f818 	bl	8022a18 <xTaskCreateStatic>
 80219e8:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80219ea:	9805      	ldr	r0, [sp, #20]
}
 80219ec:	b007      	add	sp, #28
 80219ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80219f0:	2280      	movs	r2, #128	@ 0x80
 80219f2:	e7ea      	b.n	80219ca <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80219f4:	f1bc 0f00 	cmp.w	ip, #0
 80219f8:	d1f7      	bne.n	80219ea <osThreadNew+0x52>
 80219fa:	6924      	ldr	r4, [r4, #16]
 80219fc:	2c00      	cmp	r4, #0
 80219fe:	d1f4      	bne.n	80219ea <osThreadNew+0x52>
 8021a00:	460c      	mov	r4, r1
 8021a02:	e001      	b.n	8021a08 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8021a04:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8021a06:	2280      	movs	r2, #128	@ 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8021a08:	a905      	add	r1, sp, #20
 8021a0a:	e9cd 5100 	strd	r5, r1, [sp]
 8021a0e:	b292      	uxth	r2, r2
 8021a10:	4621      	mov	r1, r4
 8021a12:	f001 f839 	bl	8022a88 <xTaskCreate>
 8021a16:	2801      	cmp	r0, #1
            hTask = NULL;
 8021a18:	bf1c      	itt	ne
 8021a1a:	2300      	movne	r3, #0
 8021a1c:	9305      	strne	r3, [sp, #20]
 8021a1e:	e7e4      	b.n	80219ea <osThreadNew+0x52>

08021a20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8021a20:	b508      	push	{r3, lr}
 8021a22:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8021a26:	b922      	cbnz	r2, 8021a32 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8021a28:	b108      	cbz	r0, 8021a2e <osDelay+0xe>
      vTaskDelay(ticks);
 8021a2a:	f001 f9c3 	bl	8022db4 <vTaskDelay>
    stat = osOK;
 8021a2e:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8021a30:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8021a32:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8021a36:	e7fb      	b.n	8021a30 <osDelay+0x10>

08021a38 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8021a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a3a:	4604      	mov	r4, r0
 8021a3c:	460e      	mov	r6, r1
 8021a3e:	4615      	mov	r5, r2
 8021a40:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8021a44:	b942      	cbnz	r2, 8021a58 <osSemaphoreNew+0x20>
 8021a46:	b138      	cbz	r0, 8021a58 <osSemaphoreNew+0x20>
 8021a48:	4288      	cmp	r0, r1
 8021a4a:	d305      	bcc.n	8021a58 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8021a4c:	b155      	cbz	r5, 8021a64 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8021a4e:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8021a52:	b12b      	cbz	r3, 8021a60 <osSemaphoreNew+0x28>
 8021a54:	2f4f      	cmp	r7, #79	@ 0x4f
 8021a56:	d822      	bhi.n	8021a9e <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8021a58:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8021a5a:	4620      	mov	r0, r4
 8021a5c:	b003      	add	sp, #12
 8021a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8021a60:	2f00      	cmp	r7, #0
 8021a62:	d1f9      	bne.n	8021a58 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8021a64:	2c01      	cmp	r4, #1
 8021a66:	d00c      	beq.n	8021a82 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8021a68:	4620      	mov	r0, r4
 8021a6a:	4631      	mov	r1, r6
 8021a6c:	f000 fad8 	bl	8022020 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8021a70:	4604      	mov	r4, r0
 8021a72:	2800      	cmp	r0, #0
 8021a74:	d0f0      	beq.n	8021a58 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8021a76:	b985      	cbnz	r5, 8021a9a <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8021a78:	4629      	mov	r1, r5
 8021a7a:	4620      	mov	r0, r4
 8021a7c:	f000 fdf6 	bl	802266c <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8021a80:	e7eb      	b.n	8021a5a <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8021a82:	2203      	movs	r2, #3
 8021a84:	2100      	movs	r1, #0
 8021a86:	2001      	movs	r0, #1
 8021a88:	f000 fa81 	bl	8021f8e <xQueueGenericCreate>
 8021a8c:	e00e      	b.n	8021aac <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8021a8e:	461a      	mov	r2, r3
 8021a90:	f000 faa4 	bl	8021fdc <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8021a94:	4604      	mov	r4, r0
 8021a96:	2800      	cmp	r0, #0
 8021a98:	d0de      	beq.n	8021a58 <osSemaphoreNew+0x20>
          name = attr->name;
 8021a9a:	682d      	ldr	r5, [r5, #0]
 8021a9c:	e7ec      	b.n	8021a78 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8021a9e:	2801      	cmp	r0, #1
 8021aa0:	d1f5      	bne.n	8021a8e <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8021aa2:	2103      	movs	r1, #3
 8021aa4:	9100      	str	r1, [sp, #0]
 8021aa6:	4611      	mov	r1, r2
 8021aa8:	f000 fa23 	bl	8021ef2 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8021aac:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8021aae:	2800      	cmp	r0, #0
 8021ab0:	d0d2      	beq.n	8021a58 <osSemaphoreNew+0x20>
 8021ab2:	2e00      	cmp	r6, #0
 8021ab4:	d0df      	beq.n	8021a76 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8021ab6:	2300      	movs	r3, #0
 8021ab8:	461a      	mov	r2, r3
 8021aba:	4619      	mov	r1, r3
 8021abc:	f000 face 	bl	802205c <xQueueGenericSend>
 8021ac0:	2801      	cmp	r0, #1
 8021ac2:	d0d8      	beq.n	8021a76 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8021ac4:	4620      	mov	r0, r4
 8021ac6:	f000 fdfb 	bl	80226c0 <vQueueDelete>
      if (hSemaphore != NULL) {
 8021aca:	e7c5      	b.n	8021a58 <osSemaphoreNew+0x20>

08021acc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8021acc:	b513      	push	{r0, r1, r4, lr}
 8021ace:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8021ad0:	b328      	cbz	r0, 8021b1e <osSemaphoreAcquire+0x52>
 8021ad2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8021ad6:	b1cb      	cbz	r3, 8021b0c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8021ad8:	bb09      	cbnz	r1, 8021b1e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8021ada:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8021adc:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8021ade:	f000 fd78 	bl	80225d2 <xQueueReceiveFromISR>
 8021ae2:	2801      	cmp	r0, #1
 8021ae4:	d003      	beq.n	8021aee <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8021ae6:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8021aea:	b002      	add	sp, #8
 8021aec:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8021aee:	9b01      	ldr	r3, [sp, #4]
 8021af0:	b90b      	cbnz	r3, 8021af6 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8021af2:	2000      	movs	r0, #0
 8021af4:	e7f9      	b.n	8021aea <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8021af6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8021afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021afe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8021b02:	f3bf 8f4f 	dsb	sy
 8021b06:	f3bf 8f6f 	isb	sy
 8021b0a:	e7f2      	b.n	8021af2 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8021b0c:	f000 fca4 	bl	8022458 <xQueueSemaphoreTake>
 8021b10:	2801      	cmp	r0, #1
 8021b12:	d0ee      	beq.n	8021af2 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8021b14:	2c00      	cmp	r4, #0
 8021b16:	d0e6      	beq.n	8021ae6 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8021b18:	f06f 0001 	mvn.w	r0, #1
 8021b1c:	e7e5      	b.n	8021aea <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8021b1e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8021b22:	e7e2      	b.n	8021aea <osSemaphoreAcquire+0x1e>

08021b24 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8021b24:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8021b26:	b318      	cbz	r0, 8021b70 <osSemaphoreRelease+0x4c>
 8021b28:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8021b2c:	b1cb      	cbz	r3, 8021b62 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8021b2e:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021b30:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8021b32:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8021b34:	f000 fba1 	bl	802227a <xQueueGiveFromISR>
 8021b38:	2801      	cmp	r0, #1
 8021b3a:	d004      	beq.n	8021b46 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8021b3c:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8021b40:	b003      	add	sp, #12
 8021b42:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8021b46:	9b01      	ldr	r3, [sp, #4]
 8021b48:	b14b      	cbz	r3, 8021b5e <osSemaphoreRelease+0x3a>
 8021b4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8021b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021b52:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8021b56:	f3bf 8f4f 	dsb	sy
 8021b5a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8021b5e:	2000      	movs	r0, #0
 8021b60:	e7ee      	b.n	8021b40 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8021b62:	461a      	mov	r2, r3
 8021b64:	4619      	mov	r1, r3
 8021b66:	f000 fa79 	bl	802205c <xQueueGenericSend>
 8021b6a:	2801      	cmp	r0, #1
 8021b6c:	d0f7      	beq.n	8021b5e <osSemaphoreRelease+0x3a>
 8021b6e:	e7e5      	b.n	8021b3c <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8021b70:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8021b74:	e7e4      	b.n	8021b40 <osSemaphoreRelease+0x1c>

08021b76 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8021b76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021b78:	4605      	mov	r5, r0
 8021b7a:	460e      	mov	r6, r1
 8021b7c:	4614      	mov	r4, r2
 8021b7e:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8021b82:	b11f      	cbz	r7, 8021b8c <osMessageQueueNew+0x16>
  hQueue = NULL;
 8021b84:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8021b86:	4628      	mov	r0, r5
 8021b88:	b003      	add	sp, #12
 8021b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8021b8c:	2800      	cmp	r0, #0
 8021b8e:	d0f9      	beq.n	8021b84 <osMessageQueueNew+0xe>
 8021b90:	2900      	cmp	r1, #0
 8021b92:	d0f7      	beq.n	8021b84 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8021b94:	b1da      	cbz	r2, 8021bce <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8021b96:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8021b9a:	b183      	cbz	r3, 8021bbe <osMessageQueueNew+0x48>
 8021b9c:	2a4f      	cmp	r2, #79	@ 0x4f
 8021b9e:	d9f1      	bls.n	8021b84 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8021ba0:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8021ba2:	2a00      	cmp	r2, #0
 8021ba4:	d0ee      	beq.n	8021b84 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8021ba6:	6966      	ldr	r6, [r4, #20]
 8021ba8:	434d      	muls	r5, r1
 8021baa:	42ae      	cmp	r6, r5
 8021bac:	d3ea      	bcc.n	8021b84 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8021bae:	9700      	str	r7, [sp, #0]
 8021bb0:	f000 f99f 	bl	8021ef2 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8021bb4:	4605      	mov	r5, r0
 8021bb6:	2800      	cmp	r0, #0
 8021bb8:	d0e4      	beq.n	8021b84 <osMessageQueueNew+0xe>
        name = attr->name;
 8021bba:	6824      	ldr	r4, [r4, #0]
 8021bbc:	e011      	b.n	8021be2 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8021bbe:	2a00      	cmp	r2, #0
 8021bc0:	d1e0      	bne.n	8021b84 <osMessageQueueNew+0xe>
 8021bc2:	6923      	ldr	r3, [r4, #16]
 8021bc4:	2b00      	cmp	r3, #0
 8021bc6:	d1dd      	bne.n	8021b84 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8021bc8:	6963      	ldr	r3, [r4, #20]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d1da      	bne.n	8021b84 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8021bce:	4628      	mov	r0, r5
 8021bd0:	2200      	movs	r2, #0
 8021bd2:	4631      	mov	r1, r6
 8021bd4:	f000 f9db 	bl	8021f8e <xQueueGenericCreate>
    if (hQueue != NULL) {
 8021bd8:	4605      	mov	r5, r0
 8021bda:	2800      	cmp	r0, #0
 8021bdc:	d0d2      	beq.n	8021b84 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8021bde:	2c00      	cmp	r4, #0
 8021be0:	d1eb      	bne.n	8021bba <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8021be2:	4621      	mov	r1, r4
 8021be4:	4628      	mov	r0, r5
 8021be6:	f000 fd41 	bl	802266c <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8021bea:	e7cc      	b.n	8021b86 <osMessageQueueNew+0x10>

08021bec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8021bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021bee:	461c      	mov	r4, r3
 8021bf0:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8021bf4:	b1de      	cbz	r6, 8021c2e <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021bf6:	b338      	cbz	r0, 8021c48 <osMessageQueuePut+0x5c>
 8021bf8:	b331      	cbz	r1, 8021c48 <osMessageQueuePut+0x5c>
 8021bfa:	bb2b      	cbnz	r3, 8021c48 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8021bfc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8021bfe:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8021c00:	f000 fade 	bl	80221c0 <xQueueGenericSendFromISR>
 8021c04:	2801      	cmp	r0, #1
 8021c06:	d003      	beq.n	8021c10 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8021c08:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8021c0c:	b002      	add	sp, #8
 8021c0e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8021c10:	9b01      	ldr	r3, [sp, #4]
 8021c12:	b90b      	cbnz	r3, 8021c18 <osMessageQueuePut+0x2c>
  stat = osOK;
 8021c14:	2000      	movs	r0, #0
 8021c16:	e7f9      	b.n	8021c0c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8021c18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8021c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021c20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8021c24:	f3bf 8f4f 	dsb	sy
 8021c28:	f3bf 8f6f 	isb	sy
 8021c2c:	e7f2      	b.n	8021c14 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8021c2e:	b158      	cbz	r0, 8021c48 <osMessageQueuePut+0x5c>
 8021c30:	b151      	cbz	r1, 8021c48 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8021c32:	4633      	mov	r3, r6
 8021c34:	4622      	mov	r2, r4
 8021c36:	f000 fa11 	bl	802205c <xQueueGenericSend>
 8021c3a:	2801      	cmp	r0, #1
 8021c3c:	d0ea      	beq.n	8021c14 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8021c3e:	2c00      	cmp	r4, #0
 8021c40:	d0e2      	beq.n	8021c08 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8021c42:	f06f 0001 	mvn.w	r0, #1
 8021c46:	e7e1      	b.n	8021c0c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8021c48:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8021c4c:	e7de      	b.n	8021c0c <osMessageQueuePut+0x20>

08021c4e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8021c4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021c50:	461c      	mov	r4, r3
 8021c52:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8021c56:	b1db      	cbz	r3, 8021c90 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8021c58:	b330      	cbz	r0, 8021ca8 <osMessageQueueGet+0x5a>
 8021c5a:	b329      	cbz	r1, 8021ca8 <osMessageQueueGet+0x5a>
 8021c5c:	bb24      	cbnz	r4, 8021ca8 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8021c5e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8021c60:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8021c62:	f000 fcb6 	bl	80225d2 <xQueueReceiveFromISR>
 8021c66:	2801      	cmp	r0, #1
 8021c68:	d003      	beq.n	8021c72 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8021c6a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8021c6e:	b003      	add	sp, #12
 8021c70:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8021c72:	9b01      	ldr	r3, [sp, #4]
 8021c74:	b90b      	cbnz	r3, 8021c7a <osMessageQueueGet+0x2c>
  stat = osOK;
 8021c76:	2000      	movs	r0, #0
 8021c78:	e7f9      	b.n	8021c6e <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8021c7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8021c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021c82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8021c86:	f3bf 8f4f 	dsb	sy
 8021c8a:	f3bf 8f6f 	isb	sy
 8021c8e:	e7f2      	b.n	8021c76 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8021c90:	b150      	cbz	r0, 8021ca8 <osMessageQueueGet+0x5a>
 8021c92:	b149      	cbz	r1, 8021ca8 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8021c94:	4622      	mov	r2, r4
 8021c96:	f000 fb41 	bl	802231c <xQueueReceive>
 8021c9a:	2801      	cmp	r0, #1
 8021c9c:	d0eb      	beq.n	8021c76 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8021c9e:	2c00      	cmp	r4, #0
 8021ca0:	d0e3      	beq.n	8021c6a <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8021ca2:	f06f 0001 	mvn.w	r0, #1
 8021ca6:	e7e2      	b.n	8021c6e <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8021ca8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8021cac:	e7df      	b.n	8021c6e <osMessageQueueGet+0x20>
	...

08021cb0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8021cb0:	4b03      	ldr	r3, [pc, #12]	@ (8021cc0 <vApplicationGetIdleTaskMemory+0x10>)
 8021cb2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8021cb4:	4b03      	ldr	r3, [pc, #12]	@ (8021cc4 <vApplicationGetIdleTaskMemory+0x14>)
 8021cb6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8021cb8:	2380      	movs	r3, #128	@ 0x80
 8021cba:	6013      	str	r3, [r2, #0]
}
 8021cbc:	4770      	bx	lr
 8021cbe:	bf00      	nop
 8021cc0:	20003668 	.word	0x20003668
 8021cc4:	20003468 	.word	0x20003468

08021cc8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8021cc8:	4b03      	ldr	r3, [pc, #12]	@ (8021cd8 <vApplicationGetTimerTaskMemory+0x10>)
 8021cca:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8021ccc:	4b03      	ldr	r3, [pc, #12]	@ (8021cdc <vApplicationGetTimerTaskMemory+0x14>)
 8021cce:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8021cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021cd4:	6013      	str	r3, [r2, #0]
}
 8021cd6:	4770      	bx	lr
 8021cd8:	200033c0 	.word	0x200033c0
 8021cdc:	20002fc0 	.word	0x20002fc0

08021ce0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8021ce0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8021ce4:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8021ce8:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8021cec:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8021cee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8021cf0:	2300      	movs	r3, #0
 8021cf2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8021cf4:	4770      	bx	lr

08021cf6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8021cfa:	4770      	bx	lr

08021cfc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8021cfc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8021cfe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8021d00:	689a      	ldr	r2, [r3, #8]
 8021d02:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8021d04:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8021d06:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8021d08:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8021d0a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8021d0c:	3301      	adds	r3, #1
 8021d0e:	6003      	str	r3, [r0, #0]
}
 8021d10:	4770      	bx	lr

08021d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8021d12:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8021d14:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8021d16:	1c63      	adds	r3, r4, #1
 8021d18:	d10a      	bne.n	8021d30 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8021d1a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8021d1c:	685a      	ldr	r2, [r3, #4]
 8021d1e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8021d20:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8021d22:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8021d24:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8021d26:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8021d28:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8021d2a:	3301      	adds	r3, #1
 8021d2c:	6003      	str	r3, [r0, #0]
}
 8021d2e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8021d30:	f100 0208 	add.w	r2, r0, #8
 8021d34:	4613      	mov	r3, r2
 8021d36:	6852      	ldr	r2, [r2, #4]
 8021d38:	6815      	ldr	r5, [r2, #0]
 8021d3a:	42a5      	cmp	r5, r4
 8021d3c:	d9fa      	bls.n	8021d34 <vListInsert+0x22>
 8021d3e:	e7ed      	b.n	8021d1c <vListInsert+0xa>

08021d40 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8021d40:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8021d44:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8021d46:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8021d48:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8021d4a:	6859      	ldr	r1, [r3, #4]
 8021d4c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8021d4e:	bf08      	it	eq
 8021d50:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8021d52:	2200      	movs	r2, #0
 8021d54:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8021d56:	681a      	ldr	r2, [r3, #0]
 8021d58:	3a01      	subs	r2, #1
 8021d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8021d5c:	6818      	ldr	r0, [r3, #0]
}
 8021d5e:	4770      	bx	lr

08021d60 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8021d60:	b510      	push	{r4, lr}
 8021d62:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021d64:	f001 fc8e 	bl	8023684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021d68:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8021d6a:	f001 fcab 	bl	80236c4 <vPortExitCritical>

	return xReturn;
}
 8021d6e:	fab4 f084 	clz	r0, r4
 8021d72:	0940      	lsrs	r0, r0, #5
 8021d74:	bd10      	pop	{r4, pc}

08021d76 <prvCopyDataToQueue>:
{
 8021d76:	b570      	push	{r4, r5, r6, lr}
 8021d78:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8021d7a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021d7c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 8021d7e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8021d80:	b942      	cbnz	r2, 8021d94 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021d82:	6806      	ldr	r6, [r0, #0]
 8021d84:	b99e      	cbnz	r6, 8021dae <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8021d86:	6880      	ldr	r0, [r0, #8]
 8021d88:	f001 f98c 	bl	80230a4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8021d8c:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8021d8e:	3501      	adds	r5, #1
 8021d90:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8021d92:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8021d94:	b96e      	cbnz	r6, 8021db2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021d96:	6840      	ldr	r0, [r0, #4]
 8021d98:	f01b fd44 	bl	803d824 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021d9c:	6863      	ldr	r3, [r4, #4]
 8021d9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8021da0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021da2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021da4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021da6:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8021da8:	bf24      	itt	cs
 8021daa:	6823      	ldrcs	r3, [r4, #0]
 8021dac:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8021dae:	2000      	movs	r0, #0
 8021db0:	e7ed      	b.n	8021d8e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8021db2:	68c0      	ldr	r0, [r0, #12]
 8021db4:	f01b fd36 	bl	803d824 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8021db8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8021dba:	68e3      	ldr	r3, [r4, #12]
 8021dbc:	4251      	negs	r1, r2
 8021dbe:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021dc0:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8021dc2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021dc4:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021dc6:	bf3e      	ittt	cc
 8021dc8:	68a3      	ldrcc	r3, [r4, #8]
 8021dca:	185b      	addcc	r3, r3, r1
 8021dcc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8021dce:	2e02      	cmp	r6, #2
 8021dd0:	d1ed      	bne.n	8021dae <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021dd2:	b10d      	cbz	r5, 8021dd8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8021dd4:	3d01      	subs	r5, #1
 8021dd6:	e7ea      	b.n	8021dae <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8021dd8:	4628      	mov	r0, r5
 8021dda:	e7d8      	b.n	8021d8e <prvCopyDataToQueue+0x18>

08021ddc <prvCopyDataFromQueue>:
{
 8021ddc:	4603      	mov	r3, r0
 8021dde:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8021de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8021de2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8021de4:	b16a      	cbz	r2, 8021e02 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021de6:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8021de8:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021dea:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8021dec:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8021dee:	bf28      	it	cs
 8021df0:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021df2:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8021df4:	bf28      	it	cs
 8021df6:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021df8:	68d9      	ldr	r1, [r3, #12]
}
 8021dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021dfe:	f01b bd11 	b.w	803d824 <memcpy>
}
 8021e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e06:	4770      	bx	lr

08021e08 <prvUnlockQueue>:
{
 8021e08:	b570      	push	{r4, r5, r6, lr}
 8021e0a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8021e0c:	f001 fc3a 	bl	8023684 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8021e10:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021e14:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8021e18:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8021e1a:	2d00      	cmp	r5, #0
 8021e1c:	dd01      	ble.n	8021e22 <prvUnlockQueue+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021e1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8021e20:	b9b3      	cbnz	r3, 8021e50 <prvUnlockQueue+0x48>
		pxQueue->cTxLock = queueUNLOCKED;
 8021e22:	23ff      	movs	r3, #255	@ 0xff
 8021e24:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8021e28:	f001 fc4c 	bl	80236c4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8021e2c:	f001 fc2a 	bl	8023684 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8021e30:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021e34:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8021e38:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021e3a:	2d00      	cmp	r5, #0
 8021e3c:	dd01      	ble.n	8021e42 <prvUnlockQueue+0x3a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021e3e:	6923      	ldr	r3, [r4, #16]
 8021e40:	b97b      	cbnz	r3, 8021e62 <prvUnlockQueue+0x5a>
		pxQueue->cRxLock = queueUNLOCKED;
 8021e42:	23ff      	movs	r3, #255	@ 0xff
 8021e44:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8021e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8021e4c:	f001 bc3a 	b.w	80236c4 <vPortExitCritical>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021e50:	4630      	mov	r0, r6
 8021e52:	f001 f84b 	bl	8022eec <xTaskRemoveFromEventList>
 8021e56:	b108      	cbz	r0, 8021e5c <prvUnlockQueue+0x54>
						vTaskMissedYield();
 8021e58:	f001 f8d0 	bl	8022ffc <vTaskMissedYield>
			--cTxLock;
 8021e5c:	3d01      	subs	r5, #1
 8021e5e:	b26d      	sxtb	r5, r5
 8021e60:	e7db      	b.n	8021e1a <prvUnlockQueue+0x12>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021e62:	4630      	mov	r0, r6
 8021e64:	f001 f842 	bl	8022eec <xTaskRemoveFromEventList>
 8021e68:	b108      	cbz	r0, 8021e6e <prvUnlockQueue+0x66>
					vTaskMissedYield();
 8021e6a:	f001 f8c7 	bl	8022ffc <vTaskMissedYield>
				--cRxLock;
 8021e6e:	3d01      	subs	r5, #1
 8021e70:	b26d      	sxtb	r5, r5
 8021e72:	e7e2      	b.n	8021e3a <prvUnlockQueue+0x32>

08021e74 <xQueueGenericReset>:
{
 8021e74:	b538      	push	{r3, r4, r5, lr}
 8021e76:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8021e78:	4604      	mov	r4, r0
 8021e7a:	b940      	cbnz	r0, 8021e8e <xQueueGenericReset+0x1a>
	__asm volatile
 8021e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021e80:	f383 8811 	msr	BASEPRI, r3
 8021e84:	f3bf 8f6f 	isb	sy
 8021e88:	f3bf 8f4f 	dsb	sy
 8021e8c:	e7fe      	b.n	8021e8c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8021e8e:	f001 fbf9 	bl	8023684 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021e92:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8021e96:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8021e98:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021e9a:	434b      	muls	r3, r1
 8021e9c:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021e9e:	1a5b      	subs	r3, r3, r1
 8021ea0:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021ea2:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8021ea4:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8021ea6:	2000      	movs	r0, #0
 8021ea8:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021eaa:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8021eac:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8021eb0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8021eb4:	b9a5      	cbnz	r5, 8021ee0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021eb6:	6923      	ldr	r3, [r4, #16]
 8021eb8:	b173      	cbz	r3, 8021ed8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021eba:	f104 0010 	add.w	r0, r4, #16
 8021ebe:	f001 f815 	bl	8022eec <xTaskRemoveFromEventList>
 8021ec2:	b148      	cbz	r0, 8021ed8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8021ec4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8021ec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021ecc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8021ed0:	f3bf 8f4f 	dsb	sy
 8021ed4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8021ed8:	f001 fbf4 	bl	80236c4 <vPortExitCritical>
}
 8021edc:	2001      	movs	r0, #1
 8021ede:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8021ee0:	f104 0010 	add.w	r0, r4, #16
 8021ee4:	f7ff fefc 	bl	8021ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8021ee8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8021eec:	f7ff fef8 	bl	8021ce0 <vListInitialise>
 8021ef0:	e7f2      	b.n	8021ed8 <xQueueGenericReset+0x64>

08021ef2 <xQueueGenericCreateStatic>:
	{
 8021ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021ef4:	460d      	mov	r5, r1
 8021ef6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8021ef8:	b940      	cbnz	r0, 8021f0c <xQueueGenericCreateStatic+0x1a>
 8021efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021efe:	f383 8811 	msr	BASEPRI, r3
 8021f02:	f3bf 8f6f 	isb	sy
 8021f06:	f3bf 8f4f 	dsb	sy
 8021f0a:	e7fe      	b.n	8021f0a <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8021f0c:	b943      	cbnz	r3, 8021f20 <xQueueGenericCreateStatic+0x2e>
 8021f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f12:	f383 8811 	msr	BASEPRI, r3
 8021f16:	f3bf 8f6f 	isb	sy
 8021f1a:	f3bf 8f4f 	dsb	sy
 8021f1e:	e7fe      	b.n	8021f1e <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8021f20:	b14a      	cbz	r2, 8021f36 <xQueueGenericCreateStatic+0x44>
 8021f22:	b991      	cbnz	r1, 8021f4a <xQueueGenericCreateStatic+0x58>
 8021f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f28:	f383 8811 	msr	BASEPRI, r3
 8021f2c:	f3bf 8f6f 	isb	sy
 8021f30:	f3bf 8f4f 	dsb	sy
 8021f34:	e7fe      	b.n	8021f34 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8021f36:	b141      	cbz	r1, 8021f4a <xQueueGenericCreateStatic+0x58>
 8021f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f3c:	f383 8811 	msr	BASEPRI, r3
 8021f40:	f3bf 8f6f 	isb	sy
 8021f44:	f3bf 8f4f 	dsb	sy
 8021f48:	e7fe      	b.n	8021f48 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8021f4a:	2350      	movs	r3, #80	@ 0x50
 8021f4c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8021f4e:	9b01      	ldr	r3, [sp, #4]
 8021f50:	2b50      	cmp	r3, #80	@ 0x50
 8021f52:	d008      	beq.n	8021f66 <xQueueGenericCreateStatic+0x74>
 8021f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f58:	f383 8811 	msr	BASEPRI, r3
 8021f5c:	f3bf 8f6f 	isb	sy
 8021f60:	f3bf 8f4f 	dsb	sy
 8021f64:	e7fe      	b.n	8021f64 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8021f66:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8021f68:	2d00      	cmp	r5, #0
 8021f6a:	bf08      	it	eq
 8021f6c:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8021f6e:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8021f72:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 8021f76:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8021f78:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8021f7a:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8021f7c:	f7ff ff7a 	bl	8021e74 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8021f80:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8021f84:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 8021f88:	4620      	mov	r0, r4
 8021f8a:	b003      	add	sp, #12
 8021f8c:	bd30      	pop	{r4, r5, pc}

08021f8e <xQueueGenericCreate>:
	{
 8021f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021f90:	460d      	mov	r5, r1
 8021f92:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8021f94:	4606      	mov	r6, r0
 8021f96:	b940      	cbnz	r0, 8021faa <xQueueGenericCreate+0x1c>
 8021f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021f9c:	f383 8811 	msr	BASEPRI, r3
 8021fa0:	f3bf 8f6f 	isb	sy
 8021fa4:	f3bf 8f4f 	dsb	sy
 8021fa8:	e7fe      	b.n	8021fa8 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021faa:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8021fac:	3050      	adds	r0, #80	@ 0x50
 8021fae:	f001 fccf 	bl	8023950 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8021fb2:	4604      	mov	r4, r0
 8021fb4:	b170      	cbz	r0, 8021fd4 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8021fb6:	2300      	movs	r3, #0
 8021fb8:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8021fbc:	b165      	cbz	r5, 8021fd8 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8021fbe:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 8021fc2:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8021fc6:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8021fc8:	2101      	movs	r1, #1
 8021fca:	4620      	mov	r0, r4
 8021fcc:	f7ff ff52 	bl	8021e74 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8021fd0:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 8021fd4:	4620      	mov	r0, r4
 8021fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8021fd8:	4603      	mov	r3, r0
 8021fda:	e7f2      	b.n	8021fc2 <xQueueGenericCreate+0x34>

08021fdc <xQueueCreateCountingSemaphoreStatic>:
	{
 8021fdc:	b513      	push	{r0, r1, r4, lr}
 8021fde:	4613      	mov	r3, r2
 8021fe0:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8021fe2:	b940      	cbnz	r0, 8021ff6 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8021fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021fe8:	f383 8811 	msr	BASEPRI, r3
 8021fec:	f3bf 8f6f 	isb	sy
 8021ff0:	f3bf 8f4f 	dsb	sy
 8021ff4:	e7fe      	b.n	8021ff4 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8021ff6:	4288      	cmp	r0, r1
 8021ff8:	d208      	bcs.n	802200c <xQueueCreateCountingSemaphoreStatic+0x30>
 8021ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021ffe:	f383 8811 	msr	BASEPRI, r3
 8022002:	f3bf 8f6f 	isb	sy
 8022006:	f3bf 8f4f 	dsb	sy
 802200a:	e7fe      	b.n	802200a <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 802200c:	2202      	movs	r2, #2
 802200e:	9200      	str	r2, [sp, #0]
 8022010:	2200      	movs	r2, #0
 8022012:	4611      	mov	r1, r2
 8022014:	f7ff ff6d 	bl	8021ef2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8022018:	b100      	cbz	r0, 802201c <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 802201a:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 802201c:	b002      	add	sp, #8
 802201e:	bd10      	pop	{r4, pc}

08022020 <xQueueCreateCountingSemaphore>:
	{
 8022020:	b510      	push	{r4, lr}
 8022022:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8022024:	b940      	cbnz	r0, 8022038 <xQueueCreateCountingSemaphore+0x18>
 8022026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802202a:	f383 8811 	msr	BASEPRI, r3
 802202e:	f3bf 8f6f 	isb	sy
 8022032:	f3bf 8f4f 	dsb	sy
 8022036:	e7fe      	b.n	8022036 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8022038:	4288      	cmp	r0, r1
 802203a:	d208      	bcs.n	802204e <xQueueCreateCountingSemaphore+0x2e>
 802203c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022040:	f383 8811 	msr	BASEPRI, r3
 8022044:	f3bf 8f6f 	isb	sy
 8022048:	f3bf 8f4f 	dsb	sy
 802204c:	e7fe      	b.n	802204c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 802204e:	2202      	movs	r2, #2
 8022050:	2100      	movs	r1, #0
 8022052:	f7ff ff9c 	bl	8021f8e <xQueueGenericCreate>
		if( xHandle != NULL )
 8022056:	b100      	cbz	r0, 802205a <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8022058:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 802205a:	bd10      	pop	{r4, pc}

0802205c <xQueueGenericSend>:
{
 802205c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022060:	460f      	mov	r7, r1
 8022062:	9201      	str	r2, [sp, #4]
 8022064:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8022066:	4604      	mov	r4, r0
 8022068:	b940      	cbnz	r0, 802207c <xQueueGenericSend+0x20>
 802206a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802206e:	f383 8811 	msr	BASEPRI, r3
 8022072:	f3bf 8f6f 	isb	sy
 8022076:	f3bf 8f4f 	dsb	sy
 802207a:	e7fe      	b.n	802207a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802207c:	b951      	cbnz	r1, 8022094 <xQueueGenericSend+0x38>
 802207e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8022080:	b143      	cbz	r3, 8022094 <xQueueGenericSend+0x38>
 8022082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022086:	f383 8811 	msr	BASEPRI, r3
 802208a:	f3bf 8f6f 	isb	sy
 802208e:	f3bf 8f4f 	dsb	sy
 8022092:	e7fe      	b.n	8022092 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8022094:	2e02      	cmp	r6, #2
 8022096:	d10b      	bne.n	80220b0 <xQueueGenericSend+0x54>
 8022098:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802209a:	2b01      	cmp	r3, #1
 802209c:	d008      	beq.n	80220b0 <xQueueGenericSend+0x54>
 802209e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80220a2:	f383 8811 	msr	BASEPRI, r3
 80220a6:	f3bf 8f6f 	isb	sy
 80220aa:	f3bf 8f4f 	dsb	sy
 80220ae:	e7fe      	b.n	80220ae <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80220b0:	f000 ffaa 	bl	8023008 <xTaskGetSchedulerState>
 80220b4:	4605      	mov	r5, r0
 80220b6:	b320      	cbz	r0, 8022102 <xQueueGenericSend+0xa6>
 80220b8:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80220ba:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80220be:	f001 fae1 	bl	8023684 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80220c2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80220c4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80220c6:	429a      	cmp	r2, r3
 80220c8:	d227      	bcs.n	802211a <xQueueGenericSend+0xbe>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80220ca:	4632      	mov	r2, r6
 80220cc:	4639      	mov	r1, r7
 80220ce:	4620      	mov	r0, r4
 80220d0:	f7ff fe51 	bl	8021d76 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80220d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80220d6:	b11b      	cbz	r3, 80220e0 <xQueueGenericSend+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80220d8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80220dc:	f000 ff06 	bl	8022eec <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80220e0:	b148      	cbz	r0, 80220f6 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 80220e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80220e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80220ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80220ee:	f3bf 8f4f 	dsb	sy
 80220f2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80220f6:	f001 fae5 	bl	80236c4 <vPortExitCritical>
				return pdPASS;
 80220fa:	2001      	movs	r0, #1
}
 80220fc:	b004      	add	sp, #16
 80220fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8022102:	9b01      	ldr	r3, [sp, #4]
 8022104:	2b00      	cmp	r3, #0
 8022106:	d0d8      	beq.n	80220ba <xQueueGenericSend+0x5e>
 8022108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802210c:	f383 8811 	msr	BASEPRI, r3
 8022110:	f3bf 8f6f 	isb	sy
 8022114:	f3bf 8f4f 	dsb	sy
 8022118:	e7fe      	b.n	8022118 <xQueueGenericSend+0xbc>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802211a:	2e02      	cmp	r6, #2
 802211c:	d0d5      	beq.n	80220ca <xQueueGenericSend+0x6e>
				if( xTicksToWait == ( TickType_t ) 0 )
 802211e:	9b01      	ldr	r3, [sp, #4]
 8022120:	b91b      	cbnz	r3, 802212a <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8022122:	f001 facf 	bl	80236c4 <vPortExitCritical>
					return errQUEUE_FULL;
 8022126:	2000      	movs	r0, #0
 8022128:	e7e8      	b.n	80220fc <xQueueGenericSend+0xa0>
				else if( xEntryTimeSet == pdFALSE )
 802212a:	b915      	cbnz	r5, 8022132 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 802212c:	a802      	add	r0, sp, #8
 802212e:	f000 ff1d 	bl	8022f6c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8022132:	f001 fac7 	bl	80236c4 <vPortExitCritical>
		vTaskSuspendAll();
 8022136:	f000 fd25 	bl	8022b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802213a:	f001 faa3 	bl	8023684 <vPortEnterCritical>
 802213e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8022142:	2bff      	cmp	r3, #255	@ 0xff
 8022144:	bf08      	it	eq
 8022146:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 802214a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 802214e:	2bff      	cmp	r3, #255	@ 0xff
 8022150:	bf08      	it	eq
 8022152:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8022156:	f001 fab5 	bl	80236c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802215a:	a901      	add	r1, sp, #4
 802215c:	a802      	add	r0, sp, #8
 802215e:	f000 ff11 	bl	8022f84 <xTaskCheckForTimeOut>
 8022162:	bb38      	cbnz	r0, 80221b4 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8022164:	f001 fa8e 	bl	8023684 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8022168:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 802216a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802216c:	429a      	cmp	r2, r3
 802216e:	d10e      	bne.n	802218e <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8022170:	f001 faa8 	bl	80236c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8022174:	9901      	ldr	r1, [sp, #4]
 8022176:	f104 0010 	add.w	r0, r4, #16
 802217a:	f000 fe7f 	bl	8022e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802217e:	4620      	mov	r0, r4
 8022180:	f7ff fe42 	bl	8021e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022184:	f000 fda2 	bl	8022ccc <xTaskResumeAll>
 8022188:	b148      	cbz	r0, 802219e <xQueueGenericSend+0x142>
 802218a:	2501      	movs	r5, #1
 802218c:	e797      	b.n	80220be <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 802218e:	f001 fa99 	bl	80236c4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8022192:	4620      	mov	r0, r4
 8022194:	f7ff fe38 	bl	8021e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8022198:	f000 fd98 	bl	8022ccc <xTaskResumeAll>
 802219c:	e7f5      	b.n	802218a <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 802219e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80221a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80221a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80221aa:	f3bf 8f4f 	dsb	sy
 80221ae:	f3bf 8f6f 	isb	sy
 80221b2:	e7ea      	b.n	802218a <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80221b4:	4620      	mov	r0, r4
 80221b6:	f7ff fe27 	bl	8021e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80221ba:	f000 fd87 	bl	8022ccc <xTaskResumeAll>
			return errQUEUE_FULL;
 80221be:	e7b2      	b.n	8022126 <xQueueGenericSend+0xca>

080221c0 <xQueueGenericSendFromISR>:
{
 80221c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80221c4:	4689      	mov	r9, r1
 80221c6:	4617      	mov	r7, r2
 80221c8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80221ca:	4604      	mov	r4, r0
 80221cc:	b940      	cbnz	r0, 80221e0 <xQueueGenericSendFromISR+0x20>
 80221ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80221d2:	f383 8811 	msr	BASEPRI, r3
 80221d6:	f3bf 8f6f 	isb	sy
 80221da:	f3bf 8f4f 	dsb	sy
 80221de:	e7fe      	b.n	80221de <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80221e0:	b951      	cbnz	r1, 80221f8 <xQueueGenericSendFromISR+0x38>
 80221e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80221e4:	b143      	cbz	r3, 80221f8 <xQueueGenericSendFromISR+0x38>
 80221e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80221ea:	f383 8811 	msr	BASEPRI, r3
 80221ee:	f3bf 8f6f 	isb	sy
 80221f2:	f3bf 8f4f 	dsb	sy
 80221f6:	e7fe      	b.n	80221f6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80221f8:	2e02      	cmp	r6, #2
 80221fa:	d10b      	bne.n	8022214 <xQueueGenericSendFromISR+0x54>
 80221fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80221fe:	2b01      	cmp	r3, #1
 8022200:	d008      	beq.n	8022214 <xQueueGenericSendFromISR+0x54>
 8022202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022206:	f383 8811 	msr	BASEPRI, r3
 802220a:	f3bf 8f6f 	isb	sy
 802220e:	f3bf 8f4f 	dsb	sy
 8022212:	e7fe      	b.n	8022212 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8022214:	f001 fb48 	bl	80238a8 <vPortValidateInterruptPriority>
	__asm volatile
 8022218:	f3ef 8811 	mrs	r8, BASEPRI
 802221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022220:	f383 8811 	msr	BASEPRI, r3
 8022224:	f3bf 8f6f 	isb	sy
 8022228:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802222c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 802222e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8022230:	429a      	cmp	r2, r3
 8022232:	d301      	bcc.n	8022238 <xQueueGenericSendFromISR+0x78>
 8022234:	2e02      	cmp	r6, #2
 8022236:	d11e      	bne.n	8022276 <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8022238:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 802223c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 802223e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8022240:	4632      	mov	r2, r6
 8022242:	4649      	mov	r1, r9
 8022244:	4620      	mov	r0, r4
 8022246:	f7ff fd96 	bl	8021d76 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 802224a:	1c6b      	adds	r3, r5, #1
 802224c:	d10e      	bne.n	802226c <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 802224e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8022250:	b13b      	cbz	r3, 8022262 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8022252:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8022256:	f000 fe49 	bl	8022eec <xTaskRemoveFromEventList>
 802225a:	b110      	cbz	r0, 8022262 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 802225c:	b10f      	cbz	r7, 8022262 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 802225e:	2301      	movs	r3, #1
 8022260:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8022262:	2001      	movs	r0, #1
	__asm volatile
 8022264:	f388 8811 	msr	BASEPRI, r8
}
 8022268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802226c:	3501      	adds	r5, #1
 802226e:	b26d      	sxtb	r5, r5
 8022270:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8022274:	e7f5      	b.n	8022262 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 8022276:	2000      	movs	r0, #0
 8022278:	e7f4      	b.n	8022264 <xQueueGenericSendFromISR+0xa4>

0802227a <xQueueGiveFromISR>:
{
 802227a:	b570      	push	{r4, r5, r6, lr}
 802227c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 802227e:	4604      	mov	r4, r0
 8022280:	b940      	cbnz	r0, 8022294 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8022282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022286:	f383 8811 	msr	BASEPRI, r3
 802228a:	f3bf 8f6f 	isb	sy
 802228e:	f3bf 8f4f 	dsb	sy
 8022292:	e7fe      	b.n	8022292 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8022294:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8022296:	b143      	cbz	r3, 80222aa <xQueueGiveFromISR+0x30>
 8022298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802229c:	f383 8811 	msr	BASEPRI, r3
 80222a0:	f3bf 8f6f 	isb	sy
 80222a4:	f3bf 8f4f 	dsb	sy
 80222a8:	e7fe      	b.n	80222a8 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80222aa:	6803      	ldr	r3, [r0, #0]
 80222ac:	b953      	cbnz	r3, 80222c4 <xQueueGiveFromISR+0x4a>
 80222ae:	6883      	ldr	r3, [r0, #8]
 80222b0:	b143      	cbz	r3, 80222c4 <xQueueGiveFromISR+0x4a>
 80222b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80222b6:	f383 8811 	msr	BASEPRI, r3
 80222ba:	f3bf 8f6f 	isb	sy
 80222be:	f3bf 8f4f 	dsb	sy
 80222c2:	e7fe      	b.n	80222c2 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80222c4:	f001 faf0 	bl	80238a8 <vPortValidateInterruptPriority>
	__asm volatile
 80222c8:	f3ef 8611 	mrs	r6, BASEPRI
 80222cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80222d0:	f383 8811 	msr	BASEPRI, r3
 80222d4:	f3bf 8f6f 	isb	sy
 80222d8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80222dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80222de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80222e0:	4293      	cmp	r3, r2
 80222e2:	d919      	bls.n	8022318 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 80222e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80222e8:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80222ea:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80222ec:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80222ee:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 80222f0:	d10d      	bne.n	802230e <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80222f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80222f4:	b13b      	cbz	r3, 8022306 <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80222f6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80222fa:	f000 fdf7 	bl	8022eec <xTaskRemoveFromEventList>
 80222fe:	b110      	cbz	r0, 8022306 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8022300:	b10d      	cbz	r5, 8022306 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8022302:	2301      	movs	r3, #1
 8022304:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 8022306:	2001      	movs	r0, #1
	__asm volatile
 8022308:	f386 8811 	msr	BASEPRI, r6
}
 802230c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802230e:	3301      	adds	r3, #1
 8022310:	b25b      	sxtb	r3, r3
 8022312:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8022316:	e7f6      	b.n	8022306 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8022318:	2000      	movs	r0, #0
 802231a:	e7f5      	b.n	8022308 <xQueueGiveFromISR+0x8e>

0802231c <xQueueReceive>:
{
 802231c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022320:	460e      	mov	r6, r1
 8022322:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8022324:	4604      	mov	r4, r0
 8022326:	b940      	cbnz	r0, 802233a <xQueueReceive+0x1e>
	__asm volatile
 8022328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802232c:	f383 8811 	msr	BASEPRI, r3
 8022330:	f3bf 8f6f 	isb	sy
 8022334:	f3bf 8f4f 	dsb	sy
 8022338:	e7fe      	b.n	8022338 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802233a:	b951      	cbnz	r1, 8022352 <xQueueReceive+0x36>
 802233c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 802233e:	b143      	cbz	r3, 8022352 <xQueueReceive+0x36>
 8022340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022344:	f383 8811 	msr	BASEPRI, r3
 8022348:	f3bf 8f6f 	isb	sy
 802234c:	f3bf 8f4f 	dsb	sy
 8022350:	e7fe      	b.n	8022350 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8022352:	f000 fe59 	bl	8023008 <xTaskGetSchedulerState>
 8022356:	4605      	mov	r5, r0
 8022358:	b318      	cbz	r0, 80223a2 <xQueueReceive+0x86>
 802235a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 802235c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8022360:	f001 f990 	bl	8023684 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8022364:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8022366:	b347      	cbz	r7, 80223ba <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8022368:	4631      	mov	r1, r6
 802236a:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 802236c:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802236e:	f7ff fd35 	bl	8021ddc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8022372:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8022374:	6923      	ldr	r3, [r4, #16]
 8022376:	b173      	cbz	r3, 8022396 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8022378:	f104 0010 	add.w	r0, r4, #16
 802237c:	f000 fdb6 	bl	8022eec <xTaskRemoveFromEventList>
 8022380:	b148      	cbz	r0, 8022396 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8022382:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8022386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802238a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 802238e:	f3bf 8f4f 	dsb	sy
 8022392:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8022396:	f001 f995 	bl	80236c4 <vPortExitCritical>
				return pdPASS;
 802239a:	2001      	movs	r0, #1
}
 802239c:	b004      	add	sp, #16
 802239e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80223a2:	9b01      	ldr	r3, [sp, #4]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d0d9      	beq.n	802235c <xQueueReceive+0x40>
 80223a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80223ac:	f383 8811 	msr	BASEPRI, r3
 80223b0:	f3bf 8f6f 	isb	sy
 80223b4:	f3bf 8f4f 	dsb	sy
 80223b8:	e7fe      	b.n	80223b8 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80223ba:	9b01      	ldr	r3, [sp, #4]
 80223bc:	b91b      	cbnz	r3, 80223c6 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80223be:	f001 f981 	bl	80236c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80223c2:	2000      	movs	r0, #0
 80223c4:	e7ea      	b.n	802239c <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80223c6:	b915      	cbnz	r5, 80223ce <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80223c8:	a802      	add	r0, sp, #8
 80223ca:	f000 fdcf 	bl	8022f6c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80223ce:	f001 f979 	bl	80236c4 <vPortExitCritical>
		vTaskSuspendAll();
 80223d2:	f000 fbd7 	bl	8022b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80223d6:	f001 f955 	bl	8023684 <vPortEnterCritical>
 80223da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80223de:	2bff      	cmp	r3, #255	@ 0xff
 80223e0:	bf08      	it	eq
 80223e2:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80223e6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80223ea:	2bff      	cmp	r3, #255	@ 0xff
 80223ec:	bf08      	it	eq
 80223ee:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80223f2:	f001 f967 	bl	80236c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80223f6:	a901      	add	r1, sp, #4
 80223f8:	a802      	add	r0, sp, #8
 80223fa:	f000 fdc3 	bl	8022f84 <xTaskCheckForTimeOut>
 80223fe:	bb00      	cbnz	r0, 8022442 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022400:	4620      	mov	r0, r4
 8022402:	f7ff fcad 	bl	8021d60 <prvIsQueueEmpty>
 8022406:	b1b0      	cbz	r0, 8022436 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022408:	9901      	ldr	r1, [sp, #4]
 802240a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 802240e:	f000 fd35 	bl	8022e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8022412:	4620      	mov	r0, r4
 8022414:	f7ff fcf8 	bl	8021e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022418:	f000 fc58 	bl	8022ccc <xTaskResumeAll>
 802241c:	b948      	cbnz	r0, 8022432 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 802241e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8022422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022426:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 802242a:	f3bf 8f4f 	dsb	sy
 802242e:	f3bf 8f6f 	isb	sy
 8022432:	2501      	movs	r5, #1
 8022434:	e794      	b.n	8022360 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8022436:	4620      	mov	r0, r4
 8022438:	f7ff fce6 	bl	8021e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802243c:	f000 fc46 	bl	8022ccc <xTaskResumeAll>
 8022440:	e7f7      	b.n	8022432 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8022442:	4620      	mov	r0, r4
 8022444:	f7ff fce0 	bl	8021e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8022448:	f000 fc40 	bl	8022ccc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802244c:	4620      	mov	r0, r4
 802244e:	f7ff fc87 	bl	8021d60 <prvIsQueueEmpty>
 8022452:	2800      	cmp	r0, #0
 8022454:	d0ed      	beq.n	8022432 <xQueueReceive+0x116>
 8022456:	e7b4      	b.n	80223c2 <xQueueReceive+0xa6>

08022458 <xQueueSemaphoreTake>:
{
 8022458:	b5f0      	push	{r4, r5, r6, r7, lr}
 802245a:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 802245c:	4604      	mov	r4, r0
{
 802245e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8022460:	b940      	cbnz	r0, 8022474 <xQueueSemaphoreTake+0x1c>
 8022462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022466:	f383 8811 	msr	BASEPRI, r3
 802246a:	f3bf 8f6f 	isb	sy
 802246e:	f3bf 8f4f 	dsb	sy
 8022472:	e7fe      	b.n	8022472 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8022474:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8022476:	b145      	cbz	r5, 802248a <xQueueSemaphoreTake+0x32>
 8022478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802247c:	f383 8811 	msr	BASEPRI, r3
 8022480:	f3bf 8f6f 	isb	sy
 8022484:	f3bf 8f4f 	dsb	sy
 8022488:	e7fe      	b.n	8022488 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802248a:	f000 fdbd 	bl	8023008 <xTaskGetSchedulerState>
 802248e:	4606      	mov	r6, r0
 8022490:	b320      	cbz	r0, 80224dc <xQueueSemaphoreTake+0x84>
 8022492:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8022494:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8022496:	f001 f8f5 	bl	8023684 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 802249a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 802249c:	b353      	cbz	r3, 80224f4 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 802249e:	3b01      	subs	r3, #1
 80224a0:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80224a2:	6823      	ldr	r3, [r4, #0]
 80224a4:	b913      	cbnz	r3, 80224ac <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80224a6:	f000 fe8d 	bl	80231c4 <pvTaskIncrementMutexHeldCount>
 80224aa:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80224ac:	6923      	ldr	r3, [r4, #16]
 80224ae:	b173      	cbz	r3, 80224ce <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80224b0:	f104 0010 	add.w	r0, r4, #16
 80224b4:	f000 fd1a 	bl	8022eec <xTaskRemoveFromEventList>
 80224b8:	b148      	cbz	r0, 80224ce <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 80224ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80224be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80224c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80224c6:	f3bf 8f4f 	dsb	sy
 80224ca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80224ce:	f001 f8f9 	bl	80236c4 <vPortExitCritical>
				return pdPASS;
 80224d2:	2001      	movs	r0, #1
}
 80224d4:	b005      	add	sp, #20
 80224d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80224d8:	4635      	mov	r5, r6
 80224da:	e7db      	b.n	8022494 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80224dc:	9b01      	ldr	r3, [sp, #4]
 80224de:	2b00      	cmp	r3, #0
 80224e0:	d0fa      	beq.n	80224d8 <xQueueSemaphoreTake+0x80>
 80224e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80224e6:	f383 8811 	msr	BASEPRI, r3
 80224ea:	f3bf 8f6f 	isb	sy
 80224ee:	f3bf 8f4f 	dsb	sy
 80224f2:	e7fe      	b.n	80224f2 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80224f4:	9b01      	ldr	r3, [sp, #4]
 80224f6:	b953      	cbnz	r3, 802250e <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80224f8:	2d00      	cmp	r5, #0
 80224fa:	d066      	beq.n	80225ca <xQueueSemaphoreTake+0x172>
 80224fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022500:	f383 8811 	msr	BASEPRI, r3
 8022504:	f3bf 8f6f 	isb	sy
 8022508:	f3bf 8f4f 	dsb	sy
 802250c:	e7fe      	b.n	802250c <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 802250e:	b916      	cbnz	r6, 8022516 <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8022510:	a802      	add	r0, sp, #8
 8022512:	f000 fd2b 	bl	8022f6c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8022516:	f001 f8d5 	bl	80236c4 <vPortExitCritical>
		vTaskSuspendAll();
 802251a:	f000 fb33 	bl	8022b84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802251e:	f001 f8b1 	bl	8023684 <vPortEnterCritical>
 8022522:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8022526:	2bff      	cmp	r3, #255	@ 0xff
 8022528:	bf08      	it	eq
 802252a:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 802252e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8022532:	2bff      	cmp	r3, #255	@ 0xff
 8022534:	bf08      	it	eq
 8022536:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 802253a:	f001 f8c3 	bl	80236c4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802253e:	a901      	add	r1, sp, #4
 8022540:	a802      	add	r0, sp, #8
 8022542:	f000 fd1f 	bl	8022f84 <xTaskCheckForTimeOut>
 8022546:	bb50      	cbnz	r0, 802259e <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8022548:	4620      	mov	r0, r4
 802254a:	f7ff fc09 	bl	8021d60 <prvIsQueueEmpty>
 802254e:	b300      	cbz	r0, 8022592 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8022550:	6823      	ldr	r3, [r4, #0]
 8022552:	b93b      	cbnz	r3, 8022564 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8022554:	f001 f896 	bl	8023684 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8022558:	68a0      	ldr	r0, [r4, #8]
 802255a:	f000 fd65 	bl	8023028 <xTaskPriorityInherit>
 802255e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8022560:	f001 f8b0 	bl	80236c4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8022564:	9901      	ldr	r1, [sp, #4]
 8022566:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 802256a:	f000 fc87 	bl	8022e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802256e:	4620      	mov	r0, r4
 8022570:	f7ff fc4a 	bl	8021e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8022574:	f000 fbaa 	bl	8022ccc <xTaskResumeAll>
 8022578:	b948      	cbnz	r0, 802258e <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 802257a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 802257e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022582:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8022586:	f3bf 8f4f 	dsb	sy
 802258a:	f3bf 8f6f 	isb	sy
 802258e:	2601      	movs	r6, #1
 8022590:	e781      	b.n	8022496 <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8022592:	4620      	mov	r0, r4
 8022594:	f7ff fc38 	bl	8021e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8022598:	f000 fb98 	bl	8022ccc <xTaskResumeAll>
 802259c:	e7f7      	b.n	802258e <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 802259e:	4620      	mov	r0, r4
 80225a0:	f7ff fc32 	bl	8021e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80225a4:	f000 fb92 	bl	8022ccc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80225a8:	4620      	mov	r0, r4
 80225aa:	f7ff fbd9 	bl	8021d60 <prvIsQueueEmpty>
 80225ae:	2800      	cmp	r0, #0
 80225b0:	d0ed      	beq.n	802258e <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 80225b2:	b165      	cbz	r5, 80225ce <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 80225b4:	f001 f866 	bl	8023684 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80225b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80225ba:	b119      	cbz	r1, 80225c4 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80225bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80225be:	6819      	ldr	r1, [r3, #0]
 80225c0:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80225c4:	68a0      	ldr	r0, [r4, #8]
 80225c6:	f000 fdaf 	bl	8023128 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80225ca:	f001 f87b 	bl	80236c4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80225ce:	2000      	movs	r0, #0
 80225d0:	e780      	b.n	80224d4 <xQueueSemaphoreTake+0x7c>

080225d2 <xQueueReceiveFromISR>:
{
 80225d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80225d6:	4689      	mov	r9, r1
 80225d8:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80225da:	4604      	mov	r4, r0
 80225dc:	b940      	cbnz	r0, 80225f0 <xQueueReceiveFromISR+0x1e>
 80225de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80225e2:	f383 8811 	msr	BASEPRI, r3
 80225e6:	f3bf 8f6f 	isb	sy
 80225ea:	f3bf 8f4f 	dsb	sy
 80225ee:	e7fe      	b.n	80225ee <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80225f0:	b951      	cbnz	r1, 8022608 <xQueueReceiveFromISR+0x36>
 80225f2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80225f4:	b143      	cbz	r3, 8022608 <xQueueReceiveFromISR+0x36>
 80225f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80225fa:	f383 8811 	msr	BASEPRI, r3
 80225fe:	f3bf 8f6f 	isb	sy
 8022602:	f3bf 8f4f 	dsb	sy
 8022606:	e7fe      	b.n	8022606 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8022608:	f001 f94e 	bl	80238a8 <vPortValidateInterruptPriority>
	__asm volatile
 802260c:	f3ef 8711 	mrs	r7, BASEPRI
 8022610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022614:	f383 8811 	msr	BASEPRI, r3
 8022618:	f3bf 8f6f 	isb	sy
 802261c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8022620:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8022622:	b30d      	cbz	r5, 8022668 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8022624:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8022628:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 802262a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 802262c:	4620      	mov	r0, r4
 802262e:	f7ff fbd5 	bl	8021ddc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8022632:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8022634:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8022636:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8022638:	d111      	bne.n	802265e <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802263a:	6923      	ldr	r3, [r4, #16]
 802263c:	b153      	cbz	r3, 8022654 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802263e:	f104 0010 	add.w	r0, r4, #16
 8022642:	f000 fc53 	bl	8022eec <xTaskRemoveFromEventList>
 8022646:	b128      	cbz	r0, 8022654 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8022648:	f1b8 0f00 	cmp.w	r8, #0
 802264c:	d002      	beq.n	8022654 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 802264e:	2301      	movs	r3, #1
 8022650:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8022654:	2001      	movs	r0, #1
	__asm volatile
 8022656:	f387 8811 	msr	BASEPRI, r7
}
 802265a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 802265e:	3601      	adds	r6, #1
 8022660:	b276      	sxtb	r6, r6
 8022662:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8022666:	e7f5      	b.n	8022654 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8022668:	4628      	mov	r0, r5
 802266a:	e7f4      	b.n	8022656 <xQueueReceiveFromISR+0x84>

0802266c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 802266c:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 802266e:	4a07      	ldr	r2, [pc, #28]	@ (802268c <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8022670:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8022672:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8022676:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 802267a:	b91d      	cbnz	r5, 8022684 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 802267c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8022680:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8022682:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8022684:	3301      	adds	r3, #1
 8022686:	2b08      	cmp	r3, #8
 8022688:	d1f3      	bne.n	8022672 <vQueueAddToRegistry+0x6>
 802268a:	e7fa      	b.n	8022682 <vQueueAddToRegistry+0x16>
 802268c:	20003714 	.word	0x20003714

08022690 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8022690:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8022692:	4a09      	ldr	r2, [pc, #36]	@ (80226b8 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8022694:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8022696:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 802269a:	4281      	cmp	r1, r0
 802269c:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 80226a0:	d106      	bne.n	80226b0 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80226a2:	4a06      	ldr	r2, [pc, #24]	@ (80226bc <vQueueUnregisterQueue+0x2c>)
 80226a4:	2100      	movs	r1, #0
 80226a6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80226aa:	4422      	add	r2, r4
 80226ac:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80226ae:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80226b0:	3301      	adds	r3, #1
 80226b2:	2b08      	cmp	r3, #8
 80226b4:	d1ef      	bne.n	8022696 <vQueueUnregisterQueue+0x6>
 80226b6:	e7fa      	b.n	80226ae <vQueueUnregisterQueue+0x1e>
 80226b8:	20003718 	.word	0x20003718
 80226bc:	20003714 	.word	0x20003714

080226c0 <vQueueDelete>:
{
 80226c0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80226c2:	b940      	cbnz	r0, 80226d6 <vQueueDelete+0x16>
	__asm volatile
 80226c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80226c8:	f383 8811 	msr	BASEPRI, r3
 80226cc:	f3bf 8f6f 	isb	sy
 80226d0:	f3bf 8f4f 	dsb	sy
 80226d4:	e7fe      	b.n	80226d4 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 80226d6:	f7ff ffdb 	bl	8022690 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80226da:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 80226de:	b91b      	cbnz	r3, 80226e8 <vQueueDelete+0x28>
}
 80226e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80226e4:	f001 b9cc 	b.w	8023a80 <vPortFree>
}
 80226e8:	bd10      	pop	{r4, pc}

080226ea <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80226ea:	b570      	push	{r4, r5, r6, lr}
 80226ec:	4604      	mov	r4, r0
 80226ee:	460d      	mov	r5, r1
 80226f0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80226f2:	f000 ffc7 	bl	8023684 <vPortEnterCritical>
 80226f6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80226fa:	2bff      	cmp	r3, #255	@ 0xff
 80226fc:	bf04      	itt	eq
 80226fe:	2300      	moveq	r3, #0
 8022700:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8022704:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8022708:	2bff      	cmp	r3, #255	@ 0xff
 802270a:	bf04      	itt	eq
 802270c:	2300      	moveq	r3, #0
 802270e:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8022712:	f000 ffd7 	bl	80236c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8022716:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8022718:	b92b      	cbnz	r3, 8022726 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 802271a:	4632      	mov	r2, r6
 802271c:	4629      	mov	r1, r5
 802271e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8022722:	f000 fbc5 	bl	8022eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8022726:	4620      	mov	r0, r4
	}
 8022728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 802272c:	f7ff bb6c 	b.w	8021e08 <prvUnlockQueue>

08022730 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8022730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022734:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8022736:	f000 ffa5 	bl	8023684 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 802273a:	4b30      	ldr	r3, [pc, #192]	@ (80227fc <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 802273c:	4e30      	ldr	r6, [pc, #192]	@ (8022800 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 802273e:	681a      	ldr	r2, [r3, #0]
 8022740:	4f30      	ldr	r7, [pc, #192]	@ (8022804 <prvAddNewTaskToReadyList+0xd4>)
 8022742:	3201      	adds	r2, #1
 8022744:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8022746:	6835      	ldr	r5, [r6, #0]
 8022748:	2d00      	cmp	r5, #0
 802274a:	d14b      	bne.n	80227e4 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 802274c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	2b01      	cmp	r3, #1
 8022752:	d11f      	bne.n	8022794 <prvAddNewTaskToReadyList+0x64>
 8022754:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8022756:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8022758:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 802275a:	f7ff fac1 	bl	8021ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802275e:	2d38      	cmp	r5, #56	@ 0x38
 8022760:	f108 0814 	add.w	r8, r8, #20
 8022764:	d1f7      	bne.n	8022756 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8022766:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 802282c <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 802276a:	4d27      	ldr	r5, [pc, #156]	@ (8022808 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 802276c:	4640      	mov	r0, r8
 802276e:	f7ff fab7 	bl	8021ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8022772:	4628      	mov	r0, r5
 8022774:	f7ff fab4 	bl	8021ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8022778:	4824      	ldr	r0, [pc, #144]	@ (802280c <prvAddNewTaskToReadyList+0xdc>)
 802277a:	f7ff fab1 	bl	8021ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802277e:	4824      	ldr	r0, [pc, #144]	@ (8022810 <prvAddNewTaskToReadyList+0xe0>)
 8022780:	f7ff faae 	bl	8021ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8022784:	4823      	ldr	r0, [pc, #140]	@ (8022814 <prvAddNewTaskToReadyList+0xe4>)
 8022786:	f7ff faab 	bl	8021ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 802278a:	4b23      	ldr	r3, [pc, #140]	@ (8022818 <prvAddNewTaskToReadyList+0xe8>)
 802278c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8022790:	4b22      	ldr	r3, [pc, #136]	@ (802281c <prvAddNewTaskToReadyList+0xec>)
 8022792:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8022794:	4a22      	ldr	r2, [pc, #136]	@ (8022820 <prvAddNewTaskToReadyList+0xf0>)
 8022796:	6813      	ldr	r3, [r2, #0]
 8022798:	3301      	adds	r3, #1
 802279a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 802279c:	4a21      	ldr	r2, [pc, #132]	@ (8022824 <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 802279e:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80227a0:	6811      	ldr	r1, [r2, #0]
 80227a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80227a4:	2014      	movs	r0, #20
 80227a6:	428b      	cmp	r3, r1
 80227a8:	fb00 7003 	mla	r0, r0, r3, r7
 80227ac:	f104 0104 	add.w	r1, r4, #4
 80227b0:	bf88      	it	hi
 80227b2:	6013      	strhi	r3, [r2, #0]
 80227b4:	f7ff faa2 	bl	8021cfc <vListInsertEnd>
	taskEXIT_CRITICAL();
 80227b8:	f000 ff84 	bl	80236c4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80227bc:	4b1a      	ldr	r3, [pc, #104]	@ (8022828 <prvAddNewTaskToReadyList+0xf8>)
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	b173      	cbz	r3, 80227e0 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80227c2:	6833      	ldr	r3, [r6, #0]
 80227c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80227c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80227c8:	429a      	cmp	r2, r3
 80227ca:	d209      	bcs.n	80227e0 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80227cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80227d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80227d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80227d8:	f3bf 8f4f 	dsb	sy
 80227dc:	f3bf 8f6f 	isb	sy
}
 80227e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80227e4:	4b10      	ldr	r3, [pc, #64]	@ (8022828 <prvAddNewTaskToReadyList+0xf8>)
 80227e6:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80227e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80227ea:	2a00      	cmp	r2, #0
 80227ec:	d1d2      	bne.n	8022794 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80227ee:	6832      	ldr	r2, [r6, #0]
 80227f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80227f2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80227f4:	bf98      	it	ls
 80227f6:	6034      	strls	r4, [r6, #0]
 80227f8:	e7cc      	b.n	8022794 <prvAddNewTaskToReadyList+0x64>
 80227fa:	bf00      	nop
 80227fc:	20003778 	.word	0x20003778
 8022800:	20003c4c 	.word	0x20003c4c
 8022804:	200037ec 	.word	0x200037ec
 8022808:	200037c4 	.word	0x200037c4
 802280c:	200037a8 	.word	0x200037a8
 8022810:	20003794 	.word	0x20003794
 8022814:	2000377c 	.word	0x2000377c
 8022818:	200037c0 	.word	0x200037c0
 802281c:	200037bc 	.word	0x200037bc
 8022820:	2000375c 	.word	0x2000375c
 8022824:	20003770 	.word	0x20003770
 8022828:	2000376c 	.word	0x2000376c
 802282c:	200037d8 	.word	0x200037d8

08022830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8022832:	4b15      	ldr	r3, [pc, #84]	@ (8022888 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022834:	4d15      	ldr	r5, [pc, #84]	@ (802288c <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8022836:	681c      	ldr	r4, [r3, #0]
{
 8022838:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802283a:	6828      	ldr	r0, [r5, #0]
 802283c:	3004      	adds	r0, #4
{
 802283e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022840:	f7ff fa7e 	bl	8021d40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022844:	1c73      	adds	r3, r6, #1
 8022846:	d107      	bne.n	8022858 <prvAddCurrentTaskToDelayedList+0x28>
 8022848:	b137      	cbz	r7, 8022858 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802284a:	6829      	ldr	r1, [r5, #0]
 802284c:	4810      	ldr	r0, [pc, #64]	@ (8022890 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802284e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022852:	3104      	adds	r1, #4
 8022854:	f7ff ba52 	b.w	8021cfc <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022858:	682b      	ldr	r3, [r5, #0]
 802285a:	19a4      	adds	r4, r4, r6
 802285c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802285e:	d307      	bcc.n	8022870 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022860:	4b0c      	ldr	r3, [pc, #48]	@ (8022894 <prvAddCurrentTaskToDelayedList+0x64>)
 8022862:	6818      	ldr	r0, [r3, #0]
 8022864:	6829      	ldr	r1, [r5, #0]
}
 8022866:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802286a:	3104      	adds	r1, #4
 802286c:	f7ff ba51 	b.w	8021d12 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022870:	4b09      	ldr	r3, [pc, #36]	@ (8022898 <prvAddCurrentTaskToDelayedList+0x68>)
 8022872:	6818      	ldr	r0, [r3, #0]
 8022874:	6829      	ldr	r1, [r5, #0]
 8022876:	3104      	adds	r1, #4
 8022878:	f7ff fa4b 	bl	8021d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802287c:	4b07      	ldr	r3, [pc, #28]	@ (802289c <prvAddCurrentTaskToDelayedList+0x6c>)
 802287e:	681a      	ldr	r2, [r3, #0]
 8022880:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8022882:	bf88      	it	hi
 8022884:	601c      	strhi	r4, [r3, #0]
}
 8022886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022888:	20003774 	.word	0x20003774
 802288c:	20003c4c 	.word	0x20003c4c
 8022890:	2000377c 	.word	0x2000377c
 8022894:	200037bc 	.word	0x200037bc
 8022898:	200037c0 	.word	0x200037c0
 802289c:	20003758 	.word	0x20003758

080228a0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80228a0:	4a06      	ldr	r2, [pc, #24]	@ (80228bc <prvResetNextTaskUnblockTime+0x1c>)
 80228a2:	6813      	ldr	r3, [r2, #0]
 80228a4:	6819      	ldr	r1, [r3, #0]
 80228a6:	4b06      	ldr	r3, [pc, #24]	@ (80228c0 <prvResetNextTaskUnblockTime+0x20>)
 80228a8:	b919      	cbnz	r1, 80228b2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80228aa:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80228ae:	601a      	str	r2, [r3, #0]
}
 80228b0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80228b2:	6812      	ldr	r2, [r2, #0]
 80228b4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80228b6:	68d2      	ldr	r2, [r2, #12]
 80228b8:	6852      	ldr	r2, [r2, #4]
 80228ba:	e7f8      	b.n	80228ae <prvResetNextTaskUnblockTime+0xe>
 80228bc:	200037c0 	.word	0x200037c0
 80228c0:	20003758 	.word	0x20003758

080228c4 <prvDeleteTCB>:
	{
 80228c4:	b510      	push	{r4, lr}
 80228c6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80228c8:	3054      	adds	r0, #84	@ 0x54
 80228ca:	f01a fec1 	bl	803d650 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80228ce:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80228d2:	b93b      	cbnz	r3, 80228e4 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 80228d4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80228d6:	f001 f8d3 	bl	8023a80 <vPortFree>
				vPortFree( pxTCB );
 80228da:	4620      	mov	r0, r4
	}
 80228dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80228e0:	f001 b8ce 	b.w	8023a80 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80228e4:	2b01      	cmp	r3, #1
 80228e6:	d0f8      	beq.n	80228da <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80228e8:	2b02      	cmp	r3, #2
 80228ea:	d008      	beq.n	80228fe <prvDeleteTCB+0x3a>
 80228ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80228f0:	f383 8811 	msr	BASEPRI, r3
 80228f4:	f3bf 8f6f 	isb	sy
 80228f8:	f3bf 8f4f 	dsb	sy
 80228fc:	e7fe      	b.n	80228fc <prvDeleteTCB+0x38>
	}
 80228fe:	bd10      	pop	{r4, pc}

08022900 <prvIdleTask>:
{
 8022900:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022902:	4c13      	ldr	r4, [pc, #76]	@ (8022950 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022904:	4f13      	ldr	r7, [pc, #76]	@ (8022954 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8022906:	4d14      	ldr	r5, [pc, #80]	@ (8022958 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022908:	6823      	ldr	r3, [r4, #0]
 802290a:	b973      	cbnz	r3, 802292a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 802290c:	4b13      	ldr	r3, [pc, #76]	@ (802295c <prvIdleTask+0x5c>)
 802290e:	681b      	ldr	r3, [r3, #0]
 8022910:	2b01      	cmp	r3, #1
 8022912:	d9f8      	bls.n	8022906 <prvIdleTask+0x6>
				taskYIELD();
 8022914:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8022918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802291c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8022920:	f3bf 8f4f 	dsb	sy
 8022924:	f3bf 8f6f 	isb	sy
 8022928:	e7ed      	b.n	8022906 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 802292a:	f000 feab 	bl	8023684 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802292e:	68fb      	ldr	r3, [r7, #12]
 8022930:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022932:	1d30      	adds	r0, r6, #4
 8022934:	f7ff fa04 	bl	8021d40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8022938:	682b      	ldr	r3, [r5, #0]
 802293a:	3b01      	subs	r3, #1
 802293c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 802293e:	6823      	ldr	r3, [r4, #0]
 8022940:	3b01      	subs	r3, #1
 8022942:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8022944:	f000 febe 	bl	80236c4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8022948:	4630      	mov	r0, r6
 802294a:	f7ff ffbb 	bl	80228c4 <prvDeleteTCB>
 802294e:	e7db      	b.n	8022908 <prvIdleTask+0x8>
 8022950:	20003790 	.word	0x20003790
 8022954:	20003794 	.word	0x20003794
 8022958:	20003778 	.word	0x20003778
 802295c:	200037ec 	.word	0x200037ec

08022960 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8022960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022964:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8022968:	0096      	lsls	r6, r2, #2
 802296a:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 802296c:	4607      	mov	r7, r0
 802296e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8022970:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8022972:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8022974:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8022976:	f01a fd95 	bl	803d4a4 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 802297a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802297c:	3e04      	subs	r6, #4
 802297e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8022980:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8022984:	2d00      	cmp	r5, #0
 8022986:	d041      	beq.n	8022a0c <prvInitialiseNewTask.constprop.0+0xac>
 8022988:	1e6b      	subs	r3, r5, #1
 802298a:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 802298e:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8022990:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8022994:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8022998:	b109      	cbz	r1, 802299e <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802299a:	42ab      	cmp	r3, r5
 802299c:	d1f8      	bne.n	8022990 <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 802299e:	2300      	movs	r3, #0
 80229a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80229a4:	9d08      	ldr	r5, [sp, #32]
 80229a6:	2d37      	cmp	r5, #55	@ 0x37
 80229a8:	bf28      	it	cs
 80229aa:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80229ac:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80229b0:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80229b2:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80229b4:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80229b6:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80229ba:	f7ff f99c 	bl	8021cf6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80229be:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80229c2:	f104 0018 	add.w	r0, r4, #24
 80229c6:	f7ff f996 	bl	8021cf6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80229ca:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80229ce:	224c      	movs	r2, #76	@ 0x4c
 80229d0:	4651      	mov	r1, sl
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80229d2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80229d4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80229d6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80229d8:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80229dc:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80229e0:	f01a fd60 	bl	803d4a4 <memset>
 80229e4:	4b0b      	ldr	r3, [pc, #44]	@ (8022a14 <prvInitialiseNewTask.constprop.0+0xb4>)
 80229e6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80229e8:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80229ec:	33d0      	adds	r3, #208	@ 0xd0
 80229ee:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80229f0:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80229f2:	4642      	mov	r2, r8
 80229f4:	4639      	mov	r1, r7
 80229f6:	4630      	mov	r0, r6
 80229f8:	f000 fe16 	bl	8023628 <pxPortInitialiseStack>
 80229fc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80229fe:	f1b9 0f00 	cmp.w	r9, #0
 8022a02:	d001      	beq.n	8022a08 <prvInitialiseNewTask.constprop.0+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8022a04:	f8c9 4000 	str.w	r4, [r9]
}
 8022a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8022a0c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 8022a10:	e7c8      	b.n	80229a4 <prvInitialiseNewTask.constprop.0+0x44>
 8022a12:	bf00      	nop
 8022a14:	2000b994 	.word	0x2000b994

08022a18 <xTaskCreateStatic>:
	{
 8022a18:	b570      	push	{r4, r5, r6, lr}
 8022a1a:	b086      	sub	sp, #24
 8022a1c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8022a20:	b945      	cbnz	r5, 8022a34 <xTaskCreateStatic+0x1c>
 8022a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022a26:	f383 8811 	msr	BASEPRI, r3
 8022a2a:	f3bf 8f6f 	isb	sy
 8022a2e:	f3bf 8f4f 	dsb	sy
 8022a32:	e7fe      	b.n	8022a32 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8022a34:	b944      	cbnz	r4, 8022a48 <xTaskCreateStatic+0x30>
 8022a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022a3a:	f383 8811 	msr	BASEPRI, r3
 8022a3e:	f3bf 8f6f 	isb	sy
 8022a42:	f3bf 8f4f 	dsb	sy
 8022a46:	e7fe      	b.n	8022a46 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8022a48:	26a8      	movs	r6, #168	@ 0xa8
 8022a4a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8022a4c:	9e05      	ldr	r6, [sp, #20]
 8022a4e:	2ea8      	cmp	r6, #168	@ 0xa8
 8022a50:	d008      	beq.n	8022a64 <xTaskCreateStatic+0x4c>
 8022a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022a56:	f383 8811 	msr	BASEPRI, r3
 8022a5a:	f3bf 8f6f 	isb	sy
 8022a5e:	f3bf 8f4f 	dsb	sy
 8022a62:	e7fe      	b.n	8022a62 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8022a64:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8022a66:	2502      	movs	r5, #2
 8022a68:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8022a6c:	ad04      	add	r5, sp, #16
 8022a6e:	9501      	str	r5, [sp, #4]
 8022a70:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8022a72:	9402      	str	r4, [sp, #8]
 8022a74:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8022a76:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8022a78:	f7ff ff72 	bl	8022960 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8022a7c:	4620      	mov	r0, r4
 8022a7e:	f7ff fe57 	bl	8022730 <prvAddNewTaskToReadyList>
	}
 8022a82:	9804      	ldr	r0, [sp, #16]
 8022a84:	b006      	add	sp, #24
 8022a86:	bd70      	pop	{r4, r5, r6, pc}

08022a88 <xTaskCreate>:
	{
 8022a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022a8c:	4607      	mov	r7, r0
 8022a8e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8022a90:	0090      	lsls	r0, r2, #2
	{
 8022a92:	4688      	mov	r8, r1
 8022a94:	4616      	mov	r6, r2
 8022a96:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8022a98:	f000 ff5a 	bl	8023950 <pvPortMalloc>
			if( pxStack != NULL )
 8022a9c:	4605      	mov	r5, r0
 8022a9e:	b920      	cbnz	r0, 8022aaa <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8022aa0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8022aa4:	b005      	add	sp, #20
 8022aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8022aaa:	20a8      	movs	r0, #168	@ 0xa8
 8022aac:	f000 ff50 	bl	8023950 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8022ab0:	4604      	mov	r4, r0
 8022ab2:	b198      	cbz	r0, 8022adc <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8022ab4:	2300      	movs	r3, #0
 8022ab6:	f880 30a5 	strb.w	r3, [r0, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8022aba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8022abc:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8022abe:	9301      	str	r3, [sp, #4]
 8022ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8022ac2:	9002      	str	r0, [sp, #8]
 8022ac4:	9300      	str	r3, [sp, #0]
 8022ac6:	4632      	mov	r2, r6
 8022ac8:	464b      	mov	r3, r9
 8022aca:	4641      	mov	r1, r8
 8022acc:	4638      	mov	r0, r7
 8022ace:	f7ff ff47 	bl	8022960 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8022ad2:	4620      	mov	r0, r4
 8022ad4:	f7ff fe2c 	bl	8022730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8022ad8:	2001      	movs	r0, #1
 8022ada:	e7e3      	b.n	8022aa4 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8022adc:	4628      	mov	r0, r5
 8022ade:	f000 ffcf 	bl	8023a80 <vPortFree>
		if( pxNewTCB != NULL )
 8022ae2:	e7dd      	b.n	8022aa0 <xTaskCreate+0x18>

08022ae4 <vTaskStartScheduler>:
{
 8022ae4:	b510      	push	{r4, lr}
 8022ae6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8022ae8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8022aea:	aa07      	add	r2, sp, #28
 8022aec:	a906      	add	r1, sp, #24
 8022aee:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8022af0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8022af4:	f7ff f8dc 	bl	8021cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8022af8:	9b05      	ldr	r3, [sp, #20]
 8022afa:	9302      	str	r3, [sp, #8]
 8022afc:	9b06      	ldr	r3, [sp, #24]
 8022afe:	9a07      	ldr	r2, [sp, #28]
 8022b00:	4919      	ldr	r1, [pc, #100]	@ (8022b68 <vTaskStartScheduler+0x84>)
 8022b02:	481a      	ldr	r0, [pc, #104]	@ (8022b6c <vTaskStartScheduler+0x88>)
 8022b04:	e9cd 4300 	strd	r4, r3, [sp]
 8022b08:	4623      	mov	r3, r4
 8022b0a:	f7ff ff85 	bl	8022a18 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8022b0e:	b340      	cbz	r0, 8022b62 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8022b10:	f000 fbb6 	bl	8023280 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8022b14:	2801      	cmp	r0, #1
 8022b16:	d119      	bne.n	8022b4c <vTaskStartScheduler+0x68>
 8022b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022b1c:	f383 8811 	msr	BASEPRI, r3
 8022b20:	f3bf 8f6f 	isb	sy
 8022b24:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8022b28:	4b11      	ldr	r3, [pc, #68]	@ (8022b70 <vTaskStartScheduler+0x8c>)
 8022b2a:	4a12      	ldr	r2, [pc, #72]	@ (8022b74 <vTaskStartScheduler+0x90>)
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	3354      	adds	r3, #84	@ 0x54
 8022b30:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8022b32:	4b11      	ldr	r3, [pc, #68]	@ (8022b78 <vTaskStartScheduler+0x94>)
 8022b34:	f04f 32ff 	mov.w	r2, #4294967295
 8022b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8022b3a:	4b10      	ldr	r3, [pc, #64]	@ (8022b7c <vTaskStartScheduler+0x98>)
 8022b3c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8022b3e:	4b10      	ldr	r3, [pc, #64]	@ (8022b80 <vTaskStartScheduler+0x9c>)
 8022b40:	601c      	str	r4, [r3, #0]
}
 8022b42:	b008      	add	sp, #32
 8022b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8022b48:	f000 be2c 	b.w	80237a4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8022b4c:	3001      	adds	r0, #1
 8022b4e:	d108      	bne.n	8022b62 <vTaskStartScheduler+0x7e>
 8022b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022b54:	f383 8811 	msr	BASEPRI, r3
 8022b58:	f3bf 8f6f 	isb	sy
 8022b5c:	f3bf 8f4f 	dsb	sy
 8022b60:	e7fe      	b.n	8022b60 <vTaskStartScheduler+0x7c>
}
 8022b62:	b008      	add	sp, #32
 8022b64:	bd10      	pop	{r4, pc}
 8022b66:	bf00      	nop
 8022b68:	0803f79c 	.word	0x0803f79c
 8022b6c:	08022901 	.word	0x08022901
 8022b70:	20003c4c 	.word	0x20003c4c
 8022b74:	200007f4 	.word	0x200007f4
 8022b78:	20003758 	.word	0x20003758
 8022b7c:	2000376c 	.word	0x2000376c
 8022b80:	20003774 	.word	0x20003774

08022b84 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8022b84:	4a02      	ldr	r2, [pc, #8]	@ (8022b90 <vTaskSuspendAll+0xc>)
 8022b86:	6813      	ldr	r3, [r2, #0]
 8022b88:	3301      	adds	r3, #1
 8022b8a:	6013      	str	r3, [r2, #0]
}
 8022b8c:	4770      	bx	lr
 8022b8e:	bf00      	nop
 8022b90:	20003754 	.word	0x20003754

08022b94 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8022b94:	4b01      	ldr	r3, [pc, #4]	@ (8022b9c <xTaskGetTickCount+0x8>)
 8022b96:	6818      	ldr	r0, [r3, #0]
}
 8022b98:	4770      	bx	lr
 8022b9a:	bf00      	nop
 8022b9c:	20003774 	.word	0x20003774

08022ba0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8022ca0 <xTaskIncrementTick+0x100>)
 8022ba2:	681b      	ldr	r3, [r3, #0]
{
 8022ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022ba8:	2b00      	cmp	r3, #0
 8022baa:	d172      	bne.n	8022c92 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8022bac:	4b3d      	ldr	r3, [pc, #244]	@ (8022ca4 <xTaskIncrementTick+0x104>)
 8022bae:	681c      	ldr	r4, [r3, #0]
 8022bb0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8022bb2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8022bb4:	b9bc      	cbnz	r4, 8022be6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8022bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8022ca8 <xTaskIncrementTick+0x108>)
 8022bb8:	681a      	ldr	r2, [r3, #0]
 8022bba:	6812      	ldr	r2, [r2, #0]
 8022bbc:	b142      	cbz	r2, 8022bd0 <xTaskIncrementTick+0x30>
 8022bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022bc2:	f383 8811 	msr	BASEPRI, r3
 8022bc6:	f3bf 8f6f 	isb	sy
 8022bca:	f3bf 8f4f 	dsb	sy
 8022bce:	e7fe      	b.n	8022bce <xTaskIncrementTick+0x2e>
 8022bd0:	4a36      	ldr	r2, [pc, #216]	@ (8022cac <xTaskIncrementTick+0x10c>)
 8022bd2:	6819      	ldr	r1, [r3, #0]
 8022bd4:	6810      	ldr	r0, [r2, #0]
 8022bd6:	6018      	str	r0, [r3, #0]
 8022bd8:	6011      	str	r1, [r2, #0]
 8022bda:	4a35      	ldr	r2, [pc, #212]	@ (8022cb0 <xTaskIncrementTick+0x110>)
 8022bdc:	6813      	ldr	r3, [r2, #0]
 8022bde:	3301      	adds	r3, #1
 8022be0:	6013      	str	r3, [r2, #0]
 8022be2:	f7ff fe5d 	bl	80228a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8022be6:	4d33      	ldr	r5, [pc, #204]	@ (8022cb4 <xTaskIncrementTick+0x114>)
 8022be8:	4e33      	ldr	r6, [pc, #204]	@ (8022cb8 <xTaskIncrementTick+0x118>)
 8022bea:	682b      	ldr	r3, [r5, #0]
 8022bec:	4f33      	ldr	r7, [pc, #204]	@ (8022cbc <xTaskIncrementTick+0x11c>)
 8022bee:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8022bf0:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8022bf4:	d212      	bcs.n	8022c1c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8022bf6:	683a      	ldr	r2, [r7, #0]
 8022bf8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8022bfa:	2114      	movs	r1, #20
 8022bfc:	434a      	muls	r2, r1
 8022bfe:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8022c00:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8022c02:	4a2f      	ldr	r2, [pc, #188]	@ (8022cc0 <xTaskIncrementTick+0x120>)
 8022c04:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 8022c06:	bf28      	it	cs
 8022c08:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8022c0c:	2a00      	cmp	r2, #0
 8022c0e:	bf18      	it	ne
 8022c10:	f04f 0b01 	movne.w	fp, #1
}
 8022c14:	4658      	mov	r0, fp
 8022c16:	b003      	add	sp, #12
 8022c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022c1c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8022ca8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8022c20:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8022cc8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022c24:	f8d9 2000 	ldr.w	r2, [r9]
 8022c28:	6812      	ldr	r2, [r2, #0]
 8022c2a:	b91a      	cbnz	r2, 8022c34 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8022c30:	602a      	str	r2, [r5, #0]
					break;
 8022c32:	e7e0      	b.n	8022bf6 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022c34:	f8d9 2000 	ldr.w	r2, [r9]
 8022c38:	68d2      	ldr	r2, [r2, #12]
 8022c3a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8022c3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8022c42:	428c      	cmp	r4, r1
 8022c44:	d201      	bcs.n	8022c4a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 8022c46:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8022c48:	e7d5      	b.n	8022bf6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022c4a:	f108 0304 	add.w	r3, r8, #4
 8022c4e:	4618      	mov	r0, r3
 8022c50:	9301      	str	r3, [sp, #4]
 8022c52:	f7ff f875 	bl	8021d40 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8022c56:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8022c5a:	b119      	cbz	r1, 8022c64 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022c5c:	f108 0018 	add.w	r0, r8, #24
 8022c60:	f7ff f86e 	bl	8021d40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8022c64:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8022c68:	f8da 1000 	ldr.w	r1, [sl]
 8022c6c:	2314      	movs	r3, #20
 8022c6e:	4288      	cmp	r0, r1
 8022c70:	bf88      	it	hi
 8022c72:	f8ca 0000 	strhi.w	r0, [sl]
 8022c76:	9901      	ldr	r1, [sp, #4]
 8022c78:	fb03 6000 	mla	r0, r3, r0, r6
 8022c7c:	f7ff f83e 	bl	8021cfc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022c80:	6838      	ldr	r0, [r7, #0]
 8022c82:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8022c86:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8022c88:	4291      	cmp	r1, r2
 8022c8a:	bf28      	it	cs
 8022c8c:	f04f 0b01 	movcs.w	fp, #1
 8022c90:	e7c8      	b.n	8022c24 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 8022c92:	4a0c      	ldr	r2, [pc, #48]	@ (8022cc4 <xTaskIncrementTick+0x124>)
 8022c94:	6813      	ldr	r3, [r2, #0]
 8022c96:	3301      	adds	r3, #1
 8022c98:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8022c9a:	f04f 0b00 	mov.w	fp, #0
 8022c9e:	e7b9      	b.n	8022c14 <xTaskIncrementTick+0x74>
 8022ca0:	20003754 	.word	0x20003754
 8022ca4:	20003774 	.word	0x20003774
 8022ca8:	200037c0 	.word	0x200037c0
 8022cac:	200037bc 	.word	0x200037bc
 8022cb0:	20003760 	.word	0x20003760
 8022cb4:	20003758 	.word	0x20003758
 8022cb8:	200037ec 	.word	0x200037ec
 8022cbc:	20003c4c 	.word	0x20003c4c
 8022cc0:	20003764 	.word	0x20003764
 8022cc4:	20003768 	.word	0x20003768
 8022cc8:	20003770 	.word	0x20003770

08022ccc <xTaskResumeAll>:
{
 8022ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8022cd0:	4c30      	ldr	r4, [pc, #192]	@ (8022d94 <xTaskResumeAll+0xc8>)
 8022cd2:	6823      	ldr	r3, [r4, #0]
 8022cd4:	b943      	cbnz	r3, 8022ce8 <xTaskResumeAll+0x1c>
 8022cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022cda:	f383 8811 	msr	BASEPRI, r3
 8022cde:	f3bf 8f6f 	isb	sy
 8022ce2:	f3bf 8f4f 	dsb	sy
 8022ce6:	e7fe      	b.n	8022ce6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8022ce8:	f000 fccc 	bl	8023684 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8022cec:	6823      	ldr	r3, [r4, #0]
 8022cee:	3b01      	subs	r3, #1
 8022cf0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022cf2:	6824      	ldr	r4, [r4, #0]
 8022cf4:	b12c      	cbz	r4, 8022d02 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8022cf6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8022cf8:	f000 fce4 	bl	80236c4 <vPortExitCritical>
}
 8022cfc:	4620      	mov	r0, r4
 8022cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8022d02:	4b25      	ldr	r3, [pc, #148]	@ (8022d98 <xTaskResumeAll+0xcc>)
 8022d04:	681b      	ldr	r3, [r3, #0]
 8022d06:	2b00      	cmp	r3, #0
 8022d08:	d0f5      	beq.n	8022cf6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022d0a:	4d24      	ldr	r5, [pc, #144]	@ (8022d9c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8022d0c:	4e24      	ldr	r6, [pc, #144]	@ (8022da0 <xTaskResumeAll+0xd4>)
 8022d0e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8022db0 <xTaskResumeAll+0xe4>
 8022d12:	e01d      	b.n	8022d50 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022d14:	68eb      	ldr	r3, [r5, #12]
 8022d16:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022d18:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022d1a:	f104 0018 	add.w	r0, r4, #24
 8022d1e:	f7ff f80f 	bl	8021d40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022d22:	4638      	mov	r0, r7
 8022d24:	f7ff f80c 	bl	8021d40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8022d28:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8022d2a:	6832      	ldr	r2, [r6, #0]
 8022d2c:	2014      	movs	r0, #20
 8022d2e:	4293      	cmp	r3, r2
 8022d30:	fb00 8003 	mla	r0, r0, r3, r8
 8022d34:	4639      	mov	r1, r7
 8022d36:	bf88      	it	hi
 8022d38:	6033      	strhi	r3, [r6, #0]
 8022d3a:	f7fe ffdf 	bl	8021cfc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022d3e:	4b19      	ldr	r3, [pc, #100]	@ (8022da4 <xTaskResumeAll+0xd8>)
 8022d40:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8022d42:	681b      	ldr	r3, [r3, #0]
 8022d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d46:	429a      	cmp	r2, r3
 8022d48:	d302      	bcc.n	8022d50 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8022d4a:	4b17      	ldr	r3, [pc, #92]	@ (8022da8 <xTaskResumeAll+0xdc>)
 8022d4c:	2201      	movs	r2, #1
 8022d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022d50:	682b      	ldr	r3, [r5, #0]
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d1de      	bne.n	8022d14 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8022d56:	b10c      	cbz	r4, 8022d5c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8022d58:	f7ff fda2 	bl	80228a0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8022d5c:	4d13      	ldr	r5, [pc, #76]	@ (8022dac <xTaskResumeAll+0xe0>)
 8022d5e:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8022d60:	b144      	cbz	r4, 8022d74 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8022d62:	4e11      	ldr	r6, [pc, #68]	@ (8022da8 <xTaskResumeAll+0xdc>)
 8022d64:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8022d66:	f7ff ff1b 	bl	8022ba0 <xTaskIncrementTick>
 8022d6a:	b100      	cbz	r0, 8022d6e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8022d6c:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8022d6e:	3c01      	subs	r4, #1
 8022d70:	d1f9      	bne.n	8022d66 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 8022d72:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8022d74:	4b0c      	ldr	r3, [pc, #48]	@ (8022da8 <xTaskResumeAll+0xdc>)
 8022d76:	681b      	ldr	r3, [r3, #0]
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	d0bc      	beq.n	8022cf6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8022d7c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8022d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022d84:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8022d88:	f3bf 8f4f 	dsb	sy
 8022d8c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8022d90:	2401      	movs	r4, #1
 8022d92:	e7b1      	b.n	8022cf8 <xTaskResumeAll+0x2c>
 8022d94:	20003754 	.word	0x20003754
 8022d98:	20003778 	.word	0x20003778
 8022d9c:	200037a8 	.word	0x200037a8
 8022da0:	20003770 	.word	0x20003770
 8022da4:	20003c4c 	.word	0x20003c4c
 8022da8:	20003764 	.word	0x20003764
 8022dac:	20003768 	.word	0x20003768
 8022db0:	200037ec 	.word	0x200037ec

08022db4 <vTaskDelay>:
	{
 8022db4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8022db6:	b950      	cbnz	r0, 8022dce <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8022db8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8022dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022dc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8022dc4:	f3bf 8f4f 	dsb	sy
 8022dc8:	f3bf 8f6f 	isb	sy
	}
 8022dcc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8022dce:	4b0a      	ldr	r3, [pc, #40]	@ (8022df8 <vTaskDelay+0x44>)
 8022dd0:	6819      	ldr	r1, [r3, #0]
 8022dd2:	b141      	cbz	r1, 8022de6 <vTaskDelay+0x32>
 8022dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022dd8:	f383 8811 	msr	BASEPRI, r3
 8022ddc:	f3bf 8f6f 	isb	sy
 8022de0:	f3bf 8f4f 	dsb	sy
 8022de4:	e7fe      	b.n	8022de4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8022de6:	f7ff fecd 	bl	8022b84 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8022dea:	f7ff fd21 	bl	8022830 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8022dee:	f7ff ff6d 	bl	8022ccc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8022df2:	2800      	cmp	r0, #0
 8022df4:	d0e0      	beq.n	8022db8 <vTaskDelay+0x4>
 8022df6:	e7e9      	b.n	8022dcc <vTaskDelay+0x18>
 8022df8:	20003754 	.word	0x20003754

08022dfc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8022dfc:	4b19      	ldr	r3, [pc, #100]	@ (8022e64 <vTaskSwitchContext+0x68>)
 8022dfe:	681a      	ldr	r2, [r3, #0]
 8022e00:	4b19      	ldr	r3, [pc, #100]	@ (8022e68 <vTaskSwitchContext+0x6c>)
{
 8022e02:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8022e04:	b112      	cbz	r2, 8022e0c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8022e06:	2201      	movs	r2, #1
 8022e08:	601a      	str	r2, [r3, #0]
}
 8022e0a:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022e0c:	4d17      	ldr	r5, [pc, #92]	@ (8022e6c <vTaskSwitchContext+0x70>)
		xYieldPending = pdFALSE;
 8022e0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022e10:	682a      	ldr	r2, [r5, #0]
 8022e12:	4917      	ldr	r1, [pc, #92]	@ (8022e70 <vTaskSwitchContext+0x74>)
 8022e14:	2614      	movs	r6, #20
 8022e16:	fb06 f302 	mul.w	r3, r6, r2
 8022e1a:	18c8      	adds	r0, r1, r3
 8022e1c:	58cc      	ldr	r4, [r1, r3]
 8022e1e:	b1ac      	cbz	r4, 8022e4c <vTaskSwitchContext+0x50>
 8022e20:	6844      	ldr	r4, [r0, #4]
 8022e22:	3308      	adds	r3, #8
 8022e24:	6864      	ldr	r4, [r4, #4]
 8022e26:	6044      	str	r4, [r0, #4]
 8022e28:	440b      	add	r3, r1
 8022e2a:	429c      	cmp	r4, r3
 8022e2c:	bf04      	itt	eq
 8022e2e:	6863      	ldreq	r3, [r4, #4]
 8022e30:	6043      	streq	r3, [r0, #4]
 8022e32:	2314      	movs	r3, #20
 8022e34:	fb03 1102 	mla	r1, r3, r2, r1
 8022e38:	684b      	ldr	r3, [r1, #4]
 8022e3a:	68d9      	ldr	r1, [r3, #12]
 8022e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8022e74 <vTaskSwitchContext+0x78>)
 8022e3e:	6019      	str	r1, [r3, #0]
 8022e40:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8022e42:	681b      	ldr	r3, [r3, #0]
 8022e44:	4a0c      	ldr	r2, [pc, #48]	@ (8022e78 <vTaskSwitchContext+0x7c>)
 8022e46:	3354      	adds	r3, #84	@ 0x54
 8022e48:	6013      	str	r3, [r2, #0]
}
 8022e4a:	e7de      	b.n	8022e0a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022e4c:	b942      	cbnz	r2, 8022e60 <vTaskSwitchContext+0x64>
 8022e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022e52:	f383 8811 	msr	BASEPRI, r3
 8022e56:	f3bf 8f6f 	isb	sy
 8022e5a:	f3bf 8f4f 	dsb	sy
 8022e5e:	e7fe      	b.n	8022e5e <vTaskSwitchContext+0x62>
 8022e60:	3a01      	subs	r2, #1
 8022e62:	e7d8      	b.n	8022e16 <vTaskSwitchContext+0x1a>
 8022e64:	20003754 	.word	0x20003754
 8022e68:	20003764 	.word	0x20003764
 8022e6c:	20003770 	.word	0x20003770
 8022e70:	200037ec 	.word	0x200037ec
 8022e74:	20003c4c 	.word	0x20003c4c
 8022e78:	200007f4 	.word	0x200007f4

08022e7c <vTaskPlaceOnEventList>:
{
 8022e7c:	b510      	push	{r4, lr}
 8022e7e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8022e80:	b940      	cbnz	r0, 8022e94 <vTaskPlaceOnEventList+0x18>
 8022e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022e86:	f383 8811 	msr	BASEPRI, r3
 8022e8a:	f3bf 8f6f 	isb	sy
 8022e8e:	f3bf 8f4f 	dsb	sy
 8022e92:	e7fe      	b.n	8022e92 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022e94:	4b05      	ldr	r3, [pc, #20]	@ (8022eac <vTaskPlaceOnEventList+0x30>)
 8022e96:	6819      	ldr	r1, [r3, #0]
 8022e98:	3118      	adds	r1, #24
 8022e9a:	f7fe ff3a 	bl	8021d12 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022e9e:	4620      	mov	r0, r4
 8022ea0:	2101      	movs	r1, #1
}
 8022ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022ea6:	f7ff bcc3 	b.w	8022830 <prvAddCurrentTaskToDelayedList>
 8022eaa:	bf00      	nop
 8022eac:	20003c4c 	.word	0x20003c4c

08022eb0 <vTaskPlaceOnEventListRestricted>:
	{
 8022eb0:	b538      	push	{r3, r4, r5, lr}
 8022eb2:	460d      	mov	r5, r1
 8022eb4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8022eb6:	b940      	cbnz	r0, 8022eca <vTaskPlaceOnEventListRestricted+0x1a>
 8022eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022ebc:	f383 8811 	msr	BASEPRI, r3
 8022ec0:	f3bf 8f6f 	isb	sy
 8022ec4:	f3bf 8f4f 	dsb	sy
 8022ec8:	e7fe      	b.n	8022ec8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022eca:	4b07      	ldr	r3, [pc, #28]	@ (8022ee8 <vTaskPlaceOnEventListRestricted+0x38>)
 8022ecc:	6819      	ldr	r1, [r3, #0]
 8022ece:	3118      	adds	r1, #24
 8022ed0:	f7fe ff14 	bl	8021cfc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8022ed4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8022ed6:	4621      	mov	r1, r4
 8022ed8:	bf0c      	ite	eq
 8022eda:	4628      	moveq	r0, r5
 8022edc:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8022ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8022ee4:	f7ff bca4 	b.w	8022830 <prvAddCurrentTaskToDelayedList>
 8022ee8:	20003c4c 	.word	0x20003c4c

08022eec <xTaskRemoveFromEventList>:
{
 8022eec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022eee:	68c3      	ldr	r3, [r0, #12]
 8022ef0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8022ef2:	b944      	cbnz	r4, 8022f06 <xTaskRemoveFromEventList+0x1a>
 8022ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022ef8:	f383 8811 	msr	BASEPRI, r3
 8022efc:	f3bf 8f6f 	isb	sy
 8022f00:	f3bf 8f4f 	dsb	sy
 8022f04:	e7fe      	b.n	8022f04 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8022f06:	f104 0518 	add.w	r5, r4, #24
 8022f0a:	4628      	mov	r0, r5
 8022f0c:	f7fe ff18 	bl	8021d40 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022f10:	4b10      	ldr	r3, [pc, #64]	@ (8022f54 <xTaskRemoveFromEventList+0x68>)
 8022f12:	681b      	ldr	r3, [r3, #0]
 8022f14:	b9db      	cbnz	r3, 8022f4e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8022f16:	1d25      	adds	r5, r4, #4
 8022f18:	4628      	mov	r0, r5
 8022f1a:	f7fe ff11 	bl	8021d40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8022f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8022f58 <xTaskRemoveFromEventList+0x6c>)
 8022f20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8022f22:	6811      	ldr	r1, [r2, #0]
 8022f24:	428b      	cmp	r3, r1
 8022f26:	bf88      	it	hi
 8022f28:	6013      	strhi	r3, [r2, #0]
 8022f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8022f5c <xTaskRemoveFromEventList+0x70>)
 8022f2c:	2014      	movs	r0, #20
 8022f2e:	4629      	mov	r1, r5
 8022f30:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022f34:	f7fe fee2 	bl	8021cfc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022f38:	4b09      	ldr	r3, [pc, #36]	@ (8022f60 <xTaskRemoveFromEventList+0x74>)
 8022f3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8022f3c:	681b      	ldr	r3, [r3, #0]
 8022f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022f40:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8022f42:	bf83      	ittte	hi
 8022f44:	4b07      	ldrhi	r3, [pc, #28]	@ (8022f64 <xTaskRemoveFromEventList+0x78>)
 8022f46:	2001      	movhi	r0, #1
 8022f48:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8022f4a:	2000      	movls	r0, #0
}
 8022f4c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022f4e:	4806      	ldr	r0, [pc, #24]	@ (8022f68 <xTaskRemoveFromEventList+0x7c>)
 8022f50:	4629      	mov	r1, r5
 8022f52:	e7ef      	b.n	8022f34 <xTaskRemoveFromEventList+0x48>
 8022f54:	20003754 	.word	0x20003754
 8022f58:	20003770 	.word	0x20003770
 8022f5c:	200037ec 	.word	0x200037ec
 8022f60:	20003c4c 	.word	0x20003c4c
 8022f64:	20003764 	.word	0x20003764
 8022f68:	200037a8 	.word	0x200037a8

08022f6c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8022f6c:	4b03      	ldr	r3, [pc, #12]	@ (8022f7c <vTaskInternalSetTimeOutState+0x10>)
 8022f6e:	681b      	ldr	r3, [r3, #0]
 8022f70:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8022f72:	4b03      	ldr	r3, [pc, #12]	@ (8022f80 <vTaskInternalSetTimeOutState+0x14>)
 8022f74:	681b      	ldr	r3, [r3, #0]
 8022f76:	6043      	str	r3, [r0, #4]
}
 8022f78:	4770      	bx	lr
 8022f7a:	bf00      	nop
 8022f7c:	20003760 	.word	0x20003760
 8022f80:	20003774 	.word	0x20003774

08022f84 <xTaskCheckForTimeOut>:
{
 8022f84:	b570      	push	{r4, r5, r6, lr}
 8022f86:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8022f88:	4605      	mov	r5, r0
 8022f8a:	b940      	cbnz	r0, 8022f9e <xTaskCheckForTimeOut+0x1a>
 8022f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022f90:	f383 8811 	msr	BASEPRI, r3
 8022f94:	f3bf 8f6f 	isb	sy
 8022f98:	f3bf 8f4f 	dsb	sy
 8022f9c:	e7fe      	b.n	8022f9c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8022f9e:	b941      	cbnz	r1, 8022fb2 <xTaskCheckForTimeOut+0x2e>
 8022fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022fa4:	f383 8811 	msr	BASEPRI, r3
 8022fa8:	f3bf 8f6f 	isb	sy
 8022fac:	f3bf 8f4f 	dsb	sy
 8022fb0:	e7fe      	b.n	8022fb0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8022fb2:	f000 fb67 	bl	8023684 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8022fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8022ff4 <xTaskCheckForTimeOut+0x70>)
 8022fb8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8022fba:	6823      	ldr	r3, [r4, #0]
 8022fbc:	1c5a      	adds	r2, r3, #1
 8022fbe:	d010      	beq.n	8022fe2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8022fc0:	480d      	ldr	r0, [pc, #52]	@ (8022ff8 <xTaskCheckForTimeOut+0x74>)
 8022fc2:	682e      	ldr	r6, [r5, #0]
 8022fc4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8022fc6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8022fc8:	4286      	cmp	r6, r0
 8022fca:	d001      	beq.n	8022fd0 <xTaskCheckForTimeOut+0x4c>
 8022fcc:	428a      	cmp	r2, r1
 8022fce:	d90f      	bls.n	8022ff0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8022fd0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8022fd2:	4283      	cmp	r3, r0
 8022fd4:	d90a      	bls.n	8022fec <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8022fd6:	1a5b      	subs	r3, r3, r1
 8022fd8:	4413      	add	r3, r2
 8022fda:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022fdc:	4628      	mov	r0, r5
 8022fde:	f7ff ffc5 	bl	8022f6c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8022fe2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8022fe4:	f000 fb6e 	bl	80236c4 <vPortExitCritical>
}
 8022fe8:	4620      	mov	r0, r4
 8022fea:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8022fec:	2300      	movs	r3, #0
 8022fee:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8022ff0:	2401      	movs	r4, #1
 8022ff2:	e7f7      	b.n	8022fe4 <xTaskCheckForTimeOut+0x60>
 8022ff4:	20003774 	.word	0x20003774
 8022ff8:	20003760 	.word	0x20003760

08022ffc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8022ffc:	4b01      	ldr	r3, [pc, #4]	@ (8023004 <vTaskMissedYield+0x8>)
 8022ffe:	2201      	movs	r2, #1
 8023000:	601a      	str	r2, [r3, #0]
}
 8023002:	4770      	bx	lr
 8023004:	20003764 	.word	0x20003764

08023008 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8023008:	4b05      	ldr	r3, [pc, #20]	@ (8023020 <xTaskGetSchedulerState+0x18>)
 802300a:	681b      	ldr	r3, [r3, #0]
 802300c:	b133      	cbz	r3, 802301c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 802300e:	4b05      	ldr	r3, [pc, #20]	@ (8023024 <xTaskGetSchedulerState+0x1c>)
 8023010:	6818      	ldr	r0, [r3, #0]
 8023012:	fab0 f080 	clz	r0, r0
 8023016:	0940      	lsrs	r0, r0, #5
 8023018:	0040      	lsls	r0, r0, #1
 802301a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 802301c:	2001      	movs	r0, #1
	}
 802301e:	4770      	bx	lr
 8023020:	2000376c 	.word	0x2000376c
 8023024:	20003754 	.word	0x20003754

08023028 <xTaskPriorityInherit>:
	{
 8023028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 802302a:	4604      	mov	r4, r0
 802302c:	b338      	cbz	r0, 802307e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 802302e:	4d1a      	ldr	r5, [pc, #104]	@ (8023098 <xTaskPriorityInherit+0x70>)
 8023030:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8023032:	682a      	ldr	r2, [r5, #0]
 8023034:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8023036:	4293      	cmp	r3, r2
 8023038:	d226      	bcs.n	8023088 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 802303a:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 802303c:	4e17      	ldr	r6, [pc, #92]	@ (802309c <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 802303e:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023040:	bfa1      	itttt	ge
 8023042:	682a      	ldrge	r2, [r5, #0]
 8023044:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 8023046:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 802304a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 802304c:	2214      	movs	r2, #20
 802304e:	fb02 6303 	mla	r3, r2, r3, r6
 8023052:	6942      	ldr	r2, [r0, #20]
 8023054:	429a      	cmp	r2, r3
 8023056:	d113      	bne.n	8023080 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8023058:	1d07      	adds	r7, r0, #4
 802305a:	4638      	mov	r0, r7
 802305c:	f7fe fe70 	bl	8021d40 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8023060:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8023062:	4a0f      	ldr	r2, [pc, #60]	@ (80230a0 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8023064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8023066:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8023068:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 802306a:	2014      	movs	r0, #20
 802306c:	428b      	cmp	r3, r1
 802306e:	fb00 6003 	mla	r0, r0, r3, r6
 8023072:	4639      	mov	r1, r7
 8023074:	bf88      	it	hi
 8023076:	6013      	strhi	r3, [r2, #0]
 8023078:	f7fe fe40 	bl	8021cfc <vListInsertEnd>
				xReturn = pdTRUE;
 802307c:	2001      	movs	r0, #1
	}
 802307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8023080:	682b      	ldr	r3, [r5, #0]
 8023082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023084:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8023086:	e7f9      	b.n	802307c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8023088:	682b      	ldr	r3, [r5, #0]
 802308a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 802308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802308e:	4298      	cmp	r0, r3
 8023090:	bf2c      	ite	cs
 8023092:	2000      	movcs	r0, #0
 8023094:	2001      	movcc	r0, #1
 8023096:	e7f2      	b.n	802307e <xTaskPriorityInherit+0x56>
 8023098:	20003c4c 	.word	0x20003c4c
 802309c:	200037ec 	.word	0x200037ec
 80230a0:	20003770 	.word	0x20003770

080230a4 <xTaskPriorityDisinherit>:
	{
 80230a4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80230a6:	b908      	cbnz	r0, 80230ac <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80230a8:	2000      	movs	r0, #0
	}
 80230aa:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80230ac:	4b1b      	ldr	r3, [pc, #108]	@ (802311c <xTaskPriorityDisinherit+0x78>)
 80230ae:	681c      	ldr	r4, [r3, #0]
 80230b0:	4284      	cmp	r4, r0
 80230b2:	d008      	beq.n	80230c6 <xTaskPriorityDisinherit+0x22>
 80230b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80230b8:	f383 8811 	msr	BASEPRI, r3
 80230bc:	f3bf 8f6f 	isb	sy
 80230c0:	f3bf 8f4f 	dsb	sy
 80230c4:	e7fe      	b.n	80230c4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80230c6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80230c8:	b943      	cbnz	r3, 80230dc <xTaskPriorityDisinherit+0x38>
 80230ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80230ce:	f383 8811 	msr	BASEPRI, r3
 80230d2:	f3bf 8f6f 	isb	sy
 80230d6:	f3bf 8f4f 	dsb	sy
 80230da:	e7fe      	b.n	80230da <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80230dc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80230de:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 80230e0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80230e2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80230e4:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80230e6:	d0df      	beq.n	80230a8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80230e8:	2b00      	cmp	r3, #0
 80230ea:	d1dd      	bne.n	80230a8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80230ec:	1d25      	adds	r5, r4, #4
 80230ee:	4628      	mov	r0, r5
 80230f0:	f7fe fe26 	bl	8021d40 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80230f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80230f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80230f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80230fc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80230fe:	4a08      	ldr	r2, [pc, #32]	@ (8023120 <xTaskPriorityDisinherit+0x7c>)
 8023100:	6811      	ldr	r1, [r2, #0]
 8023102:	428b      	cmp	r3, r1
 8023104:	bf88      	it	hi
 8023106:	6013      	strhi	r3, [r2, #0]
 8023108:	4a06      	ldr	r2, [pc, #24]	@ (8023124 <xTaskPriorityDisinherit+0x80>)
 802310a:	2014      	movs	r0, #20
 802310c:	fb00 2003 	mla	r0, r0, r3, r2
 8023110:	4629      	mov	r1, r5
 8023112:	f7fe fdf3 	bl	8021cfc <vListInsertEnd>
					xReturn = pdTRUE;
 8023116:	2001      	movs	r0, #1
		return xReturn;
 8023118:	e7c7      	b.n	80230aa <xTaskPriorityDisinherit+0x6>
 802311a:	bf00      	nop
 802311c:	20003c4c 	.word	0x20003c4c
 8023120:	20003770 	.word	0x20003770
 8023124:	200037ec 	.word	0x200037ec

08023128 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8023128:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 802312a:	4604      	mov	r4, r0
 802312c:	2800      	cmp	r0, #0
 802312e:	d041      	beq.n	80231b4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8023130:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8023132:	b942      	cbnz	r2, 8023146 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8023134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023138:	f383 8811 	msr	BASEPRI, r3
 802313c:	f3bf 8f6f 	isb	sy
 8023140:	f3bf 8f4f 	dsb	sy
 8023144:	e7fe      	b.n	8023144 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8023146:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8023148:	4299      	cmp	r1, r3
 802314a:	bf38      	it	cc
 802314c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 802314e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8023150:	428b      	cmp	r3, r1
 8023152:	d02f      	beq.n	80231b4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8023154:	2a01      	cmp	r2, #1
 8023156:	d12d      	bne.n	80231b4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8023158:	4a17      	ldr	r2, [pc, #92]	@ (80231b8 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 802315a:	6812      	ldr	r2, [r2, #0]
 802315c:	4282      	cmp	r2, r0
 802315e:	d108      	bne.n	8023172 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8023160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023164:	f383 8811 	msr	BASEPRI, r3
 8023168:	f3bf 8f6f 	isb	sy
 802316c:	f3bf 8f4f 	dsb	sy
 8023170:	e7fe      	b.n	8023170 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8023172:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8023174:	4d11      	ldr	r5, [pc, #68]	@ (80231bc <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 8023176:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8023178:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 802317a:	f04f 0214 	mov.w	r2, #20
 802317e:	fb02 5303 	mla	r3, r2, r3, r5
 8023182:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8023184:	bfa4      	itt	ge
 8023186:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 802318a:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 802318c:	429a      	cmp	r2, r3
 802318e:	d111      	bne.n	80231b4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8023190:	1d06      	adds	r6, r0, #4
 8023192:	4630      	mov	r0, r6
 8023194:	f7fe fdd4 	bl	8021d40 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8023198:	4a09      	ldr	r2, [pc, #36]	@ (80231c0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 802319a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 802319c:	6811      	ldr	r1, [r2, #0]
 802319e:	2014      	movs	r0, #20
 80231a0:	428b      	cmp	r3, r1
 80231a2:	fb00 5003 	mla	r0, r0, r3, r5
 80231a6:	4631      	mov	r1, r6
	}
 80231a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80231ac:	bf88      	it	hi
 80231ae:	6013      	strhi	r3, [r2, #0]
 80231b0:	f7fe bda4 	b.w	8021cfc <vListInsertEnd>
	}
 80231b4:	bd70      	pop	{r4, r5, r6, pc}
 80231b6:	bf00      	nop
 80231b8:	20003c4c 	.word	0x20003c4c
 80231bc:	200037ec 	.word	0x200037ec
 80231c0:	20003770 	.word	0x20003770

080231c4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80231c4:	4b04      	ldr	r3, [pc, #16]	@ (80231d8 <pvTaskIncrementMutexHeldCount+0x14>)
 80231c6:	681a      	ldr	r2, [r3, #0]
 80231c8:	b11a      	cbz	r2, 80231d2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80231ca:	6819      	ldr	r1, [r3, #0]
 80231cc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80231ce:	3201      	adds	r2, #1
 80231d0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80231d2:	6818      	ldr	r0, [r3, #0]
	}
 80231d4:	4770      	bx	lr
 80231d6:	bf00      	nop
 80231d8:	20003c4c 	.word	0x20003c4c

080231dc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 80231dc:	4291      	cmp	r1, r2
{
 80231de:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80231e0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80231e2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80231e4:	d80a      	bhi.n	80231fc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80231e6:	1ad2      	subs	r2, r2, r3
 80231e8:	6983      	ldr	r3, [r0, #24]
 80231ea:	429a      	cmp	r2, r3
 80231ec:	d20d      	bcs.n	802320a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80231ee:	4b08      	ldr	r3, [pc, #32]	@ (8023210 <prvInsertTimerInActiveList+0x34>)
 80231f0:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80231f2:	6818      	ldr	r0, [r3, #0]
 80231f4:	f7fe fd8d 	bl	8021d12 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80231f8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80231fa:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80231fc:	429a      	cmp	r2, r3
 80231fe:	d201      	bcs.n	8023204 <prvInsertTimerInActiveList+0x28>
 8023200:	4299      	cmp	r1, r3
 8023202:	d202      	bcs.n	802320a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8023204:	4b03      	ldr	r3, [pc, #12]	@ (8023214 <prvInsertTimerInActiveList+0x38>)
 8023206:	1d01      	adds	r1, r0, #4
 8023208:	e7f3      	b.n	80231f2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 802320a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 802320c:	e7f5      	b.n	80231fa <prvInsertTimerInActiveList+0x1e>
 802320e:	bf00      	nop
 8023210:	20003d4c 	.word	0x20003d4c
 8023214:	20003d50 	.word	0x20003d50

08023218 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8023218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 802321a:	4c11      	ldr	r4, [pc, #68]	@ (8023260 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 802321c:	f000 fa32 	bl	8023684 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8023220:	6825      	ldr	r5, [r4, #0]
 8023222:	b9bd      	cbnz	r5, 8023254 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8023224:	4f0f      	ldr	r7, [pc, #60]	@ (8023264 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8023226:	4e10      	ldr	r6, [pc, #64]	@ (8023268 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8023228:	4638      	mov	r0, r7
 802322a:	f7fe fd59 	bl	8021ce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 802322e:	4630      	mov	r0, r6
 8023230:	f7fe fd56 	bl	8021ce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8023234:	4b0d      	ldr	r3, [pc, #52]	@ (802326c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8023236:	4a0e      	ldr	r2, [pc, #56]	@ (8023270 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8023238:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 802323a:	4b0e      	ldr	r3, [pc, #56]	@ (8023274 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 802323c:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 802323e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8023240:	200a      	movs	r0, #10
 8023242:	4b0d      	ldr	r3, [pc, #52]	@ (8023278 <prvCheckForValidListAndQueue+0x60>)
 8023244:	9500      	str	r5, [sp, #0]
 8023246:	f7fe fe54 	bl	8021ef2 <xQueueGenericCreateStatic>
 802324a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802324c:	b110      	cbz	r0, 8023254 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 802324e:	490b      	ldr	r1, [pc, #44]	@ (802327c <prvCheckForValidListAndQueue+0x64>)
 8023250:	f7ff fa0c 	bl	802266c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8023254:	b003      	add	sp, #12
 8023256:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 802325a:	f000 ba33 	b.w	80236c4 <vPortExitCritical>
 802325e:	bf00      	nop
 8023260:	20003d48 	.word	0x20003d48
 8023264:	20003d68 	.word	0x20003d68
 8023268:	20003d54 	.word	0x20003d54
 802326c:	20003d50 	.word	0x20003d50
 8023270:	20003ca0 	.word	0x20003ca0
 8023274:	20003d4c 	.word	0x20003d4c
 8023278:	20003c50 	.word	0x20003c50
 802327c:	0803f7a1 	.word	0x0803f7a1

08023280 <xTimerCreateTimerTask>:
{
 8023280:	b510      	push	{r4, lr}
 8023282:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8023284:	f7ff ffc8 	bl	8023218 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8023288:	4b12      	ldr	r3, [pc, #72]	@ (80232d4 <xTimerCreateTimerTask+0x54>)
 802328a:	681b      	ldr	r3, [r3, #0]
 802328c:	b1b3      	cbz	r3, 80232bc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 802328e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8023290:	aa07      	add	r2, sp, #28
 8023292:	a906      	add	r1, sp, #24
 8023294:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8023296:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 802329a:	f7fe fd15 	bl	8021cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 802329e:	9b05      	ldr	r3, [sp, #20]
 80232a0:	9302      	str	r3, [sp, #8]
 80232a2:	9b06      	ldr	r3, [sp, #24]
 80232a4:	9301      	str	r3, [sp, #4]
 80232a6:	2302      	movs	r3, #2
 80232a8:	9300      	str	r3, [sp, #0]
 80232aa:	9a07      	ldr	r2, [sp, #28]
 80232ac:	490a      	ldr	r1, [pc, #40]	@ (80232d8 <xTimerCreateTimerTask+0x58>)
 80232ae:	480b      	ldr	r0, [pc, #44]	@ (80232dc <xTimerCreateTimerTask+0x5c>)
 80232b0:	4623      	mov	r3, r4
 80232b2:	f7ff fbb1 	bl	8022a18 <xTaskCreateStatic>
 80232b6:	4b0a      	ldr	r3, [pc, #40]	@ (80232e0 <xTimerCreateTimerTask+0x60>)
 80232b8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80232ba:	b940      	cbnz	r0, 80232ce <xTimerCreateTimerTask+0x4e>
 80232bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80232c0:	f383 8811 	msr	BASEPRI, r3
 80232c4:	f3bf 8f6f 	isb	sy
 80232c8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80232cc:	e7fe      	b.n	80232cc <xTimerCreateTimerTask+0x4c>
}
 80232ce:	2001      	movs	r0, #1
 80232d0:	b008      	add	sp, #32
 80232d2:	bd10      	pop	{r4, pc}
 80232d4:	20003d48 	.word	0x20003d48
 80232d8:	0803f7a6 	.word	0x0803f7a6
 80232dc:	080233e1 	.word	0x080233e1
 80232e0:	20003d44 	.word	0x20003d44

080232e4 <xTimerGenericCommand>:
{
 80232e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80232e6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80232e8:	4604      	mov	r4, r0
{
 80232ea:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80232ec:	b940      	cbnz	r0, 8023300 <xTimerGenericCommand+0x1c>
 80232ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80232f2:	f383 8811 	msr	BASEPRI, r3
 80232f6:	f3bf 8f6f 	isb	sy
 80232fa:	f3bf 8f4f 	dsb	sy
 80232fe:	e7fe      	b.n	80232fe <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8023300:	4d0d      	ldr	r5, [pc, #52]	@ (8023338 <xTimerGenericCommand+0x54>)
 8023302:	6828      	ldr	r0, [r5, #0]
 8023304:	b180      	cbz	r0, 8023328 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8023306:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8023308:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802330c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802330e:	dc0d      	bgt.n	802332c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8023310:	f7ff fe7a 	bl	8023008 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8023314:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8023316:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8023318:	bf08      	it	eq
 802331a:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 802331c:	6828      	ldr	r0, [r5, #0]
 802331e:	bf18      	it	ne
 8023320:	461a      	movne	r2, r3
 8023322:	4669      	mov	r1, sp
 8023324:	f7fe fe9a 	bl	802205c <xQueueGenericSend>
}
 8023328:	b004      	add	sp, #16
 802332a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 802332c:	2300      	movs	r3, #0
 802332e:	4669      	mov	r1, sp
 8023330:	f7fe ff46 	bl	80221c0 <xQueueGenericSendFromISR>
 8023334:	e7f8      	b.n	8023328 <xTimerGenericCommand+0x44>
 8023336:	bf00      	nop
 8023338:	20003d48 	.word	0x20003d48

0802333c <prvSampleTimeNow>:
{
 802333c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8023340:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80233dc <prvSampleTimeNow+0xa0>
{
 8023344:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8023346:	f7ff fc25 	bl	8022b94 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 802334a:	f8d8 3000 	ldr.w	r3, [r8]
 802334e:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8023350:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8023352:	d909      	bls.n	8023368 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8023354:	4f1f      	ldr	r7, [pc, #124]	@ (80233d4 <prvSampleTimeNow+0x98>)
 8023356:	683b      	ldr	r3, [r7, #0]
 8023358:	681a      	ldr	r2, [r3, #0]
 802335a:	b96a      	cbnz	r2, 8023378 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 802335c:	4a1e      	ldr	r2, [pc, #120]	@ (80233d8 <prvSampleTimeNow+0x9c>)
 802335e:	6811      	ldr	r1, [r2, #0]
 8023360:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 8023362:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8023364:	2301      	movs	r3, #1
 8023366:	e000      	b.n	802336a <prvSampleTimeNow+0x2e>
 8023368:	2300      	movs	r3, #0
}
 802336a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 802336c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 802336e:	f8c8 5000 	str.w	r5, [r8]
}
 8023372:	b002      	add	sp, #8
 8023374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8023378:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802337a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802337c:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023380:	f104 0a04 	add.w	sl, r4, #4
 8023384:	4650      	mov	r0, sl
 8023386:	f7fe fcdb 	bl	8021d40 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802338a:	6a23      	ldr	r3, [r4, #32]
 802338c:	4620      	mov	r0, r4
 802338e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8023390:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8023394:	075b      	lsls	r3, r3, #29
 8023396:	d5de      	bpl.n	8023356 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8023398:	69a3      	ldr	r3, [r4, #24]
 802339a:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 802339c:	4599      	cmp	r9, r3
 802339e:	d206      	bcs.n	80233ae <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80233a0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80233a2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80233a4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80233a6:	4651      	mov	r1, sl
 80233a8:	f7fe fcb3 	bl	8021d12 <vListInsert>
 80233ac:	e7d3      	b.n	8023356 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80233ae:	2300      	movs	r3, #0
 80233b0:	9300      	str	r3, [sp, #0]
 80233b2:	464a      	mov	r2, r9
 80233b4:	4619      	mov	r1, r3
 80233b6:	4620      	mov	r0, r4
 80233b8:	f7ff ff94 	bl	80232e4 <xTimerGenericCommand>
				configASSERT( xResult );
 80233bc:	2800      	cmp	r0, #0
 80233be:	d1ca      	bne.n	8023356 <prvSampleTimeNow+0x1a>
 80233c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80233c4:	f383 8811 	msr	BASEPRI, r3
 80233c8:	f3bf 8f6f 	isb	sy
 80233cc:	f3bf 8f4f 	dsb	sy
 80233d0:	e7fe      	b.n	80233d0 <prvSampleTimeNow+0x94>
 80233d2:	bf00      	nop
 80233d4:	20003d50 	.word	0x20003d50
 80233d8:	20003d4c 	.word	0x20003d4c
 80233dc:	20003d40 	.word	0x20003d40

080233e0 <prvTimerTask>:
{
 80233e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80233e4:	4d6e      	ldr	r5, [pc, #440]	@ (80235a0 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80233e6:	4e6f      	ldr	r6, [pc, #444]	@ (80235a4 <prvTimerTask+0x1c4>)
{
 80233e8:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80233ea:	682b      	ldr	r3, [r5, #0]
 80233ec:	f8d3 8000 	ldr.w	r8, [r3]
 80233f0:	f1b8 0f00 	cmp.w	r8, #0
 80233f4:	d035      	beq.n	8023462 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80233f6:	68db      	ldr	r3, [r3, #12]
 80233f8:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80233fc:	2400      	movs	r4, #0
	vTaskSuspendAll();
 80233fe:	f7ff fbc1 	bl	8022b84 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8023402:	a804      	add	r0, sp, #16
 8023404:	f7ff ff9a 	bl	802333c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8023408:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802340a:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 802340c:	2b00      	cmp	r3, #0
 802340e:	d169      	bne.n	80234e4 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8023410:	2c00      	cmp	r4, #0
 8023412:	d14c      	bne.n	80234ae <prvTimerTask+0xce>
 8023414:	4540      	cmp	r0, r8
 8023416:	d350      	bcc.n	80234ba <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8023418:	f7ff fc58 	bl	8022ccc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802341c:	682b      	ldr	r3, [r5, #0]
 802341e:	68db      	ldr	r3, [r3, #12]
 8023420:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023422:	1d38      	adds	r0, r7, #4
 8023424:	f7fe fc8c 	bl	8021d40 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8023428:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 802342c:	0758      	lsls	r0, r3, #29
 802342e:	d51a      	bpl.n	8023466 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8023430:	69b9      	ldr	r1, [r7, #24]
 8023432:	4643      	mov	r3, r8
 8023434:	464a      	mov	r2, r9
 8023436:	4441      	add	r1, r8
 8023438:	4638      	mov	r0, r7
 802343a:	f7ff fecf 	bl	80231dc <prvInsertTimerInActiveList>
 802343e:	b1b0      	cbz	r0, 802346e <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8023440:	9400      	str	r4, [sp, #0]
 8023442:	4623      	mov	r3, r4
 8023444:	4642      	mov	r2, r8
 8023446:	4621      	mov	r1, r4
 8023448:	4638      	mov	r0, r7
 802344a:	f7ff ff4b 	bl	80232e4 <xTimerGenericCommand>
			configASSERT( xResult );
 802344e:	b970      	cbnz	r0, 802346e <prvTimerTask+0x8e>
 8023450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023454:	f383 8811 	msr	BASEPRI, r3
 8023458:	f3bf 8f6f 	isb	sy
 802345c:	f3bf 8f4f 	dsb	sy
 8023460:	e7fe      	b.n	8023460 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8023462:	2401      	movs	r4, #1
 8023464:	e7cb      	b.n	80233fe <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023466:	f023 0301 	bic.w	r3, r3, #1
 802346a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802346e:	6a3b      	ldr	r3, [r7, #32]
 8023470:	4638      	mov	r0, r7
 8023472:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8023474:	6830      	ldr	r0, [r6, #0]
 8023476:	2200      	movs	r2, #0
 8023478:	a904      	add	r1, sp, #16
 802347a:	f7fe ff4f 	bl	802231c <xQueueReceive>
 802347e:	2800      	cmp	r0, #0
 8023480:	d0b3      	beq.n	80233ea <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8023482:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8023484:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8023486:	2b00      	cmp	r3, #0
 8023488:	db2f      	blt.n	80234ea <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 802348a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802348c:	6963      	ldr	r3, [r4, #20]
 802348e:	2b00      	cmp	r3, #0
 8023490:	d132      	bne.n	80234f8 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8023492:	a803      	add	r0, sp, #12
 8023494:	f7ff ff52 	bl	802333c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8023498:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802349a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 802349c:	2b09      	cmp	r3, #9
 802349e:	d8e9      	bhi.n	8023474 <prvTimerTask+0x94>
 80234a0:	e8df f003 	tbb	[pc, r3]
 80234a4:	572e2e2e 	.word	0x572e2e2e
 80234a8:	2e2e765e 	.word	0x2e2e765e
 80234ac:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80234ae:	4b3e      	ldr	r3, [pc, #248]	@ (80235a8 <prvTimerTask+0x1c8>)
 80234b0:	681b      	ldr	r3, [r3, #0]
 80234b2:	681c      	ldr	r4, [r3, #0]
 80234b4:	fab4 f484 	clz	r4, r4
 80234b8:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80234ba:	6830      	ldr	r0, [r6, #0]
 80234bc:	4622      	mov	r2, r4
 80234be:	eba8 0109 	sub.w	r1, r8, r9
 80234c2:	f7ff f912 	bl	80226ea <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80234c6:	f7ff fc01 	bl	8022ccc <xTaskResumeAll>
 80234ca:	2800      	cmp	r0, #0
 80234cc:	d1d2      	bne.n	8023474 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 80234ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80234d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80234d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80234da:	f3bf 8f4f 	dsb	sy
 80234de:	f3bf 8f6f 	isb	sy
 80234e2:	e7c7      	b.n	8023474 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 80234e4:	f7ff fbf2 	bl	8022ccc <xTaskResumeAll>
}
 80234e8:	e7c4      	b.n	8023474 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80234ea:	9b05      	ldr	r3, [sp, #20]
 80234ec:	9907      	ldr	r1, [sp, #28]
 80234ee:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80234f0:	9b04      	ldr	r3, [sp, #16]
 80234f2:	2b00      	cmp	r3, #0
 80234f4:	dbbe      	blt.n	8023474 <prvTimerTask+0x94>
 80234f6:	e7c8      	b.n	802348a <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80234f8:	1d20      	adds	r0, r4, #4
 80234fa:	f7fe fc21 	bl	8021d40 <uxListRemove>
 80234fe:	e7c8      	b.n	8023492 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8023500:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8023504:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8023506:	f043 0301 	orr.w	r3, r3, #1
 802350a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 802350e:	9b05      	ldr	r3, [sp, #20]
 8023510:	4620      	mov	r0, r4
 8023512:	4419      	add	r1, r3
 8023514:	f7ff fe62 	bl	80231dc <prvInsertTimerInActiveList>
 8023518:	2800      	cmp	r0, #0
 802351a:	d0ab      	beq.n	8023474 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802351c:	6a23      	ldr	r3, [r4, #32]
 802351e:	4620      	mov	r0, r4
 8023520:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8023522:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8023526:	0759      	lsls	r1, r3, #29
 8023528:	d5a4      	bpl.n	8023474 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802352a:	69a2      	ldr	r2, [r4, #24]
 802352c:	9905      	ldr	r1, [sp, #20]
 802352e:	2300      	movs	r3, #0
 8023530:	440a      	add	r2, r1
 8023532:	9300      	str	r3, [sp, #0]
 8023534:	4619      	mov	r1, r3
 8023536:	4620      	mov	r0, r4
 8023538:	f7ff fed4 	bl	80232e4 <xTimerGenericCommand>
							configASSERT( xResult );
 802353c:	2800      	cmp	r0, #0
 802353e:	d199      	bne.n	8023474 <prvTimerTask+0x94>
 8023540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023544:	f383 8811 	msr	BASEPRI, r3
 8023548:	f3bf 8f6f 	isb	sy
 802354c:	f3bf 8f4f 	dsb	sy
 8023550:	e7fe      	b.n	8023550 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023552:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023556:	f023 0301 	bic.w	r3, r3, #1
 802355a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 802355e:	e789      	b.n	8023474 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8023560:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8023564:	f043 0301 	orr.w	r3, r3, #1
 8023568:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 802356c:	9905      	ldr	r1, [sp, #20]
 802356e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8023570:	b941      	cbnz	r1, 8023584 <prvTimerTask+0x1a4>
 8023572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023576:	f383 8811 	msr	BASEPRI, r3
 802357a:	f3bf 8f6f 	isb	sy
 802357e:	f3bf 8f4f 	dsb	sy
 8023582:	e7fe      	b.n	8023582 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8023584:	4603      	mov	r3, r0
 8023586:	4401      	add	r1, r0
 8023588:	4620      	mov	r0, r4
 802358a:	f7ff fe27 	bl	80231dc <prvInsertTimerInActiveList>
					break;
 802358e:	e771      	b.n	8023474 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8023590:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8023594:	079a      	lsls	r2, r3, #30
 8023596:	d4de      	bmi.n	8023556 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8023598:	4620      	mov	r0, r4
 802359a:	f000 fa71 	bl	8023a80 <vPortFree>
 802359e:	e769      	b.n	8023474 <prvTimerTask+0x94>
 80235a0:	20003d50 	.word	0x20003d50
 80235a4:	20003d48 	.word	0x20003d48
 80235a8:	20003d4c 	.word	0x20003d4c

080235ac <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80235ac:	4808      	ldr	r0, [pc, #32]	@ (80235d0 <prvPortStartFirstTask+0x24>)
 80235ae:	6800      	ldr	r0, [r0, #0]
 80235b0:	6800      	ldr	r0, [r0, #0]
 80235b2:	f380 8808 	msr	MSP, r0
 80235b6:	f04f 0000 	mov.w	r0, #0
 80235ba:	f380 8814 	msr	CONTROL, r0
 80235be:	b662      	cpsie	i
 80235c0:	b661      	cpsie	f
 80235c2:	f3bf 8f4f 	dsb	sy
 80235c6:	f3bf 8f6f 	isb	sy
 80235ca:	df00      	svc	0
 80235cc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80235ce:	0000      	.short	0x0000
 80235d0:	e000ed08 	.word	0xe000ed08

080235d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80235d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80235e4 <vPortEnableVFP+0x10>
 80235d8:	6801      	ldr	r1, [r0, #0]
 80235da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80235de:	6001      	str	r1, [r0, #0]
 80235e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80235e2:	0000      	.short	0x0000
 80235e4:	e000ed88 	.word	0xe000ed88

080235e8 <prvTaskExitError>:
{
 80235e8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80235ea:	2300      	movs	r3, #0
 80235ec:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80235ee:	4b0d      	ldr	r3, [pc, #52]	@ (8023624 <prvTaskExitError+0x3c>)
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	3301      	adds	r3, #1
 80235f4:	d008      	beq.n	8023608 <prvTaskExitError+0x20>
 80235f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80235fa:	f383 8811 	msr	BASEPRI, r3
 80235fe:	f3bf 8f6f 	isb	sy
 8023602:	f3bf 8f4f 	dsb	sy
 8023606:	e7fe      	b.n	8023606 <prvTaskExitError+0x1e>
 8023608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802360c:	f383 8811 	msr	BASEPRI, r3
 8023610:	f3bf 8f6f 	isb	sy
 8023614:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8023618:	9b01      	ldr	r3, [sp, #4]
 802361a:	2b00      	cmp	r3, #0
 802361c:	d0fc      	beq.n	8023618 <prvTaskExitError+0x30>
}
 802361e:	b002      	add	sp, #8
 8023620:	4770      	bx	lr
 8023622:	bf00      	nop
 8023624:	200004cc 	.word	0x200004cc

08023628 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8023628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 802362c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8023630:	4b07      	ldr	r3, [pc, #28]	@ (8023650 <pxPortInitialiseStack+0x28>)
 8023632:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8023636:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802363a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802363e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8023642:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8023646:	f840 3c24 	str.w	r3, [r0, #-36]
}
 802364a:	3844      	subs	r0, #68	@ 0x44
 802364c:	4770      	bx	lr
 802364e:	bf00      	nop
 8023650:	080235e9 	.word	0x080235e9
	...

08023660 <SVC_Handler>:
	__asm volatile (
 8023660:	4b07      	ldr	r3, [pc, #28]	@ (8023680 <pxCurrentTCBConst2>)
 8023662:	6819      	ldr	r1, [r3, #0]
 8023664:	6808      	ldr	r0, [r1, #0]
 8023666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802366a:	f380 8809 	msr	PSP, r0
 802366e:	f3bf 8f6f 	isb	sy
 8023672:	f04f 0000 	mov.w	r0, #0
 8023676:	f380 8811 	msr	BASEPRI, r0
 802367a:	4770      	bx	lr
 802367c:	f3af 8000 	nop.w

08023680 <pxCurrentTCBConst2>:
 8023680:	20003c4c 	.word	0x20003c4c

08023684 <vPortEnterCritical>:
 8023684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023688:	f383 8811 	msr	BASEPRI, r3
 802368c:	f3bf 8f6f 	isb	sy
 8023690:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8023694:	4a0a      	ldr	r2, [pc, #40]	@ (80236c0 <vPortEnterCritical+0x3c>)
 8023696:	6813      	ldr	r3, [r2, #0]
 8023698:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 802369a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 802369c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 802369e:	d10e      	bne.n	80236be <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80236a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80236a4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80236a8:	b2db      	uxtb	r3, r3
 80236aa:	b143      	cbz	r3, 80236be <vPortEnterCritical+0x3a>
 80236ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80236b0:	f383 8811 	msr	BASEPRI, r3
 80236b4:	f3bf 8f6f 	isb	sy
 80236b8:	f3bf 8f4f 	dsb	sy
 80236bc:	e7fe      	b.n	80236bc <vPortEnterCritical+0x38>
}
 80236be:	4770      	bx	lr
 80236c0:	200004cc 	.word	0x200004cc

080236c4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80236c4:	4a08      	ldr	r2, [pc, #32]	@ (80236e8 <vPortExitCritical+0x24>)
 80236c6:	6813      	ldr	r3, [r2, #0]
 80236c8:	b943      	cbnz	r3, 80236dc <vPortExitCritical+0x18>
 80236ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80236ce:	f383 8811 	msr	BASEPRI, r3
 80236d2:	f3bf 8f6f 	isb	sy
 80236d6:	f3bf 8f4f 	dsb	sy
 80236da:	e7fe      	b.n	80236da <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80236dc:	3b01      	subs	r3, #1
 80236de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80236e0:	b90b      	cbnz	r3, 80236e6 <vPortExitCritical+0x22>
	__asm volatile
 80236e2:	f383 8811 	msr	BASEPRI, r3
}
 80236e6:	4770      	bx	lr
 80236e8:	200004cc 	.word	0x200004cc
 80236ec:	00000000 	.word	0x00000000

080236f0 <PendSV_Handler>:
	__asm volatile
 80236f0:	f3ef 8009 	mrs	r0, PSP
 80236f4:	f3bf 8f6f 	isb	sy
 80236f8:	4b15      	ldr	r3, [pc, #84]	@ (8023750 <pxCurrentTCBConst>)
 80236fa:	681a      	ldr	r2, [r3, #0]
 80236fc:	f01e 0f10 	tst.w	lr, #16
 8023700:	bf08      	it	eq
 8023702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802370a:	6010      	str	r0, [r2, #0]
 802370c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8023714:	f380 8811 	msr	BASEPRI, r0
 8023718:	f3bf 8f4f 	dsb	sy
 802371c:	f3bf 8f6f 	isb	sy
 8023720:	f7ff fb6c 	bl	8022dfc <vTaskSwitchContext>
 8023724:	f04f 0000 	mov.w	r0, #0
 8023728:	f380 8811 	msr	BASEPRI, r0
 802372c:	bc09      	pop	{r0, r3}
 802372e:	6819      	ldr	r1, [r3, #0]
 8023730:	6808      	ldr	r0, [r1, #0]
 8023732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023736:	f01e 0f10 	tst.w	lr, #16
 802373a:	bf08      	it	eq
 802373c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8023740:	f380 8809 	msr	PSP, r0
 8023744:	f3bf 8f6f 	isb	sy
 8023748:	4770      	bx	lr
 802374a:	bf00      	nop
 802374c:	f3af 8000 	nop.w

08023750 <pxCurrentTCBConst>:
 8023750:	20003c4c 	.word	0x20003c4c

08023754 <xPortSysTickHandler>:
{
 8023754:	b508      	push	{r3, lr}
	__asm volatile
 8023756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802375a:	f383 8811 	msr	BASEPRI, r3
 802375e:	f3bf 8f6f 	isb	sy
 8023762:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8023766:	f7ff fa1b 	bl	8022ba0 <xTaskIncrementTick>
 802376a:	b128      	cbz	r0, 8023778 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 802376c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8023770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8023774:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8023778:	2300      	movs	r3, #0
 802377a:	f383 8811 	msr	BASEPRI, r3
}
 802377e:	bd08      	pop	{r3, pc}

08023780 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8023780:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8023784:	2300      	movs	r3, #0
 8023786:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8023788:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802378a:	4b05      	ldr	r3, [pc, #20]	@ (80237a0 <vPortSetupTimerInterrupt+0x20>)
 802378c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8023790:	681b      	ldr	r3, [r3, #0]
 8023792:	fbb3 f3f1 	udiv	r3, r3, r1
 8023796:	3b01      	subs	r3, #1
 8023798:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802379a:	2307      	movs	r3, #7
 802379c:	6113      	str	r3, [r2, #16]
}
 802379e:	4770      	bx	lr
 80237a0:	20000424 	.word	0x20000424

080237a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80237a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 80237a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80237aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 80237ae:	4a38      	ldr	r2, [pc, #224]	@ (8023890 <xPortStartScheduler+0xec>)
 80237b0:	4291      	cmp	r1, r2
 80237b2:	d108      	bne.n	80237c6 <xPortStartScheduler+0x22>
	__asm volatile
 80237b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80237b8:	f383 8811 	msr	BASEPRI, r3
 80237bc:	f3bf 8f6f 	isb	sy
 80237c0:	f3bf 8f4f 	dsb	sy
 80237c4:	e7fe      	b.n	80237c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80237c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80237ca:	4b32      	ldr	r3, [pc, #200]	@ (8023894 <xPortStartScheduler+0xf0>)
 80237cc:	429a      	cmp	r2, r3
 80237ce:	d108      	bne.n	80237e2 <xPortStartScheduler+0x3e>
 80237d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80237d4:	f383 8811 	msr	BASEPRI, r3
 80237d8:	f3bf 8f6f 	isb	sy
 80237dc:	f3bf 8f4f 	dsb	sy
 80237e0:	e7fe      	b.n	80237e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80237e2:	4b2d      	ldr	r3, [pc, #180]	@ (8023898 <xPortStartScheduler+0xf4>)
 80237e4:	781a      	ldrb	r2, [r3, #0]
 80237e6:	b2d2      	uxtb	r2, r2
 80237e8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80237ea:	22ff      	movs	r2, #255	@ 0xff
 80237ec:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80237ee:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80237f0:	4a2a      	ldr	r2, [pc, #168]	@ (802389c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80237f2:	b2db      	uxtb	r3, r3
 80237f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80237f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80237fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8023800:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8023802:	4a27      	ldr	r2, [pc, #156]	@ (80238a0 <xPortStartScheduler+0xfc>)
 8023804:	2307      	movs	r3, #7
 8023806:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8023808:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 802380c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 802380e:	0609      	lsls	r1, r1, #24
 8023810:	d40a      	bmi.n	8023828 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8023812:	2b03      	cmp	r3, #3
 8023814:	d011      	beq.n	802383a <xPortStartScheduler+0x96>
 8023816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802381a:	f383 8811 	msr	BASEPRI, r3
 802381e:	f3bf 8f6f 	isb	sy
 8023822:	f3bf 8f4f 	dsb	sy
 8023826:	e7fe      	b.n	8023826 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 8023828:	3b01      	subs	r3, #1
 802382a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 802382c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8023830:	005b      	lsls	r3, r3, #1
 8023832:	b2db      	uxtb	r3, r3
 8023834:	f88d 3003 	strb.w	r3, [sp, #3]
 8023838:	e7e6      	b.n	8023808 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802383a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 802383e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8023840:	9b01      	ldr	r3, [sp, #4]
 8023842:	4a15      	ldr	r2, [pc, #84]	@ (8023898 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8023844:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8023848:	b2db      	uxtb	r3, r3
 802384a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802384c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8023850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8023854:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8023858:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 802385c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8023860:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8023864:	f7ff ff8c 	bl	8023780 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8023868:	4b0e      	ldr	r3, [pc, #56]	@ (80238a4 <xPortStartScheduler+0x100>)
 802386a:	2500      	movs	r5, #0
 802386c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 802386e:	f7ff feb1 	bl	80235d4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8023872:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8023876:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 802387a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 802387e:	f7ff fe95 	bl	80235ac <prvPortStartFirstTask>
	vTaskSwitchContext();
 8023882:	f7ff fabb 	bl	8022dfc <vTaskSwitchContext>
	prvTaskExitError();
 8023886:	f7ff feaf 	bl	80235e8 <prvTaskExitError>
}
 802388a:	4628      	mov	r0, r5
 802388c:	b003      	add	sp, #12
 802388e:	bd30      	pop	{r4, r5, pc}
 8023890:	410fc271 	.word	0x410fc271
 8023894:	410fc270 	.word	0x410fc270
 8023898:	e000e400 	.word	0xe000e400
 802389c:	20003d80 	.word	0x20003d80
 80238a0:	20003d7c 	.word	0x20003d7c
 80238a4:	200004cc 	.word	0x200004cc

080238a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80238a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80238ac:	2b0f      	cmp	r3, #15
 80238ae:	d90e      	bls.n	80238ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80238b0:	4a11      	ldr	r2, [pc, #68]	@ (80238f8 <vPortValidateInterruptPriority+0x50>)
 80238b2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80238b4:	4a11      	ldr	r2, [pc, #68]	@ (80238fc <vPortValidateInterruptPriority+0x54>)
 80238b6:	7812      	ldrb	r2, [r2, #0]
 80238b8:	429a      	cmp	r2, r3
 80238ba:	d908      	bls.n	80238ce <vPortValidateInterruptPriority+0x26>
 80238bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80238c0:	f383 8811 	msr	BASEPRI, r3
 80238c4:	f3bf 8f6f 	isb	sy
 80238c8:	f3bf 8f4f 	dsb	sy
 80238cc:	e7fe      	b.n	80238cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80238ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80238d2:	4a0b      	ldr	r2, [pc, #44]	@ (8023900 <vPortValidateInterruptPriority+0x58>)
 80238d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80238d8:	6812      	ldr	r2, [r2, #0]
 80238da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80238de:	4293      	cmp	r3, r2
 80238e0:	d908      	bls.n	80238f4 <vPortValidateInterruptPriority+0x4c>
 80238e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80238e6:	f383 8811 	msr	BASEPRI, r3
 80238ea:	f3bf 8f6f 	isb	sy
 80238ee:	f3bf 8f4f 	dsb	sy
 80238f2:	e7fe      	b.n	80238f2 <vPortValidateInterruptPriority+0x4a>
	}
 80238f4:	4770      	bx	lr
 80238f6:	bf00      	nop
 80238f8:	e000e3f0 	.word	0xe000e3f0
 80238fc:	20003d80 	.word	0x20003d80
 8023900:	20003d7c 	.word	0x20003d7c

08023904 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8023904:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8023906:	4b10      	ldr	r3, [pc, #64]	@ (8023948 <prvInsertBlockIntoFreeList+0x44>)
 8023908:	461a      	mov	r2, r3
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	4283      	cmp	r3, r0
 802390e:	d3fb      	bcc.n	8023908 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8023910:	6854      	ldr	r4, [r2, #4]
 8023912:	1911      	adds	r1, r2, r4
 8023914:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8023916:	bf01      	itttt	eq
 8023918:	6841      	ldreq	r1, [r0, #4]
		pxBlockToInsert = pxIterator;
 802391a:	4610      	moveq	r0, r2
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 802391c:	1909      	addeq	r1, r1, r4
 802391e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8023920:	6844      	ldr	r4, [r0, #4]
 8023922:	1901      	adds	r1, r0, r4
 8023924:	428b      	cmp	r3, r1
 8023926:	d10c      	bne.n	8023942 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8023928:	4908      	ldr	r1, [pc, #32]	@ (802394c <prvInsertBlockIntoFreeList+0x48>)
 802392a:	6809      	ldr	r1, [r1, #0]
 802392c:	428b      	cmp	r3, r1
 802392e:	d003      	beq.n	8023938 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8023930:	6859      	ldr	r1, [r3, #4]
 8023932:	4421      	add	r1, r4
 8023934:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8023936:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8023938:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 802393a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 802393c:	bf18      	it	ne
 802393e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8023940:	bd10      	pop	{r4, pc}
 8023942:	4619      	mov	r1, r3
 8023944:	e7f8      	b.n	8023938 <prvInsertBlockIntoFreeList+0x34>
 8023946:	bf00      	nop
 8023948:	20003d9c 	.word	0x20003d9c
 802394c:	20003d98 	.word	0x20003d98

08023950 <pvPortMalloc>:
{
 8023950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023954:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8023956:	f7ff f915 	bl	8022b84 <vTaskSuspendAll>
		if( pxEnd == NULL )
 802395a:	4942      	ldr	r1, [pc, #264]	@ (8023a64 <pvPortMalloc+0x114>)
 802395c:	4d42      	ldr	r5, [pc, #264]	@ (8023a68 <pvPortMalloc+0x118>)
 802395e:	680b      	ldr	r3, [r1, #0]
 8023960:	bb0b      	cbnz	r3, 80239a6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8023962:	4a42      	ldr	r2, [pc, #264]	@ (8023a6c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8023964:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8023966:	bf1f      	itttt	ne
 8023968:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802396a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 802396e:	f502 4280 	addne.w	r2, r2, #16384	@ 0x4000
 8023972:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8023974:	bf0c      	ite	eq
 8023976:	f44f 4380 	moveq.w	r3, #16384	@ 0x4000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 802397a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 802397c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802397e:	4e3c      	ldr	r6, [pc, #240]	@ (8023a70 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8023980:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8023982:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8023986:	2000      	movs	r0, #0
 8023988:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 802398a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 802398c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8023990:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8023992:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8023996:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8023998:	4b36      	ldr	r3, [pc, #216]	@ (8023a74 <pvPortMalloc+0x124>)
 802399a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 802399c:	4b36      	ldr	r3, [pc, #216]	@ (8023a78 <pvPortMalloc+0x128>)
 802399e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80239a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80239a4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80239a6:	682e      	ldr	r6, [r5, #0]
 80239a8:	4226      	tst	r6, r4
 80239aa:	d155      	bne.n	8023a58 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 80239ac:	2c00      	cmp	r4, #0
 80239ae:	d046      	beq.n	8023a3e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 80239b0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80239b4:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80239b6:	bf1c      	itt	ne
 80239b8:	f023 0307 	bicne.w	r3, r3, #7
 80239bc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80239be:	2b00      	cmp	r3, #0
 80239c0:	d04a      	beq.n	8023a58 <pvPortMalloc+0x108>
 80239c2:	4f2d      	ldr	r7, [pc, #180]	@ (8023a78 <pvPortMalloc+0x128>)
 80239c4:	683c      	ldr	r4, [r7, #0]
 80239c6:	429c      	cmp	r4, r3
 80239c8:	d346      	bcc.n	8023a58 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 80239ca:	4a29      	ldr	r2, [pc, #164]	@ (8023a70 <pvPortMalloc+0x120>)
 80239cc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80239ce:	6868      	ldr	r0, [r5, #4]
 80239d0:	4298      	cmp	r0, r3
 80239d2:	d204      	bcs.n	80239de <pvPortMalloc+0x8e>
 80239d4:	f8d5 c000 	ldr.w	ip, [r5]
 80239d8:	f1bc 0f00 	cmp.w	ip, #0
 80239dc:	d115      	bne.n	8023a0a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80239de:	6809      	ldr	r1, [r1, #0]
 80239e0:	42a9      	cmp	r1, r5
 80239e2:	d039      	beq.n	8023a58 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80239e4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80239e6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80239ea:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80239ec:	1ac2      	subs	r2, r0, r3
 80239ee:	2a10      	cmp	r2, #16
 80239f0:	d912      	bls.n	8023a18 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80239f2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80239f4:	0741      	lsls	r1, r0, #29
 80239f6:	d00b      	beq.n	8023a10 <pvPortMalloc+0xc0>
 80239f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80239fc:	f383 8811 	msr	BASEPRI, r3
 8023a00:	f3bf 8f6f 	isb	sy
 8023a04:	f3bf 8f4f 	dsb	sy
 8023a08:	e7fe      	b.n	8023a08 <pvPortMalloc+0xb8>
					pxPreviousBlock = pxBlock;
 8023a0a:	462a      	mov	r2, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8023a0c:	4665      	mov	r5, ip
 8023a0e:	e7de      	b.n	80239ce <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8023a10:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8023a12:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8023a14:	f7ff ff76 	bl	8023904 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8023a18:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8023a1a:	4916      	ldr	r1, [pc, #88]	@ (8023a74 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8023a1c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8023a1e:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8023a20:	4a16      	ldr	r2, [pc, #88]	@ (8023a7c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8023a22:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8023a24:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8023a26:	2300      	movs	r3, #0
 8023a28:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8023a2a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8023a2c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8023a2e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8023a30:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8023a34:	bf38      	it	cc
 8023a36:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8023a38:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8023a3a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8023a3e:	f7ff f945 	bl	8022ccc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8023a42:	0763      	lsls	r3, r4, #29
 8023a44:	d00a      	beq.n	8023a5c <pvPortMalloc+0x10c>
 8023a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023a4a:	f383 8811 	msr	BASEPRI, r3
 8023a4e:	f3bf 8f6f 	isb	sy
 8023a52:	f3bf 8f4f 	dsb	sy
 8023a56:	e7fe      	b.n	8023a56 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8023a58:	2400      	movs	r4, #0
 8023a5a:	e7f0      	b.n	8023a3e <pvPortMalloc+0xee>
}
 8023a5c:	4620      	mov	r0, r4
 8023a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a62:	bf00      	nop
 8023a64:	20003d98 	.word	0x20003d98
 8023a68:	20003d84 	.word	0x20003d84
 8023a6c:	20003da4 	.word	0x20003da4
 8023a70:	20003d9c 	.word	0x20003d9c
 8023a74:	20003d90 	.word	0x20003d90
 8023a78:	20003d94 	.word	0x20003d94
 8023a7c:	20003d8c 	.word	0x20003d8c

08023a80 <vPortFree>:
{
 8023a80:	b510      	push	{r4, lr}
	if( pv != NULL )
 8023a82:	4604      	mov	r4, r0
 8023a84:	b390      	cbz	r0, 8023aec <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8023a86:	4a1a      	ldr	r2, [pc, #104]	@ (8023af0 <vPortFree+0x70>)
 8023a88:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8023a8c:	6812      	ldr	r2, [r2, #0]
 8023a8e:	4213      	tst	r3, r2
 8023a90:	d108      	bne.n	8023aa4 <vPortFree+0x24>
 8023a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023a96:	f383 8811 	msr	BASEPRI, r3
 8023a9a:	f3bf 8f6f 	isb	sy
 8023a9e:	f3bf 8f4f 	dsb	sy
 8023aa2:	e7fe      	b.n	8023aa2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8023aa4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8023aa8:	b141      	cbz	r1, 8023abc <vPortFree+0x3c>
 8023aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023aae:	f383 8811 	msr	BASEPRI, r3
 8023ab2:	f3bf 8f6f 	isb	sy
 8023ab6:	f3bf 8f4f 	dsb	sy
 8023aba:	e7fe      	b.n	8023aba <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8023abc:	ea23 0302 	bic.w	r3, r3, r2
 8023ac0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8023ac4:	f7ff f85e 	bl	8022b84 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8023ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8023af4 <vPortFree+0x74>)
 8023aca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8023ace:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8023ad0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8023ad4:	440b      	add	r3, r1
 8023ad6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8023ad8:	f7ff ff14 	bl	8023904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8023adc:	4a06      	ldr	r2, [pc, #24]	@ (8023af8 <vPortFree+0x78>)
 8023ade:	6813      	ldr	r3, [r2, #0]
}
 8023ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8023ae4:	3301      	adds	r3, #1
 8023ae6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8023ae8:	f7ff b8f0 	b.w	8022ccc <xTaskResumeAll>
}
 8023aec:	bd10      	pop	{r4, pc}
 8023aee:	bf00      	nop
 8023af0:	20003d84 	.word	0x20003d84
 8023af4:	20003d94 	.word	0x20003d94
 8023af8:	20003d88 	.word	0x20003d88

08023afc <lfs_pair_isnull>:
    pair[0] = pair[1];
    pair[1] = t;
}

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8023afc:	6803      	ldr	r3, [r0, #0]
 8023afe:	3301      	adds	r3, #1
 8023b00:	d004      	beq.n	8023b0c <lfs_pair_isnull+0x10>
 8023b02:	6840      	ldr	r0, [r0, #4]
 8023b04:	1c43      	adds	r3, r0, #1
 8023b06:	4258      	negs	r0, r3
 8023b08:	4158      	adcs	r0, r3
 8023b0a:	4770      	bx	lr
 8023b0c:	2001      	movs	r0, #1
}
 8023b0e:	4770      	bx	lr

08023b10 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023b10:	b510      	push	{r4, lr}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023b12:	680b      	ldr	r3, [r1, #0]
 8023b14:	6804      	ldr	r4, [r0, #0]
 8023b16:	429c      	cmp	r4, r3
 8023b18:	d009      	beq.n	8023b2e <lfs_pair_cmp+0x1e>
 8023b1a:	6840      	ldr	r0, [r0, #4]
 8023b1c:	6849      	ldr	r1, [r1, #4]
 8023b1e:	4288      	cmp	r0, r1
 8023b20:	d005      	beq.n	8023b2e <lfs_pair_cmp+0x1e>
 8023b22:	428c      	cmp	r4, r1
 8023b24:	d003      	beq.n	8023b2e <lfs_pair_cmp+0x1e>
 8023b26:	1a18      	subs	r0, r3, r0
 8023b28:	bf18      	it	ne
 8023b2a:	2001      	movne	r0, #1
             paira[0] == pairb[1] || paira[1] == pairb[0]);
}
 8023b2c:	bd10      	pop	{r4, pc}
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023b2e:	2000      	movs	r0, #0
 8023b30:	e7fc      	b.n	8023b2c <lfs_pair_cmp+0x1c>

08023b32 <lfs_pair_issync>:

static inline bool lfs_pair_issync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023b32:	e9d1 3200 	ldrd	r3, r2, [r1]
        const lfs_block_t pairb[2]) {
 8023b36:	b510      	push	{r4, lr}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023b38:	6804      	ldr	r4, [r0, #0]
 8023b3a:	429c      	cmp	r4, r3
 8023b3c:	d102      	bne.n	8023b44 <lfs_pair_issync+0x12>
 8023b3e:	6841      	ldr	r1, [r0, #4]
 8023b40:	4291      	cmp	r1, r2
 8023b42:	d006      	beq.n	8023b52 <lfs_pair_issync+0x20>
 8023b44:	4294      	cmp	r4, r2
 8023b46:	d106      	bne.n	8023b56 <lfs_pair_issync+0x24>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023b48:	6840      	ldr	r0, [r0, #4]
 8023b4a:	1ac3      	subs	r3, r0, r3
 8023b4c:	4258      	negs	r0, r3
 8023b4e:	4158      	adcs	r0, r3
}
 8023b50:	bd10      	pop	{r4, pc}
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023b52:	2001      	movs	r0, #1
 8023b54:	e7fc      	b.n	8023b50 <lfs_pair_issync+0x1e>
 8023b56:	2000      	movs	r0, #0
 8023b58:	e7fa      	b.n	8023b50 <lfs_pair_issync+0x1e>

08023b5a <lfs_tag_dsize>:
static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
    return !(tag & 0x80000000);
}

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
    return ((int32_t)(tag << 22) >> 22) == -1;
 8023b5a:	f340 0309 	sbfx	r3, r0, #0, #10
static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
    return tag & 0x000003ff;
}

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8023b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023b62:	bf08      	it	eq
 8023b64:	3001      	addeq	r0, #1
    return tag & 0x000003ff;
 8023b66:	f3c0 0009 	ubfx	r0, r0, #0, #10
}
 8023b6a:	3004      	adds	r0, #4
 8023b6c:	4770      	bx	lr

08023b6e <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8023b6e:	b510      	push	{r4, lr}
 8023b70:	1f03      	subs	r3, r0, #4
 8023b72:	3904      	subs	r1, #4
 8023b74:	3008      	adds	r0, #8
    for (int i = 0; i < 3; i++) {
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8023b76:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8023b7a:	f851 4f04 	ldr.w	r4, [r1, #4]!
    for (int i = 0; i < 3; i++) {
 8023b7e:	4283      	cmp	r3, r0
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8023b80:	ea82 0204 	eor.w	r2, r2, r4
 8023b84:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8023b86:	d1f6      	bne.n	8023b76 <lfs_gstate_xor+0x8>
    }
}
 8023b88:	bd10      	pop	{r4, pc}

08023b8a <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8023b8a:	4603      	mov	r3, r0
    for (int i = 0; i < 3; i++) {
        if (((uint32_t*)a)[i] != 0) {
 8023b8c:	6800      	ldr	r0, [r0, #0]
 8023b8e:	b930      	cbnz	r0, 8023b9e <lfs_gstate_iszero+0x14>
 8023b90:	685a      	ldr	r2, [r3, #4]
 8023b92:	b92a      	cbnz	r2, 8023ba0 <lfs_gstate_iszero+0x16>
 8023b94:	6898      	ldr	r0, [r3, #8]
 8023b96:	fab0 f080 	clz	r0, r0
 8023b9a:	0940      	lsrs	r0, r0, #5
 8023b9c:	4770      	bx	lr
            return false;
 8023b9e:	2000      	movs	r0, #0
        }
    }
    return true;
}
 8023ba0:	4770      	bx	lr

08023ba2 <lfs_gstate_hasmovehere>:
static inline bool lfs_gstate_needssuperblock(const lfs_gstate_t *a) {
    return lfs_tag_size(a->tag) >> 9;
}

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8023ba2:	b508      	push	{r3, lr}
    return (tag & 0x70000000) >> 20;
 8023ba4:	6803      	ldr	r3, [r0, #0]
 8023ba6:	0d1b      	lsrs	r3, r3, #20
        const lfs_block_t *pair) {
 8023ba8:	4602      	mov	r2, r0
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8023baa:	f413 60e0 	ands.w	r0, r3, #1792	@ 0x700
 8023bae:	d005      	beq.n	8023bbc <lfs_gstate_hasmovehere+0x1a>
 8023bb0:	1d10      	adds	r0, r2, #4
 8023bb2:	f7ff ffad 	bl	8023b10 <lfs_pair_cmp>
 8023bb6:	fab0 f080 	clz	r0, r0
 8023bba:	0940      	lsrs	r0, r0, #5
}
 8023bbc:	bd08      	pop	{r3, pc}

08023bbe <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8023bbe:	b900      	cbnz	r0, 8023bc2 <lfs_mlist_isopen+0x4>
 8023bc0:	4770      	bx	lr
        if (*p == (struct lfs_mlist*)node) {
 8023bc2:	4288      	cmp	r0, r1
 8023bc4:	d001      	beq.n	8023bca <lfs_mlist_isopen+0xc>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8023bc6:	6800      	ldr	r0, [r0, #0]
 8023bc8:	e7f9      	b.n	8023bbe <lfs_mlist_isopen>
            return true;
 8023bca:	2001      	movs	r0, #1
        }
    }

    return false;
}
 8023bcc:	4770      	bx	lr

08023bce <lfs_alloc_lookahead>:

#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
    lfs_t *lfs = (lfs_t*)p;
    lfs_block_t off = ((block - lfs->lookahead.start)
            + lfs->block_count) % lfs->block_count;
 8023bce:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8023bd0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8023bd2:	4419      	add	r1, r3
 8023bd4:	1a89      	subs	r1, r1, r2
    lfs_block_t off = ((block - lfs->lookahead.start)
 8023bd6:	fbb1 f2f3 	udiv	r2, r1, r3
 8023bda:	fb03 1112 	mls	r1, r3, r2, r1

    if (off < lfs->lookahead.size) {
 8023bde:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8023be0:	428b      	cmp	r3, r1
 8023be2:	d908      	bls.n	8023bf6 <lfs_alloc_lookahead+0x28>
        lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);
 8023be4:	08ca      	lsrs	r2, r1, #3
 8023be6:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8023be8:	f001 0107 	and.w	r1, r1, #7
 8023bec:	2301      	movs	r3, #1
 8023bee:	408b      	lsls	r3, r1
 8023bf0:	5c81      	ldrb	r1, [r0, r2]
 8023bf2:	430b      	orrs	r3, r1
 8023bf4:	5483      	strb	r3, [r0, r2]
    }

    return 0;
}
 8023bf6:	2000      	movs	r0, #0
 8023bf8:	4770      	bx	lr
	...

08023bfc <lfs_dir_traverse_filter>:
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8023bfc:	4a18      	ldr	r2, [pc, #96]	@ (8023c60 <lfs_dir_traverse_filter+0x64>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8023bfe:	6803      	ldr	r3, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 8023c00:	b530      	push	{r4, r5, lr}
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8023c02:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8023c06:	4c17      	ldr	r4, [pc, #92]	@ (8023c64 <lfs_dir_traverse_filter+0x68>)
    if ((mask & tag) == (mask & *filtertag) ||
 8023c08:	ea83 0501 	eor.w	r5, r3, r1
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8023c0c:	bf18      	it	ne
 8023c0e:	4614      	movne	r4, r2
    if ((mask & tag) == (mask & *filtertag) ||
 8023c10:	4225      	tst	r5, r4
 8023c12:	d00d      	beq.n	8023c30 <lfs_dir_traverse_filter+0x34>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8023c14:	f343 0409 	sbfx	r4, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
 8023c18:	3401      	adds	r4, #1
 8023c1a:	d009      	beq.n	8023c30 <lfs_dir_traverse_filter+0x34>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8023c1c:	ea01 0402 	and.w	r4, r1, r2
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8023c20:	4a11      	ldr	r2, [pc, #68]	@ (8023c68 <lfs_dir_traverse_filter+0x6c>)
 8023c22:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8023c24:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 8023c28:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8023c2c:	4294      	cmp	r4, r2
 8023c2e:	d103      	bne.n	8023c38 <lfs_dir_traverse_filter+0x3c>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8023c30:	2300      	movs	r3, #0
 8023c32:	6003      	str	r3, [r0, #0]
        return true;
 8023c34:	2001      	movs	r0, #1
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
}
 8023c36:	bd30      	pop	{r4, r5, pc}
    return (tag & 0x70000000) >> 20;
 8023c38:	0d0a      	lsrs	r2, r1, #20
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8023c3a:	f402 64e0 	and.w	r4, r2, #1792	@ 0x700
 8023c3e:	f5b4 6f80 	cmp.w	r4, #1024	@ 0x400
 8023c42:	d105      	bne.n	8023c50 <lfs_dir_traverse_filter+0x54>
 8023c44:	f3c3 2489 	ubfx	r4, r3, #10, #10
 8023c48:	f3c1 2189 	ubfx	r1, r1, #10, #10
 8023c4c:	428c      	cmp	r4, r1
 8023c4e:	d201      	bcs.n	8023c54 <lfs_dir_traverse_filter+0x58>
    return false;
 8023c50:	2000      	movs	r0, #0
 8023c52:	e7f0      	b.n	8023c36 <lfs_dir_traverse_filter+0x3a>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8023c54:	b252      	sxtb	r2, r2
 8023c56:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8023c5a:	6003      	str	r3, [r0, #0]
 8023c5c:	e7f8      	b.n	8023c50 <lfs_dir_traverse_filter+0x54>
 8023c5e:	bf00      	nop
 8023c60:	7ffffc00 	.word	0x7ffffc00
 8023c64:	700ffc00 	.word	0x700ffc00
 8023c68:	000ffc00 	.word	0x000ffc00

08023c6c <lfs_dir_commit_size>:
    return 0;
}
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8023c6c:	b508      	push	{r3, lr}
 8023c6e:	4602      	mov	r2, r0
    lfs_size_t *size = p;
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8023c70:	4608      	mov	r0, r1
 8023c72:	f7ff ff72 	bl	8023b5a <lfs_tag_dsize>
 8023c76:	6813      	ldr	r3, [r2, #0]
 8023c78:	4403      	add	r3, r0
 8023c7a:	6013      	str	r3, [r2, #0]
    return 0;
}
 8023c7c:	2000      	movs	r0, #0
 8023c7e:	bd08      	pop	{r3, pc}

08023c80 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
    (void)block;
    lfs_size_t *size = p;
    *size += 1;
 8023c80:	6803      	ldr	r3, [r0, #0]
 8023c82:	3301      	adds	r3, #1
 8023c84:	6003      	str	r3, [r0, #0]
    return 0;
}
 8023c86:	2000      	movs	r0, #0
 8023c88:	4770      	bx	lr
	...

08023c8c <lfs_fs_preporphans>:
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8023c8c:	b508      	push	{r3, lr}
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8023c8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    return tag & 0x000003ff;
 8023c90:	f3c3 0209 	ubfx	r2, r3, #0, #10
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0x000 || orphans >= 0);
 8023c94:	b942      	cbnz	r2, 8023ca8 <lfs_fs_preporphans+0x1c>
 8023c96:	2900      	cmp	r1, #0
 8023c98:	da10      	bge.n	8023cbc <lfs_fs_preporphans+0x30>
 8023c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8023cd8 <lfs_fs_preporphans+0x4c>)
 8023c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8023cdc <lfs_fs_preporphans+0x50>)
 8023c9e:	f241 21e2 	movw	r1, #4834	@ 0x12e2
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0);
 8023ca2:	480f      	ldr	r0, [pc, #60]	@ (8023ce0 <lfs_fs_preporphans+0x54>)
 8023ca4:	f018 fc40 	bl	803c528 <__assert_func>
 8023ca8:	f5b2 7fff 	cmp.w	r2, #510	@ 0x1fe
 8023cac:	d906      	bls.n	8023cbc <lfs_fs_preporphans+0x30>
 8023cae:	2900      	cmp	r1, #0
 8023cb0:	dd04      	ble.n	8023cbc <lfs_fs_preporphans+0x30>
 8023cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8023ce4 <lfs_fs_preporphans+0x58>)
 8023cb4:	4a09      	ldr	r2, [pc, #36]	@ (8023cdc <lfs_fs_preporphans+0x50>)
 8023cb6:	f241 21e3 	movw	r1, #4835	@ 0x12e3
 8023cba:	e7f2      	b.n	8023ca2 <lfs_fs_preporphans+0x16>
    lfs->gstate.tag += orphans;
 8023cbc:	4419      	add	r1, r3
    return tag & 0x000003ff;
 8023cbe:	f3c1 0309 	ubfx	r3, r1, #0, #10
    return lfs_tag_size(a->tag);
 8023cc2:	3b00      	subs	r3, #0
 8023cc4:	bf18      	it	ne
 8023cc6:	2301      	movne	r3, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8023cc8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8023ccc:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
 8023cd0:	6301      	str	r1, [r0, #48]	@ 0x30
}
 8023cd2:	2000      	movs	r0, #0
 8023cd4:	bd08      	pop	{r3, pc}
 8023cd6:	bf00      	nop
 8023cd8:	0803f7ae 	.word	0x0803f7ae
 8023cdc:	08041f42 	.word	0x08041f42
 8023ce0:	0803f7e4 	.word	0x0803f7e4
 8023ce4:	0803f80e 	.word	0x0803f80e

08023ce8 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
 8023ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cec:	b087      	sub	sp, #28
 8023cee:	e9dd 4811 	ldrd	r4, r8, [sp, #68]	@ 0x44
 8023cf2:	9304      	str	r3, [sp, #16]
    if (off+size > lfs->cfg->block_size
 8023cf4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
        void *buffer, lfs_size_t size) {
 8023cf6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
    if (off+size > lfs->cfg->block_size
 8023cf8:	69db      	ldr	r3, [r3, #28]
        void *buffer, lfs_size_t size) {
 8023cfa:	9202      	str	r2, [sp, #8]
    if (off+size > lfs->cfg->block_size
 8023cfc:	19a2      	adds	r2, r4, r6
 8023cfe:	429a      	cmp	r2, r3
        void *buffer, lfs_size_t size) {
 8023d00:	4681      	mov	r9, r0
 8023d02:	468a      	mov	sl, r1
    if (off+size > lfs->cfg->block_size
 8023d04:	d80a      	bhi.n	8023d1c <lfs_bd_read+0x34>
            || (lfs->block_count && block >= lfs->block_count)) {
 8023d06:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8023d08:	b92b      	cbnz	r3, 8023d16 <lfs_bd_read+0x2e>
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
    return a - (a % alignment);
}

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
    return lfs_aligndown(a + alignment-1, alignment);
 8023d0a:	9b04      	ldr	r3, [sp, #16]
 8023d0c:	3b01      	subs	r3, #1
 8023d0e:	9305      	str	r3, [sp, #20]
    while (size > 0) {
 8023d10:	b93e      	cbnz	r6, 8023d22 <lfs_bd_read+0x3a>
    return 0;
 8023d12:	4630      	mov	r0, r6
 8023d14:	e0ac      	b.n	8023e70 <lfs_bd_read+0x188>
            || (lfs->block_count && block >= lfs->block_count)) {
 8023d16:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023d18:	4293      	cmp	r3, r2
 8023d1a:	d8f6      	bhi.n	8023d0a <lfs_bd_read+0x22>
        return LFS_ERR_CORRUPT;
 8023d1c:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8023d20:	e0a6      	b.n	8023e70 <lfs_bd_read+0x188>
        if (pcache && block == pcache->block &&
 8023d22:	f1ba 0f00 	cmp.w	sl, #0
 8023d26:	d03f      	beq.n	8023da8 <lfs_bd_read+0xc0>
 8023d28:	f8da 3000 	ldr.w	r3, [sl]
 8023d2c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023d2e:	4293      	cmp	r3, r2
 8023d30:	d13a      	bne.n	8023da8 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8023d32:	e9da 5301 	ldrd	r5, r3, [sl, #4]
 8023d36:	eb05 0b03 	add.w	fp, r5, r3
        if (pcache && block == pcache->block &&
 8023d3a:	45a3      	cmp	fp, r4
 8023d3c:	d934      	bls.n	8023da8 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8023d3e:	42a5      	cmp	r5, r4
 8023d40:	d811      	bhi.n	8023d66 <lfs_bd_read+0x7e>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8023d42:	ebab 0b04 	sub.w	fp, fp, r4
    return (a < b) ? a : b;
 8023d46:	45b3      	cmp	fp, r6
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8023d48:	f8da 100c 	ldr.w	r1, [sl, #12]
 8023d4c:	bf28      	it	cs
 8023d4e:	46b3      	movcs	fp, r6
 8023d50:	1b65      	subs	r5, r4, r5
 8023d52:	4640      	mov	r0, r8
 8023d54:	465a      	mov	r2, fp
 8023d56:	4429      	add	r1, r5
 8023d58:	f019 fd64 	bl	803d824 <memcpy>
                data += diff;
 8023d5c:	44d8      	add	r8, fp
                off += diff;
 8023d5e:	445c      	add	r4, fp
                size -= diff;
 8023d60:	eba6 060b 	sub.w	r6, r6, fp
                continue;
 8023d64:	e7d4      	b.n	8023d10 <lfs_bd_read+0x28>
            diff = lfs_min(diff, pcache->off-off);
 8023d66:	1b2d      	subs	r5, r5, r4
 8023d68:	42b5      	cmp	r5, r6
 8023d6a:	bf28      	it	cs
 8023d6c:	4635      	movcs	r5, r6
        if (block == rcache->block &&
 8023d6e:	9b02      	ldr	r3, [sp, #8]
 8023d70:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023d72:	681b      	ldr	r3, [r3, #0]
 8023d74:	4293      	cmp	r3, r2
 8023d76:	d11d      	bne.n	8023db4 <lfs_bd_read+0xcc>
                off < rcache->off + rcache->size) {
 8023d78:	9b02      	ldr	r3, [sp, #8]
 8023d7a:	e9d3 1301 	ldrd	r1, r3, [r3, #4]
 8023d7e:	440b      	add	r3, r1
        if (block == rcache->block &&
 8023d80:	42a3      	cmp	r3, r4
 8023d82:	d917      	bls.n	8023db4 <lfs_bd_read+0xcc>
            if (off >= rcache->off) {
 8023d84:	42a1      	cmp	r1, r4
 8023d86:	d811      	bhi.n	8023dac <lfs_bd_read+0xc4>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023d88:	1b1b      	subs	r3, r3, r4
 8023d8a:	429d      	cmp	r5, r3
 8023d8c:	bf28      	it	cs
 8023d8e:	461d      	movcs	r5, r3
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023d90:	9b02      	ldr	r3, [sp, #8]
 8023d92:	68db      	ldr	r3, [r3, #12]
 8023d94:	1a61      	subs	r1, r4, r1
 8023d96:	4640      	mov	r0, r8
 8023d98:	462a      	mov	r2, r5
 8023d9a:	4419      	add	r1, r3
 8023d9c:	f019 fd42 	bl	803d824 <memcpy>
                data += diff;
 8023da0:	44a8      	add	r8, r5
                off += diff;
 8023da2:	442c      	add	r4, r5
                size -= diff;
 8023da4:	1b76      	subs	r6, r6, r5
                continue;
 8023da6:	e7b3      	b.n	8023d10 <lfs_bd_read+0x28>
        lfs_size_t diff = size;
 8023da8:	4635      	mov	r5, r6
 8023daa:	e7e0      	b.n	8023d6e <lfs_bd_read+0x86>
            diff = lfs_min(diff, rcache->off-off);
 8023dac:	1b09      	subs	r1, r1, r4
 8023dae:	428d      	cmp	r5, r1
 8023db0:	bf28      	it	cs
 8023db2:	460d      	movcs	r5, r1
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023db4:	9b04      	ldr	r3, [sp, #16]
 8023db6:	42b3      	cmp	r3, r6
 8023db8:	d820      	bhi.n	8023dfc <lfs_bd_read+0x114>
 8023dba:	f8d9 0068 	ldr.w	r0, [r9, #104]	@ 0x68
 8023dbe:	6943      	ldr	r3, [r0, #20]
 8023dc0:	fbb4 f2f3 	udiv	r2, r4, r3
 8023dc4:	fb03 4212 	mls	r2, r3, r2, r4
 8023dc8:	b9c2      	cbnz	r2, 8023dfc <lfs_bd_read+0x114>
 8023dca:	42b3      	cmp	r3, r6
 8023dcc:	d816      	bhi.n	8023dfc <lfs_bd_read+0x114>
    return a - (a % alignment);
 8023dce:	fbb5 f2f3 	udiv	r2, r5, r3
 8023dd2:	fb03 5312 	mls	r3, r3, r2, r5
 8023dd6:	eba5 0b03 	sub.w	fp, r5, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8023dda:	f8cd b000 	str.w	fp, [sp]
 8023dde:	9303      	str	r3, [sp, #12]
 8023de0:	6843      	ldr	r3, [r0, #4]
 8023de2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023de4:	461f      	mov	r7, r3
 8023de6:	4622      	mov	r2, r4
 8023de8:	4643      	mov	r3, r8
 8023dea:	47b8      	blx	r7
            if (err) {
 8023dec:	2800      	cmp	r0, #0
 8023dee:	d13f      	bne.n	8023e70 <lfs_bd_read+0x188>
            size -= diff;
 8023df0:	9b03      	ldr	r3, [sp, #12]
 8023df2:	1b5b      	subs	r3, r3, r5
            data += diff;
 8023df4:	44d8      	add	r8, fp
            off += diff;
 8023df6:	445c      	add	r4, fp
            size -= diff;
 8023df8:	441e      	add	r6, r3
            continue;
 8023dfa:	e789      	b.n	8023d10 <lfs_bd_read+0x28>
        LFS_ASSERT(!lfs->block_count || block < lfs->block_count);
 8023dfc:	f8d9 306c 	ldr.w	r3, [r9, #108]	@ 0x6c
 8023e00:	b143      	cbz	r3, 8023e14 <lfs_bd_read+0x12c>
 8023e02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023e04:	4293      	cmp	r3, r2
 8023e06:	d805      	bhi.n	8023e14 <lfs_bd_read+0x12c>
 8023e08:	4b1b      	ldr	r3, [pc, #108]	@ (8023e78 <lfs_bd_read+0x190>)
 8023e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8023e7c <lfs_bd_read+0x194>)
 8023e0c:	216b      	movs	r1, #107	@ 0x6b
        LFS_ASSERT(err <= 0);
 8023e0e:	481c      	ldr	r0, [pc, #112]	@ (8023e80 <lfs_bd_read+0x198>)
 8023e10:	f018 fb8a 	bl	803c528 <__assert_func>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023e14:	f8d9 0068 	ldr.w	r0, [r9, #104]	@ 0x68
        rcache->block = block;
 8023e18:	9a02      	ldr	r2, [sp, #8]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023e1a:	6941      	ldr	r1, [r0, #20]
        rcache->block = block;
 8023e1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023e1e:	6013      	str	r3, [r2, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023e20:	9d02      	ldr	r5, [sp, #8]
 8023e22:	fbb4 f3f1 	udiv	r3, r4, r1
 8023e26:	fb01 4313 	mls	r3, r1, r3, r4
 8023e2a:	1ae2      	subs	r2, r4, r3
 8023e2c:	606a      	str	r2, [r5, #4]
    return lfs_aligndown(a + alignment-1, alignment);
 8023e2e:	9d05      	ldr	r5, [sp, #20]
 8023e30:	440d      	add	r5, r1
 8023e32:	4425      	add	r5, r4
    return a - (a % alignment);
 8023e34:	fbb5 fcf1 	udiv	ip, r5, r1
 8023e38:	fb01 511c 	mls	r1, r1, ip, r5
 8023e3c:	1a6d      	subs	r5, r5, r1
    return (a < b) ? a : b;
 8023e3e:	69c1      	ldr	r1, [r0, #28]
        rcache->size = lfs_min(
 8023e40:	1b1b      	subs	r3, r3, r4
 8023e42:	428d      	cmp	r5, r1
 8023e44:	bf94      	ite	ls
 8023e46:	195b      	addls	r3, r3, r5
 8023e48:	185b      	addhi	r3, r3, r1
 8023e4a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8023e4c:	428b      	cmp	r3, r1
 8023e4e:	bf28      	it	cs
 8023e50:	460b      	movcs	r3, r1
 8023e52:	9902      	ldr	r1, [sp, #8]
 8023e54:	608b      	str	r3, [r1, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023e56:	9300      	str	r3, [sp, #0]
 8023e58:	68cb      	ldr	r3, [r1, #12]
 8023e5a:	6845      	ldr	r5, [r0, #4]
 8023e5c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8023e5e:	47a8      	blx	r5
        LFS_ASSERT(err <= 0);
 8023e60:	2800      	cmp	r0, #0
 8023e62:	dd03      	ble.n	8023e6c <lfs_bd_read+0x184>
 8023e64:	4b07      	ldr	r3, [pc, #28]	@ (8023e84 <lfs_bd_read+0x19c>)
 8023e66:	4a05      	ldr	r2, [pc, #20]	@ (8023e7c <lfs_bd_read+0x194>)
 8023e68:	2176      	movs	r1, #118	@ 0x76
 8023e6a:	e7d0      	b.n	8023e0e <lfs_bd_read+0x126>
        if (err) {
 8023e6c:	f43f af59 	beq.w	8023d22 <lfs_bd_read+0x3a>
}
 8023e70:	b007      	add	sp, #28
 8023e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e76:	bf00      	nop
 8023e78:	0803f844 	.word	0x0803f844
 8023e7c:	08041f93 	.word	0x08041f93
 8023e80:	0803f7e4 	.word	0x0803f7e4
 8023e84:	0803f872 	.word	0x0803f872

08023e88 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8023e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e8c:	469a      	mov	sl, r3
    lfs_tag_t ntag = dir->etag;
 8023e8e:	e9d1 8303 	ldrd	r8, r3, [r1, #12]
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8023e92:	b087      	sub	sp, #28
 8023e94:	4606      	mov	r6, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8023e96:	303c      	adds	r0, #60	@ 0x3c
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8023e98:	4691      	mov	r9, r2
 8023e9a:	460f      	mov	r7, r1
    lfs_tag_t ntag = dir->etag;
 8023e9c:	9305      	str	r3, [sp, #20]
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8023e9e:	f7ff fe80 	bl	8023ba2 <lfs_gstate_hasmovehere>
    return (tag & 0x000ffc00) >> 10;
 8023ea2:	f3c9 2b89 	ubfx	fp, r9, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8023ea6:	4604      	mov	r4, r0
 8023ea8:	b180      	cbz	r0, 8023ecc <lfs_dir_getslice+0x44>
 8023eaa:	f1bb 0f00 	cmp.w	fp, #0
 8023eae:	d00c      	beq.n	8023eca <lfs_dir_getslice+0x42>
    return (tag & 0x000ffc00) >> 10;
 8023eb0:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8023eb2:	f3ca 2289 	ubfx	r2, sl, #10, #10
 8023eb6:	f3c3 2389 	ubfx	r3, r3, #10, #10
        if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag)) {
 8023eba:	4293      	cmp	r3, r2
 8023ebc:	d104      	bne.n	8023ec8 <lfs_dir_getslice+0x40>
            return LFS_ERR_NOENT;
 8023ebe:	f06f 0001 	mvn.w	r0, #1
}
 8023ec2:	b007      	add	sp, #28
 8023ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        } else if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag)) {
 8023ec8:	d36c      	bcc.n	8023fa4 <lfs_dir_getslice+0x11c>
    lfs_stag_t gdiff = 0;
 8023eca:	2400      	movs	r4, #0
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8023ecc:	9d05      	ldr	r5, [sp, #20]
 8023ece:	4628      	mov	r0, r5
 8023ed0:	f7ff fe43 	bl	8023b5a <lfs_tag_dsize>
 8023ed4:	1d03      	adds	r3, r0, #4
 8023ed6:	4543      	cmp	r3, r8
 8023ed8:	d8f1      	bhi.n	8023ebe <lfs_dir_getslice+0x36>
        int err = lfs_bd_read(lfs,
 8023eda:	2304      	movs	r3, #4
        off -= lfs_tag_dsize(ntag);
 8023edc:	eba8 0800 	sub.w	r8, r8, r0
        int err = lfs_bd_read(lfs,
 8023ee0:	9303      	str	r3, [sp, #12]
 8023ee2:	ab05      	add	r3, sp, #20
 8023ee4:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8023ee8:	683b      	ldr	r3, [r7, #0]
 8023eea:	9300      	str	r3, [sp, #0]
 8023eec:	4632      	mov	r2, r6
 8023eee:	2304      	movs	r3, #4
 8023ef0:	2100      	movs	r1, #0
 8023ef2:	4630      	mov	r0, r6
 8023ef4:	f7ff fef8 	bl	8023ce8 <lfs_bd_read>
        if (err) {
 8023ef8:	2800      	cmp	r0, #0
 8023efa:	d1e2      	bne.n	8023ec2 <lfs_dir_getslice+0x3a>
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8023efc:	9b05      	ldr	r3, [sp, #20]
 8023efe:	ba1b      	rev	r3, r3
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8023f00:	406b      	eors	r3, r5
 8023f02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8023f06:	9305      	str	r3, [sp, #20]
        if (lfs_tag_id(gmask) != 0 &&
 8023f08:	f1bb 0f00 	cmp.w	fp, #0
 8023f0c:	d01e      	beq.n	8023f4c <lfs_dir_getslice+0xc4>
    return (tag & 0x70000000) >> 20;
 8023f0e:	0d2a      	lsrs	r2, r5, #20
        if (lfs_tag_id(gmask) != 0 &&
 8023f10:	f402 63e0 	and.w	r3, r2, #1792	@ 0x700
 8023f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023f18:	d118      	bne.n	8023f4c <lfs_dir_getslice+0xc4>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8023f1a:	ebaa 0304 	sub.w	r3, sl, r4
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8023f1e:	f3c3 2089 	ubfx	r0, r3, #10, #10
 8023f22:	f3c5 2189 	ubfx	r1, r5, #10, #10
 8023f26:	4288      	cmp	r0, r1
 8023f28:	d310      	bcc.n	8023f4c <lfs_dir_getslice+0xc4>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8023f2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8023f2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8023f32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8023f36:	f023 0303 	bic.w	r3, r3, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8023f3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8023f3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8023f42:	42ab      	cmp	r3, r5
 8023f44:	d0bb      	beq.n	8023ebe <lfs_dir_getslice+0x36>
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8023f46:	b252      	sxtb	r2, r2
 8023f48:	eb04 2482 	add.w	r4, r4, r2, lsl #10
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8023f4c:	ebaa 0104 	sub.w	r1, sl, r4
 8023f50:	4069      	eors	r1, r5
 8023f52:	ea11 0109 	ands.w	r1, r1, r9
 8023f56:	d1b9      	bne.n	8023ecc <lfs_dir_getslice+0x44>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8023f58:	f345 0309 	sbfx	r3, r5, #0, #10
            if (lfs_tag_isdelete(tag)) {
 8023f5c:	3301      	adds	r3, #1
 8023f5e:	d0ae      	beq.n	8023ebe <lfs_dir_getslice+0x36>
    return (a < b) ? a : b;
 8023f60:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    return tag & 0x000003ff;
 8023f62:	f3c5 0909 	ubfx	r9, r5, #0, #10
 8023f66:	4599      	cmp	r9, r3
 8023f68:	bf28      	it	cs
 8023f6a:	4699      	movcs	r9, r3
            err = lfs_bd_read(lfs,
 8023f6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023f6e:	9302      	str	r3, [sp, #8]
 8023f70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023f72:	f8cd 900c 	str.w	r9, [sp, #12]
 8023f76:	3304      	adds	r3, #4
 8023f78:	4443      	add	r3, r8
 8023f7a:	9301      	str	r3, [sp, #4]
 8023f7c:	683b      	ldr	r3, [r7, #0]
 8023f7e:	9300      	str	r3, [sp, #0]
 8023f80:	4632      	mov	r2, r6
 8023f82:	464b      	mov	r3, r9
 8023f84:	4630      	mov	r0, r6
 8023f86:	f7ff feaf 	bl	8023ce8 <lfs_bd_read>
            if (err) {
 8023f8a:	2800      	cmp	r0, #0
 8023f8c:	d199      	bne.n	8023ec2 <lfs_dir_getslice+0x3a>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8023f8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023f90:	eba3 0209 	sub.w	r2, r3, r9
 8023f94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023f96:	4601      	mov	r1, r0
 8023f98:	eb03 0009 	add.w	r0, r3, r9
 8023f9c:	f019 fa82 	bl	803d4a4 <memset>
            return tag + gdiff;
 8023fa0:	1960      	adds	r0, r4, r5
 8023fa2:	e78e      	b.n	8023ec2 <lfs_dir_getslice+0x3a>
            gdiff -= LFS_MKTAG(0, 1, 0);
 8023fa4:	4c00      	ldr	r4, [pc, #0]	@ (8023fa8 <lfs_dir_getslice+0x120>)
 8023fa6:	e791      	b.n	8023ecc <lfs_dir_getslice+0x44>
 8023fa8:	fffffc00 	.word	0xfffffc00

08023fac <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8023fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return tag & 0x000003ff;
 8023fae:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
 8023fb2:	9402      	str	r4, [sp, #8]
 8023fb4:	9c06      	ldr	r4, [sp, #24]
 8023fb6:	9401      	str	r4, [sp, #4]
 8023fb8:	2400      	movs	r4, #0
 8023fba:	9400      	str	r4, [sp, #0]
 8023fbc:	f7ff ff64 	bl	8023e88 <lfs_dir_getslice>
}
 8023fc0:	b004      	add	sp, #16
 8023fc2:	bd10      	pop	{r4, pc}

08023fc4 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
 8023fc4:	b530      	push	{r4, r5, lr}
 8023fc6:	b087      	sub	sp, #28
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8023fc8:	ad03      	add	r5, sp, #12
 8023fca:	4b09      	ldr	r3, [pc, #36]	@ (8023ff0 <lfs_dir_getgstate+0x2c>)
 8023fcc:	9500      	str	r5, [sp, #0]
        lfs_gstate_t *gstate) {
 8023fce:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8023fd0:	4a08      	ldr	r2, [pc, #32]	@ (8023ff4 <lfs_dir_getgstate+0x30>)
 8023fd2:	f7ff ffeb 	bl	8023fac <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
 8023fd6:	2800      	cmp	r0, #0
 8023fd8:	da04      	bge.n	8023fe4 <lfs_dir_getgstate+0x20>
 8023fda:	1c83      	adds	r3, r0, #2
 8023fdc:	d100      	bne.n	8023fe0 <lfs_dir_getgstate+0x1c>
    return 0;
 8023fde:	2000      	movs	r0, #0
}
 8023fe0:	b007      	add	sp, #28
 8023fe2:	bd30      	pop	{r4, r5, pc}
        lfs_gstate_xor(gstate, &temp);
 8023fe4:	4629      	mov	r1, r5
 8023fe6:	4620      	mov	r0, r4
 8023fe8:	f7ff fdc1 	bl	8023b6e <lfs_gstate_xor>
 8023fec:	e7f7      	b.n	8023fde <lfs_dir_getgstate+0x1a>
 8023fee:	bf00      	nop
 8023ff0:	7ff0000c 	.word	0x7ff0000c
 8023ff4:	7ff00000 	.word	0x7ff00000

08023ff8 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
 8023ff8:	b530      	push	{r4, r5, lr}
 8023ffa:	4613      	mov	r3, r2
 8023ffc:	b087      	sub	sp, #28
    lfs_t *lfs = find->lfs;
 8023ffe:	6802      	ldr	r2, [r0, #0]
        lfs_tag_t tag, const void *buffer) {
 8024000:	4604      	mov	r4, r0
    int err = lfs_bd_read(lfs,
 8024002:	ad04      	add	r5, sp, #16
 8024004:	2008      	movs	r0, #8
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8024006:	6e91      	ldr	r1, [r2, #104]	@ 0x68
    int err = lfs_bd_read(lfs,
 8024008:	9003      	str	r0, [sp, #12]
 802400a:	9502      	str	r5, [sp, #8]
 802400c:	6858      	ldr	r0, [r3, #4]
 802400e:	9001      	str	r0, [sp, #4]
 8024010:	681b      	ldr	r3, [r3, #0]
 8024012:	9300      	str	r3, [sp, #0]
 8024014:	69cb      	ldr	r3, [r1, #28]
 8024016:	4610      	mov	r0, r2
 8024018:	f102 0110 	add.w	r1, r2, #16
 802401c:	f7ff fe64 	bl	8023ce8 <lfs_bd_read>
    if (err) {
 8024020:	b930      	cbnz	r0, 8024030 <lfs_fs_parent_match+0x38>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8024022:	1d21      	adds	r1, r4, #4
 8024024:	4628      	mov	r0, r5
 8024026:	f7ff fd73 	bl	8023b10 <lfs_pair_cmp>
 802402a:	3800      	subs	r0, #0
 802402c:	bf18      	it	ne
 802402e:	2001      	movne	r0, #1
}
 8024030:	b007      	add	sp, #28
 8024032:	bd30      	pop	{r4, r5, pc}

08024034 <lfs_deinit>:
    if (!lfs->cfg->read_buffer) {
 8024034:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8024036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
static int lfs_deinit(lfs_t *lfs) {
 8024038:	b510      	push	{r4, lr}
 802403a:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
 802403c:	b913      	cbnz	r3, 8024044 <lfs_deinit+0x10>
// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#if defined(LFS_FREE)
    LFS_FREE(p);
#elif !defined(LFS_NO_MALLOC)
    free(p);
 802403e:	68c0      	ldr	r0, [r0, #12]
 8024040:	f018 faa2 	bl	803c588 <free>
    if (!lfs->cfg->prog_buffer) {
 8024044:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8024046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024048:	b913      	cbnz	r3, 8024050 <lfs_deinit+0x1c>
 802404a:	69e0      	ldr	r0, [r4, #28]
 802404c:	f018 fa9c 	bl	803c588 <free>
    if (!lfs->cfg->lookahead_buffer) {
 8024050:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8024052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024054:	b913      	cbnz	r3, 802405c <lfs_deinit+0x28>
 8024056:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8024058:	f018 fa96 	bl	803c588 <free>
}
 802405c:	2000      	movs	r0, #0
 802405e:	bd10      	pop	{r4, pc}

08024060 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
 8024060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024062:	461c      	mov	r4, r3
    if (id == 0x3ff) {
 8024064:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8024068:	429a      	cmp	r2, r3
        uint16_t id, struct lfs_info *info) {
 802406a:	b085      	sub	sp, #20
 802406c:	4605      	mov	r5, r0
 802406e:	460e      	mov	r6, r1
 8024070:	f104 0c08 	add.w	ip, r4, #8
    if (id == 0x3ff) {
 8024074:	d108      	bne.n	8024088 <lfs_dir_getinfo+0x28>
        strcpy(info->name, "/");
 8024076:	491b      	ldr	r1, [pc, #108]	@ (80240e4 <lfs_dir_getinfo+0x84>)
 8024078:	4660      	mov	r0, ip
 802407a:	f019 fbcb 	bl	803d814 <strcpy>
        info->type = LFS_TYPE_DIR;
 802407e:	2302      	movs	r3, #2
 8024080:	7023      	strb	r3, [r4, #0]
        return 0;
 8024082:	2000      	movs	r0, #0
}
 8024084:	b005      	add	sp, #20
 8024086:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8024088:	6f03      	ldr	r3, [r0, #112]	@ 0x70
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 802408a:	f8cd c000 	str.w	ip, [sp]
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 802408e:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8024090:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8024094:	0297      	lsls	r7, r2, #10
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8024096:	4a14      	ldr	r2, [pc, #80]	@ (80240e8 <lfs_dir_getinfo+0x88>)
 8024098:	f7ff ff88 	bl	8023fac <lfs_dir_get>
    if (tag < 0) {
 802409c:	2800      	cmp	r0, #0
 802409e:	dbf1      	blt.n	8024084 <lfs_dir_getinfo+0x24>
    return (tag & 0x7ff00000) >> 20;
 80240a0:	0d00      	lsrs	r0, r0, #20
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80240a2:	ab02      	add	r3, sp, #8
    info->type = lfs_tag_type3(tag);
 80240a4:	7020      	strb	r0, [r4, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 80240a6:	9300      	str	r3, [sp, #0]
 80240a8:	f047 5300 	orr.w	r3, r7, #536870912	@ 0x20000000
 80240ac:	4a0f      	ldr	r2, [pc, #60]	@ (80240ec <lfs_dir_getinfo+0x8c>)
 80240ae:	f043 0308 	orr.w	r3, r3, #8
 80240b2:	4631      	mov	r1, r6
 80240b4:	4628      	mov	r0, r5
 80240b6:	f7ff ff79 	bl	8023fac <lfs_dir_get>
    if (tag < 0) {
 80240ba:	2800      	cmp	r0, #0
 80240bc:	dbe2      	blt.n	8024084 <lfs_dir_getinfo+0x24>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80240be:	f240 2302 	movw	r3, #514	@ 0x202
 80240c2:	ebb3 5f10 	cmp.w	r3, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
 80240c6:	ea4f 5210 	mov.w	r2, r0, lsr #20
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80240ca:	d102      	bne.n	80240d2 <lfs_dir_getinfo+0x72>
        info->size = ctz.size;
 80240cc:	9b03      	ldr	r3, [sp, #12]
 80240ce:	6063      	str	r3, [r4, #4]
 80240d0:	e7d7      	b.n	8024082 <lfs_dir_getinfo+0x22>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80240d2:	f240 2301 	movw	r3, #513	@ 0x201
 80240d6:	429a      	cmp	r2, r3
 80240d8:	d1d3      	bne.n	8024082 <lfs_dir_getinfo+0x22>
    return tag & 0x000003ff;
 80240da:	f3c0 0009 	ubfx	r0, r0, #0, #10
        info->size = lfs_tag_size(tag);
 80240de:	6060      	str	r0, [r4, #4]
 80240e0:	e7cf      	b.n	8024082 <lfs_dir_getinfo+0x22>
 80240e2:	bf00      	nop
 80240e4:	0803f87b 	.word	0x0803f87b
 80240e8:	780ffc00 	.word	0x780ffc00
 80240ec:	700ffc00 	.word	0x700ffc00

080240f0 <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80240f0:	b508      	push	{r3, lr}
    LFS_ASSERT(block < lfs->block_count);
 80240f2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80240f4:	428b      	cmp	r3, r1
 80240f6:	d806      	bhi.n	8024106 <lfs_bd_erase+0x16>
 80240f8:	4b08      	ldr	r3, [pc, #32]	@ (802411c <lfs_bd_erase+0x2c>)
 80240fa:	4a09      	ldr	r2, [pc, #36]	@ (8024120 <lfs_bd_erase+0x30>)
 80240fc:	f44f 718a 	mov.w	r1, #276	@ 0x114
    LFS_ASSERT(err <= 0);
 8024100:	4808      	ldr	r0, [pc, #32]	@ (8024124 <lfs_bd_erase+0x34>)
 8024102:	f018 fa11 	bl	803c528 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8024106:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8024108:	68c3      	ldr	r3, [r0, #12]
 802410a:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 802410c:	2800      	cmp	r0, #0
 802410e:	dd04      	ble.n	802411a <lfs_bd_erase+0x2a>
 8024110:	4b05      	ldr	r3, [pc, #20]	@ (8024128 <lfs_bd_erase+0x38>)
 8024112:	4a03      	ldr	r2, [pc, #12]	@ (8024120 <lfs_bd_erase+0x30>)
 8024114:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8024118:	e7f2      	b.n	8024100 <lfs_bd_erase+0x10>
}
 802411a:	bd08      	pop	{r3, pc}
 802411c:	0803fcec 	.word	0x0803fcec
 8024120:	08041f6e 	.word	0x08041f6e
 8024124:	0803f7e4 	.word	0x0803f7e4
 8024128:	0803f872 	.word	0x0803f872

0802412c <lfs_dir_traverse.constprop.0>:
static int lfs_dir_traverse(lfs_t *lfs,
 802412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct lfs_diskoff disk = {0};
 8024130:	2400      	movs	r4, #0
static int lfs_dir_traverse(lfs_t *lfs,
 8024132:	b0ab      	sub	sp, #172	@ 0xac
    struct lfs_diskoff disk = {0};
 8024134:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
static int lfs_dir_traverse(lfs_t *lfs,
 8024138:	9304      	str	r3, [sp, #16]
 802413a:	f8bd b0dc 	ldrh.w	fp, [sp, #220]	@ 0xdc
 802413e:	f8bd 30e0 	ldrh.w	r3, [sp, #224]	@ 0xe0
 8024142:	f9bd a0e4 	ldrsh.w	sl, [sp, #228]	@ 0xe4
 8024146:	9006      	str	r0, [sp, #24]
 8024148:	4689      	mov	r9, r1
 802414a:	9305      	str	r3, [sp, #20]
    struct lfs_diskoff disk = {0};
 802414c:	46a0      	mov	r8, r4
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 802414e:	9804      	ldr	r0, [sp, #16]
 8024150:	f7ff fd03 	bl	8023b5a <lfs_tag_dsize>
 8024154:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8024158:	1887      	adds	r7, r0, r2
 802415a:	429f      	cmp	r7, r3
 802415c:	d235      	bcs.n	80241ca <lfs_dir_traverse.constprop.0+0x9e>
                int err = lfs_bd_read(lfs,
 802415e:	2304      	movs	r3, #4
 8024160:	9303      	str	r3, [sp, #12]
 8024162:	ab09      	add	r3, sp, #36	@ 0x24
 8024164:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8024168:	9a06      	ldr	r2, [sp, #24]
 802416a:	f8d9 3000 	ldr.w	r3, [r9]
 802416e:	9300      	str	r3, [sp, #0]
 8024170:	2100      	movs	r1, #0
 8024172:	2304      	movs	r3, #4
 8024174:	4610      	mov	r0, r2
 8024176:	f7ff fdb7 	bl	8023ce8 <lfs_bd_read>
                if (err) {
 802417a:	2800      	cmp	r0, #0
 802417c:	f040 8120 	bne.w	80243c0 <lfs_dir_traverse.constprop.0+0x294>
    return __builtin_bswap32(a);
 8024180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8024182:	9a04      	ldr	r2, [sp, #16]
 8024184:	ba1b      	rev	r3, r3
 8024186:	405a      	eors	r2, r3
 8024188:	f042 4300 	orr.w	r3, r2, #2147483648	@ 0x80000000
 802418c:	9304      	str	r3, [sp, #16]
 802418e:	9309      	str	r3, [sp, #36]	@ 0x24
                disk.block = dir->pair[0];
 8024190:	f8d9 3000 	ldr.w	r3, [r9]
 8024194:	930a      	str	r3, [sp, #40]	@ 0x28
                disk.off = off+sizeof(lfs_tag_t);
 8024196:	1d3b      	adds	r3, r7, #4
 8024198:	930b      	str	r3, [sp, #44]	@ 0x2c
                buffer = &disk;
 802419a:	ae0a      	add	r6, sp, #40	@ 0x28
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 802419c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802419e:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 80241a0:	ea81 0208 	eor.w	r2, r1, r8
 80241a4:	401a      	ands	r2, r3
 80241a6:	4b88      	ldr	r3, [pc, #544]	@ (80243c8 <lfs_dir_traverse.constprop.0+0x29c>)
 80241a8:	401a      	ands	r2, r3
 80241aa:	d154      	bne.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
            if (lfs_tag_id(tmask) != 0) {
 80241ac:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 80241ae:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80241b2:	2b00      	cmp	r3, #0
 80241b4:	f000 80aa 	beq.w	802430c <lfs_dir_traverse.constprop.0+0x1e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 80241b8:	2c02      	cmp	r4, #2
 80241ba:	d916      	bls.n	80241ea <lfs_dir_traverse.constprop.0+0xbe>
 80241bc:	4b83      	ldr	r3, [pc, #524]	@ (80243cc <lfs_dir_traverse.constprop.0+0x2a0>)
 80241be:	4a84      	ldr	r2, [pc, #528]	@ (80243d0 <lfs_dir_traverse.constprop.0+0x2a4>)
 80241c0:	4884      	ldr	r0, [pc, #528]	@ (80243d4 <lfs_dir_traverse.constprop.0+0x2a8>)
 80241c2:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80241c6:	f018 f9af 	bl	803c528 <__assert_func>
            } else if (attrcount > 0) {
 80241ca:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	f340 80f5 	ble.w	80243bc <lfs_dir_traverse.constprop.0+0x290>
                tag = attrs[0].tag;
 80241d2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80241d4:	681b      	ldr	r3, [r3, #0]
 80241d6:	9309      	str	r3, [sp, #36]	@ 0x24
                buffer = attrs[0].buffer;
 80241d8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80241da:	685e      	ldr	r6, [r3, #4]
                attrs += 1;
 80241dc:	3308      	adds	r3, #8
 80241de:	9334      	str	r3, [sp, #208]	@ 0xd0
                attrcount -= 1;
 80241e0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80241e2:	3b01      	subs	r3, #1
 80241e4:	9335      	str	r3, [sp, #212]	@ 0xd4
 80241e6:	4617      	mov	r7, r2
 80241e8:	e7d8      	b.n	802419c <lfs_dir_traverse.constprop.0+0x70>
                stack[sp] = (struct lfs_dir_traverse){
 80241ea:	253c      	movs	r5, #60	@ 0x3c
 80241ec:	4365      	muls	r5, r4
 80241ee:	f105 03a8 	add.w	r3, r5, #168	@ 0xa8
 80241f2:	446b      	add	r3, sp
 80241f4:	9804      	ldr	r0, [sp, #16]
 80241f6:	f843 0c70 	str.w	r0, [r3, #-112]
 80241fa:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 80241fc:	f843 0c6c 	str.w	r0, [r3, #-108]
 8024200:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8024202:	f843 0c68 	str.w	r0, [r3, #-104]
 8024206:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8024208:	f823 bc5c 	strh.w	fp, [r3, #-92]
 802420c:	e943 0819 	strd	r0, r8, [r3, #-100]	@ 0x64
 8024210:	9805      	ldr	r0, [sp, #20]
 8024212:	f823 0c5a 	strh.w	r0, [r3, #-90]
 8024216:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 8024218:	f843 0c54 	str.w	r0, [r3, #-84]
 802421c:	983b      	ldr	r0, [sp, #236]	@ 0xec
 802421e:	f823 ac58 	strh.w	sl, [r3, #-88]
 8024222:	e943 0114 	strd	r0, r1, [r3, #-80]	@ 0x50
 8024226:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 802422a:	f843 6c48 	str.w	r6, [r3, #-72]
 802422e:	e943 971e 	strd	r9, r7, [r3, #-120]	@ 0x78
 8024232:	3b44      	subs	r3, #68	@ 0x44
 8024234:	e883 0003 	stmia.w	r3, {r0, r1}
                data = &stack[sp-1].tag;
 8024238:	f105 03a8 	add.w	r3, r5, #168	@ 0xa8
 802423c:	eb0d 0503 	add.w	r5, sp, r3
 8024240:	f1a5 034c 	sub.w	r3, r5, #76	@ 0x4c
 8024244:	933b      	str	r3, [sp, #236]	@ 0xec
                cb = lfs_dir_traverse_filter;
 8024246:	4b64      	ldr	r3, [pc, #400]	@ (80243d8 <lfs_dir_traverse.constprop.0+0x2ac>)
                tmask = 0;
 8024248:	9236      	str	r2, [sp, #216]	@ 0xd8
                sp += 1;
 802424a:	3401      	adds	r4, #1
                ttag = 0;
 802424c:	4690      	mov	r8, r2
                cb = lfs_dir_traverse_filter;
 802424e:	933a      	str	r3, [sp, #232]	@ 0xe8
                diff = 0;
 8024250:	4692      	mov	sl, r2
                end = 0;
 8024252:	9205      	str	r2, [sp, #20]
                begin = 0;
 8024254:	4693      	mov	fp, r2
            off = 0;
 8024256:	463a      	mov	r2, r7
 8024258:	e779      	b.n	802414e <lfs_dir_traverse.constprop.0+0x22>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 802425a:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 802425e:	d11c      	bne.n	802429a <lfs_dir_traverse.constprop.0+0x16e>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024260:	2500      	movs	r5, #0
 8024262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    return tag & 0x000003ff;
 8024264:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024268:	4295      	cmp	r5, r2
 802426a:	d2f4      	bcs.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 802426c:	68b1      	ldr	r1, [r6, #8]
 802426e:	6872      	ldr	r2, [r6, #4]
 8024270:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8024274:	4453      	add	r3, sl
 8024276:	ea41 2183 	orr.w	r1, r1, r3, lsl #10
 802427a:	7833      	ldrb	r3, [r6, #0]
 802427c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8024280:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
 8024284:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	@ 0xe8
 8024288:	4798      	blx	r3
                if (res < 0) {
 802428a:	2800      	cmp	r0, #0
 802428c:	f2c0 8098 	blt.w	80243c0 <lfs_dir_traverse.constprop.0+0x294>
                if (res) {
 8024290:	f106 060c 	add.w	r6, r6, #12
 8024294:	d1df      	bne.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024296:	3501      	adds	r5, #1
 8024298:	e7e3      	b.n	8024262 <lfs_dir_traverse.constprop.0+0x136>
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 802429a:	eb03 218a 	add.w	r1, r3, sl, lsl #10
 802429e:	4632      	mov	r2, r6
 80242a0:	e9dd 303a 	ldrd	r3, r0, [sp, #232]	@ 0xe8
 80242a4:	4798      	blx	r3
            if (res < 0) {
 80242a6:	2800      	cmp	r0, #0
 80242a8:	f2c0 808a 	blt.w	80243c0 <lfs_dir_traverse.constprop.0+0x294>
            if (res) {
 80242ac:	d0d3      	beq.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
    if (sp > 0) {
 80242ae:	2c00      	cmp	r4, #0
 80242b0:	f000 8086 	beq.w	80243c0 <lfs_dir_traverse.constprop.0+0x294>
        dir         = stack[sp-1].dir;
 80242b4:	aa2a      	add	r2, sp, #168	@ 0xa8
 80242b6:	3c01      	subs	r4, #1
 80242b8:	233c      	movs	r3, #60	@ 0x3c
 80242ba:	fb03 2304 	mla	r3, r3, r4, r2
        disk        = stack[sp-1].disk;
 80242be:	e953 0111 	ldrd	r0, r1, [r3, #-68]	@ 0x44
        ptag        = stack[sp-1].ptag;
 80242c2:	f853 2c70 	ldr.w	r2, [r3, #-112]
 80242c6:	9204      	str	r2, [sp, #16]
        attrs       = stack[sp-1].attrs;
 80242c8:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 80242cc:	9234      	str	r2, [sp, #208]	@ 0xd0
        attrcount   = stack[sp-1].attrcount;
 80242ce:	f853 2c68 	ldr.w	r2, [r3, #-104]
 80242d2:	9235      	str	r2, [sp, #212]	@ 0xd4
        tmask       = stack[sp-1].tmask;
 80242d4:	f853 2c64 	ldr.w	r2, [r3, #-100]
 80242d8:	9236      	str	r2, [sp, #216]	@ 0xd8
        end         = stack[sp-1].end;
 80242da:	f833 2c5a 	ldrh.w	r2, [r3, #-90]
 80242de:	9205      	str	r2, [sp, #20]
        cb          = stack[sp-1].cb;
 80242e0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80242e4:	923a      	str	r2, [sp, #232]	@ 0xe8
        data        = stack[sp-1].data;
 80242e6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80242ea:	923b      	str	r2, [sp, #236]	@ 0xec
        tag         = stack[sp-1].tag;
 80242ec:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 80242f0:	9209      	str	r2, [sp, #36]	@ 0x24
        disk        = stack[sp-1].disk;
 80242f2:	aa0a      	add	r2, sp, #40	@ 0x28
        off         = stack[sp-1].off;
 80242f4:	e953 971e 	ldrd	r9, r7, [r3, #-120]	@ 0x78
        disk        = stack[sp-1].disk;
 80242f8:	e882 0003 	stmia.w	r2, {r0, r1}
        ttag        = stack[sp-1].ttag;
 80242fc:	f853 8c60 	ldr.w	r8, [r3, #-96]
        begin       = stack[sp-1].begin;
 8024300:	f833 bc5c 	ldrh.w	fp, [r3, #-92]
        diff        = stack[sp-1].diff;
 8024304:	f933 ac58 	ldrsh.w	sl, [r3, #-88]
        buffer      = stack[sp-1].buffer;
 8024308:	f853 6c48 	ldr.w	r6, [r3, #-72]
        if (lfs_tag_id(tmask) != 0 &&
 802430c:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 802430e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
        if (lfs_tag_id(tmask) != 0 &&
 8024310:	f3c2 2289 	ubfx	r2, r2, #10, #10
 8024314:	b132      	cbz	r2, 8024324 <lfs_dir_traverse.constprop.0+0x1f8>
    return (tag & 0x000ffc00) >> 10;
 8024316:	f3c3 2289 	ubfx	r2, r3, #10, #10
        if (lfs_tag_id(tmask) != 0 &&
 802431a:	455a      	cmp	r2, fp
 802431c:	d39b      	bcc.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 802431e:	9905      	ldr	r1, [sp, #20]
 8024320:	428a      	cmp	r2, r1
 8024322:	d298      	bcs.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
    return (tag & 0x7ff00000) >> 20;
 8024324:	f3c3 520a 	ubfx	r2, r3, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8024328:	2a00      	cmp	r2, #0
 802432a:	d094      	beq.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 802432c:	f240 1101 	movw	r1, #257	@ 0x101
 8024330:	428a      	cmp	r2, r1
 8024332:	d192      	bne.n	802425a <lfs_dir_traverse.constprop.0+0x12e>
            if (cb == lfs_dir_traverse_filter) {
 8024334:	4a28      	ldr	r2, [pc, #160]	@ (80243d8 <lfs_dir_traverse.constprop.0+0x2ac>)
 8024336:	9307      	str	r3, [sp, #28]
 8024338:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 802433a:	4293      	cmp	r3, r2
 802433c:	d08b      	beq.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
            stack[sp] = (struct lfs_dir_traverse){
 802433e:	223c      	movs	r2, #60	@ 0x3c
 8024340:	ab2a      	add	r3, sp, #168	@ 0xa8
 8024342:	fb02 3504 	mla	r5, r2, r4, r3
 8024346:	2100      	movs	r1, #0
 8024348:	f1a5 0078 	sub.w	r0, r5, #120	@ 0x78
 802434c:	f019 f8aa 	bl	803d4a4 <memset>
 8024350:	9b04      	ldr	r3, [sp, #16]
 8024352:	f845 3c70 	str.w	r3, [r5, #-112]
 8024356:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8024358:	f845 3c6c 	str.w	r3, [r5, #-108]
 802435c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 802435e:	f845 3c68 	str.w	r3, [r5, #-104]
 8024362:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8024364:	f825 bc5c 	strh.w	fp, [r5, #-92]
 8024368:	e945 3819 	strd	r3, r8, [r5, #-100]	@ 0x64
 802436c:	9b05      	ldr	r3, [sp, #20]
 802436e:	f825 3c5a 	strh.w	r3, [r5, #-90]
 8024372:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8024374:	f845 3c54 	str.w	r3, [r5, #-84]
 8024378:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 802437a:	f845 3c50 	str.w	r3, [r5, #-80]
            uint16_t fromid = lfs_tag_size(tag);
 802437e:	9b07      	ldr	r3, [sp, #28]
            stack[sp] = (struct lfs_dir_traverse){
 8024380:	f825 ac58 	strh.w	sl, [r5, #-88]
            uint16_t fromid = lfs_tag_size(tag);
 8024384:	f3c3 0b09 	ubfx	fp, r3, #0, #10
    return (tag & 0x000ffc00) >> 10;
 8024388:	f3c3 2389 	ubfx	r3, r3, #10, #10
            end = fromid+1;
 802438c:	f10b 0201 	add.w	r2, fp, #1
            diff = toid-fromid+diff;
 8024390:	eba3 030b 	sub.w	r3, r3, fp
 8024394:	4453      	add	r3, sl
            end = fromid+1;
 8024396:	9205      	str	r2, [sp, #20]
            attrcount = 0;
 8024398:	4a10      	ldr	r2, [pc, #64]	@ (80243dc <lfs_dir_traverse.constprop.0+0x2b0>)
            diff = toid-fromid+diff;
 802439a:	fa0f fa83 	sxth.w	sl, r3
            attrcount = 0;
 802439e:	2300      	movs	r3, #0
 80243a0:	e9cd 3235 	strd	r3, r2, [sp, #212]	@ 0xd4
            attrs = NULL;
 80243a4:	9334      	str	r3, [sp, #208]	@ 0xd0
            ptag = 0xffffffff;
 80243a6:	f04f 33ff 	mov.w	r3, #4294967295
            stack[sp] = (struct lfs_dir_traverse){
 80243aa:	e945 971e 	strd	r9, r7, [r5, #-120]	@ 0x78
            sp += 1;
 80243ae:	3401      	adds	r4, #1
            dir = buffer;
 80243b0:	46b1      	mov	r9, r6
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80243b2:	f04f 5800 	mov.w	r8, #536870912	@ 0x20000000
            ptag = 0xffffffff;
 80243b6:	9304      	str	r3, [sp, #16]
            off = 0;
 80243b8:	2700      	movs	r7, #0
 80243ba:	e74c      	b.n	8024256 <lfs_dir_traverse.constprop.0+0x12a>
                res = 0;
 80243bc:	2000      	movs	r0, #0
 80243be:	e776      	b.n	80242ae <lfs_dir_traverse.constprop.0+0x182>
}
 80243c0:	b02b      	add	sp, #172	@ 0xac
 80243c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243c6:	bf00      	nop
 80243c8:	7ff00000 	.word	0x7ff00000
 80243cc:	0803f87d 	.word	0x0803f87d
 80243d0:	08041f18 	.word	0x08041f18
 80243d4:	0803f7e4 	.word	0x0803f7e4
 80243d8:	08023bfd 	.word	0x08023bfd
 80243dc:	600ffc00 	.word	0x600ffc00

080243e0 <lfs_dir_getread.constprop.0>:
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 80243e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243e4:	b085      	sub	sp, #20
 80243e6:	4698      	mov	r8, r3
    if (off+size > lfs->cfg->block_size) {
 80243e8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 80243ea:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80243ec:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if (off+size > lfs->cfg->block_size) {
 80243ee:	69db      	ldr	r3, [r3, #28]
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 80243f0:	4615      	mov	r5, r2
    if (off+size > lfs->cfg->block_size) {
 80243f2:	19a2      	adds	r2, r4, r6
 80243f4:	429a      	cmp	r2, r3
static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
 80243f6:	4607      	mov	r7, r0
 80243f8:	468b      	mov	fp, r1
    if (off+size > lfs->cfg->block_size) {
 80243fa:	d84c      	bhi.n	8024496 <lfs_dir_getread.constprop.0+0xb6>
        rcache->block = LFS_BLOCK_INLINE;
 80243fc:	f06f 0a01 	mvn.w	sl, #1
    while (size > 0) {
 8024400:	2e00      	cmp	r6, #0
 8024402:	d046      	beq.n	8024492 <lfs_dir_getread.constprop.0+0xb2>
    return lfs_aligndown(a + alignment-1, alignment);
 8024404:	f108 39ff 	add.w	r9, r8, #4294967295
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024408:	682b      	ldr	r3, [r5, #0]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 802440a:	68e8      	ldr	r0, [r5, #12]
        if (rcache->block == LFS_BLOCK_INLINE &&
 802440c:	3302      	adds	r3, #2
 802440e:	d118      	bne.n	8024442 <lfs_dir_getread.constprop.0+0x62>
                off < rcache->off + rcache->size) {
 8024410:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
 8024414:	440b      	add	r3, r1
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024416:	42a3      	cmp	r3, r4
 8024418:	d913      	bls.n	8024442 <lfs_dir_getread.constprop.0+0x62>
            if (off >= rcache->off) {
 802441a:	42a1      	cmp	r1, r4
 802441c:	d811      	bhi.n	8024442 <lfs_dir_getread.constprop.0+0x62>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 802441e:	eba3 0904 	sub.w	r9, r3, r4
    return (a < b) ? a : b;
 8024422:	45b1      	cmp	r9, r6
 8024424:	bf28      	it	cs
 8024426:	46b1      	movcs	r9, r6
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8024428:	1a61      	subs	r1, r4, r1
 802442a:	4401      	add	r1, r0
 802442c:	464a      	mov	r2, r9
 802442e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024430:	f019 f9f8 	bl	803d824 <memcpy>
                data += diff;
 8024434:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024436:	444b      	add	r3, r9
 8024438:	9310      	str	r3, [sp, #64]	@ 0x40
                off += diff;
 802443a:	444c      	add	r4, r9
                size -= diff;
 802443c:	eba6 0609 	sub.w	r6, r6, r9
                continue;
 8024440:	e7de      	b.n	8024400 <lfs_dir_getread.constprop.0+0x20>
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8024442:	f8d7 c068 	ldr.w	ip, [r7, #104]	@ 0x68
        rcache->block = LFS_BLOCK_INLINE;
 8024446:	f8c5 a000 	str.w	sl, [r5]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 802444a:	f8dc 1014 	ldr.w	r1, [ip, #20]
    return a - (a % alignment);
 802444e:	fbb4 f2f1 	udiv	r2, r4, r1
    return lfs_aligndown(a + alignment-1, alignment);
 8024452:	eb09 0301 	add.w	r3, r9, r1
 8024456:	4423      	add	r3, r4
    return a - (a % alignment);
 8024458:	fb01 4212 	mls	r2, r1, r2, r4
 802445c:	fbb3 fef1 	udiv	lr, r3, r1
 8024460:	fb01 311e 	mls	r1, r1, lr, r3
 8024464:	1a5b      	subs	r3, r3, r1
    return (a < b) ? a : b;
 8024466:	f8dc 1028 	ldr.w	r1, [ip, #40]	@ 0x28
 802446a:	428b      	cmp	r3, r1
 802446c:	bf28      	it	cs
 802446e:	460b      	movcs	r3, r1
    return a - (a % alignment);
 8024470:	1aa2      	subs	r2, r4, r2
 8024472:	606a      	str	r2, [r5, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024474:	60ab      	str	r3, [r5, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024476:	4659      	mov	r1, fp
 8024478:	e9cd 0301 	strd	r0, r3, [sp, #4]
 802447c:	9200      	str	r2, [sp, #0]
 802447e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024480:	4a06      	ldr	r2, [pc, #24]	@ (802449c <lfs_dir_getread.constprop.0+0xbc>)
 8024482:	4638      	mov	r0, r7
 8024484:	f7ff fd00 	bl	8023e88 <lfs_dir_getslice>
        if (err < 0) {
 8024488:	2800      	cmp	r0, #0
 802448a:	dabd      	bge.n	8024408 <lfs_dir_getread.constprop.0+0x28>
}
 802448c:	b005      	add	sp, #20
 802448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
 8024492:	4630      	mov	r0, r6
 8024494:	e7fa      	b.n	802448c <lfs_dir_getread.constprop.0+0xac>
        return LFS_ERR_CORRUPT;
 8024496:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 802449a:	e7f7      	b.n	802448c <lfs_dir_getread.constprop.0+0xac>
 802449c:	fff7fc00 	.word	0xfff7fc00

080244a0 <lfs_bd_crc.constprop.0>:
static int lfs_bd_crc(lfs_t *lfs,
 80244a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244a4:	b087      	sub	sp, #28
 80244a6:	4606      	mov	r6, r0
 80244a8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80244aa:	4688      	mov	r8, r1
 80244ac:	4691      	mov	r9, r2
 80244ae:	469a      	mov	sl, r3
    for (lfs_off_t i = 0; i < size; i += diff) {
 80244b0:	2400      	movs	r4, #0
        int err = lfs_bd_read(lfs,
 80244b2:	f10d 0b10 	add.w	fp, sp, #16
    for (lfs_off_t i = 0; i < size; i += diff) {
 80244b6:	42a7      	cmp	r7, r4
 80244b8:	d803      	bhi.n	80244c2 <lfs_bd_crc.constprop.0+0x22>
    return 0;
 80244ba:	2000      	movs	r0, #0
}
 80244bc:	b007      	add	sp, #28
 80244be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        diff = lfs_min(size-i, sizeof(dat));
 80244c2:	1b3d      	subs	r5, r7, r4
        int err = lfs_bd_read(lfs,
 80244c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    return (a < b) ? a : b;
 80244c6:	2d08      	cmp	r5, #8
 80244c8:	bf28      	it	cs
 80244ca:	2508      	movcs	r5, #8
 80244cc:	18e3      	adds	r3, r4, r3
 80244ce:	e9cd a300 	strd	sl, r3, [sp]
 80244d2:	e9cd b502 	strd	fp, r5, [sp, #8]
 80244d6:	eba9 0304 	sub.w	r3, r9, r4
 80244da:	4642      	mov	r2, r8
 80244dc:	2100      	movs	r1, #0
 80244de:	4630      	mov	r0, r6
 80244e0:	f7ff fc02 	bl	8023ce8 <lfs_bd_read>
        if (err) {
 80244e4:	2800      	cmp	r0, #0
 80244e6:	d1e9      	bne.n	80244bc <lfs_bd_crc.constprop.0+0x1c>
        *crc = lfs_crc(*crc, &dat, diff);
 80244e8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80244ea:	462a      	mov	r2, r5
 80244ec:	6818      	ldr	r0, [r3, #0]
 80244ee:	4659      	mov	r1, fp
 80244f0:	f002 fe24 	bl	802713c <lfs_crc>
 80244f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    for (lfs_off_t i = 0; i < size; i += diff) {
 80244f6:	442c      	add	r4, r5
        *crc = lfs_crc(*crc, &dat, diff);
 80244f8:	6018      	str	r0, [r3, #0]
    for (lfs_off_t i = 0; i < size; i += diff) {
 80244fa:	e7dc      	b.n	80244b6 <lfs_bd_crc.constprop.0+0x16>

080244fc <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80244fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024500:	b097      	sub	sp, #92	@ 0x5c
 8024502:	4616      	mov	r6, r2
 8024504:	930a      	str	r3, [sp, #40]	@ 0x28
    if (lfs->block_count 
 8024506:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8024508:	6812      	ldr	r2, [r2, #0]
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 802450a:	4607      	mov	r7, r0
 802450c:	460d      	mov	r5, r1
    if (lfs->block_count 
 802450e:	b133      	cbz	r3, 802451e <lfs_dir_fetchmatch+0x22>
            && (pair[0] >= lfs->block_count || pair[1] >= lfs->block_count)) {
 8024510:	4293      	cmp	r3, r2
 8024512:	f240 80b5 	bls.w	8024680 <lfs_dir_fetchmatch+0x184>
 8024516:	6871      	ldr	r1, [r6, #4]
 8024518:	428b      	cmp	r3, r1
 802451a:	f240 80b1 	bls.w	8024680 <lfs_dir_fetchmatch+0x184>
    uint32_t revs[2] = {0, 0};
 802451e:	2100      	movs	r1, #0
        int err = lfs_bd_read(lfs,
 8024520:	f04f 0804 	mov.w	r8, #4
 8024524:	ab0e      	add	r3, sp, #56	@ 0x38
 8024526:	e9cd 1301 	strd	r1, r3, [sp, #4]
 802452a:	9200      	str	r2, [sp, #0]
 802452c:	f8cd 800c 	str.w	r8, [sp, #12]
 8024530:	4643      	mov	r3, r8
 8024532:	463a      	mov	r2, r7
 8024534:	4638      	mov	r0, r7
    uint32_t revs[2] = {0, 0};
 8024536:	e9cd 110e 	strd	r1, r1, [sp, #56]	@ 0x38
        int err = lfs_bd_read(lfs,
 802453a:	f7ff fbd5 	bl	8023ce8 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
 802453e:	4604      	mov	r4, r0
 8024540:	b110      	cbz	r0, 8024548 <lfs_dir_fetchmatch+0x4c>
 8024542:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 8024546:	d15b      	bne.n	8024600 <lfs_dir_fetchmatch+0x104>
        int err = lfs_bd_read(lfs,
 8024548:	f8cd 800c 	str.w	r8, [sp, #12]
 802454c:	ab0f      	add	r3, sp, #60	@ 0x3c
 802454e:	f04f 0800 	mov.w	r8, #0
 8024552:	9302      	str	r3, [sp, #8]
 8024554:	f8cd 8004 	str.w	r8, [sp, #4]
 8024558:	6873      	ldr	r3, [r6, #4]
 802455a:	9300      	str	r3, [sp, #0]
 802455c:	463a      	mov	r2, r7
 802455e:	2304      	movs	r3, #4
 8024560:	4641      	mov	r1, r8
 8024562:	4638      	mov	r0, r7
 8024564:	f7ff fbc0 	bl	8023ce8 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
 8024568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
        if (err && err != LFS_ERR_CORRUPT) {
 802456a:	4604      	mov	r4, r0
 802456c:	2800      	cmp	r0, #0
 802456e:	d04b      	beq.n	8024608 <lfs_dir_fetchmatch+0x10c>
 8024570:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 8024574:	d144      	bne.n	8024600 <lfs_dir_fetchmatch+0x104>
 8024576:	4641      	mov	r1, r8
    dir->pair[0] = pair[(r+0)%2];
 8024578:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
 802457c:	602b      	str	r3, [r5, #0]
    dir->pair[1] = pair[(r+1)%2];
 802457e:	f081 0301 	eor.w	r3, r1, #1
 8024582:	9307      	str	r3, [sp, #28]
 8024584:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024588:	606b      	str	r3, [r5, #4]
    dir->rev = revs[(r+0)%2];
 802458a:	ab16      	add	r3, sp, #88	@ 0x58
 802458c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    lfs_stag_t besttag = -1;
 8024590:	f04f 34ff 	mov.w	r4, #4294967295
    dir->rev = revs[(r+0)%2];
 8024594:	f851 3c20 	ldr.w	r3, [r1, #-32]
 8024598:	60ab      	str	r3, [r5, #8]
    dir->off = 0; // nonzero = found some commits
 802459a:	2300      	movs	r3, #0
 802459c:	60eb      	str	r3, [r5, #12]
 802459e:	2302      	movs	r3, #2
 80245a0:	9308      	str	r3, [sp, #32]
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80245a2:	4aaa      	ldr	r2, [pc, #680]	@ (802484c <lfs_dir_fetchmatch+0x350>)
 80245a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80245a8:	ab10      	add	r3, sp, #64	@ 0x40
 80245aa:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80245ae:	2204      	movs	r2, #4
 80245b0:	f105 0108 	add.w	r1, r5, #8
 80245b4:	f04f 30ff 	mov.w	r0, #4294967295
 80245b8:	f002 fdc0 	bl	802713c <lfs_crc>
        bool hasfcrc = false;
 80245bc:	2300      	movs	r3, #0
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80245be:	900c      	str	r0, [sp, #48]	@ 0x30
        lfs_stag_t tempbesttag = besttag;
 80245c0:	46a1      	mov	r9, r4
        bool hasfcrc = false;
 80245c2:	9306      	str	r3, [sp, #24]
        bool tempsplit = false;
 80245c4:	9309      	str	r3, [sp, #36]	@ 0x24
        uint16_t tempcount = 0;
 80245c6:	9305      	str	r3, [sp, #20]
        lfs_tag_t ptag = 0xffffffff;
 80245c8:	f04f 38ff 	mov.w	r8, #4294967295
        lfs_off_t off = 0;
 80245cc:	469b      	mov	fp, r3
            off += lfs_tag_dsize(ptag);
 80245ce:	4640      	mov	r0, r8
 80245d0:	f7ff fac3 	bl	8023b5a <lfs_tag_dsize>
            int err = lfs_bd_read(lfs,
 80245d4:	2204      	movs	r2, #4
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80245d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
            int err = lfs_bd_read(lfs,
 80245d8:	9203      	str	r2, [sp, #12]
            off += lfs_tag_dsize(ptag);
 80245da:	4483      	add	fp, r0
            int err = lfs_bd_read(lfs,
 80245dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80245de:	e9cd b201 	strd	fp, r2, [sp, #4]
 80245e2:	682a      	ldr	r2, [r5, #0]
 80245e4:	9200      	str	r2, [sp, #0]
 80245e6:	69db      	ldr	r3, [r3, #28]
 80245e8:	463a      	mov	r2, r7
 80245ea:	2100      	movs	r1, #0
 80245ec:	4638      	mov	r0, r7
 80245ee:	f7ff fb7b 	bl	8023ce8 <lfs_bd_read>
            if (err) {
 80245f2:	4606      	mov	r6, r0
 80245f4:	b190      	cbz	r0, 802461c <lfs_dir_fetchmatch+0x120>
                    if (err == LFS_ERR_CORRUPT) {
 80245f6:	f116 0f54 	cmn.w	r6, #84	@ 0x54
 80245fa:	f000 8125 	beq.w	8024848 <lfs_dir_fetchmatch+0x34c>
                return err;
 80245fe:	4634      	mov	r4, r6
}
 8024600:	4620      	mov	r0, r4
 8024602:	b017      	add	sp, #92	@ 0x5c
 8024604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (int)(unsigned)(a - b);
 8024608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802460a:	1a9b      	subs	r3, r3, r2
        if (err != LFS_ERR_CORRUPT &&
 802460c:	2b00      	cmp	r3, #0
 802460e:	bfd4      	ite	le
 8024610:	2100      	movle	r1, #0
 8024612:	2101      	movgt	r1, #1
 8024614:	e7b0      	b.n	8024578 <lfs_dir_fetchmatch+0x7c>
 8024616:	2301      	movs	r3, #1
 8024618:	9308      	str	r3, [sp, #32]
 802461a:	e7c2      	b.n	80245a2 <lfs_dir_fetchmatch+0xa6>
            crc = lfs_crc(crc, &tag, sizeof(tag));
 802461c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802461e:	2204      	movs	r2, #4
 8024620:	a90d      	add	r1, sp, #52	@ 0x34
 8024622:	f002 fd8b 	bl	802713c <lfs_crc>
    return __builtin_bswap32(a);
 8024626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024628:	900c      	str	r0, [sp, #48]	@ 0x30
 802462a:	ba1b      	rev	r3, r3
            tag = lfs_frombe32(tag) ^ ptag;
 802462c:	ea88 0a03 	eor.w	sl, r8, r3
            if (!lfs_tag_isvalid(tag)) {
 8024630:	f1ba 0f00 	cmp.w	sl, #0
            tag = lfs_frombe32(tag) ^ ptag;
 8024634:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
            if (!lfs_tag_isvalid(tag)) {
 8024638:	da25      	bge.n	8024686 <lfs_dir_fetchmatch+0x18a>
    return (tag & 0x78000000) >> 20;
 802463a:	ea4f 5318 	mov.w	r3, r8, lsr #20
                maybeerased = (lfs_tag_type2(ptag) == LFS_TYPE_CCRC);
 802463e:	f403 63f0 	and.w	r3, r3, #1920	@ 0x780
 8024642:	f5a3 66a0 	sub.w	r6, r3, #1280	@ 0x500
 8024646:	4273      	negs	r3, r6
 8024648:	4173      	adcs	r3, r6
        if (dir->off == 0) {
 802464a:	68ea      	ldr	r2, [r5, #12]
 802464c:	2a00      	cmp	r2, #0
 802464e:	f040 8109 	bne.w	8024864 <lfs_dir_fetchmatch+0x368>
            dir->rev = revs[(r+1)%2];
 8024652:	9907      	ldr	r1, [sp, #28]
 8024654:	a816      	add	r0, sp, #88	@ 0x58
 8024656:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    pair[0] = pair[1];
 802465a:	e9d5 2300 	ldrd	r2, r3, [r5]
            dir->rev = revs[(r+1)%2];
 802465e:	f851 1c20 	ldr.w	r1, [r1, #-32]
 8024662:	60a9      	str	r1, [r5, #8]
    for (int i = 0; i < 2; i++) {
 8024664:	9908      	ldr	r1, [sp, #32]
 8024666:	2901      	cmp	r1, #1
    pair[1] = t;
 8024668:	e9c5 3200 	strd	r3, r2, [r5]
    for (int i = 0; i < 2; i++) {
 802466c:	d1d3      	bne.n	8024616 <lfs_dir_fetchmatch+0x11a>
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 802466e:	4978      	ldr	r1, [pc, #480]	@ (8024850 <lfs_dir_fetchmatch+0x354>)
 8024670:	4878      	ldr	r0, [pc, #480]	@ (8024854 <lfs_dir_fetchmatch+0x358>)
 8024672:	e9cd 2100 	strd	r2, r1, [sp]
 8024676:	4978      	ldr	r1, [pc, #480]	@ (8024858 <lfs_dir_fetchmatch+0x35c>)
 8024678:	f240 5259 	movw	r2, #1369	@ 0x559
 802467c:	f018 fdf6 	bl	803d26c <iprintf>
        return LFS_ERR_CORRUPT;
 8024680:	f06f 0453 	mvn.w	r4, #83	@ 0x53
 8024684:	e7bc      	b.n	8024600 <lfs_dir_fetchmatch+0x104>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8024686:	4650      	mov	r0, sl
 8024688:	f7ff fa67 	bl	8023b5a <lfs_tag_dsize>
 802468c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802468e:	69da      	ldr	r2, [r3, #28]
 8024690:	eb00 030b 	add.w	r3, r0, fp
 8024694:	4293      	cmp	r3, r2
 8024696:	f200 80d7 	bhi.w	8024848 <lfs_dir_fetchmatch+0x34c>
    return (tag & 0x78000000) >> 20;
 802469a:	ea4f 511a 	mov.w	r1, sl, lsr #20
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 802469e:	f401 61f0 	and.w	r1, r1, #1920	@ 0x780
 80246a2:	f5b1 6fa0 	cmp.w	r1, #1280	@ 0x500
                err = lfs_bd_read(lfs,
 80246a6:	682b      	ldr	r3, [r5, #0]
 80246a8:	f10b 0804 	add.w	r8, fp, #4
            if (lfs_tag_type2(tag) == LFS_TYPE_CCRC) {
 80246ac:	d133      	bne.n	8024716 <lfs_dir_fetchmatch+0x21a>
                err = lfs_bd_read(lfs,
 80246ae:	2104      	movs	r1, #4
 80246b0:	9103      	str	r1, [sp, #12]
 80246b2:	a914      	add	r1, sp, #80	@ 0x50
 80246b4:	e9cd 8101 	strd	r8, r1, [sp, #4]
 80246b8:	9300      	str	r3, [sp, #0]
 80246ba:	4631      	mov	r1, r6
 80246bc:	4613      	mov	r3, r2
 80246be:	4638      	mov	r0, r7
 80246c0:	463a      	mov	r2, r7
 80246c2:	f7ff fb11 	bl	8023ce8 <lfs_bd_read>
                if (err) {
 80246c6:	4606      	mov	r6, r0
 80246c8:	2800      	cmp	r0, #0
 80246ca:	d194      	bne.n	80245f6 <lfs_dir_fetchmatch+0xfa>
                if (crc != dcrc) {
 80246cc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80246ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80246d0:	429a      	cmp	r2, r3
 80246d2:	f040 80b9 	bne.w	8024848 <lfs_dir_fetchmatch+0x34c>
    return (tag & 0x0ff00000) >> 20;
 80246d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80246d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
    return (tag & 0x0ff00000) >> 20;
 80246da:	0d1b      	lsrs	r3, r3, #20
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80246dc:	2204      	movs	r2, #4
 80246de:	a90c      	add	r1, sp, #48	@ 0x30
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80246e0:	ea8a 7ac3 	eor.w	sl, sl, r3, lsl #31
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80246e4:	f002 fd2a 	bl	802713c <lfs_crc>
 80246e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                dir->off = off + lfs_tag_dsize(tag);
 80246ea:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80246ec:	f7ff fa35 	bl	8023b5a <lfs_tag_dsize>
                dir->count = tempcount;
 80246f0:	9b05      	ldr	r3, [sp, #20]
 80246f2:	82ab      	strh	r3, [r5, #20]
                dir->tail[0] = temptail[0];
 80246f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80246f6:	61ab      	str	r3, [r5, #24]
                dir->off = off + lfs_tag_dsize(tag);
 80246f8:	4458      	add	r0, fp
                dir->tail[1] = temptail[1];
 80246fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80246fc:	61eb      	str	r3, [r5, #28]
                dir->etag = ptag;
 80246fe:	e9c5 0a03 	strd	r0, sl, [r5, #12]
                dir->split = tempsplit;
 8024702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024704:	75eb      	strb	r3, [r5, #23]
                crc = 0xffffffff;
 8024706:	f04f 33ff 	mov.w	r3, #4294967295
 802470a:	930c      	str	r3, [sp, #48]	@ 0x30
                continue;
 802470c:	464b      	mov	r3, r9
 802470e:	464c      	mov	r4, r9
 8024710:	46d0      	mov	r8, sl
 8024712:	4699      	mov	r9, r3
 8024714:	e75b      	b.n	80245ce <lfs_dir_fetchmatch+0xd2>
            err = lfs_bd_crc(lfs,
 8024716:	a90c      	add	r1, sp, #48	@ 0x30
 8024718:	3804      	subs	r0, #4
 802471a:	e9cd 8000 	strd	r8, r0, [sp]
 802471e:	9102      	str	r1, [sp, #8]
 8024720:	4638      	mov	r0, r7
 8024722:	4639      	mov	r1, r7
 8024724:	f7ff febc 	bl	80244a0 <lfs_bd_crc.constprop.0>
            if (err) {
 8024728:	4606      	mov	r6, r0
 802472a:	2800      	cmp	r0, #0
 802472c:	f47f af63 	bne.w	80245f6 <lfs_dir_fetchmatch+0xfa>
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8024730:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
                err = lfs_bd_read(lfs,
 8024732:	6828      	ldr	r0, [r5, #0]
    return (tag & 0x70000000) >> 20;
 8024734:	0d19      	lsrs	r1, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 8024736:	f411 6ce0 	ands.w	ip, r1, #1792	@ 0x700
 802473a:	d11c      	bne.n	8024776 <lfs_dir_fetchmatch+0x27a>
                if (lfs_tag_id(tag) >= tempcount) {
 802473c:	9a05      	ldr	r2, [sp, #20]
    return (tag & 0x000ffc00) >> 10;
 802473e:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
 8024742:	429a      	cmp	r2, r3
 8024744:	d801      	bhi.n	802474a <lfs_dir_fetchmatch+0x24e>
                    tempcount = lfs_tag_id(tag) + 1;
 8024746:	3301      	adds	r3, #1
 8024748:	9305      	str	r3, [sp, #20]
            if ((fmask & tag) == (fmask & ftag)) {
 802474a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802474c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802474e:	980a      	ldr	r0, [sp, #40]	@ 0x28
                        dir->pair[0], off+sizeof(tag)});
 8024750:	682a      	ldr	r2, [r5, #0]
            if ((fmask & tag) == (fmask & ftag)) {
 8024752:	404b      	eors	r3, r1
 8024754:	4003      	ands	r3, r0
 8024756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024758:	d160      	bne.n	802481c <lfs_dir_fetchmatch+0x320>
                int res = cb(data, tag, &(struct lfs_diskoff){
 802475a:	e9cd 2814 	strd	r2, r8, [sp, #80]	@ 0x50
 802475e:	e9dd 3022 	ldrd	r3, r0, [sp, #136]	@ 0x88
 8024762:	aa14      	add	r2, sp, #80	@ 0x50
 8024764:	4798      	blx	r3
                if (res < 0) {
 8024766:	1e06      	subs	r6, r0, #0
 8024768:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802476a:	da54      	bge.n	8024816 <lfs_dir_fetchmatch+0x31a>
                    if (res == LFS_ERR_CORRUPT) {
 802476c:	f116 0f54 	cmn.w	r6, #84	@ 0x54
 8024770:	f43f af6b 	beq.w	802464a <lfs_dir_fetchmatch+0x14e>
 8024774:	e743      	b.n	80245fe <lfs_dir_fetchmatch+0x102>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8024776:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 802477a:	d11d      	bne.n	80247b8 <lfs_dir_fetchmatch+0x2bc>
                tempcount += lfs_tag_splice(tag);
 802477c:	9a05      	ldr	r2, [sp, #20]
    return (int8_t)lfs_tag_chunk(tag);
 802477e:	b248      	sxtb	r0, r1
                tempcount += lfs_tag_splice(tag);
 8024780:	fa42 f181 	sxtab	r1, r2, r1
 8024784:	b28a      	uxth	r2, r1
 8024786:	9205      	str	r2, [sp, #20]
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8024788:	4a34      	ldr	r2, [pc, #208]	@ (802485c <lfs_dir_fetchmatch+0x360>)
 802478a:	ea09 0202 	and.w	r2, r9, r2
 802478e:	f042 429f 	orr.w	r2, r2, #1333788672	@ 0x4f800000
 8024792:	f442 02e0 	orr.w	r2, r2, #7340032	@ 0x700000
 8024796:	4293      	cmp	r3, r2
 8024798:	d102      	bne.n	80247a0 <lfs_dir_fetchmatch+0x2a4>
                    tempbesttag |= 0x80000000;
 802479a:	f049 4900 	orr.w	r9, r9, #2147483648	@ 0x80000000
 802479e:	e7d4      	b.n	802474a <lfs_dir_fetchmatch+0x24e>
                } else if (tempbesttag != -1 &&
 80247a0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80247a4:	d0d1      	beq.n	802474a <lfs_dir_fetchmatch+0x24e>
 80247a6:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80247aa:	f3c9 2289 	ubfx	r2, r9, #10, #10
 80247ae:	4293      	cmp	r3, r2
 80247b0:	d8cb      	bhi.n	802474a <lfs_dir_fetchmatch+0x24e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80247b2:	eb09 2980 	add.w	r9, r9, r0, lsl #10
 80247b6:	e7c8      	b.n	802474a <lfs_dir_fetchmatch+0x24e>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80247b8:	f5bc 6fc0 	cmp.w	ip, #1536	@ 0x600
 80247bc:	d113      	bne.n	80247e6 <lfs_dir_fetchmatch+0x2ea>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80247be:	f001 0301 	and.w	r3, r1, #1
                err = lfs_bd_read(lfs,
 80247c2:	2208      	movs	r2, #8
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80247c4:	9309      	str	r3, [sp, #36]	@ 0x24
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80247c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                err = lfs_bd_read(lfs,
 80247c8:	9203      	str	r2, [sp, #12]
 80247ca:	aa10      	add	r2, sp, #64	@ 0x40
 80247cc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80247d0:	9000      	str	r0, [sp, #0]
 80247d2:	4631      	mov	r1, r6
 80247d4:	69db      	ldr	r3, [r3, #28]
 80247d6:	463a      	mov	r2, r7
 80247d8:	4638      	mov	r0, r7
 80247da:	f7ff fa85 	bl	8023ce8 <lfs_bd_read>
                if (err) {
 80247de:	4606      	mov	r6, r0
 80247e0:	2800      	cmp	r0, #0
 80247e2:	d0b2      	beq.n	802474a <lfs_dir_fetchmatch+0x24e>
 80247e4:	e707      	b.n	80245f6 <lfs_dir_fetchmatch+0xfa>
            } else if (lfs_tag_type3(tag) == LFS_TYPE_FCRC) {
 80247e6:	f3c1 020a 	ubfx	r2, r1, #0, #11
 80247ea:	f240 53ff 	movw	r3, #1535	@ 0x5ff
 80247ee:	429a      	cmp	r2, r3
 80247f0:	d1ab      	bne.n	802474a <lfs_dir_fetchmatch+0x24e>
                err = lfs_bd_read(lfs,
 80247f2:	2208      	movs	r2, #8
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80247f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                err = lfs_bd_read(lfs,
 80247f6:	9203      	str	r2, [sp, #12]
 80247f8:	aa12      	add	r2, sp, #72	@ 0x48
 80247fa:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80247fe:	9000      	str	r0, [sp, #0]
 8024800:	69db      	ldr	r3, [r3, #28]
 8024802:	463a      	mov	r2, r7
 8024804:	4631      	mov	r1, r6
 8024806:	4638      	mov	r0, r7
 8024808:	f7ff fa6e 	bl	8023ce8 <lfs_bd_read>
                    if (err == LFS_ERR_CORRUPT) {
 802480c:	3054      	adds	r0, #84	@ 0x54
 802480e:	d01b      	beq.n	8024848 <lfs_dir_fetchmatch+0x34c>
                hasfcrc = true;
 8024810:	2301      	movs	r3, #1
 8024812:	9306      	str	r3, [sp, #24]
 8024814:	e799      	b.n	802474a <lfs_dir_fetchmatch+0x24e>
                    tempbesttag = tag;
 8024816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
                if (res == LFS_CMP_EQ) {
 8024818:	d103      	bne.n	8024822 <lfs_dir_fetchmatch+0x326>
                    tempbesttag = tag;
 802481a:	4699      	mov	r9, r3
 802481c:	464b      	mov	r3, r9
 802481e:	46a1      	mov	r9, r4
 8024820:	e775      	b.n	802470e <lfs_dir_fetchmatch+0x212>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8024822:	4a0f      	ldr	r2, [pc, #60]	@ (8024860 <lfs_dir_fetchmatch+0x364>)
 8024824:	ea89 0103 	eor.w	r1, r9, r3
 8024828:	400a      	ands	r2, r1
 802482a:	b152      	cbz	r2, 8024842 <lfs_dir_fetchmatch+0x346>
                } else if (res == LFS_CMP_GT &&
 802482c:	2e02      	cmp	r6, #2
 802482e:	d1f5      	bne.n	802481c <lfs_dir_fetchmatch+0x320>
 8024830:	f3c9 2289 	ubfx	r2, r9, #10, #10
 8024834:	f3c3 2189 	ubfx	r1, r3, #10, #10
 8024838:	428a      	cmp	r2, r1
 802483a:	d3ef      	bcc.n	802481c <lfs_dir_fetchmatch+0x320>
                    tempbesttag = tag | 0x80000000;
 802483c:	f043 4900 	orr.w	r9, r3, #2147483648	@ 0x80000000
 8024840:	e7ec      	b.n	802481c <lfs_dir_fetchmatch+0x320>
                    tempbesttag = -1;
 8024842:	f04f 39ff 	mov.w	r9, #4294967295
 8024846:	e7e9      	b.n	802481c <lfs_dir_fetchmatch+0x320>
        bool maybeerased = false;
 8024848:	2300      	movs	r3, #0
 802484a:	e6fe      	b.n	802464a <lfs_dir_fetchmatch+0x14e>
 802484c:	0803f5e8 	.word	0x0803f5e8
 8024850:	0803f6b1 	.word	0x0803f6b1
 8024854:	0803f884 	.word	0x0803f884
 8024858:	0803f7e4 	.word	0x0803f7e4
 802485c:	000ffc00 	.word	0x000ffc00
 8024860:	7ffffc00 	.word	0x7ffffc00
        dir->erased = false;
 8024864:	2100      	movs	r1, #0
 8024866:	75a9      	strb	r1, [r5, #22]
        if (maybeerased && dir->off % lfs->cfg->prog_size == 0) {
 8024868:	b313      	cbz	r3, 80248b0 <lfs_dir_fetchmatch+0x3b4>
 802486a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 802486c:	6988      	ldr	r0, [r1, #24]
 802486e:	fbb2 f3f0 	udiv	r3, r2, r0
 8024872:	fb00 2313 	mls	r3, r0, r3, r2
 8024876:	b9db      	cbnz	r3, 80248b0 <lfs_dir_fetchmatch+0x3b4>
            if (hasfcrc) {
 8024878:	9b06      	ldr	r3, [sp, #24]
 802487a:	b1cb      	cbz	r3, 80248b0 <lfs_dir_fetchmatch+0x3b4>
                uint32_t fcrc_ = 0xffffffff;
 802487c:	f04f 33ff 	mov.w	r3, #4294967295
 8024880:	9314      	str	r3, [sp, #80]	@ 0x50
                int err = lfs_bd_crc(lfs,
 8024882:	ab14      	add	r3, sp, #80	@ 0x50
 8024884:	9302      	str	r3, [sp, #8]
 8024886:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024888:	e9cd 2300 	strd	r2, r3, [sp]
 802488c:	4638      	mov	r0, r7
 802488e:	69ca      	ldr	r2, [r1, #28]
 8024890:	682b      	ldr	r3, [r5, #0]
 8024892:	4639      	mov	r1, r7
 8024894:	f7ff fe04 	bl	80244a0 <lfs_bd_crc.constprop.0>
                if (err && err != LFS_ERR_CORRUPT) {
 8024898:	b120      	cbz	r0, 80248a4 <lfs_dir_fetchmatch+0x3a8>
 802489a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 802489e:	d001      	beq.n	80248a4 <lfs_dir_fetchmatch+0x3a8>
                    return err;
 80248a0:	4604      	mov	r4, r0
 80248a2:	e6ad      	b.n	8024600 <lfs_dir_fetchmatch+0x104>
                dir->erased = (fcrc_ == fcrc.crc);
 80248a4:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	@ 0x4c
 80248a8:	1a98      	subs	r0, r3, r2
 80248aa:	4243      	negs	r3, r0
 80248ac:	4143      	adcs	r3, r0
 80248ae:	75ab      	strb	r3, [r5, #22]
        if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80248b0:	4629      	mov	r1, r5
 80248b2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80248b6:	f7ff f974 	bl	8023ba2 <lfs_gstate_hasmovehere>
 80248ba:	b188      	cbz	r0, 80248e0 <lfs_dir_fetchmatch+0x3e4>
    return (tag & 0x000ffc00) >> 10;
 80248bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80248be:	f3c4 2289 	ubfx	r2, r4, #10, #10
 80248c2:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80248c6:	429a      	cmp	r2, r3
 80248c8:	d104      	bne.n	80248d4 <lfs_dir_fetchmatch+0x3d8>
                besttag |= 0x80000000;
 80248ca:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
        if (id) {
 80248ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80248d0:	b943      	cbnz	r3, 80248e4 <lfs_dir_fetchmatch+0x3e8>
 80248d2:	e012      	b.n	80248fa <lfs_dir_fetchmatch+0x3fe>
            } else if (besttag != -1 &&
 80248d4:	1c61      	adds	r1, r4, #1
 80248d6:	d0fa      	beq.n	80248ce <lfs_dir_fetchmatch+0x3d2>
 80248d8:	429a      	cmp	r2, r3
                besttag -= LFS_MKTAG(0, 1, 0);
 80248da:	bf88      	it	hi
 80248dc:	f5a4 6480 	subhi.w	r4, r4, #1024	@ 0x400
        if (id) {
 80248e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80248e2:	b13b      	cbz	r3, 80248f4 <lfs_dir_fetchmatch+0x3f8>
            *id = lfs_min(lfs_tag_id(besttag), dir->count);
 80248e4:	8aaa      	ldrh	r2, [r5, #20]
 80248e6:	f3c4 2389 	ubfx	r3, r4, #10, #10
    return (a < b) ? a : b;
 80248ea:	4293      	cmp	r3, r2
 80248ec:	bf28      	it	cs
 80248ee:	4613      	movcs	r3, r2
 80248f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80248f2:	8013      	strh	r3, [r2, #0]
        if (lfs_tag_isvalid(besttag)) {
 80248f4:	2c00      	cmp	r4, #0
 80248f6:	f6bf ae83 	bge.w	8024600 <lfs_dir_fetchmatch+0x104>
        } else if (lfs_tag_id(besttag) < dir->count) {
 80248fa:	8aab      	ldrh	r3, [r5, #20]
 80248fc:	f3c4 2489 	ubfx	r4, r4, #10, #10
            return LFS_ERR_NOENT;
 8024900:	42a3      	cmp	r3, r4
 8024902:	bf94      	ite	ls
 8024904:	2400      	movls	r4, #0
 8024906:	f06f 0401 	mvnhi.w	r4, #1
 802490a:	e679      	b.n	8024600 <lfs_dir_fetchmatch+0x104>

0802490c <lfs_fs_parent>:
        lfs_mdir_t *parent) {
 802490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    parent->tail[1] = 1;
 8024910:	2300      	movs	r3, #0
 8024912:	2501      	movs	r5, #1
        lfs_mdir_t *parent) {
 8024914:	b08b      	sub	sp, #44	@ 0x2c
    parent->tail[1] = 1;
 8024916:	e9c2 3506 	strd	r3, r5, [r2, #24]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 802491a:	4b24      	ldr	r3, [pc, #144]	@ (80249ac <lfs_fs_parent+0xa0>)
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802491c:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 80249c4 <lfs_fs_parent+0xb8>
        lfs_mdir_t *parent) {
 8024920:	4607      	mov	r7, r0
 8024922:	4688      	mov	r8, r1
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8024924:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024928:	f10d 0a14 	add.w	sl, sp, #20
 802492c:	e88a 0003 	stmia.w	sl, {r0, r1}
        lfs_mdir_t *parent) {
 8024930:	4614      	mov	r4, r2
    lfs_size_t tortoise_i = 1;
 8024932:	462e      	mov	r6, r5
    while (!lfs_pair_isnull(parent->tail)) {
 8024934:	f104 0918 	add.w	r9, r4, #24
 8024938:	4648      	mov	r0, r9
 802493a:	f7ff f8df 	bl	8023afc <lfs_pair_isnull>
 802493e:	b110      	cbz	r0, 8024946 <lfs_fs_parent+0x3a>
    return LFS_ERR_NOENT;
 8024940:	f06f 0001 	mvn.w	r0, #1
 8024944:	e00d      	b.n	8024962 <lfs_fs_parent+0x56>
        if (lfs_pair_issync(parent->tail, tortoise)) {
 8024946:	4651      	mov	r1, sl
 8024948:	4648      	mov	r0, r9
 802494a:	f7ff f8f2 	bl	8023b32 <lfs_pair_issync>
 802494e:	b158      	cbz	r0, 8024968 <lfs_fs_parent+0x5c>
            LFS_WARN("Cycle detected in tail list");
 8024950:	4b17      	ldr	r3, [pc, #92]	@ (80249b0 <lfs_fs_parent+0xa4>)
 8024952:	4918      	ldr	r1, [pc, #96]	@ (80249b4 <lfs_fs_parent+0xa8>)
 8024954:	4818      	ldr	r0, [pc, #96]	@ (80249b8 <lfs_fs_parent+0xac>)
 8024956:	f241 22c1 	movw	r2, #4801	@ 0x12c1
 802495a:	f018 fc87 	bl	803d26c <iprintf>
            return LFS_ERR_CORRUPT;
 802495e:	f06f 0053 	mvn.w	r0, #83	@ 0x53
}
 8024962:	b00b      	add	sp, #44	@ 0x2c
 8024964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (tortoise_i == tortoise_period) {
 8024968:	42ae      	cmp	r6, r5
 802496a:	d105      	bne.n	8024978 <lfs_fs_parent+0x6c>
            tortoise[0] = parent->tail[0];
 802496c:	69a3      	ldr	r3, [r4, #24]
 802496e:	9305      	str	r3, [sp, #20]
            tortoise[1] = parent->tail[1];
 8024970:	69e3      	ldr	r3, [r4, #28]
 8024972:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 8024974:	0075      	lsls	r5, r6, #1
            tortoise_i = 0;
 8024976:	4606      	mov	r6, r0
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8024978:	f8d8 3000 	ldr.w	r3, [r8]
 802497c:	9308      	str	r3, [sp, #32]
 802497e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8024982:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8024984:	ab07      	add	r3, sp, #28
 8024986:	9303      	str	r3, [sp, #12]
 8024988:	4b0c      	ldr	r3, [pc, #48]	@ (80249bc <lfs_fs_parent+0xb0>)
 802498a:	9302      	str	r3, [sp, #8]
 802498c:	2300      	movs	r3, #0
 802498e:	e9cd b300 	strd	fp, r3, [sp]
 8024992:	464a      	mov	r2, r9
 8024994:	4b0a      	ldr	r3, [pc, #40]	@ (80249c0 <lfs_fs_parent+0xb4>)
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8024996:	9707      	str	r7, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8024998:	4621      	mov	r1, r4
 802499a:	4638      	mov	r0, r7
        tortoise_i += 1;
 802499c:	3601      	adds	r6, #1
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802499e:	f7ff fdad 	bl	80244fc <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
 80249a2:	2800      	cmp	r0, #0
 80249a4:	d0c6      	beq.n	8024934 <lfs_fs_parent+0x28>
 80249a6:	1c83      	adds	r3, r0, #2
 80249a8:	d0c4      	beq.n	8024934 <lfs_fs_parent+0x28>
 80249aa:	e7da      	b.n	8024962 <lfs_fs_parent+0x56>
 80249ac:	0803f5e8 	.word	0x0803f5e8
 80249b0:	0803f6b1 	.word	0x0803f6b1
 80249b4:	0803f7e4 	.word	0x0803f7e4
 80249b8:	0803f8b9 	.word	0x0803f8b9
 80249bc:	08023ff9 	.word	0x08023ff9
 80249c0:	7ff003ff 	.word	0x7ff003ff
 80249c4:	20000008 	.word	0x20000008

080249c8 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 80249c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 80249ca:	2300      	movs	r3, #0
 80249cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80249d0:	9301      	str	r3, [sp, #4]
 80249d2:	f04f 33ff 	mov.w	r3, #4294967295
 80249d6:	9300      	str	r3, [sp, #0]
 80249d8:	f7ff fd90 	bl	80244fc <lfs_dir_fetchmatch>
}
 80249dc:	b005      	add	sp, #20
 80249de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080249e4 <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80249e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    pdir->tail[1] = 1;
 80249e8:	2300      	movs	r3, #0
 80249ea:	2401      	movs	r4, #1
 80249ec:	e9c2 3406 	strd	r3, r4, [r2, #24]
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80249f0:	4b1e      	ldr	r3, [pc, #120]	@ (8024a6c <lfs_fs_pred+0x88>)
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80249f2:	4607      	mov	r7, r0
 80249f4:	4688      	mov	r8, r1
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 80249f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80249fa:	46e9      	mov	r9, sp
 80249fc:	e889 0003 	stmia.w	r9, {r0, r1}
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8024a00:	4692      	mov	sl, r2
    lfs_size_t tortoise_i = 1;
 8024a02:	4625      	mov	r5, r4
    while (!lfs_pair_isnull(pdir->tail)) {
 8024a04:	f102 0618 	add.w	r6, r2, #24
 8024a08:	4630      	mov	r0, r6
 8024a0a:	f7ff f877 	bl	8023afc <lfs_pair_isnull>
 8024a0e:	b110      	cbz	r0, 8024a16 <lfs_fs_pred+0x32>
    return LFS_ERR_NOENT;
 8024a10:	f06f 0001 	mvn.w	r0, #1
 8024a14:	e00d      	b.n	8024a32 <lfs_fs_pred+0x4e>
        if (lfs_pair_issync(pdir->tail, tortoise)) {
 8024a16:	4649      	mov	r1, r9
 8024a18:	4630      	mov	r0, r6
 8024a1a:	f7ff f88a 	bl	8023b32 <lfs_pair_issync>
 8024a1e:	b158      	cbz	r0, 8024a38 <lfs_fs_pred+0x54>
            LFS_WARN("Cycle detected in tail list");
 8024a20:	4b13      	ldr	r3, [pc, #76]	@ (8024a70 <lfs_fs_pred+0x8c>)
 8024a22:	4914      	ldr	r1, [pc, #80]	@ (8024a74 <lfs_fs_pred+0x90>)
 8024a24:	4814      	ldr	r0, [pc, #80]	@ (8024a78 <lfs_fs_pred+0x94>)
 8024a26:	f44f 5294 	mov.w	r2, #4736	@ 0x1280
 8024a2a:	f018 fc1f 	bl	803d26c <iprintf>
            return LFS_ERR_CORRUPT;
 8024a2e:	f06f 0053 	mvn.w	r0, #83	@ 0x53
}
 8024a32:	b002      	add	sp, #8
 8024a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (tortoise_i == tortoise_period) {
 8024a38:	42a5      	cmp	r5, r4
 8024a3a:	d107      	bne.n	8024a4c <lfs_fs_pred+0x68>
            tortoise[0] = pdir->tail[0];
 8024a3c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8024a40:	9300      	str	r3, [sp, #0]
            tortoise[1] = pdir->tail[1];
 8024a42:	f8da 301c 	ldr.w	r3, [sl, #28]
 8024a46:	9301      	str	r3, [sp, #4]
            tortoise_period *= 2;
 8024a48:	006c      	lsls	r4, r5, #1
            tortoise_i = 0;
 8024a4a:	4605      	mov	r5, r0
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8024a4c:	4641      	mov	r1, r8
 8024a4e:	4630      	mov	r0, r6
        tortoise_i += 1;
 8024a50:	3501      	adds	r5, #1
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8024a52:	f7ff f85d 	bl	8023b10 <lfs_pair_cmp>
 8024a56:	2800      	cmp	r0, #0
 8024a58:	d0eb      	beq.n	8024a32 <lfs_fs_pred+0x4e>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8024a5a:	4632      	mov	r2, r6
 8024a5c:	4651      	mov	r1, sl
 8024a5e:	4638      	mov	r0, r7
 8024a60:	f7ff ffb2 	bl	80249c8 <lfs_dir_fetch>
        if (err) {
 8024a64:	2800      	cmp	r0, #0
 8024a66:	d0cf      	beq.n	8024a08 <lfs_fs_pred+0x24>
 8024a68:	e7e3      	b.n	8024a32 <lfs_fs_pred+0x4e>
 8024a6a:	bf00      	nop
 8024a6c:	0803f5e8 	.word	0x0803f5e8
 8024a70:	0803f6b1 	.word	0x0803f6b1
 8024a74:	0803f7e4 	.word	0x0803f7e4
 8024a78:	0803f8b9 	.word	0x0803f8b9

08024a7c <lfs_dir_find>:
        const char **path, uint16_t *id) {
 8024a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a80:	b08d      	sub	sp, #52	@ 0x34
    const char *name = *path;
 8024a82:	6817      	ldr	r7, [r2, #0]
        const char **path, uint16_t *id) {
 8024a84:	9206      	str	r2, [sp, #24]
 8024a86:	4681      	mov	r9, r0
 8024a88:	460d      	mov	r5, r1
    if (id) {
 8024a8a:	9305      	str	r3, [sp, #20]
 8024a8c:	b11b      	cbz	r3, 8024a96 <lfs_dir_find+0x1a>
        *id = 0x3ff;
 8024a8e:	9a05      	ldr	r2, [sp, #20]
 8024a90:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8024a94:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
 8024a96:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8024a9a:	61ab      	str	r3, [r5, #24]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8024a9c:	4c46      	ldr	r4, [pc, #280]	@ (8024bb8 <lfs_dir_find+0x13c>)
    dir->tail[1] = lfs->root[1];
 8024a9e:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 8024aa2:	61eb      	str	r3, [r5, #28]
        name += strspn(name, "/");
 8024aa4:	4945      	ldr	r1, [pc, #276]	@ (8024bbc <lfs_dir_find+0x140>)
 8024aa6:	4638      	mov	r0, r7
 8024aa8:	f018 fd22 	bl	803d4f0 <strspn>
 8024aac:	eb07 0800 	add.w	r8, r7, r0
        lfs_size_t namelen = strcspn(name, "/");
 8024ab0:	4942      	ldr	r1, [pc, #264]	@ (8024bbc <lfs_dir_find+0x140>)
        name += strspn(name, "/");
 8024ab2:	4683      	mov	fp, r0
        lfs_size_t namelen = strcspn(name, "/");
 8024ab4:	4640      	mov	r0, r8
 8024ab6:	f018 fd0a 	bl	803d4ce <strcspn>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8024aba:	2801      	cmp	r0, #1
        lfs_size_t namelen = strcspn(name, "/");
 8024abc:	4606      	mov	r6, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8024abe:	eb08 0a00 	add.w	sl, r8, r0
 8024ac2:	d105      	bne.n	8024ad0 <lfs_dir_find+0x54>
 8024ac4:	f817 300b 	ldrb.w	r3, [r7, fp]
 8024ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8024aca:	d10a      	bne.n	8024ae2 <lfs_dir_find+0x66>
            name += namelen;
 8024acc:	4657      	mov	r7, sl
            goto nextname;
 8024ace:	e7e9      	b.n	8024aa4 <lfs_dir_find+0x28>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8024ad0:	2802      	cmp	r0, #2
 8024ad2:	d106      	bne.n	8024ae2 <lfs_dir_find+0x66>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8024ad4:	4602      	mov	r2, r0
 8024ad6:	493a      	ldr	r1, [pc, #232]	@ (8024bc0 <lfs_dir_find+0x144>)
 8024ad8:	4640      	mov	r0, r8
 8024ada:	f018 fcd3 	bl	803d484 <memcmp>
 8024ade:	2800      	cmp	r0, #0
 8024ae0:	d0f4      	beq.n	8024acc <lfs_dir_find+0x50>
        const char *suffix = name + namelen;
 8024ae2:	4657      	mov	r7, sl
        int depth = 1;
 8024ae4:	f04f 0b01 	mov.w	fp, #1
            suffix += strspn(suffix, "/");
 8024ae8:	4934      	ldr	r1, [pc, #208]	@ (8024bbc <lfs_dir_find+0x140>)
 8024aea:	4650      	mov	r0, sl
 8024aec:	f018 fd00 	bl	803d4f0 <strspn>
 8024af0:	4482      	add	sl, r0
            sufflen = strcspn(suffix, "/");
 8024af2:	4932      	ldr	r1, [pc, #200]	@ (8024bbc <lfs_dir_find+0x140>)
 8024af4:	4650      	mov	r0, sl
 8024af6:	f018 fcea 	bl	803d4ce <strcspn>
            if (sufflen == 0) {
 8024afa:	4602      	mov	r2, r0
 8024afc:	b190      	cbz	r0, 8024b24 <lfs_dir_find+0xa8>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8024afe:	2802      	cmp	r0, #2
 8024b00:	d10c      	bne.n	8024b1c <lfs_dir_find+0xa0>
 8024b02:	9007      	str	r0, [sp, #28]
 8024b04:	492e      	ldr	r1, [pc, #184]	@ (8024bc0 <lfs_dir_find+0x144>)
 8024b06:	4650      	mov	r0, sl
 8024b08:	f018 fcbc 	bl	803d484 <memcmp>
 8024b0c:	9a07      	ldr	r2, [sp, #28]
 8024b0e:	b928      	cbnz	r0, 8024b1c <lfs_dir_find+0xa0>
                if (depth == 0) {
 8024b10:	f1bb 0b01 	subs.w	fp, fp, #1
 8024b14:	d104      	bne.n	8024b20 <lfs_dir_find+0xa4>
                    name = suffix + sufflen;
 8024b16:	f10a 0702 	add.w	r7, sl, #2
                    goto nextname;
 8024b1a:	e7c3      	b.n	8024aa4 <lfs_dir_find+0x28>
                depth += 1;
 8024b1c:	f10b 0b01 	add.w	fp, fp, #1
            suffix += sufflen;
 8024b20:	4492      	add	sl, r2
            suffix += strspn(suffix, "/");
 8024b22:	e7e1      	b.n	8024ae8 <lfs_dir_find+0x6c>
        if (name[0] == '\0') {
 8024b24:	f898 3000 	ldrb.w	r3, [r8]
 8024b28:	2b00      	cmp	r3, #0
 8024b2a:	d03d      	beq.n	8024ba8 <lfs_dir_find+0x12c>
        *path = name;
 8024b2c:	9b06      	ldr	r3, [sp, #24]
 8024b2e:	f8c3 8000 	str.w	r8, [r3]
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8024b32:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024b36:	2b02      	cmp	r3, #2
 8024b38:	d13a      	bne.n	8024bb0 <lfs_dir_find+0x134>
    return (tag & 0x000ffc00) >> 10;
 8024b3a:	f3c4 2489 	ubfx	r4, r4, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
 8024b3e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8024b42:	429c      	cmp	r4, r3
 8024b44:	f105 0a18 	add.w	sl, r5, #24
 8024b48:	d122      	bne.n	8024b90 <lfs_dir_find+0x114>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8024b4a:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
                    (strchr(name, '/') == NULL) ? id : NULL,
 8024b4e:	212f      	movs	r1, #47	@ 0x2f
 8024b50:	4640      	mov	r0, r8
 8024b52:	f018 fcaf 	bl	803d4b4 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8024b56:	9b05      	ldr	r3, [sp, #20]
 8024b58:	4a1a      	ldr	r2, [pc, #104]	@ (8024bc4 <lfs_dir_find+0x148>)
 8024b5a:	f8cd b00c 	str.w	fp, [sp, #12]
 8024b5e:	2800      	cmp	r0, #0
 8024b60:	bf18      	it	ne
 8024b62:	2300      	movne	r3, #0
 8024b64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024b68:	9600      	str	r6, [sp, #0]
 8024b6a:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 8024b6e:	4652      	mov	r2, sl
 8024b70:	4629      	mov	r1, r5
 8024b72:	4648      	mov	r0, r9
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8024b74:	e9cd 9809 	strd	r9, r8, [sp, #36]	@ 0x24
 8024b78:	960b      	str	r6, [sp, #44]	@ 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8024b7a:	f7ff fcbf 	bl	80244fc <lfs_dir_fetchmatch>
            if (tag < 0) {
 8024b7e:	1e04      	subs	r4, r0, #0
 8024b80:	db12      	blt.n	8024ba8 <lfs_dir_find+0x12c>
            if (tag) {
 8024b82:	d18f      	bne.n	8024aa4 <lfs_dir_find+0x28>
            if (!dir->split) {
 8024b84:	7deb      	ldrb	r3, [r5, #23]
 8024b86:	2b00      	cmp	r3, #0
 8024b88:	d1e1      	bne.n	8024b4e <lfs_dir_find+0xd2>
                return LFS_ERR_NOENT;
 8024b8a:	f06f 0401 	mvn.w	r4, #1
 8024b8e:	e00b      	b.n	8024ba8 <lfs_dir_find+0x12c>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8024b90:	4b0d      	ldr	r3, [pc, #52]	@ (8024bc8 <lfs_dir_find+0x14c>)
 8024b92:	4a0e      	ldr	r2, [pc, #56]	@ (8024bcc <lfs_dir_find+0x150>)
 8024b94:	f8cd a000 	str.w	sl, [sp]
 8024b98:	ea43 2384 	orr.w	r3, r3, r4, lsl #10
 8024b9c:	4629      	mov	r1, r5
 8024b9e:	4648      	mov	r0, r9
 8024ba0:	f7ff fa04 	bl	8023fac <lfs_dir_get>
            if (res < 0) {
 8024ba4:	1e04      	subs	r4, r0, #0
 8024ba6:	dad0      	bge.n	8024b4a <lfs_dir_find+0xce>
}
 8024ba8:	4620      	mov	r0, r4
 8024baa:	b00d      	add	sp, #52	@ 0x34
 8024bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LFS_ERR_NOTDIR;
 8024bb0:	f06f 0413 	mvn.w	r4, #19
 8024bb4:	e7f8      	b.n	8024ba8 <lfs_dir_find+0x12c>
 8024bb6:	bf00      	nop
 8024bb8:	002ffc00 	.word	0x002ffc00
 8024bbc:	0803f87b 	.word	0x0803f87b
 8024bc0:	0804111b 	.word	0x0804111b
 8024bc4:	08024c35 	.word	0x08024c35
 8024bc8:	20000008 	.word	0x20000008
 8024bcc:	700ffc00 	.word	0x700ffc00

08024bd0 <lfs_bd_cmp.constprop.0>:
static int lfs_bd_cmp(lfs_t *lfs,
 8024bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bd4:	b087      	sub	sp, #28
 8024bd6:	4607      	mov	r7, r0
 8024bd8:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8024bda:	4688      	mov	r8, r1
 8024bdc:	4691      	mov	r9, r2
 8024bde:	469a      	mov	sl, r3
    for (lfs_off_t i = 0; i < size; i += diff) {
 8024be0:	2400      	movs	r4, #0
        int err = lfs_bd_read(lfs,
 8024be2:	f10d 0b10 	add.w	fp, sp, #16
    for (lfs_off_t i = 0; i < size; i += diff) {
 8024be6:	42a6      	cmp	r6, r4
 8024be8:	d801      	bhi.n	8024bee <lfs_bd_cmp.constprop.0+0x1e>
    return LFS_CMP_EQ;
 8024bea:	2000      	movs	r0, #0
 8024bec:	e01b      	b.n	8024c26 <lfs_bd_cmp.constprop.0+0x56>
        diff = lfs_min(size-i, sizeof(dat));
 8024bee:	1b35      	subs	r5, r6, r4
        int err = lfs_bd_read(lfs,
 8024bf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024bf2:	2d08      	cmp	r5, #8
 8024bf4:	bf28      	it	cs
 8024bf6:	2508      	movcs	r5, #8
 8024bf8:	18e3      	adds	r3, r4, r3
 8024bfa:	e9cd a300 	strd	sl, r3, [sp]
 8024bfe:	e9cd b502 	strd	fp, r5, [sp, #8]
 8024c02:	eba9 0304 	sub.w	r3, r9, r4
 8024c06:	4642      	mov	r2, r8
 8024c08:	2100      	movs	r1, #0
 8024c0a:	4638      	mov	r0, r7
 8024c0c:	f7ff f86c 	bl	8023ce8 <lfs_bd_read>
        if (err) {
 8024c10:	b948      	cbnz	r0, 8024c26 <lfs_bd_cmp.constprop.0+0x56>
        int res = memcmp(dat, data + i, diff);
 8024c12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024c14:	462a      	mov	r2, r5
 8024c16:	1919      	adds	r1, r3, r4
 8024c18:	4658      	mov	r0, fp
 8024c1a:	f018 fc33 	bl	803d484 <memcmp>
        if (res) {
 8024c1e:	2800      	cmp	r0, #0
 8024c20:	d004      	beq.n	8024c2c <lfs_bd_cmp.constprop.0+0x5c>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8024c22:	da05      	bge.n	8024c30 <lfs_bd_cmp.constprop.0+0x60>
 8024c24:	2001      	movs	r0, #1
}
 8024c26:	b007      	add	sp, #28
 8024c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (lfs_off_t i = 0; i < size; i += diff) {
 8024c2c:	442c      	add	r4, r5
 8024c2e:	e7da      	b.n	8024be6 <lfs_bd_cmp.constprop.0+0x16>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8024c30:	2002      	movs	r0, #2
 8024c32:	e7f8      	b.n	8024c26 <lfs_bd_cmp.constprop.0+0x56>

08024c34 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
 8024c34:	b530      	push	{r4, r5, lr}
 8024c36:	4613      	mov	r3, r2
 8024c38:	6882      	ldr	r2, [r0, #8]
    return tag & 0x000003ff;
 8024c3a:	f3c1 0509 	ubfx	r5, r1, #0, #10
        lfs_tag_t tag, const void *buffer) {
 8024c3e:	b085      	sub	sp, #20
 8024c40:	42aa      	cmp	r2, r5
 8024c42:	bf28      	it	cs
 8024c44:	462a      	movcs	r2, r5
    int res = lfs_bd_cmp(lfs,
 8024c46:	9202      	str	r2, [sp, #8]
 8024c48:	6841      	ldr	r1, [r0, #4]
 8024c4a:	9101      	str	r1, [sp, #4]
 8024c4c:	6859      	ldr	r1, [r3, #4]
 8024c4e:	9100      	str	r1, [sp, #0]
 8024c50:	6801      	ldr	r1, [r0, #0]
 8024c52:	681b      	ldr	r3, [r3, #0]
        lfs_tag_t tag, const void *buffer) {
 8024c54:	4604      	mov	r4, r0
    int res = lfs_bd_cmp(lfs,
 8024c56:	4608      	mov	r0, r1
 8024c58:	f7ff ffba 	bl	8024bd0 <lfs_bd_cmp.constprop.0>
    if (res != LFS_CMP_EQ) {
 8024c5c:	b928      	cbnz	r0, 8024c6a <lfs_dir_find_match+0x36>
    if (name->size != lfs_tag_size(tag)) {
 8024c5e:	68a3      	ldr	r3, [r4, #8]
 8024c60:	42ab      	cmp	r3, r5
 8024c62:	d002      	beq.n	8024c6a <lfs_dir_find_match+0x36>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8024c64:	bf34      	ite	cc
 8024c66:	2001      	movcc	r0, #1
 8024c68:	2002      	movcs	r0, #2
}
 8024c6a:	b005      	add	sp, #20
 8024c6c:	bd30      	pop	{r4, r5, pc}

08024c6e <lfs_ctz_index.isra.0>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8024c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8024c70:	69c6      	ldr	r6, [r0, #28]
    lfs_off_t size = *off;
 8024c72:	680d      	ldr	r5, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8024c74:	3e08      	subs	r6, #8
    if (i == 0) {
 8024c76:	42b5      	cmp	r5, r6
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8024c78:	460f      	mov	r7, r1
    if (i == 0) {
 8024c7a:	d313      	bcc.n	8024ca4 <lfs_ctz_index.isra.0+0x36>
    lfs_off_t i = size / b;
 8024c7c:	fbb5 f0f6 	udiv	r0, r5, r6
    return __builtin_popcount(a);
 8024c80:	3801      	subs	r0, #1
 8024c82:	f7f1 f941 	bl	8015f08 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8024c86:	1c84      	adds	r4, r0, #2
 8024c88:	eba5 0484 	sub.w	r4, r5, r4, lsl #2
 8024c8c:	fbb4 f4f6 	udiv	r4, r4, r6
 8024c90:	4620      	mov	r0, r4
 8024c92:	f7f1 f939 	bl	8015f08 <__popcountsi2>
    *off = size - b*i - 4*lfs_popc(i);
 8024c96:	eba5 0580 	sub.w	r5, r5, r0, lsl #2
 8024c9a:	fb04 5516 	mls	r5, r4, r6, r5
 8024c9e:	603d      	str	r5, [r7, #0]
    return i;
 8024ca0:	4620      	mov	r0, r4
}
 8024ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8024ca4:	2000      	movs	r0, #0
 8024ca6:	e7fc      	b.n	8024ca2 <lfs_ctz_index.isra.0+0x34>

08024ca8 <lfs_ctz_find.constprop.0>:
static int lfs_ctz_find(lfs_t *lfs,
 8024ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024cac:	b089      	sub	sp, #36	@ 0x24
 8024cae:	4606      	mov	r6, r0
 8024cb0:	f8dd 804c 	ldr.w	r8, [sp, #76]	@ 0x4c
 8024cb4:	9205      	str	r2, [sp, #20]
 8024cb6:	460f      	mov	r7, r1
    if (size == 0) {
 8024cb8:	b94b      	cbnz	r3, 8024cce <lfs_ctz_find.constprop.0+0x26>
        *block = LFS_BLOCK_NULL;
 8024cba:	f04f 32ff 	mov.w	r2, #4294967295
 8024cbe:	f8c8 2000 	str.w	r2, [r8]
    *off = pos;
 8024cc2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
        return 0;
 8024cc4:	2000      	movs	r0, #0
    *off = pos;
 8024cc6:	6013      	str	r3, [r2, #0]
}
 8024cc8:	b009      	add	sp, #36	@ 0x24
 8024cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8024cce:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8024cd0:	3b01      	subs	r3, #1
 8024cd2:	a907      	add	r1, sp, #28
 8024cd4:	4620      	mov	r0, r4
 8024cd6:	9307      	str	r3, [sp, #28]
 8024cd8:	f7ff ffc9 	bl	8024c6e <lfs_ctz_index.isra.0>
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8024cdc:	a912      	add	r1, sp, #72	@ 0x48
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8024cde:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8024ce0:	4620      	mov	r0, r4
 8024ce2:	f7ff ffc4 	bl	8024c6e <lfs_ctz_index.isra.0>
        int err = lfs_bd_read(lfs,
 8024ce6:	f04f 0a04 	mov.w	sl, #4
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8024cea:	4681      	mov	r9, r0
        int err = lfs_bd_read(lfs,
 8024cec:	f10d 0b14 	add.w	fp, sp, #20
    while (current > target) {
 8024cf0:	45a9      	cmp	r9, r5
        int err = lfs_bd_read(lfs,
 8024cf2:	9a05      	ldr	r2, [sp, #20]
    while (current > target) {
 8024cf4:	d303      	bcc.n	8024cfe <lfs_ctz_find.constprop.0+0x56>
    *off = pos;
 8024cf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    *block = head;
 8024cf8:	f8c8 2000 	str.w	r2, [r8]
    return 0;
 8024cfc:	e7e1      	b.n	8024cc2 <lfs_ctz_find.constprop.0+0x1a>
                lfs_npw2(current-target+1) - 1,
 8024cfe:	eba5 0409 	sub.w	r4, r5, r9
    return 32 - __builtin_clz(a-1);
 8024d02:	fab4 f484 	clz	r4, r4
    return __builtin_ctz(a);
 8024d06:	fa95 f3a5 	rbit	r3, r5
 8024d0a:	fab3 f383 	clz	r3, r3
        lfs_size_t skip = lfs_min(
 8024d0e:	f1c4 041f 	rsb	r4, r4, #31
    return (a < b) ? a : b;
 8024d12:	429c      	cmp	r4, r3
 8024d14:	bf28      	it	cs
 8024d16:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
 8024d18:	00a3      	lsls	r3, r4, #2
 8024d1a:	e9cd 2300 	strd	r2, r3, [sp]
 8024d1e:	e9cd ba02 	strd	fp, sl, [sp, #8]
 8024d22:	2304      	movs	r3, #4
 8024d24:	463a      	mov	r2, r7
 8024d26:	2100      	movs	r1, #0
 8024d28:	4630      	mov	r0, r6
 8024d2a:	f7fe ffdd 	bl	8023ce8 <lfs_bd_read>
        if (err) {
 8024d2e:	2800      	cmp	r0, #0
 8024d30:	d1ca      	bne.n	8024cc8 <lfs_ctz_find.constprop.0+0x20>
        current -= 1 << skip;
 8024d32:	2301      	movs	r3, #1
 8024d34:	40a3      	lsls	r3, r4
 8024d36:	1aed      	subs	r5, r5, r3
 8024d38:	e7da      	b.n	8024cf0 <lfs_ctz_find.constprop.0+0x48>
	...

08024d3c <lfs_file_flushedread>:
        void *buffer, lfs_size_t size) {
 8024d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (file->pos >= file->ctz.size) {
 8024d40:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
        void *buffer, lfs_size_t size) {
 8024d42:	4690      	mov	r8, r2
    if (file->pos >= file->ctz.size) {
 8024d44:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8024d46:	42b2      	cmp	r2, r6
        void *buffer, lfs_size_t size) {
 8024d48:	b085      	sub	sp, #20
 8024d4a:	4607      	mov	r7, r0
 8024d4c:	460c      	mov	r4, r1
    if (file->pos >= file->ctz.size) {
 8024d4e:	d25c      	bcs.n	8024e0a <lfs_file_flushedread+0xce>
    size = lfs_min(size, file->ctz.size - file->pos);
 8024d50:	1ab6      	subs	r6, r6, r2
 8024d52:	429e      	cmp	r6, r3
 8024d54:	bf28      	it	cs
 8024d56:	461e      	movcs	r6, r3
            int err = lfs_dir_getread(lfs, &file->m,
 8024d58:	f8df b0b4 	ldr.w	fp, [pc, #180]	@ 8024e10 <lfs_file_flushedread+0xd4>
    nsize = size;
 8024d5c:	46b1      	mov	r9, r6
 8024d5e:	f101 0a40 	add.w	sl, r1, #64	@ 0x40
    while (nsize > 0) {
 8024d62:	f1b9 0f00 	cmp.w	r9, #0
 8024d66:	d101      	bne.n	8024d6c <lfs_file_flushedread+0x30>
    return size;
 8024d68:	4630      	mov	r0, r6
 8024d6a:	e018      	b.n	8024d9e <lfs_file_flushedread+0x62>
        if (!(file->flags & LFS_F_READING) ||
 8024d6c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8024d6e:	0351      	lsls	r1, r2, #13
 8024d70:	d504      	bpl.n	8024d7c <lfs_file_flushedread+0x40>
                file->off == lfs->cfg->block_size) {
 8024d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
        if (!(file->flags & LFS_F_READING) ||
 8024d74:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8024d76:	69db      	ldr	r3, [r3, #28]
 8024d78:	4299      	cmp	r1, r3
 8024d7a:	d11b      	bne.n	8024db4 <lfs_file_flushedread+0x78>
            if (!(file->flags & LFS_F_INLINE)) {
 8024d7c:	02d2      	lsls	r2, r2, #11
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8024d7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            if (!(file->flags & LFS_F_INLINE)) {
 8024d80:	d410      	bmi.n	8024da4 <lfs_file_flushedread+0x68>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8024d82:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8024d86:	9202      	str	r2, [sp, #8]
 8024d88:	f104 0238 	add.w	r2, r4, #56	@ 0x38
 8024d8c:	e9cd 3200 	strd	r3, r2, [sp]
 8024d90:	4651      	mov	r1, sl
 8024d92:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8024d96:	4638      	mov	r0, r7
 8024d98:	f7ff ff86 	bl	8024ca8 <lfs_ctz_find.constprop.0>
                if (err) {
 8024d9c:	b130      	cbz	r0, 8024dac <lfs_file_flushedread+0x70>
}
 8024d9e:	b005      	add	sp, #20
 8024da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                file->block = LFS_BLOCK_INLINE;
 8024da4:	f06f 0201 	mvn.w	r2, #1
                file->off = file->pos;
 8024da8:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
            file->flags |= LFS_F_READING;
 8024dac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8024dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8024db2:	6323      	str	r3, [r4, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8024db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8024db6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8024db8:	69db      	ldr	r3, [r3, #28]
        if (file->flags & LFS_F_INLINE) {
 8024dba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            int err = lfs_dir_getread(lfs, &file->m,
 8024dbc:	9201      	str	r2, [sp, #4]
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8024dbe:	1a9d      	subs	r5, r3, r2
 8024dc0:	454d      	cmp	r5, r9
 8024dc2:	bf28      	it	cs
 8024dc4:	464d      	movcs	r5, r9
        if (file->flags & LFS_F_INLINE) {
 8024dc6:	f411 1180 	ands.w	r1, r1, #1048576	@ 0x100000
            int err = lfs_dir_getread(lfs, &file->m,
 8024dca:	e9cd 8502 	strd	r8, r5, [sp, #8]
        if (file->flags & LFS_F_INLINE) {
 8024dce:	d015      	beq.n	8024dfc <lfs_file_flushedread+0xc0>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8024dd0:	88a2      	ldrh	r2, [r4, #4]
            int err = lfs_dir_getread(lfs, &file->m,
 8024dd2:	ea4b 2282 	orr.w	r2, fp, r2, lsl #10
 8024dd6:	9200      	str	r2, [sp, #0]
 8024dd8:	f104 0108 	add.w	r1, r4, #8
 8024ddc:	4652      	mov	r2, sl
 8024dde:	4638      	mov	r0, r7
 8024de0:	f7ff fafe 	bl	80243e0 <lfs_dir_getread.constprop.0>
            if (err) {
 8024de4:	2800      	cmp	r0, #0
 8024de6:	d1da      	bne.n	8024d9e <lfs_file_flushedread+0x62>
        file->pos += diff;
 8024de8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024dea:	442b      	add	r3, r5
 8024dec:	6363      	str	r3, [r4, #52]	@ 0x34
        file->off += diff;
 8024dee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8024df0:	442b      	add	r3, r5
 8024df2:	63e3      	str	r3, [r4, #60]	@ 0x3c
        data += diff;
 8024df4:	44a8      	add	r8, r5
        nsize -= diff;
 8024df6:	eba9 0905 	sub.w	r9, r9, r5
 8024dfa:	e7b2      	b.n	8024d62 <lfs_file_flushedread+0x26>
            int err = lfs_bd_read(lfs,
 8024dfc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8024dfe:	9200      	str	r2, [sp, #0]
 8024e00:	4638      	mov	r0, r7
 8024e02:	4652      	mov	r2, sl
 8024e04:	f7fe ff70 	bl	8023ce8 <lfs_bd_read>
 8024e08:	e7ec      	b.n	8024de4 <lfs_file_flushedread+0xa8>
        return 0;
 8024e0a:	2000      	movs	r0, #0
 8024e0c:	e7c7      	b.n	8024d9e <lfs_file_flushedread+0x62>
 8024e0e:	bf00      	nop
 8024e10:	20100000 	.word	0x20100000

08024e14 <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
 8024e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e18:	b089      	sub	sp, #36	@ 0x24
 8024e1a:	4606      	mov	r6, r0
 8024e1c:	e9dd 0a12 	ldrd	r0, sl, [sp, #72]	@ 0x48
 8024e20:	460f      	mov	r7, r1
 8024e22:	4690      	mov	r8, r2
 8024e24:	461d      	mov	r5, r3
    if (size == 0) {
 8024e26:	b388      	cbz	r0, 8024e8c <lfs_ctz_traverse+0x78>
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8024e28:	3801      	subs	r0, #1
 8024e2a:	9005      	str	r0, [sp, #20]
 8024e2c:	a905      	add	r1, sp, #20
 8024e2e:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 8024e30:	f7ff ff1d 	bl	8024c6e <lfs_ctz_index.isra.0>
        err = lfs_bd_read(lfs,
 8024e34:	f10d 0b18 	add.w	fp, sp, #24
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8024e38:	4604      	mov	r4, r0
        int err = cb(data, head);
 8024e3a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8024e3c:	4629      	mov	r1, r5
 8024e3e:	47d0      	blx	sl
        if (err) {
 8024e40:	bb20      	cbnz	r0, 8024e8c <lfs_ctz_traverse+0x78>
        if (index == 0) {
 8024e42:	b31c      	cbz	r4, 8024e8c <lfs_ctz_traverse+0x78>
        int count = 2 - (index & 1);
 8024e44:	f004 0901 	and.w	r9, r4, #1
 8024e48:	f1c9 0302 	rsb	r3, r9, #2
                pcache, rcache, count*sizeof(head),
 8024e4c:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8024e4e:	e9cd 5000 	strd	r5, r0, [sp]
 8024e52:	e9cd b302 	strd	fp, r3, [sp, #8]
 8024e56:	4642      	mov	r2, r8
 8024e58:	4639      	mov	r1, r7
 8024e5a:	4630      	mov	r0, r6
 8024e5c:	f7fe ff44 	bl	8023ce8 <lfs_bd_read>
        if (err) {
 8024e60:	b9a0      	cbnz	r0, 8024e8c <lfs_ctz_traverse+0x78>
        for (int i = 0; i < count-1; i++) {
 8024e62:	43e5      	mvns	r5, r4
 8024e64:	f005 0501 	and.w	r5, r5, #1
 8024e68:	42a8      	cmp	r0, r5
 8024e6a:	db07      	blt.n	8024e7c <lfs_ctz_traverse+0x68>
        head = heads[count-1];
 8024e6c:	ab08      	add	r3, sp, #32
 8024e6e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8024e72:	3c02      	subs	r4, #2
 8024e74:	f855 5c08 	ldr.w	r5, [r5, #-8]
        index -= count;
 8024e78:	444c      	add	r4, r9
    while (true) {
 8024e7a:	e7de      	b.n	8024e3a <lfs_ctz_traverse+0x26>
            err = cb(data, heads[i]);
 8024e7c:	9906      	ldr	r1, [sp, #24]
 8024e7e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8024e80:	47d0      	blx	sl
 8024e82:	4603      	mov	r3, r0
        for (int i = 0; i < count-1; i++) {
 8024e84:	2001      	movs	r0, #1
            if (err) {
 8024e86:	2b00      	cmp	r3, #0
 8024e88:	d0ee      	beq.n	8024e68 <lfs_ctz_traverse+0x54>
                return err;
 8024e8a:	4618      	mov	r0, r3
}
 8024e8c:	b009      	add	sp, #36	@ 0x24
 8024e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024e94 <lfs_fs_traverse_>:
        bool includeorphans) {
 8024e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e98:	b093      	sub	sp, #76	@ 0x4c
 8024e9a:	4604      	mov	r4, r0
 8024e9c:	460d      	mov	r5, r1
 8024e9e:	4616      	mov	r6, r2
    lfs_mdir_t dir = {.tail = {0, 1}};
 8024ea0:	2100      	movs	r1, #0
 8024ea2:	221c      	movs	r2, #28
 8024ea4:	a80a      	add	r0, sp, #40	@ 0x28
        bool includeorphans) {
 8024ea6:	9305      	str	r3, [sp, #20]
    lfs_mdir_t dir = {.tail = {0, 1}};
 8024ea8:	f018 fafc 	bl	803d4a4 <memset>
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8024eac:	4b55      	ldr	r3, [pc, #340]	@ (8025004 <lfs_fs_traverse_+0x170>)
 8024eae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8024eb2:	f10d 0a18 	add.w	sl, sp, #24
 8024eb6:	e88a 0003 	stmia.w	sl, {r0, r1}
    lfs_mdir_t dir = {.tail = {0, 1}};
 8024eba:	2701      	movs	r7, #1
 8024ebc:	9711      	str	r7, [sp, #68]	@ 0x44
    lfs_size_t tortoise_i = 1;
 8024ebe:	46b8      	mov	r8, r7
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8024ec0:	f240 2b02 	movw	fp, #514	@ 0x202
    while (!lfs_pair_isnull(dir.tail)) {
 8024ec4:	a810      	add	r0, sp, #64	@ 0x40
 8024ec6:	f7fe fe19 	bl	8023afc <lfs_pair_isnull>
 8024eca:	b120      	cbz	r0, 8024ed6 <lfs_fs_traverse_+0x42>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8024ecc:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 8024ece:	2f00      	cmp	r7, #0
 8024ed0:	d16a      	bne.n	8024fa8 <lfs_fs_traverse_+0x114>
    return 0;
 8024ed2:	4638      	mov	r0, r7
 8024ed4:	e00d      	b.n	8024ef2 <lfs_fs_traverse_+0x5e>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8024ed6:	4651      	mov	r1, sl
 8024ed8:	a810      	add	r0, sp, #64	@ 0x40
 8024eda:	f7fe fe2a 	bl	8023b32 <lfs_pair_issync>
 8024ede:	b158      	cbz	r0, 8024ef8 <lfs_fs_traverse_+0x64>
            LFS_WARN("Cycle detected in tail list");
 8024ee0:	4b49      	ldr	r3, [pc, #292]	@ (8025008 <lfs_fs_traverse_+0x174>)
 8024ee2:	494a      	ldr	r1, [pc, #296]	@ (802500c <lfs_fs_traverse_+0x178>)
 8024ee4:	484a      	ldr	r0, [pc, #296]	@ (8025010 <lfs_fs_traverse_+0x17c>)
 8024ee6:	f241 2222 	movw	r2, #4642	@ 0x1222
 8024eea:	f018 f9bf 	bl	803d26c <iprintf>
            return LFS_ERR_CORRUPT;
 8024eee:	f06f 0053 	mvn.w	r0, #83	@ 0x53
}
 8024ef2:	b013      	add	sp, #76	@ 0x4c
 8024ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (tortoise_i == tortoise_period) {
 8024ef8:	45b8      	cmp	r8, r7
            tortoise[0] = dir.tail[0];
 8024efa:	9910      	ldr	r1, [sp, #64]	@ 0x40
        if (tortoise_i == tortoise_period) {
 8024efc:	d105      	bne.n	8024f0a <lfs_fs_traverse_+0x76>
            tortoise[1] = dir.tail[1];
 8024efe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
            tortoise[0] = dir.tail[0];
 8024f00:	9106      	str	r1, [sp, #24]
            tortoise_period *= 2;
 8024f02:	ea4f 0748 	mov.w	r7, r8, lsl #1
            tortoise[1] = dir.tail[1];
 8024f06:	9307      	str	r3, [sp, #28]
            tortoise_i = 0;
 8024f08:	4680      	mov	r8, r0
            int err = cb(data, dir.tail[i]);
 8024f0a:	4630      	mov	r0, r6
        tortoise_i += 1;
 8024f0c:	f108 0801 	add.w	r8, r8, #1
            int err = cb(data, dir.tail[i]);
 8024f10:	47a8      	blx	r5
            if (err) {
 8024f12:	2800      	cmp	r0, #0
 8024f14:	d1ed      	bne.n	8024ef2 <lfs_fs_traverse_+0x5e>
            int err = cb(data, dir.tail[i]);
 8024f16:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024f18:	4630      	mov	r0, r6
 8024f1a:	47a8      	blx	r5
            if (err) {
 8024f1c:	2800      	cmp	r0, #0
 8024f1e:	d1e8      	bne.n	8024ef2 <lfs_fs_traverse_+0x5e>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8024f20:	aa10      	add	r2, sp, #64	@ 0x40
 8024f22:	a90a      	add	r1, sp, #40	@ 0x28
 8024f24:	4620      	mov	r0, r4
 8024f26:	f7ff fd4f 	bl	80249c8 <lfs_dir_fetch>
        if (err) {
 8024f2a:	2800      	cmp	r0, #0
 8024f2c:	d1e1      	bne.n	8024ef2 <lfs_fs_traverse_+0x5e>
 8024f2e:	4681      	mov	r9, r0
        for (uint16_t id = 0; id < dir.count; id++) {
 8024f30:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8024f34:	fa1f f389 	uxth.w	r3, r9
 8024f38:	429a      	cmp	r2, r3
 8024f3a:	d9c3      	bls.n	8024ec4 <lfs_fs_traverse_+0x30>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8024f3c:	4b35      	ldr	r3, [pc, #212]	@ (8025014 <lfs_fs_traverse_+0x180>)
 8024f3e:	ea03 2389 	and.w	r3, r3, r9, lsl #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8024f42:	aa08      	add	r2, sp, #32
 8024f44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8024f48:	9200      	str	r2, [sp, #0]
 8024f4a:	f043 0308 	orr.w	r3, r3, #8
 8024f4e:	4a32      	ldr	r2, [pc, #200]	@ (8025018 <lfs_fs_traverse_+0x184>)
 8024f50:	a90a      	add	r1, sp, #40	@ 0x28
 8024f52:	4620      	mov	r0, r4
 8024f54:	f7ff f82a 	bl	8023fac <lfs_dir_get>
            if (tag < 0) {
 8024f58:	2800      	cmp	r0, #0
 8024f5a:	da04      	bge.n	8024f66 <lfs_fs_traverse_+0xd2>
                if (tag == LFS_ERR_NOENT) {
 8024f5c:	1c83      	adds	r3, r0, #2
 8024f5e:	d1c8      	bne.n	8024ef2 <lfs_fs_traverse_+0x5e>
        for (uint16_t id = 0; id < dir.count; id++) {
 8024f60:	f109 0901 	add.w	r9, r9, #1
 8024f64:	e7e4      	b.n	8024f30 <lfs_fs_traverse_+0x9c>
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8024f66:	ebbb 5f10 	cmp.w	fp, r0, lsr #20
    return (tag & 0x7ff00000) >> 20;
 8024f6a:	ea4f 5310 	mov.w	r3, r0, lsr #20
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8024f6e:	d10c      	bne.n	8024f8a <lfs_fs_traverse_+0xf6>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8024f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024f72:	9300      	str	r3, [sp, #0]
 8024f74:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024f78:	9b08      	ldr	r3, [sp, #32]
 8024f7a:	4622      	mov	r2, r4
 8024f7c:	2100      	movs	r1, #0
 8024f7e:	4620      	mov	r0, r4
 8024f80:	f7ff ff48 	bl	8024e14 <lfs_ctz_traverse>
                    if (err) {
 8024f84:	2800      	cmp	r0, #0
 8024f86:	d0eb      	beq.n	8024f60 <lfs_fs_traverse_+0xcc>
 8024f88:	e7b3      	b.n	8024ef2 <lfs_fs_traverse_+0x5e>
            } else if (includeorphans &&
 8024f8a:	9a05      	ldr	r2, [sp, #20]
 8024f8c:	2a00      	cmp	r2, #0
 8024f8e:	d0e7      	beq.n	8024f60 <lfs_fs_traverse_+0xcc>
 8024f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024f94:	d1e4      	bne.n	8024f60 <lfs_fs_traverse_+0xcc>
                    err = cb(data, (&ctz.head)[i]);
 8024f96:	9908      	ldr	r1, [sp, #32]
 8024f98:	4630      	mov	r0, r6
 8024f9a:	47a8      	blx	r5
                    if (err) {
 8024f9c:	2800      	cmp	r0, #0
 8024f9e:	d1a8      	bne.n	8024ef2 <lfs_fs_traverse_+0x5e>
                    err = cb(data, (&ctz.head)[i]);
 8024fa0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024fa2:	4630      	mov	r0, r6
 8024fa4:	47a8      	blx	r5
 8024fa6:	e7ed      	b.n	8024f84 <lfs_fs_traverse_+0xf0>
        if (f->type != LFS_TYPE_REG) {
 8024fa8:	79bb      	ldrb	r3, [r7, #6]
 8024faa:	2b01      	cmp	r3, #1
 8024fac:	d001      	beq.n	8024fb2 <lfs_fs_traverse_+0x11e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8024fae:	683f      	ldr	r7, [r7, #0]
 8024fb0:	e78d      	b.n	8024ece <lfs_fs_traverse_+0x3a>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8024fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024fb4:	f403 1388 	and.w	r3, r3, #1114112	@ 0x110000
 8024fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8024fbc:	d013      	beq.n	8024fe6 <lfs_fs_traverse_+0x152>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8024fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024fc0:	f403 1390 	and.w	r3, r3, #1179648	@ 0x120000
 8024fc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8024fc8:	d1f1      	bne.n	8024fae <lfs_fs_traverse_+0x11a>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8024fca:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024fd0:	9300      	str	r3, [sp, #0]
 8024fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024fd4:	4622      	mov	r2, r4
 8024fd6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8024fda:	4620      	mov	r0, r4
 8024fdc:	f7ff ff1a 	bl	8024e14 <lfs_ctz_traverse>
            if (err) {
 8024fe0:	2800      	cmp	r0, #0
 8024fe2:	d0e4      	beq.n	8024fae <lfs_fs_traverse_+0x11a>
 8024fe4:	e785      	b.n	8024ef2 <lfs_fs_traverse_+0x5e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8024fe6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8024fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024fec:	9300      	str	r3, [sp, #0]
 8024fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024ff0:	4622      	mov	r2, r4
 8024ff2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8024ff6:	4620      	mov	r0, r4
 8024ff8:	f7ff ff0c 	bl	8024e14 <lfs_ctz_traverse>
            if (err) {
 8024ffc:	2800      	cmp	r0, #0
 8024ffe:	d0de      	beq.n	8024fbe <lfs_fs_traverse_+0x12a>
 8025000:	e777      	b.n	8024ef2 <lfs_fs_traverse_+0x5e>
 8025002:	bf00      	nop
 8025004:	0803f5e8 	.word	0x0803f5e8
 8025008:	0803f6b1 	.word	0x0803f6b1
 802500c:	0803f7e4 	.word	0x0803f7e4
 8025010:	0803f8b9 	.word	0x0803f8b9
 8025014:	03fffc00 	.word	0x03fffc00
 8025018:	700ffc00 	.word	0x700ffc00

0802501c <lfs_alloc_scan>:
static int lfs_alloc_scan(lfs_t *lfs) {
 802501c:	b538      	push	{r3, r4, r5, lr}
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 802501e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8025020:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8025022:	4413      	add	r3, r2
            % lfs->block_count;
 8025024:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8025026:	fbb3 f1f2 	udiv	r1, r3, r2
 802502a:	fb02 3311 	mls	r3, r2, r1, r3
    lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) 
 802502e:	6543      	str	r3, [r0, #84]	@ 0x54
            8*lfs->cfg->lookahead_size,
 8025030:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8025032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8025034:	6e03      	ldr	r3, [r0, #96]	@ 0x60
    lfs->lookahead.size = lfs_min(
 8025036:	00d1      	lsls	r1, r2, #3
    lfs->lookahead.next = 0;
 8025038:	2500      	movs	r5, #0
    lfs->lookahead.size = lfs_min(
 802503a:	4299      	cmp	r1, r3
 802503c:	bf94      	ite	ls
 802503e:	6581      	strls	r1, [r0, #88]	@ 0x58
 8025040:	6583      	strhi	r3, [r0, #88]	@ 0x58
static int lfs_alloc_scan(lfs_t *lfs) {
 8025042:	4604      	mov	r4, r0
    lfs->lookahead.next = 0;
 8025044:	65c5      	str	r5, [r0, #92]	@ 0x5c
    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8025046:	4629      	mov	r1, r5
 8025048:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 802504a:	f018 fa2b 	bl	803d4a4 <memset>
    int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, true);
 802504e:	4906      	ldr	r1, [pc, #24]	@ (8025068 <lfs_alloc_scan+0x4c>)
 8025050:	2301      	movs	r3, #1
 8025052:	4622      	mov	r2, r4
 8025054:	4620      	mov	r0, r4
 8025056:	f7ff ff1d 	bl	8024e94 <lfs_fs_traverse_>
    if (err) {
 802505a:	b118      	cbz	r0, 8025064 <lfs_alloc_scan+0x48>
    lfs->lookahead.next = 0;
 802505c:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
    lfs->lookahead.ckpoint = lfs->block_count;
 8025060:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8025062:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8025064:	bd38      	pop	{r3, r4, r5, pc}
 8025066:	bf00      	nop
 8025068:	08023bcf 	.word	0x08023bcf

0802506c <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 802506c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802506e:	4604      	mov	r4, r0
 8025070:	460d      	mov	r5, r1
        while (lfs->lookahead.next < lfs->lookahead.size) {
 8025072:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025074:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8025076:	4283      	cmp	r3, r0
 8025078:	d314      	bcc.n	80250a4 <lfs_alloc+0x38>
        if (lfs->lookahead.ckpoint <= 0) {
 802507a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 802507c:	2a00      	cmp	r2, #0
 802507e:	d13a      	bne.n	80250f6 <lfs_alloc+0x8a>
            LFS_ERROR("No more free space 0x%"PRIx32,
 8025080:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8025082:	4821      	ldr	r0, [pc, #132]	@ (8025108 <lfs_alloc+0x9c>)
 8025084:	4413      	add	r3, r2
 8025086:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8025088:	9000      	str	r0, [sp, #0]
 802508a:	fbb3 f1f2 	udiv	r1, r3, r2
 802508e:	481f      	ldr	r0, [pc, #124]	@ (802510c <lfs_alloc+0xa0>)
 8025090:	fb02 3311 	mls	r3, r2, r1, r3
 8025094:	491e      	ldr	r1, [pc, #120]	@ (8025110 <lfs_alloc+0xa4>)
 8025096:	f240 22b1 	movw	r2, #689	@ 0x2b1
 802509a:	f018 f8e7 	bl	803d26c <iprintf>
            return LFS_ERR_NOSPC;
 802509e:	f06f 001b 	mvn.w	r0, #27
 80250a2:	e020      	b.n	80250e6 <lfs_alloc+0x7a>
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80250a4:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80250a6:	08da      	lsrs	r2, r3, #3
                    & (1U << (lfs->lookahead.next % 8)))) {
 80250a8:	f003 0607 	and.w	r6, r3, #7
            if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80250ac:	5c8a      	ldrb	r2, [r1, r2]
 80250ae:	40f2      	lsrs	r2, r6
 80250b0:	07d2      	lsls	r2, r2, #31
 80250b2:	d41a      	bmi.n	80250ea <lfs_alloc+0x7e>
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 80250b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80250b6:	4413      	add	r3, r2
                        % lfs->block_count;
 80250b8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80250ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80250be:	fb02 3310 	mls	r3, r2, r0, r3
                *block = (lfs->lookahead.start + lfs->lookahead.next)
 80250c2:	602b      	str	r3, [r5, #0]
                    if (lfs->lookahead.next >= lfs->lookahead.size
 80250c4:	6da5      	ldr	r5, [r4, #88]	@ 0x58
                    lfs->lookahead.next += 1;
 80250c6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 80250c8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
                    lfs->lookahead.next += 1;
 80250ca:	3301      	adds	r3, #1
                    lfs->lookahead.ckpoint -= 1;
 80250cc:	3a01      	subs	r2, #1
                    if (lfs->lookahead.next >= lfs->lookahead.size
 80250ce:	42ab      	cmp	r3, r5
                    lfs->lookahead.next += 1;
 80250d0:	65e3      	str	r3, [r4, #92]	@ 0x5c
                    lfs->lookahead.ckpoint -= 1;
 80250d2:	6622      	str	r2, [r4, #96]	@ 0x60
                    if (lfs->lookahead.next >= lfs->lookahead.size
 80250d4:	d215      	bcs.n	8025102 <lfs_alloc+0x96>
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80250d6:	08da      	lsrs	r2, r3, #3
                                & (1U << (lfs->lookahead.next % 8)))) {
 80250d8:	f003 0307 	and.w	r3, r3, #7
                            || !(lfs->lookahead.buffer[lfs->lookahead.next / 8]
 80250dc:	5c88      	ldrb	r0, [r1, r2]
 80250de:	40d8      	lsrs	r0, r3
 80250e0:	f010 0001 	ands.w	r0, r0, #1
 80250e4:	d1ef      	bne.n	80250c6 <lfs_alloc+0x5a>
}
 80250e6:	b002      	add	sp, #8
 80250e8:	bd70      	pop	{r4, r5, r6, pc}
            lfs->lookahead.next += 1;
 80250ea:	3301      	adds	r3, #1
 80250ec:	65e3      	str	r3, [r4, #92]	@ 0x5c
            lfs->lookahead.ckpoint -= 1;
 80250ee:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80250f0:	3b01      	subs	r3, #1
 80250f2:	6623      	str	r3, [r4, #96]	@ 0x60
 80250f4:	e7be      	b.n	8025074 <lfs_alloc+0x8>
        int err = lfs_alloc_scan(lfs);
 80250f6:	4620      	mov	r0, r4
 80250f8:	f7ff ff90 	bl	802501c <lfs_alloc_scan>
        if(err) {
 80250fc:	2800      	cmp	r0, #0
 80250fe:	d0b8      	beq.n	8025072 <lfs_alloc+0x6>
 8025100:	e7f1      	b.n	80250e6 <lfs_alloc+0x7a>
                        return 0;
 8025102:	2000      	movs	r0, #0
 8025104:	e7ef      	b.n	80250e6 <lfs_alloc+0x7a>
 8025106:	bf00      	nop
 8025108:	0803f6b1 	.word	0x0803f6b1
 802510c:	0803f8e4 	.word	0x0803f8e4
 8025110:	0803f7e4 	.word	0x0803f7e4

08025114 <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8025114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8025116:	460c      	mov	r4, r1
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8025118:	3104      	adds	r1, #4
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 802511a:	4606      	mov	r6, r0
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 802511c:	f7ff ffa6 	bl	802506c <lfs_alloc>
        if (err) {
 8025120:	4605      	mov	r5, r0
 8025122:	bb80      	cbnz	r0, 8025186 <lfs_dir_alloc+0x72>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8025124:	4621      	mov	r1, r4
 8025126:	4630      	mov	r0, r6
 8025128:	f7ff ffa0 	bl	802506c <lfs_alloc>
        if (err) {
 802512c:	4605      	mov	r5, r0
 802512e:	bb50      	cbnz	r0, 8025186 <lfs_dir_alloc+0x72>
    dir->rev = 0;
 8025130:	4622      	mov	r2, r4
    int err = lfs_bd_read(lfs,
 8025132:	2304      	movs	r3, #4
    dir->rev = 0;
 8025134:	f842 0f08 	str.w	r0, [r2, #8]!
    int err = lfs_bd_read(lfs,
 8025138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802513c:	9001      	str	r0, [sp, #4]
 802513e:	6822      	ldr	r2, [r4, #0]
 8025140:	9200      	str	r2, [sp, #0]
 8025142:	4601      	mov	r1, r0
 8025144:	4632      	mov	r2, r6
 8025146:	4630      	mov	r0, r6
 8025148:	f7fe fdce 	bl	8023ce8 <lfs_bd_read>
    if (err && err != LFS_ERR_CORRUPT) {
 802514c:	b110      	cbz	r0, 8025154 <lfs_dir_alloc+0x40>
 802514e:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 8025152:	d11b      	bne.n	802518c <lfs_dir_alloc+0x78>
    if (lfs->cfg->block_cycles > 0) {
 8025154:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8025156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8025158:	2a00      	cmp	r2, #0
 802515a:	dd0b      	ble.n	8025174 <lfs_dir_alloc+0x60>
    return lfs_aligndown(a + alignment-1, alignment);
 802515c:	68a3      	ldr	r3, [r4, #8]
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 802515e:	3201      	adds	r2, #1
 8025160:	f042 0201 	orr.w	r2, r2, #1
 8025164:	3b01      	subs	r3, #1
 8025166:	4413      	add	r3, r2
    return a - (a % alignment);
 8025168:	fbb3 f1f2 	udiv	r1, r3, r2
 802516c:	fb02 3211 	mls	r2, r2, r1, r3
 8025170:	1a9b      	subs	r3, r3, r2
 8025172:	60a3      	str	r3, [r4, #8]
    dir->etag = 0xffffffff;
 8025174:	f04f 33ff 	mov.w	r3, #4294967295
 8025178:	2204      	movs	r2, #4
 802517a:	e9c4 2303 	strd	r2, r3, [r4, #12]
    dir->count = 0;
 802517e:	2200      	movs	r2, #0
    dir->tail[0] = LFS_BLOCK_NULL;
 8025180:	e9c4 2305 	strd	r2, r3, [r4, #20]
    dir->tail[1] = LFS_BLOCK_NULL;
 8025184:	61e3      	str	r3, [r4, #28]
}
 8025186:	4628      	mov	r0, r5
 8025188:	b004      	add	sp, #16
 802518a:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 802518c:	4605      	mov	r5, r0
 802518e:	e7fa      	b.n	8025186 <lfs_dir_alloc+0x72>

08025190 <lfs_fs_size_>:

static lfs_ssize_t lfs_fs_size_(lfs_t *lfs) {
 8025190:	b507      	push	{r0, r1, r2, lr}
    lfs_size_t size = 0;
 8025192:	2300      	movs	r3, #0
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8025194:	4904      	ldr	r1, [pc, #16]	@ (80251a8 <lfs_fs_size_+0x18>)
    lfs_size_t size = 0;
 8025196:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, false);
 8025198:	aa01      	add	r2, sp, #4
 802519a:	f7ff fe7b 	bl	8024e94 <lfs_fs_traverse_>
    if (err) {
 802519e:	b900      	cbnz	r0, 80251a2 <lfs_fs_size_+0x12>
        return err;
    }

    return size;
 80251a0:	9801      	ldr	r0, [sp, #4]
}
 80251a2:	b003      	add	sp, #12
 80251a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80251a8:	08023c81 	.word	0x08023c81

080251ac <lfs_cache_zero.isra.0>:
static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 80251ac:	b510      	push	{r4, lr}
 80251ae:	460c      	mov	r4, r1
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 80251b0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80251b2:	68e0      	ldr	r0, [r4, #12]
 80251b4:	21ff      	movs	r1, #255	@ 0xff
 80251b6:	f018 f975 	bl	803d4a4 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80251ba:	f04f 33ff 	mov.w	r3, #4294967295
 80251be:	6023      	str	r3, [r4, #0]
}
 80251c0:	bd10      	pop	{r4, pc}
	...

080251c4 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80251c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs->block_count = cfg->block_count;  // May be 0
 80251c6:	6a0b      	ldr	r3, [r1, #32]
    lfs->cfg = cfg;
 80251c8:	6681      	str	r1, [r0, #104]	@ 0x68
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80251ca:	460d      	mov	r5, r1
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80251cc:	6949      	ldr	r1, [r1, #20]
    lfs->block_count = cfg->block_count;  // May be 0
 80251ce:	66c3      	str	r3, [r0, #108]	@ 0x6c
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80251d0:	4604      	mov	r4, r0
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80251d2:	b931      	cbnz	r1, 80251e2 <lfs_init+0x1e>
 80251d4:	4b77      	ldr	r3, [pc, #476]	@ (80253b4 <lfs_init+0x1f0>)
 80251d6:	4a78      	ldr	r2, [pc, #480]	@ (80253b8 <lfs_init+0x1f4>)
 80251d8:	f241 0152 	movw	r1, #4178	@ 0x1052
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80251dc:	4877      	ldr	r0, [pc, #476]	@ (80253bc <lfs_init+0x1f8>)
 80251de:	f017 f9a3 	bl	803c528 <__assert_func>
 80251e2:	69aa      	ldr	r2, [r5, #24]
 80251e4:	b922      	cbnz	r2, 80251f0 <lfs_init+0x2c>
 80251e6:	4b76      	ldr	r3, [pc, #472]	@ (80253c0 <lfs_init+0x1fc>)
 80251e8:	4a73      	ldr	r2, [pc, #460]	@ (80253b8 <lfs_init+0x1f4>)
 80251ea:	f241 0153 	movw	r1, #4179	@ 0x1053
 80251ee:	e7f5      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80251f0:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 80251f2:	b927      	cbnz	r7, 80251fe <lfs_init+0x3a>
 80251f4:	4b73      	ldr	r3, [pc, #460]	@ (80253c4 <lfs_init+0x200>)
 80251f6:	4a70      	ldr	r2, [pc, #448]	@ (80253b8 <lfs_init+0x1f4>)
 80251f8:	f241 0154 	movw	r1, #4180	@ 0x1054
 80251fc:	e7ee      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80251fe:	fbb7 f3f1 	udiv	r3, r7, r1
 8025202:	fb01 7313 	mls	r3, r1, r3, r7
 8025206:	b123      	cbz	r3, 8025212 <lfs_init+0x4e>
 8025208:	4b6f      	ldr	r3, [pc, #444]	@ (80253c8 <lfs_init+0x204>)
 802520a:	4a6b      	ldr	r2, [pc, #428]	@ (80253b8 <lfs_init+0x1f4>)
 802520c:	f241 0158 	movw	r1, #4184	@ 0x1058
 8025210:	e7e4      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8025212:	fbb7 f3f2 	udiv	r3, r7, r2
 8025216:	fb02 7313 	mls	r3, r2, r3, r7
 802521a:	b123      	cbz	r3, 8025226 <lfs_init+0x62>
 802521c:	4b6b      	ldr	r3, [pc, #428]	@ (80253cc <lfs_init+0x208>)
 802521e:	4a66      	ldr	r2, [pc, #408]	@ (80253b8 <lfs_init+0x1f4>)
 8025220:	f241 0159 	movw	r1, #4185	@ 0x1059
 8025224:	e7da      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8025226:	69eb      	ldr	r3, [r5, #28]
 8025228:	fbb3 f6f7 	udiv	r6, r3, r7
 802522c:	fb07 3616 	mls	r6, r7, r6, r3
 8025230:	b126      	cbz	r6, 802523c <lfs_init+0x78>
 8025232:	4b67      	ldr	r3, [pc, #412]	@ (80253d0 <lfs_init+0x20c>)
 8025234:	4a60      	ldr	r2, [pc, #384]	@ (80253b8 <lfs_init+0x1f4>)
 8025236:	f241 015a 	movw	r1, #4186	@ 0x105a
 802523a:	e7cf      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->block_size >= 128);
 802523c:	2b7f      	cmp	r3, #127	@ 0x7f
 802523e:	d804      	bhi.n	802524a <lfs_init+0x86>
 8025240:	4b64      	ldr	r3, [pc, #400]	@ (80253d4 <lfs_init+0x210>)
 8025242:	4a5d      	ldr	r2, [pc, #372]	@ (80253b8 <lfs_init+0x1f4>)
 8025244:	f241 015d 	movw	r1, #4189	@ 0x105d
 8025248:	e7c8      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 802524a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 802524c:	b922      	cbnz	r2, 8025258 <lfs_init+0x94>
 802524e:	4b62      	ldr	r3, [pc, #392]	@ (80253d8 <lfs_init+0x214>)
 8025250:	4a59      	ldr	r2, [pc, #356]	@ (80253b8 <lfs_init+0x1f4>)
 8025252:	f241 0169 	movw	r1, #4201	@ 0x1069
 8025256:	e7c1      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->compact_thresh == 0
 8025258:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 802525a:	b182      	cbz	r2, 802527e <lfs_init+0xba>
 802525c:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8025260:	d204      	bcs.n	802526c <lfs_init+0xa8>
 8025262:	4b5e      	ldr	r3, [pc, #376]	@ (80253dc <lfs_init+0x218>)
 8025264:	4a54      	ldr	r2, [pc, #336]	@ (80253b8 <lfs_init+0x1f4>)
 8025266:	f241 016f 	movw	r1, #4207	@ 0x106f
 802526a:	e7b7      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->compact_thresh == (lfs_size_t)-1
 802526c:	1c51      	adds	r1, r2, #1
 802526e:	d006      	beq.n	802527e <lfs_init+0xba>
 8025270:	4293      	cmp	r3, r2
 8025272:	d204      	bcs.n	802527e <lfs_init+0xba>
 8025274:	4b5a      	ldr	r3, [pc, #360]	@ (80253e0 <lfs_init+0x21c>)
 8025276:	4a50      	ldr	r2, [pc, #320]	@ (80253b8 <lfs_init+0x1f4>)
 8025278:	f241 0171 	movw	r1, #4209	@ 0x1071
 802527c:	e7ae      	b.n	80251dc <lfs_init+0x18>
    if (lfs->cfg->read_buffer) {
 802527e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8025280:	b1a3      	cbz	r3, 80252ac <lfs_init+0xe8>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8025282:	60e3      	str	r3, [r4, #12]
    if (lfs->cfg->prog_buffer) {
 8025284:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8025286:	b1eb      	cbz	r3, 80252c4 <lfs_init+0x100>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8025288:	61e3      	str	r3, [r4, #28]
    lfs_cache_zero(lfs, &lfs->rcache);
 802528a:	4628      	mov	r0, r5
 802528c:	4621      	mov	r1, r4
 802528e:	f7ff ff8d 	bl	80251ac <lfs_cache_zero.isra.0>
    lfs_cache_zero(lfs, &lfs->pcache);
 8025292:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8025294:	f104 0110 	add.w	r1, r4, #16
 8025298:	f7ff ff88 	bl	80251ac <lfs_cache_zero.isra.0>
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 802529c:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 802529e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80252a0:	b9b8      	cbnz	r0, 80252d2 <lfs_init+0x10e>
 80252a2:	4b50      	ldr	r3, [pc, #320]	@ (80253e4 <lfs_init+0x220>)
 80252a4:	4a44      	ldr	r2, [pc, #272]	@ (80253b8 <lfs_init+0x1f4>)
 80252a6:	f241 0190 	movw	r1, #4240	@ 0x1090
 80252aa:	e797      	b.n	80251dc <lfs_init+0x18>
    return malloc(size);
 80252ac:	4638      	mov	r0, r7
 80252ae:	f017 f963 	bl	803c578 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80252b2:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
 80252b4:	2800      	cmp	r0, #0
 80252b6:	d1e5      	bne.n	8025284 <lfs_init+0xc0>
    lfs_deinit(lfs);
 80252b8:	4620      	mov	r0, r4
 80252ba:	f7fe febb 	bl	8024034 <lfs_deinit>
    return err;
 80252be:	f06f 000b 	mvn.w	r0, #11
 80252c2:	e073      	b.n	80253ac <lfs_init+0x1e8>
 80252c4:	4638      	mov	r0, r7
 80252c6:	f017 f957 	bl	803c578 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80252ca:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
 80252cc:	2800      	cmp	r0, #0
 80252ce:	d1dc      	bne.n	802528a <lfs_init+0xc6>
 80252d0:	e7f2      	b.n	80252b8 <lfs_init+0xf4>
    if (lfs->cfg->lookahead_buffer) {
 80252d2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80252d4:	b143      	cbz	r3, 80252e8 <lfs_init+0x124>
        lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;
 80252d6:	6663      	str	r3, [r4, #100]	@ 0x64
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80252d8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80252da:	2bff      	cmp	r3, #255	@ 0xff
 80252dc:	d90a      	bls.n	80252f4 <lfs_init+0x130>
 80252de:	4b42      	ldr	r3, [pc, #264]	@ (80253e8 <lfs_init+0x224>)
 80252e0:	4a35      	ldr	r2, [pc, #212]	@ (80253b8 <lfs_init+0x1f4>)
 80252e2:	f241 019c 	movw	r1, #4252	@ 0x109c
 80252e6:	e779      	b.n	80251dc <lfs_init+0x18>
 80252e8:	f017 f946 	bl	803c578 <malloc>
        lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80252ec:	6660      	str	r0, [r4, #100]	@ 0x64
        if (!lfs->lookahead.buffer) {
 80252ee:	2800      	cmp	r0, #0
 80252f0:	d1f2      	bne.n	80252d8 <lfs_init+0x114>
 80252f2:	e7e1      	b.n	80252b8 <lfs_init+0xf4>
        lfs->name_max = LFS_NAME_MAX;
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	bf08      	it	eq
 80252f8:	23ff      	moveq	r3, #255	@ 0xff
 80252fa:	6723      	str	r3, [r4, #112]	@ 0x70
    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80252fc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80252fe:	2b00      	cmp	r3, #0
 8025300:	da04      	bge.n	802530c <lfs_init+0x148>
 8025302:	4b3a      	ldr	r3, [pc, #232]	@ (80253ec <lfs_init+0x228>)
 8025304:	4a2c      	ldr	r2, [pc, #176]	@ (80253b8 <lfs_init+0x1f4>)
 8025306:	f241 01a2 	movw	r1, #4258	@ 0x10a2
 802530a:	e767      	b.n	80251dc <lfs_init+0x18>
        lfs->file_max = LFS_FILE_MAX;
 802530c:	bf08      	it	eq
 802530e:	f06f 4300 	mvneq.w	r3, #2147483648	@ 0x80000000
 8025312:	6763      	str	r3, [r4, #116]	@ 0x74
    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8025314:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8025316:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 802531a:	4293      	cmp	r3, r2
 802531c:	d904      	bls.n	8025328 <lfs_init+0x164>
 802531e:	4b34      	ldr	r3, [pc, #208]	@ (80253f0 <lfs_init+0x22c>)
 8025320:	4a25      	ldr	r2, [pc, #148]	@ (80253b8 <lfs_init+0x1f4>)
 8025322:	f241 01a8 	movw	r1, #4264	@ 0x10a8
 8025326:	e759      	b.n	80251dc <lfs_init+0x18>
        lfs->attr_max = LFS_ATTR_MAX;
 8025328:	2b00      	cmp	r3, #0
 802532a:	bf08      	it	eq
 802532c:	4613      	moveq	r3, r2
 802532e:	67a3      	str	r3, [r4, #120]	@ 0x78
    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8025330:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8025332:	69e9      	ldr	r1, [r5, #28]
 8025334:	4288      	cmp	r0, r1
 8025336:	d904      	bls.n	8025342 <lfs_init+0x17e>
 8025338:	4b2e      	ldr	r3, [pc, #184]	@ (80253f4 <lfs_init+0x230>)
 802533a:	4a1f      	ldr	r2, [pc, #124]	@ (80253b8 <lfs_init+0x1f4>)
 802533c:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 8025340:	e74c      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8025342:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 8025344:	1c57      	adds	r7, r2, #1
 8025346:	d020      	beq.n	802538a <lfs_init+0x1c6>
 8025348:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 802534a:	42b2      	cmp	r2, r6
 802534c:	d904      	bls.n	8025358 <lfs_init+0x194>
 802534e:	4b2a      	ldr	r3, [pc, #168]	@ (80253f8 <lfs_init+0x234>)
 8025350:	4a19      	ldr	r2, [pc, #100]	@ (80253b8 <lfs_init+0x1f4>)
 8025352:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8025356:	e741      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8025358:	429a      	cmp	r2, r3
 802535a:	d904      	bls.n	8025366 <lfs_init+0x1a2>
 802535c:	4b27      	ldr	r3, [pc, #156]	@ (80253fc <lfs_init+0x238>)
 802535e:	4a16      	ldr	r2, [pc, #88]	@ (80253b8 <lfs_init+0x1f4>)
 8025360:	f241 01b2 	movw	r1, #4274	@ 0x10b2
 8025364:	e73a      	b.n	80251dc <lfs_init+0x18>
    LFS_ASSERT(lfs->cfg->inline_max == (lfs_size_t)-1
 8025366:	b138      	cbz	r0, 8025378 <lfs_init+0x1b4>
 8025368:	08c1      	lsrs	r1, r0, #3
 802536a:	428a      	cmp	r2, r1
 802536c:	d906      	bls.n	802537c <lfs_init+0x1b8>
 802536e:	4b24      	ldr	r3, [pc, #144]	@ (8025400 <lfs_init+0x23c>)
 8025370:	4a11      	ldr	r2, [pc, #68]	@ (80253b8 <lfs_init+0x1f4>)
 8025372:	f241 01b4 	movw	r1, #4276	@ 0x10b4
 8025376:	e731      	b.n	80251dc <lfs_init+0x18>
 8025378:	08c9      	lsrs	r1, r1, #3
 802537a:	e7f6      	b.n	802536a <lfs_init+0x1a6>
    } else if (lfs->inline_max == 0) {
 802537c:	b9ba      	cbnz	r2, 80253ae <lfs_init+0x1ea>
    return (a < b) ? a : b;
 802537e:	429e      	cmp	r6, r3
 8025380:	bf28      	it	cs
 8025382:	461e      	movcs	r6, r3
 8025384:	428e      	cmp	r6, r1
 8025386:	bf28      	it	cs
 8025388:	460e      	movcs	r6, r1
    lfs->mlist = NULL;
 802538a:	2000      	movs	r0, #0
    lfs->root[0] = LFS_BLOCK_NULL;
 802538c:	f04f 33ff 	mov.w	r3, #4294967295
    lfs->root[1] = LFS_BLOCK_NULL;
 8025390:	e9c4 3308 	strd	r3, r3, [r4, #32]
    lfs->seed = 0;
 8025394:	e9c4 000a 	strd	r0, r0, [r4, #40]	@ 0x28
    lfs->gdisk = (lfs_gstate_t){0};
 8025398:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
    lfs->gstate = (lfs_gstate_t){0};
 802539c:	e9c4 000c 	strd	r0, r0, [r4, #48]	@ 0x30
    lfs->gdelta = (lfs_gstate_t){0};
 80253a0:	e9c4 0012 	strd	r0, r0, [r4, #72]	@ 0x48
        lfs->inline_max = 0;
 80253a4:	67e6      	str	r6, [r4, #124]	@ 0x7c
    lfs->gdisk = (lfs_gstate_t){0};
 80253a6:	6460      	str	r0, [r4, #68]	@ 0x44
    lfs->gstate = (lfs_gstate_t){0};
 80253a8:	63a0      	str	r0, [r4, #56]	@ 0x38
    lfs->gdelta = (lfs_gstate_t){0};
 80253aa:	6520      	str	r0, [r4, #80]	@ 0x50
}
 80253ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80253ae:	4616      	mov	r6, r2
 80253b0:	e7eb      	b.n	802538a <lfs_init+0x1c6>
 80253b2:	bf00      	nop
 80253b4:	0803f90d 	.word	0x0803f90d
 80253b8:	08041f9f 	.word	0x08041f9f
 80253bc:	0803f7e4 	.word	0x0803f7e4
 80253c0:	0803f926 	.word	0x0803f926
 80253c4:	0803f93f 	.word	0x0803f93f
 80253c8:	0803f959 	.word	0x0803f959
 80253cc:	0803f989 	.word	0x0803f989
 80253d0:	0803f9b9 	.word	0x0803f9b9
 80253d4:	0803f9ea 	.word	0x0803f9ea
 80253d8:	0803fa06 	.word	0x0803fa06
 80253dc:	0803fa22 	.word	0x0803fa22
 80253e0:	0803fa76 	.word	0x0803fa76
 80253e4:	0803fad5 	.word	0x0803fad5
 80253e8:	0803faf2 	.word	0x0803faf2
 80253ec:	0803fb0c 	.word	0x0803fb0c
 80253f0:	0803fb2d 	.word	0x0803fb2d
 80253f4:	0803fb48 	.word	0x0803fb48
 80253f8:	0803fb77 	.word	0x0803fb77
 80253fc:	0803fbce 	.word	0x0803fbce
 8025400:	0803fc1e 	.word	0x0803fc1e

08025404 <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8025404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025408:	460d      	mov	r5, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 802540a:	6809      	ldr	r1, [r1, #0]
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 802540c:	4698      	mov	r8, r3
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 802540e:	1ccb      	adds	r3, r1, #3
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8025410:	b085      	sub	sp, #20
 8025412:	4606      	mov	r6, r0
 8025414:	4617      	mov	r7, r2
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8025416:	d903      	bls.n	8025420 <lfs_bd_flush+0x1c>
    return 0;
 8025418:	2000      	movs	r0, #0
}
 802541a:	b005      	add	sp, #20
 802541c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        LFS_ASSERT(pcache->block < lfs->block_count);
 8025420:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8025422:	4299      	cmp	r1, r3
 8025424:	d305      	bcc.n	8025432 <lfs_bd_flush+0x2e>
 8025426:	4b1c      	ldr	r3, [pc, #112]	@ (8025498 <lfs_bd_flush+0x94>)
 8025428:	4a1c      	ldr	r2, [pc, #112]	@ (802549c <lfs_bd_flush+0x98>)
 802542a:	21b3      	movs	r1, #179	@ 0xb3
        LFS_ASSERT(err <= 0);
 802542c:	481c      	ldr	r0, [pc, #112]	@ (80254a0 <lfs_bd_flush+0x9c>)
 802542e:	f017 f87b 	bl	803c528 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8025432:	6e80      	ldr	r0, [r0, #104]	@ 0x68
    return lfs_aligndown(a + alignment-1, alignment);
 8025434:	68ac      	ldr	r4, [r5, #8]
 8025436:	6982      	ldr	r2, [r0, #24]
 8025438:	4414      	add	r4, r2
 802543a:	3c01      	subs	r4, #1
    return a - (a % alignment);
 802543c:	fbb4 f3f2 	udiv	r3, r4, r2
 8025440:	fb02 4313 	mls	r3, r2, r3, r4
 8025444:	1ae4      	subs	r4, r4, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8025446:	9400      	str	r4, [sp, #0]
 8025448:	f8d0 9008 	ldr.w	r9, [r0, #8]
 802544c:	68eb      	ldr	r3, [r5, #12]
 802544e:	686a      	ldr	r2, [r5, #4]
 8025450:	47c8      	blx	r9
        LFS_ASSERT(err <= 0);
 8025452:	2800      	cmp	r0, #0
 8025454:	dd03      	ble.n	802545e <lfs_bd_flush+0x5a>
 8025456:	4b13      	ldr	r3, [pc, #76]	@ (80254a4 <lfs_bd_flush+0xa0>)
 8025458:	4a10      	ldr	r2, [pc, #64]	@ (802549c <lfs_bd_flush+0x98>)
 802545a:	21b7      	movs	r1, #183	@ 0xb7
 802545c:	e7e6      	b.n	802542c <lfs_bd_flush+0x28>
        if (err) {
 802545e:	d1dc      	bne.n	802541a <lfs_bd_flush+0x16>
        if (validate) {
 8025460:	f1b8 0f00 	cmp.w	r8, #0
 8025464:	d104      	bne.n	8025470 <lfs_bd_flush+0x6c>
        lfs_cache_zero(lfs, pcache);
 8025466:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 8025468:	4629      	mov	r1, r5
 802546a:	f7ff fe9f 	bl	80251ac <lfs_cache_zero.isra.0>
 802546e:	e7d3      	b.n	8025418 <lfs_bd_flush+0x14>
    rcache->block = LFS_BLOCK_NULL;
 8025470:	f04f 33ff 	mov.w	r3, #4294967295
 8025474:	603b      	str	r3, [r7, #0]
            int res = lfs_bd_cmp(lfs,
 8025476:	9402      	str	r4, [sp, #8]
 8025478:	68eb      	ldr	r3, [r5, #12]
 802547a:	9301      	str	r3, [sp, #4]
 802547c:	686b      	ldr	r3, [r5, #4]
 802547e:	9300      	str	r3, [sp, #0]
 8025480:	682b      	ldr	r3, [r5, #0]
 8025482:	4622      	mov	r2, r4
 8025484:	4639      	mov	r1, r7
 8025486:	4630      	mov	r0, r6
 8025488:	f7ff fba2 	bl	8024bd0 <lfs_bd_cmp.constprop.0>
            if (res < 0) {
 802548c:	2800      	cmp	r0, #0
 802548e:	dbc4      	blt.n	802541a <lfs_bd_flush+0x16>
            if (res != LFS_CMP_EQ) {
 8025490:	d0e9      	beq.n	8025466 <lfs_bd_flush+0x62>
                return LFS_ERR_CORRUPT;
 8025492:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8025496:	e7c0      	b.n	802541a <lfs_bd_flush+0x16>
 8025498:	0803fcad 	.word	0x0803fcad
 802549c:	08041f55 	.word	0x08041f55
 80254a0:	0803f7e4 	.word	0x0803f7e4
 80254a4:	0803f872 	.word	0x0803f872

080254a8 <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
 80254a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254ac:	e9dd 850c 	ldrd	r8, r5, [sp, #48]	@ 0x30
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 80254b0:	f118 0f02 	cmn.w	r8, #2
        const void *buffer, lfs_size_t size) {
 80254b4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80254b6:	4606      	mov	r6, r0
 80254b8:	460c      	mov	r4, r1
 80254ba:	4692      	mov	sl, r2
 80254bc:	4699      	mov	r9, r3
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->block_count);
 80254be:	d008      	beq.n	80254d2 <lfs_bd_prog+0x2a>
 80254c0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80254c2:	4543      	cmp	r3, r8
 80254c4:	d805      	bhi.n	80254d2 <lfs_bd_prog+0x2a>
 80254c6:	4b2c      	ldr	r3, [pc, #176]	@ (8025578 <lfs_bd_prog+0xd0>)
 80254c8:	4a2c      	ldr	r2, [pc, #176]	@ (802557c <lfs_bd_prog+0xd4>)
 80254ca:	21e8      	movs	r1, #232	@ 0xe8
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80254cc:	482c      	ldr	r0, [pc, #176]	@ (8025580 <lfs_bd_prog+0xd8>)
 80254ce:	f017 f82b 	bl	803c528 <__assert_func>
 80254d2:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 80254d4:	69d2      	ldr	r2, [r2, #28]
 80254d6:	19eb      	adds	r3, r5, r7
 80254d8:	4293      	cmp	r3, r2
 80254da:	d804      	bhi.n	80254e6 <lfs_bd_prog+0x3e>
        pcache->size = 0;
 80254dc:	f04f 0b00 	mov.w	fp, #0
    while (size > 0) {
 80254e0:	b9bf      	cbnz	r7, 8025512 <lfs_bd_prog+0x6a>
    return 0;
 80254e2:	4638      	mov	r0, r7
 80254e4:	e045      	b.n	8025572 <lfs_bd_prog+0xca>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80254e6:	4b27      	ldr	r3, [pc, #156]	@ (8025584 <lfs_bd_prog+0xdc>)
 80254e8:	4a24      	ldr	r2, [pc, #144]	@ (802557c <lfs_bd_prog+0xd4>)
 80254ea:	21e9      	movs	r1, #233	@ 0xe9
 80254ec:	e7ee      	b.n	80254cc <lfs_bd_prog+0x24>
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80254ee:	3301      	adds	r3, #1
 80254f0:	d004      	beq.n	80254fc <lfs_bd_prog+0x54>
 80254f2:	4b25      	ldr	r3, [pc, #148]	@ (8025588 <lfs_bd_prog+0xe0>)
 80254f4:	4a21      	ldr	r2, [pc, #132]	@ (802557c <lfs_bd_prog+0xd4>)
 80254f6:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80254fa:	e7e7      	b.n	80254cc <lfs_bd_prog+0x24>
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80254fc:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
        pcache->block = block;
 80254fe:	f8c4 8000 	str.w	r8, [r4]
 8025502:	699a      	ldr	r2, [r3, #24]
 8025504:	fbb5 f3f2 	udiv	r3, r5, r2
 8025508:	fb02 5313 	mls	r3, r2, r3, r5
 802550c:	1aeb      	subs	r3, r5, r3
        pcache->size = 0;
 802550e:	e9c4 3b01 	strd	r3, fp, [r4, #4]
        if (block == pcache->block &&
 8025512:	6823      	ldr	r3, [r4, #0]
 8025514:	4543      	cmp	r3, r8
 8025516:	d1ea      	bne.n	80254ee <lfs_bd_prog+0x46>
                off >= pcache->off &&
 8025518:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
 802551a:	42a8      	cmp	r0, r5
 802551c:	d8e9      	bhi.n	80254f2 <lfs_bd_prog+0x4a>
                off < pcache->off + lfs->cfg->cache_size) {
 802551e:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8025520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8025522:	4402      	add	r2, r0
                off >= pcache->off &&
 8025524:	42aa      	cmp	r2, r5
 8025526:	d9e4      	bls.n	80254f2 <lfs_bd_prog+0x4a>
            lfs_size_t diff = lfs_min(size,
 8025528:	1b52      	subs	r2, r2, r5
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 802552a:	68e3      	ldr	r3, [r4, #12]
 802552c:	990e      	ldr	r1, [sp, #56]	@ 0x38
    return (a < b) ? a : b;
 802552e:	42ba      	cmp	r2, r7
 8025530:	eba5 0000 	sub.w	r0, r5, r0
 8025534:	bf28      	it	cs
 8025536:	463a      	movcs	r2, r7
 8025538:	4418      	add	r0, r3
 802553a:	9201      	str	r2, [sp, #4]
 802553c:	f018 f972 	bl	803d824 <memcpy>
            data += diff;
 8025540:	9a01      	ldr	r2, [sp, #4]
 8025542:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025544:	4413      	add	r3, r2
 8025546:	930e      	str	r3, [sp, #56]	@ 0x38
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8025548:	6863      	ldr	r3, [r4, #4]
            off += diff;
 802554a:	4415      	add	r5, r2
            size -= diff;
 802554c:	1abf      	subs	r7, r7, r2
    return (a > b) ? a : b;
 802554e:	68a2      	ldr	r2, [r4, #8]
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8025550:	1aeb      	subs	r3, r5, r3
 8025552:	4293      	cmp	r3, r2
 8025554:	bf38      	it	cc
 8025556:	4613      	movcc	r3, r2
            if (pcache->size == lfs->cfg->cache_size) {
 8025558:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
            pcache->size = lfs_max(pcache->size, off - pcache->off);
 802555a:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 802555c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 802555e:	429a      	cmp	r2, r3
 8025560:	d1be      	bne.n	80254e0 <lfs_bd_prog+0x38>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8025562:	464b      	mov	r3, r9
 8025564:	4652      	mov	r2, sl
 8025566:	4621      	mov	r1, r4
 8025568:	4630      	mov	r0, r6
 802556a:	f7ff ff4b 	bl	8025404 <lfs_bd_flush>
                if (err) {
 802556e:	2800      	cmp	r0, #0
 8025570:	d0b6      	beq.n	80254e0 <lfs_bd_prog+0x38>
}
 8025572:	b003      	add	sp, #12
 8025574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025578:	0803fcce 	.word	0x0803fcce
 802557c:	08041f62 	.word	0x08041f62
 8025580:	0803f7e4 	.word	0x0803f7e4
 8025584:	0803fd05 	.word	0x0803fd05
 8025588:	0803fd28 	.word	0x0803fd28

0802558c <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 802558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025590:	4604      	mov	r4, r0
 8025592:	b087      	sub	sp, #28
 8025594:	460d      	mov	r5, r1
        int err = lfs_alloc(lfs, &nblock);
 8025596:	a905      	add	r1, sp, #20
 8025598:	4620      	mov	r0, r4
 802559a:	f7ff fd67 	bl	802506c <lfs_alloc>
        if (err) {
 802559e:	4606      	mov	r6, r0
 80255a0:	b958      	cbnz	r0, 80255ba <lfs_file_relocate+0x2e>
        err = lfs_bd_erase(lfs, nblock);
 80255a2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80255a6:	4620      	mov	r0, r4
 80255a8:	4641      	mov	r1, r8
 80255aa:	f7fe fda1 	bl	80240f0 <lfs_bd_erase>
        if (err) {
 80255ae:	4606      	mov	r6, r0
 80255b0:	2800      	cmp	r0, #0
 80255b2:	d053      	beq.n	802565c <lfs_file_relocate+0xd0>
            if (err == LFS_ERR_CORRUPT) {
 80255b4:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 80255b8:	d056      	beq.n	8025668 <lfs_file_relocate+0xdc>
}
 80255ba:	4630      	mov	r0, r6
 80255bc:	b007      	add	sp, #28
 80255be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (file->flags & LFS_F_INLINE) {
 80255c2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
                err = lfs_dir_getread(lfs, &file->m,
 80255c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80255c8:	f10d 0a13 	add.w	sl, sp, #19
            if (file->flags & LFS_F_INLINE) {
 80255cc:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
                err = lfs_dir_getread(lfs, &file->m,
 80255d0:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 80255d4:	eba3 0307 	sub.w	r3, r3, r7
            if (file->flags & LFS_F_INLINE) {
 80255d8:	d01c      	beq.n	8025614 <lfs_file_relocate+0x88>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80255da:	88aa      	ldrh	r2, [r5, #4]
                err = lfs_dir_getread(lfs, &file->m,
 80255dc:	4924      	ldr	r1, [pc, #144]	@ (8025670 <lfs_file_relocate+0xe4>)
 80255de:	ea41 2282 	orr.w	r2, r1, r2, lsl #10
 80255e2:	9200      	str	r2, [sp, #0]
 80255e4:	f105 0108 	add.w	r1, r5, #8
 80255e8:	465a      	mov	r2, fp
 80255ea:	4620      	mov	r0, r4
 80255ec:	f7fe fef8 	bl	80243e0 <lfs_dir_getread.constprop.0>
                if (err) {
 80255f0:	b970      	cbnz	r0, 8025610 <lfs_file_relocate+0x84>
            err = lfs_bd_prog(lfs,
 80255f2:	e9cd a902 	strd	sl, r9, [sp, #8]
 80255f6:	e9cd 8700 	strd	r8, r7, [sp]
 80255fa:	2301      	movs	r3, #1
 80255fc:	4622      	mov	r2, r4
 80255fe:	f104 0110 	add.w	r1, r4, #16
 8025602:	4620      	mov	r0, r4
 8025604:	f7ff ff50 	bl	80254a8 <lfs_bd_prog>
            if (err) {
 8025608:	b160      	cbz	r0, 8025624 <lfs_file_relocate+0x98>
                if (err == LFS_ERR_CORRUPT) {
 802560a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 802560e:	d02b      	beq.n	8025668 <lfs_file_relocate+0xdc>
                    return err;
 8025610:	4606      	mov	r6, r0
 8025612:	e7d2      	b.n	80255ba <lfs_file_relocate+0x2e>
                err = lfs_bd_read(lfs,
 8025614:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8025616:	9200      	str	r2, [sp, #0]
 8025618:	4659      	mov	r1, fp
 802561a:	4622      	mov	r2, r4
 802561c:	4620      	mov	r0, r4
 802561e:	f7fe fb63 	bl	8023ce8 <lfs_bd_read>
 8025622:	e7e5      	b.n	80255f0 <lfs_file_relocate+0x64>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8025624:	3701      	adds	r7, #1
 8025626:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8025628:	42bb      	cmp	r3, r7
 802562a:	d8ca      	bhi.n	80255c2 <lfs_file_relocate+0x36>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 802562c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 802562e:	69e1      	ldr	r1, [r4, #28]
 8025630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8025632:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8025634:	f018 f8f6 	bl	803d824 <memcpy>
        file->cache.block = lfs->pcache.block;
 8025638:	6923      	ldr	r3, [r4, #16]
 802563a:	642b      	str	r3, [r5, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 802563c:	6963      	ldr	r3, [r4, #20]
 802563e:	646b      	str	r3, [r5, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 8025640:	69a3      	ldr	r3, [r4, #24]
 8025642:	64ab      	str	r3, [r5, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8025644:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8025646:	f104 0110 	add.w	r1, r4, #16
 802564a:	f7ff fdaf 	bl	80251ac <lfs_cache_zero.isra.0>
        file->flags |= LFS_F_WRITING;
 802564e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
        file->block = nblock;
 8025650:	f8c5 8038 	str.w	r8, [r5, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8025654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8025658:	632b      	str	r3, [r5, #48]	@ 0x30
        return 0;
 802565a:	e7ae      	b.n	80255ba <lfs_file_relocate+0x2e>
        for (lfs_off_t i = 0; i < file->off; i++) {
 802565c:	4607      	mov	r7, r0
 802565e:	f105 0b40 	add.w	fp, r5, #64	@ 0x40
 8025662:	f04f 0901 	mov.w	r9, #1
 8025666:	e7de      	b.n	8025626 <lfs_file_relocate+0x9a>
    rcache->block = LFS_BLOCK_NULL;
 8025668:	f04f 33ff 	mov.w	r3, #4294967295
 802566c:	6123      	str	r3, [r4, #16]
    while (true) {
 802566e:	e792      	b.n	8025596 <lfs_file_relocate+0xa>
 8025670:	20100000 	.word	0x20100000

08025674 <lfs_file_flushedwrite>:
        const void *buffer, lfs_size_t size) {
 8025674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025678:	b093      	sub	sp, #76	@ 0x4c
 802567a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if ((file->flags & LFS_F_INLINE) &&
 802567e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8025680:	02dc      	lsls	r4, r3, #11
        const void *buffer, lfs_size_t size) {
 8025682:	4606      	mov	r6, r0
 8025684:	460d      	mov	r5, r1
    if ((file->flags & LFS_F_INLINE) &&
 8025686:	d51b      	bpl.n	80256c0 <lfs_file_flushedwrite+0x4c>
            lfs_max(file->pos+nsize, file->ctz.size) > lfs->inline_max) {
 8025688:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 802568a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802568c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 802568e:	18e3      	adds	r3, r4, r3
 8025690:	4293      	cmp	r3, r2
 8025692:	bf38      	it	cc
 8025694:	4613      	movcc	r3, r2
    if ((file->flags & LFS_F_INLINE) &&
 8025696:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8025698:	429a      	cmp	r2, r3
 802569a:	d211      	bcs.n	80256c0 <lfs_file_flushedwrite+0x4c>
    lfs->lookahead.ckpoint = lfs->block_count;
 802569c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
    file->off = file->pos;
 802569e:	63cc      	str	r4, [r1, #60]	@ 0x3c
    lfs->lookahead.ckpoint = lfs->block_count;
 80256a0:	6603      	str	r3, [r0, #96]	@ 0x60
    int err = lfs_file_relocate(lfs, file);
 80256a2:	f7ff ff73 	bl	802558c <lfs_file_relocate>
    if (err) {
 80256a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80256a8:	4604      	mov	r4, r0
 80256aa:	b130      	cbz	r0, 80256ba <lfs_file_flushedwrite+0x46>
                file->flags |= LFS_F_ERRED;
 80256ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80256b0:	632b      	str	r3, [r5, #48]	@ 0x30
}
 80256b2:	4620      	mov	r0, r4
 80256b4:	b013      	add	sp, #76	@ 0x4c
 80256b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    file->flags &= ~LFS_F_INLINE;
 80256ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80256be:	632b      	str	r3, [r5, #48]	@ 0x30
            for (lfs_off_t i = 0; i < skips; i++) {
 80256c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256c2:	9305      	str	r3, [sp, #20]
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80256c4:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80256c8:	930d      	str	r3, [sp, #52]	@ 0x34
    while (nsize > 0) {
 80256ca:	9b05      	ldr	r3, [sp, #20]
 80256cc:	b90b      	cbnz	r3, 80256d2 <lfs_file_flushedwrite+0x5e>
    return size;
 80256ce:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80256d0:	e7ef      	b.n	80256b2 <lfs_file_flushedwrite+0x3e>
        if (!(file->flags & LFS_F_WRITING) ||
 80256d2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80256d4:	f412 3100 	ands.w	r1, r2, #131072	@ 0x20000
 80256d8:	d005      	beq.n	80256e6 <lfs_file_flushedwrite+0x72>
                file->off == lfs->cfg->block_size) {
 80256da:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
        if (!(file->flags & LFS_F_WRITING) ||
 80256dc:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80256de:	69db      	ldr	r3, [r3, #28]
 80256e0:	4298      	cmp	r0, r3
 80256e2:	f040 80a3 	bne.w	802582c <lfs_file_flushedwrite+0x1b8>
            if (!(file->flags & LFS_F_INLINE)) {
 80256e6:	02d2      	lsls	r2, r2, #11
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80256e8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
            if (!(file->flags & LFS_F_INLINE)) {
 80256ea:	f100 80d7 	bmi.w	802589c <lfs_file_flushedwrite+0x228>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80256ee:	f105 0240 	add.w	r2, r5, #64	@ 0x40
 80256f2:	9206      	str	r2, [sp, #24]
 80256f4:	b9b1      	cbnz	r1, 8025724 <lfs_file_flushedwrite+0xb0>
 80256f6:	b1ab      	cbz	r3, 8025724 <lfs_file_flushedwrite+0xb0>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80256f8:	aa11      	add	r2, sp, #68	@ 0x44
 80256fa:	9202      	str	r2, [sp, #8]
 80256fc:	3b01      	subs	r3, #1
 80256fe:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 8025702:	9201      	str	r2, [sp, #4]
 8025704:	9300      	str	r3, [sp, #0]
                            file->pos-1, &file->block, &(lfs_off_t){0});
 8025706:	9111      	str	r1, [sp, #68]	@ 0x44
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8025708:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	@ 0x28
 802570c:	9906      	ldr	r1, [sp, #24]
 802570e:	4630      	mov	r0, r6
 8025710:	f7ff faca 	bl	8024ca8 <lfs_ctz_find.constprop.0>
                    if (err) {
 8025714:	4604      	mov	r4, r0
 8025716:	b108      	cbz	r0, 802571c <lfs_file_flushedwrite+0xa8>
                file->flags |= LFS_F_ERRED;
 8025718:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802571a:	e7c7      	b.n	80256ac <lfs_file_flushedwrite+0x38>
                    lfs_cache_zero(lfs, &file->cache);
 802571c:	9906      	ldr	r1, [sp, #24]
 802571e:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 8025720:	f7ff fd44 	bl	80251ac <lfs_cache_zero.isra.0>
    lfs->lookahead.ckpoint = lfs->block_count;
 8025724:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 8025726:	6633      	str	r3, [r6, #96]	@ 0x60
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8025728:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 802572a:	930a      	str	r3, [sp, #40]	@ 0x28
 802572c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 802572e:	9307      	str	r3, [sp, #28]
            lfs_size_t noff = size - 1;
 8025730:	3b01      	subs	r3, #1
 8025732:	930c      	str	r3, [sp, #48]	@ 0x30
        int err = lfs_alloc(lfs, &nblock);
 8025734:	a90f      	add	r1, sp, #60	@ 0x3c
 8025736:	4630      	mov	r0, r6
 8025738:	f7ff fc98 	bl	802506c <lfs_alloc>
        if (err) {
 802573c:	4604      	mov	r4, r0
 802573e:	2800      	cmp	r0, #0
 8025740:	d1ea      	bne.n	8025718 <lfs_file_flushedwrite+0xa4>
            err = lfs_bd_erase(lfs, nblock);
 8025742:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8025746:	4630      	mov	r0, r6
 8025748:	4649      	mov	r1, r9
 802574a:	f7fe fcd1 	bl	80240f0 <lfs_bd_erase>
            if (err) {
 802574e:	4604      	mov	r4, r0
 8025750:	b130      	cbz	r0, 8025760 <lfs_file_flushedwrite+0xec>
                    if (err == LFS_ERR_CORRUPT) {
 8025752:	f114 0f54 	cmn.w	r4, #84	@ 0x54
 8025756:	d1df      	bne.n	8025718 <lfs_file_flushedwrite+0xa4>
    rcache->block = LFS_BLOCK_NULL;
 8025758:	f04f 33ff 	mov.w	r3, #4294967295
 802575c:	642b      	str	r3, [r5, #64]	@ 0x40
    while (true) {
 802575e:	e7e9      	b.n	8025734 <lfs_file_flushedwrite+0xc0>
            if (size == 0) {
 8025760:	9b07      	ldr	r3, [sp, #28]
 8025762:	6eb7      	ldr	r7, [r6, #104]	@ 0x68
 8025764:	b91b      	cbnz	r3, 802576e <lfs_file_flushedwrite+0xfa>
                *block = nblock;
 8025766:	f8c5 9038 	str.w	r9, [r5, #56]	@ 0x38
                file->off = file->pos;
 802576a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 802576c:	e05a      	b.n	8025824 <lfs_file_flushedwrite+0x1b0>
            lfs_size_t noff = size - 1;
 802576e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025770:	9310      	str	r3, [sp, #64]	@ 0x40
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8025772:	a910      	add	r1, sp, #64	@ 0x40
 8025774:	4638      	mov	r0, r7
 8025776:	f7ff fa7a 	bl	8024c6e <lfs_ctz_index.isra.0>
            noff = noff + 1;
 802577a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802577c:	f103 0a01 	add.w	sl, r3, #1
            if (noff != lfs->cfg->block_size) {
 8025780:	69fb      	ldr	r3, [r7, #28]
            noff = noff + 1;
 8025782:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
            if (noff != lfs->cfg->block_size) {
 8025786:	459a      	cmp	sl, r3
 8025788:	d173      	bne.n	8025872 <lfs_file_flushedwrite+0x1fe>
            index += 1;
 802578a:	f100 0801 	add.w	r8, r0, #1
    return __builtin_ctz(a);
 802578e:	fa98 f8a8 	rbit	r8, r8
            lfs_block_t nhead = head;
 8025792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025794:	9311      	str	r3, [sp, #68]	@ 0x44
 8025796:	fab8 f888 	clz	r8, r8
            lfs_size_t skips = lfs_ctz(index) + 1;
 802579a:	f108 0b01 	add.w	fp, r8, #1
            for (lfs_off_t i = 0; i < skips; i++) {
 802579e:	46a2      	mov	sl, r4
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 80257a0:	af11      	add	r7, sp, #68	@ 0x44
 80257a2:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80257a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80257a8:	2304      	movs	r3, #4
 80257aa:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80257ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80257b0:	9906      	ldr	r1, [sp, #24]
 80257b2:	e9cd 9300 	strd	r9, r3, [sp]
 80257b6:	4632      	mov	r2, r6
 80257b8:	2301      	movs	r3, #1
 80257ba:	4630      	mov	r0, r6
 80257bc:	f7ff fe74 	bl	80254a8 <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
 80257c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
                if (err) {
 80257c2:	4604      	mov	r4, r0
 80257c4:	2800      	cmp	r0, #0
 80257c6:	d1c4      	bne.n	8025752 <lfs_file_flushedwrite+0xde>
                if (i != skips-1) {
 80257c8:	45c2      	cmp	sl, r8
 80257ca:	d157      	bne.n	802587c <lfs_file_flushedwrite+0x208>
            for (lfs_off_t i = 0; i < skips; i++) {
 80257cc:	f10a 0a01 	add.w	sl, sl, #1
 80257d0:	45d3      	cmp	fp, sl
 80257d2:	d8e6      	bhi.n	80257a2 <lfs_file_flushedwrite+0x12e>
            *block = nblock;
 80257d4:	f8c5 9038 	str.w	r9, [r5, #56]	@ 0x38
            *off = 4*skips;
 80257d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80257dc:	e7c5      	b.n	802576a <lfs_file_flushedwrite+0xf6>
                    err = lfs_bd_read(lfs,
 80257de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80257e0:	9300      	str	r3, [sp, #0]
 80257e2:	e9cd 7b02 	strd	r7, fp, [sp, #8]
 80257e6:	f8cd 8004 	str.w	r8, [sp, #4]
 80257ea:	ebaa 0308 	sub.w	r3, sl, r8
 80257ee:	4632      	mov	r2, r6
 80257f0:	2100      	movs	r1, #0
 80257f2:	4630      	mov	r0, r6
 80257f4:	f7fe fa78 	bl	8023ce8 <lfs_bd_read>
                    if (err) {
 80257f8:	4604      	mov	r4, r0
 80257fa:	2800      	cmp	r0, #0
 80257fc:	d18c      	bne.n	8025718 <lfs_file_flushedwrite+0xa4>
                    err = lfs_bd_prog(lfs,
 80257fe:	e9cd 7b02 	strd	r7, fp, [sp, #8]
 8025802:	e9cd 9800 	strd	r9, r8, [sp]
 8025806:	9906      	ldr	r1, [sp, #24]
 8025808:	2301      	movs	r3, #1
 802580a:	4632      	mov	r2, r6
 802580c:	4630      	mov	r0, r6
 802580e:	f7ff fe4b 	bl	80254a8 <lfs_bd_prog>
                    if (err) {
 8025812:	4604      	mov	r4, r0
 8025814:	2800      	cmp	r0, #0
 8025816:	d19c      	bne.n	8025752 <lfs_file_flushedwrite+0xde>
                for (lfs_off_t i = 0; i < noff; i++) {
 8025818:	f108 0801 	add.w	r8, r8, #1
 802581c:	45c2      	cmp	sl, r8
 802581e:	d8de      	bhi.n	80257de <lfs_file_flushedwrite+0x16a>
                *off = noff;
 8025820:	e9c5 9a0e 	strd	r9, sl, [r5, #56]	@ 0x38
            file->flags |= LFS_F_WRITING;
 8025824:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8025826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802582a:	632b      	str	r3, [r5, #48]	@ 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 802582c:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 802582e:	69df      	ldr	r7, [r3, #28]
 8025830:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8025832:	1aff      	subs	r7, r7, r3
    return (a < b) ? a : b;
 8025834:	9b05      	ldr	r3, [sp, #20]
 8025836:	429f      	cmp	r7, r3
 8025838:	bf28      	it	cs
 802583a:	461f      	movcs	r7, r3
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 802583c:	9b08      	ldr	r3, [sp, #32]
 802583e:	9703      	str	r7, [sp, #12]
 8025840:	9302      	str	r3, [sp, #8]
 8025842:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8025844:	9301      	str	r3, [sp, #4]
 8025846:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8025848:	9300      	str	r3, [sp, #0]
 802584a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802584c:	2301      	movs	r3, #1
 802584e:	4632      	mov	r2, r6
 8025850:	4630      	mov	r0, r6
 8025852:	f7ff fe29 	bl	80254a8 <lfs_bd_prog>
            if (err) {
 8025856:	4604      	mov	r4, r0
 8025858:	b320      	cbz	r0, 80258a4 <lfs_file_flushedwrite+0x230>
                if (err == LFS_ERR_CORRUPT) {
 802585a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 802585e:	f47f af5b 	bne.w	8025718 <lfs_file_flushedwrite+0xa4>
            err = lfs_file_relocate(lfs, file);
 8025862:	4629      	mov	r1, r5
 8025864:	4630      	mov	r0, r6
 8025866:	f7ff fe91 	bl	802558c <lfs_file_relocate>
            if (err) {
 802586a:	4604      	mov	r4, r0
 802586c:	2800      	cmp	r0, #0
 802586e:	d0e5      	beq.n	802583c <lfs_file_flushedwrite+0x1c8>
 8025870:	e752      	b.n	8025718 <lfs_file_flushedwrite+0xa4>
                for (lfs_off_t i = 0; i < noff; i++) {
 8025872:	46a0      	mov	r8, r4
                    err = lfs_bd_read(lfs,
 8025874:	f04f 0b01 	mov.w	fp, #1
 8025878:	af11      	add	r7, sp, #68	@ 0x44
 802587a:	e7cf      	b.n	802581c <lfs_file_flushedwrite+0x1a8>
                    err = lfs_bd_read(lfs,
 802587c:	2204      	movs	r2, #4
 802587e:	e9cd 7202 	strd	r7, r2, [sp, #8]
 8025882:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025884:	4601      	mov	r1, r0
 8025886:	e9cd 3200 	strd	r3, r2, [sp]
 802588a:	4630      	mov	r0, r6
 802588c:	2304      	movs	r3, #4
 802588e:	4632      	mov	r2, r6
 8025890:	f7fe fa2a 	bl	8023ce8 <lfs_bd_read>
                    if (err) {
 8025894:	4604      	mov	r4, r0
 8025896:	2800      	cmp	r0, #0
 8025898:	d098      	beq.n	80257cc <lfs_file_flushedwrite+0x158>
 802589a:	e73d      	b.n	8025718 <lfs_file_flushedwrite+0xa4>
                file->block = LFS_BLOCK_INLINE;
 802589c:	f06f 0201 	mvn.w	r2, #1
 80258a0:	63aa      	str	r2, [r5, #56]	@ 0x38
 80258a2:	e762      	b.n	802576a <lfs_file_flushedwrite+0xf6>
        file->pos += diff;
 80258a4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80258a6:	443b      	add	r3, r7
 80258a8:	636b      	str	r3, [r5, #52]	@ 0x34
        file->off += diff;
 80258aa:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80258ac:	443b      	add	r3, r7
 80258ae:	63eb      	str	r3, [r5, #60]	@ 0x3c
        data += diff;
 80258b0:	9b08      	ldr	r3, [sp, #32]
 80258b2:	443b      	add	r3, r7
 80258b4:	9308      	str	r3, [sp, #32]
        nsize -= diff;
 80258b6:	9b05      	ldr	r3, [sp, #20]
 80258b8:	1bdb      	subs	r3, r3, r7
 80258ba:	9305      	str	r3, [sp, #20]
    lfs->lookahead.ckpoint = lfs->block_count;
 80258bc:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 80258be:	6633      	str	r3, [r6, #96]	@ 0x60
}
 80258c0:	e703      	b.n	80256ca <lfs_file_flushedwrite+0x56>

080258c2 <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
 80258c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258c4:	b085      	sub	sp, #20
    int err = lfs_bd_prog(lfs,
 80258c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
        const void *buffer, lfs_size_t size) {
 80258ca:	461d      	mov	r5, r3
    int err = lfs_bd_prog(lfs,
 80258cc:	684b      	ldr	r3, [r1, #4]
 80258ce:	9301      	str	r3, [sp, #4]
 80258d0:	680b      	ldr	r3, [r1, #0]
 80258d2:	9300      	str	r3, [sp, #0]
        const void *buffer, lfs_size_t size) {
 80258d4:	460c      	mov	r4, r1
 80258d6:	4617      	mov	r7, r2
    int err = lfs_bd_prog(lfs,
 80258d8:	2300      	movs	r3, #0
 80258da:	4602      	mov	r2, r0
 80258dc:	f100 0110 	add.w	r1, r0, #16
 80258e0:	f7ff fde2 	bl	80254a8 <lfs_bd_prog>
    if (err) {
 80258e4:	4606      	mov	r6, r0
 80258e6:	b940      	cbnz	r0, 80258fa <lfs_dir_commitprog+0x38>
    commit->crc = lfs_crc(commit->crc, buffer, size);
 80258e8:	68e0      	ldr	r0, [r4, #12]
 80258ea:	462a      	mov	r2, r5
 80258ec:	4639      	mov	r1, r7
 80258ee:	f001 fc25 	bl	802713c <lfs_crc>
    commit->off += size;
 80258f2:	6863      	ldr	r3, [r4, #4]
    commit->crc = lfs_crc(commit->crc, buffer, size);
 80258f4:	60e0      	str	r0, [r4, #12]
    commit->off += size;
 80258f6:	442b      	add	r3, r5
 80258f8:	6063      	str	r3, [r4, #4]
}
 80258fa:	4630      	mov	r0, r6
 80258fc:	b005      	add	sp, #20
 80258fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025900 <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
 8025900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025904:	4606      	mov	r6, r0
 8025906:	b087      	sub	sp, #28
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8025908:	4610      	mov	r0, r2
        lfs_tag_t tag, const void *buffer) {
 802590a:	4699      	mov	r9, r3
    lfs_size_t dsize = lfs_tag_dsize(tag);
 802590c:	f7fe f925 	bl	8023b5a <lfs_tag_dsize>
    if (commit->off + dsize > commit->end) {
 8025910:	684b      	ldr	r3, [r1, #4]
        lfs_tag_t tag, const void *buffer) {
 8025912:	4693      	mov	fp, r2
    if (commit->off + dsize > commit->end) {
 8025914:	694a      	ldr	r2, [r1, #20]
 8025916:	4403      	add	r3, r0
 8025918:	4293      	cmp	r3, r2
        lfs_tag_t tag, const void *buffer) {
 802591a:	460c      	mov	r4, r1
    lfs_size_t dsize = lfs_tag_dsize(tag);
 802591c:	4680      	mov	r8, r0
    if (commit->off + dsize > commit->end) {
 802591e:	d841      	bhi.n	80259a4 <lfs_dir_commitattr+0xa4>
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8025920:	688b      	ldr	r3, [r1, #8]
 8025922:	f02b 4a00 	bic.w	sl, fp, #2147483648	@ 0x80000000
 8025926:	ea8a 0303 	eor.w	r3, sl, r3
    return __builtin_bswap32(a);
 802592a:	ba1b      	rev	r3, r3
 802592c:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 802592e:	aa05      	add	r2, sp, #20
 8025930:	2304      	movs	r3, #4
 8025932:	4630      	mov	r0, r6
 8025934:	f7ff ffc5 	bl	80258c2 <lfs_dir_commitprog>
    if (err) {
 8025938:	4605      	mov	r5, r0
 802593a:	bb78      	cbnz	r0, 802599c <lfs_dir_commitattr+0x9c>
    if (!(tag & 0x80000000)) {
 802593c:	f1bb 0f00 	cmp.w	fp, #0
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8025940:	f1a8 0704 	sub.w	r7, r8, #4
    if (!(tag & 0x80000000)) {
 8025944:	da20      	bge.n	8025988 <lfs_dir_commitattr+0x88>
            err = lfs_bd_read(lfs,
 8025946:	f10d 0b13 	add.w	fp, sp, #19
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 802594a:	b32f      	cbz	r7, 8025998 <lfs_dir_commitattr+0x98>
            err = lfs_bd_read(lfs,
 802594c:	2301      	movs	r3, #1
 802594e:	e9cd b302 	strd	fp, r3, [sp, #8]
 8025952:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8025956:	3b04      	subs	r3, #4
 8025958:	4443      	add	r3, r8
 802595a:	1bdb      	subs	r3, r3, r7
 802595c:	9301      	str	r3, [sp, #4]
 802595e:	f8d9 3000 	ldr.w	r3, [r9]
 8025962:	9300      	str	r3, [sp, #0]
 8025964:	4632      	mov	r2, r6
 8025966:	463b      	mov	r3, r7
 8025968:	2100      	movs	r1, #0
 802596a:	4630      	mov	r0, r6
 802596c:	f7fe f9bc 	bl	8023ce8 <lfs_bd_read>
            if (err) {
 8025970:	b940      	cbnz	r0, 8025984 <lfs_dir_commitattr+0x84>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8025972:	2301      	movs	r3, #1
 8025974:	465a      	mov	r2, fp
 8025976:	4621      	mov	r1, r4
 8025978:	4630      	mov	r0, r6
 802597a:	f7ff ffa2 	bl	80258c2 <lfs_dir_commitprog>
            if (err) {
 802597e:	3f01      	subs	r7, #1
 8025980:	2800      	cmp	r0, #0
 8025982:	d0e2      	beq.n	802594a <lfs_dir_commitattr+0x4a>
            return err;
 8025984:	4605      	mov	r5, r0
 8025986:	e009      	b.n	802599c <lfs_dir_commitattr+0x9c>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8025988:	463b      	mov	r3, r7
 802598a:	464a      	mov	r2, r9
 802598c:	4621      	mov	r1, r4
 802598e:	4630      	mov	r0, r6
 8025990:	f7ff ff97 	bl	80258c2 <lfs_dir_commitprog>
        if (err) {
 8025994:	2800      	cmp	r0, #0
 8025996:	d1f5      	bne.n	8025984 <lfs_dir_commitattr+0x84>
    commit->ptag = tag & 0x7fffffff;
 8025998:	f8c4 a008 	str.w	sl, [r4, #8]
}
 802599c:	4628      	mov	r0, r5
 802599e:	b007      	add	sp, #28
 80259a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_NOSPC;
 80259a4:	f06f 051b 	mvn.w	r5, #27
 80259a8:	e7f8      	b.n	802599c <lfs_dir_commitattr+0x9c>

080259aa <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 80259aa:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80259ac:	460a      	mov	r2, r1
 80259ae:	e9d0 0100 	ldrd	r0, r1, [r0]
 80259b2:	f7ff bfa5 	b.w	8025900 <lfs_dir_commitattr>

080259b6 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80259b6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (file->flags & LFS_F_READING) {
 80259b8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80259ba:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
 80259bc:	0359      	lsls	r1, r3, #13
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 80259be:	b097      	sub	sp, #92	@ 0x5c
 80259c0:	4605      	mov	r5, r0
    if (file->flags & LFS_F_READING) {
 80259c2:	d508      	bpl.n	80259d6 <lfs_file_flush+0x20>
        if (!(file->flags & LFS_F_INLINE)) {
 80259c4:	02da      	lsls	r2, r3, #11
    rcache->block = LFS_BLOCK_NULL;
 80259c6:	bf58      	it	pl
 80259c8:	f04f 32ff 	movpl.w	r2, #4294967295
        file->flags &= ~LFS_F_READING;
 80259cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
    rcache->block = LFS_BLOCK_NULL;
 80259d0:	bf58      	it	pl
 80259d2:	6422      	strpl	r2, [r4, #64]	@ 0x40
        file->flags &= ~LFS_F_READING;
 80259d4:	6323      	str	r3, [r4, #48]	@ 0x30
    if (file->flags & LFS_F_WRITING) {
 80259d6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80259d8:	038b      	lsls	r3, r1, #14
 80259da:	d402      	bmi.n	80259e2 <lfs_file_flush+0x2c>
    return 0;
 80259dc:	2000      	movs	r0, #0
}
 80259de:	b017      	add	sp, #92	@ 0x5c
 80259e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!(file->flags & LFS_F_INLINE)) {
 80259e2:	f411 1180 	ands.w	r1, r1, #1048576	@ 0x100000
        lfs_off_t pos = file->pos;
 80259e6:	6b66      	ldr	r6, [r4, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 80259e8:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
        if (!(file->flags & LFS_F_INLINE)) {
 80259ea:	d13f      	bne.n	8025a6c <lfs_file_flush+0xb6>
            lfs_file_t orig = {
 80259ec:	2254      	movs	r2, #84	@ 0x54
 80259ee:	a801      	add	r0, sp, #4
 80259f0:	f017 fd58 	bl	803d4a4 <memset>
 80259f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80259f6:	e9cd 370b 	strd	r3, r7, [sp, #44]	@ 0x2c
 80259fa:	2301      	movs	r3, #1
 80259fc:	e9cd 360d 	strd	r3, r6, [sp, #52]	@ 0x34
 8025a00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8025a04:	af11      	add	r7, sp, #68	@ 0x44
 8025a06:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
 8025a0a:	f04f 37ff 	mov.w	r7, #4294967295
 8025a0e:	602f      	str	r7, [r5, #0]
            while (file->pos < file->ctz.size) {
 8025a10:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8025a12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8025a14:	429a      	cmp	r2, r3
 8025a16:	d312      	bcc.n	8025a3e <lfs_file_flush+0x88>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8025a18:	f104 0740 	add.w	r7, r4, #64	@ 0x40
 8025a1c:	2301      	movs	r3, #1
 8025a1e:	462a      	mov	r2, r5
 8025a20:	4639      	mov	r1, r7
 8025a22:	4628      	mov	r0, r5
 8025a24:	f7ff fcee 	bl	8025404 <lfs_bd_flush>
                if (err) {
 8025a28:	b320      	cbz	r0, 8025a74 <lfs_file_flush+0xbe>
                    if (err == LFS_ERR_CORRUPT) {
 8025a2a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 8025a2e:	d1d6      	bne.n	80259de <lfs_file_flush+0x28>
                err = lfs_file_relocate(lfs, file);
 8025a30:	4621      	mov	r1, r4
 8025a32:	4628      	mov	r0, r5
 8025a34:	f7ff fdaa 	bl	802558c <lfs_file_relocate>
                if (err) {
 8025a38:	2800      	cmp	r0, #0
 8025a3a:	d0ef      	beq.n	8025a1c <lfs_file_flush+0x66>
 8025a3c:	e7cf      	b.n	80259de <lfs_file_flush+0x28>
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8025a3e:	2301      	movs	r3, #1
 8025a40:	f10d 0203 	add.w	r2, sp, #3
 8025a44:	a901      	add	r1, sp, #4
 8025a46:	4628      	mov	r0, r5
 8025a48:	f7ff f978 	bl	8024d3c <lfs_file_flushedread>
                if (res < 0) {
 8025a4c:	2800      	cmp	r0, #0
 8025a4e:	dbc6      	blt.n	80259de <lfs_file_flush+0x28>
                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8025a50:	2301      	movs	r3, #1
 8025a52:	f10d 0203 	add.w	r2, sp, #3
 8025a56:	4621      	mov	r1, r4
 8025a58:	4628      	mov	r0, r5
 8025a5a:	f7ff fe0b 	bl	8025674 <lfs_file_flushedwrite>
                if (res < 0) {
 8025a5e:	2800      	cmp	r0, #0
 8025a60:	dbbd      	blt.n	80259de <lfs_file_flush+0x28>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8025a62:	682b      	ldr	r3, [r5, #0]
 8025a64:	3301      	adds	r3, #1
 8025a66:	d0d3      	beq.n	8025a10 <lfs_file_flush+0x5a>
    rcache->block = LFS_BLOCK_NULL;
 8025a68:	9711      	str	r7, [sp, #68]	@ 0x44
 8025a6a:	e7d0      	b.n	8025a0e <lfs_file_flush+0x58>
            file->pos = lfs_max(file->pos, file->ctz.size);
 8025a6c:	42b7      	cmp	r7, r6
 8025a6e:	bf2c      	ite	cs
 8025a70:	6367      	strcs	r7, [r4, #52]	@ 0x34
 8025a72:	6366      	strcc	r6, [r4, #52]	@ 0x34
        file->ctz.head = file->block;
 8025a74:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8025a76:	62a3      	str	r3, [r4, #40]	@ 0x28
        file->ctz.size = file->pos;
 8025a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025a7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 8025a7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8025a7e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
        file->flags |= LFS_F_DIRTY;
 8025a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
        file->pos = pos;
 8025a86:	e9c4 360c 	strd	r3, r6, [r4, #48]	@ 0x30
 8025a8a:	e7a7      	b.n	80259dc <lfs_file_flush+0x26>

08025a8c <lfs_file_write_>:
        const void *buffer, lfs_size_t size) {
 8025a8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025a90:	461e      	mov	r6, r3
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8025a92:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
        const void *buffer, lfs_size_t size) {
 8025a94:	4617      	mov	r7, r2
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8025a96:	079a      	lsls	r2, r3, #30
        const void *buffer, lfs_size_t size) {
 8025a98:	4605      	mov	r5, r0
 8025a9a:	460c      	mov	r4, r1
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8025a9c:	d406      	bmi.n	8025aac <lfs_file_write_+0x20>
 8025a9e:	4b23      	ldr	r3, [pc, #140]	@ (8025b2c <lfs_file_write_+0xa0>)
 8025aa0:	4a23      	ldr	r2, [pc, #140]	@ (8025b30 <lfs_file_write_+0xa4>)
 8025aa2:	4824      	ldr	r0, [pc, #144]	@ (8025b34 <lfs_file_write_+0xa8>)
 8025aa4:	f640 6126 	movw	r1, #3622	@ 0xe26
 8025aa8:	f016 fd3e 	bl	803c528 <__assert_func>
    if (file->flags & LFS_F_READING) {
 8025aac:	035a      	lsls	r2, r3, #13
 8025aae:	d419      	bmi.n	8025ae4 <lfs_file_write_+0x58>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8025ab0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8025ab2:	050b      	lsls	r3, r1, #20
 8025ab4:	d41d      	bmi.n	8025af2 <lfs_file_write_+0x66>
    if (file->pos + size > lfs->file_max) {
 8025ab6:	f8d4 8034 	ldr.w	r8, [r4, #52]	@ 0x34
 8025aba:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8025abc:	eb08 0206 	add.w	r2, r8, r6
 8025ac0:	429a      	cmp	r2, r3
 8025ac2:	d82f      	bhi.n	8025b24 <lfs_file_write_+0x98>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8025ac4:	f411 3900 	ands.w	r9, r1, #131072	@ 0x20000
 8025ac8:	d019      	beq.n	8025afe <lfs_file_write_+0x72>
    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8025aca:	4633      	mov	r3, r6
 8025acc:	463a      	mov	r2, r7
 8025ace:	4621      	mov	r1, r4
 8025ad0:	4628      	mov	r0, r5
 8025ad2:	f7ff fdcf 	bl	8025674 <lfs_file_flushedwrite>
    if (nsize < 0) {
 8025ad6:	2800      	cmp	r0, #0
 8025ad8:	db08      	blt.n	8025aec <lfs_file_write_+0x60>
    file->flags &= ~LFS_F_ERRED;
 8025ada:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8025adc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8025ae0:	6323      	str	r3, [r4, #48]	@ 0x30
    return nsize;
 8025ae2:	e003      	b.n	8025aec <lfs_file_write_+0x60>
        int err = lfs_file_flush(lfs, file);
 8025ae4:	f7ff ff67 	bl	80259b6 <lfs_file_flush>
        if (err) {
 8025ae8:	2800      	cmp	r0, #0
 8025aea:	d0e1      	beq.n	8025ab0 <lfs_file_write_+0x24>
}
 8025aec:	b003      	add	sp, #12
 8025aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8025af2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8025af4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8025af6:	4293      	cmp	r3, r2
        file->pos = file->ctz.size;
 8025af8:	bf88      	it	hi
 8025afa:	6363      	strhi	r3, [r4, #52]	@ 0x34
 8025afc:	e7db      	b.n	8025ab6 <lfs_file_write_+0x2a>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8025afe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8025b00:	4598      	cmp	r8, r3
 8025b02:	d9e2      	bls.n	8025aca <lfs_file_write_+0x3e>
        file->pos = file->ctz.size;
 8025b04:	6363      	str	r3, [r4, #52]	@ 0x34
        while (file->pos < pos) {
 8025b06:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8025b08:	4598      	cmp	r8, r3
 8025b0a:	d9de      	bls.n	8025aca <lfs_file_write_+0x3e>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8025b0c:	2301      	movs	r3, #1
 8025b0e:	f10d 0207 	add.w	r2, sp, #7
 8025b12:	4621      	mov	r1, r4
 8025b14:	4628      	mov	r0, r5
 8025b16:	f88d 9007 	strb.w	r9, [sp, #7]
 8025b1a:	f7ff fdab 	bl	8025674 <lfs_file_flushedwrite>
            if (res < 0) {
 8025b1e:	2800      	cmp	r0, #0
 8025b20:	daf1      	bge.n	8025b06 <lfs_file_write_+0x7a>
 8025b22:	e7e3      	b.n	8025aec <lfs_file_write_+0x60>
        return LFS_ERR_FBIG;
 8025b24:	f06f 001a 	mvn.w	r0, #26
 8025b28:	e7e0      	b.n	8025aec <lfs_file_write_+0x60>
 8025b2a:	bf00      	nop
 8025b2c:	0803fd4b 	.word	0x0803fd4b
 8025b30:	08041e86 	.word	0x08041e86
 8025b34:	0803f7e4 	.word	0x0803f7e4

08025b38 <lfs_bd_sync.constprop.0>:
    rcache->block = LFS_BLOCK_NULL;
 8025b38:	f04f 33ff 	mov.w	r3, #4294967295
static int lfs_bd_sync(lfs_t *lfs,
 8025b3c:	b510      	push	{r4, lr}
    rcache->block = LFS_BLOCK_NULL;
 8025b3e:	6013      	str	r3, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8025b40:	2300      	movs	r3, #0
static int lfs_bd_sync(lfs_t *lfs,
 8025b42:	4604      	mov	r4, r0
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8025b44:	f7ff fc5e 	bl	8025404 <lfs_bd_flush>
    if (err) {
 8025b48:	b950      	cbnz	r0, 8025b60 <lfs_bd_sync.constprop.0+0x28>
    err = lfs->cfg->sync(lfs->cfg);
 8025b4a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8025b4c:	6903      	ldr	r3, [r0, #16]
 8025b4e:	4798      	blx	r3
    LFS_ASSERT(err <= 0);
 8025b50:	2800      	cmp	r0, #0
 8025b52:	dd05      	ble.n	8025b60 <lfs_bd_sync.constprop.0+0x28>
 8025b54:	4b03      	ldr	r3, [pc, #12]	@ (8025b64 <lfs_bd_sync.constprop.0+0x2c>)
 8025b56:	4a04      	ldr	r2, [pc, #16]	@ (8025b68 <lfs_bd_sync.constprop.0+0x30>)
 8025b58:	4804      	ldr	r0, [pc, #16]	@ (8025b6c <lfs_bd_sync.constprop.0+0x34>)
 8025b5a:	21dd      	movs	r1, #221	@ 0xdd
 8025b5c:	f016 fce4 	bl	803c528 <__assert_func>
}
 8025b60:	bd10      	pop	{r4, pc}
 8025b62:	bf00      	nop
 8025b64:	0803f872 	.word	0x0803f872
 8025b68:	08041f0c 	.word	0x08041f0c
 8025b6c:	0803f7e4 	.word	0x0803f7e4

08025b70 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8025b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b74:	460c      	mov	r4, r1
            lfs_min(commit->off + 5*sizeof(uint32_t), lfs->cfg->block_size),
 8025b76:	6e81      	ldr	r1, [r0, #104]	@ 0x68
    const lfs_off_t end = lfs_alignup(
 8025b78:	6863      	ldr	r3, [r4, #4]
            lfs->cfg->prog_size);
 8025b7a:	698a      	ldr	r2, [r1, #24]
    return (a < b) ? a : b;
 8025b7c:	69c9      	ldr	r1, [r1, #28]
    const lfs_off_t end = lfs_alignup(
 8025b7e:	3314      	adds	r3, #20
    return lfs_aligndown(a + alignment-1, alignment);
 8025b80:	1e57      	subs	r7, r2, #1
 8025b82:	428b      	cmp	r3, r1
 8025b84:	bf94      	ite	ls
 8025b86:	18ff      	addls	r7, r7, r3
 8025b88:	187f      	addhi	r7, r7, r1
    uint32_t crc1 = 0;
 8025b8a:	f04f 0a00 	mov.w	sl, #0
    return a - (a % alignment);
 8025b8e:	fbb7 f3f2 	udiv	r3, r7, r2
 8025b92:	fb02 7313 	mls	r3, r2, r3, r7
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8025b96:	b08b      	sub	sp, #44	@ 0x2c
 8025b98:	4605      	mov	r5, r0
 8025b9a:	1aff      	subs	r7, r7, r3
    lfs_off_t off1 = 0;
 8025b9c:	46d1      	mov	r9, sl
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8025b9e:	f06f 0b03 	mvn.w	fp, #3
    while (commit->off < end) {
 8025ba2:	6866      	ldr	r6, [r4, #4]
 8025ba4:	42be      	cmp	r6, r7
 8025ba6:	d319      	bcc.n	8025bdc <lfs_dir_commitcrc+0x6c>
    lfs_off_t off = commit->begin;
 8025ba8:	6923      	ldr	r3, [r4, #16]
    uint32_t crc = 0xffffffff;
 8025baa:	f04f 32ff 	mov.w	r2, #4294967295
 8025bae:	9208      	str	r2, [sp, #32]
    int err = lfs_bd_crc(lfs,
 8025bb0:	eba9 0203 	sub.w	r2, r9, r3
 8025bb4:	e9cd 3200 	strd	r3, r2, [sp]
 8025bb8:	ae08      	add	r6, sp, #32
 8025bba:	9602      	str	r6, [sp, #8]
 8025bbc:	6823      	ldr	r3, [r4, #0]
 8025bbe:	f109 0204 	add.w	r2, r9, #4
 8025bc2:	4629      	mov	r1, r5
 8025bc4:	4628      	mov	r0, r5
 8025bc6:	f7fe fc6b 	bl	80244a0 <lfs_bd_crc.constprop.0>
    if (err) {
 8025bca:	2800      	cmp	r0, #0
 8025bcc:	d147      	bne.n	8025c5e <lfs_dir_commitcrc+0xee>
    if (crc != crc1) {
 8025bce:	9b08      	ldr	r3, [sp, #32]
 8025bd0:	4553      	cmp	r3, sl
 8025bd2:	f000 80a7 	beq.w	8025d24 <lfs_dir_commitcrc+0x1b4>
        return LFS_ERR_CORRUPT;
 8025bd6:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8025bda:	e040      	b.n	8025c5e <lfs_dir_commitcrc+0xee>
                lfs_min(end - (commit->off+sizeof(lfs_tag_t)), 0x3fe)
 8025bdc:	ebab 0306 	sub.w	r3, fp, r6
 8025be0:	443b      	add	r3, r7
        lfs_off_t noff = (
 8025be2:	3604      	adds	r6, #4
 8025be4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8025be8:	4293      	cmp	r3, r2
 8025bea:	bf94      	ite	ls
 8025bec:	18f6      	addls	r6, r6, r3
 8025bee:	18b6      	addhi	r6, r6, r2
        if (noff < end) {
 8025bf0:	42be      	cmp	r6, r7
 8025bf2:	f04f 03ff 	mov.w	r3, #255	@ 0xff
 8025bf6:	d335      	bcc.n	8025c64 <lfs_dir_commitcrc+0xf4>
        uint8_t eperturb = (uint8_t)-1;
 8025bf8:	f88d 301f 	strb.w	r3, [sp, #31]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8025bfc:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 8025bfe:	e9d2 3206 	ldrd	r3, r2, [r2, #24]
 8025c02:	1ad2      	subs	r2, r2, r3
 8025c04:	4296      	cmp	r6, r2
 8025c06:	d836      	bhi.n	8025c76 <lfs_dir_commitcrc+0x106>
            int err = lfs_bd_read(lfs,
 8025c08:	2201      	movs	r2, #1
 8025c0a:	9203      	str	r2, [sp, #12]
 8025c0c:	f10d 021f 	add.w	r2, sp, #31
 8025c10:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8025c14:	6822      	ldr	r2, [r4, #0]
 8025c16:	9200      	str	r2, [sp, #0]
 8025c18:	2100      	movs	r1, #0
 8025c1a:	462a      	mov	r2, r5
 8025c1c:	4628      	mov	r0, r5
 8025c1e:	f7fe f863 	bl	8023ce8 <lfs_bd_read>
            if (err && err != LFS_ERR_CORRUPT) {
 8025c22:	b110      	cbz	r0, 8025c2a <lfs_dir_commitcrc+0xba>
 8025c24:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 8025c28:	d119      	bne.n	8025c5e <lfs_dir_commitcrc+0xee>
                    .size = lfs->cfg->prog_size,
 8025c2a:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8025c2c:	699a      	ldr	r2, [r3, #24]
                err = lfs_bd_crc(lfs,
 8025c2e:	9600      	str	r6, [sp, #0]
                struct lfs_fcrc fcrc = {
 8025c30:	f04f 33ff 	mov.w	r3, #4294967295
 8025c34:	9309      	str	r3, [sp, #36]	@ 0x24
                err = lfs_bd_crc(lfs,
 8025c36:	ab09      	add	r3, sp, #36	@ 0x24
 8025c38:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8025c3c:	4629      	mov	r1, r5
 8025c3e:	6823      	ldr	r3, [r4, #0]
                struct lfs_fcrc fcrc = {
 8025c40:	9208      	str	r2, [sp, #32]
                err = lfs_bd_crc(lfs,
 8025c42:	4628      	mov	r0, r5
 8025c44:	f7fe fc2c 	bl	80244a0 <lfs_bd_crc.constprop.0>
                if (err && err != LFS_ERR_CORRUPT) {
 8025c48:	b110      	cbz	r0, 8025c50 <lfs_dir_commitcrc+0xe0>
 8025c4a:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 8025c4e:	d106      	bne.n	8025c5e <lfs_dir_commitcrc+0xee>
                err = lfs_dir_commitattr(lfs, commit,
 8025c50:	4a3c      	ldr	r2, [pc, #240]	@ (8025d44 <lfs_dir_commitcrc+0x1d4>)
 8025c52:	ab08      	add	r3, sp, #32
 8025c54:	4621      	mov	r1, r4
 8025c56:	4628      	mov	r0, r5
 8025c58:	f7ff fe52 	bl	8025900 <lfs_dir_commitattr>
                if (err) {
 8025c5c:	b158      	cbz	r0, 8025c76 <lfs_dir_commitcrc+0x106>
}
 8025c5e:	b00b      	add	sp, #44	@ 0x2c
 8025c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            noff = lfs_min(noff, end - 5*sizeof(uint32_t));
 8025c64:	f1a7 0214 	sub.w	r2, r7, #20
    return (a < b) ? a : b;
 8025c68:	4296      	cmp	r6, r2
 8025c6a:	bf28      	it	cs
 8025c6c:	4616      	movcs	r6, r2
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8025c6e:	42be      	cmp	r6, r7
        uint8_t eperturb = (uint8_t)-1;
 8025c70:	f88d 301f 	strb.w	r3, [sp, #31]
        if (noff >= end && noff <= lfs->cfg->block_size - lfs->cfg->prog_size) {
 8025c74:	d2c2      	bcs.n	8025bfc <lfs_dir_commitcrc+0x8c>
        lfs_tag_t ntag = LFS_MKTAG(
 8025c76:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8025c7a:	6863      	ldr	r3, [r4, #4]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8025c7c:	68e0      	ldr	r0, [r4, #12]
        lfs_tag_t ntag = LFS_MKTAG(
 8025c7e:	43d2      	mvns	r2, r2
 8025c80:	ebab 0803 	sub.w	r8, fp, r3
 8025c84:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8025c88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8025c8c:	44b0      	add	r8, r6
 8025c8e:	ea48 5802 	orr.w	r8, r8, r2, lsl #20
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8025c92:	68a3      	ldr	r3, [r4, #8]
        lfs_tag_t ntag = LFS_MKTAG(
 8025c94:	f448 287f 	orr.w	r8, r8, #1044480	@ 0xff000
 8025c98:	f448 6840 	orr.w	r8, r8, #3072	@ 0xc00
        ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);
 8025c9c:	ea88 0303 	eor.w	r3, r8, r3
    return __builtin_bswap32(a);
 8025ca0:	ba1b      	rev	r3, r3
 8025ca2:	9308      	str	r3, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8025ca4:	ab08      	add	r3, sp, #32
 8025ca6:	4619      	mov	r1, r3
 8025ca8:	2204      	movs	r2, #4
 8025caa:	f001 fa47 	bl	802713c <lfs_crc>
        int err = lfs_bd_prog(lfs,
 8025cae:	2208      	movs	r2, #8
 8025cb0:	ab08      	add	r3, sp, #32
        commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));
 8025cb2:	60e0      	str	r0, [r4, #12]
        int err = lfs_bd_prog(lfs,
 8025cb4:	9203      	str	r2, [sp, #12]
 8025cb6:	9302      	str	r3, [sp, #8]
 8025cb8:	6863      	ldr	r3, [r4, #4]
 8025cba:	9301      	str	r3, [sp, #4]
 8025cbc:	6823      	ldr	r3, [r4, #0]
        ccrc.crc = lfs_tole32(commit->crc);
 8025cbe:	9009      	str	r0, [sp, #36]	@ 0x24
        int err = lfs_bd_prog(lfs,
 8025cc0:	f105 0110 	add.w	r1, r5, #16
 8025cc4:	9300      	str	r3, [sp, #0]
 8025cc6:	462a      	mov	r2, r5
 8025cc8:	2300      	movs	r3, #0
 8025cca:	4628      	mov	r0, r5
 8025ccc:	9105      	str	r1, [sp, #20]
 8025cce:	f7ff fbeb 	bl	80254a8 <lfs_bd_prog>
        if (err) {
 8025cd2:	2800      	cmp	r0, #0
 8025cd4:	d1c3      	bne.n	8025c5e <lfs_dir_commitcrc+0xee>
        if (off1 == 0) {
 8025cd6:	9905      	ldr	r1, [sp, #20]
 8025cd8:	f1b9 0f00 	cmp.w	r9, #0
 8025cdc:	d104      	bne.n	8025ce8 <lfs_dir_commitcrc+0x178>
            off1 = commit->off + sizeof(lfs_tag_t);
 8025cde:	6863      	ldr	r3, [r4, #4]
            crc1 = commit->crc;
 8025ce0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
            off1 = commit->off + sizeof(lfs_tag_t);
 8025ce4:	f103 0904 	add.w	r9, r3, #4
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8025ce8:	f89d 301f 	ldrb.w	r3, [sp, #31]
        commit->off = noff;
 8025cec:	6066      	str	r6, [r4, #4]
        commit->ptag = ntag ^ ((0x80UL & ~eperturb) << 24);
 8025cee:	43db      	mvns	r3, r3
 8025cf0:	061b      	lsls	r3, r3, #24
 8025cf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8025cf6:	ea83 0308 	eor.w	r3, r3, r8
 8025cfa:	60a3      	str	r3, [r4, #8]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8025cfc:	42be      	cmp	r6, r7
        commit->crc = 0xffffffff;
 8025cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8025d02:	60e3      	str	r3, [r4, #12]
        if (noff >= end || noff >= lfs->pcache.off + lfs->cfg->cache_size) {
 8025d04:	d206      	bcs.n	8025d14 <lfs_dir_commitcrc+0x1a4>
 8025d06:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 8025d08:	696a      	ldr	r2, [r5, #20]
 8025d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8025d0c:	4413      	add	r3, r2
 8025d0e:	429e      	cmp	r6, r3
 8025d10:	f4ff af47 	bcc.w	8025ba2 <lfs_dir_commitcrc+0x32>
            int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8025d14:	462a      	mov	r2, r5
 8025d16:	4628      	mov	r0, r5
 8025d18:	f7ff ff0e 	bl	8025b38 <lfs_bd_sync.constprop.0>
            if (err) {
 8025d1c:	2800      	cmp	r0, #0
 8025d1e:	f43f af40 	beq.w	8025ba2 <lfs_dir_commitcrc+0x32>
 8025d22:	e79c      	b.n	8025c5e <lfs_dir_commitcrc+0xee>
    err = lfs_bd_crc(lfs,
 8025d24:	2204      	movs	r2, #4
 8025d26:	e9cd 9200 	strd	r9, r2, [sp]
 8025d2a:	9602      	str	r6, [sp, #8]
 8025d2c:	6823      	ldr	r3, [r4, #0]
 8025d2e:	4629      	mov	r1, r5
 8025d30:	4628      	mov	r0, r5
 8025d32:	f7fe fbb5 	bl	80244a0 <lfs_bd_crc.constprop.0>
    if (err) {
 8025d36:	2800      	cmp	r0, #0
 8025d38:	d191      	bne.n	8025c5e <lfs_dir_commitcrc+0xee>
    if (crc != 0) {
 8025d3a:	9b08      	ldr	r3, [sp, #32]
 8025d3c:	2b00      	cmp	r3, #0
 8025d3e:	d08e      	beq.n	8025c5e <lfs_dir_commitcrc+0xee>
 8025d40:	e749      	b.n	8025bd6 <lfs_dir_commitcrc+0x66>
 8025d42:	bf00      	nop
 8025d44:	5ffffc08 	.word	0x5ffffc08

08025d48 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8025d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d4c:	b097      	sub	sp, #92	@ 0x5c
 8025d4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    return (lfs->cfg->block_cycles > 0
 8025d52:	6e83      	ldr	r3, [r0, #104]	@ 0x68
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8025d54:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
    return (lfs->cfg->block_cycles > 0
 8025d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8025d5a:	688b      	ldr	r3, [r1, #8]
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8025d5c:	f8bd b088 	ldrh.w	fp, [sp, #136]	@ 0x88
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8025d60:	3301      	adds	r3, #1
 8025d62:	2a00      	cmp	r2, #0
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8025d64:	4604      	mov	r4, r0
 8025d66:	460d      	mov	r5, r1
    dir->rev += 1;
 8025d68:	608b      	str	r3, [r1, #8]
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8025d6a:	dc1b      	bgt.n	8025da4 <lfs_dir_compact+0x5c>
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8025d6c:	2700      	movs	r7, #0
    bool relocated = false;
 8025d6e:	2600      	movs	r6, #0
            struct lfs_commit commit = {
 8025d70:	2300      	movs	r3, #0
 8025d72:	f04f 32ff 	mov.w	r2, #4294967295
 8025d76:	e9cd 3211 	strd	r3, r2, [sp, #68]	@ 0x44
 8025d7a:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
                .end = (lfs->cfg->metadata_max ?
 8025d7e:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
                .block = dir->pair[1],
 8025d80:	6869      	ldr	r1, [r5, #4]
                .end = (lfs->cfg->metadata_max ?
 8025d82:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
            struct lfs_commit commit = {
 8025d84:	9110      	str	r1, [sp, #64]	@ 0x40
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8025d86:	2b00      	cmp	r3, #0
 8025d88:	d03d      	beq.n	8025e06 <lfs_dir_compact+0xbe>
 8025d8a:	3b08      	subs	r3, #8
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8025d8c:	4620      	mov	r0, r4
            struct lfs_commit commit = {
 8025d8e:	9315      	str	r3, [sp, #84]	@ 0x54
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8025d90:	f7fe f9ae 	bl	80240f0 <lfs_bd_erase>
            if (err) {
 8025d94:	2800      	cmp	r0, #0
 8025d96:	d038      	beq.n	8025e0a <lfs_dir_compact+0xc2>
                if (err == LFS_ERR_CORRUPT) {
 8025d98:	f110 0f54 	cmn.w	r0, #84	@ 0x54
 8025d9c:	f040 80c9 	bne.w	8025f32 <lfs_dir_compact+0x1ea>
                    goto relocate;
 8025da0:	463e      	mov	r6, r7
 8025da2:	e010      	b.n	8025dc6 <lfs_dir_compact+0x7e>
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8025da4:	3201      	adds	r2, #1
 8025da6:	f042 0201 	orr.w	r2, r2, #1
 8025daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8025dae:	fb02 3311 	mls	r3, r2, r1, r3
    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 8025db2:	2b00      	cmp	r3, #0
 8025db4:	d1da      	bne.n	8025d6c <lfs_dir_compact+0x24>
 8025db6:	2601      	movs	r6, #1
 8025db8:	a910      	add	r1, sp, #64	@ 0x40
 8025dba:	4628      	mov	r0, r5
 8025dbc:	9310      	str	r3, [sp, #64]	@ 0x40
 8025dbe:	9611      	str	r6, [sp, #68]	@ 0x44
 8025dc0:	f7fd fea6 	bl	8023b10 <lfs_pair_cmp>
 8025dc4:	b1d0      	cbz	r0, 8025dfc <lfs_dir_compact+0xb4>
    rcache->block = LFS_BLOCK_NULL;
 8025dc6:	f04f 33ff 	mov.w	r3, #4294967295
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8025dca:	2700      	movs	r7, #0
 8025dcc:	f04f 0901 	mov.w	r9, #1
    rcache->block = LFS_BLOCK_NULL;
 8025dd0:	6123      	str	r3, [r4, #16]
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8025dd2:	a910      	add	r1, sp, #64	@ 0x40
 8025dd4:	4628      	mov	r0, r5
 8025dd6:	e9cd 7910 	strd	r7, r9, [sp, #64]	@ 0x40
 8025dda:	f7fd fe99 	bl	8023b10 <lfs_pair_cmp>
 8025dde:	2800      	cmp	r0, #0
 8025de0:	f040 80aa 	bne.w	8025f38 <lfs_dir_compact+0x1f0>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8025de4:	4b5b      	ldr	r3, [pc, #364]	@ (8025f54 <lfs_dir_compact+0x20c>)
 8025de6:	9300      	str	r3, [sp, #0]
 8025de8:	686b      	ldr	r3, [r5, #4]
 8025dea:	495b      	ldr	r1, [pc, #364]	@ (8025f58 <lfs_dir_compact+0x210>)
 8025dec:	485b      	ldr	r0, [pc, #364]	@ (8025f5c <lfs_dir_compact+0x214>)
 8025dee:	f640 021d 	movw	r2, #2077	@ 0x81d
 8025df2:	f017 fa3b 	bl	803d26c <iprintf>
            return LFS_ERR_NOSPC;
 8025df6:	f06f 001b 	mvn.w	r0, #27
 8025dfa:	e09a      	b.n	8025f32 <lfs_dir_compact+0x1ea>
 8025dfc:	4637      	mov	r7, r6
 8025dfe:	e7b6      	b.n	8025d6e <lfs_dir_compact+0x26>
        tired = false;
 8025e00:	4607      	mov	r7, r0
        relocated = true;
 8025e02:	464e      	mov	r6, r9
 8025e04:	e7b4      	b.n	8025d70 <lfs_dir_compact+0x28>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8025e06:	69d3      	ldr	r3, [r2, #28]
 8025e08:	e7bf      	b.n	8025d8a <lfs_dir_compact+0x42>
            err = lfs_dir_commitprog(lfs, &commit,
 8025e0a:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
 8025e0e:	2304      	movs	r3, #4
 8025e10:	f105 0208 	add.w	r2, r5, #8
 8025e14:	4649      	mov	r1, r9
 8025e16:	4620      	mov	r0, r4
 8025e18:	f7ff fd53 	bl	80258c2 <lfs_dir_commitprog>
            if (err) {
 8025e1c:	2800      	cmp	r0, #0
 8025e1e:	d1bb      	bne.n	8025d98 <lfs_dir_compact+0x50>
            err = lfs_dir_traverse(lfs,
 8025e20:	ab0b      	add	r3, sp, #44	@ 0x2c
 8025e22:	9307      	str	r3, [sp, #28]
 8025e24:	4b4e      	ldr	r3, [pc, #312]	@ (8025f60 <lfs_dir_compact+0x218>)
 8025e26:	9306      	str	r3, [sp, #24]
 8025e28:	f1c8 0300 	rsb	r3, r8, #0
 8025e2c:	b21b      	sxth	r3, r3
 8025e2e:	e9cd b304 	strd	fp, r3, [sp, #16]
 8025e32:	4b4c      	ldr	r3, [pc, #304]	@ (8025f64 <lfs_dir_compact+0x21c>)
 8025e34:	9302      	str	r3, [sp, #8]
 8025e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e38:	9301      	str	r3, [sp, #4]
 8025e3a:	9b08      	ldr	r3, [sp, #32]
 8025e3c:	9300      	str	r3, [sp, #0]
 8025e3e:	4602      	mov	r2, r0
 8025e40:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8025e42:	f8cd 800c 	str.w	r8, [sp, #12]
 8025e46:	f04f 33ff 	mov.w	r3, #4294967295
 8025e4a:	4620      	mov	r0, r4
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8025e4c:	e9cd 490b 	strd	r4, r9, [sp, #44]	@ 0x2c
            err = lfs_dir_traverse(lfs,
 8025e50:	f7fe f96c 	bl	802412c <lfs_dir_traverse.constprop.0>
            if (err) {
 8025e54:	2800      	cmp	r0, #0
 8025e56:	d19f      	bne.n	8025d98 <lfs_dir_compact+0x50>
            if (!lfs_pair_isnull(dir->tail)) {
 8025e58:	f105 0118 	add.w	r1, r5, #24
 8025e5c:	4608      	mov	r0, r1
 8025e5e:	f7fd fe4d 	bl	8023afc <lfs_pair_isnull>
 8025e62:	b960      	cbnz	r0, 8025e7e <lfs_dir_compact+0x136>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8025e64:	7dea      	ldrb	r2, [r5, #23]
                err = lfs_dir_commitattr(lfs, &commit,
 8025e66:	460b      	mov	r3, r1
 8025e68:	493f      	ldr	r1, [pc, #252]	@ (8025f68 <lfs_dir_compact+0x220>)
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8025e6a:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
                err = lfs_dir_commitattr(lfs, &commit,
 8025e6e:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 8025e72:	4620      	mov	r0, r4
 8025e74:	4649      	mov	r1, r9
 8025e76:	f7ff fd43 	bl	8025900 <lfs_dir_commitattr>
                if (err) {
 8025e7a:	2800      	cmp	r0, #0
 8025e7c:	d18c      	bne.n	8025d98 <lfs_dir_compact+0x50>
            lfs_gstate_t delta = {0};
 8025e7e:	2300      	movs	r3, #0
 8025e80:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
 8025e84:	930f      	str	r3, [sp, #60]	@ 0x3c
            if (!relocated) {
 8025e86:	b94e      	cbnz	r6, 8025e9c <lfs_dir_compact+0x154>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8025e88:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8025e8c:	a80d      	add	r0, sp, #52	@ 0x34
 8025e8e:	f7fd fe6e 	bl	8023b6e <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8025e92:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8025e96:	a80d      	add	r0, sp, #52	@ 0x34
 8025e98:	f7fd fe69 	bl	8023b6e <lfs_gstate_xor>
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8025e9c:	f104 0a48 	add.w	sl, r4, #72	@ 0x48
 8025ea0:	4651      	mov	r1, sl
 8025ea2:	a80d      	add	r0, sp, #52	@ 0x34
 8025ea4:	f7fd fe63 	bl	8023b6e <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8025ea8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8025eaa:	aa0d      	add	r2, sp, #52	@ 0x34
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8025eac:	f36f 0309 	bfc	r3, #0, #10
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8025eb0:	4629      	mov	r1, r5
 8025eb2:	4620      	mov	r0, r4
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8025eb4:	930d      	str	r3, [sp, #52]	@ 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8025eb6:	f7fe f885 	bl	8023fc4 <lfs_dir_getgstate>
            if (err) {
 8025eba:	2800      	cmp	r0, #0
 8025ebc:	d139      	bne.n	8025f32 <lfs_dir_compact+0x1ea>
            if (!lfs_gstate_iszero(&delta)) {
 8025ebe:	a80d      	add	r0, sp, #52	@ 0x34
 8025ec0:	f7fd fe63 	bl	8023b8a <lfs_gstate_iszero>
 8025ec4:	b940      	cbnz	r0, 8025ed8 <lfs_dir_compact+0x190>
                err = lfs_dir_commitattr(lfs, &commit,
 8025ec6:	4a29      	ldr	r2, [pc, #164]	@ (8025f6c <lfs_dir_compact+0x224>)
 8025ec8:	ab0d      	add	r3, sp, #52	@ 0x34
 8025eca:	4649      	mov	r1, r9
 8025ecc:	4620      	mov	r0, r4
 8025ece:	f7ff fd17 	bl	8025900 <lfs_dir_commitattr>
                if (err) {
 8025ed2:	2800      	cmp	r0, #0
 8025ed4:	f47f af60 	bne.w	8025d98 <lfs_dir_compact+0x50>
            err = lfs_dir_commitcrc(lfs, &commit);
 8025ed8:	4649      	mov	r1, r9
 8025eda:	4620      	mov	r0, r4
 8025edc:	f7ff fe48 	bl	8025b70 <lfs_dir_commitcrc>
            if (err) {
 8025ee0:	2800      	cmp	r0, #0
 8025ee2:	f47f af59 	bne.w	8025d98 <lfs_dir_compact+0x50>
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8025ee6:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8025ee8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025eea:	6999      	ldr	r1, [r3, #24]
 8025eec:	fbb2 f3f1 	udiv	r3, r2, r1
 8025ef0:	fb01 2313 	mls	r3, r1, r3, r2
 8025ef4:	b133      	cbz	r3, 8025f04 <lfs_dir_compact+0x1bc>
 8025ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8025f70 <lfs_dir_compact+0x228>)
 8025ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8025f74 <lfs_dir_compact+0x22c>)
 8025efa:	4817      	ldr	r0, [pc, #92]	@ (8025f58 <lfs_dir_compact+0x210>)
 8025efc:	f640 0106 	movw	r1, #2054	@ 0x806
 8025f00:	f016 fb12 	bl	803c528 <__assert_func>
    pair[0] = pair[1];
 8025f04:	e9d5 1000 	ldrd	r1, r0, [r5]
            dir->off = commit.off;
 8025f08:	60ea      	str	r2, [r5, #12]
            dir->count = end - begin;
 8025f0a:	ebab 0808 	sub.w	r8, fp, r8
            dir->etag = commit.ptag;
 8025f0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            dir->count = end - begin;
 8025f10:	f8a5 8014 	strh.w	r8, [r5, #20]
    pair[1] = t;
 8025f14:	e9c5 0100 	strd	r0, r1, [r5]
            dir->etag = commit.ptag;
 8025f18:	612a      	str	r2, [r5, #16]
            lfs->gdelta = (lfs_gstate_t){0};
 8025f1a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8025f1c:	e9ca 3301 	strd	r3, r3, [sl, #4]
            if (!relocated) {
 8025f20:	b936      	cbnz	r6, 8025f30 <lfs_dir_compact+0x1e8>
                lfs->gdisk = lfs->gstate;
 8025f22:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8025f26:	3430      	adds	r4, #48	@ 0x30
 8025f28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8025f2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return relocated ? LFS_OK_RELOCATED : 0;
 8025f30:	4630      	mov	r0, r6
}
 8025f32:	b017      	add	sp, #92	@ 0x5c
 8025f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8025f38:	1d29      	adds	r1, r5, #4
 8025f3a:	4620      	mov	r0, r4
 8025f3c:	f7ff f896 	bl	802506c <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8025f40:	2800      	cmp	r0, #0
 8025f42:	f43f af5d 	beq.w	8025e00 <lfs_dir_compact+0xb8>
 8025f46:	f110 0f1c 	cmn.w	r0, #28
 8025f4a:	d1f2      	bne.n	8025f32 <lfs_dir_compact+0x1ea>
 8025f4c:	2e00      	cmp	r6, #0
 8025f4e:	f43f af52 	beq.w	8025df6 <lfs_dir_compact+0xae>
 8025f52:	e70d      	b.n	8025d70 <lfs_dir_compact+0x28>
 8025f54:	0803f6b1 	.word	0x0803f6b1
 8025f58:	0803f7e4 	.word	0x0803f7e4
 8025f5c:	0803fd9e 	.word	0x0803fd9e
 8025f60:	080259ab 	.word	0x080259ab
 8025f64:	400ffc00 	.word	0x400ffc00
 8025f68:	000ffc08 	.word	0x000ffc08
 8025f6c:	7ffffc0c 	.word	0x7ffffc0c
 8025f70:	0803fd78 	.word	0x0803fd78
 8025f74:	08041efc 	.word	0x08041efc

08025f78 <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8025f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f7c:	b08d      	sub	sp, #52	@ 0x34
 8025f7e:	460c      	mov	r4, r1
    int err = lfs_dir_alloc(lfs, &tail);
 8025f80:	a904      	add	r1, sp, #16
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8025f82:	f8bd 9054 	ldrh.w	r9, [sp, #84]	@ 0x54
 8025f86:	4605      	mov	r5, r0
 8025f88:	4617      	mov	r7, r2
 8025f8a:	4698      	mov	r8, r3
    int err = lfs_dir_alloc(lfs, &tail);
 8025f8c:	f7ff f8c2 	bl	8025114 <lfs_dir_alloc>
    if (err) {
 8025f90:	4606      	mov	r6, r0
 8025f92:	bb28      	cbnz	r0, 8025fe0 <lfs_dir_split+0x68>
    tail.split = dir->split;
 8025f94:	7de3      	ldrb	r3, [r4, #23]
 8025f96:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8025f9a:	69a3      	ldr	r3, [r4, #24]
 8025f9c:	930a      	str	r3, [sp, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8025f9e:	69e3      	ldr	r3, [r4, #28]
 8025fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8025fa2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8025fa6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8025faa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025fac:	9300      	str	r3, [sp, #0]
 8025fae:	463a      	mov	r2, r7
 8025fb0:	4643      	mov	r3, r8
 8025fb2:	a904      	add	r1, sp, #16
 8025fb4:	4628      	mov	r0, r5
 8025fb6:	f7ff fec7 	bl	8025d48 <lfs_dir_compact>
    if (res < 0) {
 8025fba:	2800      	cmp	r0, #0
 8025fbc:	db14      	blt.n	8025fe8 <lfs_dir_split+0x70>
    dir->tail[0] = tail.pair[0];
 8025fbe:	9f04      	ldr	r7, [sp, #16]
    dir->tail[1] = tail.pair[1];
 8025fc0:	9a05      	ldr	r2, [sp, #20]
    dir->tail[0] = tail.pair[0];
 8025fc2:	61a7      	str	r7, [r4, #24]
    dir->split = true;
 8025fc4:	2301      	movs	r3, #1
    dir->tail[1] = tail.pair[1];
 8025fc6:	61e2      	str	r2, [r4, #28]
    dir->split = true;
 8025fc8:	75e3      	strb	r3, [r4, #23]
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8025fca:	f105 0120 	add.w	r1, r5, #32
 8025fce:	4620      	mov	r0, r4
 8025fd0:	f7fd fd9e 	bl	8023b10 <lfs_pair_cmp>
 8025fd4:	b920      	cbnz	r0, 8025fe0 <lfs_dir_split+0x68>
 8025fd6:	f1b9 0f00 	cmp.w	r9, #0
 8025fda:	d101      	bne.n	8025fe0 <lfs_dir_split+0x68>
        lfs->root[1] = tail.pair[1];
 8025fdc:	e9c5 7208 	strd	r7, r2, [r5, #32]
}
 8025fe0:	4630      	mov	r0, r6
 8025fe2:	b00d      	add	sp, #52	@ 0x34
 8025fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return res;
 8025fe8:	4606      	mov	r6, r0
 8025fea:	e7f9      	b.n	8025fe0 <lfs_dir_split+0x68>

08025fec <lfs_dir_relocatingcommit>:
        lfs_mdir_t *pdir) {
 8025fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ff0:	b097      	sub	sp, #92	@ 0x5c
 8025ff2:	461f      	mov	r7, r3
 8025ff4:	f8dd 8084 	ldr.w	r8, [sp, #132]	@ 0x84
 8025ff8:	9208      	str	r2, [sp, #32]
    for (int i = 0; i < attrcount; i++) {
 8025ffa:	2300      	movs	r3, #0
        lfs_mdir_t *pdir) {
 8025ffc:	4606      	mov	r6, r0
 8025ffe:	460d      	mov	r5, r1
    bool hasdelete = false;
 8026000:	4618      	mov	r0, r3
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8026002:	f240 4a01 	movw	sl, #1025	@ 0x401
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8026006:	f240 4cff 	movw	ip, #1279	@ 0x4ff
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 802600a:	f107 0e04 	add.w	lr, r7, #4
    for (int i = 0; i < attrcount; i++) {
 802600e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026010:	4293      	cmp	r3, r2
 8026012:	d17e      	bne.n	8026112 <lfs_dir_relocatingcommit+0x126>
    if (hasdelete && dir->count == 0) {
 8026014:	2800      	cmp	r0, #0
 8026016:	f040 80a6 	bne.w	8026166 <lfs_dir_relocatingcommit+0x17a>
    if (dir->erased) {
 802601a:	7dab      	ldrb	r3, [r5, #22]
 802601c:	2b00      	cmp	r3, #0
 802601e:	f040 80c3 	bne.w	80261a8 <lfs_dir_relocatingcommit+0x1bc>
    rcache->block = LFS_BLOCK_NULL;
 8026022:	f04f 33ff 	mov.w	r3, #4294967295
    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8026026:	f8b5 9014 	ldrh.w	r9, [r5, #20]
    rcache->block = LFS_BLOCK_NULL;
 802602a:	6133      	str	r3, [r6, #16]
        lfs_size_t split = begin;
 802602c:	f04f 0800 	mov.w	r8, #0
            lfs_size_t size = 0;
 8026030:	46c3      	mov	fp, r8
        while (end - split > 1) {
 8026032:	eba9 0a08 	sub.w	sl, r9, r8
 8026036:	f1ba 0f01 	cmp.w	sl, #1
 802603a:	f200 8163 	bhi.w	8026304 <lfs_dir_relocatingcommit+0x318>
        if (split == begin) {
 802603e:	f1b8 0f00 	cmp.w	r8, #0
 8026042:	d01c      	beq.n	802607e <lfs_dir_relocatingcommit+0x92>
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026044:	fa1f f888 	uxth.w	r8, r8
 8026048:	e9cd 8901 	strd	r8, r9, [sp, #4]
 802604c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802604e:	9500      	str	r5, [sp, #0]
 8026050:	463a      	mov	r2, r7
 8026052:	4629      	mov	r1, r5
 8026054:	4630      	mov	r0, r6
 8026056:	f7ff ff8f 	bl	8025f78 <lfs_dir_split>
        if (err && err != LFS_ERR_NOSPC) {
 802605a:	4604      	mov	r4, r0
 802605c:	2800      	cmp	r0, #0
 802605e:	f000 813a 	beq.w	80262d6 <lfs_dir_relocatingcommit+0x2ea>
 8026062:	f110 0f1c 	cmn.w	r0, #28
 8026066:	d150      	bne.n	802610a <lfs_dir_relocatingcommit+0x11e>
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8026068:	4b9c      	ldr	r3, [pc, #624]	@ (80262dc <lfs_dir_relocatingcommit+0x2f0>)
 802606a:	9301      	str	r3, [sp, #4]
 802606c:	686b      	ldr	r3, [r5, #4]
 802606e:	9300      	str	r3, [sp, #0]
 8026070:	682b      	ldr	r3, [r5, #0]
 8026072:	499b      	ldr	r1, [pc, #620]	@ (80262e0 <lfs_dir_relocatingcommit+0x2f4>)
 8026074:	489b      	ldr	r0, [pc, #620]	@ (80262e4 <lfs_dir_relocatingcommit+0x2f8>)
 8026076:	f44f 6207 	mov.w	r2, #2160	@ 0x870
 802607a:	f017 f8f7 	bl	803d26c <iprintf>
    return (lfs->cfg->block_cycles > 0
 802607e:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8026080:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8026082:	2a00      	cmp	r2, #0
 8026084:	dd35      	ble.n	80260f2 <lfs_dir_relocatingcommit+0x106>
 8026086:	68ab      	ldr	r3, [r5, #8]
 8026088:	3201      	adds	r2, #1
 802608a:	3301      	adds	r3, #1
 802608c:	f042 0201 	orr.w	r2, r2, #1
 8026090:	fbb3 f1f2 	udiv	r1, r3, r2
 8026094:	fb02 3311 	mls	r3, r2, r1, r3
 8026098:	bb5b      	cbnz	r3, 80260f2 <lfs_dir_relocatingcommit+0x106>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 802609a:	f04f 0801 	mov.w	r8, #1
 802609e:	a910      	add	r1, sp, #64	@ 0x40
 80260a0:	4628      	mov	r0, r5
 80260a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80260a4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80260a8:	f7fd fd32 	bl	8023b10 <lfs_pair_cmp>
 80260ac:	4682      	mov	sl, r0
 80260ae:	bb00      	cbnz	r0, 80260f2 <lfs_dir_relocatingcommit+0x106>
        lfs_ssize_t size = lfs_fs_size_(lfs);
 80260b0:	4630      	mov	r0, r6
 80260b2:	f7ff f86d 	bl	8025190 <lfs_fs_size_>
        if (size < 0) {
 80260b6:	1e04      	subs	r4, r0, #0
 80260b8:	db6b      	blt.n	8026192 <lfs_dir_relocatingcommit+0x1a6>
        if (lfs->block_count - size > lfs->block_count/8) {
 80260ba:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 80260bc:	1b1c      	subs	r4, r3, r4
 80260be:	ebb4 0fd3 	cmp.w	r4, r3, lsr #3
 80260c2:	d916      	bls.n	80260f2 <lfs_dir_relocatingcommit+0x106>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 80260c4:	e9cd a901 	strd	sl, r9, [sp, #4]
 80260c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80260ca:	9500      	str	r5, [sp, #0]
 80260cc:	463a      	mov	r2, r7
 80260ce:	4629      	mov	r1, r5
 80260d0:	4630      	mov	r0, r6
 80260d2:	f7ff ff51 	bl	8025f78 <lfs_dir_split>
            if (err && err != LFS_ERR_NOSPC) {
 80260d6:	4604      	mov	r4, r0
 80260d8:	2800      	cmp	r0, #0
 80260da:	f000 814e 	beq.w	802637a <lfs_dir_relocatingcommit+0x38e>
 80260de:	f110 0f1c 	cmn.w	r0, #28
 80260e2:	d112      	bne.n	802610a <lfs_dir_relocatingcommit+0x11e>
                LFS_WARN("Unable to expand superblock");
 80260e4:	4b7d      	ldr	r3, [pc, #500]	@ (80262dc <lfs_dir_relocatingcommit+0x2f0>)
 80260e6:	497e      	ldr	r1, [pc, #504]	@ (80262e0 <lfs_dir_relocatingcommit+0x2f4>)
 80260e8:	487f      	ldr	r0, [pc, #508]	@ (80262e8 <lfs_dir_relocatingcommit+0x2fc>)
 80260ea:	f44f 6209 	mov.w	r2, #2192	@ 0x890
 80260ee:	f017 f8bd 	bl	803d26c <iprintf>
    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80260f2:	2300      	movs	r3, #0
 80260f4:	e9cd 5300 	strd	r5, r3, [sp]
 80260f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80260fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80260fe:	463a      	mov	r2, r7
 8026100:	4629      	mov	r1, r5
 8026102:	4630      	mov	r0, r6
 8026104:	f7ff fe20 	bl	8025d48 <lfs_dir_compact>
 8026108:	4604      	mov	r4, r0
    if (state < 0) {
 802610a:	2c00      	cmp	r4, #0
 802610c:	f280 80c8 	bge.w	80262a0 <lfs_dir_relocatingcommit+0x2b4>
 8026110:	e03f      	b.n	8026192 <lfs_dir_relocatingcommit+0x1a6>
    return (tag & 0x7ff00000) >> 20;
 8026112:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8026116:	0d0a      	lsrs	r2, r1, #20
 8026118:	f3c1 510a 	ubfx	r1, r1, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 802611c:	4551      	cmp	r1, sl
 802611e:	d104      	bne.n	802612a <lfs_dir_relocatingcommit+0x13e>
            dir->count += 1;
 8026120:	8aaa      	ldrh	r2, [r5, #20]
 8026122:	3201      	adds	r2, #1
 8026124:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
 8026126:	3301      	adds	r3, #1
 8026128:	e771      	b.n	802600e <lfs_dir_relocatingcommit+0x22>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 802612a:	4561      	cmp	r1, ip
 802612c:	d10c      	bne.n	8026148 <lfs_dir_relocatingcommit+0x15c>
            LFS_ASSERT(dir->count > 0);
 802612e:	8aaa      	ldrh	r2, [r5, #20]
 8026130:	b932      	cbnz	r2, 8026140 <lfs_dir_relocatingcommit+0x154>
 8026132:	4b6e      	ldr	r3, [pc, #440]	@ (80262ec <lfs_dir_relocatingcommit+0x300>)
 8026134:	4a6e      	ldr	r2, [pc, #440]	@ (80262f0 <lfs_dir_relocatingcommit+0x304>)
 8026136:	f640 01a9 	movw	r1, #2217	@ 0x8a9
        LFS_ASSERT(pdir);
 802613a:	4869      	ldr	r0, [pc, #420]	@ (80262e0 <lfs_dir_relocatingcommit+0x2f4>)
 802613c:	f016 f9f4 	bl	803c528 <__assert_func>
            dir->count -= 1;
 8026140:	3a01      	subs	r2, #1
 8026142:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
 8026144:	2001      	movs	r0, #1
 8026146:	e7ee      	b.n	8026126 <lfs_dir_relocatingcommit+0x13a>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026148:	f402 69e0 	and.w	r9, r2, #1792	@ 0x700
 802614c:	f5b9 6fc0 	cmp.w	r9, #1536	@ 0x600
 8026150:	d1e9      	bne.n	8026126 <lfs_dir_relocatingcommit+0x13a>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8026152:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
 8026156:	680c      	ldr	r4, [r1, #0]
 8026158:	61ac      	str	r4, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 802615a:	6849      	ldr	r1, [r1, #4]
 802615c:	61e9      	str	r1, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 802615e:	f002 0201 	and.w	r2, r2, #1
 8026162:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
 8026164:	e7df      	b.n	8026126 <lfs_dir_relocatingcommit+0x13a>
    if (hasdelete && dir->count == 0) {
 8026166:	8aab      	ldrh	r3, [r5, #20]
 8026168:	2b00      	cmp	r3, #0
 802616a:	f47f af56 	bne.w	802601a <lfs_dir_relocatingcommit+0x2e>
        LFS_ASSERT(pdir);
 802616e:	f1b8 0f00 	cmp.w	r8, #0
 8026172:	d104      	bne.n	802617e <lfs_dir_relocatingcommit+0x192>
 8026174:	4b5f      	ldr	r3, [pc, #380]	@ (80262f4 <lfs_dir_relocatingcommit+0x308>)
 8026176:	4a5e      	ldr	r2, [pc, #376]	@ (80262f0 <lfs_dir_relocatingcommit+0x304>)
 8026178:	f640 01b6 	movw	r1, #2230	@ 0x8b6
 802617c:	e7dd      	b.n	802613a <lfs_dir_relocatingcommit+0x14e>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 802617e:	4642      	mov	r2, r8
 8026180:	4629      	mov	r1, r5
 8026182:	4630      	mov	r0, r6
 8026184:	f7fe fc2e 	bl	80249e4 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 8026188:	4604      	mov	r4, r0
 802618a:	b130      	cbz	r0, 802619a <lfs_dir_relocatingcommit+0x1ae>
 802618c:	1c83      	adds	r3, r0, #2
 802618e:	f43f af44 	beq.w	802601a <lfs_dir_relocatingcommit+0x2e>
}
 8026192:	4620      	mov	r0, r4
 8026194:	b017      	add	sp, #92	@ 0x5c
 8026196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (err != LFS_ERR_NOENT && pdir->split) {
 802619a:	f898 3017 	ldrb.w	r3, [r8, #23]
 802619e:	2b00      	cmp	r3, #0
 80261a0:	f43f af3b 	beq.w	802601a <lfs_dir_relocatingcommit+0x2e>
            state = LFS_OK_DROPPED;
 80261a4:	2402      	movs	r4, #2
 80261a6:	e07b      	b.n	80262a0 <lfs_dir_relocatingcommit+0x2b4>
            .off = dir->off,
 80261a8:	68ea      	ldr	r2, [r5, #12]
            .end = (lfs->cfg->metadata_max ?
 80261aa:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
        struct lfs_commit commit = {
 80261ac:	682b      	ldr	r3, [r5, #0]
 80261ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80261b0:	f04f 31ff 	mov.w	r1, #4294967295
 80261b4:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
            .end = (lfs->cfg->metadata_max ?
 80261b8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
            .ptag = dir->etag,
 80261ba:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
 80261bc:	9211      	str	r2, [sp, #68]	@ 0x44
 80261be:	9312      	str	r3, [sp, #72]	@ 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80261c0:	b301      	cbz	r1, 8026204 <lfs_dir_relocatingcommit+0x218>
 80261c2:	3908      	subs	r1, #8
        struct lfs_commit commit = {
 80261c4:	9115      	str	r1, [sp, #84]	@ 0x54
        int err = lfs_dir_traverse(lfs,
 80261c6:	a90b      	add	r1, sp, #44	@ 0x2c
 80261c8:	9107      	str	r1, [sp, #28]
 80261ca:	494b      	ldr	r1, [pc, #300]	@ (80262f8 <lfs_dir_relocatingcommit+0x30c>)
 80261cc:	9106      	str	r1, [sp, #24]
 80261ce:	2100      	movs	r1, #0
 80261d0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80261d4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80261d8:	9920      	ldr	r1, [sp, #128]	@ 0x80
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80261da:	960b      	str	r6, [sp, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 80261dc:	e9cd 7100 	strd	r7, r1, [sp]
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80261e0:	f10d 0b40 	add.w	fp, sp, #64	@ 0x40
        int err = lfs_dir_traverse(lfs,
 80261e4:	4629      	mov	r1, r5
 80261e6:	4630      	mov	r0, r6
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80261e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
        int err = lfs_dir_traverse(lfs,
 80261ec:	f7fd ff9e 	bl	802412c <lfs_dir_traverse.constprop.0>
        if (err) {
 80261f0:	4604      	mov	r4, r0
 80261f2:	b148      	cbz	r0, 8026208 <lfs_dir_relocatingcommit+0x21c>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80261f4:	f114 0f1c 	cmn.w	r4, #28
 80261f8:	f43f af13 	beq.w	8026022 <lfs_dir_relocatingcommit+0x36>
 80261fc:	f114 0f54 	cmn.w	r4, #84	@ 0x54
 8026200:	d1c7      	bne.n	8026192 <lfs_dir_relocatingcommit+0x1a6>
 8026202:	e70e      	b.n	8026022 <lfs_dir_relocatingcommit+0x36>
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026204:	69c1      	ldr	r1, [r0, #28]
 8026206:	e7dc      	b.n	80261c2 <lfs_dir_relocatingcommit+0x1d6>
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026208:	f106 0930 	add.w	r9, r6, #48	@ 0x30
        lfs_gstate_t delta = {0};
 802620c:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 8026210:	900f      	str	r0, [sp, #60]	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026212:	4649      	mov	r1, r9
 8026214:	a80d      	add	r0, sp, #52	@ 0x34
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026216:	f106 083c 	add.w	r8, r6, #60	@ 0x3c
        lfs_gstate_xor(&delta, &lfs->gstate);
 802621a:	f7fd fca8 	bl	8023b6e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 802621e:	f106 0a48 	add.w	sl, r6, #72	@ 0x48
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026222:	4641      	mov	r1, r8
 8026224:	a80d      	add	r0, sp, #52	@ 0x34
 8026226:	f7fd fca2 	bl	8023b6e <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 802622a:	a80d      	add	r0, sp, #52	@ 0x34
 802622c:	4651      	mov	r1, sl
 802622e:	f7fd fc9e 	bl	8023b6e <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
        if (!lfs_gstate_iszero(&delta)) {
 8026234:	a80d      	add	r0, sp, #52	@ 0x34
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026236:	f36f 0309 	bfc	r3, #0, #10
 802623a:	930d      	str	r3, [sp, #52]	@ 0x34
        if (!lfs_gstate_iszero(&delta)) {
 802623c:	f7fd fca5 	bl	8023b8a <lfs_gstate_iszero>
 8026240:	b980      	cbnz	r0, 8026264 <lfs_dir_relocatingcommit+0x278>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026242:	aa0d      	add	r2, sp, #52	@ 0x34
 8026244:	4629      	mov	r1, r5
 8026246:	4630      	mov	r0, r6
 8026248:	f7fd febc 	bl	8023fc4 <lfs_dir_getgstate>
            if (err) {
 802624c:	4604      	mov	r4, r0
 802624e:	2800      	cmp	r0, #0
 8026250:	d19f      	bne.n	8026192 <lfs_dir_relocatingcommit+0x1a6>
            err = lfs_dir_commitattr(lfs, &commit,
 8026252:	4a2a      	ldr	r2, [pc, #168]	@ (80262fc <lfs_dir_relocatingcommit+0x310>)
 8026254:	ab0d      	add	r3, sp, #52	@ 0x34
 8026256:	4659      	mov	r1, fp
 8026258:	4630      	mov	r0, r6
 802625a:	f7ff fb51 	bl	8025900 <lfs_dir_commitattr>
            if (err) {
 802625e:	4604      	mov	r4, r0
 8026260:	2800      	cmp	r0, #0
 8026262:	d1c7      	bne.n	80261f4 <lfs_dir_relocatingcommit+0x208>
        err = lfs_dir_commitcrc(lfs, &commit);
 8026264:	4659      	mov	r1, fp
 8026266:	4630      	mov	r0, r6
 8026268:	f7ff fc82 	bl	8025b70 <lfs_dir_commitcrc>
        if (err) {
 802626c:	4604      	mov	r4, r0
 802626e:	2800      	cmp	r0, #0
 8026270:	d1c0      	bne.n	80261f4 <lfs_dir_relocatingcommit+0x208>
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026272:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 8026274:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026276:	6991      	ldr	r1, [r2, #24]
 8026278:	fbb3 f2f1 	udiv	r2, r3, r1
 802627c:	fb01 3212 	mls	r2, r1, r2, r3
 8026280:	b122      	cbz	r2, 802628c <lfs_dir_relocatingcommit+0x2a0>
 8026282:	4b1f      	ldr	r3, [pc, #124]	@ (8026300 <lfs_dir_relocatingcommit+0x314>)
 8026284:	4a1a      	ldr	r2, [pc, #104]	@ (80262f0 <lfs_dir_relocatingcommit+0x304>)
 8026286:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 802628a:	e756      	b.n	802613a <lfs_dir_relocatingcommit+0x14e>
        lfs->gdisk = lfs->gstate;
 802628c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
        dir->off = commit.off;
 8026290:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
 8026292:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026294:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
 8026296:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 802629a:	64b4      	str	r4, [r6, #72]	@ 0x48
 802629c:	e9ca 4401 	strd	r4, r4, [sl, #4]
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80262a0:	9b08      	ldr	r3, [sp, #32]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80262a2:	f8d6 8028 	ldr.w	r8, [r6, #40]	@ 0x28
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 80262a6:	681b      	ldr	r3, [r3, #0]
 80262a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80262aa:	9b08      	ldr	r3, [sp, #32]
 80262ac:	685b      	ldr	r3, [r3, #4]
 80262ae:	9311      	str	r3, [sp, #68]	@ 0x44
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80262b0:	f106 0320 	add.w	r3, r6, #32
 80262b4:	9309      	str	r3, [sp, #36]	@ 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80262b6:	f1b8 0f00 	cmp.w	r8, #0
 80262ba:	f43f af6a 	beq.w	8026192 <lfs_dir_relocatingcommit+0x1a6>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 80262be:	f108 0908 	add.w	r9, r8, #8
 80262c2:	a910      	add	r1, sp, #64	@ 0x40
 80262c4:	4648      	mov	r0, r9
 80262c6:	f7fd fc23 	bl	8023b10 <lfs_pair_cmp>
 80262ca:	4682      	mov	sl, r0
 80262cc:	2800      	cmp	r0, #0
 80262ce:	d056      	beq.n	802637e <lfs_dir_relocatingcommit+0x392>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80262d0:	f8d8 8000 	ldr.w	r8, [r8]
 80262d4:	e7ef      	b.n	80262b6 <lfs_dir_relocatingcommit+0x2ca>
            end = split;
 80262d6:	46c1      	mov	r9, r8
 80262d8:	e6a8      	b.n	802602c <lfs_dir_relocatingcommit+0x40>
 80262da:	bf00      	nop
 80262dc:	0803f6b1 	.word	0x0803f6b1
 80262e0:	0803f7e4 	.word	0x0803f7e4
 80262e4:	0803fde8 	.word	0x0803fde8
 80262e8:	0803fe16 	.word	0x0803fe16
 80262ec:	0803fdd4 	.word	0x0803fdd4
 80262f0:	08041f29 	.word	0x08041f29
 80262f4:	0803fde3 	.word	0x0803fde3
 80262f8:	080259ab 	.word	0x080259ab
 80262fc:	7ffffc0c 	.word	0x7ffffc0c
 8026300:	0803fd78 	.word	0x0803fd78
            int err = lfs_dir_traverse(lfs,
 8026304:	ab10      	add	r3, sp, #64	@ 0x40
 8026306:	fa1f f288 	uxth.w	r2, r8
 802630a:	9307      	str	r3, [sp, #28]
 802630c:	4b4e      	ldr	r3, [pc, #312]	@ (8026448 <lfs_dir_relocatingcommit+0x45c>)
 802630e:	9306      	str	r3, [sp, #24]
 8026310:	4253      	negs	r3, r2
 8026312:	b21b      	sxth	r3, r3
 8026314:	e9cd 9304 	strd	r9, r3, [sp, #16]
 8026318:	4b4c      	ldr	r3, [pc, #304]	@ (802644c <lfs_dir_relocatingcommit+0x460>)
 802631a:	9302      	str	r3, [sp, #8]
 802631c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802631e:	9203      	str	r2, [sp, #12]
 8026320:	e9cd 7300 	strd	r7, r3, [sp]
 8026324:	2200      	movs	r2, #0
 8026326:	f04f 33ff 	mov.w	r3, #4294967295
 802632a:	4629      	mov	r1, r5
 802632c:	4630      	mov	r0, r6
            lfs_size_t size = 0;
 802632e:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
            int err = lfs_dir_traverse(lfs,
 8026332:	f7fd fefb 	bl	802412c <lfs_dir_traverse.constprop.0>
            if (err) {
 8026336:	4604      	mov	r4, r0
 8026338:	2800      	cmp	r0, #0
 802633a:	f47f aee6 	bne.w	802610a <lfs_dir_relocatingcommit+0x11e>
            if (end - split < 0xff
 802633e:	f1ba 0ffe 	cmp.w	sl, #254	@ 0xfe
 8026342:	d815      	bhi.n	8026370 <lfs_dir_relocatingcommit+0x384>
                        lfs->cfg->block_size - 40,
 8026344:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8026346:	69da      	ldr	r2, [r3, #28]
                            (lfs->cfg->metadata_max
 8026348:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
                    && size <= lfs_min(
 802634a:	f1a2 0128 	sub.w	r1, r2, #40	@ 0x28
 802634e:	b190      	cbz	r0, 8026376 <lfs_dir_relocatingcommit+0x38a>
 8026350:	0842      	lsrs	r2, r0, #1
                            lfs->cfg->prog_size))) {
 8026352:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
 8026354:	1e43      	subs	r3, r0, #1
 8026356:	4413      	add	r3, r2
    return a - (a % alignment);
 8026358:	fbb3 f2f0 	udiv	r2, r3, r0
 802635c:	fb00 3212 	mls	r2, r0, r2, r3
 8026360:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
 8026362:	428b      	cmp	r3, r1
                    && size <= lfs_min(
 8026364:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8026366:	bf28      	it	cs
 8026368:	460b      	movcs	r3, r1
 802636a:	4293      	cmp	r3, r2
 802636c:	f4bf ae67 	bcs.w	802603e <lfs_dir_relocatingcommit+0x52>
            split = split + ((end - split) / 2);
 8026370:	eb08 085a 	add.w	r8, r8, sl, lsr #1
 8026374:	e65d      	b.n	8026032 <lfs_dir_relocatingcommit+0x46>
                    && size <= lfs_min(
 8026376:	0852      	lsrs	r2, r2, #1
 8026378:	e7eb      	b.n	8026352 <lfs_dir_relocatingcommit+0x366>
                end = 1;
 802637a:	46c1      	mov	r9, r8
 802637c:	e6b9      	b.n	80260f2 <lfs_dir_relocatingcommit+0x106>
            d->m = *dir;
 802637e:	46ae      	mov	lr, r5
 8026380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8026384:	46cc      	mov	ip, r9
 8026386:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802638a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 802638e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8026392:	9b08      	ldr	r3, [sp, #32]
 8026394:	4599      	cmp	r9, r3
 8026396:	d008      	beq.n	80263aa <lfs_dir_relocatingcommit+0x3be>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026398:	f240 41ff 	movw	r1, #1279	@ 0x4ff
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 802639c:	f240 4001 	movw	r0, #1025	@ 0x401
                for (int i = 0; i < attrcount; i++) {
 80263a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80263a2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
                for (int i = 0; i < attrcount; i++) {
 80263a6:	4592      	cmp	sl, r2
 80263a8:	d11d      	bne.n	80263e6 <lfs_dir_relocatingcommit+0x3fa>
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80263aa:	f108 0a20 	add.w	sl, r8, #32
            while (d->id >= d->m.count && d->m.split) {
 80263ae:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80263b2:	f8b8 b01c 	ldrh.w	fp, [r8, #28]
 80263b6:	455a      	cmp	r2, fp
 80263b8:	d38a      	bcc.n	80262d0 <lfs_dir_relocatingcommit+0x2e4>
 80263ba:	f898 101f 	ldrb.w	r1, [r8, #31]
 80263be:	2900      	cmp	r1, #0
 80263c0:	d086      	beq.n	80262d0 <lfs_dir_relocatingcommit+0x2e4>
                if (lfs_pair_cmp(d->m.tail, lfs->root) != 0) {
 80263c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80263c4:	4650      	mov	r0, sl
 80263c6:	f7fd fba3 	bl	8023b10 <lfs_pair_cmp>
 80263ca:	b118      	cbz	r0, 80263d4 <lfs_dir_relocatingcommit+0x3e8>
                    d->id -= d->m.count;
 80263cc:	eba2 020b 	sub.w	r2, r2, fp
 80263d0:	f8a8 2004 	strh.w	r2, [r8, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80263d4:	4652      	mov	r2, sl
 80263d6:	4649      	mov	r1, r9
 80263d8:	4630      	mov	r0, r6
 80263da:	f7fe faf5 	bl	80249c8 <lfs_dir_fetch>
                if (err) {
 80263de:	2800      	cmp	r0, #0
 80263e0:	d0e5      	beq.n	80263ae <lfs_dir_relocatingcommit+0x3c2>
                    return err;
 80263e2:	4604      	mov	r4, r0
 80263e4:	e6d5      	b.n	8026192 <lfs_dir_relocatingcommit+0x1a6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80263e6:	f857 203a 	ldr.w	r2, [r7, sl, lsl #3]
    return (tag & 0x7ff00000) >> 20;
 80263ea:	f3c2 5c0a 	ubfx	ip, r2, #20, #11
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80263ee:	458c      	cmp	ip, r1
 80263f0:	d118      	bne.n	8026424 <lfs_dir_relocatingcommit+0x438>
    return (tag & 0x000ffc00) >> 10;
 80263f2:	f3c2 2289 	ubfx	r2, r2, #10, #10
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80263f6:	4293      	cmp	r3, r2
 80263f8:	d106      	bne.n	8026408 <lfs_dir_relocatingcommit+0x41c>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80263fa:	f04f 33ff 	mov.w	r3, #4294967295
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80263fe:	e9c8 3302 	strd	r3, r3, [r8, #8]
                for (int i = 0; i < attrcount; i++) {
 8026402:	f10a 0a01 	add.w	sl, sl, #1
 8026406:	e7cb      	b.n	80263a0 <lfs_dir_relocatingcommit+0x3b4>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026408:	d9fb      	bls.n	8026402 <lfs_dir_relocatingcommit+0x416>
                        d->id -= 1;
 802640a:	3b01      	subs	r3, #1
 802640c:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026410:	f898 3006 	ldrb.w	r3, [r8, #6]
 8026414:	2b02      	cmp	r3, #2
 8026416:	d1f4      	bne.n	8026402 <lfs_dir_relocatingcommit+0x416>
                            ((lfs_dir_t*)d)->pos -= 1;
 8026418:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 802641c:	3b01      	subs	r3, #1
                            ((lfs_dir_t*)d)->pos += 1;
 802641e:	f8c8 3028 	str.w	r3, [r8, #40]	@ 0x28
 8026422:	e7ee      	b.n	8026402 <lfs_dir_relocatingcommit+0x416>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026424:	4584      	cmp	ip, r0
 8026426:	d1ec      	bne.n	8026402 <lfs_dir_relocatingcommit+0x416>
 8026428:	f3c2 2289 	ubfx	r2, r2, #10, #10
 802642c:	4293      	cmp	r3, r2
 802642e:	d3e8      	bcc.n	8026402 <lfs_dir_relocatingcommit+0x416>
                        d->id += 1;
 8026430:	3301      	adds	r3, #1
 8026432:	f8a8 3004 	strh.w	r3, [r8, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026436:	f898 3006 	ldrb.w	r3, [r8, #6]
 802643a:	2b02      	cmp	r3, #2
 802643c:	d1e1      	bne.n	8026402 <lfs_dir_relocatingcommit+0x416>
                            ((lfs_dir_t*)d)->pos += 1;
 802643e:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 8026442:	3301      	adds	r3, #1
 8026444:	e7eb      	b.n	802641e <lfs_dir_relocatingcommit+0x432>
 8026446:	bf00      	nop
 8026448:	08023c6d 	.word	0x08023c6d
 802644c:	400ffc00 	.word	0x400ffc00

08026450 <lfs_dir_orphaningcommit>:
        const struct lfs_mattr *attrs, int attrcount) {
 8026450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026454:	6a86      	ldr	r6, [r0, #40]	@ 0x28
        const struct lfs_mattr *attrs, int attrcount) {
 8026456:	b09d      	sub	sp, #116	@ 0x74
 8026458:	4605      	mov	r5, r0
 802645a:	4688      	mov	r8, r1
 802645c:	4691      	mov	r9, r2
 802645e:	469a      	mov	sl, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026460:	2e00      	cmp	r6, #0
 8026462:	d162      	bne.n	802652a <lfs_dir_orphaningcommit+0xda>
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8026464:	f8d8 3000 	ldr.w	r3, [r8]
 8026468:	9304      	str	r3, [sp, #16]
    lfs_mdir_t ldir = *dir;
 802646a:	4646      	mov	r6, r8
    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 802646c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8026470:	9305      	str	r3, [sp, #20]
    lfs_mdir_t ldir = *dir;
 8026472:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8026474:	ac0c      	add	r4, sp, #48	@ 0x30
 8026476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026478:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 802647c:	af0c      	add	r7, sp, #48	@ 0x30
 802647e:	ae14      	add	r6, sp, #80	@ 0x50
    lfs_mdir_t ldir = *dir;
 8026480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8026484:	e9cd a600 	strd	sl, r6, [sp]
 8026488:	464b      	mov	r3, r9
 802648a:	4642      	mov	r2, r8
 802648c:	4639      	mov	r1, r7
 802648e:	4628      	mov	r0, r5
 8026490:	f7ff fdac 	bl	8025fec <lfs_dir_relocatingcommit>
    if (state < 0) {
 8026494:	1e04      	subs	r4, r0, #0
 8026496:	db73      	blt.n	8026580 <lfs_dir_orphaningcommit+0x130>
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8026498:	a904      	add	r1, sp, #16
 802649a:	4640      	mov	r0, r8
 802649c:	f7fd fb38 	bl	8023b10 <lfs_pair_cmp>
 80264a0:	b948      	cbnz	r0, 80264b6 <lfs_dir_orphaningcommit+0x66>
        *dir = ldir;
 80264a2:	46be      	mov	lr, r7
 80264a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80264a8:	46c4      	mov	ip, r8
 80264aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80264ae:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80264b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    if (state == LFS_OK_DROPPED) {
 80264b6:	2c02      	cmp	r4, #2
 80264b8:	d12c      	bne.n	8026514 <lfs_dir_orphaningcommit+0xc4>
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80264ba:	f105 0248 	add.w	r2, r5, #72	@ 0x48
 80264be:	4641      	mov	r1, r8
 80264c0:	4628      	mov	r0, r5
 80264c2:	f7fd fd7f 	bl	8023fc4 <lfs_dir_getgstate>
        if (err) {
 80264c6:	4604      	mov	r4, r0
 80264c8:	2800      	cmp	r0, #0
 80264ca:	d159      	bne.n	8026580 <lfs_dir_orphaningcommit+0x130>
        lpair[0] = pdir.pair[0];
 80264cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80264ce:	f898 2017 	ldrb.w	r2, [r8, #23]
        lpair[0] = pdir.pair[0];
 80264d2:	9304      	str	r3, [sp, #16]
        lpair[1] = pdir.pair[1];
 80264d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80264d6:	9305      	str	r3, [sp, #20]
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80264d8:	4ba5      	ldr	r3, [pc, #660]	@ (8026770 <lfs_dir_orphaningcommit+0x320>)
 80264da:	9001      	str	r0, [sp, #4]
 80264dc:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 80264e0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80264e4:	9308      	str	r3, [sp, #32]
 80264e6:	f108 0318 	add.w	r3, r8, #24
 80264ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80264ec:	2301      	movs	r3, #1
 80264ee:	9300      	str	r3, [sp, #0]
 80264f0:	aa04      	add	r2, sp, #16
 80264f2:	ab08      	add	r3, sp, #32
 80264f4:	4631      	mov	r1, r6
 80264f6:	4628      	mov	r0, r5
 80264f8:	f7ff fd78 	bl	8025fec <lfs_dir_relocatingcommit>
        if (state < 0) {
 80264fc:	1e04      	subs	r4, r0, #0
 80264fe:	db3f      	blt.n	8026580 <lfs_dir_orphaningcommit+0x130>
        ldir = pdir;
 8026500:	46b6      	mov	lr, r6
 8026502:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8026506:	46bc      	mov	ip, r7
 8026508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802650c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8026510:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8026514:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 8026784 <lfs_dir_orphaningcommit+0x334>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8026518:	f04f 0b00 	mov.w	fp, #0
    while (state == LFS_OK_RELOCATED) {
 802651c:	2c01      	cmp	r4, #1
 802651e:	f040 811e 	bne.w	802675e <lfs_dir_orphaningcommit+0x30e>
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8026522:	f105 0320 	add.w	r3, r5, #32
 8026526:	9303      	str	r3, [sp, #12]
 8026528:	e092      	b.n	8026650 <lfs_dir_orphaningcommit+0x200>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 802652a:	f106 0008 	add.w	r0, r6, #8
 802652e:	4540      	cmp	r0, r8
 8026530:	d101      	bne.n	8026536 <lfs_dir_orphaningcommit+0xe6>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026532:	6836      	ldr	r6, [r6, #0]
 8026534:	e794      	b.n	8026460 <lfs_dir_orphaningcommit+0x10>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026536:	4641      	mov	r1, r8
 8026538:	f7fd faea 	bl	8023b10 <lfs_pair_cmp>
 802653c:	2800      	cmp	r0, #0
 802653e:	d1f8      	bne.n	8026532 <lfs_dir_orphaningcommit+0xe2>
 8026540:	79b3      	ldrb	r3, [r6, #6]
 8026542:	2b01      	cmp	r3, #1
 8026544:	d1f5      	bne.n	8026532 <lfs_dir_orphaningcommit+0xe2>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026546:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 8026548:	02da      	lsls	r2, r3, #11
 802654a:	d5f2      	bpl.n	8026532 <lfs_dir_orphaningcommit+0xe2>
                f->ctz.size > lfs->cfg->cache_size) {
 802654c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 802654e:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
 8026550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026552:	429a      	cmp	r2, r3
 8026554:	d9ed      	bls.n	8026532 <lfs_dir_orphaningcommit+0xe2>
    file->off = file->pos;
 8026556:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 8026558:	63f3      	str	r3, [r6, #60]	@ 0x3c
    lfs->lookahead.ckpoint = lfs->block_count;
 802655a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 802655c:	662b      	str	r3, [r5, #96]	@ 0x60
    int err = lfs_file_relocate(lfs, file);
 802655e:	4631      	mov	r1, r6
 8026560:	4628      	mov	r0, r5
 8026562:	f7ff f813 	bl	802558c <lfs_file_relocate>
    if (err) {
 8026566:	4604      	mov	r4, r0
 8026568:	b950      	cbnz	r0, 8026580 <lfs_dir_orphaningcommit+0x130>
    file->flags &= ~LFS_F_INLINE;
 802656a:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 802656c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8026570:	6333      	str	r3, [r6, #48]	@ 0x30
            err = lfs_file_flush(lfs, f);
 8026572:	4631      	mov	r1, r6
 8026574:	4628      	mov	r0, r5
 8026576:	f7ff fa1e 	bl	80259b6 <lfs_file_flush>
            if (err) {
 802657a:	4604      	mov	r4, r0
 802657c:	2800      	cmp	r0, #0
 802657e:	d0d8      	beq.n	8026532 <lfs_dir_orphaningcommit+0xe2>
}
 8026580:	4620      	mov	r0, r4
 8026582:	b01d      	add	sp, #116	@ 0x74
 8026584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8026588:	f10a 0108 	add.w	r1, sl, #8
 802658c:	a804      	add	r0, sp, #16
 802658e:	f7fd fabf 	bl	8023b10 <lfs_pair_cmp>
 8026592:	b908      	cbnz	r0, 8026598 <lfs_dir_orphaningcommit+0x148>
                d->m.pair[1] = ldir.pair[1];
 8026594:	e9ca 4202 	strd	r4, r2, [sl, #8]
            if (d->type == LFS_TYPE_DIR &&
 8026598:	f89a 3006 	ldrb.w	r3, [sl, #6]
 802659c:	2b02      	cmp	r3, #2
 802659e:	d107      	bne.n	80265b0 <lfs_dir_orphaningcommit+0x160>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80265a0:	f10a 012c 	add.w	r1, sl, #44	@ 0x2c
 80265a4:	a804      	add	r0, sp, #16
 80265a6:	f7fd fab3 	bl	8023b10 <lfs_pair_cmp>
            if (d->type == LFS_TYPE_DIR &&
 80265aa:	b908      	cbnz	r0, 80265b0 <lfs_dir_orphaningcommit+0x160>
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80265ac:	e9ca 420b 	strd	r4, r2, [sl, #44]	@ 0x2c
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80265b0:	f8da a000 	ldr.w	sl, [sl]
 80265b4:	e057      	b.n	8026666 <lfs_dir_orphaningcommit+0x216>
            int err = lfs_fs_preporphans(lfs, +1);
 80265b6:	2101      	movs	r1, #1
 80265b8:	4628      	mov	r0, r5
 80265ba:	f7fd fb67 	bl	8023c8c <lfs_fs_preporphans>
            if (err) {
 80265be:	4604      	mov	r4, r0
 80265c0:	2800      	cmp	r0, #0
 80265c2:	d1dd      	bne.n	8026580 <lfs_dir_orphaningcommit+0x130>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80265c4:	4631      	mov	r1, r6
 80265c6:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80265ca:	f7fd faea 	bl	8023ba2 <lfs_gstate_hasmovehere>
 80265ce:	2800      	cmp	r0, #0
 80265d0:	d06b      	beq.n	80266aa <lfs_dir_orphaningcommit+0x25a>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80265d2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80265d4:	f8c5 a038 	str.w	sl, [r5, #56]	@ 0x38
    return (tag & 0x000ffc00) >> 10;
 80265d8:	f3c2 2389 	ubfx	r3, r2, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80265dc:	ea02 0209 	and.w	r2, r2, r9
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80265e0:	e9c5 2a0c 	strd	r2, sl, [r5, #48]	@ 0x30
                if (moveid < lfs_tag_id(tag)) {
 80265e4:	f3c8 2289 	ubfx	r2, r8, #10, #10
 80265e8:	4293      	cmp	r3, r2
 80265ea:	d262      	bcs.n	80266b2 <lfs_dir_orphaningcommit+0x262>
                    tag -= LFS_MKTAG(0, 1, 0);
 80265ec:	f5a8 6280 	sub.w	r2, r8, #1024	@ 0x400
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80265f0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80265f2:	9102      	str	r1, [sp, #8]
 80265f4:	9106      	str	r1, [sp, #24]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80265f6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80265fa:	428b      	cmp	r3, r1
 80265fc:	bf18      	it	ne
 80265fe:	495d      	ldrne	r1, [pc, #372]	@ (8026774 <lfs_dir_orphaningcommit+0x324>)
            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8026600:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8026604:	f8cd a01c 	str.w	sl, [sp, #28]
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8026608:	bf14      	ite	ne
 802660a:	ea41 2383 	orrne.w	r3, r1, r3, lsl #10
 802660e:	2300      	moveq	r3, #0
 8026610:	9308      	str	r3, [sp, #32]
 8026612:	2300      	movs	r3, #0
 8026614:	e9cd 3209 	strd	r3, r2, [sp, #36]	@ 0x24
 8026618:	9301      	str	r3, [sp, #4]
 802661a:	2302      	movs	r3, #2
 802661c:	9300      	str	r3, [sp, #0]
 802661e:	aa06      	add	r2, sp, #24
 8026620:	ab08      	add	r3, sp, #32
 8026622:	4631      	mov	r1, r6
 8026624:	4628      	mov	r0, r5
 8026626:	970b      	str	r7, [sp, #44]	@ 0x2c
 8026628:	f7ff fce0 	bl	8025fec <lfs_dir_relocatingcommit>
            if (state < 0) {
 802662c:	1e04      	subs	r4, r0, #0
 802662e:	dba7      	blt.n	8026580 <lfs_dir_orphaningcommit+0x130>
            if (state == LFS_OK_RELOCATED) {
 8026630:	2c01      	cmp	r4, #1
 8026632:	d140      	bne.n	80266b6 <lfs_dir_orphaningcommit+0x266>
                lpair[0] = ppair[0];
 8026634:	9b02      	ldr	r3, [sp, #8]
                ldir = pdir;
 8026636:	46b6      	mov	lr, r6
                lpair[1] = ppair[1];
 8026638:	e9cd 3a04 	strd	r3, sl, [sp, #16]
                ldir = pdir;
 802663c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8026640:	46bc      	mov	ip, r7
 8026642:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8026646:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 802664a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                orphans = true;
 802664e:	46a3      	mov	fp, r4
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8026650:	9903      	ldr	r1, [sp, #12]
 8026652:	a804      	add	r0, sp, #16
 8026654:	f7fd fa5c 	bl	8023b10 <lfs_pair_cmp>
            lfs->root[1] = ldir.pair[1];
 8026658:	e9dd 420c 	ldrd	r4, r2, [sp, #48]	@ 0x30
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 802665c:	b908      	cbnz	r0, 8026662 <lfs_dir_orphaningcommit+0x212>
            lfs->root[1] = ldir.pair[1];
 802665e:	e9c5 4208 	strd	r4, r2, [r5, #32]
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026662:	f8d5 a028 	ldr.w	sl, [r5, #40]	@ 0x28
 8026666:	f1ba 0f00 	cmp.w	sl, #0
 802666a:	d18d      	bne.n	8026588 <lfs_dir_orphaningcommit+0x138>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 802666c:	4632      	mov	r2, r6
 802666e:	a904      	add	r1, sp, #16
 8026670:	4628      	mov	r0, r5
 8026672:	f7fe f94b 	bl	802490c <lfs_fs_parent>
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8026676:	f1b0 0800 	subs.w	r8, r0, #0
 802667a:	da9c      	bge.n	80265b6 <lfs_dir_orphaningcommit+0x166>
 802667c:	f118 0f02 	cmn.w	r8, #2
 8026680:	d173      	bne.n	802676a <lfs_dir_orphaningcommit+0x31a>
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8026682:	4632      	mov	r2, r6
 8026684:	a904      	add	r1, sp, #16
 8026686:	4628      	mov	r0, r5
 8026688:	f7fe f9ac 	bl	80249e4 <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
 802668c:	4604      	mov	r4, r0
 802668e:	b1a8      	cbz	r0, 80266bc <lfs_dir_orphaningcommit+0x26c>
 8026690:	1c83      	adds	r3, r0, #2
 8026692:	f47f af75 	bne.w	8026580 <lfs_dir_orphaningcommit+0x130>
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8026696:	f118 0f02 	cmn.w	r8, #2
 802669a:	d060      	beq.n	802675e <lfs_dir_orphaningcommit+0x30e>
 802669c:	4b36      	ldr	r3, [pc, #216]	@ (8026778 <lfs_dir_orphaningcommit+0x328>)
 802669e:	4a37      	ldr	r2, [pc, #220]	@ (802677c <lfs_dir_orphaningcommit+0x32c>)
 80266a0:	4837      	ldr	r0, [pc, #220]	@ (8026780 <lfs_dir_orphaningcommit+0x330>)
 80266a2:	f640 11dc 	movw	r1, #2524	@ 0x9dc
 80266a6:	f015 ff3f 	bl	803c528 <__assert_func>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80266aa:	4642      	mov	r2, r8
            uint16_t moveid = 0x3ff;
 80266ac:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80266b0:	e79e      	b.n	80265f0 <lfs_dir_orphaningcommit+0x1a0>
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80266b2:	4642      	mov	r2, r8
 80266b4:	e79c      	b.n	80265f0 <lfs_dir_orphaningcommit+0x1a0>
        bool hasparent = (tag != LFS_ERR_NOENT);
 80266b6:	f04f 0a01 	mov.w	sl, #1
 80266ba:	e7e2      	b.n	8026682 <lfs_dir_orphaningcommit+0x232>
    return tag & 0x000003ff;
 80266bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80266be:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80266c2:	2b00      	cmp	r3, #0
 80266c4:	d138      	bne.n	8026738 <lfs_dir_orphaningcommit+0x2e8>
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80266c6:	4631      	mov	r1, r6
 80266c8:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80266cc:	f7fd fa69 	bl	8023ba2 <lfs_gstate_hasmovehere>
 80266d0:	2800      	cmp	r0, #0
 80266d2:	d13a      	bne.n	802674a <lfs_dir_orphaningcommit+0x2fa>
            uint16_t moveid = 0x3ff;
 80266d4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
            lpair[0] = pdir.pair[0];
 80266d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80266da:	9204      	str	r2, [sp, #16]
            lpair[1] = pdir.pair[1];
 80266dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80266de:	9205      	str	r2, [sp, #20]
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80266e0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80266e4:	4293      	cmp	r3, r2
 80266e6:	bf18      	it	ne
 80266e8:	4a22      	ldrne	r2, [pc, #136]	@ (8026774 <lfs_dir_orphaningcommit+0x324>)
 80266ea:	4921      	ldr	r1, [pc, #132]	@ (8026770 <lfs_dir_orphaningcommit+0x320>)
 80266ec:	bf14      	ite	ne
 80266ee:	ea42 2383 	orrne.w	r3, r2, r3, lsl #10
 80266f2:	2300      	moveq	r3, #0
 80266f4:	9308      	str	r3, [sp, #32]
 80266f6:	f89d 3067 	ldrb.w	r3, [sp, #103]	@ 0x67
 80266fa:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80266fe:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
 8026702:	2200      	movs	r2, #0
 8026704:	e9cd 370a 	strd	r3, r7, [sp, #40]	@ 0x28
 8026708:	2302      	movs	r3, #2
 802670a:	9209      	str	r2, [sp, #36]	@ 0x24
 802670c:	9201      	str	r2, [sp, #4]
 802670e:	9300      	str	r3, [sp, #0]
 8026710:	aa04      	add	r2, sp, #16
 8026712:	ab08      	add	r3, sp, #32
 8026714:	4631      	mov	r1, r6
 8026716:	4628      	mov	r0, r5
 8026718:	f7ff fc68 	bl	8025fec <lfs_dir_relocatingcommit>
            if (state < 0) {
 802671c:	1e04      	subs	r4, r0, #0
 802671e:	f6ff af2f 	blt.w	8026580 <lfs_dir_orphaningcommit+0x130>
            ldir = pdir;
 8026722:	46b6      	mov	lr, r6
 8026724:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8026728:	46bc      	mov	ip, r7
 802672a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 802672e:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8026732:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8026736:	e6f1      	b.n	802651c <lfs_dir_orphaningcommit+0xcc>
                err = lfs_fs_preporphans(lfs, -hasparent);
 8026738:	f1ca 0100 	rsb	r1, sl, #0
 802673c:	4628      	mov	r0, r5
 802673e:	f7fd faa5 	bl	8023c8c <lfs_fs_preporphans>
                if (err) {
 8026742:	4604      	mov	r4, r0
 8026744:	2800      	cmp	r0, #0
 8026746:	d0be      	beq.n	80266c6 <lfs_dir_orphaningcommit+0x276>
 8026748:	e71a      	b.n	8026580 <lfs_dir_orphaningcommit+0x130>
                moveid = lfs_tag_id(lfs->gstate.tag);
 802674a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
    return (tag & 0x000ffc00) >> 10;
 802674c:	f3c2 2389 	ubfx	r3, r2, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8026750:	ea02 0209 	and.w	r2, r2, r9
 8026754:	632a      	str	r2, [r5, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8026756:	2200      	movs	r2, #0
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8026758:	e9c5 220d 	strd	r2, r2, [r5, #52]	@ 0x34
}
 802675c:	e7bc      	b.n	80266d8 <lfs_dir_orphaningcommit+0x288>
    return orphans ? LFS_OK_ORPHANED : 0;
 802675e:	f1bb 0f00 	cmp.w	fp, #0
 8026762:	bf0c      	ite	eq
 8026764:	2400      	moveq	r4, #0
 8026766:	2403      	movne	r4, #3
 8026768:	e70a      	b.n	8026580 <lfs_dir_orphaningcommit+0x130>
            return tag;
 802676a:	4644      	mov	r4, r8
 802676c:	e708      	b.n	8026580 <lfs_dir_orphaningcommit+0x130>
 802676e:	bf00      	nop
 8026770:	000ffc08 	.word	0x000ffc08
 8026774:	4ff00000 	.word	0x4ff00000
 8026778:	0803fe41 	.word	0x0803fe41
 802677c:	08041f7b 	.word	0x08041f7b
 8026780:	0803f7e4 	.word	0x0803f7e4
 8026784:	800003ff 	.word	0x800003ff

08026788 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8026788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802678c:	4604      	mov	r4, r0
    return tag & 0x000003ff;
 802678e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8026790:	f3c0 0009 	ubfx	r0, r0, #0, #10
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 8026794:	b0a1      	sub	sp, #132	@ 0x84
 8026796:	4688      	mov	r8, r1
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8026798:	b338      	cbz	r0, 80267ea <lfs_fs_deorphan+0x62>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802679a:	f8df 914c 	ldr.w	r9, [pc, #332]	@ 80268e8 <lfs_fs_deorphan+0x160>
    int pass = 0;
 802679e:	2500      	movs	r5, #0
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 80267a0:	221c      	movs	r2, #28
 80267a2:	2100      	movs	r1, #0
 80267a4:	a808      	add	r0, sp, #32
 80267a6:	f016 fe7d 	bl	803d4a4 <memset>
 80267aa:	2301      	movs	r3, #1
 80267ac:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 80267b0:	930f      	str	r3, [sp, #60]	@ 0x3c
        bool moreorphans = false;
 80267b2:	2700      	movs	r7, #0
        while (!lfs_pair_isnull(pdir.tail)) {
 80267b4:	a80e      	add	r0, sp, #56	@ 0x38
 80267b6:	f7fd f9a1 	bl	8023afc <lfs_pair_isnull>
 80267ba:	b118      	cbz	r0, 80267c4 <lfs_fs_deorphan+0x3c>
        pass = moreorphans ? 0 : pass+1;
 80267bc:	2f00      	cmp	r7, #0
 80267be:	d048      	beq.n	8026852 <lfs_fs_deorphan+0xca>
 80267c0:	2500      	movs	r5, #0
 80267c2:	e7ed      	b.n	80267a0 <lfs_fs_deorphan+0x18>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 80267c4:	aa0e      	add	r2, sp, #56	@ 0x38
 80267c6:	a910      	add	r1, sp, #64	@ 0x40
 80267c8:	4620      	mov	r0, r4
 80267ca:	f7fe f8fd 	bl	80249c8 <lfs_dir_fetch>
            if (err) {
 80267ce:	b960      	cbnz	r0, 80267ea <lfs_fs_deorphan+0x62>
            if (!pdir.split) {
 80267d0:	f89d 3037 	ldrb.w	r3, [sp, #55]	@ 0x37
 80267d4:	2b00      	cmp	r3, #0
 80267d6:	d175      	bne.n	80268c4 <lfs_fs_deorphan+0x13c>
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80267d8:	aa18      	add	r2, sp, #96	@ 0x60
 80267da:	a90e      	add	r1, sp, #56	@ 0x38
 80267dc:	4620      	mov	r0, r4
 80267de:	f7fe f895 	bl	802490c <lfs_fs_parent>
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 80267e2:	2800      	cmp	r0, #0
 80267e4:	da41      	bge.n	802686a <lfs_fs_deorphan+0xe2>
 80267e6:	1c81      	adds	r1, r0, #2
 80267e8:	d069      	beq.n	80268be <lfs_fs_deorphan+0x136>
}
 80267ea:	b021      	add	sp, #132	@ 0x84
 80267ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            moveid = lfs_tag_id(lfs->gstate.tag);
 80267f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 80267f2:	63a5      	str	r5, [r4, #56]	@ 0x38
    return (tag & 0x000ffc00) >> 10;
 80267f4:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80267f8:	f36f 239e 	bfc	r3, #10, #21
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80267fc:	e9c4 350c 	strd	r3, r5, [r4, #48]	@ 0x30
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8026800:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8026804:	429a      	cmp	r2, r3
 8026806:	d047      	beq.n	8026898 <lfs_fs_deorphan+0x110>
 8026808:	4b34      	ldr	r3, [pc, #208]	@ (80268dc <lfs_fs_deorphan+0x154>)
 802680a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 802680e:	e044      	b.n	802689a <lfs_fs_deorphan+0x112>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 8026810:	f1b8 0f00 	cmp.w	r8, #0
 8026814:	d056      	beq.n	80268c4 <lfs_fs_deorphan+0x13c>
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 8026816:	f104 0248 	add.w	r2, r4, #72	@ 0x48
 802681a:	a910      	add	r1, sp, #64	@ 0x40
 802681c:	4620      	mov	r0, r4
 802681e:	f7fd fbd1 	bl	8023fc4 <lfs_dir_getgstate>
                    if (err) {
 8026822:	2800      	cmp	r0, #0
 8026824:	d1e1      	bne.n	80267ea <lfs_fs_deorphan+0x62>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8026826:	f89d 2057 	ldrb.w	r2, [sp, #87]	@ 0x57
 802682a:	4b2d      	ldr	r3, [pc, #180]	@ (80268e0 <lfs_fs_deorphan+0x158>)
 802682c:	f502 62c0 	add.w	r2, r2, #1536	@ 0x600
 8026830:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8026834:	9304      	str	r3, [sp, #16]
 8026836:	ab16      	add	r3, sp, #88	@ 0x58
 8026838:	9305      	str	r3, [sp, #20]
 802683a:	aa04      	add	r2, sp, #16
 802683c:	462b      	mov	r3, r5
 802683e:	a908      	add	r1, sp, #32
 8026840:	4620      	mov	r0, r4
 8026842:	f7ff fe05 	bl	8026450 <lfs_dir_orphaningcommit>
                    if (state < 0) {
 8026846:	2800      	cmp	r0, #0
 8026848:	dbcf      	blt.n	80267ea <lfs_fs_deorphan+0x62>
                        moreorphans = true;
 802684a:	2803      	cmp	r0, #3
 802684c:	bf08      	it	eq
 802684e:	4647      	moveq	r7, r8
 8026850:	e7b0      	b.n	80267b4 <lfs_fs_deorphan+0x2c>
        pass = moreorphans ? 0 : pass+1;
 8026852:	3501      	adds	r5, #1
    while (pass < 2) {
 8026854:	2d02      	cmp	r5, #2
 8026856:	d1a3      	bne.n	80267a0 <lfs_fs_deorphan+0x18>
    return tag & 0x000003ff;
 8026858:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 802685a:	4249      	negs	r1, r1
 802685c:	b249      	sxtb	r1, r1
 802685e:	4620      	mov	r0, r4
}
 8026860:	b021      	add	sp, #132	@ 0x84
 8026862:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8026866:	f7fd ba11 	b.w	8023c8c <lfs_fs_preporphans>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 802686a:	bb5d      	cbnz	r5, 80268c4 <lfs_fs_deorphan+0x13c>
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802686c:	ae02      	add	r6, sp, #8
 802686e:	4603      	mov	r3, r0
 8026870:	9600      	str	r6, [sp, #0]
 8026872:	464a      	mov	r2, r9
 8026874:	a918      	add	r1, sp, #96	@ 0x60
 8026876:	4620      	mov	r0, r4
 8026878:	f7fd fb98 	bl	8023fac <lfs_dir_get>
                    if (state < 0) {
 802687c:	2800      	cmp	r0, #0
 802687e:	dbb4      	blt.n	80267ea <lfs_fs_deorphan+0x62>
                    if (!lfs_pair_issync(pair, pdir.tail)) {
 8026880:	a90e      	add	r1, sp, #56	@ 0x38
 8026882:	4630      	mov	r0, r6
 8026884:	f7fd f955 	bl	8023b32 <lfs_pair_issync>
 8026888:	b9e0      	cbnz	r0, 80268c4 <lfs_fs_deorphan+0x13c>
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802688a:	a908      	add	r1, sp, #32
 802688c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8026890:	f7fd f987 	bl	8023ba2 <lfs_gstate_hasmovehere>
 8026894:	2800      	cmp	r0, #0
 8026896:	d1ab      	bne.n	80267f0 <lfs_fs_deorphan+0x68>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 8026898:	2300      	movs	r3, #0
 802689a:	9304      	str	r3, [sp, #16]
 802689c:	4b11      	ldr	r3, [pc, #68]	@ (80268e4 <lfs_fs_deorphan+0x15c>)
 802689e:	9607      	str	r6, [sp, #28]
 80268a0:	2200      	movs	r2, #0
 80268a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80268a6:	a908      	add	r1, sp, #32
 80268a8:	2302      	movs	r3, #2
 80268aa:	aa04      	add	r2, sp, #16
 80268ac:	4620      	mov	r0, r4
 80268ae:	f7ff fdcf 	bl	8026450 <lfs_dir_orphaningcommit>
                        if (state < 0) {
 80268b2:	2800      	cmp	r0, #0
 80268b4:	db99      	blt.n	80267ea <lfs_fs_deorphan+0x62>
                            moreorphans = true;
 80268b6:	2803      	cmp	r0, #3
 80268b8:	bf08      	it	eq
 80268ba:	2701      	moveq	r7, #1
 80268bc:	e77a      	b.n	80267b4 <lfs_fs_deorphan+0x2c>
                if (pass == 0 && tag != LFS_ERR_NOENT) {
 80268be:	b10d      	cbz	r5, 80268c4 <lfs_fs_deorphan+0x13c>
                if (pass == 1 && tag == LFS_ERR_NOENT && powerloss) {
 80268c0:	2d01      	cmp	r5, #1
 80268c2:	d0a5      	beq.n	8026810 <lfs_fs_deorphan+0x88>
            pdir = dir;
 80268c4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80268c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80268cc:	ae08      	add	r6, sp, #32
 80268ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80268d0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80268d4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80268d8:	e76c      	b.n	80267b4 <lfs_fs_deorphan+0x2c>
 80268da:	bf00      	nop
 80268dc:	4ff00000 	.word	0x4ff00000
 80268e0:	000ffc08 	.word	0x000ffc08
 80268e4:	600ffc08 	.word	0x600ffc08
 80268e8:	7ffffc00 	.word	0x7ffffc00

080268ec <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
 80268ec:	b510      	push	{r4, lr}
 80268ee:	4604      	mov	r4, r0
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 80268f0:	f7ff fdae 	bl	8026450 <lfs_dir_orphaningcommit>
    if (orphans < 0) {
 80268f4:	2800      	cmp	r0, #0
 80268f6:	db06      	blt.n	8026906 <lfs_dir_commit+0x1a>
    if (orphans) {
 80268f8:	d005      	beq.n	8026906 <lfs_dir_commit+0x1a>
        int err = lfs_fs_deorphan(lfs, false);
 80268fa:	4620      	mov	r0, r4
 80268fc:	2100      	movs	r1, #0
}
 80268fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        int err = lfs_fs_deorphan(lfs, false);
 8026902:	f7ff bf41 	b.w	8026788 <lfs_fs_deorphan>
}
 8026906:	bd10      	pop	{r4, pc}

08026908 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8026908:	b510      	push	{r4, lr}
    return lfs_tag_size(a->tag) >> 9;
 802690a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 802690c:	059b      	lsls	r3, r3, #22
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802690e:	b090      	sub	sp, #64	@ 0x40
 8026910:	4604      	mov	r4, r0
    if (!lfs_gstate_needssuperblock(&lfs->gstate)) {
 8026912:	d523      	bpl.n	802695c <lfs_fs_forceconsistency+0x54>
    int err = lfs_dir_fetch(lfs, &root, lfs->root);
 8026914:	f100 0220 	add.w	r2, r0, #32
 8026918:	a908      	add	r1, sp, #32
 802691a:	f7fe f855 	bl	80249c8 <lfs_dir_fetch>
    if (err) {
 802691e:	2800      	cmp	r0, #0
 8026920:	d152      	bne.n	80269c8 <lfs_fs_forceconsistency+0xc0>
    lfs_superblock_t superblock = {
 8026922:	4b2a      	ldr	r3, [pc, #168]	@ (80269cc <lfs_fs_forceconsistency+0xc4>)
 8026924:	9302      	str	r3, [sp, #8]
        .block_size  = lfs->cfg->block_size,
 8026926:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
    lfs_superblock_t superblock = {
 8026928:	69db      	ldr	r3, [r3, #28]
 802692a:	9303      	str	r3, [sp, #12]
 802692c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 802692e:	9304      	str	r3, [sp, #16]
 8026930:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8026932:	9305      	str	r3, [sp, #20]
 8026934:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8026936:	9306      	str	r3, [sp, #24]
 8026938:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 802693a:	9307      	str	r3, [sp, #28]
    err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 802693c:	4b24      	ldr	r3, [pc, #144]	@ (80269d0 <lfs_fs_forceconsistency+0xc8>)
 802693e:	9300      	str	r3, [sp, #0]
 8026940:	ab02      	add	r3, sp, #8
 8026942:	9301      	str	r3, [sp, #4]
 8026944:	466a      	mov	r2, sp
 8026946:	2301      	movs	r3, #1
 8026948:	a908      	add	r1, sp, #32
 802694a:	4620      	mov	r0, r4
 802694c:	f7ff ffce 	bl	80268ec <lfs_dir_commit>
    if (err) {
 8026950:	2800      	cmp	r0, #0
 8026952:	d139      	bne.n	80269c8 <lfs_fs_forceconsistency+0xc0>
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8026954:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8026956:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 802695a:	6323      	str	r3, [r4, #48]	@ 0x30
    return (tag & 0x70000000) >> 20;
 802695c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802695e:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8026960:	f413 6fe0 	tst.w	r3, #1792	@ 0x700
 8026964:	d106      	bne.n	8026974 <lfs_fs_forceconsistency+0x6c>
    err = lfs_fs_deorphan(lfs, true);
 8026966:	2101      	movs	r1, #1
 8026968:	4620      	mov	r0, r4
}
 802696a:	b010      	add	sp, #64	@ 0x40
 802696c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    err = lfs_fs_deorphan(lfs, true);
 8026970:	f7ff bf0a 	b.w	8026788 <lfs_fs_deorphan>
    LFS_ASSERT(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);
 8026974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8026978:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 802697c:	4293      	cmp	r3, r2
 802697e:	d006      	beq.n	802698e <lfs_fs_forceconsistency+0x86>
 8026980:	4b14      	ldr	r3, [pc, #80]	@ (80269d4 <lfs_fs_forceconsistency+0xcc>)
 8026982:	4a15      	ldr	r2, [pc, #84]	@ (80269d8 <lfs_fs_forceconsistency+0xd0>)
 8026984:	4815      	ldr	r0, [pc, #84]	@ (80269dc <lfs_fs_forceconsistency+0xd4>)
 8026986:	f241 312b 	movw	r1, #4907	@ 0x132b
 802698a:	f015 fdcd 	bl	803c528 <__assert_func>
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802698e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8026992:	a908      	add	r1, sp, #32
 8026994:	4620      	mov	r0, r4
 8026996:	f7fe f817 	bl	80249c8 <lfs_dir_fetch>
    if (err) {
 802699a:	b9a8      	cbnz	r0, 80269c8 <lfs_fs_forceconsistency+0xc0>
    return (tag & 0x000ffc00) >> 10;
 802699c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 802699e:	63a0      	str	r0, [r4, #56]	@ 0x38
    return (tag & 0x000ffc00) >> 10;
 80269a0:	f3c3 2289 	ubfx	r2, r3, #10, #10
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 80269a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80269a6:	f36f 239e 	bfc	r3, #10, #21
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 80269aa:	e9c4 300c 	strd	r3, r0, [r4, #48]	@ 0x30
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 80269ae:	4b0c      	ldr	r3, [pc, #48]	@ (80269e0 <lfs_fs_forceconsistency+0xd8>)
 80269b0:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80269b4:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80269b8:	aa02      	add	r2, sp, #8
 80269ba:	2301      	movs	r3, #1
 80269bc:	a908      	add	r1, sp, #32
 80269be:	4620      	mov	r0, r4
 80269c0:	f7ff ff94 	bl	80268ec <lfs_dir_commit>
    if (err) {
 80269c4:	2800      	cmp	r0, #0
 80269c6:	d0ce      	beq.n	8026966 <lfs_fs_forceconsistency+0x5e>
}
 80269c8:	b010      	add	sp, #64	@ 0x40
 80269ca:	bd10      	pop	{r4, pc}
 80269cc:	00020001 	.word	0x00020001
 80269d0:	20100018 	.word	0x20100018
 80269d4:	0803fe66 	.word	0x0803fe66
 80269d8:	08041eee 	.word	0x08041eee
 80269dc:	0803f7e4 	.word	0x0803f7e4
 80269e0:	4ff00000 	.word	0x4ff00000

080269e4 <lfs_file_sync_>:
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80269e4:	b570      	push	{r4, r5, r6, lr}
    if (file->flags & LFS_F_ERRED) {
 80269e6:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80269e8:	031e      	lsls	r6, r3, #12
static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {
 80269ea:	b086      	sub	sp, #24
 80269ec:	4605      	mov	r5, r0
 80269ee:	460c      	mov	r4, r1
    if (file->flags & LFS_F_ERRED) {
 80269f0:	d44a      	bmi.n	8026a88 <lfs_file_sync_+0xa4>
    int err = lfs_file_flush(lfs, file);
 80269f2:	f7fe ffe0 	bl	80259b6 <lfs_file_flush>
    if (err) {
 80269f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80269f8:	b120      	cbz	r0, 8026a04 <lfs_file_sync_+0x20>
        file->flags |= LFS_F_ERRED;
 80269fa:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80269fe:	6322      	str	r2, [r4, #48]	@ 0x30
}
 8026a00:	b006      	add	sp, #24
 8026a02:	bd70      	pop	{r4, r5, r6, pc}
    if ((file->flags & LFS_F_DIRTY) &&
 8026a04:	03d1      	lsls	r1, r2, #15
 8026a06:	d53f      	bpl.n	8026a88 <lfs_file_sync_+0xa4>
            !lfs_pair_isnull(file->m.pair)) {
 8026a08:	f104 0608 	add.w	r6, r4, #8
 8026a0c:	4630      	mov	r0, r6
 8026a0e:	f7fd f875 	bl	8023afc <lfs_pair_isnull>
    if ((file->flags & LFS_F_DIRTY) &&
 8026a12:	2800      	cmp	r0, #0
 8026a14:	d138      	bne.n	8026a88 <lfs_file_sync_+0xa4>
        if (!(file->flags & LFS_F_INLINE)) {
 8026a16:	02d2      	lsls	r2, r2, #11
 8026a18:	d51f      	bpl.n	8026a5a <lfs_file_sync_+0x76>
            buffer = file->cache.buffer;
 8026a1a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
            size = file->ctz.size;
 8026a1c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            type = LFS_TYPE_INLINESTRUCT;
 8026a1e:	f240 2001 	movw	r0, #513	@ 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8026a22:	88a1      	ldrh	r1, [r4, #4]
 8026a24:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8026a28:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8026a2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026a30:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8026a32:	6893      	ldr	r3, [r2, #8]
 8026a34:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8026a38:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8026a3c:	9304      	str	r3, [sp, #16]
 8026a3e:	6853      	ldr	r3, [r2, #4]
 8026a40:	9305      	str	r3, [sp, #20]
 8026a42:	aa02      	add	r2, sp, #8
 8026a44:	2302      	movs	r3, #2
 8026a46:	4631      	mov	r1, r6
 8026a48:	4628      	mov	r0, r5
 8026a4a:	f7ff ff4f 	bl	80268ec <lfs_dir_commit>
        if (err) {
 8026a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8026a50:	b1b8      	cbz	r0, 8026a82 <lfs_file_sync_+0x9e>
            file->flags |= LFS_F_ERRED;
 8026a52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8026a56:	6323      	str	r3, [r4, #48]	@ 0x30
            return err;
 8026a58:	e7d2      	b.n	8026a00 <lfs_file_sync_+0x1c>
            err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8026a5a:	462a      	mov	r2, r5
 8026a5c:	f105 0110 	add.w	r1, r5, #16
 8026a60:	4628      	mov	r0, r5
 8026a62:	f7ff f869 	bl	8025b38 <lfs_bd_sync.constprop.0>
            if (err) {
 8026a66:	2800      	cmp	r0, #0
 8026a68:	d1ca      	bne.n	8026a00 <lfs_file_sync_+0x1c>
        if (file->flags & LFS_F_INLINE) {
 8026a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8026a6c:	02db      	lsls	r3, r3, #11
 8026a6e:	d4d4      	bmi.n	8026a1a <lfs_file_sync_+0x36>
            ctz = file->ctz;
 8026a70:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8026a74:	466b      	mov	r3, sp
 8026a76:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
 8026a7a:	2208      	movs	r2, #8
            type = LFS_TYPE_CTZSTRUCT;
 8026a7c:	f240 2002 	movw	r0, #514	@ 0x202
 8026a80:	e7cf      	b.n	8026a22 <lfs_file_sync_+0x3e>
        file->flags &= ~LFS_F_DIRTY;
 8026a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8026a86:	6323      	str	r3, [r4, #48]	@ 0x30
        return 0;
 8026a88:	2000      	movs	r0, #0
 8026a8a:	e7b9      	b.n	8026a00 <lfs_file_sync_+0x1c>

08026a8c <lfs_file_close_>:
static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file) {
 8026a8c:	b570      	push	{r4, r5, r6, lr}
 8026a8e:	4605      	mov	r5, r0
 8026a90:	460c      	mov	r4, r1
    int err = lfs_file_sync_(lfs, file);
 8026a92:	f7ff ffa7 	bl	80269e4 <lfs_file_sync_>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8026a96:	6aab      	ldr	r3, [r5, #40]	@ 0x28
    int err = lfs_file_sync_(lfs, file);
 8026a98:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8026a9a:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8026a9e:	b11b      	cbz	r3, 8026aa8 <lfs_file_close_+0x1c>
        if (*p == mlist) {
 8026aa0:	429c      	cmp	r4, r3
 8026aa2:	d109      	bne.n	8026ab8 <lfs_file_close_+0x2c>
            *p = (*p)->next;
 8026aa4:	6823      	ldr	r3, [r4, #0]
 8026aa6:	6013      	str	r3, [r2, #0]
    if (!file->cfg->buffer) {
 8026aa8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8026aaa:	681b      	ldr	r3, [r3, #0]
 8026aac:	b913      	cbnz	r3, 8026ab4 <lfs_file_close_+0x28>
    free(p);
 8026aae:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8026ab0:	f015 fd6a 	bl	803c588 <free>
}
 8026ab4:	4630      	mov	r0, r6
 8026ab6:	bd70      	pop	{r4, r5, r6, pc}
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8026ab8:	461a      	mov	r2, r3
 8026aba:	681b      	ldr	r3, [r3, #0]
 8026abc:	e7ef      	b.n	8026a9e <lfs_file_close_+0x12>
	...

08026ac0 <lfs_file_opencfg_>:
        const struct lfs_file_config *cfg) {
 8026ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ac4:	b08a      	sub	sp, #40	@ 0x28
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8026ac6:	f013 0f02 	tst.w	r3, #2
        const struct lfs_file_config *cfg) {
 8026aca:	4606      	mov	r6, r0
 8026acc:	460d      	mov	r5, r1
 8026ace:	9203      	str	r2, [sp, #12]
 8026ad0:	4698      	mov	r8, r3
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8026ad2:	d134      	bne.n	8026b3e <lfs_file_opencfg_+0x7e>
    file->cfg = cfg;
 8026ad4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026ad6:	652b      	str	r3, [r5, #80]	@ 0x50
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8026ad8:	f105 0708 	add.w	r7, r5, #8
    file->pos = 0;
 8026adc:	2300      	movs	r3, #0
 8026ade:	636b      	str	r3, [r5, #52]	@ 0x34
    file->off = 0;
 8026ae0:	63eb      	str	r3, [r5, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8026ae2:	64eb      	str	r3, [r5, #76]	@ 0x4c
    file->flags = flags;
 8026ae4:	f8c5 8030 	str.w	r8, [r5, #48]	@ 0x30
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8026ae8:	1d2b      	adds	r3, r5, #4
 8026aea:	aa03      	add	r2, sp, #12
 8026aec:	4639      	mov	r1, r7
 8026aee:	4630      	mov	r0, r6
 8026af0:	f7fd ffc4 	bl	8024a7c <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8026af4:	1e04      	subs	r4, r0, #0
 8026af6:	da06      	bge.n	8026b06 <lfs_file_opencfg_+0x46>
 8026af8:	1ca2      	adds	r2, r4, #2
 8026afa:	d117      	bne.n	8026b2c <lfs_file_opencfg_+0x6c>
 8026afc:	88aa      	ldrh	r2, [r5, #4]
 8026afe:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8026b02:	429a      	cmp	r2, r3
 8026b04:	d012      	beq.n	8026b2c <lfs_file_opencfg_+0x6c>
    file->type = LFS_TYPE_REG;
 8026b06:	2301      	movs	r3, #1
 8026b08:	71ab      	strb	r3, [r5, #6]
    mlist->next = lfs->mlist;
 8026b0a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8026b0c:	602b      	str	r3, [r5, #0]
    if (tag == LFS_ERR_NOENT) {
 8026b0e:	1ca3      	adds	r3, r4, #2
    lfs->mlist = mlist;
 8026b10:	62b5      	str	r5, [r6, #40]	@ 0x28
    if (tag == LFS_ERR_NOENT) {
 8026b12:	d157      	bne.n	8026bc4 <lfs_file_opencfg_+0x104>
        if (!(flags & LFS_O_CREAT)) {
 8026b14:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8026b18:	d008      	beq.n	8026b2c <lfs_file_opencfg_+0x6c>
        lfs_size_t nlen = strlen(path);
 8026b1a:	9c03      	ldr	r4, [sp, #12]
 8026b1c:	4620      	mov	r0, r4
 8026b1e:	f7ee fccf 	bl	80154c0 <strlen>
        if (nlen > lfs->name_max) {
 8026b22:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8026b24:	4283      	cmp	r3, r0
 8026b26:	d213      	bcs.n	8026b50 <lfs_file_opencfg_+0x90>
            err = LFS_ERR_NAMETOOLONG;
 8026b28:	f06f 0423 	mvn.w	r4, #35	@ 0x23
    file->flags |= LFS_F_ERRED;
 8026b2c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8026b2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8026b32:	632b      	str	r3, [r5, #48]	@ 0x30
    lfs_file_close_(lfs, file);
 8026b34:	4629      	mov	r1, r5
 8026b36:	4630      	mov	r0, r6
 8026b38:	f7ff ffa8 	bl	8026a8c <lfs_file_close_>
    return err;
 8026b3c:	e004      	b.n	8026b48 <lfs_file_opencfg_+0x88>
        int err = lfs_fs_forceconsistency(lfs);
 8026b3e:	f7ff fee3 	bl	8026908 <lfs_fs_forceconsistency>
        if (err) {
 8026b42:	4604      	mov	r4, r0
 8026b44:	2800      	cmp	r0, #0
 8026b46:	d0c5      	beq.n	8026ad4 <lfs_file_opencfg_+0x14>
}
 8026b48:	4620      	mov	r0, r4
 8026b4a:	b00a      	add	sp, #40	@ 0x28
 8026b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8026b50:	88ab      	ldrh	r3, [r5, #4]
 8026b52:	4a64      	ldr	r2, [pc, #400]	@ (8026ce4 <lfs_file_opencfg_+0x224>)
 8026b54:	f8df 8194 	ldr.w	r8, [pc, #404]	@ 8026cec <lfs_file_opencfg_+0x22c>
 8026b58:	ea42 2283 	orr.w	r2, r2, r3, lsl #10
 8026b5c:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 8026b60:	9204      	str	r2, [sp, #16]
 8026b62:	f440 1080 	orr.w	r0, r0, #1048576	@ 0x100000
 8026b66:	2200      	movs	r2, #0
 8026b68:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
 8026b6c:	e9cd 0406 	strd	r0, r4, [sp, #24]
 8026b70:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8026b74:	9205      	str	r2, [sp, #20]
 8026b76:	2303      	movs	r3, #3
 8026b78:	aa04      	add	r2, sp, #16
 8026b7a:	4639      	mov	r1, r7
 8026b7c:	4630      	mov	r0, r6
 8026b7e:	f7ff feb5 	bl	80268ec <lfs_dir_commit>
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8026b82:	f110 0f1c 	cmn.w	r0, #28
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8026b86:	4604      	mov	r4, r0
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8026b88:	d0ce      	beq.n	8026b28 <lfs_file_opencfg_+0x68>
        if (err) {
 8026b8a:	2800      	cmp	r0, #0
 8026b8c:	d1ce      	bne.n	8026b2c <lfs_file_opencfg_+0x6c>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8026b8e:	4644      	mov	r4, r8
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8026b90:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 8026cf0 <lfs_file_opencfg_+0x230>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8026b94:	f04f 0800 	mov.w	r8, #0
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8026b98:	f04f 090c 	mov.w	r9, #12
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8026b9c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8026b9e:	689a      	ldr	r2, [r3, #8]
 8026ba0:	4542      	cmp	r2, r8
 8026ba2:	d835      	bhi.n	8026c10 <lfs_file_opencfg_+0x150>
    if (file->cfg->buffer) {
 8026ba4:	681b      	ldr	r3, [r3, #0]
 8026ba6:	2b00      	cmp	r3, #0
 8026ba8:	d062      	beq.n	8026c70 <lfs_file_opencfg_+0x1b0>
        file->cache.buffer = file->cfg->buffer;
 8026baa:	64eb      	str	r3, [r5, #76]	@ 0x4c
    lfs_cache_zero(lfs, &file->cache);
 8026bac:	6eb0      	ldr	r0, [r6, #104]	@ 0x68
 8026bae:	f105 0140 	add.w	r1, r5, #64	@ 0x40
 8026bb2:	f7fe fafb 	bl	80251ac <lfs_cache_zero.isra.0>
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8026bb6:	f240 2301 	movw	r3, #513	@ 0x201
 8026bba:	ebb3 5f14 	cmp.w	r3, r4, lsr #20
 8026bbe:	d061      	beq.n	8026c84 <lfs_file_opencfg_+0x1c4>
    return 0;
 8026bc0:	2400      	movs	r4, #0
 8026bc2:	e7c1      	b.n	8026b48 <lfs_file_opencfg_+0x88>
    } else if (flags & LFS_O_EXCL) {
 8026bc4:	f418 7f00 	tst.w	r8, #512	@ 0x200
 8026bc8:	f040 8083 	bne.w	8026cd2 <lfs_file_opencfg_+0x212>
    return (tag & 0x7ff00000) >> 20;
 8026bcc:	0d24      	lsrs	r4, r4, #20
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8026bce:	2c01      	cmp	r4, #1
 8026bd0:	f040 8082 	bne.w	8026cd8 <lfs_file_opencfg_+0x218>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8026bd4:	88ab      	ldrh	r3, [r5, #4]
    } else if (flags & LFS_O_TRUNC) {
 8026bd6:	f418 6f80 	tst.w	r8, #1024	@ 0x400
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8026bda:	ea4f 2383 	mov.w	r3, r3, lsl #10
    } else if (flags & LFS_O_TRUNC) {
 8026bde:	d008      	beq.n	8026bf2 <lfs_file_opencfg_+0x132>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8026be0:	f043 5400 	orr.w	r4, r3, #536870912	@ 0x20000000
        file->flags |= LFS_F_DIRTY;
 8026be4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8026be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8026bea:	f444 1480 	orr.w	r4, r4, #1048576	@ 0x100000
        file->flags |= LFS_F_DIRTY;
 8026bee:	632b      	str	r3, [r5, #48]	@ 0x30
 8026bf0:	e7ce      	b.n	8026b90 <lfs_file_opencfg_+0xd0>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8026bf2:	f105 0228 	add.w	r2, r5, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8026bf6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8026bfa:	9200      	str	r2, [sp, #0]
 8026bfc:	f043 0308 	orr.w	r3, r3, #8
 8026c00:	4a39      	ldr	r2, [pc, #228]	@ (8026ce8 <lfs_file_opencfg_+0x228>)
 8026c02:	4639      	mov	r1, r7
 8026c04:	4630      	mov	r0, r6
 8026c06:	f7fd f9d1 	bl	8023fac <lfs_dir_get>
        if (tag < 0) {
 8026c0a:	1e04      	subs	r4, r0, #0
 8026c0c:	dac0      	bge.n	8026b90 <lfs_file_opencfg_+0xd0>
 8026c0e:	e78d      	b.n	8026b2c <lfs_file_opencfg_+0x6c>
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8026c10:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8026c12:	07d0      	lsls	r0, r2, #31
 8026c14:	d406      	bmi.n	8026c24 <lfs_file_opencfg_+0x164>
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8026c16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8026c18:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8026c1a:	0799      	lsls	r1, r3, #30
 8026c1c:	d41d      	bmi.n	8026c5a <lfs_file_opencfg_+0x19a>
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8026c1e:	f108 0801 	add.w	r8, r8, #1
 8026c22:	e7bb      	b.n	8026b9c <lfs_file_opencfg_+0xdc>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8026c24:	6858      	ldr	r0, [r3, #4]
 8026c26:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8026c2a:	fb09 f208 	mul.w	r2, r9, r8
 8026c2e:	1881      	adds	r1, r0, r2
 8026c30:	5c82      	ldrb	r2, [r0, r2]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8026c32:	688b      	ldr	r3, [r1, #8]
 8026c34:	6849      	ldr	r1, [r1, #4]
 8026c36:	9100      	str	r1, [sp, #0]
 8026c38:	ea43 238c 	orr.w	r3, r3, ip, lsl #10
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8026c3c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8026c40:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8026c44:	4639      	mov	r1, r7
 8026c46:	4652      	mov	r2, sl
 8026c48:	4630      	mov	r0, r6
 8026c4a:	f7fd f9af 	bl	8023fac <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
 8026c4e:	2800      	cmp	r0, #0
 8026c50:	dae1      	bge.n	8026c16 <lfs_file_opencfg_+0x156>
 8026c52:	1c83      	adds	r3, r0, #2
 8026c54:	d0df      	beq.n	8026c16 <lfs_file_opencfg_+0x156>
                err = res;
 8026c56:	4604      	mov	r4, r0
 8026c58:	e768      	b.n	8026b2c <lfs_file_opencfg_+0x6c>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8026c5a:	6852      	ldr	r2, [r2, #4]
 8026c5c:	fb09 2208 	mla	r2, r9, r8, r2
 8026c60:	6891      	ldr	r1, [r2, #8]
 8026c62:	6fb2      	ldr	r2, [r6, #120]	@ 0x78
 8026c64:	4291      	cmp	r1, r2
 8026c66:	d83a      	bhi.n	8026cde <lfs_file_opencfg_+0x21e>
            file->flags |= LFS_F_DIRTY;
 8026c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8026c6c:	632b      	str	r3, [r5, #48]	@ 0x30
 8026c6e:	e7d6      	b.n	8026c1e <lfs_file_opencfg_+0x15e>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8026c70:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
    return malloc(size);
 8026c72:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8026c74:	f015 fc80 	bl	803c578 <malloc>
 8026c78:	64e8      	str	r0, [r5, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8026c7a:	2800      	cmp	r0, #0
 8026c7c:	d196      	bne.n	8026bac <lfs_file_opencfg_+0xec>
            err = LFS_ERR_NOMEM;
 8026c7e:	f06f 040b 	mvn.w	r4, #11
 8026c82:	e753      	b.n	8026b2c <lfs_file_opencfg_+0x6c>
        file->flags |= LFS_F_INLINE;
 8026c84:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8026c86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026c8a:	632b      	str	r3, [r5, #48]	@ 0x30
        file->cache.off = 0;
 8026c8c:	2300      	movs	r3, #0
 8026c8e:	646b      	str	r3, [r5, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8026c90:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
        file->ctz.head = LFS_BLOCK_INLINE;
 8026c92:	f06f 0201 	mvn.w	r2, #1
 8026c96:	62aa      	str	r2, [r5, #40]	@ 0x28
    return tag & 0x000003ff;
 8026c98:	f3c4 0409 	ubfx	r4, r4, #0, #10
        file->cache.block = file->ctz.head;
 8026c9c:	642a      	str	r2, [r5, #64]	@ 0x40
        file->cache.size = lfs->cfg->cache_size;
 8026c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8026ca0:	62ec      	str	r4, [r5, #44]	@ 0x2c
        file->cache.size = lfs->cfg->cache_size;
 8026ca2:	64aa      	str	r2, [r5, #72]	@ 0x48
        if (file->ctz.size > 0) {
 8026ca4:	2c00      	cmp	r4, #0
 8026ca6:	d08b      	beq.n	8026bc0 <lfs_file_opencfg_+0x100>
    return (a < b) ? a : b;
 8026ca8:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8026cac:	4293      	cmp	r3, r2
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8026cae:	88a9      	ldrh	r1, [r5, #4]
 8026cb0:	bf28      	it	cs
 8026cb2:	4613      	movcs	r3, r2
 8026cb4:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8026cb8:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
 8026cba:	9200      	str	r2, [sp, #0]
 8026cbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8026cc0:	4a09      	ldr	r2, [pc, #36]	@ (8026ce8 <lfs_file_opencfg_+0x228>)
 8026cc2:	4639      	mov	r1, r7
 8026cc4:	4630      	mov	r0, r6
 8026cc6:	f7fd f971 	bl	8023fac <lfs_dir_get>
            if (res < 0) {
 8026cca:	1e04      	subs	r4, r0, #0
 8026ccc:	f6bf af78 	bge.w	8026bc0 <lfs_file_opencfg_+0x100>
 8026cd0:	e72c      	b.n	8026b2c <lfs_file_opencfg_+0x6c>
        err = LFS_ERR_EXIST;
 8026cd2:	f06f 0410 	mvn.w	r4, #16
 8026cd6:	e729      	b.n	8026b2c <lfs_file_opencfg_+0x6c>
        err = LFS_ERR_ISDIR;
 8026cd8:	f06f 0414 	mvn.w	r4, #20
 8026cdc:	e726      	b.n	8026b2c <lfs_file_opencfg_+0x6c>
                err = LFS_ERR_NOSPC;
 8026cde:	f06f 041b 	mvn.w	r4, #27
 8026ce2:	e723      	b.n	8026b2c <lfs_file_opencfg_+0x6c>
 8026ce4:	40100000 	.word	0x40100000
 8026ce8:	700ffc00 	.word	0x700ffc00
 8026cec:	20100000 	.word	0x20100000
 8026cf0:	7ffffc00 	.word	0x7ffffc00

08026cf4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8026cf4:	b570      	push	{r4, r5, r6, lr}
 8026cf6:	b096      	sub	sp, #88	@ 0x58
 8026cf8:	4606      	mov	r6, r0
 8026cfa:	460d      	mov	r5, r1
        err = lfs_init(lfs, cfg);
 8026cfc:	f7fe fa62 	bl	80251c4 <lfs_init>
        if (err) {
 8026d00:	4604      	mov	r4, r0
 8026d02:	2800      	cmp	r0, #0
 8026d04:	d156      	bne.n	8026db4 <lfs_format+0xc0>
        LFS_ASSERT(cfg->block_count != 0);
 8026d06:	6a2b      	ldr	r3, [r5, #32]
 8026d08:	b933      	cbnz	r3, 8026d18 <lfs_format+0x24>
 8026d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8026dbc <lfs_format+0xc8>)
 8026d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8026dc0 <lfs_format+0xcc>)
 8026d0e:	482d      	ldr	r0, [pc, #180]	@ (8026dc4 <lfs_format+0xd0>)
 8026d10:	f241 01f4 	movw	r1, #4340	@ 0x10f4
 8026d14:	f015 fc08 	bl	803c528 <__assert_func>
        memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);
 8026d18:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
 8026d1a:	4601      	mov	r1, r0
 8026d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8026d1e:	6e70      	ldr	r0, [r6, #100]	@ 0x64
 8026d20:	f016 fbc0 	bl	803d4a4 <memset>
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8026d24:	e9d6 321a 	ldrd	r3, r2, [r6, #104]	@ 0x68
 8026d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        lfs->lookahead.start = 0;
 8026d2a:	6574      	str	r4, [r6, #84]	@ 0x54
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8026d2c:	00db      	lsls	r3, r3, #3
    lfs->lookahead.ckpoint = lfs->block_count;
 8026d2e:	e9c6 4217 	strd	r4, r2, [r6, #92]	@ 0x5c
        lfs->lookahead.size = lfs_min(8*lfs->cfg->lookahead_size,
 8026d32:	4293      	cmp	r3, r2
 8026d34:	bf94      	ite	ls
 8026d36:	65b3      	strls	r3, [r6, #88]	@ 0x58
 8026d38:	65b2      	strhi	r2, [r6, #88]	@ 0x58
        err = lfs_dir_alloc(lfs, &root);
 8026d3a:	a90e      	add	r1, sp, #56	@ 0x38
 8026d3c:	4630      	mov	r0, r6
 8026d3e:	f7fe f9e9 	bl	8025114 <lfs_dir_alloc>
        if (err) {
 8026d42:	4604      	mov	r4, r0
 8026d44:	2800      	cmp	r0, #0
 8026d46:	d132      	bne.n	8026dae <lfs_format+0xba>
        lfs_superblock_t superblock = {
 8026d48:	4b1f      	ldr	r3, [pc, #124]	@ (8026dc8 <lfs_format+0xd4>)
 8026d4a:	9302      	str	r3, [sp, #8]
            .block_size  = lfs->cfg->block_size,
 8026d4c:	6eb3      	ldr	r3, [r6, #104]	@ 0x68
        lfs_superblock_t superblock = {
 8026d4e:	69db      	ldr	r3, [r3, #28]
 8026d50:	9303      	str	r3, [sp, #12]
 8026d52:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 8026d54:	9304      	str	r3, [sp, #16]
 8026d56:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8026d58:	9305      	str	r3, [sp, #20]
 8026d5a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8026d5c:	9306      	str	r3, [sp, #24]
 8026d5e:	6fb3      	ldr	r3, [r6, #120]	@ 0x78
 8026d60:	9307      	str	r3, [sp, #28]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8026d62:	4b1a      	ldr	r3, [pc, #104]	@ (8026dcc <lfs_format+0xd8>)
 8026d64:	e9cd 3008 	strd	r3, r0, [sp, #32]
 8026d68:	4b19      	ldr	r3, [pc, #100]	@ (8026dd0 <lfs_format+0xdc>)
 8026d6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8026d6c:	4b19      	ldr	r3, [pc, #100]	@ (8026dd4 <lfs_format+0xe0>)
 8026d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026d70:	4b19      	ldr	r3, [pc, #100]	@ (8026dd8 <lfs_format+0xe4>)
 8026d72:	930c      	str	r3, [sp, #48]	@ 0x30
 8026d74:	ab02      	add	r3, sp, #8
 8026d76:	930d      	str	r3, [sp, #52]	@ 0x34
 8026d78:	aa08      	add	r2, sp, #32
 8026d7a:	2303      	movs	r3, #3
 8026d7c:	a90e      	add	r1, sp, #56	@ 0x38
 8026d7e:	4630      	mov	r0, r6
 8026d80:	f7ff fdb4 	bl	80268ec <lfs_dir_commit>
        if (err) {
 8026d84:	4604      	mov	r4, r0
 8026d86:	b990      	cbnz	r0, 8026dae <lfs_format+0xba>
        root.erased = false;
 8026d88:	f88d 004e 	strb.w	r0, [sp, #78]	@ 0x4e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8026d8c:	4603      	mov	r3, r0
 8026d8e:	4602      	mov	r2, r0
 8026d90:	a90e      	add	r1, sp, #56	@ 0x38
 8026d92:	4630      	mov	r0, r6
 8026d94:	f7ff fdaa 	bl	80268ec <lfs_dir_commit>
        if (err) {
 8026d98:	4604      	mov	r4, r0
 8026d9a:	b940      	cbnz	r0, 8026dae <lfs_format+0xba>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8026d9c:	9000      	str	r0, [sp, #0]
 8026d9e:	2301      	movs	r3, #1
 8026da0:	466a      	mov	r2, sp
 8026da2:	a90e      	add	r1, sp, #56	@ 0x38
 8026da4:	4630      	mov	r0, r6
 8026da6:	9301      	str	r3, [sp, #4]
 8026da8:	f7fd fe0e 	bl	80249c8 <lfs_dir_fetch>
 8026dac:	4604      	mov	r4, r0
    lfs_deinit(lfs);
 8026dae:	4630      	mov	r0, r6
 8026db0:	f7fd f940 	bl	8024034 <lfs_deinit>
    err = lfs_format_(lfs, cfg);

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8026db4:	4620      	mov	r0, r4
 8026db6:	b016      	add	sp, #88	@ 0x58
 8026db8:	bd70      	pop	{r4, r5, r6, pc}
 8026dba:	bf00      	nop
 8026dbc:	0803fe97 	.word	0x0803fe97
 8026dc0:	08041fa8 	.word	0x08041fa8
 8026dc4:	0803f7e4 	.word	0x0803f7e4
 8026dc8:	00020001 	.word	0x00020001
 8026dcc:	40100000 	.word	0x40100000
 8026dd0:	0ff00008 	.word	0x0ff00008
 8026dd4:	0803fead 	.word	0x0803fead
 8026dd8:	20100018 	.word	0x20100018

08026ddc <lfs_unmount>:
    return lfs_deinit(lfs);
 8026ddc:	f7fd b92a 	b.w	8024034 <lfs_deinit>

08026de0 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8026de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026de4:	b099      	sub	sp, #100	@ 0x64
 8026de6:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
 8026de8:	f7fe f9ec 	bl	80251c4 <lfs_init>
    if (err) {
 8026dec:	4605      	mov	r5, r0
 8026dee:	2800      	cmp	r0, #0
 8026df0:	d13f      	bne.n	8026e72 <lfs_mount+0x92>
    lfs_mdir_t dir = {.tail = {0, 1}};
 8026df2:	4601      	mov	r1, r0
 8026df4:	221c      	movs	r2, #28
 8026df6:	a810      	add	r0, sp, #64	@ 0x40
 8026df8:	f016 fb54 	bl	803d4a4 <memset>
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8026dfc:	4b74      	ldr	r3, [pc, #464]	@ (8026fd0 <lfs_mount+0x1f0>)
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8026dfe:	f8df a204 	ldr.w	sl, [pc, #516]	@ 8027004 <lfs_mount+0x224>
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8026e02:	f8df b204 	ldr.w	fp, [pc, #516]	@ 8027008 <lfs_mount+0x228>
    lfs_block_t tortoise[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8026e06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8026e0a:	f10d 0814 	add.w	r8, sp, #20
 8026e0e:	e888 0003 	stmia.w	r8, {r0, r1}
    lfs_mdir_t dir = {.tail = {0, 1}};
 8026e12:	2601      	movs	r6, #1
 8026e14:	9617      	str	r6, [sp, #92]	@ 0x5c
    lfs_size_t tortoise_i = 1;
 8026e16:	4637      	mov	r7, r6
    while (!lfs_pair_isnull(dir.tail)) {
 8026e18:	a816      	add	r0, sp, #88	@ 0x58
 8026e1a:	f7fc fe6f 	bl	8023afc <lfs_pair_isnull>
 8026e1e:	b1b0      	cbz	r0, 8026e4e <lfs_mount+0x6e>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8026e20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8026e22:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8026e26:	6323      	str	r3, [r4, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8026e28:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 8026e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8026e2e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8026e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs->lookahead.start = lfs->seed % lfs->block_count;
 8026e36:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8026e38:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8026e3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8026e3e:	fb02 3311 	mls	r3, r2, r1, r3
 8026e42:	6563      	str	r3, [r4, #84]	@ 0x54
    lfs->lookahead.size = 0;
 8026e44:	2300      	movs	r3, #0
    lfs->lookahead.next = 0;
 8026e46:	e9c4 3316 	strd	r3, r3, [r4, #88]	@ 0x58
    lfs->lookahead.ckpoint = lfs->block_count;
 8026e4a:	6622      	str	r2, [r4, #96]	@ 0x60
    return 0;
 8026e4c:	e011      	b.n	8026e72 <lfs_mount+0x92>
        if (lfs_pair_issync(dir.tail, tortoise)) {
 8026e4e:	4641      	mov	r1, r8
 8026e50:	a816      	add	r0, sp, #88	@ 0x58
 8026e52:	f7fc fe6e 	bl	8023b32 <lfs_pair_issync>
 8026e56:	b180      	cbz	r0, 8026e7a <lfs_mount+0x9a>
            LFS_WARN("Cycle detected in tail list");
 8026e58:	4b5e      	ldr	r3, [pc, #376]	@ (8026fd4 <lfs_mount+0x1f4>)
 8026e5a:	495f      	ldr	r1, [pc, #380]	@ (8026fd8 <lfs_mount+0x1f8>)
 8026e5c:	485f      	ldr	r0, [pc, #380]	@ (8026fdc <lfs_mount+0x1fc>)
 8026e5e:	f241 123d 	movw	r2, #4413	@ 0x113d
 8026e62:	f016 fa03 	bl	803d26c <iprintf>
            err = LFS_ERR_CORRUPT;
 8026e66:	f06f 0953 	mvn.w	r9, #83	@ 0x53
    lfs_unmount_(lfs);
 8026e6a:	4620      	mov	r0, r4
 8026e6c:	f7ff ffb6 	bl	8026ddc <lfs_unmount>
    return err;
 8026e70:	464d      	mov	r5, r9
    err = lfs_mount_(lfs, cfg);

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
}
 8026e72:	4628      	mov	r0, r5
 8026e74:	b019      	add	sp, #100	@ 0x64
 8026e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (tortoise_i == tortoise_period) {
 8026e7a:	42b7      	cmp	r7, r6
 8026e7c:	d105      	bne.n	8026e8a <lfs_mount+0xaa>
            tortoise[0] = dir.tail[0];
 8026e7e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026e80:	9305      	str	r3, [sp, #20]
            tortoise[1] = dir.tail[1];
 8026e82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026e84:	9306      	str	r3, [sp, #24]
            tortoise_period *= 2;
 8026e86:	007e      	lsls	r6, r7, #1
            tortoise_i = 0;
 8026e88:	4607      	mov	r7, r0
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8026e8a:	4b55      	ldr	r3, [pc, #340]	@ (8026fe0 <lfs_mount+0x200>)
 8026e8c:	9308      	str	r3, [sp, #32]
 8026e8e:	2308      	movs	r3, #8
 8026e90:	9309      	str	r3, [sp, #36]	@ 0x24
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8026e92:	ab07      	add	r3, sp, #28
 8026e94:	e9cd a302 	strd	sl, r3, [sp, #8]
 8026e98:	4b52      	ldr	r3, [pc, #328]	@ (8026fe4 <lfs_mount+0x204>)
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8026e9a:	9407      	str	r4, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8026e9c:	f04f 0c00 	mov.w	ip, #0
 8026ea0:	e9cd 3c00 	strd	r3, ip, [sp]
 8026ea4:	aa16      	add	r2, sp, #88	@ 0x58
 8026ea6:	4b50      	ldr	r3, [pc, #320]	@ (8026fe8 <lfs_mount+0x208>)
 8026ea8:	a910      	add	r1, sp, #64	@ 0x40
 8026eaa:	4620      	mov	r0, r4
 8026eac:	f7fd fb26 	bl	80244fc <lfs_dir_fetchmatch>
        if (tag < 0) {
 8026eb0:	f1b0 0900 	subs.w	r9, r0, #0
        tortoise_i += 1;
 8026eb4:	f107 0701 	add.w	r7, r7, #1
        if (tag < 0) {
 8026eb8:	dbd7      	blt.n	8026e6a <lfs_mount+0x8a>
        if (tag && !lfs_tag_isdelete(tag)) {
 8026eba:	d07e      	beq.n	8026fba <lfs_mount+0x1da>
    return ((int32_t)(tag << 22) >> 22) == -1;
 8026ebc:	f349 0309 	sbfx	r3, r9, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
 8026ec0:	3301      	adds	r3, #1
 8026ec2:	d07a      	beq.n	8026fba <lfs_mount+0x1da>
            lfs->root[0] = dir.pair[0];
 8026ec4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8026ec6:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
 8026ec8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026eca:	6263      	str	r3, [r4, #36]	@ 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8026ecc:	ab0a      	add	r3, sp, #40	@ 0x28
 8026ece:	9300      	str	r3, [sp, #0]
 8026ed0:	4a45      	ldr	r2, [pc, #276]	@ (8026fe8 <lfs_mount+0x208>)
 8026ed2:	465b      	mov	r3, fp
 8026ed4:	a910      	add	r1, sp, #64	@ 0x40
 8026ed6:	4620      	mov	r0, r4
 8026ed8:	f7fd f868 	bl	8023fac <lfs_dir_get>
            if (tag < 0) {
 8026edc:	f1b0 0900 	subs.w	r9, r0, #0
 8026ee0:	dbc3      	blt.n	8026e6a <lfs_mount+0x8a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8026ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026ee4:	0c13      	lsrs	r3, r2, #16
            if (major_version != lfs_fs_disk_version_major(lfs)
 8026ee6:	2b02      	cmp	r3, #2
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8026ee8:	b291      	uxth	r1, r2
            if (major_version != lfs_fs_disk_version_major(lfs)
 8026eea:	d101      	bne.n	8026ef0 <lfs_mount+0x110>
                    || minor_version > lfs_fs_disk_version_minor(lfs)) {
 8026eec:	2901      	cmp	r1, #1
 8026eee:	d910      	bls.n	8026f12 <lfs_mount+0x132>
                LFS_ERROR("Invalid version "
 8026ef0:	4938      	ldr	r1, [pc, #224]	@ (8026fd4 <lfs_mount+0x1f4>)
 8026ef2:	9103      	str	r1, [sp, #12]
 8026ef4:	2001      	movs	r0, #1
 8026ef6:	2102      	movs	r1, #2
 8026ef8:	b292      	uxth	r2, r2
 8026efa:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026efe:	9200      	str	r2, [sp, #0]
 8026f00:	4935      	ldr	r1, [pc, #212]	@ (8026fd8 <lfs_mount+0x1f8>)
 8026f02:	483a      	ldr	r0, [pc, #232]	@ (8026fec <lfs_mount+0x20c>)
 8026f04:	f241 126b 	movw	r2, #4459	@ 0x116b
 8026f08:	f016 f9b0 	bl	803d26c <iprintf>
                err = LFS_ERR_INVAL;
 8026f0c:	f06f 0915 	mvn.w	r9, #21
 8026f10:	e7ab      	b.n	8026e6a <lfs_mount+0x8a>
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8026f12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            | (uint32_t)needssuperblock << 9;
 8026f14:	f081 0101 	eor.w	r1, r1, #1
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8026f18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
            | (uint32_t)needssuperblock << 9;
 8026f1c:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
    lfs->gstate.tag = (lfs->gstate.tag & ~LFS_MKTAG(0, 0, 0x200))
 8026f20:	6323      	str	r3, [r4, #48]	@ 0x30
            if (superblock.name_max) {
 8026f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026f24:	b16b      	cbz	r3, 8026f42 <lfs_mount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8026f26:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8026f28:	4293      	cmp	r3, r2
 8026f2a:	d909      	bls.n	8026f40 <lfs_mount+0x160>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8026f2c:	4929      	ldr	r1, [pc, #164]	@ (8026fd4 <lfs_mount+0x1f4>)
 8026f2e:	4830      	ldr	r0, [pc, #192]	@ (8026ff0 <lfs_mount+0x210>)
 8026f30:	e9cd 2100 	strd	r2, r1, [sp]
 8026f34:	4928      	ldr	r1, [pc, #160]	@ (8026fd8 <lfs_mount+0x1f8>)
 8026f36:	f241 1289 	movw	r2, #4489	@ 0x1189
 8026f3a:	f016 f997 	bl	803d26c <iprintf>
                    goto cleanup;
 8026f3e:	e7e5      	b.n	8026f0c <lfs_mount+0x12c>
                lfs->name_max = superblock.name_max;
 8026f40:	6723      	str	r3, [r4, #112]	@ 0x70
            if (superblock.file_max) {
 8026f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026f44:	b15b      	cbz	r3, 8026f5e <lfs_mount+0x17e>
                if (superblock.file_max > lfs->file_max) {
 8026f46:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8026f48:	4293      	cmp	r3, r2
 8026f4a:	d907      	bls.n	8026f5c <lfs_mount+0x17c>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8026f4c:	4921      	ldr	r1, [pc, #132]	@ (8026fd4 <lfs_mount+0x1f4>)
 8026f4e:	4829      	ldr	r0, [pc, #164]	@ (8026ff4 <lfs_mount+0x214>)
 8026f50:	e9cd 2100 	strd	r2, r1, [sp]
 8026f54:	4920      	ldr	r1, [pc, #128]	@ (8026fd8 <lfs_mount+0x1f8>)
 8026f56:	f241 1294 	movw	r2, #4500	@ 0x1194
 8026f5a:	e7ee      	b.n	8026f3a <lfs_mount+0x15a>
                lfs->file_max = superblock.file_max;
 8026f5c:	6763      	str	r3, [r4, #116]	@ 0x74
            if (superblock.attr_max) {
 8026f5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026f60:	b183      	cbz	r3, 8026f84 <lfs_mount+0x1a4>
                if (superblock.attr_max > lfs->attr_max) {
 8026f62:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8026f64:	4293      	cmp	r3, r2
 8026f66:	d907      	bls.n	8026f78 <lfs_mount+0x198>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8026f68:	491a      	ldr	r1, [pc, #104]	@ (8026fd4 <lfs_mount+0x1f4>)
 8026f6a:	4823      	ldr	r0, [pc, #140]	@ (8026ff8 <lfs_mount+0x218>)
 8026f6c:	e9cd 2100 	strd	r2, r1, [sp]
 8026f70:	4919      	ldr	r1, [pc, #100]	@ (8026fd8 <lfs_mount+0x1f8>)
 8026f72:	f241 129f 	movw	r2, #4511	@ 0x119f
 8026f76:	e7e0      	b.n	8026f3a <lfs_mount+0x15a>
 8026f78:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
                lfs->attr_max = superblock.attr_max;
 8026f7a:	67a3      	str	r3, [r4, #120]	@ 0x78
                lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);
 8026f7c:	429a      	cmp	r2, r3
 8026f7e:	bf94      	ite	ls
 8026f80:	67e2      	strls	r2, [r4, #124]	@ 0x7c
 8026f82:	67e3      	strhi	r3, [r4, #124]	@ 0x7c
            if (lfs->cfg->block_count
 8026f84:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
                    && superblock.block_count != lfs->cfg->block_count) {
 8026f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            if (lfs->cfg->block_count
 8026f88:	6a0a      	ldr	r2, [r1, #32]
 8026f8a:	b14a      	cbz	r2, 8026fa0 <lfs_mount+0x1c0>
                    && superblock.block_count != lfs->cfg->block_count) {
 8026f8c:	4293      	cmp	r3, r2
 8026f8e:	d007      	beq.n	8026fa0 <lfs_mount+0x1c0>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8026f90:	4910      	ldr	r1, [pc, #64]	@ (8026fd4 <lfs_mount+0x1f4>)
 8026f92:	481a      	ldr	r0, [pc, #104]	@ (8026ffc <lfs_mount+0x21c>)
 8026f94:	e9cd 2100 	strd	r2, r1, [sp]
 8026f98:	490f      	ldr	r1, [pc, #60]	@ (8026fd8 <lfs_mount+0x1f8>)
 8026f9a:	f241 12ae 	movw	r2, #4526	@ 0x11ae
 8026f9e:	e7cc      	b.n	8026f3a <lfs_mount+0x15a>
            if (superblock.block_size != lfs->cfg->block_size) {
 8026fa0:	69ca      	ldr	r2, [r1, #28]
            lfs->block_count = superblock.block_count;
 8026fa2:	66e3      	str	r3, [r4, #108]	@ 0x6c
            if (superblock.block_size != lfs->cfg->block_size) {
 8026fa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026fa6:	4293      	cmp	r3, r2
 8026fa8:	d007      	beq.n	8026fba <lfs_mount+0x1da>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8026faa:	490a      	ldr	r1, [pc, #40]	@ (8026fd4 <lfs_mount+0x1f4>)
 8026fac:	4814      	ldr	r0, [pc, #80]	@ (8027000 <lfs_mount+0x220>)
 8026fae:	e9cd 2100 	strd	r2, r1, [sp]
 8026fb2:	4909      	ldr	r1, [pc, #36]	@ (8026fd8 <lfs_mount+0x1f8>)
 8026fb4:	f241 12b7 	movw	r2, #4535	@ 0x11b7
 8026fb8:	e7bf      	b.n	8026f3a <lfs_mount+0x15a>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8026fba:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 8026fbe:	a910      	add	r1, sp, #64	@ 0x40
 8026fc0:	4620      	mov	r0, r4
 8026fc2:	f7fc ffff 	bl	8023fc4 <lfs_dir_getgstate>
        if (err) {
 8026fc6:	4681      	mov	r9, r0
 8026fc8:	2800      	cmp	r0, #0
 8026fca:	f43f af25 	beq.w	8026e18 <lfs_mount+0x38>
 8026fce:	e74c      	b.n	8026e6a <lfs_mount+0x8a>
 8026fd0:	0803f5e8 	.word	0x0803f5e8
 8026fd4:	0803f6b1 	.word	0x0803f6b1
 8026fd8:	0803f7e4 	.word	0x0803f7e4
 8026fdc:	0803f8b9 	.word	0x0803f8b9
 8026fe0:	0803fead 	.word	0x0803fead
 8026fe4:	0ff00008 	.word	0x0ff00008
 8026fe8:	7ffffc00 	.word	0x7ffffc00
 8026fec:	0803feb6 	.word	0x0803feb6
 8026ff0:	0803feeb 	.word	0x0803feeb
 8026ff4:	0803ff1c 	.word	0x0803ff1c
 8026ff8:	0803ff4d 	.word	0x0803ff4d
 8026ffc:	0803ff7e 	.word	0x0803ff7e
 8027000:	0803ffaf 	.word	0x0803ffaf
 8027004:	08024c35 	.word	0x08024c35
 8027008:	20100018 	.word	0x20100018

0802700c <lfs_stat>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802700c:	b530      	push	{r4, r5, lr}
 802700e:	b08b      	sub	sp, #44	@ 0x2c
 8027010:	4615      	mov	r5, r2
 8027012:	9101      	str	r1, [sp, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8027014:	2300      	movs	r3, #0
 8027016:	aa01      	add	r2, sp, #4
 8027018:	a902      	add	r1, sp, #8
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802701a:	4604      	mov	r4, r0
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 802701c:	f7fd fd2e 	bl	8024a7c <lfs_dir_find>
    if (tag < 0) {
 8027020:	2800      	cmp	r0, #0
 8027022:	db06      	blt.n	8027032 <lfs_stat+0x26>
    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8027024:	f3c0 2289 	ubfx	r2, r0, #10, #10
 8027028:	462b      	mov	r3, r5
 802702a:	a902      	add	r1, sp, #8
 802702c:	4620      	mov	r0, r4
 802702e:	f7fd f817 	bl	8024060 <lfs_dir_getinfo>
    err = lfs_stat_(lfs, path, info);

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 8027032:	b00b      	add	sp, #44	@ 0x2c
 8027034:	bd30      	pop	{r4, r5, pc}
	...

08027038 <lfs_file_open>:
    return err;
}
#endif

#ifndef LFS_NO_MALLOC
int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 8027038:	b513      	push	{r0, r1, r4, lr}
 802703a:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802703c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 802703e:	f7fc fdbe 	bl	8023bbe <lfs_mlist_isopen>
 8027042:	b130      	cbz	r0, 8027052 <lfs_file_open+0x1a>
 8027044:	4b06      	ldr	r3, [pc, #24]	@ (8027060 <lfs_file_open+0x28>)
 8027046:	4a07      	ldr	r2, [pc, #28]	@ (8027064 <lfs_file_open+0x2c>)
 8027048:	4807      	ldr	r0, [pc, #28]	@ (8027068 <lfs_file_open+0x30>)
 802704a:	f241 71ad 	movw	r1, #6061	@ 0x17ad
 802704e:	f015 fa6b 	bl	803c528 <__assert_func>
    int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);
 8027052:	4806      	ldr	r0, [pc, #24]	@ (802706c <lfs_file_open+0x34>)
 8027054:	9000      	str	r0, [sp, #0]
 8027056:	4620      	mov	r0, r4
 8027058:	f7ff fd32 	bl	8026ac0 <lfs_file_opencfg_>
    err = lfs_file_open_(lfs, file, path, flags);

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 802705c:	b002      	add	sp, #8
 802705e:	bd10      	pop	{r4, pc}
 8027060:	0803ffdf 	.word	0x0803ffdf
 8027064:	08041ee0 	.word	0x08041ee0
 8027068:	0803f7e4 	.word	0x0803f7e4
 802706c:	08041ed4 	.word	0x08041ed4

08027070 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8027070:	b508      	push	{r3, lr}
 8027072:	4603      	mov	r3, r0
    int err = LFS_LOCK(lfs->cfg);
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8027074:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8027076:	f7fc fda2 	bl	8023bbe <lfs_mlist_isopen>
 802707a:	b930      	cbnz	r0, 802708a <lfs_file_close+0x1a>
 802707c:	4b05      	ldr	r3, [pc, #20]	@ (8027094 <lfs_file_close+0x24>)
 802707e:	4a06      	ldr	r2, [pc, #24]	@ (8027098 <lfs_file_close+0x28>)
 8027080:	4806      	ldr	r0, [pc, #24]	@ (802709c <lfs_file_close+0x2c>)
 8027082:	f241 71d1 	movw	r1, #6097	@ 0x17d1
 8027086:	f015 fa4f 	bl	803c528 <__assert_func>

    err = lfs_file_close_(lfs, file);
 802708a:	4618      	mov	r0, r3

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}
 802708c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    err = lfs_file_close_(lfs, file);
 8027090:	f7ff bcfc 	b.w	8026a8c <lfs_file_close_>
 8027094:	0803ffe0 	.word	0x0803ffe0
 8027098:	08041ec2 	.word	0x08041ec2
 802709c:	0803f7e4 	.word	0x0803f7e4

080270a0 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80270a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80270a4:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80270a6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
        void *buffer, lfs_size_t size) {
 80270a8:	460d      	mov	r5, r1
 80270aa:	4616      	mov	r6, r2
 80270ac:	461f      	mov	r7, r3
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80270ae:	f7fc fd86 	bl	8023bbe <lfs_mlist_isopen>
 80270b2:	b930      	cbnz	r0, 80270c2 <lfs_file_read+0x22>
 80270b4:	4b0f      	ldr	r3, [pc, #60]	@ (80270f4 <lfs_file_read+0x54>)
 80270b6:	4a10      	ldr	r2, [pc, #64]	@ (80270f8 <lfs_file_read+0x58>)
 80270b8:	f241 71f3 	movw	r1, #6131	@ 0x17f3
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80270bc:	480f      	ldr	r0, [pc, #60]	@ (80270fc <lfs_file_read+0x5c>)
 80270be:	f015 fa33 	bl	803c528 <__assert_func>
 80270c2:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80270c4:	07da      	lsls	r2, r3, #31
 80270c6:	d404      	bmi.n	80270d2 <lfs_file_read+0x32>
 80270c8:	4b0d      	ldr	r3, [pc, #52]	@ (8027100 <lfs_file_read+0x60>)
 80270ca:	4a0e      	ldr	r2, [pc, #56]	@ (8027104 <lfs_file_read+0x64>)
 80270cc:	f640 51bf 	movw	r1, #3519	@ 0xdbf
 80270d0:	e7f4      	b.n	80270bc <lfs_file_read+0x1c>
    if (file->flags & LFS_F_WRITING) {
 80270d2:	039b      	lsls	r3, r3, #14
 80270d4:	d407      	bmi.n	80270e6 <lfs_file_read+0x46>
    return lfs_file_flushedread(lfs, file, buffer, size);
 80270d6:	463b      	mov	r3, r7
 80270d8:	4632      	mov	r2, r6
 80270da:	4629      	mov	r1, r5
 80270dc:	4620      	mov	r0, r4
    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 80270de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return lfs_file_flushedread(lfs, file, buffer, size);
 80270e2:	f7fd be2b 	b.w	8024d3c <lfs_file_flushedread>
        int err = lfs_file_flush(lfs, file);
 80270e6:	4620      	mov	r0, r4
 80270e8:	f7fe fc65 	bl	80259b6 <lfs_file_flush>
        if (err) {
 80270ec:	2800      	cmp	r0, #0
 80270ee:	d0f2      	beq.n	80270d6 <lfs_file_read+0x36>
}
 80270f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80270f4:	0803ffe0 	.word	0x0803ffe0
 80270f8:	08041eb4 	.word	0x08041eb4
 80270fc:	0803f7e4 	.word	0x0803f7e4
 8027100:	08040016 	.word	0x08040016
 8027104:	08041ea5 	.word	0x08041ea5

08027108 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8027108:	b510      	push	{r4, lr}
 802710a:	4604      	mov	r4, r0
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802710c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 802710e:	f7fc fd56 	bl	8023bbe <lfs_mlist_isopen>
 8027112:	b930      	cbnz	r0, 8027122 <lfs_file_write+0x1a>
 8027114:	4b05      	ldr	r3, [pc, #20]	@ (802712c <lfs_file_write+0x24>)
 8027116:	4a06      	ldr	r2, [pc, #24]	@ (8027130 <lfs_file_write+0x28>)
 8027118:	4806      	ldr	r0, [pc, #24]	@ (8027134 <lfs_file_write+0x2c>)
 802711a:	f641 0105 	movw	r1, #6149	@ 0x1805
 802711e:	f015 fa03 	bl	803c528 <__assert_func>

    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8027122:	4620      	mov	r0, r4

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
}
 8027124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);
 8027128:	f7fe bcb0 	b.w	8025a8c <lfs_file_write_>
 802712c:	0803ffe0 	.word	0x0803ffe0
 8027130:	08041e96 	.word	0x08041e96
 8027134:	0803f7e4 	.word	0x0803f7e4

08027138 <lfs_fs_size>:
    if (err) {
        return err;
    }
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);

    lfs_ssize_t res = lfs_fs_size_(lfs);
 8027138:	f7fe b82a 	b.w	8025190 <lfs_fs_size_>

0802713c <lfs_crc>:


// If user provides their own CRC impl we don't need this
#ifndef LFS_CRC
// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802713c:	b530      	push	{r4, r5, lr}
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802713e:	4d0c      	ldr	r5, [pc, #48]	@ (8027170 <lfs_crc+0x34>)
 8027140:	440a      	add	r2, r1
    for (size_t i = 0; i < size; i++) {
 8027142:	4291      	cmp	r1, r2
 8027144:	d100      	bne.n	8027148 <lfs_crc+0xc>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    }

    return crc;
}
 8027146:	bd30      	pop	{r4, r5, pc}
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8027148:	f811 3b01 	ldrb.w	r3, [r1], #1
 802714c:	ea83 0400 	eor.w	r4, r3, r0
 8027150:	f004 040f 	and.w	r4, r4, #15
 8027154:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8027158:	ea84 1010 	eor.w	r0, r4, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802715c:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
 8027160:	f003 030f 	and.w	r3, r3, #15
 8027164:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027168:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
 802716c:	e7e9      	b.n	8027142 <lfs_crc+0x6>
 802716e:	bf00      	nop
 8027170:	08041fb4 	.word	0x08041fb4

08027174 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8027174:	4770      	bx	lr

08027176 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8027176:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8027178:	f000 fc98 	bl	8027aac <touchgfx_components_init>
  touchgfx_init();
}
 802717c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 8027180:	f000 bc24 	b.w	80279cc <touchgfx_init>

08027184 <MX_TouchGFX_Process>:
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8027184:	f000 bc94 	b.w	8027ab0 <touchgfx_taskEntry>

08027188 <_ZN20STM32TouchController4initEv>:
{
    /**
     * Initialize touch controller and driver
     *
     */
}
 8027188:	4770      	bx	lr

0802718a <_ZN20STM32TouchController11sampleTouchERlS0_>:
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
}
 802718a:	2000      	movs	r0, #0
 802718c:	4770      	bx	lr

0802718e <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 802718e:	4770      	bx	lr

08027190 <_ZN20STM32TouchControllerD0Ev>:
 8027190:	b510      	push	{r4, lr}
 8027192:	2104      	movs	r1, #4
 8027194:	4604      	mov	r4, r0
 8027196:	f015 f9a8 	bl	803c4ea <_ZdlPvj>
 802719a:	4620      	mov	r0, r4
 802719c:	bd10      	pop	{r4, pc}

0802719e <_ZN8touchgfx4GPIO4initEv>:
 * Perform configuration of IO pins.
 */
void GPIO::init()
{

}
 802719e:	4770      	bx	lr

080271a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80271a0:	4770      	bx	lr

080271a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
 80271a2:	4770      	bx	lr

080271a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
}

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
 80271a4:	4770      	bx	lr

080271a6 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80271a6:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80271a8:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80271ac:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 80271b0:	4770      	bx	lr

080271b2 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80271b2:	2000      	movs	r0, #0
 80271b4:	4770      	bx	lr
	...

080271b8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80271b8:	4b03      	ldr	r3, [pc, #12]	@ (80271c8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80271ba:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80271bc:	3900      	subs	r1, #0
 80271be:	bf18      	it	ne
 80271c0:	2101      	movne	r1, #1
 80271c2:	7019      	strb	r1, [r3, #0]
    }
 80271c4:	4770      	bx	lr
 80271c6:	bf00      	nop
 80271c8:	2000b8df 	.word	0x2000b8df

080271cc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80271cc:	2000      	movs	r0, #0
 80271ce:	4770      	bx	lr

080271d0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80271d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80271d2:	b10b      	cbz	r3, 80271d8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80271d4:	4608      	mov	r0, r1
 80271d6:	4718      	bx	r3
        }
    }
 80271d8:	4770      	bx	lr

080271da <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80271da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80271de:	4770      	bx	lr

080271e0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80271e0:	6840      	ldr	r0, [r0, #4]
 80271e2:	6803      	ldr	r3, [r0, #0]
 80271e4:	699b      	ldr	r3, [r3, #24]
 80271e6:	4718      	bx	r3

080271e8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80271e8:	4770      	bx	lr

080271ea <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80271ea:	4770      	bx	lr

080271ec <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80271ec:	4770      	bx	lr

080271ee <_ZN11TouchGFXHALD0Ev>:
 80271ee:	b510      	push	{r4, lr}
 80271f0:	2180      	movs	r1, #128	@ 0x80
 80271f2:	4604      	mov	r4, r0
 80271f4:	f015 f979 	bl	803c4ea <_ZdlPvj>
 80271f8:	4620      	mov	r0, r4
 80271fa:	bd10      	pop	{r4, pc}

080271fc <_ZN11TouchGFXHAL10initializeEv>:
#define PIXEL_BYTESIZE 3 // size in bytes per pixel RGB888
static uint32_t dma2dBuffer[LCD_WIDTH * PIXEL_BYTESIZE / sizeof(uint32_t)];
TouchGfxInputController inputController;
static volatile bool hasNewFrame = false;

void TouchGFXHAL::initialize() {
 80271fc:	b538      	push	{r3, r4, r5, lr}
 80271fe:	4604      	mov	r4, r0
	// Please note, HAL::initialize() must be called to initialize the framework.

	TouchGFXGeneratedHAL::initialize();
	setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_DEFAULT);

	inputController.init();
 8027200:	4d05      	ldr	r5, [pc, #20]	@ (8027218 <_ZN11TouchGFXHAL10initializeEv+0x1c>)
	TouchGFXGeneratedHAL::initialize();
 8027202:	f000 fcfd 	bl	8027c00 <_ZN20TouchGFXGeneratedHAL10initializeEv>
            refreshStrategy = s;
 8027206:	2300      	movs	r3, #0
 8027208:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
	inputController.init();
 802720c:	4628      	mov	r0, r5
 802720e:	f7ef fc92 	bl	8016b36 <_ZN23TouchGfxInputController4initEv>
        buttonController = btnCtrl;
 8027212:	6165      	str	r5, [r4, #20]
	setButtonController(&inputController);
}
 8027214:	bd38      	pop	{r3, r4, r5, pc}
 8027216:	bf00      	nop
 8027218:	200004d0 	.word	0x200004d0

0802721c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
	// Calling parent implementation of getTFTFrameBuffer().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 802721c:	f000 bce2 	b.w	8027be4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08027220 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
	// Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8027220:	f000 bce6 	b.w	8027bf0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08027224 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
	// be called to notify the touchgfx framework that flush has been performed.
	// To calculate he start adress of rect,
	// use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
	// defined in TouchGFXGeneratedHAL.cpp

	hasNewFrame = true;
 8027224:	4b02      	ldr	r3, [pc, #8]	@ (8027230 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0xc>)
 8027226:	2201      	movs	r2, #1
 8027228:	701a      	strb	r2, [r3, #0]

	TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 802722a:	f000 bd07 	b.w	8027c3c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
 802722e:	bf00      	nop
 8027230:	20007da4 	.word	0x20007da4

08027234 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:
}

bool TouchGFXHAL::blockCopy(void *RESTRICT dest, const void *RESTRICT src,
		uint32_t numBytes) {
	return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8027234:	f000 bd04 	b.w	8027c40 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08027238 <_ZN11TouchGFXHAL19configureInterruptsEv>:
	// Calling parent implementation of configureInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::configureInterrupts();
 8027238:	f000 bcb0 	b.w	8027b9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0802723c <_ZN11TouchGFXHAL16enableInterruptsEv>:
	// Calling parent implementation of enableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableInterrupts();
 802723c:	f000 bd16 	b.w	8027c6c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08027240 <_ZN11TouchGFXHAL17disableInterruptsEv>:
	// Calling parent implementation of disableInterrupts().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::disableInterrupts();
 8027240:	f000 bd00 	b.w	8027c44 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08027244 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
	// Calling parent implementation of enableLCDControllerInterrupt().
	//
	// To overwrite the generated implementation, omit call to parent function
	// and implemented needed functionality here.

	TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8027244:	f000 bcb4 	b.w	8027bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08027248 <_ZN11TouchGFXHAL10beginFrameEv>:
}

bool TouchGFXHAL::beginFrame() {
	bool result = TouchGFXGeneratedHAL::beginFrame();
 8027248:	f000 bcf4 	b.w	8027c34 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>

0802724c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 802724c:	b510      	push	{r4, lr}
 802724e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8027250:	f00b ff7c 	bl	803314c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8027254:	6823      	ldr	r3, [r4, #0]
 8027256:	4620      	mov	r0, r4
 8027258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 802725c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8027260:	4718      	bx	r3

08027262 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8027262:	f00b b9d0 	b.w	8032606 <_ZN8touchgfx3HAL16flushFrameBufferEv>
	...

08027268 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8027268:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 802726a:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 802726e:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8027272:	4b0c      	ldr	r3, [pc, #48]	@ (80272a4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8027274:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8027276:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8027278:	d009      	beq.n	802728e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 802727a:	b93a      	cbnz	r2, 802728c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 802727c:	4a0a      	ldr	r2, [pc, #40]	@ (80272a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 802727e:	490b      	ldr	r1, [pc, #44]	@ (80272ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8027280:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 8027282:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8027284:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8027286:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8027288:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 802728a:	701a      	strb	r2, [r3, #0]
    }
 802728c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 802728e:	2a00      	cmp	r2, #0
 8027290:	d0fc      	beq.n	802728c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8027292:	4a05      	ldr	r2, [pc, #20]	@ (80272a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8027294:	4905      	ldr	r1, [pc, #20]	@ (80272ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8027296:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8027298:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 802729a:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 802729c:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 802729e:	2200      	movs	r2, #0
 80272a0:	e7f3      	b.n	802728a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80272a2:	bf00      	nop
 80272a4:	2000b8d8 	.word	0x2000b8d8
 80272a8:	2000b8d4 	.word	0x2000b8d4
 80272ac:	2000b8d6 	.word	0x2000b8d6

080272b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80272b0:	b570      	push	{r4, r5, r6, lr}
 80272b2:	460d      	mov	r5, r1
 80272b4:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80272b6:	b935      	cbnz	r5, 80272c6 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80272b8:	4b09      	ldr	r3, [pc, #36]	@ (80272e0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80272ba:	4a0a      	ldr	r2, [pc, #40]	@ (80272e4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80272bc:	480a      	ldr	r0, [pc, #40]	@ (80272e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80272be:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80272c2:	f015 f931 	bl	803c528 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80272c6:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80272ca:	4b08      	ldr	r3, [pc, #32]	@ (80272ec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80272cc:	3a00      	subs	r2, #0
 80272ce:	bf18      	it	ne
 80272d0:	2201      	movne	r2, #1
 80272d2:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80272d4:	6803      	ldr	r3, [r0, #0]
    }
 80272d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80272da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80272de:	4718      	bx	r3
 80272e0:	08040043 	.word	0x08040043
 80272e4:	0804007b 	.word	0x0804007b
 80272e8:	080400c9 	.word	0x080400c9
 80272ec:	2000b8de 	.word	0x2000b8de

080272f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80272f0:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80272f2:	4b09      	ldr	r3, [pc, #36]	@ (8027318 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80272f4:	881b      	ldrh	r3, [r3, #0]
 80272f6:	428b      	cmp	r3, r1
 80272f8:	d803      	bhi.n	8027302 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80272fa:	4b08      	ldr	r3, [pc, #32]	@ (802731c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80272fc:	881b      	ldrh	r3, [r3, #0]
 80272fe:	4293      	cmp	r3, r2
 8027300:	d905      	bls.n	802730e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8027302:	4b07      	ldr	r3, [pc, #28]	@ (8027320 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8027304:	4a07      	ldr	r2, [pc, #28]	@ (8027324 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8027306:	4808      	ldr	r0, [pc, #32]	@ (8027328 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8027308:	219e      	movs	r1, #158	@ 0x9e
 802730a:	f015 f90d 	bl	803c528 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 802730e:	4b07      	ldr	r3, [pc, #28]	@ (802732c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8027310:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8027312:	4b07      	ldr	r3, [pc, #28]	@ (8027330 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8027314:	801a      	strh	r2, [r3, #0]
    }
 8027316:	bd08      	pop	{r3, pc}
 8027318:	2000b8d4 	.word	0x2000b8d4
 802731c:	2000b8d6 	.word	0x2000b8d6
 8027320:	08040109 	.word	0x08040109
 8027324:	0804016c 	.word	0x0804016c
 8027328:	080400c9 	.word	0x080400c9
 802732c:	2000b8da 	.word	0x2000b8da
 8027330:	2000b8dc 	.word	0x2000b8dc

08027334 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8027334:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8027336:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 802733a:	b118      	cbz	r0, 8027344 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 802733c:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 802733e:	6803      	ldr	r3, [r0, #0]
 8027340:	681b      	ldr	r3, [r3, #0]
 8027342:	4718      	bx	r3
    }
 8027344:	4770      	bx	lr
	...

08027348 <_ZN11TouchGFXHAL5HFlipEm>:
		hasNewFrame = false;
	}
	return TouchGFXGeneratedHAL::endFrame();
}

void TouchGFXHAL::HFlip(uint32_t fb) {
 8027348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802734c:	b08b      	sub	sp, #44	@ 0x2c
 802734e:	460c      	mov	r4, r1
	uint32_t dstAddress = 0;
	uint32_t srcPxOffset = 0;
	uint32_t dstPxOffset = 0;
	colortype c = colortype();

	BlitOp op = { BLIT_OP_COPY,
 8027350:	2301      	movs	r3, #1
void TouchGFXHAL::HFlip(uint32_t fb) {
 8027352:	4605      	mov	r5, r0
	BlitOp op = { BLIT_OP_COPY,
 8027354:	221c      	movs	r2, #28
 8027356:	2100      	movs	r1, #0
 8027358:	a803      	add	r0, sp, #12
 802735a:	9301      	str	r3, [sp, #4]
 802735c:	f016 f8a2 	bl	803d4a4 <memset>
 8027360:	4b1a      	ldr	r3, [pc, #104]	@ (80273cc <_ZN11TouchGFXHAL5HFlipEm+0x84>)
 8027362:	9306      	str	r3, [sp, #24]
		dstPxOffset = 1;
		srcAddress = leftColumnAddress;
		dstAddress = (uint32_t) dma2dBuffer;

		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 8027364:	4f1a      	ldr	r7, [pc, #104]	@ (80273d0 <_ZN11TouchGFXHAL5HFlipEm+0x88>)
	BlitOp op = { BLIT_OP_COPY,
 8027366:	4b1b      	ldr	r3, [pc, #108]	@ (80273d4 <_ZN11TouchGFXHAL5HFlipEm+0x8c>)
		op.srcLoopStride = srcPxOffset;
 8027368:	f8df b070 	ldr.w	fp, [pc, #112]	@ 80273dc <_ZN11TouchGFXHAL5HFlipEm+0x94>
		srcAddress = rightColumnAddress;
		dstAddress = leftColumnAddress;

		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
		op.srcLoopStride = srcPxOffset;
 802736c:	f8df 8070 	ldr.w	r8, [pc, #112]	@ 80273e0 <_ZN11TouchGFXHAL5HFlipEm+0x98>
	BlitOp op = { BLIT_OP_COPY,
 8027370:	9308      	str	r3, [sp, #32]
	for (uint16_t column = 0; column < LCD_WIDTH / 2; column++) {
 8027372:	f504 7af0 	add.w	sl, r4, #480	@ 0x1e0
 8027376:	ea4f 0944 	mov.w	r9, r4, lsl #1
		this->dma.addToQueue(op);
 802737a:	6868      	ldr	r0, [r5, #4]
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
 802737c:	9402      	str	r4, [sp, #8]
		this->dma.addToQueue(op);
 802737e:	6803      	ldr	r3, [r0, #0]
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 8027380:	9705      	str	r7, [sp, #20]
		this->dma.addToQueue(op);
 8027382:	685b      	ldr	r3, [r3, #4]
		op.srcLoopStride = srcPxOffset;
 8027384:	f8cd b01c 	str.w	fp, [sp, #28]
		this->dma.addToQueue(op);
 8027388:	a901      	add	r1, sp, #4
 802738a:	4798      	blx	r3
		op.dstLoopStride = dstPxOffset;
		this->dma.addToQueue(op);
 802738c:	6868      	ldr	r0, [r5, #4]
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 802738e:	9405      	str	r4, [sp, #20]
		this->dma.addToQueue(op);
 8027390:	6803      	ldr	r3, [r0, #0]
		op.srcLoopStride = srcPxOffset;
 8027392:	f8cd 801c 	str.w	r8, [sp, #28]
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
 8027396:	f209 36bd 	addw	r6, r9, #957	@ 0x3bd
 802739a:	1b36      	subs	r6, r6, r4
		this->dma.addToQueue(op);
 802739c:	685b      	ldr	r3, [r3, #4]
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
 802739e:	9602      	str	r6, [sp, #8]
		this->dma.addToQueue(op);
 80273a0:	a901      	add	r1, sp, #4
 80273a2:	4798      	blx	r3
		// dstPxOffset as above
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
		op.srcLoopStride = srcPxOffset;
		op.dstLoopStride = dstPxOffset;
		this->dma.addToQueue(op);
 80273a4:	6868      	ldr	r0, [r5, #4]
		op.srcLoopStride = srcPxOffset;
 80273a6:	4b0c      	ldr	r3, [pc, #48]	@ (80273d8 <_ZN11TouchGFXHAL5HFlipEm+0x90>)
 80273a8:	9307      	str	r3, [sp, #28]
		this->dma.addToQueue(op);
 80273aa:	6803      	ldr	r3, [r0, #0]
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
 80273ac:	9702      	str	r7, [sp, #8]
		this->dma.addToQueue(op);
 80273ae:	685b      	ldr	r3, [r3, #4]
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 80273b0:	9605      	str	r6, [sp, #20]
		this->dma.addToQueue(op);
 80273b2:	a901      	add	r1, sp, #4
	for (uint16_t column = 0; column < LCD_WIDTH / 2; column++) {
 80273b4:	3403      	adds	r4, #3
		this->dma.addToQueue(op);
 80273b6:	4798      	blx	r3
	for (uint16_t column = 0; column < LCD_WIDTH / 2; column++) {
 80273b8:	45a2      	cmp	sl, r4
 80273ba:	d1de      	bne.n	802737a <_ZN11TouchGFXHAL5HFlipEm+0x32>
	}
	this->dma.flush();
 80273bc:	6868      	ldr	r0, [r5, #4]
 80273be:	6803      	ldr	r3, [r0, #0]
 80273c0:	689b      	ldr	r3, [r3, #8]
 80273c2:	4798      	blx	r3
}
 80273c4:	b00b      	add	sp, #44	@ 0x2c
 80273c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273ca:	bf00      	nop
 80273cc:	00f00001 	.word	0x00f00001
 80273d0:	20007da8 	.word	0x20007da8
 80273d4:	000101ff 	.word	0x000101ff
 80273d8:	01400001 	.word	0x01400001
 80273dc:	00010140 	.word	0x00010140
 80273e0:	01400140 	.word	0x01400140

080273e4 <_ZN11TouchGFXHAL5VFlipEm>:

void TouchGFXHAL::VFlip(uint32_t fb) {
 80273e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80273e8:	b08a      	sub	sp, #40	@ 0x28
 80273ea:	460c      	mov	r4, r1
	uint32_t srcAddress = 0;
	uint32_t dstAddress = 0;
	colortype c = colortype();
	BlitOp op = { BLIT_OP_COPY,
 80273ec:	2301      	movs	r3, #1
 80273ee:	221c      	movs	r2, #28
void TouchGFXHAL::VFlip(uint32_t fb) {
 80273f0:	4605      	mov	r5, r0
	BlitOp op = { BLIT_OP_COPY,
 80273f2:	2100      	movs	r1, #0
 80273f4:	a803      	add	r0, sp, #12
 80273f6:	9301      	str	r3, [sp, #4]
 80273f8:	f016 f854 	bl	803d4a4 <memset>
 80273fc:	4b16      	ldr	r3, [pc, #88]	@ (8027458 <_ZN11TouchGFXHAL5VFlipEm+0x74>)
 80273fe:	4a17      	ldr	r2, [pc, #92]	@ (802745c <_ZN11TouchGFXHAL5VFlipEm+0x78>)
	for (uint16_t row = 0; row < LCD_HEIGHT / 2; row++) {
		// copy top row to buffer
		srcAddress = fb + row * LCD_WIDTH * PIXEL_BYTESIZE;
		dstAddress = (uint32_t) dma2dBuffer;
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 8027400:	4f17      	ldr	r7, [pc, #92]	@ (8027460 <_ZN11TouchGFXHAL5VFlipEm+0x7c>)
	BlitOp op = { BLIT_OP_COPY,
 8027402:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8027406:	f504 3660 	add.w	r6, r4, #229376	@ 0x38000
 802740a:	4b16      	ldr	r3, [pc, #88]	@ (8027464 <_ZN11TouchGFXHAL5VFlipEm+0x80>)
 802740c:	9308      	str	r3, [sp, #32]
	for (uint16_t row = 0; row < LCD_HEIGHT / 2; row++) {
 802740e:	3640      	adds	r6, #64	@ 0x40
 8027410:	f504 38e1 	add.w	r8, r4, #115200	@ 0x1c200
		this->dma.addToQueue(op);
 8027414:	6868      	ldr	r0, [r5, #4]
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
 8027416:	9402      	str	r4, [sp, #8]
		this->dma.addToQueue(op);
 8027418:	6803      	ldr	r3, [r0, #0]
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 802741a:	9705      	str	r7, [sp, #20]
		this->dma.addToQueue(op);
 802741c:	685b      	ldr	r3, [r3, #4]
 802741e:	a901      	add	r1, sp, #4
 8027420:	4798      	blx	r3
		// bottom row to top
		dstAddress = srcAddress;
		srcAddress = fb + (LCD_HEIGHT - row - 1) * LCD_WIDTH * PIXEL_BYTESIZE;
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
		this->dma.addToQueue(op);
 8027422:	6868      	ldr	r0, [r5, #4]
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
 8027424:	9602      	str	r6, [sp, #8]
		this->dma.addToQueue(op);
 8027426:	6803      	ldr	r3, [r0, #0]
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 8027428:	9405      	str	r4, [sp, #20]
		this->dma.addToQueue(op);
 802742a:	685b      	ldr	r3, [r3, #4]
 802742c:	a901      	add	r1, sp, #4
 802742e:	4798      	blx	r3
		// copy buffer to bottom
		dstAddress = srcAddress;
		srcAddress = (uint32_t) dma2dBuffer;
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
		this->dma.addToQueue(op);
 8027430:	6868      	ldr	r0, [r5, #4]
		op.pDst = reinterpret_cast<uint16_t*>(dstAddress);
 8027432:	9605      	str	r6, [sp, #20]
		this->dma.addToQueue(op);
 8027434:	6803      	ldr	r3, [r0, #0]
		op.pSrc = reinterpret_cast<const uint16_t*>(srcAddress);
 8027436:	9702      	str	r7, [sp, #8]
		this->dma.addToQueue(op);
 8027438:	685b      	ldr	r3, [r3, #4]
 802743a:	a901      	add	r1, sp, #4
	for (uint16_t row = 0; row < LCD_HEIGHT / 2; row++) {
 802743c:	f504 7470 	add.w	r4, r4, #960	@ 0x3c0
		this->dma.addToQueue(op);
 8027440:	4798      	blx	r3
	for (uint16_t row = 0; row < LCD_HEIGHT / 2; row++) {
 8027442:	45a0      	cmp	r8, r4
 8027444:	f5a6 7670 	sub.w	r6, r6, #960	@ 0x3c0
 8027448:	d1e4      	bne.n	8027414 <_ZN11TouchGFXHAL5VFlipEm+0x30>
	}
	this->dma.flush();
 802744a:	6868      	ldr	r0, [r5, #4]
 802744c:	6803      	ldr	r3, [r0, #0]
 802744e:	689b      	ldr	r3, [r3, #8]
 8027450:	4798      	blx	r3
}
 8027452:	b00a      	add	sp, #40	@ 0x28
 8027454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027458:	01400140 	.word	0x01400140
 802745c:	00010140 	.word	0x00010140
 8027460:	20007da8 	.word	0x20007da8
 8027464:	000101ff 	.word	0x000101ff

08027468 <_ZN11TouchGFXHAL8endFrameEv>:
void TouchGFXHAL::endFrame() {
 8027468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hasNewFrame) {
 802746a:	4e13      	ldr	r6, [pc, #76]	@ (80274b8 <_ZN11TouchGFXHAL8endFrameEv+0x50>)
 802746c:	7833      	ldrb	r3, [r6, #0]
void TouchGFXHAL::endFrame() {
 802746e:	4604      	mov	r4, r0
	if (hasNewFrame) {
 8027470:	b1b3      	cbz	r3, 80274a0 <_ZN11TouchGFXHAL8endFrameEv+0x38>
        return instance;
 8027472:	4f12      	ldr	r7, [pc, #72]	@ (80274bc <_ZN11TouchGFXHAL8endFrameEv+0x54>)
 8027474:	6838      	ldr	r0, [r7, #0]
		uint16_t *framebuffer = touchgfx::HAL::getInstance()->lockFrameBuffer();
 8027476:	6803      	ldr	r3, [r0, #0]
 8027478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802747a:	4798      	blx	r3
		if (usesDMA2D) {
 802747c:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
		uint16_t *framebuffer = touchgfx::HAL::getInstance()->lockFrameBuffer();
 8027480:	4605      	mov	r5, r0
		if (usesDMA2D) {
 8027482:	b193      	cbz	r3, 80274aa <_ZN11TouchGFXHAL8endFrameEv+0x42>
			HFlip((uint32_t) framebuffer);
 8027484:	4601      	mov	r1, r0
 8027486:	4620      	mov	r0, r4
 8027488:	f7ff ff5e 	bl	8027348 <_ZN11TouchGFXHAL5HFlipEm>
			VFlip((uint32_t) framebuffer);
 802748c:	4629      	mov	r1, r5
 802748e:	4620      	mov	r0, r4
 8027490:	f7ff ffa8 	bl	80273e4 <_ZN11TouchGFXHAL5VFlipEm>
 8027494:	6838      	ldr	r0, [r7, #0]
		touchgfx::HAL::getInstance()->unlockFrameBuffer();
 8027496:	6803      	ldr	r3, [r0, #0]
 8027498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802749a:	4798      	blx	r3
		hasNewFrame = false;
 802749c:	2300      	movs	r3, #0
 802749e:	7033      	strb	r3, [r6, #0]
	return TouchGFXGeneratedHAL::endFrame();
 80274a0:	4620      	mov	r0, r4
}
 80274a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return TouchGFXGeneratedHAL::endFrame();
 80274a6:	f000 bbc7 	b.w	8027c38 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
			DMA2D_HFlip((uint32_t) framebuffer);
 80274aa:	f7ef f96b 	bl	8016784 <DMA2D_HFlip>
			DMA2D_VFlip((uint32_t) framebuffer);
 80274ae:	4628      	mov	r0, r5
 80274b0:	f7ef f9a4 	bl	80167fc <DMA2D_VFlip>
 80274b4:	e7ee      	b.n	8027494 <_ZN11TouchGFXHAL8endFrameEv+0x2c>
 80274b6:	bf00      	nop
 80274b8:	20007da4 	.word	0x20007da4
 80274bc:	2000b8e0 	.word	0x2000b8e0

080274c0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80274c0:	2101      	movs	r1, #1
{
 80274c2:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80274c4:	2200      	movs	r2, #0
 80274c6:	4608      	mov	r0, r1
 80274c8:	f7fa fab6 	bl	8021a38 <osSemaphoreNew>
 80274cc:	4b0a      	ldr	r3, [pc, #40]	@ (80274f8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 80274ce:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 80274d0:	b928      	cbnz	r0, 80274de <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 80274d2:	4b0a      	ldr	r3, [pc, #40]	@ (80274fc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 80274d4:	4a0a      	ldr	r2, [pc, #40]	@ (8027500 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80274d6:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80274d8:	480a      	ldr	r0, [pc, #40]	@ (8027504 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 80274da:	f015 f825 	bl	803c528 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 80274de:	2200      	movs	r2, #0
 80274e0:	2104      	movs	r1, #4
 80274e2:	2001      	movs	r0, #1
 80274e4:	f7fa fb47 	bl	8021b76 <osMessageQueueNew>
 80274e8:	4b07      	ldr	r3, [pc, #28]	@ (8027508 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 80274ea:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80274ec:	b918      	cbnz	r0, 80274f6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80274ee:	4b07      	ldr	r3, [pc, #28]	@ (802750c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80274f0:	4a03      	ldr	r2, [pc, #12]	@ (8027500 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80274f2:	212c      	movs	r1, #44	@ 0x2c
 80274f4:	e7f0      	b.n	80274d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80274f6:	bd08      	pop	{r3, pc}
 80274f8:	2000816c 	.word	0x2000816c
 80274fc:	080401af 	.word	0x080401af
 8027500:	080401f8 	.word	0x080401f8
 8027504:	08040227 	.word	0x08040227
 8027508:	20008168 	.word	0x20008168
 802750c:	08040253 	.word	0x08040253

08027510 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8027510:	4b02      	ldr	r3, [pc, #8]	@ (802751c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8027512:	f04f 31ff 	mov.w	r1, #4294967295
 8027516:	6818      	ldr	r0, [r3, #0]
 8027518:	f7fa bad8 	b.w	8021acc <osSemaphoreAcquire>
 802751c:	2000816c 	.word	0x2000816c

08027520 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8027520:	4b01      	ldr	r3, [pc, #4]	@ (8027528 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8027522:	6818      	ldr	r0, [r3, #0]
 8027524:	f7fa bafe 	b.w	8021b24 <osSemaphoreRelease>
 8027528:	2000816c 	.word	0x2000816c

0802752c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 802752c:	4b02      	ldr	r3, [pc, #8]	@ (8027538 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 802752e:	2100      	movs	r1, #0
 8027530:	6818      	ldr	r0, [r3, #0]
 8027532:	f7fa bacb 	b.w	8021acc <osSemaphoreAcquire>
 8027536:	bf00      	nop
 8027538:	2000816c 	.word	0x2000816c

0802753c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 802753c:	f7ff bff0 	b.w	8027520 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08027540 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8027540:	4803      	ldr	r0, [pc, #12]	@ (8027550 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8027542:	4904      	ldr	r1, [pc, #16]	@ (8027554 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8027544:	6800      	ldr	r0, [r0, #0]
 8027546:	2300      	movs	r3, #0
 8027548:	461a      	mov	r2, r3
 802754a:	f7fa bb4f 	b.w	8021bec <osMessageQueuePut>
 802754e:	bf00      	nop
 8027550:	20008168 	.word	0x20008168
 8027554:	200004ec 	.word	0x200004ec

08027558 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8027558:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 802755a:	4c08      	ldr	r4, [pc, #32]	@ (802757c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 802755c:	2300      	movs	r3, #0
 802755e:	461a      	mov	r2, r3
 8027560:	a901      	add	r1, sp, #4
 8027562:	6820      	ldr	r0, [r4, #0]
 8027564:	f7fa fb73 	bl	8021c4e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8027568:	6820      	ldr	r0, [r4, #0]
 802756a:	f04f 33ff 	mov.w	r3, #4294967295
 802756e:	2200      	movs	r2, #0
 8027570:	a901      	add	r1, sp, #4
 8027572:	f7fa fb6c 	bl	8021c4e <osMessageQueueGet>
}
 8027576:	b002      	add	sp, #8
 8027578:	bd10      	pop	{r4, pc}
 802757a:	bf00      	nop
 802757c:	20008168 	.word	0x20008168

08027580 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8027580:	6803      	ldr	r3, [r0, #0]
 8027582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8027584:	4718      	bx	r3

08027586 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8027586:	2001      	movs	r0, #1
 8027588:	4770      	bx	lr

0802758a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 802758a:	6803      	ldr	r3, [r0, #0]
 802758c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802758e:	4718      	bx	r3

08027590 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8027590:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8027594:	4770      	bx	lr
	...

08027598 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8027598:	4b05      	ldr	r3, [pc, #20]	@ (80275b0 <_ZN8STM32DMAD1Ev+0x18>)
 802759a:	6003      	str	r3, [r0, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802759c:	4b05      	ldr	r3, [pc, #20]	@ (80275b4 <_ZN8STM32DMAD1Ev+0x1c>)
 802759e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80275a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80275a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80275aa:	f3bf 8f6f 	isb	sy
}
 80275ae:	4770      	bx	lr
 80275b0:	080420ec 	.word	0x080420ec
 80275b4:	e000e100 	.word	0xe000e100

080275b8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80275b8:	b510      	push	{r4, lr}
 80275ba:	4604      	mov	r4, r0
}
 80275bc:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 80275c0:	f7ff ffea 	bl	8027598 <_ZN8STM32DMAD1Ev>
 80275c4:	4620      	mov	r0, r4
 80275c6:	f014 ff90 	bl	803c4ea <_ZdlPvj>
 80275ca:	4620      	mov	r0, r4
 80275cc:	bd10      	pop	{r4, pc}
	...

080275d0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80275d0:	4b0d      	ldr	r3, [pc, #52]	@ (8027608 <_ZN8STM32DMA10initializeEv+0x38>)
 80275d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80275d4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
{
 80275d8:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80275da:	649a      	str	r2, [r3, #72]	@ 0x48
 80275dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80275de:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80275e2:	9201      	str	r2, [sp, #4]
 80275e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80275e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80275e8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80275ec:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80275ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80275f0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80275f4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80275f6:	4b05      	ldr	r3, [pc, #20]	@ (802760c <_ZN8STM32DMA10initializeEv+0x3c>)
 80275f8:	4a05      	ldr	r2, [pc, #20]	@ (8027610 <_ZN8STM32DMA10initializeEv+0x40>)
 80275fa:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80275fc:	4b05      	ldr	r3, [pc, #20]	@ (8027614 <_ZN8STM32DMA10initializeEv+0x44>)
 80275fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8027602:	609a      	str	r2, [r3, #8]
}
 8027604:	b002      	add	sp, #8
 8027606:	4770      	bx	lr
 8027608:	40021000 	.word	0x40021000
 802760c:	20001b8c 	.word	0x20001b8c
 8027610:	0802785d 	.word	0x0802785d
 8027614:	e000e100 	.word	0xe000e100

08027618 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8027618:	b508      	push	{r3, lr}
    switch (format)
 802761a:	280a      	cmp	r0, #10
 802761c:	d809      	bhi.n	8027632 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 802761e:	e8df f000 	tbb	[pc, r0]
 8027622:	1006      	.short	0x1006
 8027624:	0808080e 	.word	0x0808080e
 8027628:	10101008 	.word	0x10101008
 802762c:	10          	.byte	0x10
 802762d:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 802762e:	2002      	movs	r0, #2
}
 8027630:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8027632:	4b05      	ldr	r3, [pc, #20]	@ (8027648 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8027634:	4a05      	ldr	r2, [pc, #20]	@ (802764c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8027636:	4806      	ldr	r0, [pc, #24]	@ (8027650 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8027638:	2186      	movs	r1, #134	@ 0x86
 802763a:	f014 ff75 	bl	803c528 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 802763e:	2000      	movs	r0, #0
 8027640:	e7f6      	b.n	8027630 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8027642:	2001      	movs	r0, #1
    return dma2dColorMode;
 8027644:	e7f4      	b.n	8027630 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8027646:	bf00      	nop
 8027648:	08040295 	.word	0x08040295
 802764c:	080402b0 	.word	0x080402b0
 8027650:	080402fb 	.word	0x080402fb

08027654 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8027654:	b538      	push	{r3, r4, r5, lr}
 8027656:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8027658:	7f88      	ldrb	r0, [r1, #30]
 802765a:	f7ff ffdd 	bl	8027618 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 802765e:	8aa5      	ldrh	r5, [r4, #20]
 8027660:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8027662:	4b11      	ldr	r3, [pc, #68]	@ (80276a8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8027664:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8027666:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8027668:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 802766c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 802766e:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8027670:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8027672:	1b52      	subs	r2, r2, r5
 8027674:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8027676:	6825      	ldr	r5, [r4, #0]
 8027678:	2d08      	cmp	r5, #8
 802767a:	d10e      	bne.n	802769a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 802767c:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 802767e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8027680:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8027682:	7f20      	ldrb	r0, [r4, #28]
 8027684:	4a09      	ldr	r2, [pc, #36]	@ (80276ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8027686:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 802768a:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 802768c:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 802768e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8027690:	4a07      	ldr	r2, [pc, #28]	@ (80276b0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8027692:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8027694:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8027696:	601a      	str	r2, [r3, #0]
    }
}
 8027698:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 802769a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 802769c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 802769e:	611a      	str	r2, [r3, #16]
 80276a0:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80276a2:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80276a4:	4a03      	ldr	r2, [pc, #12]	@ (80276b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 80276a6:	e7f6      	b.n	8027696 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 80276a8:	4002b000 	.word	0x4002b000
 80276ac:	00010009 	.word	0x00010009
 80276b0:	00020201 	.word	0x00020201
 80276b4:	00030201 	.word	0x00030201

080276b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 80276b8:	b508      	push	{r3, lr}
    switch (format)
 80276ba:	280b      	cmp	r0, #11
 80276bc:	d80b      	bhi.n	80276d6 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 80276be:	e8df f000 	tbb	[pc, r0]
 80276c2:	1206      	.short	0x1206
 80276c4:	0a0a0a10 	.word	0x0a0a0a10
 80276c8:	0808080a 	.word	0x0808080a
 80276cc:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 80276ce:	2002      	movs	r0, #2
}
 80276d0:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 80276d2:	2005      	movs	r0, #5
        break;
 80276d4:	e7fc      	b.n	80276d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 80276d6:	4b05      	ldr	r3, [pc, #20]	@ (80276ec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 80276d8:	4a05      	ldr	r2, [pc, #20]	@ (80276f0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 80276da:	4806      	ldr	r0, [pc, #24]	@ (80276f4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 80276dc:	2165      	movs	r1, #101	@ 0x65
 80276de:	f014 ff23 	bl	803c528 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80276e2:	2000      	movs	r0, #0
 80276e4:	e7f4      	b.n	80276d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 80276e6:	2001      	movs	r0, #1
    return dma2dColorMode;
 80276e8:	e7f2      	b.n	80276d0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 80276ea:	bf00      	nop
 80276ec:	08040295 	.word	0x08040295
 80276f0:	08040325 	.word	0x08040325
 80276f4:	080402fb 	.word	0x080402fb

080276f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 80276f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80276fc:	7f4f      	ldrb	r7, [r1, #29]
{
 80276fe:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8027700:	4638      	mov	r0, r7
 8027702:	f7ff ffd9 	bl	80276b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8027706:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 802770a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 802770c:	4628      	mov	r0, r5
 802770e:	f7ff ffd3 	bl	80276b8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8027712:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8027714:	4628      	mov	r0, r5
 8027716:	f7ff ff7f 	bl	8027618 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 802771a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 802771e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8027722:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8027726:	4b45      	ldr	r3, [pc, #276]	@ (802783c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8027728:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 802772a:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 802772c:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 802772e:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8027730:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8027732:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8027736:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8027738:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802773c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 802773e:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8027742:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8027746:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8027748:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 802774a:	f8d9 4000 	ldr.w	r4, [r9]
 802774e:	f899 201c 	ldrb.w	r2, [r9, #28]
 8027752:	2c80      	cmp	r4, #128	@ 0x80
 8027754:	d022      	beq.n	802779c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8027756:	d80f      	bhi.n	8027778 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8027758:	2c20      	cmp	r4, #32
 802775a:	d066      	beq.n	802782a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 802775c:	2c40      	cmp	r4, #64	@ 0x40
 802775e:	d064      	beq.n	802782a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8027760:	2c04      	cmp	r4, #4
 8027762:	d05c      	beq.n	802781e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8027764:	4b35      	ldr	r3, [pc, #212]	@ (802783c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8027766:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 802776a:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 802776e:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8027770:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8027772:	d060      	beq.n	8027836 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8027774:	4a32      	ldr	r2, [pc, #200]	@ (8027840 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8027776:	e03f      	b.n	80277f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8027778:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 802777c:	d004      	beq.n	8027788 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 802777e:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8027782:	d1ef      	bne.n	8027764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8027784:	482f      	ldr	r0, [pc, #188]	@ (8027844 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8027786:	e000      	b.n	802778a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8027788:	482f      	ldr	r0, [pc, #188]	@ (8027848 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 802778a:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 802778e:	61da      	str	r2, [r3, #28]
 8027790:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8027794:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8027796:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8027798:	6159      	str	r1, [r3, #20]
 802779a:	e02c      	b.n	80277f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 802779c:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80277a0:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80277a4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80277a8:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80277aa:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80277ac:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80277ae:	1d21      	adds	r1, r4, #4
 80277b0:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 80277b2:	7821      	ldrb	r1, [r4, #0]
 80277b4:	b141      	cbz	r1, 80277c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80277b6:	2901      	cmp	r1, #1
 80277b8:	d021      	beq.n	80277fe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 80277ba:	4b24      	ldr	r3, [pc, #144]	@ (802784c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 80277bc:	4a24      	ldr	r2, [pc, #144]	@ (8027850 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 80277be:	4825      	ldr	r0, [pc, #148]	@ (8027854 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 80277c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80277c4:	f014 feb0 	bl	803c528 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80277c8:	69da      	ldr	r2, [r3, #28]
 80277ca:	8861      	ldrh	r1, [r4, #2]
 80277cc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80277d0:	3901      	subs	r1, #1
 80277d2:	f022 0210 	bic.w	r2, r2, #16
 80277d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80277da:	61da      	str	r2, [r3, #28]
            bool blend = true;
 80277dc:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80277de:	4b17      	ldr	r3, [pc, #92]	@ (802783c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80277e0:	69d9      	ldr	r1, [r3, #28]
 80277e2:	f041 0120 	orr.w	r1, r1, #32
 80277e6:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80277e8:	69d9      	ldr	r1, [r3, #28]
 80277ea:	0689      	lsls	r1, r1, #26
 80277ec:	d4fc      	bmi.n	80277e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80277ee:	2110      	movs	r1, #16
 80277f0:	6099      	str	r1, [r3, #8]
            if (blend)
 80277f2:	2a00      	cmp	r2, #0
 80277f4:	d0be      	beq.n	8027774 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80277f6:	4a18      	ldr	r2, [pc, #96]	@ (8027858 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80277f8:	601a      	str	r2, [r3, #0]
}
 80277fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80277fe:	69d9      	ldr	r1, [r3, #28]
 8027800:	8860      	ldrh	r0, [r4, #2]
 8027802:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
 8027806:	3801      	subs	r0, #1
 8027808:	f021 0110 	bic.w	r1, r1, #16
 802780c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
                if (blitOp.alpha == 255)
 8027810:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8027812:	f041 0110 	orr.w	r1, r1, #16
                if (blitOp.alpha == 255)
 8027816:	bf18      	it	ne
 8027818:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 802781a:	61d9      	str	r1, [r3, #28]
                break;
 802781c:	e7df      	b.n	80277de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 802781e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8027822:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8027826:	61da      	str	r2, [r3, #28]
 8027828:	e7b5      	b.n	8027796 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 802782a:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 802782e:	4b03      	ldr	r3, [pc, #12]	@ (802783c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8027830:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8027834:	e7f7      	b.n	8027826 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8027836:	f240 2201 	movw	r2, #513	@ 0x201
 802783a:	e7dd      	b.n	80277f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 802783c:	4002b000 	.word	0x4002b000
 8027840:	00010201 	.word	0x00010201
 8027844:	00020009 	.word	0x00020009
 8027848:	0002000a 	.word	0x0002000a
 802784c:	0804036f 	.word	0x0804036f
 8027850:	08040389 	.word	0x08040389
 8027854:	080402fb 	.word	0x080402fb
 8027858:	00020201 	.word	0x00020201

0802785c <DMA2D_XferCpltCallback>:
 802785c:	4b02      	ldr	r3, [pc, #8]	@ (8027868 <DMA2D_XferCpltCallback+0xc>)
 802785e:	681b      	ldr	r3, [r3, #0]
 8027860:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8027862:	6803      	ldr	r3, [r0, #0]
 8027864:	695b      	ldr	r3, [r3, #20]
 8027866:	4718      	bx	r3
 8027868:	2000b8e0 	.word	0x2000b8e0

0802786c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 802786c:	b570      	push	{r4, r5, r6, lr}
 802786e:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8027870:	4625      	mov	r5, r4
 8027872:	4b0a      	ldr	r3, [pc, #40]	@ (802789c <_ZN8STM32DMAC1Ev+0x30>)
 8027874:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8027876:	2600      	movs	r6, #0
 8027878:	6060      	str	r0, [r4, #4]
 802787a:	7226      	strb	r6, [r4, #8]
 802787c:	7266      	strb	r6, [r4, #9]
 802787e:	f845 3b20 	str.w	r3, [r5], #32
 8027882:	2260      	movs	r2, #96	@ 0x60
 8027884:	4629      	mov	r1, r5
 8027886:	f00b fd9f 	bl	80333c8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 802788a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 802788e:	60ee      	str	r6, [r5, #12]
 8027890:	3524      	adds	r5, #36	@ 0x24
 8027892:	429d      	cmp	r5, r3
 8027894:	d1fb      	bne.n	802788e <_ZN8STM32DMAC1Ev+0x22>
}
 8027896:	4620      	mov	r0, r4
 8027898:	bd70      	pop	{r4, r5, r6, pc}
 802789a:	bf00      	nop
 802789c:	080420ec 	.word	0x080420ec

080278a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80278a0:	2001      	movs	r0, #1
 80278a2:	4770      	bx	lr

080278a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80278a4:	200c      	movs	r0, #12
 80278a6:	4770      	bx	lr

080278a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80278a8:	230c      	movs	r3, #12
 80278aa:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80278ae:	3008      	adds	r0, #8
 80278b0:	4770      	bx	lr

080278b2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80278b2:	230c      	movs	r3, #12
 80278b4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80278b8:	3008      	adds	r0, #8
 80278ba:	4770      	bx	lr

080278bc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80278bc:	2001      	movs	r0, #1
 80278be:	4770      	bx	lr

080278c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80278c0:	f640 3044 	movw	r0, #2884	@ 0xb44
 80278c4:	4770      	bx	lr

080278c6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80278c6:	f640 3344 	movw	r3, #2884	@ 0xb44
 80278ca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80278ce:	3008      	adds	r0, #8
 80278d0:	4770      	bx	lr

080278d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80278d2:	f640 3344 	movw	r3, #2884	@ 0xb44
 80278d6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80278da:	3008      	adds	r0, #8
 80278dc:	4770      	bx	lr

080278de <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80278de:	2001      	movs	r0, #1
 80278e0:	4770      	bx	lr

080278e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80278e2:	2014      	movs	r0, #20
 80278e4:	4770      	bx	lr

080278e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80278e6:	2314      	movs	r3, #20
 80278e8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80278ec:	3008      	adds	r0, #8
 80278ee:	4770      	bx	lr

080278f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80278f0:	2314      	movs	r3, #20
 80278f2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80278f6:	3008      	adds	r0, #8
 80278f8:	4770      	bx	lr

080278fa <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreenTestHomeScreenNoTransition();
 80278fa:	4608      	mov	r0, r1
 80278fc:	f000 bbca 	b.w	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>

08027900 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8027900:	b510      	push	{r4, lr}
 8027902:	4b03      	ldr	r3, [pc, #12]	@ (8027910 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8027904:	6003      	str	r3, [r0, #0]
 8027906:	4604      	mov	r4, r0
 8027908:	f00a fe68 	bl	80325dc <_ZN8touchgfx17AbstractPartitionD1Ev>
 802790c:	4620      	mov	r0, r4
 802790e:	bd10      	pop	{r4, pc}
 8027910:	080421a4 	.word	0x080421a4

08027914 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8027914:	b510      	push	{r4, lr}
 8027916:	4604      	mov	r4, r0
 8027918:	f7ff fff2 	bl	8027900 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 802791c:	4620      	mov	r0, r4
 802791e:	2114      	movs	r1, #20
 8027920:	f014 fde3 	bl	803c4ea <_ZdlPvj>
 8027924:	4620      	mov	r0, r4
 8027926:	bd10      	pop	{r4, pc}

08027928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8027928:	b510      	push	{r4, lr}
 802792a:	4b03      	ldr	r3, [pc, #12]	@ (8027938 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 802792c:	6003      	str	r3, [r0, #0]
 802792e:	4604      	mov	r4, r0
 8027930:	f00a fe54 	bl	80325dc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8027934:	4620      	mov	r0, r4
 8027936:	bd10      	pop	{r4, pc}
 8027938:	08042170 	.word	0x08042170

0802793c <_ZN8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 802793c:	b510      	push	{r4, lr}
 802793e:	4604      	mov	r4, r0
 8027940:	f7ff fff2 	bl	8027928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8027944:	4620      	mov	r0, r4
 8027946:	f640 314c 	movw	r1, #2892	@ 0xb4c
 802794a:	f014 fdce 	bl	803c4ea <_ZdlPvj>
 802794e:	4620      	mov	r0, r4
 8027950:	bd10      	pop	{r4, pc}
	...

08027954 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8027954:	b510      	push	{r4, lr}
 8027956:	4b03      	ldr	r3, [pc, #12]	@ (8027964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8027958:	6003      	str	r3, [r0, #0]
 802795a:	4604      	mov	r4, r0
 802795c:	f00a fe3e 	bl	80325dc <_ZN8touchgfx17AbstractPartitionD1Ev>
 8027960:	4620      	mov	r0, r4
 8027962:	bd10      	pop	{r4, pc}
 8027964:	0804213c 	.word	0x0804213c

08027968 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8027968:	b510      	push	{r4, lr}
 802796a:	4604      	mov	r4, r0
 802796c:	f7ff fff2 	bl	8027954 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8027970:	4620      	mov	r0, r4
 8027972:	211c      	movs	r1, #28
 8027974:	f014 fdb9 	bl	803c4ea <_ZdlPvj>
 8027978:	4620      	mov	r0, r4
 802797a:	bd10      	pop	{r4, pc}

0802797c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 802797c:	b510      	push	{r4, lr}
 802797e:	4b08      	ldr	r3, [pc, #32]	@ (80279a0 <_ZN12FrontendHeapD1Ev+0x24>)
 8027980:	6003      	str	r3, [r0, #0]
 8027982:	4604      	mov	r4, r0
 8027984:	f600 307c 	addw	r0, r0, #2940	@ 0xb7c
 8027988:	f7ff ffba 	bl	8027900 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 802798c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8027990:	f7ff ffca 	bl	8027928 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17ScreenTrailerViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8027994:	f104 0014 	add.w	r0, r4, #20
 8027998:	f7ff ffdc 	bl	8027954 <_ZN8touchgfx9PartitionINS_4meta8TypeListI22PasswordEntryPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 802799c:	4620      	mov	r0, r4
 802799e:	bd10      	pop	{r4, pc}
 80279a0:	080421d8 	.word	0x080421d8

080279a4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80279a4:	b508      	push	{r3, lr}
 80279a6:	4802      	ldr	r0, [pc, #8]	@ (80279b0 <__tcf_0+0xc>)
 80279a8:	f7ff ffe8 	bl	802797c <_ZN12FrontendHeapD1Ev>
 80279ac:	bd08      	pop	{r3, pc}
 80279ae:	bf00      	nop
 80279b0:	20009000 	.word	0x20009000

080279b4 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80279b4:	b510      	push	{r4, lr}
 80279b6:	4604      	mov	r4, r0
 80279b8:	f7ff ffe0 	bl	802797c <_ZN12FrontendHeapD1Ev>
 80279bc:	4620      	mov	r0, r4
 80279be:	f640 513c 	movw	r1, #3388	@ 0xd3c
 80279c2:	f014 fd92 	bl	803c4ea <_ZdlPvj>
 80279c6:	4620      	mov	r0, r4
 80279c8:	bd10      	pop	{r4, pc}
	...

080279cc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 320, 240);

void touchgfx_init()
{
 80279cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80279d0:	f005 f9b8 	bl	802cd44 <_ZN14BitmapDatabase11getInstanceEv>
 80279d4:	4605      	mov	r5, r0
 80279d6:	f005 f9b9 	bl	802cd4c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80279da:	2400      	movs	r4, #0
 80279dc:	4601      	mov	r1, r0
 80279de:	4623      	mov	r3, r4
 80279e0:	4628      	mov	r0, r5
 80279e2:	4622      	mov	r2, r4
 80279e4:	9400      	str	r4, [sp, #0]
 80279e6:	f010 fb99 	bl	803811c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80279ea:	4b25      	ldr	r3, [pc, #148]	@ (8027a80 <touchgfx_init+0xb4>)
 80279ec:	4a25      	ldr	r2, [pc, #148]	@ (8027a84 <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 80279ee:	4d26      	ldr	r5, [pc, #152]	@ (8027a88 <touchgfx_init+0xbc>)
 80279f0:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80279f2:	4620      	mov	r0, r4
 80279f4:	f005 fa22 	bl	802ce3c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80279f8:	4824      	ldr	r0, [pc, #144]	@ (8027a8c <touchgfx_init+0xc0>)
 80279fa:	f010 fa47 	bl	8037e8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80279fe:	682b      	ldr	r3, [r5, #0]
 8027a00:	f3bf 8f5b 	dmb	ish
 8027a04:	07db      	lsls	r3, r3, #31
 8027a06:	d435      	bmi.n	8027a74 <touchgfx_init+0xa8>
 8027a08:	4628      	mov	r0, r5
 8027a0a:	f7f0 faf1 	bl	8017ff0 <__cxa_guard_acquire>
 8027a0e:	b388      	cbz	r0, 8027a74 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8027a10:	4c1f      	ldr	r4, [pc, #124]	@ (8027a90 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8027a12:	4b20      	ldr	r3, [pc, #128]	@ (8027a94 <touchgfx_init+0xc8>)
 8027a14:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8027a16:	f504 663e 	add.w	r6, r4, #3040	@ 0xbe0
        : presenterStorage(pres),
 8027a1a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8027a1e:	f104 0830 	add.w	r8, r4, #48	@ 0x30
          transitionStorage(tra),
 8027a22:	f604 377c 	addw	r7, r4, #2940	@ 0xb7c
        : presenterStorage(pres),
 8027a26:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8027a28:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8027a2c:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8027a2e:	6126      	str	r6, [r4, #16]
 8027a30:	f00a fdd6 	bl	80325e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8027a34:	4b18      	ldr	r3, [pc, #96]	@ (8027a98 <touchgfx_init+0xcc>)
 8027a36:	6163      	str	r3, [r4, #20]
 8027a38:	4640      	mov	r0, r8
 8027a3a:	f00a fdd1 	bl	80325e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8027a3e:	4b17      	ldr	r3, [pc, #92]	@ (8027a9c <touchgfx_init+0xd0>)
 8027a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8027a42:	4638      	mov	r0, r7
 8027a44:	f00a fdcc 	bl	80325e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8027a48:	4b15      	ldr	r3, [pc, #84]	@ (8027aa0 <touchgfx_init+0xd4>)
 8027a4a:	f8c4 3b7c 	str.w	r3, [r4, #2940]	@ 0xb7c
 8027a4e:	f504 6039 	add.w	r0, r4, #2960	@ 0xb90
 8027a52:	f006 fa6a 	bl	802df2a <_ZN5ModelC1Ev>
 8027a56:	4622      	mov	r2, r4
 8027a58:	f504 6139 	add.w	r1, r4, #2960	@ 0xb90
 8027a5c:	4630      	mov	r0, r6
 8027a5e:	f005 fa5d 	bl	802cf1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8027a62:	4630      	mov	r0, r6
 8027a64:	f000 fb16 	bl	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
        static FrontendHeap instance;
 8027a68:	480e      	ldr	r0, [pc, #56]	@ (8027aa4 <touchgfx_init+0xd8>)
 8027a6a:	f014 fd7b 	bl	803c564 <atexit>
 8027a6e:	4628      	mov	r0, r5
 8027a70:	f7f0 fafa 	bl	8018068 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8027a74:	480c      	ldr	r0, [pc, #48]	@ (8027aa8 <touchgfx_init+0xdc>)
}
 8027a76:	b002      	add	sp, #8
 8027a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8027a7c:	f7ff bbbe 	b.w	80271fc <_ZN11TouchGFXHAL10initializeEv>
 8027a80:	2000b93c 	.word	0x2000b93c
 8027a84:	200081f0 	.word	0x200081f0
 8027a88:	20008ffc 	.word	0x20008ffc
 8027a8c:	200004f0 	.word	0x200004f0
 8027a90:	20009000 	.word	0x20009000
 8027a94:	080421d8 	.word	0x080421d8
 8027a98:	0804213c 	.word	0x0804213c
 8027a9c:	08042170 	.word	0x08042170
 8027aa0:	080421a4 	.word	0x080421a4
 8027aa4:	080279a5 	.word	0x080279a5
 8027aa8:	20008170 	.word	0x20008170

08027aac <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8027aac:	4770      	bx	lr
	...

08027ab0 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8027ab0:	4801      	ldr	r0, [pc, #4]	@ (8027ab8 <touchgfx_taskEntry+0x8>)
 8027ab2:	f00a be12 	b.w	80326da <_ZN8touchgfx3HAL9taskEntryEv>
 8027ab6:	bf00      	nop
 8027ab8:	20008170 	.word	0x20008170

08027abc <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8027abc:	4801      	ldr	r0, [pc, #4]	@ (8027ac4 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8027abe:	f7ff bd6b 	b.w	8027598 <_ZN8STM32DMAD1Ev>
 8027ac2:	bf00      	nop
 8027ac4:	20008258 	.word	0x20008258

08027ac8 <_GLOBAL__sub_I_touchgfx_init>:
}
 8027ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
static STM32DMA dma;
 8027aca:	4d26      	ldr	r5, [pc, #152]	@ (8027b64 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
{
public:

    STM32TouchController() {}
 8027acc:	4e26      	ldr	r6, [pc, #152]	@ (8027b68 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static LCD24bpp display;
 8027ace:	4f27      	ldr	r7, [pc, #156]	@ (8027b6c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8027ad0:	4b27      	ldr	r3, [pc, #156]	@ (8027b70 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
        : dma(dmaInterface),
 8027ad2:	4c28      	ldr	r4, [pc, #160]	@ (8027b74 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8027ad4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8027ad6:	4628      	mov	r0, r5
 8027ad8:	f7ff fec8 	bl	802786c <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8027adc:	4638      	mov	r0, r7
 8027ade:	f011 fd7b 	bl	80395d8 <_ZN8touchgfx8LCD24bppC1Ev>
          mcuInstrumentation(0),
 8027ae2:	2300      	movs	r3, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8027ae4:	f44f 7280 	mov.w	r2, #256	@ 0x100
          auxiliaryLCD(0),
 8027ae8:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
          touchSampleRate(1),
 8027aec:	4a22      	ldr	r2, [pc, #136]	@ (8027b78 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8027aee:	4923      	ldr	r1, [pc, #140]	@ (8027b7c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8027af0:	8623      	strh	r3, [r4, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8027af2:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8027af6:	4a22      	ldr	r2, [pc, #136]	@ (8027b80 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 8027af8:	67a2      	str	r2, [r4, #120]	@ 0x78
        instance = this;
 8027afa:	4a22      	ldr	r2, [pc, #136]	@ (8027b84 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          useAuxiliaryLCD(false),
 8027afc:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
        instance = this;
 8027b00:	6014      	str	r4, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8027b02:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8027b06:	800a      	strh	r2, [r1, #0]
 8027b08:	491f      	ldr	r1, [pc, #124]	@ (8027b88 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastY(0),
 8027b0a:	6663      	str	r3, [r4, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8027b0c:	800a      	strh	r2, [r1, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8027b0e:	491f      	ldr	r1, [pc, #124]	@ (8027b8c <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          updateMCULoad(0),
 8027b10:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8027b14:	22f0      	movs	r2, #240	@ 0xf0
          buttonController(0),
 8027b16:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8027b1a:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8027b1e:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8027b22:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
          frameBuffer0(0),
 8027b26:	e9c4 330e 	strd	r3, r3, [r4, #56]	@ 0x38
          frameBuffer2(0),
 8027b2a:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8027b2e:	e9c4 3314 	strd	r3, r3, [r4, #80]	@ 0x50
          lastX(0),
 8027b32:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
          cc_begin(0),
 8027b36:	6763      	str	r3, [r4, #116]	@ 0x74
          lcdRef(display),
 8027b38:	e9c4 5701 	strd	r5, r7, [r4, #4]
          touchController(touchCtrl),
 8027b3c:	60e6      	str	r6, [r4, #12]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8027b3e:	800a      	strh	r2, [r1, #0]
 8027b40:	4913      	ldr	r1, [pc, #76]	@ (8027b90 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8027b42:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8027b46:	800a      	strh	r2, [r1, #0]
        DISPLAY_ROTATION = rotate0;
 8027b48:	4a12      	ldr	r2, [pc, #72]	@ (8027b94 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height),
	usesDMA2D(dma.getBlitCaps() != 0)
 8027b4a:	4628      	mov	r0, r5
 8027b4c:	7013      	strb	r3, [r2, #0]
 8027b4e:	4b12      	ldr	r3, [pc, #72]	@ (8027b98 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 8027b50:	6023      	str	r3, [r4, #0]
 8027b52:	f7ff fd1d 	bl	8027590 <_ZN8STM32DMA11getBlitCapsEv>
 8027b56:	3800      	subs	r0, #0
 8027b58:	bf18      	it	ne
 8027b5a:	2001      	movne	r0, #1
 8027b5c:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
}
 8027b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027b62:	bf00      	nop
 8027b64:	20008258 	.word	0x20008258
 8027b68:	20008ff8 	.word	0x20008ff8
 8027b6c:	200081f4 	.word	0x200081f4
 8027b70:	08041ffc 	.word	0x08041ffc
 8027b74:	20008170 	.word	0x20008170
 8027b78:	01000001 	.word	0x01000001
 8027b7c:	2000b8d4 	.word	0x2000b8d4
 8027b80:	01010000 	.word	0x01010000
 8027b84:	2000b8e0 	.word	0x2000b8e0
 8027b88:	2000b8da 	.word	0x2000b8da
 8027b8c:	2000b8d6 	.word	0x2000b8d6
 8027b90:	2000b8dc 	.word	0x2000b8dc
 8027b94:	2000b8d8 	.word	0x2000b8d8
 8027b98:	08042014 	.word	0x08042014

08027b9c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027b9c:	4b03      	ldr	r3, [pc, #12]	@ (8027bac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8027b9e:	2290      	movs	r2, #144	@ 0x90
 8027ba0:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 8027ba4:	f883 235b 	strb.w	r2, [r3, #859]	@ 0x35b

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8027ba8:	4770      	bx	lr
 8027baa:	bf00      	nop
 8027bac:	e000e100 	.word	0xe000e100

08027bb0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8027bb0:	4a09      	ldr	r2, [pc, #36]	@ (8027bd8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8027bb2:	490a      	ldr	r1, [pc, #40]	@ (8027bdc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8027bb4:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8027bb6:	480a      	ldr	r0, [pc, #40]	@ (8027be0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8027bb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8027bbc:	3b01      	subs	r3, #1
 8027bbe:	b29b      	uxth	r3, r3
 8027bc0:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8027bc2:	6911      	ldr	r1, [r2, #16]
 8027bc4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8027bc8:	3901      	subs	r1, #1
 8027bca:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8027bcc:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8027bce:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8027bd0:	f043 0301 	orr.w	r3, r3, #1
 8027bd4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8027bd6:	4770      	bx	lr
 8027bd8:	40016800 	.word	0x40016800
 8027bdc:	20009d3e 	.word	0x20009d3e
 8027be0:	20009d3c 	.word	0x20009d3c

08027be4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8027be4:	4b01      	ldr	r3, [pc, #4]	@ (8027bec <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8027be6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8027bea:	4770      	bx	lr
 8027bec:	40016800 	.word	0x40016800

08027bf0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8027bf0:	4b02      	ldr	r3, [pc, #8]	@ (8027bfc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8027bf2:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8027bf4:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8027bf8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8027bfa:	4770      	bx	lr
 8027bfc:	40016800 	.word	0x40016800

08027c00 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8027c00:	b570      	push	{r4, r5, r6, lr}
 8027c02:	4604      	mov	r4, r0
    HAL::initialize();
 8027c04:	f00a fd55 	bl	80326b2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8027c08:	6823      	ldr	r3, [r4, #0]
 8027c0a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8027c0c:	f00d f87e 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 8027c10:	4601      	mov	r1, r0
 8027c12:	4620      	mov	r0, r4
 8027c14:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8027c16:	6823      	ldr	r3, [r4, #0]
 8027c18:	4a05      	ldr	r2, [pc, #20]	@ (8027c30 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8027c1a:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8027c1e:	4620      	mov	r0, r4
 8027c20:	46ac      	mov	ip, r5
 8027c22:	2300      	movs	r3, #0
}
 8027c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8027c28:	f5a2 3161 	sub.w	r1, r2, #230400	@ 0x38400
 8027c2c:	4760      	bx	ip
 8027c2e:	bf00      	nop
 8027c30:	20046070 	.word	0x20046070

08027c34 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8027c34:	f00a bd24 	b.w	8032680 <_ZN8touchgfx3HAL10beginFrameEv>

08027c38 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    HAL::endFrame();
 8027c38:	f00a bd2e 	b.w	8032698 <_ZN8touchgfx3HAL8endFrameEv>

08027c3c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8027c3c:	f00a bce9 	b.w	8032612 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08027c40 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8027c40:	f00a be59 	b.w	80328f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08027c44 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027c44:	4b08      	ldr	r3, [pc, #32]	@ (8027c68 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8027c46:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8027c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8027c4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8027c52:	f3bf 8f6f 	isb	sy
 8027c56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8027c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8027c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8027c62:	f3bf 8f6f 	isb	sy
}
 8027c66:	4770      	bx	lr
 8027c68:	e000e100 	.word	0xe000e100

08027c6c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8027c6c:	4b03      	ldr	r3, [pc, #12]	@ (8027c7c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8027c6e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8027c72:	609a      	str	r2, [r3, #8]
 8027c74:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8027c78:	609a      	str	r2, [r3, #8]
}
 8027c7a:	4770      	bx	lr
 8027c7c:	e000e100 	.word	0xe000e100

08027c80 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8027c80:	b510      	push	{r4, lr}
        return instance;
 8027c82:	4c14      	ldr	r4, [pc, #80]	@ (8027cd4 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 8027c84:	6823      	ldr	r3, [r4, #0]
 8027c86:	b323      	cbz	r3, 8027cd2 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8027c88:	4b13      	ldr	r3, [pc, #76]	@ (8027cd8 <HAL_LTDC_LineEventCallback+0x58>)
 8027c8a:	4a14      	ldr	r2, [pc, #80]	@ (8027cdc <HAL_LTDC_LineEventCallback+0x5c>)
 8027c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8027c8e:	8811      	ldrh	r1, [r2, #0]
 8027c90:	428b      	cmp	r3, r1
 8027c92:	d113      	bne.n	8027cbc <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8027c94:	4b12      	ldr	r3, [pc, #72]	@ (8027ce0 <HAL_LTDC_LineEventCallback+0x60>)
 8027c96:	8819      	ldrh	r1, [r3, #0]
 8027c98:	f7f2 fec8 	bl	801aa2c <HAL_LTDC_ProgramLineEvent>
 8027c9c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8027c9e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8027ca2:	3301      	adds	r3, #1
 8027ca4:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8027ca8:	f7ff fc4a 	bl	8027540 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8027cac:	6820      	ldr	r0, [r4, #0]
 8027cae:	f00b fa4d 	bl	803314c <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8027cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8027cb6:	2000      	movs	r0, #0
 8027cb8:	f7ff ba72 	b.w	80271a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8027cbc:	f7f2 feb6 	bl	801aa2c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8027cc0:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8027cc2:	6803      	ldr	r3, [r0, #0]
 8027cc4:	6a1b      	ldr	r3, [r3, #32]
 8027cc6:	4798      	blx	r3
    }
 8027cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8027ccc:	2000      	movs	r0, #0
 8027cce:	f7ff ba68 	b.w	80271a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8027cd2:	bd10      	pop	{r4, pc}
 8027cd4:	2000b8e0 	.word	0x2000b8e0
 8027cd8:	40016800 	.word	0x40016800
 8027cdc:	20009d3e 	.word	0x20009d3e
 8027ce0:	20009d3c 	.word	0x20009d3c

08027ce4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 0;     // times_10_4bpp
    static const touchgfx::FontId GEMUNU_20 = 1; // GemunuLibre_Regular_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8027ce4:	4770      	bx	lr

08027ce6 <_ZN23ApplicationFontProviderD0Ev>:
 8027ce6:	b510      	push	{r4, lr}
 8027ce8:	2104      	movs	r1, #4
 8027cea:	4604      	mov	r4, r0
 8027cec:	f014 fbfd 	bl	803c4ea <_ZdlPvj>
 8027cf0:	4620      	mov	r0, r4
 8027cf2:	bd10      	pop	{r4, pc}

08027cf4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8027cf4:	b508      	push	{r3, lr}
    switch (typography)
 8027cf6:	b119      	cbz	r1, 8027d00 <_ZN23ApplicationFontProvider7getFontEt+0xc>
 8027cf8:	2901      	cmp	r1, #1
 8027cfa:	d005      	beq.n	8027d08 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8027cfc:	2000      	movs	r0, #0
        // GemunuLibre_Regular_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
    default:
        return 0;
    }
}
 8027cfe:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8027d00:	f005 f8e8 	bl	802ced4 <_ZN17TypedTextDatabase8getFontsEv>
 8027d04:	6800      	ldr	r0, [r0, #0]
 8027d06:	e7fa      	b.n	8027cfe <_ZN23ApplicationFontProvider7getFontEt+0xa>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8027d08:	f005 f8e4 	bl	802ced4 <_ZN17TypedTextDatabase8getFontsEv>
 8027d0c:	6840      	ldr	r0, [r0, #4]
 8027d0e:	e7f6      	b.n	8027cfe <_ZN23ApplicationFontProvider7getFontEt+0xa>

08027d10 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8027d10:	b513      	push	{r0, r1, r4, lr}
 8027d12:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8027d14:	b151      	cbz	r1, 8027d2c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8027d16:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 8027d18:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8027d1a:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8027d1e:	aa01      	add	r2, sp, #4
 8027d20:	689c      	ldr	r4, [r3, #8]
 8027d22:	f10d 0303 	add.w	r3, sp, #3
 8027d26:	47a0      	blx	r4
        return glyph;
    }
 8027d28:	b002      	add	sp, #8
 8027d2a:	bd10      	pop	{r4, pc}
            return 0;
 8027d2c:	4608      	mov	r0, r1
 8027d2e:	e7fb      	b.n	8027d28 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08027d30 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8027d30:	89c0      	ldrh	r0, [r0, #14]
 8027d32:	4770      	bx	lr

08027d34 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8027d34:	8a00      	ldrh	r0, [r0, #16]
 8027d36:	4770      	bx	lr

08027d38 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8027d38:	88c0      	ldrh	r0, [r0, #6]
 8027d3a:	4770      	bx	lr

08027d3c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8027d3c:	8880      	ldrh	r0, [r0, #4]
 8027d3e:	4770      	bx	lr

08027d40 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8027d40:	7a80      	ldrb	r0, [r0, #10]
    }
 8027d42:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8027d46:	4770      	bx	lr

08027d48 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8027d48:	7a80      	ldrb	r0, [r0, #10]
    }
 8027d4a:	09c0      	lsrs	r0, r0, #7
 8027d4c:	4770      	bx	lr

08027d4e <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8027d4e:	4770      	bx	lr

08027d50 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8027d50:	b510      	push	{r4, lr}
    }
 8027d52:	2108      	movs	r1, #8
    virtual ~TypedText()
 8027d54:	4604      	mov	r4, r0
    }
 8027d56:	f014 fbc8 	bl	803c4ea <_ZdlPvj>
 8027d5a:	4620      	mov	r0, r4
 8027d5c:	bd10      	pop	{r4, pc}

08027d5e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8027d5e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8027d60:	4770      	bx	lr

08027d62 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8027d62:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8027d64:	4770      	bx	lr

08027d66 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8027d66:	4770      	bx	lr

08027d68 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8027d68:	888b      	ldrh	r3, [r1, #4]
 8027d6a:	69c0      	ldr	r0, [r0, #28]
 8027d6c:	680a      	ldr	r2, [r1, #0]
 8027d6e:	0adb      	lsrs	r3, r3, #11
 8027d70:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8027d74:	4410      	add	r0, r2
 8027d76:	4770      	bx	lr

08027d78 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8027d78:	b510      	push	{r4, lr}
 8027d7a:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8027d7c:	b1ba      	cbz	r2, 8027dae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8027d7e:	7b10      	ldrb	r0, [r2, #12]
 8027d80:	b168      	cbz	r0, 8027d9e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8027d82:	7b53      	ldrb	r3, [r2, #13]
 8027d84:	7ad2      	ldrb	r2, [r2, #11]
 8027d86:	021b      	lsls	r3, r3, #8
 8027d88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8027d8c:	431a      	orrs	r2, r3
 8027d8e:	6a23      	ldr	r3, [r4, #32]
 8027d90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8027d94:	881a      	ldrh	r2, [r3, #0]
 8027d96:	428a      	cmp	r2, r1
 8027d98:	d102      	bne.n	8027da0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8027d9a:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8027d9e:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8027da0:	d805      	bhi.n	8027dae <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8027da2:	3801      	subs	r0, #1
 8027da4:	b280      	uxth	r0, r0
 8027da6:	3304      	adds	r3, #4
 8027da8:	2800      	cmp	r0, #0
 8027daa:	d1f3      	bne.n	8027d94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8027dac:	e7f7      	b.n	8027d9e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8027dae:	2000      	movs	r0, #0
 8027db0:	e7f5      	b.n	8027d9e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08027db2 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8027db2:	b510      	push	{r4, lr}
 8027db4:	212c      	movs	r1, #44	@ 0x2c
 8027db6:	4604      	mov	r4, r0
 8027db8:	f014 fb97 	bl	803c4ea <_ZdlPvj>
 8027dbc:	4620      	mov	r0, r4
 8027dbe:	bd10      	pop	{r4, pc}

08027dc0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8027dc0:	b530      	push	{r4, r5, lr}
 8027dc2:	b08b      	sub	sp, #44	@ 0x2c
 8027dc4:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8027dc6:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8027dca:	9508      	str	r5, [sp, #32]
 8027dcc:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8027dd0:	9507      	str	r5, [sp, #28]
 8027dd2:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8027dd6:	9506      	str	r5, [sp, #24]
 8027dd8:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8027ddc:	9505      	str	r5, [sp, #20]
 8027dde:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8027de2:	9504      	str	r5, [sp, #16]
 8027de4:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8027de8:	9503      	str	r5, [sp, #12]
 8027dea:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8027dee:	9502      	str	r5, [sp, #8]
 8027df0:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8027df4:	9501      	str	r5, [sp, #4]
 8027df6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8027dfa:	9500      	str	r5, [sp, #0]
 8027dfc:	f00e f8f4 	bl	8035fe8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8027e00:	4b06      	ldr	r3, [pc, #24]	@ (8027e1c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 8027e02:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8027e04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027e06:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8027e08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027e0a:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8027e0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8027e0e:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8027e10:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8027e12:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8027e14:	4620      	mov	r0, r4
 8027e16:	b00b      	add	sp, #44	@ 0x2c
 8027e18:	bd30      	pop	{r4, r5, pc}
 8027e1a:	bf00      	nop
 8027e1c:	08042210 	.word	0x08042210

08027e20 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_GemunuLibre_Regular_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_GemunuLibre_Regular_20_4bpp();

touchgfx::GeneratedFont& getFont_GemunuLibre_Regular_20_4bpp()
{
    static touchgfx::GeneratedFont GemunuLibre_Regular_20_4bpp(glyphs_GemunuLibre_Regular_20_4bpp, 74, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_GemunuLibre_Regular_20_4bpp, kerning_GemunuLibre_Regular_20_4bpp, 63, 0, 0, 0);
 8027e20:	4770      	bx	lr
	...

08027e24 <_Z35getFont_GemunuLibre_Regular_20_4bppv>:
{
 8027e24:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont GemunuLibre_Regular_20_4bpp(glyphs_GemunuLibre_Regular_20_4bpp, 74, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_GemunuLibre_Regular_20_4bpp, kerning_GemunuLibre_Regular_20_4bpp, 63, 0, 0, 0);
 8027e26:	4d17      	ldr	r5, [pc, #92]	@ (8027e84 <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x60>)
 8027e28:	682c      	ldr	r4, [r5, #0]
 8027e2a:	f014 0401 	ands.w	r4, r4, #1
{
 8027e2e:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont GemunuLibre_Regular_20_4bpp(glyphs_GemunuLibre_Regular_20_4bpp, 74, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_GemunuLibre_Regular_20_4bpp, kerning_GemunuLibre_Regular_20_4bpp, 63, 0, 0, 0);
 8027e30:	f3bf 8f5b 	dmb	ish
 8027e34:	d122      	bne.n	8027e7c <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x58>
 8027e36:	4628      	mov	r0, r5
 8027e38:	f7f0 f8da 	bl	8017ff0 <__cxa_guard_acquire>
 8027e3c:	b1f0      	cbz	r0, 8027e7c <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x58>
 8027e3e:	233f      	movs	r3, #63	@ 0x3f
 8027e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8027e42:	4b11      	ldr	r3, [pc, #68]	@ (8027e88 <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x64>)
 8027e44:	9308      	str	r3, [sp, #32]
 8027e46:	4b11      	ldr	r3, [pc, #68]	@ (8027e8c <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x68>)
 8027e48:	9307      	str	r3, [sp, #28]
 8027e4a:	2301      	movs	r3, #1
 8027e4c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8027e50:	9304      	str	r3, [sp, #16]
 8027e52:	2304      	movs	r3, #4
 8027e54:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8027e58:	2314      	movs	r3, #20
 8027e5a:	490d      	ldr	r1, [pc, #52]	@ (8027e90 <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x6c>)
 8027e5c:	9300      	str	r3, [sp, #0]
 8027e5e:	224a      	movs	r2, #74	@ 0x4a
 8027e60:	2318      	movs	r3, #24
 8027e62:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8027e66:	480b      	ldr	r0, [pc, #44]	@ (8027e94 <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x70>)
 8027e68:	940a      	str	r4, [sp, #40]	@ 0x28
 8027e6a:	9401      	str	r4, [sp, #4]
 8027e6c:	f7ff ffa8 	bl	8027dc0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8027e70:	4809      	ldr	r0, [pc, #36]	@ (8027e98 <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x74>)
 8027e72:	f014 fb77 	bl	803c564 <atexit>
 8027e76:	4628      	mov	r0, r5
 8027e78:	f7f0 f8f6 	bl	8018068 <__cxa_guard_release>
    return GemunuLibre_Regular_20_4bpp;
}
 8027e7c:	4805      	ldr	r0, [pc, #20]	@ (8027e94 <_Z35getFont_GemunuLibre_Regular_20_4bppv+0x70>)
 8027e7e:	b00f      	add	sp, #60	@ 0x3c
 8027e80:	bd30      	pop	{r4, r5, pc}
 8027e82:	bf00      	nop
 8027e84:	20009d40 	.word	0x20009d40
 8027e88:	08045418 	.word	0x08045418
 8027e8c:	08045570 	.word	0x08045570
 8027e90:	08044e4c 	.word	0x08044e4c
 8027e94:	20009d44 	.word	0x20009d44
 8027e98:	08027e21 	.word	0x08027e21

08027e9c <__tcf_0>:

touchgfx::GeneratedFont& getFont_times_10_4bpp();

touchgfx::GeneratedFont& getFont_times_10_4bpp()
{
    static touchgfx::GeneratedFont times_10_4bpp(glyphs_times_10_4bpp, 32, 12, 10, 0, 0, 4, 1, 0, 2, unicodes_times_10_4bpp, kerning_times_10_4bpp, 63, 0, 0, &times_contextualFormsTable);
 8027e9c:	4770      	bx	lr
	...

08027ea0 <_Z21getFont_times_10_4bppv>:
{
 8027ea0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont times_10_4bpp(glyphs_times_10_4bpp, 32, 12, 10, 0, 0, 4, 1, 0, 2, unicodes_times_10_4bpp, kerning_times_10_4bpp, 63, 0, 0, &times_contextualFormsTable);
 8027ea2:	4d18      	ldr	r5, [pc, #96]	@ (8027f04 <_Z21getFont_times_10_4bppv+0x64>)
 8027ea4:	682c      	ldr	r4, [r5, #0]
 8027ea6:	f014 0401 	ands.w	r4, r4, #1
{
 8027eaa:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont times_10_4bpp(glyphs_times_10_4bpp, 32, 12, 10, 0, 0, 4, 1, 0, 2, unicodes_times_10_4bpp, kerning_times_10_4bpp, 63, 0, 0, &times_contextualFormsTable);
 8027eac:	f3bf 8f5b 	dmb	ish
 8027eb0:	d124      	bne.n	8027efc <_Z21getFont_times_10_4bppv+0x5c>
 8027eb2:	4628      	mov	r0, r5
 8027eb4:	f7f0 f89c 	bl	8017ff0 <__cxa_guard_acquire>
 8027eb8:	b300      	cbz	r0, 8027efc <_Z21getFont_times_10_4bppv+0x5c>
 8027eba:	4b13      	ldr	r3, [pc, #76]	@ (8027f08 <_Z21getFont_times_10_4bppv+0x68>)
 8027ebc:	4913      	ldr	r1, [pc, #76]	@ (8027f0c <_Z21getFont_times_10_4bppv+0x6c>)
 8027ebe:	4814      	ldr	r0, [pc, #80]	@ (8027f10 <_Z21getFont_times_10_4bppv+0x70>)
 8027ec0:	940a      	str	r4, [sp, #40]	@ 0x28
 8027ec2:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 8027ec6:	233f      	movs	r3, #63	@ 0x3f
 8027ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8027eca:	4b12      	ldr	r3, [pc, #72]	@ (8027f14 <_Z21getFont_times_10_4bppv+0x74>)
 8027ecc:	9308      	str	r3, [sp, #32]
 8027ece:	4b12      	ldr	r3, [pc, #72]	@ (8027f18 <_Z21getFont_times_10_4bppv+0x78>)
 8027ed0:	9307      	str	r3, [sp, #28]
 8027ed2:	2302      	movs	r3, #2
 8027ed4:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8027ed8:	2201      	movs	r2, #1
 8027eda:	2304      	movs	r3, #4
 8027edc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8027ee0:	230a      	movs	r3, #10
 8027ee2:	9300      	str	r3, [sp, #0]
 8027ee4:	2220      	movs	r2, #32
 8027ee6:	230c      	movs	r3, #12
 8027ee8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8027eec:	f7ff ff68 	bl	8027dc0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8027ef0:	480a      	ldr	r0, [pc, #40]	@ (8027f1c <_Z21getFont_times_10_4bppv+0x7c>)
 8027ef2:	f014 fb37 	bl	803c564 <atexit>
 8027ef6:	4628      	mov	r0, r5
 8027ef8:	f7f0 f8b6 	bl	8018068 <__cxa_guard_release>
    return times_10_4bpp;
}
 8027efc:	4804      	ldr	r0, [pc, #16]	@ (8027f10 <_Z21getFont_times_10_4bppv+0x70>)
 8027efe:	b00f      	add	sp, #60	@ 0x3c
 8027f00:	bd30      	pop	{r4, r5, pc}
 8027f02:	bf00      	nop
 8027f04:	20009d70 	.word	0x20009d70
 8027f08:	08042268 	.word	0x08042268
 8027f0c:	08045258 	.word	0x08045258
 8027f10:	20009d74 	.word	0x20009d74
 8027f14:	0804556c 	.word	0x0804556c
 8027f18:	08045574 	.word	0x08045574
 8027f1c:	08027e9d 	.word	0x08027e9d

08027f20 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8027f20:	4770      	bx	lr

08027f22 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8027f22:	4770      	bx	lr

08027f24 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8027f24:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8027f28:	6808      	ldr	r0, [r1, #0]
 8027f2a:	6849      	ldr	r1, [r1, #4]
 8027f2c:	c303      	stmia	r3!, {r0, r1}
    }
 8027f2e:	4770      	bx	lr

08027f30 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8027f30:	4770      	bx	lr

08027f32 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8027f32:	4770      	bx	lr

08027f34 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8027f34:	6041      	str	r1, [r0, #4]
    }
 8027f36:	4770      	bx	lr

08027f38 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8027f38:	4770      	bx	lr

08027f3a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8027f3a:	4770      	bx	lr

08027f3c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 8027f3c:	4b06      	ldr	r3, [pc, #24]	@ (8027f58 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8027f3e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8027f42:	2300      	movs	r3, #0
 8027f44:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// ScreenTestHome

void FrontendApplicationBase::gotoScreenTestHomeScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreenTestHomeScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8027f48:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8027f4c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8027f50:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreenTestHomeScreenNoTransition();
    }
 8027f54:	4770      	bx	lr
 8027f56:	bf00      	nop
 8027f58:	08028ab1 	.word	0x08028ab1

08027f5c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8027f5c:	2301      	movs	r3, #1
 8027f5e:	7203      	strb	r3, [r0, #8]
    }
 8027f60:	4770      	bx	lr

08027f62 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8027f62:	4770      	bx	lr

08027f64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8027f64:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8027f66:	68c2      	ldr	r2, [r0, #12]
 8027f68:	6841      	ldr	r1, [r0, #4]
 8027f6a:	1054      	asrs	r4, r2, #1
    virtual void execute()
 8027f6c:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8027f6e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8027f72:	07d2      	lsls	r2, r2, #31
 8027f74:	bf48      	it	mi
 8027f76:	590a      	ldrmi	r2, [r1, r4]
 8027f78:	689b      	ldr	r3, [r3, #8]
    }
 8027f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8027f7e:	bf48      	it	mi
 8027f80:	58d3      	ldrmi	r3, [r2, r3]
 8027f82:	4718      	bx	r3

08027f84 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8027f84:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8027f86:	6840      	ldr	r0, [r0, #4]
 8027f88:	b130      	cbz	r0, 8027f98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8027f8a:	689a      	ldr	r2, [r3, #8]
 8027f8c:	b91a      	cbnz	r2, 8027f96 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8027f8e:	68d8      	ldr	r0, [r3, #12]
 8027f90:	f000 0001 	and.w	r0, r0, #1
 8027f94:	4770      	bx	lr
 8027f96:	2001      	movs	r0, #1
    }
 8027f98:	4770      	bx	lr

08027f9a <_ZN8touchgfx12NoTransitionD0Ev>:
 8027f9a:	b510      	push	{r4, lr}
 8027f9c:	210c      	movs	r1, #12
 8027f9e:	4604      	mov	r4, r0
 8027fa0:	f014 faa3 	bl	803c4ea <_ZdlPvj>
 8027fa4:	4620      	mov	r0, r4
 8027fa6:	bd10      	pop	{r4, pc}

08027fa8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8027fa8:	b510      	push	{r4, lr}
 8027faa:	2110      	movs	r1, #16
 8027fac:	4604      	mov	r4, r0
 8027fae:	f014 fa9c 	bl	803c4ea <_ZdlPvj>
 8027fb2:	4620      	mov	r0, r4
 8027fb4:	bd10      	pop	{r4, pc}

08027fb6 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8027fb6:	b510      	push	{r4, lr}
 8027fb8:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8027fbc:	4604      	mov	r4, r0
 8027fbe:	f014 fa94 	bl	803c4ea <_ZdlPvj>
 8027fc2:	4620      	mov	r0, r4
 8027fc4:	bd10      	pop	{r4, pc}

08027fc6 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8027fc6:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8027fc8:	f00c fea0 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 8027fcc:	6803      	ldr	r3, [r0, #0]
    }
 8027fce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8027fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8027fd4:	4718      	bx	r3

08027fd6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8027fd6:	b510      	push	{r4, lr}
 8027fd8:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8027fda:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8027fde:	b158      	cbz	r0, 8027ff8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8027fe0:	6803      	ldr	r3, [r0, #0]
 8027fe2:	68db      	ldr	r3, [r3, #12]
 8027fe4:	4798      	blx	r3
 8027fe6:	b138      	cbz	r0, 8027ff8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8027fe8:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8027fec:	6803      	ldr	r3, [r0, #0]
 8027fee:	689b      	ldr	r3, [r3, #8]
 8027ff0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8027ff2:	2300      	movs	r3, #0
 8027ff4:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8027ff8:	bd10      	pop	{r4, pc}
	...

08027ffc <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8027ffc:	4b04      	ldr	r3, [pc, #16]	@ (8028010 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8027ffe:	681b      	ldr	r3, [r3, #0]
 8028000:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8028004:	b10a      	cbz	r2, 802800a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8028006:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8028008:	b900      	cbnz	r0, 802800c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 802800a:	6898      	ldr	r0, [r3, #8]
    }
 802800c:	4770      	bx	lr
 802800e:	bf00      	nop
 8028010:	2000b8e0 	.word	0x2000b8e0

08028014 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8028014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028016:	4604      	mov	r4, r0
 8028018:	4617      	mov	r7, r2
 802801a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 802801c:	f00c ff82 	bl	8034f24 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8028020:	4b10      	ldr	r3, [pc, #64]	@ (8028064 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 8028022:	601c      	str	r4, [r3, #0]
      model(m)
 8028024:	4b10      	ldr	r3, [pc, #64]	@ (8028068 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8028026:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8028028:	4b10      	ldr	r3, [pc, #64]	@ (802806c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 802802a:	2500      	movs	r5, #0
 802802c:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8028030:	4b0f      	ldr	r3, [pc, #60]	@ (8028070 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8028032:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8028036:	6818      	ldr	r0, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8028038:	6803      	ldr	r3, [r0, #0]
 802803a:	4629      	mov	r1, r5
 802803c:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 802803e:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
      model(m)
 8028042:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8028046:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8028048:	4628      	mov	r0, r5
 802804a:	f004 fef7 	bl	802ce3c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperRGB888();
 802804e:	f7ff ffd5 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8028052:	f012 f9a3 	bl	803a39c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperARGB8888();
 8028056:	f7ff ffd1 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 802805a:	f012 fa1d 	bl	803a498 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
}
 802805e:	4620      	mov	r0, r4
 8028060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028062:	bf00      	nop
 8028064:	2000b92c 	.word	0x2000b92c
 8028068:	080426e0 	.word	0x080426e0
 802806c:	080426c8 	.word	0x080426c8
 8028070:	2000b8e0 	.word	0x2000b8e0

08028074 <_ZN23FrontendApplicationBase35gotoScreenTrailerScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8028074:	4b06      	ldr	r3, [pc, #24]	@ (8028090 <_ZN23FrontendApplicationBase35gotoScreenTrailerScreenNoTransitionEv+0x1c>)
 8028076:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 802807a:	2300      	movs	r3, #0
 802807c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8028080:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8028084:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8028088:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 802808c:	4770      	bx	lr
 802808e:	bf00      	nop
 8028090:	08028bfd 	.word	0x08028bfd

08028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>:
 8028094:	4b06      	ldr	r3, [pc, #24]	@ (80280b0 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv+0x1c>)
 8028096:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 802809a:	2300      	movs	r3, #0
 802809c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80280a0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80280a4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80280a8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80280ac:	4770      	bx	lr
 80280ae:	bf00      	nop
 80280b0:	08028ab1 	.word	0x08028ab1

080280b4 <_ZN23FrontendApplicationBase39gotoScreenOutputsTestScreenNoTransitionEv>:
 80280b4:	4b06      	ldr	r3, [pc, #24]	@ (80280d0 <_ZN23FrontendApplicationBase39gotoScreenOutputsTestScreenNoTransitionEv+0x1c>)
 80280b6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80280ba:	2300      	movs	r3, #0
 80280bc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// ScreenOutputsTest

void FrontendApplicationBase::gotoScreenOutputsTestScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreenOutputsTestScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80280c0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80280c4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80280c8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80280cc:	4770      	bx	lr
 80280ce:	bf00      	nop
 80280d0:	08028965 	.word	0x08028965

080280d4 <_ZN23FrontendApplicationBase35gotoScreenLCDtestScreenNoTransitionEv>:
 80280d4:	4b06      	ldr	r3, [pc, #24]	@ (80280f0 <_ZN23FrontendApplicationBase35gotoScreenLCDtestScreenNoTransitionEv+0x1c>)
 80280d6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80280da:	2300      	movs	r3, #0
 80280dc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// ScreenLCDtest

void FrontendApplicationBase::gotoScreenLCDtestScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreenLCDtestScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80280e0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80280e4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80280e8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80280ec:	4770      	bx	lr
 80280ee:	bf00      	nop
 80280f0:	08028819 	.word	0x08028819

080280f4 <_ZN23FrontendApplicationBase32gotoMenuLayer1ScreenNoTransitionEv>:
 80280f4:	4b06      	ldr	r3, [pc, #24]	@ (8028110 <_ZN23FrontendApplicationBase32gotoMenuLayer1ScreenNoTransitionEv+0x1c>)
 80280f6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80280fa:	2300      	movs	r3, #0
 80280fc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// MenuLayer1

void FrontendApplicationBase::gotoMenuLayer1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMenuLayer1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8028100:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8028104:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8028108:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 802810c:	4770      	bx	lr
 802810e:	bf00      	nop
 8028110:	080286cd 	.word	0x080286cd

08028114 <_ZN23FrontendApplicationBase32gotoMenuLayer2ScreenNoTransitionEv>:
 8028114:	4b06      	ldr	r3, [pc, #24]	@ (8028130 <_ZN23FrontendApplicationBase32gotoMenuLayer2ScreenNoTransitionEv+0x1c>)
 8028116:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 802811a:	2300      	movs	r3, #0
 802811c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// MenuLayer2

void FrontendApplicationBase::gotoMenuLayer2ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMenuLayer2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8028120:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8028124:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8028128:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 802812c:	4770      	bx	lr
 802812e:	bf00      	nop
 8028130:	08028581 	.word	0x08028581

08028134 <_ZN23FrontendApplicationBase32gotoMenuLayer3ScreenNoTransitionEv>:
 8028134:	4b06      	ldr	r3, [pc, #24]	@ (8028150 <_ZN23FrontendApplicationBase32gotoMenuLayer3ScreenNoTransitionEv+0x1c>)
 8028136:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 802813a:	2300      	movs	r3, #0
 802813c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// MenuLayer3

void FrontendApplicationBase::gotoMenuLayer3ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMenuLayer3ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8028140:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8028144:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8028148:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 802814c:	4770      	bx	lr
 802814e:	bf00      	nop
 8028150:	08028435 	.word	0x08028435

08028154 <_ZN23FrontendApplicationBase32gotoDiagnosticScreenNoTransitionEv>:
 8028154:	4b06      	ldr	r3, [pc, #24]	@ (8028170 <_ZN23FrontendApplicationBase32gotoDiagnosticScreenNoTransitionEv+0x1c>)
 8028156:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 802815a:	2300      	movs	r3, #0
 802815c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Diagnostic

void FrontendApplicationBase::gotoDiagnosticScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoDiagnosticScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8028160:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8028164:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8028168:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 802816c:	4770      	bx	lr
 802816e:	bf00      	nop
 8028170:	080282e9 	.word	0x080282e9

08028174 <_ZN23FrontendApplicationBase35gotoPasswordEntryScreenNoTransitionEv>:
 8028174:	4b06      	ldr	r3, [pc, #24]	@ (8028190 <_ZN23FrontendApplicationBase35gotoPasswordEntryScreenNoTransitionEv+0x1c>)
 8028176:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 802817a:	2300      	movs	r3, #0
 802817c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// PasswordEntry

void FrontendApplicationBase::gotoPasswordEntryScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoPasswordEntryScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8028180:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8028184:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8028188:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 802818c:	4770      	bx	lr
 802818e:	bf00      	nop
 8028190:	0802819d 	.word	0x0802819d

08028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8028194:	6803      	ldr	r3, [r0, #0]
 8028196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028198:	4718      	bx	r3
	...

0802819c <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoPasswordEntryScreenNoTransitionImpl()
{
 802819c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<PasswordEntryView, PasswordEntryPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80281a0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80281a4:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80281a6:	68b0      	ldr	r0, [r6, #8]
 80281a8:	6803      	ldr	r3, [r0, #0]
 80281aa:	6a1b      	ldr	r3, [r3, #32]
 80281ac:	4798      	blx	r3
 80281ae:	f5b0 6fb9 	cmp.w	r0, #1480	@ 0x5c8
 80281b2:	d205      	bcs.n	80281c0 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x24>
 80281b4:	4b44      	ldr	r3, [pc, #272]	@ (80282c8 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x12c>)
 80281b6:	4a45      	ldr	r2, [pc, #276]	@ (80282cc <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x130>)
 80281b8:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80281ba:	4845      	ldr	r0, [pc, #276]	@ (80282d0 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x134>)
 80281bc:	f014 f9b4 	bl	803c528 <__assert_func>
 80281c0:	6870      	ldr	r0, [r6, #4]
 80281c2:	6803      	ldr	r3, [r0, #0]
 80281c4:	6a1b      	ldr	r3, [r3, #32]
 80281c6:	4798      	blx	r3
 80281c8:	2813      	cmp	r0, #19
 80281ca:	d803      	bhi.n	80281d4 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x38>
 80281cc:	4b41      	ldr	r3, [pc, #260]	@ (80282d4 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x138>)
 80281ce:	4a3f      	ldr	r2, [pc, #252]	@ (80282cc <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x130>)
 80281d0:	21a4      	movs	r1, #164	@ 0xa4
 80281d2:	e7f2      	b.n	80281ba <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80281d4:	68f0      	ldr	r0, [r6, #12]
 80281d6:	6803      	ldr	r3, [r0, #0]
 80281d8:	6a1b      	ldr	r3, [r3, #32]
 80281da:	4798      	blx	r3
 80281dc:	280b      	cmp	r0, #11
 80281de:	d803      	bhi.n	80281e8 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x4c>
 80281e0:	4b3d      	ldr	r3, [pc, #244]	@ (80282d8 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x13c>)
 80281e2:	4a3a      	ldr	r2, [pc, #232]	@ (80282cc <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x130>)
 80281e4:	21a5      	movs	r1, #165	@ 0xa5
 80281e6:	e7e8      	b.n	80281ba <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 80281e8:	f00c fd90 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80281ec:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 80282e0 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80281f0:	3004      	adds	r0, #4
 80281f2:	f00c fdc9 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80281f6:	f8d9 0000 	ldr.w	r0, [r9]
 80281fa:	b110      	cbz	r0, 8028202 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80281fc:	6803      	ldr	r3, [r0, #0]
 80281fe:	68db      	ldr	r3, [r3, #12]
 8028200:	4798      	blx	r3
    if (*currentTrans)
 8028202:	f8d9 0000 	ldr.w	r0, [r9]
 8028206:	b110      	cbz	r0, 802820e <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8028208:	6803      	ldr	r3, [r0, #0]
 802820a:	681b      	ldr	r3, [r3, #0]
 802820c:	4798      	blx	r3
    if (*currentScreen)
 802820e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80282e4 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x148>
 8028212:	f8d8 0000 	ldr.w	r0, [r8]
 8028216:	b110      	cbz	r0, 802821e <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8028218:	6803      	ldr	r3, [r0, #0]
 802821a:	695b      	ldr	r3, [r3, #20]
 802821c:	4798      	blx	r3
    if (*currentPresenter)
 802821e:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028222:	b110      	cbz	r0, 802822a <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8028224:	6803      	ldr	r3, [r0, #0]
 8028226:	685b      	ldr	r3, [r3, #4]
 8028228:	4798      	blx	r3
    if (*currentScreen)
 802822a:	f8d8 0000 	ldr.w	r0, [r8]
 802822e:	b110      	cbz	r0, 8028236 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8028230:	6803      	ldr	r3, [r0, #0]
 8028232:	681b      	ldr	r3, [r3, #0]
 8028234:	4798      	blx	r3
    if (*currentPresenter)
 8028236:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 802823a:	b110      	cbz	r0, 8028242 <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 802823c:	6803      	ldr	r3, [r0, #0]
 802823e:	689b      	ldr	r3, [r3, #8]
 8028240:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8028242:	68f0      	ldr	r0, [r6, #12]
 8028244:	2100      	movs	r1, #0
 8028246:	f7ff ffa5 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
        : screenContainer(0), done(false)
 802824a:	f04f 0b00 	mov.w	fp, #0
 802824e:	4b23      	ldr	r3, [pc, #140]	@ (80282dc <_ZN23FrontendApplicationBase39gotoPasswordEntryScreenNoTransitionImplEv+0x140>)
 8028250:	f8c0 b004 	str.w	fp, [r0, #4]
 8028254:	4604      	mov	r4, r0
 8028256:	f880 b008 	strb.w	fp, [r0, #8]
 802825a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 802825c:	68b0      	ldr	r0, [r6, #8]
 802825e:	6803      	ldr	r3, [r0, #0]
 8028260:	4659      	mov	r1, fp
 8028262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028264:	4798      	blx	r3
 8028266:	4605      	mov	r5, r0
 8028268:	f006 fa2e 	bl	802e6c8 <_ZN17PasswordEntryViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 802826c:	6870      	ldr	r0, [r6, #4]
 802826e:	6803      	ldr	r3, [r0, #0]
 8028270:	4659      	mov	r1, fp
 8028272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028274:	4798      	blx	r3
 8028276:	4629      	mov	r1, r5
 8028278:	4606      	mov	r6, r0
 802827a:	f006 f9ff 	bl	802e67c <_ZN22PasswordEntryPresenterC1ER17PasswordEntryView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 802827e:	4631      	mov	r1, r6
 8028280:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 8028282:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 8028286:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 802828a:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 802828e:	f006 f945 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 8028292:	682b      	ldr	r3, [r5, #0]
    virtual void activate();
    virtual void deactivate();
    virtual ~PasswordEntryPresenter() {}

    // Change bind signature to match MenuLayer1Presenter
    void bind(Model* m) { model = m; }
 8028294:	f8c6 a010 	str.w	sl, [r6, #16]
 8028298:	4628      	mov	r0, r5
 802829a:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 802829c:	63ee      	str	r6, [r5, #60]	@ 0x3c
 802829e:	4798      	blx	r3
    newPresenter->activate();
 80282a0:	6833      	ldr	r3, [r6, #0]
 80282a2:	4630      	mov	r0, r6
 80282a4:	681b      	ldr	r3, [r3, #0]
 80282a6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80282a8:	4621      	mov	r1, r4
 80282aa:	4628      	mov	r0, r5
 80282ac:	f00e fadc 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80282b0:	6823      	ldr	r3, [r4, #0]
 80282b2:	4620      	mov	r0, r4
 80282b4:	691b      	ldr	r3, [r3, #16]
 80282b6:	4798      	blx	r3
    newTransition->invalidate();
 80282b8:	6823      	ldr	r3, [r4, #0]
 80282ba:	695b      	ldr	r3, [r3, #20]
 80282bc:	4620      	mov	r0, r4
}
 80282be:	b001      	add	sp, #4
 80282c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282c4:	4718      	bx	r3
 80282c6:	bf00      	nop
 80282c8:	080403c7 	.word	0x080403c7
 80282cc:	08040455 	.word	0x08040455
 80282d0:	08040533 	.word	0x08040533
 80282d4:	08040575 	.word	0x08040575
 80282d8:	08040618 	.word	0x08040618
 80282dc:	08042734 	.word	0x08042734
 80282e0:	2000b920 	.word	0x2000b920
 80282e4:	2000b91c 	.word	0x2000b91c

080282e8 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv>:
{
 80282e8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<DiagnosticView, DiagnosticPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80282ec:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80282f0:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80282f2:	68b0      	ldr	r0, [r6, #8]
 80282f4:	6803      	ldr	r3, [r0, #0]
 80282f6:	6a1b      	ldr	r3, [r3, #32]
 80282f8:	4798      	blx	r3
 80282fa:	f640 131b 	movw	r3, #2331	@ 0x91b
 80282fe:	4298      	cmp	r0, r3
 8028300:	d805      	bhi.n	802830e <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x26>
 8028302:	4b44      	ldr	r3, [pc, #272]	@ (8028414 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x12c>)
 8028304:	4a44      	ldr	r2, [pc, #272]	@ (8028418 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x130>)
 8028306:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8028308:	4844      	ldr	r0, [pc, #272]	@ (802841c <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x134>)
 802830a:	f014 f90d 	bl	803c528 <__assert_func>
 802830e:	6870      	ldr	r0, [r6, #4]
 8028310:	6803      	ldr	r3, [r0, #0]
 8028312:	6a1b      	ldr	r3, [r3, #32]
 8028314:	4798      	blx	r3
 8028316:	2813      	cmp	r0, #19
 8028318:	d803      	bhi.n	8028322 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x3a>
 802831a:	4b41      	ldr	r3, [pc, #260]	@ (8028420 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x138>)
 802831c:	4a3e      	ldr	r2, [pc, #248]	@ (8028418 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x130>)
 802831e:	21a4      	movs	r1, #164	@ 0xa4
 8028320:	e7f2      	b.n	8028308 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8028322:	68f0      	ldr	r0, [r6, #12]
 8028324:	6803      	ldr	r3, [r0, #0]
 8028326:	6a1b      	ldr	r3, [r3, #32]
 8028328:	4798      	blx	r3
 802832a:	280b      	cmp	r0, #11
 802832c:	d803      	bhi.n	8028336 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x4e>
 802832e:	4b3d      	ldr	r3, [pc, #244]	@ (8028424 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x13c>)
 8028330:	4a39      	ldr	r2, [pc, #228]	@ (8028418 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x130>)
 8028332:	21a5      	movs	r1, #165	@ 0xa5
 8028334:	e7e8      	b.n	8028308 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8028336:	f00c fce9 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 802833a:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 802842c <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x144>
 802833e:	3004      	adds	r0, #4
 8028340:	f00c fd22 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8028344:	f8d9 0000 	ldr.w	r0, [r9]
 8028348:	b110      	cbz	r0, 8028350 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 802834a:	6803      	ldr	r3, [r0, #0]
 802834c:	68db      	ldr	r3, [r3, #12]
 802834e:	4798      	blx	r3
    if (*currentTrans)
 8028350:	f8d9 0000 	ldr.w	r0, [r9]
 8028354:	b110      	cbz	r0, 802835c <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8028356:	6803      	ldr	r3, [r0, #0]
 8028358:	681b      	ldr	r3, [r3, #0]
 802835a:	4798      	blx	r3
    if (*currentScreen)
 802835c:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8028430 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x148>
 8028360:	f8d8 0000 	ldr.w	r0, [r8]
 8028364:	b110      	cbz	r0, 802836c <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8028366:	6803      	ldr	r3, [r0, #0]
 8028368:	695b      	ldr	r3, [r3, #20]
 802836a:	4798      	blx	r3
    if (*currentPresenter)
 802836c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028370:	b110      	cbz	r0, 8028378 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8028372:	6803      	ldr	r3, [r0, #0]
 8028374:	685b      	ldr	r3, [r3, #4]
 8028376:	4798      	blx	r3
    if (*currentScreen)
 8028378:	f8d8 0000 	ldr.w	r0, [r8]
 802837c:	b110      	cbz	r0, 8028384 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 802837e:	6803      	ldr	r3, [r0, #0]
 8028380:	681b      	ldr	r3, [r3, #0]
 8028382:	4798      	blx	r3
    if (*currentPresenter)
 8028384:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028388:	b110      	cbz	r0, 8028390 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 802838a:	6803      	ldr	r3, [r0, #0]
 802838c:	689b      	ldr	r3, [r3, #8]
 802838e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8028390:	68f0      	ldr	r0, [r6, #12]
 8028392:	2100      	movs	r1, #0
 8028394:	f7ff fefe 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8028398:	f04f 0b00 	mov.w	fp, #0
 802839c:	4b22      	ldr	r3, [pc, #136]	@ (8028428 <_ZN23FrontendApplicationBase36gotoDiagnosticScreenNoTransitionImplEv+0x140>)
 802839e:	f8c0 b004 	str.w	fp, [r0, #4]
 80283a2:	4604      	mov	r4, r0
 80283a4:	f880 b008 	strb.w	fp, [r0, #8]
 80283a8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80283aa:	68b0      	ldr	r0, [r6, #8]
 80283ac:	6803      	ldr	r3, [r0, #0]
 80283ae:	4659      	mov	r1, fp
 80283b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80283b2:	4798      	blx	r3
 80283b4:	4605      	mov	r5, r0
 80283b6:	f004 fe47 	bl	802d048 <_ZN14DiagnosticViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80283ba:	6870      	ldr	r0, [r6, #4]
 80283bc:	6803      	ldr	r3, [r0, #0]
 80283be:	4659      	mov	r1, fp
 80283c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80283c2:	4798      	blx	r3
 80283c4:	4629      	mov	r1, r5
 80283c6:	4606      	mov	r6, r0
 80283c8:	f004 fe1c 	bl	802d004 <_ZN19DiagnosticPresenterC1ER14DiagnosticView>
    model->bind(newPresenter);
 80283cc:	4631      	mov	r1, r6
 80283ce:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 80283d0:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 80283d4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80283d8:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 80283dc:	f006 f89e 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 80283e0:	682b      	ldr	r3, [r5, #0]
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~DiagnosticPresenter() {}
    void bind(Model* m) { model = m; }
 80283e2:	f8c6 a010 	str.w	sl, [r6, #16]
 80283e6:	4628      	mov	r0, r5
 80283e8:	68db      	ldr	r3, [r3, #12]
 80283ea:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80283ec:	4798      	blx	r3
    newPresenter->activate();
 80283ee:	6833      	ldr	r3, [r6, #0]
 80283f0:	4630      	mov	r0, r6
 80283f2:	681b      	ldr	r3, [r3, #0]
 80283f4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80283f6:	4621      	mov	r1, r4
 80283f8:	4628      	mov	r0, r5
 80283fa:	f00e fa35 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80283fe:	6823      	ldr	r3, [r4, #0]
 8028400:	4620      	mov	r0, r4
 8028402:	691b      	ldr	r3, [r3, #16]
 8028404:	4798      	blx	r3
    newTransition->invalidate();
 8028406:	6823      	ldr	r3, [r4, #0]
 8028408:	695b      	ldr	r3, [r3, #20]
 802840a:	4620      	mov	r0, r4
}
 802840c:	b001      	add	sp, #4
 802840e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028412:	4718      	bx	r3
 8028414:	080403c7 	.word	0x080403c7
 8028418:	080406bb 	.word	0x080406bb
 802841c:	08040533 	.word	0x08040533
 8028420:	08040575 	.word	0x08040575
 8028424:	08040618 	.word	0x08040618
 8028428:	08042734 	.word	0x08042734
 802842c:	2000b920 	.word	0x2000b920
 8028430:	2000b91c 	.word	0x2000b91c

08028434 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv>:
{
 8028434:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MenuLayer3View, MenuLayer3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8028438:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 802843c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 802843e:	68b0      	ldr	r0, [r6, #8]
 8028440:	6803      	ldr	r3, [r0, #0]
 8028442:	6a1b      	ldr	r3, [r3, #32]
 8028444:	4798      	blx	r3
 8028446:	f640 1337 	movw	r3, #2359	@ 0x937
 802844a:	4298      	cmp	r0, r3
 802844c:	d805      	bhi.n	802845a <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x26>
 802844e:	4b44      	ldr	r3, [pc, #272]	@ (8028560 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x12c>)
 8028450:	4a44      	ldr	r2, [pc, #272]	@ (8028564 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x130>)
 8028452:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8028454:	4844      	ldr	r0, [pc, #272]	@ (8028568 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x134>)
 8028456:	f014 f867 	bl	803c528 <__assert_func>
 802845a:	6870      	ldr	r0, [r6, #4]
 802845c:	6803      	ldr	r3, [r0, #0]
 802845e:	6a1b      	ldr	r3, [r3, #32]
 8028460:	4798      	blx	r3
 8028462:	2813      	cmp	r0, #19
 8028464:	d803      	bhi.n	802846e <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x3a>
 8028466:	4b41      	ldr	r3, [pc, #260]	@ (802856c <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x138>)
 8028468:	4a3e      	ldr	r2, [pc, #248]	@ (8028564 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x130>)
 802846a:	21a4      	movs	r1, #164	@ 0xa4
 802846c:	e7f2      	b.n	8028454 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 802846e:	68f0      	ldr	r0, [r6, #12]
 8028470:	6803      	ldr	r3, [r0, #0]
 8028472:	6a1b      	ldr	r3, [r3, #32]
 8028474:	4798      	blx	r3
 8028476:	280b      	cmp	r0, #11
 8028478:	d803      	bhi.n	8028482 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x4e>
 802847a:	4b3d      	ldr	r3, [pc, #244]	@ (8028570 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x13c>)
 802847c:	4a39      	ldr	r2, [pc, #228]	@ (8028564 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x130>)
 802847e:	21a5      	movs	r1, #165	@ 0xa5
 8028480:	e7e8      	b.n	8028454 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8028482:	f00c fc43 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8028486:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8028578 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x144>
 802848a:	3004      	adds	r0, #4
 802848c:	f00c fc7c 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8028490:	f8d9 0000 	ldr.w	r0, [r9]
 8028494:	b110      	cbz	r0, 802849c <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8028496:	6803      	ldr	r3, [r0, #0]
 8028498:	68db      	ldr	r3, [r3, #12]
 802849a:	4798      	blx	r3
    if (*currentTrans)
 802849c:	f8d9 0000 	ldr.w	r0, [r9]
 80284a0:	b110      	cbz	r0, 80284a8 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80284a2:	6803      	ldr	r3, [r0, #0]
 80284a4:	681b      	ldr	r3, [r3, #0]
 80284a6:	4798      	blx	r3
    if (*currentScreen)
 80284a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 802857c <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x148>
 80284ac:	f8d8 0000 	ldr.w	r0, [r8]
 80284b0:	b110      	cbz	r0, 80284b8 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80284b2:	6803      	ldr	r3, [r0, #0]
 80284b4:	695b      	ldr	r3, [r3, #20]
 80284b6:	4798      	blx	r3
    if (*currentPresenter)
 80284b8:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80284bc:	b110      	cbz	r0, 80284c4 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80284be:	6803      	ldr	r3, [r0, #0]
 80284c0:	685b      	ldr	r3, [r3, #4]
 80284c2:	4798      	blx	r3
    if (*currentScreen)
 80284c4:	f8d8 0000 	ldr.w	r0, [r8]
 80284c8:	b110      	cbz	r0, 80284d0 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80284ca:	6803      	ldr	r3, [r0, #0]
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	4798      	blx	r3
    if (*currentPresenter)
 80284d0:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80284d4:	b110      	cbz	r0, 80284dc <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80284d6:	6803      	ldr	r3, [r0, #0]
 80284d8:	689b      	ldr	r3, [r3, #8]
 80284da:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80284dc:	68f0      	ldr	r0, [r6, #12]
 80284de:	2100      	movs	r1, #0
 80284e0:	f7ff fe58 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80284e4:	f04f 0b00 	mov.w	fp, #0
 80284e8:	4b22      	ldr	r3, [pc, #136]	@ (8028574 <_ZN23FrontendApplicationBase36gotoMenuLayer3ScreenNoTransitionImplEv+0x140>)
 80284ea:	f8c0 b004 	str.w	fp, [r0, #4]
 80284ee:	4604      	mov	r4, r0
 80284f0:	f880 b008 	strb.w	fp, [r0, #8]
 80284f4:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80284f6:	68b0      	ldr	r0, [r6, #8]
 80284f8:	6803      	ldr	r3, [r0, #0]
 80284fa:	4659      	mov	r1, fp
 80284fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80284fe:	4798      	blx	r3
 8028500:	4605      	mov	r5, r0
 8028502:	f005 fa2d 	bl	802d960 <_ZN14MenuLayer3ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8028506:	6870      	ldr	r0, [r6, #4]
 8028508:	6803      	ldr	r3, [r0, #0]
 802850a:	4659      	mov	r1, fp
 802850c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802850e:	4798      	blx	r3
 8028510:	4629      	mov	r1, r5
 8028512:	4606      	mov	r6, r0
 8028514:	f005 f9b4 	bl	802d880 <_ZN19MenuLayer3PresenterC1ER14MenuLayer3View>
    model->bind(newPresenter);
 8028518:	4631      	mov	r1, r6
 802851a:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 802851c:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 8028520:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8028524:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 8028528:	f005 fff8 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 802852c:	682b      	ldr	r3, [r5, #0]
     */
    virtual void deactivate();

    virtual ~MenuLayer3Presenter() {}

    void bind(Model* m) { model = m; }
 802852e:	f8c6 a010 	str.w	sl, [r6, #16]
 8028532:	4628      	mov	r0, r5
 8028534:	68db      	ldr	r3, [r3, #12]
 8028536:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8028538:	4798      	blx	r3
    newPresenter->activate();
 802853a:	6833      	ldr	r3, [r6, #0]
 802853c:	4630      	mov	r0, r6
 802853e:	681b      	ldr	r3, [r3, #0]
 8028540:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8028542:	4621      	mov	r1, r4
 8028544:	4628      	mov	r0, r5
 8028546:	f00e f98f 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 802854a:	6823      	ldr	r3, [r4, #0]
 802854c:	4620      	mov	r0, r4
 802854e:	691b      	ldr	r3, [r3, #16]
 8028550:	4798      	blx	r3
    newTransition->invalidate();
 8028552:	6823      	ldr	r3, [r4, #0]
 8028554:	695b      	ldr	r3, [r3, #20]
 8028556:	4620      	mov	r0, r4
}
 8028558:	b001      	add	sp, #4
 802855a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802855e:	4718      	bx	r3
 8028560:	080403c7 	.word	0x080403c7
 8028564:	08040793 	.word	0x08040793
 8028568:	08040533 	.word	0x08040533
 802856c:	08040575 	.word	0x08040575
 8028570:	08040618 	.word	0x08040618
 8028574:	08042734 	.word	0x08042734
 8028578:	2000b920 	.word	0x2000b920
 802857c:	2000b91c 	.word	0x2000b91c

08028580 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv>:
{
 8028580:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MenuLayer2View, MenuLayer2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8028584:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8028588:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 802858a:	68b0      	ldr	r0, [r6, #8]
 802858c:	6803      	ldr	r3, [r0, #0]
 802858e:	6a1b      	ldr	r3, [r3, #32]
 8028590:	4798      	blx	r3
 8028592:	f5b0 6f1a 	cmp.w	r0, #2464	@ 0x9a0
 8028596:	d205      	bcs.n	80285a4 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x24>
 8028598:	4b44      	ldr	r3, [pc, #272]	@ (80286ac <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x12c>)
 802859a:	4a45      	ldr	r2, [pc, #276]	@ (80286b0 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x130>)
 802859c:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 802859e:	4845      	ldr	r0, [pc, #276]	@ (80286b4 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x134>)
 80285a0:	f013 ffc2 	bl	803c528 <__assert_func>
 80285a4:	6870      	ldr	r0, [r6, #4]
 80285a6:	6803      	ldr	r3, [r0, #0]
 80285a8:	6a1b      	ldr	r3, [r3, #32]
 80285aa:	4798      	blx	r3
 80285ac:	2813      	cmp	r0, #19
 80285ae:	d803      	bhi.n	80285b8 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x38>
 80285b0:	4b41      	ldr	r3, [pc, #260]	@ (80286b8 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x138>)
 80285b2:	4a3f      	ldr	r2, [pc, #252]	@ (80286b0 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x130>)
 80285b4:	21a4      	movs	r1, #164	@ 0xa4
 80285b6:	e7f2      	b.n	802859e <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80285b8:	68f0      	ldr	r0, [r6, #12]
 80285ba:	6803      	ldr	r3, [r0, #0]
 80285bc:	6a1b      	ldr	r3, [r3, #32]
 80285be:	4798      	blx	r3
 80285c0:	280b      	cmp	r0, #11
 80285c2:	d803      	bhi.n	80285cc <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x4c>
 80285c4:	4b3d      	ldr	r3, [pc, #244]	@ (80286bc <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x13c>)
 80285c6:	4a3a      	ldr	r2, [pc, #232]	@ (80286b0 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x130>)
 80285c8:	21a5      	movs	r1, #165	@ 0xa5
 80285ca:	e7e8      	b.n	802859e <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 80285cc:	f00c fb9e 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80285d0:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 80286c4 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x144>
 80285d4:	3004      	adds	r0, #4
 80285d6:	f00c fbd7 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80285da:	f8d9 0000 	ldr.w	r0, [r9]
 80285de:	b110      	cbz	r0, 80285e6 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80285e0:	6803      	ldr	r3, [r0, #0]
 80285e2:	68db      	ldr	r3, [r3, #12]
 80285e4:	4798      	blx	r3
    if (*currentTrans)
 80285e6:	f8d9 0000 	ldr.w	r0, [r9]
 80285ea:	b110      	cbz	r0, 80285f2 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80285ec:	6803      	ldr	r3, [r0, #0]
 80285ee:	681b      	ldr	r3, [r3, #0]
 80285f0:	4798      	blx	r3
    if (*currentScreen)
 80285f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80286c8 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x148>
 80285f6:	f8d8 0000 	ldr.w	r0, [r8]
 80285fa:	b110      	cbz	r0, 8028602 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80285fc:	6803      	ldr	r3, [r0, #0]
 80285fe:	695b      	ldr	r3, [r3, #20]
 8028600:	4798      	blx	r3
    if (*currentPresenter)
 8028602:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028606:	b110      	cbz	r0, 802860e <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8028608:	6803      	ldr	r3, [r0, #0]
 802860a:	685b      	ldr	r3, [r3, #4]
 802860c:	4798      	blx	r3
    if (*currentScreen)
 802860e:	f8d8 0000 	ldr.w	r0, [r8]
 8028612:	b110      	cbz	r0, 802861a <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8028614:	6803      	ldr	r3, [r0, #0]
 8028616:	681b      	ldr	r3, [r3, #0]
 8028618:	4798      	blx	r3
    if (*currentPresenter)
 802861a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 802861e:	b110      	cbz	r0, 8028626 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8028620:	6803      	ldr	r3, [r0, #0]
 8028622:	689b      	ldr	r3, [r3, #8]
 8028624:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8028626:	68f0      	ldr	r0, [r6, #12]
 8028628:	2100      	movs	r1, #0
 802862a:	f7ff fdb3 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 802862e:	f04f 0b00 	mov.w	fp, #0
 8028632:	4b23      	ldr	r3, [pc, #140]	@ (80286c0 <_ZN23FrontendApplicationBase36gotoMenuLayer2ScreenNoTransitionImplEv+0x140>)
 8028634:	f8c0 b004 	str.w	fp, [r0, #4]
 8028638:	4604      	mov	r4, r0
 802863a:	f880 b008 	strb.w	fp, [r0, #8]
 802863e:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8028640:	68b0      	ldr	r0, [r6, #8]
 8028642:	6803      	ldr	r3, [r0, #0]
 8028644:	4659      	mov	r1, fp
 8028646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028648:	4798      	blx	r3
 802864a:	4605      	mov	r5, r0
 802864c:	f005 f834 	bl	802d6b8 <_ZN14MenuLayer2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8028650:	6870      	ldr	r0, [r6, #4]
 8028652:	6803      	ldr	r3, [r0, #0]
 8028654:	4659      	mov	r1, fp
 8028656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028658:	4798      	blx	r3
 802865a:	4629      	mov	r1, r5
 802865c:	4606      	mov	r6, r0
 802865e:	f004 ffe1 	bl	802d624 <_ZN19MenuLayer2PresenterC1ER14MenuLayer2View>
    model->bind(newPresenter);
 8028662:	4631      	mov	r1, r6
 8028664:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 8028666:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 802866a:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 802866e:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 8028672:	f005 ff53 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 8028676:	682b      	ldr	r3, [r5, #0]
     */
    virtual void deactivate();

    virtual ~MenuLayer2Presenter() {}

    void bind(Model* m) { model = m; }
 8028678:	f8c6 a010 	str.w	sl, [r6, #16]
 802867c:	4628      	mov	r0, r5
 802867e:	68db      	ldr	r3, [r3, #12]
 8028680:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8028682:	4798      	blx	r3
    newPresenter->activate();
 8028684:	6833      	ldr	r3, [r6, #0]
 8028686:	4630      	mov	r0, r6
 8028688:	681b      	ldr	r3, [r3, #0]
 802868a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 802868c:	4621      	mov	r1, r4
 802868e:	4628      	mov	r0, r5
 8028690:	f00e f8ea 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8028694:	6823      	ldr	r3, [r4, #0]
 8028696:	4620      	mov	r0, r4
 8028698:	691b      	ldr	r3, [r3, #16]
 802869a:	4798      	blx	r3
    newTransition->invalidate();
 802869c:	6823      	ldr	r3, [r4, #0]
 802869e:	695b      	ldr	r3, [r3, #20]
 80286a0:	4620      	mov	r0, r4
}
 80286a2:	b001      	add	sp, #4
 80286a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286a8:	4718      	bx	r3
 80286aa:	bf00      	nop
 80286ac:	080403c7 	.word	0x080403c7
 80286b0:	0804086b 	.word	0x0804086b
 80286b4:	08040533 	.word	0x08040533
 80286b8:	08040575 	.word	0x08040575
 80286bc:	08040618 	.word	0x08040618
 80286c0:	08042734 	.word	0x08042734
 80286c4:	2000b920 	.word	0x2000b920
 80286c8:	2000b91c 	.word	0x2000b91c

080286cc <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv>:
{
 80286cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<MenuLayer1View, MenuLayer1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80286d0:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80286d4:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80286d6:	68b0      	ldr	r0, [r6, #8]
 80286d8:	6803      	ldr	r3, [r0, #0]
 80286da:	6a1b      	ldr	r3, [r3, #32]
 80286dc:	4798      	blx	r3
 80286de:	f640 137b 	movw	r3, #2427	@ 0x97b
 80286e2:	4298      	cmp	r0, r3
 80286e4:	d805      	bhi.n	80286f2 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x26>
 80286e6:	4b44      	ldr	r3, [pc, #272]	@ (80287f8 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x12c>)
 80286e8:	4a44      	ldr	r2, [pc, #272]	@ (80287fc <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x130>)
 80286ea:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80286ec:	4844      	ldr	r0, [pc, #272]	@ (8028800 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x134>)
 80286ee:	f013 ff1b 	bl	803c528 <__assert_func>
 80286f2:	6870      	ldr	r0, [r6, #4]
 80286f4:	6803      	ldr	r3, [r0, #0]
 80286f6:	6a1b      	ldr	r3, [r3, #32]
 80286f8:	4798      	blx	r3
 80286fa:	2813      	cmp	r0, #19
 80286fc:	d803      	bhi.n	8028706 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x3a>
 80286fe:	4b41      	ldr	r3, [pc, #260]	@ (8028804 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x138>)
 8028700:	4a3e      	ldr	r2, [pc, #248]	@ (80287fc <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x130>)
 8028702:	21a4      	movs	r1, #164	@ 0xa4
 8028704:	e7f2      	b.n	80286ec <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8028706:	68f0      	ldr	r0, [r6, #12]
 8028708:	6803      	ldr	r3, [r0, #0]
 802870a:	6a1b      	ldr	r3, [r3, #32]
 802870c:	4798      	blx	r3
 802870e:	280b      	cmp	r0, #11
 8028710:	d803      	bhi.n	802871a <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x4e>
 8028712:	4b3d      	ldr	r3, [pc, #244]	@ (8028808 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x13c>)
 8028714:	4a39      	ldr	r2, [pc, #228]	@ (80287fc <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x130>)
 8028716:	21a5      	movs	r1, #165	@ 0xa5
 8028718:	e7e8      	b.n	80286ec <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 802871a:	f00c faf7 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 802871e:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8028810 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x144>
 8028722:	3004      	adds	r0, #4
 8028724:	f00c fb30 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8028728:	f8d9 0000 	ldr.w	r0, [r9]
 802872c:	b110      	cbz	r0, 8028734 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 802872e:	6803      	ldr	r3, [r0, #0]
 8028730:	68db      	ldr	r3, [r3, #12]
 8028732:	4798      	blx	r3
    if (*currentTrans)
 8028734:	f8d9 0000 	ldr.w	r0, [r9]
 8028738:	b110      	cbz	r0, 8028740 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 802873a:	6803      	ldr	r3, [r0, #0]
 802873c:	681b      	ldr	r3, [r3, #0]
 802873e:	4798      	blx	r3
    if (*currentScreen)
 8028740:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8028814 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x148>
 8028744:	f8d8 0000 	ldr.w	r0, [r8]
 8028748:	b110      	cbz	r0, 8028750 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 802874a:	6803      	ldr	r3, [r0, #0]
 802874c:	695b      	ldr	r3, [r3, #20]
 802874e:	4798      	blx	r3
    if (*currentPresenter)
 8028750:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028754:	b110      	cbz	r0, 802875c <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8028756:	6803      	ldr	r3, [r0, #0]
 8028758:	685b      	ldr	r3, [r3, #4]
 802875a:	4798      	blx	r3
    if (*currentScreen)
 802875c:	f8d8 0000 	ldr.w	r0, [r8]
 8028760:	b110      	cbz	r0, 8028768 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8028762:	6803      	ldr	r3, [r0, #0]
 8028764:	681b      	ldr	r3, [r3, #0]
 8028766:	4798      	blx	r3
    if (*currentPresenter)
 8028768:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 802876c:	b110      	cbz	r0, 8028774 <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 802876e:	6803      	ldr	r3, [r0, #0]
 8028770:	689b      	ldr	r3, [r3, #8]
 8028772:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8028774:	68f0      	ldr	r0, [r6, #12]
 8028776:	2100      	movs	r1, #0
 8028778:	f7ff fd0c 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 802877c:	f04f 0b00 	mov.w	fp, #0
 8028780:	4b22      	ldr	r3, [pc, #136]	@ (802880c <_ZN23FrontendApplicationBase36gotoMenuLayer1ScreenNoTransitionImplEv+0x140>)
 8028782:	f8c0 b004 	str.w	fp, [r0, #4]
 8028786:	4604      	mov	r4, r0
 8028788:	f880 b008 	strb.w	fp, [r0, #8]
 802878c:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 802878e:	68b0      	ldr	r0, [r6, #8]
 8028790:	6803      	ldr	r3, [r0, #0]
 8028792:	4659      	mov	r1, fp
 8028794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028796:	4798      	blx	r3
 8028798:	4605      	mov	r5, r0
 802879a:	f004 fe6b 	bl	802d474 <_ZN14MenuLayer1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 802879e:	6870      	ldr	r0, [r6, #4]
 80287a0:	6803      	ldr	r3, [r0, #0]
 80287a2:	4659      	mov	r1, fp
 80287a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80287a6:	4798      	blx	r3
 80287a8:	4629      	mov	r1, r5
 80287aa:	4606      	mov	r6, r0
 80287ac:	f004 fe00 	bl	802d3b0 <_ZN19MenuLayer1PresenterC1ER14MenuLayer1View>
    model->bind(newPresenter);
 80287b0:	4631      	mov	r1, r6
 80287b2:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 80287b4:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 80287b8:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80287bc:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 80287c0:	f005 feac 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 80287c4:	682b      	ldr	r3, [r5, #0]
     */
    virtual void deactivate();

    virtual ~MenuLayer1Presenter() {}

    void bind(Model* m) { model = m; }
 80287c6:	f8c6 a010 	str.w	sl, [r6, #16]
 80287ca:	4628      	mov	r0, r5
 80287cc:	68db      	ldr	r3, [r3, #12]
 80287ce:	63ee      	str	r6, [r5, #60]	@ 0x3c
 80287d0:	4798      	blx	r3
    newPresenter->activate();
 80287d2:	6833      	ldr	r3, [r6, #0]
 80287d4:	4630      	mov	r0, r6
 80287d6:	681b      	ldr	r3, [r3, #0]
 80287d8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80287da:	4621      	mov	r1, r4
 80287dc:	4628      	mov	r0, r5
 80287de:	f00e f843 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80287e2:	6823      	ldr	r3, [r4, #0]
 80287e4:	4620      	mov	r0, r4
 80287e6:	691b      	ldr	r3, [r3, #16]
 80287e8:	4798      	blx	r3
    newTransition->invalidate();
 80287ea:	6823      	ldr	r3, [r4, #0]
 80287ec:	695b      	ldr	r3, [r3, #20]
 80287ee:	4620      	mov	r0, r4
}
 80287f0:	b001      	add	sp, #4
 80287f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287f6:	4718      	bx	r3
 80287f8:	080403c7 	.word	0x080403c7
 80287fc:	08040943 	.word	0x08040943
 8028800:	08040533 	.word	0x08040533
 8028804:	08040575 	.word	0x08040575
 8028808:	08040618 	.word	0x08040618
 802880c:	08042734 	.word	0x08042734
 8028810:	2000b920 	.word	0x2000b920
 8028814:	2000b91c 	.word	0x2000b91c

08028818 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv>:
{
 8028818:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<ScreenLCDtestView, ScreenLCDtestPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 802881c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8028820:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8028822:	68b0      	ldr	r0, [r6, #8]
 8028824:	6803      	ldr	r3, [r0, #0]
 8028826:	6a1b      	ldr	r3, [r3, #32]
 8028828:	4798      	blx	r3
 802882a:	f5b0 7f3b 	cmp.w	r0, #748	@ 0x2ec
 802882e:	d205      	bcs.n	802883c <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x24>
 8028830:	4b44      	ldr	r3, [pc, #272]	@ (8028944 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x12c>)
 8028832:	4a45      	ldr	r2, [pc, #276]	@ (8028948 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x130>)
 8028834:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8028836:	4845      	ldr	r0, [pc, #276]	@ (802894c <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x134>)
 8028838:	f013 fe76 	bl	803c528 <__assert_func>
 802883c:	6870      	ldr	r0, [r6, #4]
 802883e:	6803      	ldr	r3, [r0, #0]
 8028840:	6a1b      	ldr	r3, [r3, #32]
 8028842:	4798      	blx	r3
 8028844:	2813      	cmp	r0, #19
 8028846:	d803      	bhi.n	8028850 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x38>
 8028848:	4b41      	ldr	r3, [pc, #260]	@ (8028950 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x138>)
 802884a:	4a3f      	ldr	r2, [pc, #252]	@ (8028948 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x130>)
 802884c:	21a4      	movs	r1, #164	@ 0xa4
 802884e:	e7f2      	b.n	8028836 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8028850:	68f0      	ldr	r0, [r6, #12]
 8028852:	6803      	ldr	r3, [r0, #0]
 8028854:	6a1b      	ldr	r3, [r3, #32]
 8028856:	4798      	blx	r3
 8028858:	280b      	cmp	r0, #11
 802885a:	d803      	bhi.n	8028864 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x4c>
 802885c:	4b3d      	ldr	r3, [pc, #244]	@ (8028954 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x13c>)
 802885e:	4a3a      	ldr	r2, [pc, #232]	@ (8028948 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x130>)
 8028860:	21a5      	movs	r1, #165	@ 0xa5
 8028862:	e7e8      	b.n	8028836 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8028864:	f00c fa52 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8028868:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 802895c <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x144>
 802886c:	3004      	adds	r0, #4
 802886e:	f00c fa8b 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8028872:	f8d9 0000 	ldr.w	r0, [r9]
 8028876:	b110      	cbz	r0, 802887e <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8028878:	6803      	ldr	r3, [r0, #0]
 802887a:	68db      	ldr	r3, [r3, #12]
 802887c:	4798      	blx	r3
    if (*currentTrans)
 802887e:	f8d9 0000 	ldr.w	r0, [r9]
 8028882:	b110      	cbz	r0, 802888a <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8028884:	6803      	ldr	r3, [r0, #0]
 8028886:	681b      	ldr	r3, [r3, #0]
 8028888:	4798      	blx	r3
    if (*currentScreen)
 802888a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028960 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x148>
 802888e:	f8d8 0000 	ldr.w	r0, [r8]
 8028892:	b110      	cbz	r0, 802889a <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8028894:	6803      	ldr	r3, [r0, #0]
 8028896:	695b      	ldr	r3, [r3, #20]
 8028898:	4798      	blx	r3
    if (*currentPresenter)
 802889a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 802889e:	b110      	cbz	r0, 80288a6 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80288a0:	6803      	ldr	r3, [r0, #0]
 80288a2:	685b      	ldr	r3, [r3, #4]
 80288a4:	4798      	blx	r3
    if (*currentScreen)
 80288a6:	f8d8 0000 	ldr.w	r0, [r8]
 80288aa:	b110      	cbz	r0, 80288b2 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80288ac:	6803      	ldr	r3, [r0, #0]
 80288ae:	681b      	ldr	r3, [r3, #0]
 80288b0:	4798      	blx	r3
    if (*currentPresenter)
 80288b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80288b6:	b110      	cbz	r0, 80288be <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80288b8:	6803      	ldr	r3, [r0, #0]
 80288ba:	689b      	ldr	r3, [r3, #8]
 80288bc:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80288be:	68f0      	ldr	r0, [r6, #12]
 80288c0:	2100      	movs	r1, #0
 80288c2:	f7ff fc67 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80288c6:	f04f 0b00 	mov.w	fp, #0
 80288ca:	4b23      	ldr	r3, [pc, #140]	@ (8028958 <_ZN23FrontendApplicationBase39gotoScreenLCDtestScreenNoTransitionImplEv+0x140>)
 80288cc:	f8c0 b004 	str.w	fp, [r0, #4]
 80288d0:	4604      	mov	r4, r0
 80288d2:	f880 b008 	strb.w	fp, [r0, #8]
 80288d6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80288d8:	68b0      	ldr	r0, [r6, #8]
 80288da:	6803      	ldr	r3, [r0, #0]
 80288dc:	4659      	mov	r1, fp
 80288de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80288e0:	4798      	blx	r3
 80288e2:	4605      	mov	r5, r0
 80288e4:	f006 f856 	bl	802e994 <_ZN17ScreenLCDtestViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80288e8:	6870      	ldr	r0, [r6, #4]
 80288ea:	6803      	ldr	r3, [r0, #0]
 80288ec:	4659      	mov	r1, fp
 80288ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80288f0:	4798      	blx	r3
 80288f2:	4629      	mov	r1, r5
 80288f4:	4606      	mov	r6, r0
 80288f6:	f006 f82b 	bl	802e950 <_ZN22ScreenLCDtestPresenterC1ER17ScreenLCDtestView>
    model->bind(newPresenter);
 80288fa:	4631      	mov	r1, r6
 80288fc:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 80288fe:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 8028902:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8028906:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 802890a:	f005 fe07 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 802890e:	682b      	ldr	r3, [r5, #0]
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~ScreenLCDtestPresenter() {}
    void bind(Model* m) { model = m; }
 8028910:	f8c6 a010 	str.w	sl, [r6, #16]
 8028914:	4628      	mov	r0, r5
 8028916:	68db      	ldr	r3, [r3, #12]
 8028918:	63ee      	str	r6, [r5, #60]	@ 0x3c
 802891a:	4798      	blx	r3
    newPresenter->activate();
 802891c:	6833      	ldr	r3, [r6, #0]
 802891e:	4630      	mov	r0, r6
 8028920:	681b      	ldr	r3, [r3, #0]
 8028922:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8028924:	4621      	mov	r1, r4
 8028926:	4628      	mov	r0, r5
 8028928:	f00d ff9e 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 802892c:	6823      	ldr	r3, [r4, #0]
 802892e:	4620      	mov	r0, r4
 8028930:	691b      	ldr	r3, [r3, #16]
 8028932:	4798      	blx	r3
    newTransition->invalidate();
 8028934:	6823      	ldr	r3, [r4, #0]
 8028936:	695b      	ldr	r3, [r3, #20]
 8028938:	4620      	mov	r0, r4
}
 802893a:	b001      	add	sp, #4
 802893c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028940:	4718      	bx	r3
 8028942:	bf00      	nop
 8028944:	080403c7 	.word	0x080403c7
 8028948:	08040a1b 	.word	0x08040a1b
 802894c:	08040533 	.word	0x08040533
 8028950:	08040575 	.word	0x08040575
 8028954:	08040618 	.word	0x08040618
 8028958:	08042734 	.word	0x08042734
 802895c:	2000b920 	.word	0x2000b920
 8028960:	2000b91c 	.word	0x2000b91c

08028964 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv>:
{
 8028964:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<ScreenOutputsTestView, ScreenOutputsTestPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8028968:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 802896c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 802896e:	68b0      	ldr	r0, [r6, #8]
 8028970:	6803      	ldr	r3, [r0, #0]
 8028972:	6a1b      	ldr	r3, [r3, #32]
 8028974:	4798      	blx	r3
 8028976:	f5b0 7f47 	cmp.w	r0, #796	@ 0x31c
 802897a:	d205      	bcs.n	8028988 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x24>
 802897c:	4b44      	ldr	r3, [pc, #272]	@ (8028a90 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x12c>)
 802897e:	4a45      	ldr	r2, [pc, #276]	@ (8028a94 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x130>)
 8028980:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8028982:	4845      	ldr	r0, [pc, #276]	@ (8028a98 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x134>)
 8028984:	f013 fdd0 	bl	803c528 <__assert_func>
 8028988:	6870      	ldr	r0, [r6, #4]
 802898a:	6803      	ldr	r3, [r0, #0]
 802898c:	6a1b      	ldr	r3, [r3, #32]
 802898e:	4798      	blx	r3
 8028990:	2813      	cmp	r0, #19
 8028992:	d803      	bhi.n	802899c <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x38>
 8028994:	4b41      	ldr	r3, [pc, #260]	@ (8028a9c <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x138>)
 8028996:	4a3f      	ldr	r2, [pc, #252]	@ (8028a94 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x130>)
 8028998:	21a4      	movs	r1, #164	@ 0xa4
 802899a:	e7f2      	b.n	8028982 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 802899c:	68f0      	ldr	r0, [r6, #12]
 802899e:	6803      	ldr	r3, [r0, #0]
 80289a0:	6a1b      	ldr	r3, [r3, #32]
 80289a2:	4798      	blx	r3
 80289a4:	280b      	cmp	r0, #11
 80289a6:	d803      	bhi.n	80289b0 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x4c>
 80289a8:	4b3d      	ldr	r3, [pc, #244]	@ (8028aa0 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x13c>)
 80289aa:	4a3a      	ldr	r2, [pc, #232]	@ (8028a94 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x130>)
 80289ac:	21a5      	movs	r1, #165	@ 0xa5
 80289ae:	e7e8      	b.n	8028982 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 80289b0:	f00c f9ac 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80289b4:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8028aa8 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x144>
 80289b8:	3004      	adds	r0, #4
 80289ba:	f00c f9e5 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80289be:	f8d9 0000 	ldr.w	r0, [r9]
 80289c2:	b110      	cbz	r0, 80289ca <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80289c4:	6803      	ldr	r3, [r0, #0]
 80289c6:	68db      	ldr	r3, [r3, #12]
 80289c8:	4798      	blx	r3
    if (*currentTrans)
 80289ca:	f8d9 0000 	ldr.w	r0, [r9]
 80289ce:	b110      	cbz	r0, 80289d6 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80289d0:	6803      	ldr	r3, [r0, #0]
 80289d2:	681b      	ldr	r3, [r3, #0]
 80289d4:	4798      	blx	r3
    if (*currentScreen)
 80289d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8028aac <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x148>
 80289da:	f8d8 0000 	ldr.w	r0, [r8]
 80289de:	b110      	cbz	r0, 80289e6 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80289e0:	6803      	ldr	r3, [r0, #0]
 80289e2:	695b      	ldr	r3, [r3, #20]
 80289e4:	4798      	blx	r3
    if (*currentPresenter)
 80289e6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80289ea:	b110      	cbz	r0, 80289f2 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80289ec:	6803      	ldr	r3, [r0, #0]
 80289ee:	685b      	ldr	r3, [r3, #4]
 80289f0:	4798      	blx	r3
    if (*currentScreen)
 80289f2:	f8d8 0000 	ldr.w	r0, [r8]
 80289f6:	b110      	cbz	r0, 80289fe <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80289f8:	6803      	ldr	r3, [r0, #0]
 80289fa:	681b      	ldr	r3, [r3, #0]
 80289fc:	4798      	blx	r3
    if (*currentPresenter)
 80289fe:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028a02:	b110      	cbz	r0, 8028a0a <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8028a04:	6803      	ldr	r3, [r0, #0]
 8028a06:	689b      	ldr	r3, [r3, #8]
 8028a08:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8028a0a:	68f0      	ldr	r0, [r6, #12]
 8028a0c:	2100      	movs	r1, #0
 8028a0e:	f7ff fbc1 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8028a12:	f04f 0b00 	mov.w	fp, #0
 8028a16:	4b23      	ldr	r3, [pc, #140]	@ (8028aa4 <_ZN23FrontendApplicationBase43gotoScreenOutputsTestScreenNoTransitionImplEv+0x140>)
 8028a18:	f8c0 b004 	str.w	fp, [r0, #4]
 8028a1c:	4604      	mov	r4, r0
 8028a1e:	f880 b008 	strb.w	fp, [r0, #8]
 8028a22:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8028a24:	68b0      	ldr	r0, [r6, #8]
 8028a26:	6803      	ldr	r3, [r0, #0]
 8028a28:	4659      	mov	r1, fp
 8028a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028a2c:	4798      	blx	r3
 8028a2e:	4605      	mov	r5, r0
 8028a30:	f006 f860 	bl	802eaf4 <_ZN21ScreenOutputsTestViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8028a34:	6870      	ldr	r0, [r6, #4]
 8028a36:	6803      	ldr	r3, [r0, #0]
 8028a38:	4659      	mov	r1, fp
 8028a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028a3c:	4798      	blx	r3
 8028a3e:	4629      	mov	r1, r5
 8028a40:	4606      	mov	r6, r0
 8028a42:	f006 f835 	bl	802eab0 <_ZN26ScreenOutputsTestPresenterC1ER21ScreenOutputsTestView>
    model->bind(newPresenter);
 8028a46:	4631      	mov	r1, r6
 8028a48:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 8028a4a:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 8028a4e:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8028a52:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 8028a56:	f005 fd61 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 8028a5a:	682b      	ldr	r3, [r5, #0]
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~ScreenOutputsTestPresenter() {}
    void bind(Model* m) { model = m; }
 8028a5c:	f8c6 a010 	str.w	sl, [r6, #16]
 8028a60:	4628      	mov	r0, r5
 8028a62:	68db      	ldr	r3, [r3, #12]
 8028a64:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8028a66:	4798      	blx	r3
    newPresenter->activate();
 8028a68:	6833      	ldr	r3, [r6, #0]
 8028a6a:	4630      	mov	r0, r6
 8028a6c:	681b      	ldr	r3, [r3, #0]
 8028a6e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8028a70:	4621      	mov	r1, r4
 8028a72:	4628      	mov	r0, r5
 8028a74:	f00d fef8 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8028a78:	6823      	ldr	r3, [r4, #0]
 8028a7a:	4620      	mov	r0, r4
 8028a7c:	691b      	ldr	r3, [r3, #16]
 8028a7e:	4798      	blx	r3
    newTransition->invalidate();
 8028a80:	6823      	ldr	r3, [r4, #0]
 8028a82:	695b      	ldr	r3, [r3, #20]
 8028a84:	4620      	mov	r0, r4
}
 8028a86:	b001      	add	sp, #4
 8028a88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a8c:	4718      	bx	r3
 8028a8e:	bf00      	nop
 8028a90:	080403c7 	.word	0x080403c7
 8028a94:	08040af9 	.word	0x08040af9
 8028a98:	08040533 	.word	0x08040533
 8028a9c:	08040575 	.word	0x08040575
 8028aa0:	08040618 	.word	0x08040618
 8028aa4:	08042734 	.word	0x08042734
 8028aa8:	2000b920 	.word	0x2000b920
 8028aac:	2000b91c 	.word	0x2000b91c

08028ab0 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv>:
{
 8028ab0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<ScreenTestHomeView, ScreenTestHomePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8028ab4:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8028ab8:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8028aba:	68b0      	ldr	r0, [r6, #8]
 8028abc:	6803      	ldr	r3, [r0, #0]
 8028abe:	6a1b      	ldr	r3, [r3, #32]
 8028ac0:	4798      	blx	r3
 8028ac2:	f640 3313 	movw	r3, #2835	@ 0xb13
 8028ac6:	4298      	cmp	r0, r3
 8028ac8:	d805      	bhi.n	8028ad6 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x26>
 8028aca:	4b44      	ldr	r3, [pc, #272]	@ (8028bdc <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x12c>)
 8028acc:	4a44      	ldr	r2, [pc, #272]	@ (8028be0 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x130>)
 8028ace:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8028ad0:	4844      	ldr	r0, [pc, #272]	@ (8028be4 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x134>)
 8028ad2:	f013 fd29 	bl	803c528 <__assert_func>
 8028ad6:	6870      	ldr	r0, [r6, #4]
 8028ad8:	6803      	ldr	r3, [r0, #0]
 8028ada:	6a1b      	ldr	r3, [r3, #32]
 8028adc:	4798      	blx	r3
 8028ade:	2813      	cmp	r0, #19
 8028ae0:	d803      	bhi.n	8028aea <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x3a>
 8028ae2:	4b41      	ldr	r3, [pc, #260]	@ (8028be8 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x138>)
 8028ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8028be0 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x130>)
 8028ae6:	21a4      	movs	r1, #164	@ 0xa4
 8028ae8:	e7f2      	b.n	8028ad0 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8028aea:	68f0      	ldr	r0, [r6, #12]
 8028aec:	6803      	ldr	r3, [r0, #0]
 8028aee:	6a1b      	ldr	r3, [r3, #32]
 8028af0:	4798      	blx	r3
 8028af2:	280b      	cmp	r0, #11
 8028af4:	d803      	bhi.n	8028afe <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x4e>
 8028af6:	4b3d      	ldr	r3, [pc, #244]	@ (8028bec <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x13c>)
 8028af8:	4a39      	ldr	r2, [pc, #228]	@ (8028be0 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x130>)
 8028afa:	21a5      	movs	r1, #165	@ 0xa5
 8028afc:	e7e8      	b.n	8028ad0 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8028afe:	f00c f905 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8028b02:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8028bf4 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x144>
 8028b06:	3004      	adds	r0, #4
 8028b08:	f00c f93e 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8028b0c:	f8d9 0000 	ldr.w	r0, [r9]
 8028b10:	b110      	cbz	r0, 8028b18 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8028b12:	6803      	ldr	r3, [r0, #0]
 8028b14:	68db      	ldr	r3, [r3, #12]
 8028b16:	4798      	blx	r3
    if (*currentTrans)
 8028b18:	f8d9 0000 	ldr.w	r0, [r9]
 8028b1c:	b110      	cbz	r0, 8028b24 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8028b1e:	6803      	ldr	r3, [r0, #0]
 8028b20:	681b      	ldr	r3, [r3, #0]
 8028b22:	4798      	blx	r3
    if (*currentScreen)
 8028b24:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8028bf8 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x148>
 8028b28:	f8d8 0000 	ldr.w	r0, [r8]
 8028b2c:	b110      	cbz	r0, 8028b34 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8028b2e:	6803      	ldr	r3, [r0, #0]
 8028b30:	695b      	ldr	r3, [r3, #20]
 8028b32:	4798      	blx	r3
    if (*currentPresenter)
 8028b34:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028b38:	b110      	cbz	r0, 8028b40 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8028b3a:	6803      	ldr	r3, [r0, #0]
 8028b3c:	685b      	ldr	r3, [r3, #4]
 8028b3e:	4798      	blx	r3
    if (*currentScreen)
 8028b40:	f8d8 0000 	ldr.w	r0, [r8]
 8028b44:	b110      	cbz	r0, 8028b4c <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8028b46:	6803      	ldr	r3, [r0, #0]
 8028b48:	681b      	ldr	r3, [r3, #0]
 8028b4a:	4798      	blx	r3
    if (*currentPresenter)
 8028b4c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028b50:	b110      	cbz	r0, 8028b58 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8028b52:	6803      	ldr	r3, [r0, #0]
 8028b54:	689b      	ldr	r3, [r3, #8]
 8028b56:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8028b58:	68f0      	ldr	r0, [r6, #12]
 8028b5a:	2100      	movs	r1, #0
 8028b5c:	f7ff fb1a 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8028b60:	f04f 0b00 	mov.w	fp, #0
 8028b64:	4b22      	ldr	r3, [pc, #136]	@ (8028bf0 <_ZN23FrontendApplicationBase40gotoScreenTestHomeScreenNoTransitionImplEv+0x140>)
 8028b66:	f8c0 b004 	str.w	fp, [r0, #4]
 8028b6a:	4604      	mov	r4, r0
 8028b6c:	f880 b008 	strb.w	fp, [r0, #8]
 8028b70:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8028b72:	68b0      	ldr	r0, [r6, #8]
 8028b74:	6803      	ldr	r3, [r0, #0]
 8028b76:	4659      	mov	r1, fp
 8028b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028b7a:	4798      	blx	r3
 8028b7c:	4605      	mov	r5, r0
 8028b7e:	f006 f865 	bl	802ec4c <_ZN18ScreenTestHomeViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8028b82:	6870      	ldr	r0, [r6, #4]
 8028b84:	6803      	ldr	r3, [r0, #0]
 8028b86:	4659      	mov	r1, fp
 8028b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028b8a:	4798      	blx	r3
 8028b8c:	4629      	mov	r1, r5
 8028b8e:	4606      	mov	r6, r0
 8028b90:	f006 f822 	bl	802ebd8 <_ZN23ScreenTestHomePresenterC1ER18ScreenTestHomeView>
    model->bind(newPresenter);
 8028b94:	4631      	mov	r1, r6
 8028b96:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 8028b98:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 8028b9c:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8028ba0:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 8028ba4:	f005 fcba 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 8028ba8:	682b      	ldr	r3, [r5, #0]
     */
    virtual void deactivate();

    virtual ~ScreenTestHomePresenter() {}

    void bind(Model* m) { model = m; }
 8028baa:	f8c6 a010 	str.w	sl, [r6, #16]
 8028bae:	4628      	mov	r0, r5
 8028bb0:	68db      	ldr	r3, [r3, #12]
 8028bb2:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8028bb4:	4798      	blx	r3
    newPresenter->activate();
 8028bb6:	6833      	ldr	r3, [r6, #0]
 8028bb8:	4630      	mov	r0, r6
 8028bba:	681b      	ldr	r3, [r3, #0]
 8028bbc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8028bbe:	4621      	mov	r1, r4
 8028bc0:	4628      	mov	r0, r5
 8028bc2:	f00d fe51 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8028bc6:	6823      	ldr	r3, [r4, #0]
 8028bc8:	4620      	mov	r0, r4
 8028bca:	691b      	ldr	r3, [r3, #16]
 8028bcc:	4798      	blx	r3
    newTransition->invalidate();
 8028bce:	6823      	ldr	r3, [r4, #0]
 8028bd0:	695b      	ldr	r3, [r3, #20]
 8028bd2:	4620      	mov	r0, r4
}
 8028bd4:	b001      	add	sp, #4
 8028bd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028bda:	4718      	bx	r3
 8028bdc:	080403c7 	.word	0x080403c7
 8028be0:	08040bdf 	.word	0x08040bdf
 8028be4:	08040533 	.word	0x08040533
 8028be8:	08040575 	.word	0x08040575
 8028bec:	08040618 	.word	0x08040618
 8028bf0:	08042734 	.word	0x08042734
 8028bf4:	2000b920 	.word	0x2000b920
 8028bf8:	2000b91c 	.word	0x2000b91c

08028bfc <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv>:
{
 8028bfc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<ScreenTrailerView, ScreenTrailerPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8028c00:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8028c04:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8028c06:	68b0      	ldr	r0, [r6, #8]
 8028c08:	6803      	ldr	r3, [r0, #0]
 8028c0a:	6a1b      	ldr	r3, [r3, #32]
 8028c0c:	4798      	blx	r3
 8028c0e:	f640 3343 	movw	r3, #2883	@ 0xb43
 8028c12:	4298      	cmp	r0, r3
 8028c14:	d805      	bhi.n	8028c22 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x26>
 8028c16:	4b44      	ldr	r3, [pc, #272]	@ (8028d28 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x12c>)
 8028c18:	4a44      	ldr	r2, [pc, #272]	@ (8028d2c <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x130>)
 8028c1a:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8028c1c:	4844      	ldr	r0, [pc, #272]	@ (8028d30 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x134>)
 8028c1e:	f013 fc83 	bl	803c528 <__assert_func>
 8028c22:	6870      	ldr	r0, [r6, #4]
 8028c24:	6803      	ldr	r3, [r0, #0]
 8028c26:	6a1b      	ldr	r3, [r3, #32]
 8028c28:	4798      	blx	r3
 8028c2a:	2813      	cmp	r0, #19
 8028c2c:	d803      	bhi.n	8028c36 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x3a>
 8028c2e:	4b41      	ldr	r3, [pc, #260]	@ (8028d34 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x138>)
 8028c30:	4a3e      	ldr	r2, [pc, #248]	@ (8028d2c <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x130>)
 8028c32:	21a4      	movs	r1, #164	@ 0xa4
 8028c34:	e7f2      	b.n	8028c1c <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8028c36:	68f0      	ldr	r0, [r6, #12]
 8028c38:	6803      	ldr	r3, [r0, #0]
 8028c3a:	6a1b      	ldr	r3, [r3, #32]
 8028c3c:	4798      	blx	r3
 8028c3e:	280b      	cmp	r0, #11
 8028c40:	d803      	bhi.n	8028c4a <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x4e>
 8028c42:	4b3d      	ldr	r3, [pc, #244]	@ (8028d38 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x13c>)
 8028c44:	4a39      	ldr	r2, [pc, #228]	@ (8028d2c <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x130>)
 8028c46:	21a5      	movs	r1, #165	@ 0xa5
 8028c48:	e7e8      	b.n	8028c1c <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 8028c4a:	f00c f85f 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8028c4e:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8028d40 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x144>
 8028c52:	3004      	adds	r0, #4
 8028c54:	f00c f898 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8028c58:	f8d9 0000 	ldr.w	r0, [r9]
 8028c5c:	b110      	cbz	r0, 8028c64 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8028c5e:	6803      	ldr	r3, [r0, #0]
 8028c60:	68db      	ldr	r3, [r3, #12]
 8028c62:	4798      	blx	r3
    if (*currentTrans)
 8028c64:	f8d9 0000 	ldr.w	r0, [r9]
 8028c68:	b110      	cbz	r0, 8028c70 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8028c6a:	6803      	ldr	r3, [r0, #0]
 8028c6c:	681b      	ldr	r3, [r3, #0]
 8028c6e:	4798      	blx	r3
    if (*currentScreen)
 8028c70:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8028d44 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x148>
 8028c74:	f8d8 0000 	ldr.w	r0, [r8]
 8028c78:	b110      	cbz	r0, 8028c80 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8028c7a:	6803      	ldr	r3, [r0, #0]
 8028c7c:	695b      	ldr	r3, [r3, #20]
 8028c7e:	4798      	blx	r3
    if (*currentPresenter)
 8028c80:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028c84:	b110      	cbz	r0, 8028c8c <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8028c86:	6803      	ldr	r3, [r0, #0]
 8028c88:	685b      	ldr	r3, [r3, #4]
 8028c8a:	4798      	blx	r3
    if (*currentScreen)
 8028c8c:	f8d8 0000 	ldr.w	r0, [r8]
 8028c90:	b110      	cbz	r0, 8028c98 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8028c92:	6803      	ldr	r3, [r0, #0]
 8028c94:	681b      	ldr	r3, [r3, #0]
 8028c96:	4798      	blx	r3
    if (*currentPresenter)
 8028c98:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8028c9c:	b110      	cbz	r0, 8028ca4 <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8028c9e:	6803      	ldr	r3, [r0, #0]
 8028ca0:	689b      	ldr	r3, [r3, #8]
 8028ca2:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8028ca4:	68f0      	ldr	r0, [r6, #12]
 8028ca6:	2100      	movs	r1, #0
 8028ca8:	f7ff fa74 	bl	8028194 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8028cac:	f04f 0b00 	mov.w	fp, #0
 8028cb0:	4b22      	ldr	r3, [pc, #136]	@ (8028d3c <_ZN23FrontendApplicationBase39gotoScreenTrailerScreenNoTransitionImplEv+0x140>)
 8028cb2:	f8c0 b004 	str.w	fp, [r0, #4]
 8028cb6:	4604      	mov	r4, r0
 8028cb8:	f880 b008 	strb.w	fp, [r0, #8]
 8028cbc:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8028cbe:	68b0      	ldr	r0, [r6, #8]
 8028cc0:	6803      	ldr	r3, [r0, #0]
 8028cc2:	4659      	mov	r1, fp
 8028cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028cc6:	4798      	blx	r3
 8028cc8:	4605      	mov	r5, r0
 8028cca:	f006 fbd7 	bl	802f47c <_ZN17ScreenTrailerViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8028cce:	6870      	ldr	r0, [r6, #4]
 8028cd0:	6803      	ldr	r3, [r0, #0]
 8028cd2:	4659      	mov	r1, fp
 8028cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8028cd6:	4798      	blx	r3
 8028cd8:	4629      	mov	r1, r5
 8028cda:	4606      	mov	r6, r0
 8028cdc:	f006 fbac 	bl	802f438 <_ZN22ScreenTrailerPresenterC1ER17ScreenTrailerView>
    model->bind(newPresenter);
 8028ce0:	4631      	mov	r1, r6
 8028ce2:	4650      	mov	r0, sl
    *currentPresenter = newPresenter;
 8028ce4:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    *currentTrans = newTransition;
 8028ce8:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8028cec:	f8c8 5000 	str.w	r5, [r8]
    model->bind(newPresenter);
 8028cf0:	f005 fc14 	bl	802e51c <_ZN5Model4bindEPv>
    newScreen->setupScreen();
 8028cf4:	682b      	ldr	r3, [r5, #0]
     */
    virtual void deactivate();

    virtual ~ScreenTrailerPresenter() {}

    void bind(Model* m) { model = m; }
 8028cf6:	f8c6 a010 	str.w	sl, [r6, #16]
 8028cfa:	4628      	mov	r0, r5
 8028cfc:	68db      	ldr	r3, [r3, #12]
 8028cfe:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8028d00:	4798      	blx	r3
    newPresenter->activate();
 8028d02:	6833      	ldr	r3, [r6, #0]
 8028d04:	4630      	mov	r0, r6
 8028d06:	681b      	ldr	r3, [r3, #0]
 8028d08:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8028d0a:	4621      	mov	r1, r4
 8028d0c:	4628      	mov	r0, r5
 8028d0e:	f00d fdab 	bl	8036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8028d12:	6823      	ldr	r3, [r4, #0]
 8028d14:	4620      	mov	r0, r4
 8028d16:	691b      	ldr	r3, [r3, #16]
 8028d18:	4798      	blx	r3
    newTransition->invalidate();
 8028d1a:	6823      	ldr	r3, [r4, #0]
 8028d1c:	695b      	ldr	r3, [r3, #20]
 8028d1e:	4620      	mov	r0, r4
}
 8028d20:	b001      	add	sp, #4
 8028d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d26:	4718      	bx	r3
 8028d28:	080403c7 	.word	0x080403c7
 8028d2c:	08040cbf 	.word	0x08040cbf
 8028d30:	08040533 	.word	0x08040533
 8028d34:	08040575 	.word	0x08040575
 8028d38:	08040618 	.word	0x08040618
 8028d3c:	08042734 	.word	0x08042734
 8028d40:	2000b920 	.word	0x2000b920
 8028d44:	2000b91c 	.word	0x2000b91c

08028d48 <_ZN8touchgfx8Drawable13getFirstChildEv>:
    }
 8028d48:	2000      	movs	r0, #0
 8028d4a:	4770      	bx	lr

08028d4c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8028d4c:	8081      	strh	r1, [r0, #4]
    }
 8028d4e:	4770      	bx	lr

08028d50 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8028d50:	80c1      	strh	r1, [r0, #6]
    }
 8028d52:	4770      	bx	lr

08028d54 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8028d54:	8101      	strh	r1, [r0, #8]
    }
 8028d56:	4770      	bx	lr

08028d58 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8028d58:	8141      	strh	r1, [r0, #10]
    }
 8028d5a:	4770      	bx	lr

08028d5c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8028d5c:	4770      	bx	lr

08028d5e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8028d5e:	4770      	bx	lr

08028d60 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8028d60:	4770      	bx	lr

08028d62 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8028d62:	4770      	bx	lr

08028d64 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8028d64:	4770      	bx	lr

08028d66 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8028d66:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8028d68:	88c4      	ldrh	r4, [r0, #6]
 8028d6a:	6803      	ldr	r3, [r0, #0]
 8028d6c:	1b12      	subs	r2, r2, r4
 8028d6e:	8884      	ldrh	r4, [r0, #4]
 8028d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8028d72:	1b09      	subs	r1, r1, r4
 8028d74:	b212      	sxth	r2, r2
    }
 8028d76:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8028d7a:	b209      	sxth	r1, r1
 8028d7c:	4718      	bx	r3

08028d7e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8028d7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028d82:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8028d84:	f04f 33ff 	mov.w	r3, #4294967295
 8028d88:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8028d8a:	6813      	ldr	r3, [r2, #0]
 8028d8c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8028d8e:	6010      	str	r0, [r2, #0]
    }
 8028d90:	4770      	bx	lr

08028d92 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8028d92:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8028d94:	4770      	bx	lr

08028d96 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8028d96:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8028d9a:	b112      	cbz	r2, 8028da2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8028d9c:	6803      	ldr	r3, [r0, #0]
 8028d9e:	695b      	ldr	r3, [r3, #20]
 8028da0:	4718      	bx	r3
    }
 8028da2:	4770      	bx	lr

08028da4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8028da4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8028da8:	b11a      	cbz	r2, 8028db2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8028daa:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8028dae:	b102      	cbz	r2, 8028db2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8028db0:	6018      	str	r0, [r3, #0]
        }
    }
 8028db2:	4770      	bx	lr

08028db4 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8028db4:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8028db6:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8028db8:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8028dba:	466d      	mov	r5, sp
        rect.width = width;
 8028dbc:	8101      	strh	r1, [r0, #8]
 8028dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8028dc2:	4601      	mov	r1, r0
    virtual void setWidth(int16_t width)
 8028dc4:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8028dc6:	4628      	mov	r0, r5
 8028dc8:	4798      	blx	r3
 8028dca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8028dce:	343c      	adds	r4, #60	@ 0x3c
 8028dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8028dd4:	b005      	add	sp, #20
 8028dd6:	bd30      	pop	{r4, r5, pc}

08028dd8 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8028dd8:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8028dda:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8028ddc:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8028dde:	466d      	mov	r5, sp
        rect.height = height;
 8028de0:	8141      	strh	r1, [r0, #10]
 8028de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8028de6:	4601      	mov	r1, r0
    virtual void setHeight(int16_t height)
 8028de8:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8028dea:	4628      	mov	r0, r5
 8028dec:	4798      	blx	r3
 8028dee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8028df2:	343c      	adds	r4, #60	@ 0x3c
 8028df4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8028df8:	b005      	add	sp, #20
 8028dfa:	bd30      	pop	{r4, r5, pc}

08028dfc <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8028dfc:	2200      	movs	r2, #0
 8028dfe:	8002      	strh	r2, [r0, #0]
 8028e00:	8042      	strh	r2, [r0, #2]
 8028e02:	8082      	strh	r2, [r0, #4]
 8028e04:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8028e06:	4770      	bx	lr

08028e08 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8028e08:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8028e0c:	4770      	bx	lr

08028e0e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8028e0e:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 8028e10:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8028e12:	4604      	mov	r4, r0
        setX(x);
 8028e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8028e16:	4615      	mov	r5, r2
        setX(x);
 8028e18:	4798      	blx	r3
        setBaselineY(baselineY);
 8028e1a:	6823      	ldr	r3, [r4, #0]
 8028e1c:	4629      	mov	r1, r5
 8028e1e:	4620      	mov	r0, r4
 8028e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8028e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8028e26:	4718      	bx	r3

08028e28 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8028e28:	2000      	movs	r0, #0
 8028e2a:	4770      	bx	lr

08028e2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8028e2c:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8028e2e:	4770      	bx	lr

08028e30 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8028e30:	4770      	bx	lr

08028e32 <_ZN21MenuItemContainerBaseD1Ev>:
}

MenuItemContainerBase::~MenuItemContainerBase()
{

}
 8028e32:	4770      	bx	lr

08028e34 <_ZN21MenuItemContainerBase10initializeEv>:

void MenuItemContainerBase::initialize()
{

}
 8028e34:	4770      	bx	lr

08028e36 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8028e36:	b510      	push	{r4, lr}
 8028e38:	214c      	movs	r1, #76	@ 0x4c
 8028e3a:	4604      	mov	r4, r0
 8028e3c:	f013 fb55 	bl	803c4ea <_ZdlPvj>
 8028e40:	4620      	mov	r0, r4
 8028e42:	bd10      	pop	{r4, pc}

08028e44 <_ZN21MenuItemContainerBaseD0Ev>:
MenuItemContainerBase::~MenuItemContainerBase()
 8028e44:	b510      	push	{r4, lr}
}
 8028e46:	21ec      	movs	r1, #236	@ 0xec
MenuItemContainerBase::~MenuItemContainerBase()
 8028e48:	4604      	mov	r4, r0
}
 8028e4a:	f013 fb4e 	bl	803c4ea <_ZdlPvj>
 8028e4e:	4620      	mov	r0, r4
 8028e50:	bd10      	pop	{r4, pc}

08028e52 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8028e52:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8028e54:	f7ff ff9f 	bl	8028d96 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8028e58:	bd08      	pop	{r3, pc}
	...

08028e5c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8028e5c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8028e5e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8028e60:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8028e62:	4b12      	ldr	r3, [pc, #72]	@ (8028eac <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8028e64:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 8028e66:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8028e68:	b28d      	uxth	r5, r1
 8028e6a:	b92b      	cbnz	r3, 8028e78 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8028e6c:	4b10      	ldr	r3, [pc, #64]	@ (8028eb0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8028e6e:	4a11      	ldr	r2, [pc, #68]	@ (8028eb4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8028e70:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8028e72:	4811      	ldr	r0, [pc, #68]	@ (8028eb8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8028e74:	f013 fb58 	bl	803c528 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8028e78:	4910      	ldr	r1, [pc, #64]	@ (8028ebc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8028e7a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8028e7c:	8809      	ldrh	r1, [r1, #0]
 8028e7e:	4291      	cmp	r1, r2
 8028e80:	d803      	bhi.n	8028e8a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8028e82:	4b0f      	ldr	r3, [pc, #60]	@ (8028ec0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8028e84:	4a0b      	ldr	r2, [pc, #44]	@ (8028eb4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8028e86:	216d      	movs	r1, #109	@ 0x6d
 8028e88:	e7f3      	b.n	8028e72 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8028e8a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8028e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8028ec4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8028e90:	681b      	ldr	r3, [r3, #0]
 8028e92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8028e96:	6803      	ldr	r3, [r0, #0]
 8028e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028e9a:	4798      	blx	r3
 8028e9c:	1a29      	subs	r1, r5, r0
 8028e9e:	4633      	mov	r3, r6
 8028ea0:	4620      	mov	r0, r4
 8028ea2:	b209      	sxth	r1, r1
    }
 8028ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8028ea8:	4718      	bx	r3
 8028eaa:	bf00      	nop
 8028eac:	2000b930 	.word	0x2000b930
 8028eb0:	08040d9d 	.word	0x08040d9d
 8028eb4:	08040ddf 	.word	0x08040ddf
 8028eb8:	08040e1a 	.word	0x08040e1a
 8028ebc:	2000b934 	.word	0x2000b934
 8028ec0:	08040e5c 	.word	0x08040e5c
 8028ec4:	2000b938 	.word	0x2000b938

08028ec8 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8028ec8:	2200      	movs	r2, #0
 8028eca:	f04f 31ff 	mov.w	r1, #4294967295
 8028ece:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8028ed2:	6082      	str	r2, [r0, #8]
    }
 8028ed4:	4770      	bx	lr
	...

08028ed8 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8028ed8:	4a07      	ldr	r2, [pc, #28]	@ (8028ef8 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8028eda:	6002      	str	r2, [r0, #0]
 8028edc:	2200      	movs	r2, #0
 8028ede:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8028ee2:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8028ee6:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8028eea:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8028eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8028ef2:	8482      	strh	r2, [r0, #36]	@ 0x24
    }
 8028ef4:	4770      	bx	lr
 8028ef6:	bf00      	nop
 8028ef8:	0804392c 	.word	0x0804392c

08028efc <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8028efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028f00:	461d      	mov	r5, r3
        setX(x);
 8028f02:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8028f04:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8028f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8028f0a:	4604      	mov	r4, r0
 8028f0c:	4616      	mov	r6, r2
        setX(x);
 8028f0e:	4798      	blx	r3
        setY(y);
 8028f10:	6823      	ldr	r3, [r4, #0]
 8028f12:	4631      	mov	r1, r6
 8028f14:	4620      	mov	r0, r4
 8028f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028f18:	4798      	blx	r3
        setWidth(width);
 8028f1a:	6823      	ldr	r3, [r4, #0]
 8028f1c:	4629      	mov	r1, r5
 8028f1e:	4620      	mov	r0, r4
 8028f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028f22:	4798      	blx	r3
        setHeight(height);
 8028f24:	6823      	ldr	r3, [r4, #0]
 8028f26:	4639      	mov	r1, r7
 8028f28:	4620      	mov	r0, r4
 8028f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8028f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8028f30:	4718      	bx	r3
	...

08028f34 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8028f34:	b510      	push	{r4, lr}
        : Widget(), alpha(255), color(0)
 8028f36:	2226      	movs	r2, #38	@ 0x26
    Box()
 8028f38:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8028f3a:	2100      	movs	r1, #0
 8028f3c:	f014 fab2 	bl	803d4a4 <memset>
class Widget : public Drawable
 8028f40:	4620      	mov	r0, r4
 8028f42:	f7ff ffc9 	bl	8028ed8 <_ZN8touchgfx8DrawableC1Ev>
 8028f46:	4b04      	ldr	r3, [pc, #16]	@ (8028f58 <_ZN8touchgfx3BoxC1Ev+0x24>)
 8028f48:	6023      	str	r3, [r4, #0]
 8028f4a:	23ff      	movs	r3, #255	@ 0xff
 8028f4c:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        : color(col)
 8028f50:	2300      	movs	r3, #0
 8028f52:	62a3      	str	r3, [r4, #40]	@ 0x28
    {
    }
 8028f54:	4620      	mov	r0, r4
 8028f56:	bd10      	pop	{r4, pc}
 8028f58:	08043518 	.word	0x08043518

08028f5c <_ZN21MenuItemContainerBaseC1Ev>:
MenuItemContainerBase::MenuItemContainerBase()
 8028f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f60:	4604      	mov	r4, r0
 8028f62:	b089      	sub	sp, #36	@ 0x24
 8028f64:	4627      	mov	r7, r4
          firstChild(0)
 8028f66:	2500      	movs	r5, #0
 8028f68:	f7ff ffb6 	bl	8028ed8 <_ZN8touchgfx8DrawableC1Ev>
 8028f6c:	4b55      	ldr	r3, [pc, #340]	@ (80290c4 <_ZN21MenuItemContainerBaseC1Ev+0x168>)
 8028f6e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8028f70:	f847 3b2c 	str.w	r3, [r7], #44
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8028f74:	4638      	mov	r0, r7
 8028f76:	f7ff ffdd 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8028f7a:	f104 0860 	add.w	r8, r4, #96	@ 0x60
 8028f7e:	4b52      	ldr	r3, [pc, #328]	@ (80290c8 <_ZN21MenuItemContainerBaseC1Ev+0x16c>)
 8028f80:	62e3      	str	r3, [r4, #44]	@ 0x2c
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8028f82:	f104 068c 	add.w	r6, r4, #140	@ 0x8c
 8028f86:	65a5      	str	r5, [r4, #88]	@ 0x58
 8028f88:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8028f8c:	4640      	mov	r0, r8
 8028f8e:	f7ff ffd1 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8028f92:	4629      	mov	r1, r5
 8028f94:	2226      	movs	r2, #38	@ 0x26
 8028f96:	4630      	mov	r0, r6
 8028f98:	f014 fa84 	bl	803d4a4 <memset>
 8028f9c:	4630      	mov	r0, r6
 8028f9e:	f7ff ff9b 	bl	8028ed8 <_ZN8touchgfx8DrawableC1Ev>
        : typedTextId(id)
 8028fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028fa6:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
 8028faa:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8028fae:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
        : TextAreaWithWildcardBase(), wc1(0)
 8028fb2:	4b46      	ldr	r3, [pc, #280]	@ (80290cc <_ZN21MenuItemContainerBaseC1Ev+0x170>)
 8028fb4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8028fb8:	f04f 33ff 	mov.w	r3, #4294967295
              text(0)
 8028fbc:	e9c4 3533 	strd	r3, r5, [r4, #204]	@ 0xcc
        rect.width = width;
 8028fc0:	4b43      	ldr	r3, [pc, #268]	@ (80290d0 <_ZN21MenuItemContainerBaseC1Ev+0x174>)
 8028fc2:	60a3      	str	r3, [r4, #8]
 8028fc4:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 80290fc <_ZN21MenuItemContainerBaseC1Ev+0x1a0>
        : color(col)
 8028fc8:	f8c4 50bc 	str.w	r5, [r4, #188]	@ 0xbc
    menuItemBackground.setPosition(0, 1, 293, 27);
 8028fcc:	231b      	movs	r3, #27
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8028fce:	f8a4 50c4 	strh.w	r5, [r4, #196]	@ 0xc4
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8028fd2:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 8028fd6:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
 8028fda:	2201      	movs	r2, #1
 8028fdc:	4629      	mov	r1, r5
 8028fde:	4638      	mov	r0, r7
 8028fe0:	f8c4 90b4 	str.w	r9, [r4, #180]	@ 0xb4
 8028fe4:	9300      	str	r3, [sp, #0]
 8028fe6:	f240 1325 	movw	r3, #293	@ 0x125
 8028fea:	f7ff ff87 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8028fee:	4b39      	ldr	r3, [pc, #228]	@ (80290d4 <_ZN21MenuItemContainerBaseC1Ev+0x178>)
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8028ff0:	f04f 0b02 	mov.w	fp, #2
        borderColor = colorBorder;
 8028ff4:	f04f 4a7f 	mov.w	sl, #4278190080	@ 0xff000000
    add(menuItemBackground);
 8028ff8:	4639      	mov	r1, r7
 8028ffa:	e9c4 3a15 	strd	r3, sl, [r4, #84]	@ 0x54
 8028ffe:	4620      	mov	r0, r4
    menuItemBackground1.setPosition(0, 0, 289, 26);
 8029000:	271a      	movs	r7, #26
        borderSize = size;
 8029002:	f8a4 b05c 	strh.w	fp, [r4, #92]	@ 0x5c
    add(menuItemBackground);
 8029006:	f006 fe85 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    menuItemBackground1.setPosition(0, 0, 289, 26);
 802900a:	462a      	mov	r2, r5
 802900c:	4629      	mov	r1, r5
 802900e:	f240 1321 	movw	r3, #289	@ 0x121
 8029012:	4640      	mov	r0, r8
 8029014:	9700      	str	r7, [sp, #0]
 8029016:	f7ff ff71 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 802901a:	4b2f      	ldr	r3, [pc, #188]	@ (80290d8 <_ZN21MenuItemContainerBaseC1Ev+0x17c>)
 802901c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        visible = vis;
 8029020:	f884 5085 	strb.w	r5, [r4, #133]	@ 0x85
    add(menuItemBackground1);
 8029024:	4641      	mov	r1, r8
 8029026:	4620      	mov	r0, r4
 8029028:	f006 fe74 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    menuItemText.setPosition(2, 2, 289, 26);
 802902c:	465a      	mov	r2, fp
 802902e:	f240 1321 	movw	r3, #289	@ 0x121
 8029032:	4659      	mov	r1, fp
 8029034:	4630      	mov	r0, r6
 8029036:	9700      	str	r7, [sp, #0]
 8029038:	f7ff ff60 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        boundingArea = calculateBoundingArea();
 802903c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        linespace = space;
 8029040:	f8a4 50c0 	strh.w	r5, [r4, #192]	@ 0xc0
        boundingArea = calculateBoundingArea();
 8029044:	ad02      	add	r5, sp, #8
 8029046:	4628      	mov	r0, r5
 8029048:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 802904c:	f8c4 a0bc 	str.w	sl, [r4, #188]	@ 0xbc
        boundingArea = calculateBoundingArea();
 8029050:	4631      	mov	r1, r6
 8029052:	4798      	blx	r3
 8029054:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029058:	f104 03c8 	add.w	r3, r4, #200	@ 0xc8
 802905c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029060:	4b1e      	ldr	r3, [pc, #120]	@ (80290dc <_ZN21MenuItemContainerBaseC1Ev+0x180>)
 8029062:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(menuItemTextBuffer, MENUITEMTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KC7B).getText());
 8029064:	f104 05d8 	add.w	r5, r4, #216	@ 0xd8
 8029068:	b92b      	cbnz	r3, 8029076 <_ZN21MenuItemContainerBaseC1Ev+0x11a>
 802906a:	4b1d      	ldr	r3, [pc, #116]	@ (80290e0 <_ZN21MenuItemContainerBaseC1Ev+0x184>)
 802906c:	4a1d      	ldr	r2, [pc, #116]	@ (80290e4 <_ZN21MenuItemContainerBaseC1Ev+0x188>)
 802906e:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8029070:	481d      	ldr	r0, [pc, #116]	@ (80290e8 <_ZN21MenuItemContainerBaseC1Ev+0x18c>)
 8029072:	f013 fa59 	bl	803c528 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8029076:	4b1d      	ldr	r3, [pc, #116]	@ (80290ec <_ZN21MenuItemContainerBaseC1Ev+0x190>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8029078:	881b      	ldrh	r3, [r3, #0]
 802907a:	2b4b      	cmp	r3, #75	@ 0x4b
 802907c:	d803      	bhi.n	8029086 <_ZN21MenuItemContainerBaseC1Ev+0x12a>
 802907e:	4b1c      	ldr	r3, [pc, #112]	@ (80290f0 <_ZN21MenuItemContainerBaseC1Ev+0x194>)
 8029080:	4a18      	ldr	r2, [pc, #96]	@ (80290e4 <_ZN21MenuItemContainerBaseC1Ev+0x188>)
 8029082:	2161      	movs	r1, #97	@ 0x61
 8029084:	e7f4      	b.n	8029070 <_ZN21MenuItemContainerBaseC1Ev+0x114>
        return texts->getText(typedTextId);
 8029086:	4b1b      	ldr	r3, [pc, #108]	@ (80290f4 <_ZN21MenuItemContainerBaseC1Ev+0x198>)
 8029088:	214b      	movs	r1, #75	@ 0x4b
 802908a:	6818      	ldr	r0, [r3, #0]
 802908c:	f003 ff12 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8029090:	4a19      	ldr	r2, [pc, #100]	@ (80290f8 <_ZN21MenuItemContainerBaseC1Ev+0x19c>)
 8029092:	4603      	mov	r3, r0
 8029094:	210a      	movs	r1, #10
 8029096:	4628      	mov	r0, r5
 8029098:	f00e feea 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802909c:	2352      	movs	r3, #82	@ 0x52
    menuItemText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFEJ));
 802909e:	a906      	add	r1, sp, #24
 80290a0:	4630      	mov	r0, r6
        wc1 = value;
 80290a2:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
 80290a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80290aa:	f8cd 9018 	str.w	r9, [sp, #24]
 80290ae:	f008 fd83 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(menuItemText);
 80290b2:	4620      	mov	r0, r4
 80290b4:	4631      	mov	r1, r6
 80290b6:	f006 fe2d 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80290ba:	4620      	mov	r0, r4
 80290bc:	b009      	add	sp, #36	@ 0x24
 80290be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80290c2:	bf00      	nop
 80290c4:	080427e8 	.word	0x080427e8
 80290c8:	08043580 	.word	0x08043580
 80290cc:	08042758 	.word	0x08042758
 80290d0:	001d0125 	.word	0x001d0125
 80290d4:	ff2869b8 	.word	0xff2869b8
 80290d8:	ff949da8 	.word	0xff949da8
 80290dc:	2000b930 	.word	0x2000b930
 80290e0:	08040d9d 	.word	0x08040d9d
 80290e4:	08040e9a 	.word	0x08040e9a
 80290e8:	08040e1a 	.word	0x08040e1a
 80290ec:	2000b934 	.word	0x2000b934
 80290f0:	08040e5c 	.word	0x08040e5c
 80290f4:	2000b93c 	.word	0x2000b93c
 80290f8:	08040ee5 	.word	0x08040ee5
 80290fc:	08042200 	.word	0x08042200

08029100 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8029100:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 8029102:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8029104:	4604      	mov	r4, r0
        setX(x);
 8029106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8029108:	4615      	mov	r5, r2
        setX(x);
 802910a:	4798      	blx	r3
        setY(y);
 802910c:	6823      	ldr	r3, [r4, #0]
 802910e:	4629      	mov	r1, r5
 8029110:	4620      	mov	r0, r4
 8029112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8029114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8029118:	4718      	bx	r3

0802911a <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 802911a:	4770      	bx	lr

0802911c <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 802911c:	4770      	bx	lr

0802911e <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 802911e:	4770      	bx	lr

08029120 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8029120:	4770      	bx	lr

08029122 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8029122:	4770      	bx	lr

08029124 <_ZN18DiagnosticViewBaseD1Ev>:
}

DiagnosticViewBase::~DiagnosticViewBase()
{

}
 8029124:	4770      	bx	lr

08029126 <_ZN18DiagnosticViewBase11setupScreenEv>:

void DiagnosticViewBase::setupScreen()
{

}
 8029126:	4770      	bx	lr

08029128 <_ZN18DiagnosticViewBaseD0Ev>:
DiagnosticViewBase::~DiagnosticViewBase()
 8029128:	b510      	push	{r4, lr}
}
 802912a:	f640 111c 	movw	r1, #2332	@ 0x91c
DiagnosticViewBase::~DiagnosticViewBase()
 802912e:	4604      	mov	r4, r0
}
 8029130:	f013 f9db 	bl	803c4ea <_ZdlPvj>
 8029134:	4620      	mov	r0, r4
 8029136:	bd10      	pop	{r4, pc}

08029138 <_ZN18DiagnosticViewBase14handleKeyEventEh>:

void DiagnosticViewBase::handleKeyEvent(uint8_t key)
{
 8029138:	b508      	push	{r3, lr}
    if(0 == key)
 802913a:	b929      	cbnz	r1, 8029148 <_ZN18DiagnosticViewBase14handleKeyEventEh+0x10>
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802913c:	f00b fde6 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        //When hardware button 3 clicked change screen to PasswordEntry
        //Go to PasswordEntry with no screen transition
        application().gotoPasswordEntryScreenNoTransition();
    
    }
}
 8029140:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreenTestHomeScreenNoTransition();
 8029144:	f7fe bfa6 	b.w	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
    if(3 == key)
 8029148:	2903      	cmp	r1, #3
 802914a:	d105      	bne.n	8029158 <_ZN18DiagnosticViewBase14handleKeyEventEh+0x20>
 802914c:	f00b fdde 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 8029150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoPasswordEntryScreenNoTransition();
 8029154:	f7ff b80e 	b.w	8028174 <_ZN23FrontendApplicationBase35gotoPasswordEntryScreenNoTransitionEv>
}
 8029158:	bd08      	pop	{r3, pc}
	...

0802915c <_ZN8touchgfx6WidgetC1Ev>:
        : x(0), y(0), width(0), height(0)
 802915c:	2200      	movs	r2, #0
 802915e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8029162:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8029166:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 802916a:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 802916e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8029172:	8482      	strh	r2, [r0, #36]	@ 0x24
 8029174:	4a01      	ldr	r2, [pc, #4]	@ (802917c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8029176:	6002      	str	r2, [r0, #0]
 8029178:	4770      	bx	lr
 802917a:	bf00      	nop
 802917c:	0804287c 	.word	0x0804287c

08029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8029180:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8029182:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8029184:	4604      	mov	r4, r0
 8029186:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8029188:	2100      	movs	r1, #0
 802918a:	f014 f98b 	bl	803d4a4 <memset>
 802918e:	4620      	mov	r0, r4
 8029190:	f7ff ffe4 	bl	802915c <_ZN8touchgfx6WidgetC1Ev>
 8029194:	4b06      	ldr	r3, [pc, #24]	@ (80291b0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8029196:	6023      	str	r3, [r4, #0]
 8029198:	882b      	ldrh	r3, [r5, #0]
 802919a:	84e3      	strh	r3, [r4, #38]	@ 0x26
 802919c:	23ff      	movs	r3, #255	@ 0xff
    {
        Image::setBitmap(bmp);
 802919e:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 80291a0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 80291a4:	4629      	mov	r1, r5
 80291a6:	f007 fe24 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80291aa:	4620      	mov	r0, r4
 80291ac:	bd38      	pop	{r3, r4, r5, pc}
 80291ae:	bf00      	nop
 80291b0:	0804365c 	.word	0x0804365c

080291b4 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80291b4:	b510      	push	{r4, lr}
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 80291b6:	2226      	movs	r2, #38	@ 0x26
 80291b8:	4604      	mov	r4, r0
 80291ba:	2100      	movs	r1, #0
 80291bc:	f014 f972 	bl	803d4a4 <memset>
 80291c0:	4620      	mov	r0, r4
 80291c2:	f7ff ffcb 	bl	802915c <_ZN8touchgfx6WidgetC1Ev>
 80291c6:	2300      	movs	r3, #0
 80291c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80291ca:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        touchable = touch;
 80291ce:	2301      	movs	r3, #1
 80291d0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        : AbstractButton(), up(), down(), alpha(255)
 80291d4:	4b04      	ldr	r3, [pc, #16]	@ (80291e8 <_ZN8touchgfx6ButtonC1Ev+0x34>)
 80291d6:	6023      	str	r3, [r4, #0]
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80291d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80291dc:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
 80291e0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80291e2:	8623      	strh	r3, [r4, #48]	@ 0x30
    {
    }
 80291e4:	4620      	mov	r0, r4
 80291e6:	bd10      	pop	{r4, pc}
 80291e8:	080435e8 	.word	0x080435e8

080291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80291ec:	2200      	movs	r2, #0
 80291ee:	f04f 31ff 	mov.w	r1, #4294967295
 80291f2:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 80291f6:	6082      	str	r2, [r0, #8]
        {
        }
 80291f8:	4770      	bx	lr
	...

080291fc <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 80291fc:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80291fe:	2100      	movs	r1, #0
    TextArea()
 8029200:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8029202:	2226      	movs	r2, #38	@ 0x26
 8029204:	f014 f94e 	bl	803d4a4 <memset>
 8029208:	4620      	mov	r0, r4
 802920a:	f7ff ffa7 	bl	802915c <_ZN8touchgfx6WidgetC1Ev>
 802920e:	4b09      	ldr	r3, [pc, #36]	@ (8029234 <_ZN8touchgfx8TextAreaC1Ev+0x38>)
 8029210:	6023      	str	r3, [r4, #0]
 8029212:	4b09      	ldr	r3, [pc, #36]	@ (8029238 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8029214:	62a3      	str	r3, [r4, #40]	@ 0x28
 8029216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802921a:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 802921c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8029220:	2300      	movs	r3, #0
 8029222:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8029226:	8723      	strh	r3, [r4, #56]	@ 0x38
 8029228:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 802922c:	f7ff ffde 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8029230:	4620      	mov	r0, r4
 8029232:	bd10      	pop	{r4, pc}
 8029234:	0804373c 	.word	0x0804373c
 8029238:	08042200 	.word	0x08042200

0802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 802923c:	b510      	push	{r4, lr}
 802923e:	4604      	mov	r4, r0
        : TextArea()
 8029240:	f7ff ffdc 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8029244:	4b02      	ldr	r3, [pc, #8]	@ (8029250 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x14>)
 8029246:	6023      	str	r3, [r4, #0]
 8029248:	2300      	movs	r3, #0
 802924a:	64a3      	str	r3, [r4, #72]	@ 0x48
    }
 802924c:	4620      	mov	r0, r4
 802924e:	bd10      	pop	{r4, pc}
 8029250:	08042758 	.word	0x08042758

08029254 <_ZN18DiagnosticViewBaseC1Ev>:
DiagnosticViewBase::DiagnosticViewBase()
 8029254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029258:	4604      	mov	r4, r0
 802925a:	b0a9      	sub	sp, #164	@ 0xa4
 802925c:	4625      	mov	r5, r4
        : presenter(0)
 802925e:	2600      	movs	r6, #0
 8029260:	f00d f956 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 8029264:	4bd9      	ldr	r3, [pc, #868]	@ (80295cc <_ZN18DiagnosticViewBaseC1Ev+0x378>)
 8029266:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8029268:	f845 3b40 	str.w	r3, [r5], #64
 802926c:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8029270:	4628      	mov	r0, r5
 8029272:	f10d 0b94 	add.w	fp, sp, #148	@ 0x94
 8029276:	f7ff fe5d 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802927a:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 802927e:	4648      	mov	r0, r9
 8029280:	f7ff fe58 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8029284:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8029288:	4659      	mov	r1, fp
 802928a:	4640      	mov	r0, r8
 802928c:	f8ad 7094 	strh.w	r7, [sp, #148]	@ 0x94
 8029290:	f7ff ff76 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Box(), borderColor(0), borderSize(0)
 8029294:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8029298:	4618      	mov	r0, r3
 802929a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802929c:	f7ff fe4a 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 80292a0:	4bcb      	ldr	r3, [pc, #812]	@ (80295d0 <_ZN18DiagnosticViewBaseC1Ev+0x37c>)
 80292a2:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80292a6:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 80292aa:	4618      	mov	r0, r3
        : color(col)
 80292ac:	f8c4 60f0 	str.w	r6, [r4, #240]	@ 0xf0
 80292b0:	f8a4 60f4 	strh.w	r6, [r4, #244]	@ 0xf4
 80292b4:	9318      	str	r3, [sp, #96]	@ 0x60
 80292b6:	f7ff fe3d 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 80292ba:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 80292be:	4618      	mov	r0, r3
 80292c0:	930d      	str	r3, [sp, #52]	@ 0x34
 80292c2:	f7ff ff77 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 80292c6:	f504 73ac 	add.w	r3, r4, #344	@ 0x158
 80292ca:	4618      	mov	r0, r3
 80292cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80292ce:	f7ff ff71 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 80292d2:	f504 73c6 	add.w	r3, r4, #396	@ 0x18c
 80292d6:	4618      	mov	r0, r3
 80292d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80292da:	f7ff ff6b 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 80292de:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 80292e2:	4618      	mov	r0, r3
 80292e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80292e6:	f7ff ff65 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 80292ea:	f504 73fa 	add.w	r3, r4, #500	@ 0x1f4
 80292ee:	4659      	mov	r1, fp
 80292f0:	4618      	mov	r0, r3
 80292f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80292f4:	f8ad 7094 	strh.w	r7, [sp, #148]	@ 0x94
 80292f8:	f7ff ff42 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80292fc:	f504 7308 	add.w	r3, r4, #544	@ 0x220
 8029300:	4618      	mov	r0, r3
 8029302:	9302      	str	r3, [sp, #8]
 8029304:	f7ff ff9a 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8029308:	f504 731b 	add.w	r3, r4, #620	@ 0x26c
 802930c:	4618      	mov	r0, r3
 802930e:	9303      	str	r3, [sp, #12]
 8029310:	f7ff ff94 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8029314:	f504 732e 	add.w	r3, r4, #696	@ 0x2b8
 8029318:	4618      	mov	r0, r3
 802931a:	9304      	str	r3, [sp, #16]
 802931c:	f7ff ff8e 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8029320:	f504 7341 	add.w	r3, r4, #772	@ 0x304
 8029324:	4618      	mov	r0, r3
 8029326:	9319      	str	r3, [sp, #100]	@ 0x64
 8029328:	f7ff fe04 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802932c:	f504 734c 	add.w	r3, r4, #816	@ 0x330
 8029330:	4618      	mov	r0, r3
 8029332:	931a      	str	r3, [sp, #104]	@ 0x68
 8029334:	f7ff fdfe 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8029338:	f504 7357 	add.w	r3, r4, #860	@ 0x35c
 802933c:	4618      	mov	r0, r3
 802933e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8029340:	f7ff fdf8 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8029344:	f504 7362 	add.w	r3, r4, #904	@ 0x388
 8029348:	4618      	mov	r0, r3
 802934a:	9305      	str	r3, [sp, #20]
 802934c:	f7ff ff56 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 8029350:	f504 7374 	add.w	r3, r4, #976	@ 0x3d0
 8029354:	4618      	mov	r0, r3
 8029356:	9306      	str	r3, [sp, #24]
 8029358:	f7ff ff50 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802935c:	f504 6383 	add.w	r3, r4, #1048	@ 0x418
 8029360:	4618      	mov	r0, r3
 8029362:	9307      	str	r3, [sp, #28]
 8029364:	f7ff ff4a 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 8029368:	f504 638c 	add.w	r3, r4, #1120	@ 0x460
 802936c:	4618      	mov	r0, r3
 802936e:	9308      	str	r3, [sp, #32]
 8029370:	f7ff ff44 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 8029374:	f504 6395 	add.w	r3, r4, #1192	@ 0x4a8
 8029378:	4618      	mov	r0, r3
 802937a:	9309      	str	r3, [sp, #36]	@ 0x24
 802937c:	f7ff ff3e 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 8029380:	f504 639e 	add.w	r3, r4, #1264	@ 0x4f0
 8029384:	4618      	mov	r0, r3
 8029386:	931c      	str	r3, [sp, #112]	@ 0x70
 8029388:	f7ff fdd4 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802938c:	f204 531c 	addw	r3, r4, #1308	@ 0x51c
 8029390:	4618      	mov	r0, r3
 8029392:	931d      	str	r3, [sp, #116]	@ 0x74
 8029394:	f7ff fdce 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8029398:	f504 63a9 	add.w	r3, r4, #1352	@ 0x548
 802939c:	4618      	mov	r0, r3
 802939e:	930a      	str	r3, [sp, #40]	@ 0x28
 80293a0:	f7ff ff2c 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 80293a4:	f504 63b2 	add.w	r3, r4, #1424	@ 0x590
 80293a8:	4618      	mov	r0, r3
 80293aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80293ac:	f7ff ff26 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 80293b0:	f504 63bb 	add.w	r3, r4, #1496	@ 0x5d8
 80293b4:	4618      	mov	r0, r3
 80293b6:	931e      	str	r3, [sp, #120]	@ 0x78
 80293b8:	f7ff fdbc 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 80293bc:	f204 6304 	addw	r3, r4, #1540	@ 0x604
 80293c0:	4618      	mov	r0, r3
 80293c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80293c4:	f7ff ff3a 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80293c8:	f504 63ca 	add.w	r3, r4, #1616	@ 0x650
 80293cc:	4618      	mov	r0, r3
 80293ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80293d0:	f7ff ff34 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80293d4:	f204 639c 	addw	r3, r4, #1692	@ 0x69c
 80293d8:	4618      	mov	r0, r3
 80293da:	9314      	str	r3, [sp, #80]	@ 0x50
 80293dc:	f7ff ff2e 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80293e0:	f504 63dd 	add.w	r3, r4, #1768	@ 0x6e8
 80293e4:	4618      	mov	r0, r3
 80293e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80293e8:	f7ff ff28 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80293ec:	f204 7334 	addw	r3, r4, #1844	@ 0x734
 80293f0:	4618      	mov	r0, r3
 80293f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80293f4:	f7ff ff22 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80293f8:	f504 63f0 	add.w	r3, r4, #1920	@ 0x780
 80293fc:	4618      	mov	r0, r3
 80293fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029400:	f7ff ff1c 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8029404:	f204 73cc 	addw	r3, r4, #1996	@ 0x7cc
 8029408:	4659      	mov	r1, fp
 802940a:	4618      	mov	r0, r3
 802940c:	930c      	str	r3, [sp, #48]	@ 0x30
 802940e:	f8ad 7094 	strh.w	r7, [sp, #148]	@ 0x94
 8029412:	f007 fdc5 	bl	8030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 320, 240);
 8029416:	23f0      	movs	r3, #240	@ 0xf0
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8029418:	f104 0a04 	add.w	sl, r4, #4
 802941c:	f04f 477f 	mov.w	r7, #4278190080	@ 0xff000000
 8029420:	4632      	mov	r2, r6
 8029422:	4628      	mov	r0, r5
 8029424:	9300      	str	r3, [sp, #0]
 8029426:	4631      	mov	r1, r6
 8029428:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802942c:	f7ff fd66 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8029430:	4629      	mov	r1, r5
 8029432:	4650      	mov	r0, sl
 8029434:	66a7      	str	r7, [r4, #104]	@ 0x68
 8029436:	f006 fc6d 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box6.setPosition(0, 0, 320, 23);
 802943a:	2317      	movs	r3, #23
 802943c:	4632      	mov	r2, r6
 802943e:	4648      	mov	r0, r9
 8029440:	9300      	str	r3, [sp, #0]
 8029442:	4631      	mov	r1, r6
 8029444:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8029448:	f7ff fd58 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802944c:	4649      	mov	r1, r9
 802944e:	4650      	mov	r0, sl
 8029450:	f8c4 7094 	str.w	r7, [r4, #148]	@ 0x94
 8029454:	f006 fc5e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    test.setXY(-1, 0);
 8029458:	4632      	mov	r2, r6
 802945a:	4640      	mov	r0, r8
 802945c:	f04f 31ff 	mov.w	r1, #4294967295
 8029460:	f7ff fe4e 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    test.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 8029464:	4640      	mov	r0, r8
 8029466:	4659      	mov	r1, fp
 8029468:	f8ad 6094 	strh.w	r6, [sp, #148]	@ 0x94
 802946c:	f007 fcc1 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8029470:	4641      	mov	r1, r8
 8029472:	4650      	mov	r0, sl
 8029474:	f006 fc4e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(9, 92, 304, 119);
 8029478:	2377      	movs	r3, #119	@ 0x77
 802947a:	225c      	movs	r2, #92	@ 0x5c
 802947c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802947e:	9300      	str	r3, [sp, #0]
 8029480:	2109      	movs	r1, #9
 8029482:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8029486:	f7ff fd39 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802948a:	4b52      	ldr	r3, [pc, #328]	@ (80295d4 <_ZN18DiagnosticViewBaseC1Ev+0x380>)
 802948c:	991f      	ldr	r1, [sp, #124]	@ 0x7c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802948e:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 80295e4 <_ZN18DiagnosticViewBaseC1Ev+0x390>
        borderColor = colorBorder;
 8029492:	e9c4 373b 	strd	r3, r7, [r4, #236]	@ 0xec
        borderSize = size;
 8029496:	f04f 0302 	mov.w	r3, #2
 802949a:	f8a4 30f4 	strh.w	r3, [r4, #244]	@ 0xf4
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 802949e:	23ae      	movs	r3, #174	@ 0xae
 80294a0:	f884 30ea 	strb.w	r3, [r4, #234]	@ 0xea
 80294a4:	4650      	mov	r0, sl
 80294a6:	f006 fc35 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box6_1.setPosition(0, 0, 320, 23);
 80294aa:	2317      	movs	r3, #23
 80294ac:	4632      	mov	r2, r6
 80294ae:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80294b0:	9300      	str	r3, [sp, #0]
 80294b2:	4631      	mov	r1, r6
 80294b4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80294b8:	f7ff fd20 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 80294bc:	9918      	ldr	r1, [sp, #96]	@ 0x60
        color = newColor;
 80294be:	f8c4 7120 	str.w	r7, [r4, #288]	@ 0x120
 80294c2:	4650      	mov	r0, sl
 80294c4:	f006 fc26 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 80294c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80294ca:	22d8      	movs	r2, #216	@ 0xd8
 80294cc:	2150      	movs	r1, #80	@ 0x50
 80294ce:	f04f 0903 	mov.w	r9, #3
 80294d2:	f7ff fe15 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 80294d6:	465a      	mov	r2, fp
 80294d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80294da:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 80294de:	a924      	add	r1, sp, #144	@ 0x90
 80294e0:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 80294e4:	f007 fbb7 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80294e8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80294ea:	4650      	mov	r0, sl
 80294ec:	f006 fc12 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 80294f0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80294f2:	22d8      	movs	r2, #216	@ 0xd8
 80294f4:	4631      	mov	r1, r6
 80294f6:	f7ff fe03 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 80294fa:	465a      	mov	r2, fp
 80294fc:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80294fe:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 8029502:	a924      	add	r1, sp, #144	@ 0x90
 8029504:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 8029508:	f007 fba5 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802950c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802950e:	4650      	mov	r0, sl
 8029510:	f006 fc00 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 8029514:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8029516:	22d8      	movs	r2, #216	@ 0xd8
 8029518:	21a0      	movs	r1, #160	@ 0xa0
 802951a:	f7ff fdf1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802951e:	465a      	mov	r2, fp
 8029520:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8029522:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 8029526:	a924      	add	r1, sp, #144	@ 0x90
 8029528:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 802952c:	f007 fb93 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8029530:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029532:	4650      	mov	r0, sl
 8029534:	f006 fbee 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 8029538:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802953a:	22d8      	movs	r2, #216	@ 0xd8
 802953c:	21f0      	movs	r1, #240	@ 0xf0
 802953e:	f7ff fddf 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 8029542:	465a      	mov	r2, fp
 8029544:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029546:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 802954a:	a924      	add	r1, sp, #144	@ 0x90
 802954c:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 8029550:	f007 fb81 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8029554:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8029556:	4650      	mov	r0, sl
 8029558:	f006 fbdc 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 23);
 802955c:	2217      	movs	r2, #23
 802955e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8029560:	4631      	mov	r1, r6
 8029562:	f7ff fdcd 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8029566:	2310      	movs	r3, #16
    image1.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_ID));
 8029568:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802956a:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802956e:	4659      	mov	r1, fp
 8029570:	f007 fc3f 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8029574:	f04f 0374 	mov.w	r3, #116	@ 0x74
 8029578:	f884 321c 	strb.w	r3, [r4, #540]	@ 0x21c
 802957c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802957e:	4650      	mov	r0, sl
 8029580:	f006 fbc8 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HEADER.setXY(113, -1);
 8029584:	f04f 32ff 	mov.w	r2, #4294967295
 8029588:	9802      	ldr	r0, [sp, #8]
 802958a:	2171      	movs	r1, #113	@ 0x71
 802958c:	f7ff fdb8 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8029590:	f04f 33ff 	mov.w	r3, #4294967295
 8029594:	f8c4 3250 	str.w	r3, [r4, #592]	@ 0x250
        boundingArea = calculateBoundingArea();
 8029598:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 802959c:	9902      	ldr	r1, [sp, #8]
 802959e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 80295a2:	f8a4 6254 	strh.w	r6, [r4, #596]	@ 0x254
        boundingArea = calculateBoundingArea();
 80295a6:	ad20      	add	r5, sp, #128	@ 0x80
 80295a8:	4628      	mov	r0, r5
 80295aa:	4798      	blx	r3
 80295ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80295b0:	f504 7317 	add.w	r3, r4, #604	@ 0x25c
 80295b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80295b8:	f8d8 3000 	ldr.w	r3, [r8]
 80295bc:	b9a3      	cbnz	r3, 80295e8 <_ZN18DiagnosticViewBaseC1Ev+0x394>
 80295be:	4b06      	ldr	r3, [pc, #24]	@ (80295d8 <_ZN18DiagnosticViewBaseC1Ev+0x384>)
 80295c0:	4a06      	ldr	r2, [pc, #24]	@ (80295dc <_ZN18DiagnosticViewBaseC1Ev+0x388>)
 80295c2:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80295c4:	4806      	ldr	r0, [pc, #24]	@ (80295e0 <_ZN18DiagnosticViewBaseC1Ev+0x38c>)
 80295c6:	f012 ffaf 	bl	803c528 <__assert_func>
 80295ca:	bf00      	nop
 80295cc:	080428e4 	.word	0x080428e4
 80295d0:	08043580 	.word	0x08043580
 80295d4:	ffe8e8e8 	.word	0xffe8e8e8
 80295d8:	08040d9d 	.word	0x08040d9d
 80295dc:	08040e9a 	.word	0x08040e9a
 80295e0:	08040e1a 	.word	0x08040e1a
 80295e4:	2000b930 	.word	0x2000b930
 80295e8:	4b03      	ldr	r3, [pc, #12]	@ (80295f8 <_ZN18DiagnosticViewBaseC1Ev+0x3a4>)
 80295ea:	881b      	ldrh	r3, [r3, #0]
 80295ec:	2b42      	cmp	r3, #66	@ 0x42
 80295ee:	d809      	bhi.n	8029604 <_ZN18DiagnosticViewBaseC1Ev+0x3b0>
 80295f0:	4b02      	ldr	r3, [pc, #8]	@ (80295fc <_ZN18DiagnosticViewBaseC1Ev+0x3a8>)
 80295f2:	4a03      	ldr	r2, [pc, #12]	@ (8029600 <_ZN18DiagnosticViewBaseC1Ev+0x3ac>)
 80295f4:	2161      	movs	r1, #97	@ 0x61
 80295f6:	e7e5      	b.n	80295c4 <_ZN18DiagnosticViewBaseC1Ev+0x370>
 80295f8:	2000b934 	.word	0x2000b934
 80295fc:	08040e5c 	.word	0x08040e5c
 8029600:	08040e9a 	.word	0x08040e9a
        return texts->getText(typedTextId);
 8029604:	4bcf      	ldr	r3, [pc, #828]	@ (8029944 <_ZN18DiagnosticViewBaseC1Ev+0x6f0>)
 8029606:	2142      	movs	r1, #66	@ 0x42
 8029608:	6818      	ldr	r0, [r3, #0]
 802960a:	f003 fc53 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
        wc1 = value;
 802960e:	f8c4 0268 	str.w	r0, [r4, #616]	@ 0x268
    HEADER.resizeToCurrentText();
 8029612:	9802      	ldr	r0, [sp, #8]
 8029614:	f008 fab0 	bl	8031b78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8029618:	4bcb      	ldr	r3, [pc, #812]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    HEADER.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9KPE));
 802961a:	9802      	ldr	r0, [sp, #8]
 802961c:	9325      	str	r3, [sp, #148]	@ 0x94
 802961e:	4659      	mov	r1, fp
 8029620:	2343      	movs	r3, #67	@ 0x43
 8029622:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029626:	f008 fac7 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802962a:	9902      	ldr	r1, [sp, #8]
 802962c:	4650      	mov	r0, sl
 802962e:	f006 fb71 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HEADER_1.setXY(3, 0);
 8029632:	9803      	ldr	r0, [sp, #12]
 8029634:	4632      	mov	r2, r6
 8029636:	4649      	mov	r1, r9
 8029638:	f7ff fd62 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802963c:	f8d4 326c 	ldr.w	r3, [r4, #620]	@ 0x26c
 8029640:	9903      	ldr	r1, [sp, #12]
 8029642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 8029646:	f8a4 62a0 	strh.w	r6, [r4, #672]	@ 0x2a0
        color = newColor;
 802964a:	f04f 32ff 	mov.w	r2, #4294967295
 802964e:	f8c4 229c 	str.w	r2, [r4, #668]	@ 0x29c
        boundingArea = calculateBoundingArea();
 8029652:	4628      	mov	r0, r5
 8029654:	4798      	blx	r3
 8029656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802965a:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 802965e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029662:	f8d8 3000 	ldr.w	r3, [r8]
 8029666:	2b00      	cmp	r3, #0
 8029668:	d0a9      	beq.n	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802966a:	4ab8      	ldr	r2, [pc, #736]	@ (802994c <_ZN18DiagnosticViewBaseC1Ev+0x6f8>)
 802966c:	8813      	ldrh	r3, [r2, #0]
 802966e:	2b06      	cmp	r3, #6
 8029670:	d9be      	bls.n	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 8029672:	48b4      	ldr	r0, [pc, #720]	@ (8029944 <_ZN18DiagnosticViewBaseC1Ev+0x6f0>)
 8029674:	2106      	movs	r1, #6
 8029676:	6800      	ldr	r0, [r0, #0]
 8029678:	f003 fc1c 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802967c:	f8c4 02b4 	str.w	r0, [r4, #692]	@ 0x2b4
    HEADER_1.resizeToCurrentText();
 8029680:	9803      	ldr	r0, [sp, #12]
 8029682:	f008 fa79 	bl	8031b78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8029686:	4bb0      	ldr	r3, [pc, #704]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    HEADER_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HA1K));
 8029688:	9803      	ldr	r0, [sp, #12]
 802968a:	9325      	str	r3, [sp, #148]	@ 0x94
 802968c:	4659      	mov	r1, fp
 802968e:	2307      	movs	r3, #7
 8029690:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029694:	f008 fa90 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029698:	9903      	ldr	r1, [sp, #12]
 802969a:	4650      	mov	r0, sl
 802969c:	f006 fb3a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LATCH.setXY(258, 215);
 80296a0:	22d7      	movs	r2, #215	@ 0xd7
 80296a2:	9804      	ldr	r0, [sp, #16]
 80296a4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80296a8:	f7ff fd2a 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 80296ac:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80296b0:	9904      	ldr	r1, [sp, #16]
 80296b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 80296b6:	f8c4 72e8 	str.w	r7, [r4, #744]	@ 0x2e8
        boundingArea = calculateBoundingArea();
 80296ba:	4628      	mov	r0, r5
        linespace = space;
 80296bc:	f8a4 62ec 	strh.w	r6, [r4, #748]	@ 0x2ec
        boundingArea = calculateBoundingArea();
 80296c0:	4798      	blx	r3
 80296c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80296c6:	f504 733d 	add.w	r3, r4, #756	@ 0x2f4
 80296ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80296ce:	f8d8 3000 	ldr.w	r3, [r8]
    Unicode::snprintf(LATCHBuffer, LATCH_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_UB6I).getText());
 80296d2:	f504 69ff 	add.w	r9, r4, #2040	@ 0x7f8
 80296d6:	2b00      	cmp	r3, #0
 80296d8:	f43f af71 	beq.w	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80296dc:	4a9b      	ldr	r2, [pc, #620]	@ (802994c <_ZN18DiagnosticViewBaseC1Ev+0x6f8>)
 80296de:	8813      	ldrh	r3, [r2, #0]
 80296e0:	2b40      	cmp	r3, #64	@ 0x40
 80296e2:	d985      	bls.n	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 80296e4:	4897      	ldr	r0, [pc, #604]	@ (8029944 <_ZN18DiagnosticViewBaseC1Ev+0x6f0>)
 80296e6:	2140      	movs	r1, #64	@ 0x40
 80296e8:	6800      	ldr	r0, [r0, #0]
 80296ea:	f003 fbe3 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 80296ee:	4a98      	ldr	r2, [pc, #608]	@ (8029950 <_ZN18DiagnosticViewBaseC1Ev+0x6fc>)
 80296f0:	4603      	mov	r3, r0
 80296f2:	210a      	movs	r1, #10
 80296f4:	4648      	mov	r0, r9
 80296f6:	f00e fbbb 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    LATCH.resizeToCurrentText();
 80296fa:	9804      	ldr	r0, [sp, #16]
 80296fc:	f8c4 9300 	str.w	r9, [r4, #768]	@ 0x300
 8029700:	f008 fa3a 	bl	8031b78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8029704:	4b90      	ldr	r3, [pc, #576]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    LATCH.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NOVX));
 8029706:	9804      	ldr	r0, [sp, #16]
 8029708:	9325      	str	r3, [sp, #148]	@ 0x94
 802970a:	4659      	mov	r1, fp
 802970c:	2341      	movs	r3, #65	@ 0x41
 802970e:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029712:	f008 fa51 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029716:	9904      	ldr	r1, [sp, #16]
 8029718:	4650      	mov	r0, sl
 802971a:	f006 fafb 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7.setPosition(8, 114, 303, 2);
 802971e:	2102      	movs	r1, #2
 8029720:	f240 132f 	movw	r3, #303	@ 0x12f
 8029724:	2272      	movs	r2, #114	@ 0x72
 8029726:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8029728:	9100      	str	r1, [sp, #0]
 802972a:	2108      	movs	r1, #8
 802972c:	f7ff fbe6 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8029730:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8029732:	f8c4 732c 	str.w	r7, [r4, #812]	@ 0x32c
 8029736:	4650      	mov	r0, sl
 8029738:	f006 faec 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7_2.setPosition(107, 94, 2, 117);
 802973c:	2375      	movs	r3, #117	@ 0x75
 802973e:	225e      	movs	r2, #94	@ 0x5e
 8029740:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8029742:	9300      	str	r3, [sp, #0]
 8029744:	216b      	movs	r1, #107	@ 0x6b
 8029746:	2302      	movs	r3, #2
 8029748:	f7ff fbd8 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802974c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802974e:	f8c4 7358 	str.w	r7, [r4, #856]	@ 0x358
 8029752:	4650      	mov	r0, sl
 8029754:	f006 fade 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7_2_2.setPosition(205, 93, 2, 70);
 8029758:	2346      	movs	r3, #70	@ 0x46
 802975a:	225d      	movs	r2, #93	@ 0x5d
 802975c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802975e:	9300      	str	r3, [sp, #0]
 8029760:	21cd      	movs	r1, #205	@ 0xcd
 8029762:	2302      	movs	r3, #2
 8029764:	f7ff fbca 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8029768:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802976a:	f8c4 7384 	str.w	r7, [r4, #900]	@ 0x384
 802976e:	4650      	mov	r0, sl
 8029770:	f006 fad0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Inclo.setXY(12, 160);
 8029774:	22a0      	movs	r2, #160	@ 0xa0
 8029776:	9805      	ldr	r0, [sp, #20]
 8029778:	210c      	movs	r1, #12
 802977a:	f7ff fcc1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802977e:	4628      	mov	r0, r5
 8029780:	9905      	ldr	r1, [sp, #20]
        color = newColor;
 8029782:	f8c4 73b8 	str.w	r7, [r4, #952]	@ 0x3b8
        linespace = space;
 8029786:	f8a4 63bc 	strh.w	r6, [r4, #956]	@ 0x3bc
        boundingArea = calculateBoundingArea();
 802978a:	f007 fec7 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802978e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029792:	f504 7371 	add.w	r3, r4, #964	@ 0x3c4
 8029796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802979a:	4b6b      	ldr	r3, [pc, #428]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    Inclo.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SDL8));
 802979c:	9805      	ldr	r0, [sp, #20]
 802979e:	9325      	str	r3, [sp, #148]	@ 0x94
 80297a0:	4659      	mov	r1, fp
 80297a2:	233f      	movs	r3, #63	@ 0x3f
 80297a4:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 80297a8:	f008 fa06 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80297ac:	9905      	ldr	r1, [sp, #20]
 80297ae:	4650      	mov	r0, sl
 80297b0:	f006 fab0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    param.setXY(12, 90);
 80297b4:	225a      	movs	r2, #90	@ 0x5a
 80297b6:	9806      	ldr	r0, [sp, #24]
 80297b8:	210c      	movs	r1, #12
 80297ba:	f7ff fca1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 80297be:	4628      	mov	r0, r5
 80297c0:	9906      	ldr	r1, [sp, #24]
        color = newColor;
 80297c2:	f8c4 7400 	str.w	r7, [r4, #1024]	@ 0x400
        linespace = space;
 80297c6:	f8a4 6404 	strh.w	r6, [r4, #1028]	@ 0x404
        boundingArea = calculateBoundingArea();
 80297ca:	f007 fea7 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80297ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80297d2:	f204 430c 	addw	r3, r4, #1036	@ 0x40c
 80297d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80297da:	4b5b      	ldr	r3, [pc, #364]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    param.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IYKH));
 80297dc:	9806      	ldr	r0, [sp, #24]
 80297de:	9325      	str	r3, [sp, #148]	@ 0x94
 80297e0:	4659      	mov	r1, fp
 80297e2:	2328      	movs	r3, #40	@ 0x28
 80297e4:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 80297e8:	f008 f9e6 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80297ec:	9906      	ldr	r1, [sp, #24]
 80297ee:	4650      	mov	r0, sl
 80297f0:	f006 fa90 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    truck.setXY(113, 92);
 80297f4:	225c      	movs	r2, #92	@ 0x5c
 80297f6:	9807      	ldr	r0, [sp, #28]
 80297f8:	2171      	movs	r1, #113	@ 0x71
 80297fa:	f7ff fc81 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 80297fe:	4628      	mov	r0, r5
 8029800:	9907      	ldr	r1, [sp, #28]
        color = newColor;
 8029802:	f8c4 7448 	str.w	r7, [r4, #1096]	@ 0x448
        linespace = space;
 8029806:	f8a4 644c 	strh.w	r6, [r4, #1100]	@ 0x44c
        boundingArea = calculateBoundingArea();
 802980a:	f007 fe87 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802980e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029812:	f204 4354 	addw	r3, r4, #1108	@ 0x454
 8029816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802981a:	4b4b      	ldr	r3, [pc, #300]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    truck.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CTSB));
 802981c:	9807      	ldr	r0, [sp, #28]
 802981e:	9325      	str	r3, [sp, #148]	@ 0x94
 8029820:	4659      	mov	r1, fp
 8029822:	2327      	movs	r3, #39	@ 0x27
 8029824:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029828:	f008 f9c6 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802982c:	9907      	ldr	r1, [sp, #28]
 802982e:	4650      	mov	r0, sl
 8029830:	f006 fa70 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    trailer.setXY(210, 92);
 8029834:	225c      	movs	r2, #92	@ 0x5c
 8029836:	9808      	ldr	r0, [sp, #32]
 8029838:	21d2      	movs	r1, #210	@ 0xd2
 802983a:	f7ff fc61 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802983e:	4628      	mov	r0, r5
 8029840:	9908      	ldr	r1, [sp, #32]
        color = newColor;
 8029842:	f8c4 7490 	str.w	r7, [r4, #1168]	@ 0x490
        linespace = space;
 8029846:	f8a4 6494 	strh.w	r6, [r4, #1172]	@ 0x494
        boundingArea = calculateBoundingArea();
 802984a:	f007 fe67 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802984e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029852:	f204 439c 	addw	r3, r4, #1180	@ 0x49c
 8029856:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802985a:	4b3b      	ldr	r3, [pc, #236]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    trailer.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J2RQ));
 802985c:	9808      	ldr	r0, [sp, #32]
 802985e:	9325      	str	r3, [sp, #148]	@ 0x94
 8029860:	4659      	mov	r1, fp
 8029862:	2326      	movs	r3, #38	@ 0x26
 8029864:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029868:	f008 f9a6 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802986c:	9908      	ldr	r1, [sp, #32]
 802986e:	4650      	mov	r0, sl
 8029870:	f006 fa50 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HydPress.setXY(12, 113);
 8029874:	2271      	movs	r2, #113	@ 0x71
 8029876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029878:	210c      	movs	r1, #12
 802987a:	f7ff fc41 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802987e:	4628      	mov	r0, r5
 8029880:	9909      	ldr	r1, [sp, #36]	@ 0x24
        color = newColor;
 8029882:	f8c4 74d8 	str.w	r7, [r4, #1240]	@ 0x4d8
        linespace = space;
 8029886:	f8a4 64dc 	strh.w	r6, [r4, #1244]	@ 0x4dc
        boundingArea = calculateBoundingArea();
 802988a:	f007 fe47 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802988e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029892:	f204 43e4 	addw	r3, r4, #1252	@ 0x4e4
 8029896:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802989a:	4b2b      	ldr	r3, [pc, #172]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    HydPress.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ENWZ));
 802989c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802989e:	9325      	str	r3, [sp, #148]	@ 0x94
 80298a0:	4659      	mov	r1, fp
 80298a2:	233e      	movs	r3, #62	@ 0x3e
 80298a4:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 80298a8:	f008 f986 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80298ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80298ae:	4650      	mov	r0, sl
 80298b0:	f006 fa30 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7_1.setPosition(9, 138, 301, 2);
 80298b4:	2102      	movs	r1, #2
 80298b6:	f240 132d 	movw	r3, #301	@ 0x12d
 80298ba:	228a      	movs	r2, #138	@ 0x8a
 80298bc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80298be:	9100      	str	r1, [sp, #0]
 80298c0:	2109      	movs	r1, #9
 80298c2:	f7ff fb1b 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 80298c6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80298c8:	f8c4 7518 	str.w	r7, [r4, #1304]	@ 0x518
 80298cc:	4650      	mov	r0, sl
 80298ce:	f006 fa21 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7_1_1.setPosition(9, 162, 302, 2);
 80298d2:	2102      	movs	r1, #2
 80298d4:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 80298d8:	22a2      	movs	r2, #162	@ 0xa2
 80298da:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80298dc:	9100      	str	r1, [sp, #0]
 80298de:	2109      	movs	r1, #9
 80298e0:	f7ff fb0c 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 80298e4:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80298e6:	f8c4 7544 	str.w	r7, [r4, #1348]	@ 0x544
 80298ea:	4650      	mov	r0, sl
 80298ec:	f006 fa12 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Latch.setXY(13, 137);
 80298f0:	2289      	movs	r2, #137	@ 0x89
 80298f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80298f4:	210d      	movs	r1, #13
 80298f6:	f7ff fc03 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 80298fa:	4628      	mov	r0, r5
 80298fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
        color = newColor;
 80298fe:	f8c4 7578 	str.w	r7, [r4, #1400]	@ 0x578
        linespace = space;
 8029902:	f8a4 657c 	strh.w	r6, [r4, #1404]	@ 0x57c
        boundingArea = calculateBoundingArea();
 8029906:	f007 fe09 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802990a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802990e:	f204 5384 	addw	r3, r4, #1412	@ 0x584
 8029912:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029916:	4b0c      	ldr	r3, [pc, #48]	@ (8029948 <_ZN18DiagnosticViewBaseC1Ev+0x6f4>)
    Latch.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5YCL));
 8029918:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802991a:	9325      	str	r3, [sp, #148]	@ 0x94
 802991c:	4659      	mov	r1, fp
 802991e:	233d      	movs	r3, #61	@ 0x3d
 8029920:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029924:	f008 f948 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029928:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802992a:	4650      	mov	r0, sl
 802992c:	f006 f9f2 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    EStop.setXY(12, 184);
 8029930:	22b8      	movs	r2, #184	@ 0xb8
 8029932:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8029934:	210c      	movs	r1, #12
 8029936:	f7ff fbe3 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802993a:	4628      	mov	r0, r5
 802993c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
        color = newColor;
 802993e:	f8c4 75c0 	str.w	r7, [r4, #1472]	@ 0x5c0
 8029942:	e007      	b.n	8029954 <_ZN18DiagnosticViewBaseC1Ev+0x700>
 8029944:	2000b93c 	.word	0x2000b93c
 8029948:	08042200 	.word	0x08042200
 802994c:	2000b934 	.word	0x2000b934
 8029950:	08040ee5 	.word	0x08040ee5
        linespace = space;
 8029954:	f8a4 65c4 	strh.w	r6, [r4, #1476]	@ 0x5c4
        boundingArea = calculateBoundingArea();
 8029958:	f007 fde0 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802995c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029960:	f204 53cc 	addw	r3, r4, #1484	@ 0x5cc
 8029964:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029968:	4bd4      	ldr	r3, [pc, #848]	@ (8029cbc <_ZN18DiagnosticViewBaseC1Ev+0xa68>)
    EStop.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DD70));
 802996a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802996c:	9325      	str	r3, [sp, #148]	@ 0x94
 802996e:	4659      	mov	r1, fp
 8029970:	233c      	movs	r3, #60	@ 0x3c
 8029972:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029976:	f008 f91f 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802997a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802997c:	4650      	mov	r0, sl
 802997e:	f006 f9c9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7_1_1_1.setPosition(9, 184, 301, 2);
 8029982:	2102      	movs	r1, #2
 8029984:	f240 132d 	movw	r3, #301	@ 0x12d
 8029988:	22b8      	movs	r2, #184	@ 0xb8
 802998a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802998c:	9100      	str	r1, [sp, #0]
 802998e:	2109      	movs	r1, #9
 8029990:	f7ff fab4 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8029994:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8029996:	f8c4 7600 	str.w	r7, [r4, #1536]	@ 0x600
 802999a:	4650      	mov	r0, sl
 802999c:	f006 f9ba 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Inclotxt.setPosition(164, 160, 87, 25);
 80299a0:	2319      	movs	r3, #25
 80299a2:	22a0      	movs	r2, #160	@ 0xa0
 80299a4:	21a4      	movs	r1, #164	@ 0xa4
 80299a6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80299a8:	9300      	str	r3, [sp, #0]
 80299aa:	2357      	movs	r3, #87	@ 0x57
 80299ac:	f7ff faa6 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80299b0:	f8c4 7634 	str.w	r7, [r4, #1588]	@ 0x634
        linespace = space;
 80299b4:	f8a4 6638 	strh.w	r6, [r4, #1592]	@ 0x638
        return TextArea::BoundingArea();
 80299b8:	4658      	mov	r0, fp
 80299ba:	f7ff fc17 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 80299be:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 80299c2:	f504 63c8 	add.w	r3, r4, #1600	@ 0x640
 80299c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80299ca:	f8d8 3000 	ldr.w	r3, [r8]
    Unicode::snprintf(InclotxtBuffer, INCLOTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KFHC).getText());
 80299ce:	f604 050c 	addw	r5, r4, #2060	@ 0x80c
 80299d2:	2b00      	cmp	r3, #0
 80299d4:	f43f adf3 	beq.w	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80299d8:	4ab9      	ldr	r2, [pc, #740]	@ (8029cc0 <_ZN18DiagnosticViewBaseC1Ev+0xa6c>)
 80299da:	8813      	ldrh	r3, [r2, #0]
 80299dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80299de:	f67f ae07 	bls.w	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 80299e2:	48b8      	ldr	r0, [pc, #736]	@ (8029cc4 <_ZN18DiagnosticViewBaseC1Ev+0xa70>)
 80299e4:	213a      	movs	r1, #58	@ 0x3a
 80299e6:	6800      	ldr	r0, [r0, #0]
 80299e8:	f003 fa64 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 80299ec:	4ab6      	ldr	r2, [pc, #728]	@ (8029cc8 <_ZN18DiagnosticViewBaseC1Ev+0xa74>)
 80299ee:	4603      	mov	r3, r0
 80299f0:	210a      	movs	r1, #10
 80299f2:	4628      	mov	r0, r5
 80299f4:	f00e fa3c 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80299f8:	4bb0      	ldr	r3, [pc, #704]	@ (8029cbc <_ZN18DiagnosticViewBaseC1Ev+0xa68>)
    Inclotxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W1ZF));
 80299fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
        wc1 = value;
 80299fc:	f8c4 564c 	str.w	r5, [r4, #1612]	@ 0x64c
 8029a00:	9325      	str	r3, [sp, #148]	@ 0x94
 8029a02:	4659      	mov	r1, fp
 8029a04:	233b      	movs	r3, #59	@ 0x3b
 8029a06:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029a0a:	f008 f8d5 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029a0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8029a10:	4650      	mov	r0, sl
 8029a12:	f006 f97f 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HydPresstxt.setPosition(113, 116, 100, 23);
 8029a16:	2317      	movs	r3, #23
 8029a18:	2274      	movs	r2, #116	@ 0x74
 8029a1a:	2171      	movs	r1, #113	@ 0x71
 8029a1c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029a1e:	9300      	str	r3, [sp, #0]
 8029a20:	2364      	movs	r3, #100	@ 0x64
 8029a22:	f7ff fa6b 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8029a26:	f8c4 7680 	str.w	r7, [r4, #1664]	@ 0x680
        linespace = space;
 8029a2a:	f8a4 6684 	strh.w	r6, [r4, #1668]	@ 0x684
        return TextArea::BoundingArea();
 8029a2e:	4658      	mov	r0, fp
 8029a30:	f7ff fbdc 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8029a34:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8029a38:	f204 638c 	addw	r3, r4, #1676	@ 0x68c
 8029a3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029a40:	f8d8 3000 	ldr.w	r3, [r8]
    Unicode::snprintf(HydPresstxtBuffer, HYDPRESSTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QUFX).getText());
 8029a44:	f504 6502 	add.w	r5, r4, #2080	@ 0x820
 8029a48:	2b00      	cmp	r3, #0
 8029a4a:	f43f adb8 	beq.w	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8029a4e:	4a9c      	ldr	r2, [pc, #624]	@ (8029cc0 <_ZN18DiagnosticViewBaseC1Ev+0xa6c>)
 8029a50:	8813      	ldrh	r3, [r2, #0]
 8029a52:	2b38      	cmp	r3, #56	@ 0x38
 8029a54:	f67f adcc 	bls.w	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 8029a58:	f8df 8268 	ldr.w	r8, [pc, #616]	@ 8029cc4 <_ZN18DiagnosticViewBaseC1Ev+0xa70>
        : typedTextId(id)
 8029a5c:	4f97      	ldr	r7, [pc, #604]	@ (8029cbc <_ZN18DiagnosticViewBaseC1Ev+0xa68>)
        return texts->getText(typedTextId);
 8029a5e:	f8d8 0000 	ldr.w	r0, [r8]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029a62:	f8df 9268 	ldr.w	r9, [pc, #616]	@ 8029ccc <_ZN18DiagnosticViewBaseC1Ev+0xa78>
        return texts->getText(typedTextId);
 8029a66:	2138      	movs	r1, #56	@ 0x38
 8029a68:	f003 fa24 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8029a6c:	4a96      	ldr	r2, [pc, #600]	@ (8029cc8 <_ZN18DiagnosticViewBaseC1Ev+0xa74>)
 8029a6e:	4603      	mov	r3, r0
 8029a70:	2119      	movs	r1, #25
 8029a72:	4628      	mov	r0, r5
 8029a74:	f00e f9fc 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8029a78:	f8c4 5698 	str.w	r5, [r4, #1688]	@ 0x698
    HydPresstxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EGUK));
 8029a7c:	ad25      	add	r5, sp, #148	@ 0x94
        : typedTextId(id)
 8029a7e:	2339      	movs	r3, #57	@ 0x39
 8029a80:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8029a82:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029a86:	4629      	mov	r1, r5
 8029a88:	9725      	str	r7, [sp, #148]	@ 0x94
    Latchtxt.setPosition(113, 138, 92, 23);
 8029a8a:	f04f 0b17 	mov.w	fp, #23
    HydPresstxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EGUK));
 8029a8e:	f008 f893 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029a92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8029a94:	4650      	mov	r0, sl
 8029a96:	f006 f93d 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Latchtxt.setPosition(113, 138, 92, 23);
 8029a9a:	228a      	movs	r2, #138	@ 0x8a
 8029a9c:	2171      	movs	r1, #113	@ 0x71
 8029a9e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8029aa0:	f8cd b000 	str.w	fp, [sp]
 8029aa4:	235c      	movs	r3, #92	@ 0x5c
 8029aa6:	f7ff fa29 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        linespace = space;
 8029aaa:	2600      	movs	r6, #0
        color = newColor;
 8029aac:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8029ab0:	f8c4 36cc 	str.w	r3, [r4, #1740]	@ 0x6cc
        linespace = space;
 8029ab4:	f8a4 66d0 	strh.w	r6, [r4, #1744]	@ 0x6d0
        return TextArea::BoundingArea();
 8029ab8:	4628      	mov	r0, r5
 8029aba:	f7ff fb97 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8029abe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029ac2:	f504 63db 	add.w	r3, r4, #1752	@ 0x6d8
 8029ac6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(LatchtxtBuffer, LATCHTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RNFU).getText());
 8029aca:	f604 0352 	addw	r3, r4, #2130	@ 0x852
 8029ace:	9302      	str	r3, [sp, #8]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029ad0:	f8d9 3000 	ldr.w	r3, [r9]
 8029ad4:	2b00      	cmp	r3, #0
 8029ad6:	f43f ad72 	beq.w	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8029ada:	4a79      	ldr	r2, [pc, #484]	@ (8029cc0 <_ZN18DiagnosticViewBaseC1Ev+0xa6c>)
 8029adc:	8813      	ldrh	r3, [r2, #0]
 8029ade:	2b36      	cmp	r3, #54	@ 0x36
 8029ae0:	f67f ad86 	bls.w	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 8029ae4:	2136      	movs	r1, #54	@ 0x36
 8029ae6:	f8d8 0000 	ldr.w	r0, [r8]
 8029aea:	f003 f9e3 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8029aee:	4a76      	ldr	r2, [pc, #472]	@ (8029cc8 <_ZN18DiagnosticViewBaseC1Ev+0xa74>)
 8029af0:	4603      	mov	r3, r0
 8029af2:	2119      	movs	r1, #25
 8029af4:	9802      	ldr	r0, [sp, #8]
 8029af6:	f00e f9bb 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8029afa:	9b02      	ldr	r3, [sp, #8]
    Latchtxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_22VR));
 8029afc:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8029afe:	f8c4 36e4 	str.w	r3, [r4, #1764]	@ 0x6e4
 8029b02:	4629      	mov	r1, r5
        : typedTextId(id)
 8029b04:	2337      	movs	r3, #55	@ 0x37
 8029b06:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029b0a:	9725      	str	r7, [sp, #148]	@ 0x94
 8029b0c:	f008 f854 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029b10:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8029b12:	4650      	mov	r0, sl
 8029b14:	f006 f8fe 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Latchtxt_trailer.setPosition(210, 138, 99, 23);
 8029b18:	228a      	movs	r2, #138	@ 0x8a
 8029b1a:	21d2      	movs	r1, #210	@ 0xd2
 8029b1c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8029b1e:	f8cd b000 	str.w	fp, [sp]
 8029b22:	2363      	movs	r3, #99	@ 0x63
 8029b24:	f7ff f9ea 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8029b28:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8029b2c:	f8c4 3718 	str.w	r3, [r4, #1816]	@ 0x718
        linespace = space;
 8029b30:	f8a4 671c 	strh.w	r6, [r4, #1820]	@ 0x71c
        return TextArea::BoundingArea();
 8029b34:	4628      	mov	r0, r5
 8029b36:	f7ff fb59 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8029b3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029b3e:	f204 7324 	addw	r3, r4, #1828	@ 0x724
 8029b42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(Latchtxt_trailerBuffer, LATCHTXT_TRAILER_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QS83).getText());
 8029b46:	f604 0384 	addw	r3, r4, #2180	@ 0x884
 8029b4a:	9302      	str	r3, [sp, #8]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029b4c:	f8d9 3000 	ldr.w	r3, [r9]
 8029b50:	2b00      	cmp	r3, #0
 8029b52:	f43f ad34 	beq.w	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8029b56:	4a5a      	ldr	r2, [pc, #360]	@ (8029cc0 <_ZN18DiagnosticViewBaseC1Ev+0xa6c>)
 8029b58:	8813      	ldrh	r3, [r2, #0]
 8029b5a:	2b22      	cmp	r3, #34	@ 0x22
 8029b5c:	f67f ad48 	bls.w	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 8029b60:	2122      	movs	r1, #34	@ 0x22
 8029b62:	f8d8 0000 	ldr.w	r0, [r8]
 8029b66:	f003 f9a5 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8029b6a:	4a57      	ldr	r2, [pc, #348]	@ (8029cc8 <_ZN18DiagnosticViewBaseC1Ev+0xa74>)
 8029b6c:	4603      	mov	r3, r0
 8029b6e:	2119      	movs	r1, #25
 8029b70:	9802      	ldr	r0, [sp, #8]
 8029b72:	f00e f97d 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8029b76:	9b02      	ldr	r3, [sp, #8]
    Latchtxt_trailer.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BQWI));
 8029b78:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8029b7a:	f8c4 3730 	str.w	r3, [r4, #1840]	@ 0x730
 8029b7e:	4629      	mov	r1, r5
        : typedTextId(id)
 8029b80:	2323      	movs	r3, #35	@ 0x23
 8029b82:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029b86:	9725      	str	r7, [sp, #148]	@ 0x94
 8029b88:	f008 f816 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029b8c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8029b8e:	4650      	mov	r0, sl
 8029b90:	f006 f8c0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    HydPresstxt_trailer.setPosition(210, 116, 100, 23);
 8029b94:	2274      	movs	r2, #116	@ 0x74
 8029b96:	21d2      	movs	r1, #210	@ 0xd2
 8029b98:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8029b9a:	f8cd b000 	str.w	fp, [sp]
 8029b9e:	2364      	movs	r3, #100	@ 0x64
 8029ba0:	f7ff f9ac 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8029ba4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8029ba8:	f8c4 3764 	str.w	r3, [r4, #1892]	@ 0x764
        linespace = space;
 8029bac:	f8a4 6768 	strh.w	r6, [r4, #1896]	@ 0x768
        return TextArea::BoundingArea();
 8029bb0:	4628      	mov	r0, r5
 8029bb2:	f7ff fb1b 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8029bb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029bba:	f504 63ee 	add.w	r3, r4, #1904	@ 0x770
 8029bbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_D8BX).getText());
 8029bc2:	f604 03b6 	addw	r3, r4, #2230	@ 0x8b6
 8029bc6:	9302      	str	r3, [sp, #8]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029bc8:	f8d9 3000 	ldr.w	r3, [r9]
 8029bcc:	2b00      	cmp	r3, #0
 8029bce:	f43f acf6 	beq.w	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8029bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8029cc0 <_ZN18DiagnosticViewBaseC1Ev+0xa6c>)
 8029bd4:	8813      	ldrh	r3, [r2, #0]
 8029bd6:	2b24      	cmp	r3, #36	@ 0x24
 8029bd8:	f67f ad0a 	bls.w	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 8029bdc:	2124      	movs	r1, #36	@ 0x24
 8029bde:	f8d8 0000 	ldr.w	r0, [r8]
 8029be2:	f003 f967 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8029be6:	4a38      	ldr	r2, [pc, #224]	@ (8029cc8 <_ZN18DiagnosticViewBaseC1Ev+0xa74>)
 8029be8:	4603      	mov	r3, r0
 8029bea:	2119      	movs	r1, #25
 8029bec:	9802      	ldr	r0, [sp, #8]
 8029bee:	f00e f93f 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8029bf2:	9b02      	ldr	r3, [sp, #8]
    HydPresstxt_trailer.setTypedText(touchgfx::TypedText(T___SINGLEUSE_TJ3D));
 8029bf4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8029bf6:	f8c4 377c 	str.w	r3, [r4, #1916]	@ 0x77c
 8029bfa:	4629      	mov	r1, r5
        : typedTextId(id)
 8029bfc:	f04f 0325 	mov.w	r3, #37	@ 0x25
 8029c00:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029c04:	9725      	str	r7, [sp, #148]	@ 0x94
 8029c06:	f007 ffd7 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029c0a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8029c0c:	4650      	mov	r0, sl
 8029c0e:	f006 f881 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    EStoptxt.setPosition(146, 184, 122, 23);
 8029c12:	22b8      	movs	r2, #184	@ 0xb8
 8029c14:	2192      	movs	r1, #146	@ 0x92
 8029c16:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8029c18:	f8cd b000 	str.w	fp, [sp]
 8029c1c:	237a      	movs	r3, #122	@ 0x7a
 8029c1e:	f7ff f96d 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8029c22:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8029c26:	f8c4 37b0 	str.w	r3, [r4, #1968]	@ 0x7b0
        linespace = space;
 8029c2a:	f8a4 67b4 	strh.w	r6, [r4, #1972]	@ 0x7b4
        return TextArea::BoundingArea();
 8029c2e:	4628      	mov	r0, r5
 8029c30:	f7ff fadc 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 8029c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029c38:	f204 73bc 	addw	r3, r4, #1980	@ 0x7bc
 8029c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8029c40:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(EStoptxtBuffer, ESTOPTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_KRNC).getText());
 8029c44:	f604 0be8 	addw	fp, r4, #2280	@ 0x8e8
 8029c48:	2b00      	cmp	r3, #0
 8029c4a:	f43f acb8 	beq.w	80295be <_ZN18DiagnosticViewBaseC1Ev+0x36a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8029c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8029cc0 <_ZN18DiagnosticViewBaseC1Ev+0xa6c>)
 8029c50:	8813      	ldrh	r3, [r2, #0]
 8029c52:	2b34      	cmp	r3, #52	@ 0x34
 8029c54:	f67f accc 	bls.w	80295f0 <_ZN18DiagnosticViewBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 8029c58:	f8d8 0000 	ldr.w	r0, [r8]
 8029c5c:	2134      	movs	r1, #52	@ 0x34
 8029c5e:	f003 f929 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8029c62:	4a19      	ldr	r2, [pc, #100]	@ (8029cc8 <_ZN18DiagnosticViewBaseC1Ev+0xa74>)
 8029c64:	4603      	mov	r3, r0
 8029c66:	2119      	movs	r1, #25
 8029c68:	4658      	mov	r0, fp
 8029c6a:	f00e f901 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8029c6e:	2335      	movs	r3, #53	@ 0x35
    EStoptxt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_L3ZN));
 8029c70:	9817      	ldr	r0, [sp, #92]	@ 0x5c
        wc1 = value;
 8029c72:	f8c4 b7c8 	str.w	fp, [r4, #1992]	@ 0x7c8
 8029c76:	4629      	mov	r1, r5
 8029c78:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 8029c7c:	9725      	str	r7, [sp, #148]	@ 0x94
 8029c7e:	f007 ff9b 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029c82:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8029c84:	4650      	mov	r0, sl
 8029c86:	f006 f845 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    scalableImage2.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_EAST_50_50_000000_SVG_ID));
 8029c8a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029c8c:	230c      	movs	r3, #12
 8029c8e:	4629      	mov	r1, r5
 8029c90:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 8029c94:	f007 f8ad 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage2.setPosition(20, 215, 37, 27);
 8029c98:	231b      	movs	r3, #27
 8029c9a:	22d7      	movs	r2, #215	@ 0xd7
 8029c9c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029c9e:	9300      	str	r3, [sp, #0]
 8029ca0:	2114      	movs	r1, #20
 8029ca2:	2325      	movs	r3, #37	@ 0x25
 8029ca4:	f7ff f92a 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage2.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8029ca8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029caa:	4631      	mov	r1, r6
 8029cac:	f007 f938 	bl	8030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8029cb0:	4650      	mov	r0, sl
 8029cb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8029cb4:	f006 f82e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8029cb8:	4620      	mov	r0, r4
 8029cba:	e009      	b.n	8029cd0 <_ZN18DiagnosticViewBaseC1Ev+0xa7c>
 8029cbc:	08042200 	.word	0x08042200
 8029cc0:	2000b934 	.word	0x2000b934
 8029cc4:	2000b93c 	.word	0x2000b93c
 8029cc8:	08040ee5 	.word	0x08040ee5
 8029ccc:	2000b930 	.word	0x2000b930
 8029cd0:	b029      	add	sp, #164	@ 0xa4
 8029cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029cd6:	bf00      	nop

08029cd8 <_ZN18MenuLayer1ViewBase16handleDownButtonEv>:
     * Virtual Action Handlers
     */
    virtual void handleDownButton()
    {
        // Override and implement this function in MenuLayer1
    }
 8029cd8:	4770      	bx	lr

08029cda <_ZN18MenuLayer1ViewBase14handleUpButtonEv>:
    virtual void handleUpButton()
    {
        // Override and implement this function in MenuLayer1
    }
 8029cda:	4770      	bx	lr

08029cdc <_ZN18MenuLayer1ViewBase17handleEnterButtonEv>:
    virtual void handleEnterButton()
    {
        // Override and implement this function in MenuLayer1
    }
 8029cdc:	4770      	bx	lr

08029cde <_ZN18MenuLayer1ViewBaseD1Ev>:
}

MenuLayer1ViewBase::~MenuLayer1ViewBase()
{

}
 8029cde:	4770      	bx	lr

08029ce0 <_ZN18MenuLayer1ViewBase11setupScreenEv>:

void MenuLayer1ViewBase::setupScreen()
{

}
 8029ce0:	4770      	bx	lr

08029ce2 <_ZN18MenuLayer1ViewBaseD0Ev>:
MenuLayer1ViewBase::~MenuLayer1ViewBase()
 8029ce2:	b510      	push	{r4, lr}
}
 8029ce4:	f44f 7123 	mov.w	r1, #652	@ 0x28c
MenuLayer1ViewBase::~MenuLayer1ViewBase()
 8029ce8:	4604      	mov	r4, r0
}
 8029cea:	f012 fbfe 	bl	803c4ea <_ZdlPvj>
 8029cee:	4620      	mov	r0, r4
 8029cf0:	bd10      	pop	{r4, pc}

08029cf2 <_ZN18MenuLayer1ViewBase14handleKeyEventEh>:

void MenuLayer1ViewBase::handleKeyEvent(uint8_t key)
{
 8029cf2:	b510      	push	{r4, lr}
    if(0 == key)
 8029cf4:	b929      	cbnz	r1, 8029d02 <_ZN18MenuLayer1ViewBase14handleKeyEventEh+0x10>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8029cf6:	f00b f809 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        //When hardware button 3 clicked call virtual function
        //Call handleEnterButton
        handleEnterButton();
    
    }
}
 8029cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoScreenTestHomeScreenNoTransition();
 8029cfe:	f7fe b9c9 	b.w	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
    if(2 == key)
 8029d02:	2902      	cmp	r1, #2
 8029d04:	d104      	bne.n	8029d10 <_ZN18MenuLayer1ViewBase14handleKeyEventEh+0x1e>
        handleDownButton();
 8029d06:	6803      	ldr	r3, [r0, #0]
 8029d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8029d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        handleEnterButton();
 8029d0e:	4718      	bx	r3
    if(1 == key)
 8029d10:	2901      	cmp	r1, #1
 8029d12:	d102      	bne.n	8029d1a <_ZN18MenuLayer1ViewBase14handleKeyEventEh+0x28>
        handleUpButton();
 8029d14:	6803      	ldr	r3, [r0, #0]
 8029d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029d18:	e7f7      	b.n	8029d0a <_ZN18MenuLayer1ViewBase14handleKeyEventEh+0x18>
    if(3 == key)
 8029d1a:	2903      	cmp	r1, #3
 8029d1c:	d102      	bne.n	8029d24 <_ZN18MenuLayer1ViewBase14handleKeyEventEh+0x32>
        handleEnterButton();
 8029d1e:	6803      	ldr	r3, [r0, #0]
 8029d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029d22:	e7f2      	b.n	8029d0a <_ZN18MenuLayer1ViewBase14handleKeyEventEh+0x18>
}
 8029d24:	bd10      	pop	{r4, pc}
	...

08029d28 <_ZN18MenuLayer1ViewBaseC1Ev>:
MenuLayer1ViewBase::MenuLayer1ViewBase()
 8029d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d2c:	4604      	mov	r4, r0
 8029d2e:	b093      	sub	sp, #76	@ 0x4c
 8029d30:	46a0      	mov	r8, r4
 8029d32:	2500      	movs	r5, #0
 8029d34:	f00c fbec 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 8029d38:	4baa      	ldr	r3, [pc, #680]	@ (8029fe4 <_ZN18MenuLayer1ViewBaseC1Ev+0x2bc>)
 8029d3a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8029d3c:	f848 3b40 	str.w	r3, [r8], #64
 8029d40:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 8029d44:	4640      	mov	r0, r8
 8029d46:	f7ff f8f5 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8029d4a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8029d4e:	a910      	add	r1, sp, #64	@ 0x40
 8029d50:	4648      	mov	r0, r9
 8029d52:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8029d56:	f7ff fa13 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8029d5a:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 8029d5e:	4618      	mov	r0, r3
 8029d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8029d62:	f7ff f8e7 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 8029d66:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 8029d6a:	4618      	mov	r0, r3
 8029d6c:	9302      	str	r3, [sp, #8]
 8029d6e:	f7ff fa21 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 8029d72:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 8029d76:	4618      	mov	r0, r3
 8029d78:	9303      	str	r3, [sp, #12]
 8029d7a:	f7ff fa1b 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 8029d7e:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
 8029d82:	4618      	mov	r0, r3
 8029d84:	9304      	str	r3, [sp, #16]
 8029d86:	f7ff fa15 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 8029d8a:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 8029d8e:	4618      	mov	r0, r3
 8029d90:	9305      	str	r3, [sp, #20]
 8029d92:	f7ff fa0f 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 8029d96:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 8029d9a:	a910      	add	r1, sp, #64	@ 0x40
 8029d9c:	4618      	mov	r0, r3
 8029d9e:	9306      	str	r3, [sp, #24]
 8029da0:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8029da4:	f7ff f9ec 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8029da8:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 8029dac:	a910      	add	r1, sp, #64	@ 0x40
 8029dae:	4618      	mov	r0, r3
 8029db0:	9307      	str	r3, [sp, #28]
 8029db2:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8029db6:	f7ff f9e3 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8029dba:	f504 73f6 	add.w	r3, r4, #492	@ 0x1ec
 8029dbe:	4618      	mov	r0, r3
 8029dc0:	f504 7a06 	add.w	sl, r4, #536	@ 0x218
 8029dc4:	a910      	add	r1, sp, #64	@ 0x40
 8029dc6:	f504 7711 	add.w	r7, r4, #580	@ 0x244
 8029dca:	9308      	str	r3, [sp, #32]
 8029dcc:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8029dd0:	f7ff f9d6 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8029dd4:	a910      	add	r1, sp, #64	@ 0x40
 8029dd6:	4650      	mov	r0, sl
 8029dd8:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 8029ddc:	f7ff f9d0 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8029de0:	4629      	mov	r1, r5
 8029de2:	2226      	movs	r2, #38	@ 0x26
 8029de4:	4638      	mov	r0, r7
 8029de6:	f013 fb5d 	bl	803d4a4 <memset>
 8029dea:	4638      	mov	r0, r7
 8029dec:	f7ff f9b6 	bl	802915c <_ZN8touchgfx6WidgetC1Ev>
 8029df0:	4b7d      	ldr	r3, [pc, #500]	@ (8029fe8 <_ZN18MenuLayer1ViewBaseC1Ev+0x2c0>)
 8029df2:	f8c4 3244 	str.w	r3, [r4, #580]	@ 0x244
 8029df6:	4b7d      	ldr	r3, [pc, #500]	@ (8029fec <_ZN18MenuLayer1ViewBaseC1Ev+0x2c4>)
 8029df8:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8029dfc:	f04f 3bff 	mov.w	fp, #4294967295
 8029e00:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
    __background.setPosition(0, 0, 320, 240);
 8029e04:	22f0      	movs	r2, #240	@ 0xf0
              text(0)
 8029e06:	e9c4 b5a1 	strd	fp, r5, [r4, #644]	@ 0x284
 8029e0a:	f8a4 6270 	strh.w	r6, [r4, #624]	@ 0x270
        : color(col)
 8029e0e:	f8c4 5274 	str.w	r5, [r4, #628]	@ 0x274
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8029e12:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
 8029e16:	f8a4 527c 	strh.w	r5, [r4, #636]	@ 0x27c
 8029e1a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8029e1e:	f8c4 5280 	str.w	r5, [r4, #640]	@ 0x280
 8029e22:	4629      	mov	r1, r5
 8029e24:	9200      	str	r2, [sp, #0]
 8029e26:	4640      	mov	r0, r8
 8029e28:	462a      	mov	r2, r5
 8029e2a:	1d26      	adds	r6, r4, #4
 8029e2c:	f7ff f866 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8029e30:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8029e34:	66a2      	str	r2, [r4, #104]	@ 0x68
 8029e36:	4641      	mov	r1, r8
 8029e38:	4630      	mov	r0, r6
 8029e3a:	f005 ff6b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, -1);
 8029e3e:	465a      	mov	r2, fp
 8029e40:	4629      	mov	r1, r5
 8029e42:	4648      	mov	r0, r9
 8029e44:	f7ff f95c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 8029e48:	a910      	add	r1, sp, #64	@ 0x40
 8029e4a:	4648      	mov	r0, r9
 8029e4c:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 8029e50:	f006 ffcf 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8029e54:	4649      	mov	r1, r9
 8029e56:	4630      	mov	r0, r6
 8029e58:	f005 ff5c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Ribbon.setPosition(0, 1, 320, 23);
 8029e5c:	2317      	movs	r3, #23
 8029e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029e60:	9300      	str	r3, [sp, #0]
 8029e62:	4629      	mov	r1, r5
 8029e64:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8029e68:	2201      	movs	r2, #1
 8029e6a:	f7ff f847 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8029e6e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8029e72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029e74:	f8c4 20c0 	str.w	r2, [r4, #192]	@ 0xc0
 8029e78:	4630      	mov	r0, r6
 8029e7a:	f005 ff4b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 8029e7e:	9802      	ldr	r0, [sp, #8]
 8029e80:	22d8      	movs	r2, #216	@ 0xd8
 8029e82:	2150      	movs	r1, #80	@ 0x50
 8029e84:	f7ff f93c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8029e88:	f04f 0803 	mov.w	r8, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 8029e8c:	aa10      	add	r2, sp, #64	@ 0x40
 8029e8e:	9802      	ldr	r0, [sp, #8]
 8029e90:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 8029e94:	a90f      	add	r1, sp, #60	@ 0x3c
 8029e96:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 8029e9a:	f006 fedc 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8029e9e:	9902      	ldr	r1, [sp, #8]
 8029ea0:	4630      	mov	r0, r6
 8029ea2:	f005 ff37 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 8029ea6:	9803      	ldr	r0, [sp, #12]
 8029ea8:	4629      	mov	r1, r5
 8029eaa:	22d8      	movs	r2, #216	@ 0xd8
 8029eac:	f7ff f928 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 8029eb0:	aa10      	add	r2, sp, #64	@ 0x40
 8029eb2:	9803      	ldr	r0, [sp, #12]
 8029eb4:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 8029eb8:	a90f      	add	r1, sp, #60	@ 0x3c
 8029eba:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 8029ebe:	f006 feca 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8029ec2:	9903      	ldr	r1, [sp, #12]
 8029ec4:	4630      	mov	r0, r6
 8029ec6:	f005 ff25 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 8029eca:	9804      	ldr	r0, [sp, #16]
 8029ecc:	22d8      	movs	r2, #216	@ 0xd8
 8029ece:	21f0      	movs	r1, #240	@ 0xf0
 8029ed0:	f7ff f916 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 8029ed4:	aa10      	add	r2, sp, #64	@ 0x40
 8029ed6:	9804      	ldr	r0, [sp, #16]
 8029ed8:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 8029edc:	a90f      	add	r1, sp, #60	@ 0x3c
 8029ede:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 8029ee2:	f006 feb8 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8029ee6:	9904      	ldr	r1, [sp, #16]
 8029ee8:	4630      	mov	r0, r6
 8029eea:	f005 ff13 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 8029eee:	9805      	ldr	r0, [sp, #20]
 8029ef0:	22d8      	movs	r2, #216	@ 0xd8
 8029ef2:	21a0      	movs	r1, #160	@ 0xa0
 8029ef4:	f7ff f904 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 8029ef8:	aa10      	add	r2, sp, #64	@ 0x40
 8029efa:	9805      	ldr	r0, [sp, #20]
 8029efc:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 8029f00:	a90f      	add	r1, sp, #60	@ 0x3c
 8029f02:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 8029f06:	f006 fea6 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8029f0a:	9905      	ldr	r1, [sp, #20]
 8029f0c:	4630      	mov	r0, r6
 8029f0e:	f005 ff01 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Enter.setXY(265, 213);
 8029f12:	22d5      	movs	r2, #213	@ 0xd5
 8029f14:	9806      	ldr	r0, [sp, #24]
 8029f16:	f240 1109 	movw	r1, #265	@ 0x109
 8029f1a:	f7ff f8f1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8029f1e:	230e      	movs	r3, #14
    Enter.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_SUBDIRECTORY_ARROW_RIGHT_30_30_000000_SVG_ID));
 8029f20:	9806      	ldr	r0, [sp, #24]
 8029f22:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8029f26:	a910      	add	r1, sp, #64	@ 0x40
 8029f28:	f006 ff63 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8029f2c:	9906      	ldr	r1, [sp, #24]
 8029f2e:	4630      	mov	r0, r6
 8029f30:	f005 fef0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Menu.setXY(25, 213);
 8029f34:	22d5      	movs	r2, #213	@ 0xd5
 8029f36:	9807      	ldr	r0, [sp, #28]
 8029f38:	2119      	movs	r1, #25
 8029f3a:	f7ff f8e1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8029f3e:	230d      	movs	r3, #13
    Menu.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_MENU_30_30_000000_SVG_ID));
 8029f40:	9807      	ldr	r0, [sp, #28]
 8029f42:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8029f46:	a910      	add	r1, sp, #64	@ 0x40
 8029f48:	f006 ff53 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8029f4c:	9907      	ldr	r1, [sp, #28]
 8029f4e:	4630      	mov	r0, r6
 8029f50:	f005 fee0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Up.setXY(105, 213);
 8029f54:	22d5      	movs	r2, #213	@ 0xd5
 8029f56:	9808      	ldr	r0, [sp, #32]
 8029f58:	2169      	movs	r1, #105	@ 0x69
 8029f5a:	f7ff f8d1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8029f5e:	230b      	movs	r3, #11
    Up.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_UPWARD_30_30_000000_SVG_ID));
 8029f60:	9808      	ldr	r0, [sp, #32]
 8029f62:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8029f66:	a910      	add	r1, sp, #64	@ 0x40
 8029f68:	f006 ff43 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8029f6c:	9908      	ldr	r1, [sp, #32]
 8029f6e:	4630      	mov	r0, r6
 8029f70:	f005 fed0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Down.setXY(185, 213);
 8029f74:	22d5      	movs	r2, #213	@ 0xd5
 8029f76:	4650      	mov	r0, sl
 8029f78:	21b9      	movs	r1, #185	@ 0xb9
 8029f7a:	f7ff f8c1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8029f7e:	230a      	movs	r3, #10
    Down.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DOWNWARD_30_30_000000_SVG_ID));
 8029f80:	a910      	add	r1, sp, #64	@ 0x40
 8029f82:	4650      	mov	r0, sl
 8029f84:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8029f88:	f006 ff33 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8029f8c:	4651      	mov	r1, sl
 8029f8e:	4630      	mov	r0, r6
 8029f90:	f005 fec0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setPosition(106, -1, 109, 25);
 8029f94:	2319      	movs	r3, #25
 8029f96:	465a      	mov	r2, fp
 8029f98:	9300      	str	r3, [sp, #0]
 8029f9a:	4638      	mov	r0, r7
 8029f9c:	236d      	movs	r3, #109	@ 0x6d
 8029f9e:	216a      	movs	r1, #106	@ 0x6a
 8029fa0:	f7fe ffac 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        linespace = space;
 8029fa4:	f8a4 5278 	strh.w	r5, [r4, #632]	@ 0x278
        boundingArea = calculateBoundingArea();
 8029fa8:	ad0a      	add	r5, sp, #40	@ 0x28
 8029faa:	4639      	mov	r1, r7
 8029fac:	4628      	mov	r0, r5
        color = newColor;
 8029fae:	f8c4 b274 	str.w	fp, [r4, #628]	@ 0x274
        boundingArea = calculateBoundingArea();
 8029fb2:	f007 fab3 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8029fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8029fba:	f504 7320 	add.w	r3, r4, #640	@ 0x280
 8029fbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8029fec <_ZN18MenuLayer1ViewBaseC1Ev+0x2c4>)
 8029fc4:	9310      	str	r3, [sp, #64]	@ 0x40
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LSG5));
 8029fc6:	a910      	add	r1, sp, #64	@ 0x40
 8029fc8:	2344      	movs	r3, #68	@ 0x44
 8029fca:	4638      	mov	r0, r7
 8029fcc:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8029fd0:	f007 fdf2 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8029fd4:	4630      	mov	r0, r6
 8029fd6:	4639      	mov	r1, r7
 8029fd8:	f005 fe9c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8029fdc:	4620      	mov	r0, r4
 8029fde:	b013      	add	sp, #76	@ 0x4c
 8029fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029fe4:	08042918 	.word	0x08042918
 8029fe8:	0804373c 	.word	0x0804373c
 8029fec:	08042200 	.word	0x08042200

08029ff0 <_ZN18MenuLayer2ViewBase16handleDownButtonEv>:
     * Virtual Action Handlers
     */
    virtual void handleDownButton()
    {
        // Override and implement this function in MenuLayer2
    }
 8029ff0:	4770      	bx	lr

08029ff2 <_ZN18MenuLayer2ViewBase14handleUpButtonEv>:
    virtual void handleUpButton()
    {
        // Override and implement this function in MenuLayer2
    }
 8029ff2:	4770      	bx	lr

08029ff4 <_ZN18MenuLayer2ViewBase17handleEnterButtonEv>:
    virtual void handleEnterButton()
    {
        // Override and implement this function in MenuLayer2
    }
 8029ff4:	4770      	bx	lr

08029ff6 <_ZN18MenuLayer2ViewBaseD1Ev>:
}

MenuLayer2ViewBase::~MenuLayer2ViewBase()
{

}
 8029ff6:	4770      	bx	lr

08029ff8 <_ZN18MenuLayer2ViewBase11setupScreenEv>:

void MenuLayer2ViewBase::setupScreen()
{

}
 8029ff8:	4770      	bx	lr

08029ffa <_ZN18MenuLayer2ViewBaseD0Ev>:
MenuLayer2ViewBase::~MenuLayer2ViewBase()
 8029ffa:	b510      	push	{r4, lr}
}
 8029ffc:	f44f 7133 	mov.w	r1, #716	@ 0x2cc
MenuLayer2ViewBase::~MenuLayer2ViewBase()
 802a000:	4604      	mov	r4, r0
}
 802a002:	f012 fa72 	bl	803c4ea <_ZdlPvj>
 802a006:	4620      	mov	r0, r4
 802a008:	bd10      	pop	{r4, pc}

0802a00a <_ZN18MenuLayer2ViewBase14handleKeyEventEh>:

void MenuLayer2ViewBase::handleKeyEvent(uint8_t key)
{
 802a00a:	b510      	push	{r4, lr}
    if(0 == key)
 802a00c:	b929      	cbnz	r1, 802a01a <_ZN18MenuLayer2ViewBase14handleKeyEventEh+0x10>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802a00e:	f00a fe7d 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        //When hardware button 7 clicked change screen to MenuLayer3
        //Go to MenuLayer3 with no screen transition
        application().gotoMenuLayer3ScreenNoTransition();
    
    }
}
 802a012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoMenuLayer1ScreenNoTransition();
 802a016:	f7fe b86d 	b.w	80280f4 <_ZN23FrontendApplicationBase32gotoMenuLayer1ScreenNoTransitionEv>
    if(2 == key)
 802a01a:	2902      	cmp	r1, #2
 802a01c:	d104      	bne.n	802a028 <_ZN18MenuLayer2ViewBase14handleKeyEventEh+0x1e>
        handleDownButton();
 802a01e:	6803      	ldr	r3, [r0, #0]
 802a020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 802a022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        handleUpButton();
 802a026:	4718      	bx	r3
    if(1 == key)
 802a028:	2901      	cmp	r1, #1
 802a02a:	d102      	bne.n	802a032 <_ZN18MenuLayer2ViewBase14handleKeyEventEh+0x28>
        handleUpButton();
 802a02c:	6803      	ldr	r3, [r0, #0]
 802a02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a030:	e7f7      	b.n	802a022 <_ZN18MenuLayer2ViewBase14handleKeyEventEh+0x18>
    if(3 == key)
 802a032:	2903      	cmp	r1, #3
 802a034:	d102      	bne.n	802a03c <_ZN18MenuLayer2ViewBase14handleKeyEventEh+0x32>
        handleEnterButton();
 802a036:	6803      	ldr	r3, [r0, #0]
 802a038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a03a:	e7f2      	b.n	802a022 <_ZN18MenuLayer2ViewBase14handleKeyEventEh+0x18>
    if(7 == key)
 802a03c:	2907      	cmp	r1, #7
 802a03e:	d105      	bne.n	802a04c <_ZN18MenuLayer2ViewBase14handleKeyEventEh+0x42>
 802a040:	f00a fe64 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 802a044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoMenuLayer3ScreenNoTransition();
 802a048:	f7fe b874 	b.w	8028134 <_ZN23FrontendApplicationBase32gotoMenuLayer3ScreenNoTransitionEv>
}
 802a04c:	bd10      	pop	{r4, pc}
	...

0802a050 <_ZN18MenuLayer2ViewBaseC1Ev>:
MenuLayer2ViewBase::MenuLayer2ViewBase()
 802a050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a054:	4604      	mov	r4, r0
 802a056:	b093      	sub	sp, #76	@ 0x4c
 802a058:	46a0      	mov	r8, r4
 802a05a:	2500      	movs	r5, #0
 802a05c:	f00c fa58 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 802a060:	4bbe      	ldr	r3, [pc, #760]	@ (802a35c <_ZN18MenuLayer2ViewBaseC1Ev+0x30c>)
 802a062:	63e5      	str	r5, [r4, #60]	@ 0x3c
 802a064:	f848 3b40 	str.w	r3, [r8], #64
 802a068:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 802a06c:	4640      	mov	r0, r8
 802a06e:	f7fe ff61 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802a072:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 802a076:	a910      	add	r1, sp, #64	@ 0x40
 802a078:	4648      	mov	r0, r9
 802a07a:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 802a07e:	f7ff f87f 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a082:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 802a086:	4618      	mov	r0, r3
 802a088:	9309      	str	r3, [sp, #36]	@ 0x24
 802a08a:	f7fe ff53 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802a08e:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 802a092:	4618      	mov	r0, r3
 802a094:	9303      	str	r3, [sp, #12]
 802a096:	f7ff f88d 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a09a:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 802a09e:	4618      	mov	r0, r3
 802a0a0:	9304      	str	r3, [sp, #16]
 802a0a2:	f7ff f887 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a0a6:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
 802a0aa:	4618      	mov	r0, r3
 802a0ac:	9305      	str	r3, [sp, #20]
 802a0ae:	f7ff f881 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a0b2:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 802a0b6:	4618      	mov	r0, r3
 802a0b8:	9306      	str	r3, [sp, #24]
 802a0ba:	f7ff f87b 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a0be:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 802a0c2:	a910      	add	r1, sp, #64	@ 0x40
 802a0c4:	4618      	mov	r0, r3
 802a0c6:	9307      	str	r3, [sp, #28]
 802a0c8:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 802a0cc:	f7ff f858 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a0d0:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 802a0d4:	4618      	mov	r0, r3
 802a0d6:	f504 7bf6 	add.w	fp, r4, #492	@ 0x1ec
 802a0da:	a910      	add	r1, sp, #64	@ 0x40
 802a0dc:	9308      	str	r3, [sp, #32]
 802a0de:	f504 7a06 	add.w	sl, r4, #536	@ 0x218
 802a0e2:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 802a0e6:	f7ff f84b 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a0ea:	a910      	add	r1, sp, #64	@ 0x40
 802a0ec:	4658      	mov	r0, fp
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 802a0ee:	f504 7711 	add.w	r7, r4, #580	@ 0x244
 802a0f2:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 802a0f6:	f7ff f843 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a0fa:	a910      	add	r1, sp, #64	@ 0x40
 802a0fc:	4650      	mov	r0, sl
 802a0fe:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 802a102:	f7ff f83d 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a106:	4629      	mov	r1, r5
 802a108:	2226      	movs	r2, #38	@ 0x26
 802a10a:	4638      	mov	r0, r7
 802a10c:	f013 f9ca 	bl	803d4a4 <memset>
 802a110:	4638      	mov	r0, r7
 802a112:	f7ff f823 	bl	802915c <_ZN8touchgfx6WidgetC1Ev>
 802a116:	4b92      	ldr	r3, [pc, #584]	@ (802a360 <_ZN18MenuLayer2ViewBaseC1Ev+0x310>)
 802a118:	f8c4 326c 	str.w	r3, [r4, #620]	@ 0x26c
 802a11c:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 802a120:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
        : TextAreaWithWildcardBase(), wc1(0)
 802a124:	4b8f      	ldr	r3, [pc, #572]	@ (802a364 <_ZN18MenuLayer2ViewBaseC1Ev+0x314>)
 802a126:	f8c4 3244 	str.w	r3, [r4, #580]	@ 0x244
 802a12a:	f04f 33ff 	mov.w	r3, #4294967295
              text(0)
 802a12e:	e9c4 35a1 	strd	r3, r5, [r4, #644]	@ 0x284
    __background.setPosition(0, 0, 320, 240);
 802a132:	23f0      	movs	r3, #240	@ 0xf0
 802a134:	462a      	mov	r2, r5
 802a136:	f8a4 6270 	strh.w	r6, [r4, #624]	@ 0x270
        : color(col)
 802a13a:	f8c4 5274 	str.w	r5, [r4, #628]	@ 0x274
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 802a13e:	f8a4 527c 	strh.w	r5, [r4, #636]	@ 0x27c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 802a142:	f8c4 5280 	str.w	r5, [r4, #640]	@ 0x280
 802a146:	f8c4 528c 	str.w	r5, [r4, #652]	@ 0x28c
 802a14a:	4629      	mov	r1, r5
 802a14c:	4640      	mov	r0, r8
 802a14e:	9300      	str	r3, [sp, #0]
 802a150:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802a154:	1d26      	adds	r6, r4, #4
 802a156:	f7fe fed1 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a15a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802a15e:	66a3      	str	r3, [r4, #104]	@ 0x68
 802a160:	4641      	mov	r1, r8
 802a162:	4630      	mov	r0, r6
 802a164:	f005 fdd6 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, -1);
 802a168:	f04f 32ff 	mov.w	r2, #4294967295
 802a16c:	4629      	mov	r1, r5
 802a16e:	4648      	mov	r0, r9
 802a170:	f7fe ffc6 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 802a174:	a910      	add	r1, sp, #64	@ 0x40
 802a176:	4648      	mov	r0, r9
 802a178:	f8ad 5040 	strh.w	r5, [sp, #64]	@ 0x40
 802a17c:	f006 fe39 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a180:	4649      	mov	r1, r9
 802a182:	4630      	mov	r0, r6
 802a184:	f005 fdc6 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Ribbon.setPosition(0, 1, 320, 23);
 802a188:	2317      	movs	r3, #23
 802a18a:	2201      	movs	r2, #1
 802a18c:	4629      	mov	r1, r5
 802a18e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a190:	9300      	str	r3, [sp, #0]
 802a192:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802a196:	f7fe feb1 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a19a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802a19e:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 802a1a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a1a4:	4630      	mov	r0, r6
 802a1a6:	f005 fdb5 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 802a1aa:	9803      	ldr	r0, [sp, #12]
 802a1ac:	22d8      	movs	r2, #216	@ 0xd8
 802a1ae:	21a0      	movs	r1, #160	@ 0xa0
 802a1b0:	f7fe ffa6 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a1b4:	f04f 0803 	mov.w	r8, #3
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a1b8:	aa10      	add	r2, sp, #64	@ 0x40
 802a1ba:	9803      	ldr	r0, [sp, #12]
 802a1bc:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802a1c0:	a90f      	add	r1, sp, #60	@ 0x3c
 802a1c2:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802a1c6:	f006 fd46 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a1ca:	9903      	ldr	r1, [sp, #12]
 802a1cc:	4630      	mov	r0, r6
 802a1ce:	f005 fda1 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 802a1d2:	9804      	ldr	r0, [sp, #16]
 802a1d4:	22d8      	movs	r2, #216	@ 0xd8
 802a1d6:	21f0      	movs	r1, #240	@ 0xf0
 802a1d8:	f7fe ff92 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a1dc:	aa10      	add	r2, sp, #64	@ 0x40
 802a1de:	9804      	ldr	r0, [sp, #16]
 802a1e0:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802a1e4:	a90f      	add	r1, sp, #60	@ 0x3c
 802a1e6:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802a1ea:	f006 fd34 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a1ee:	9904      	ldr	r1, [sp, #16]
 802a1f0:	4630      	mov	r0, r6
 802a1f2:	f005 fd8f 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 802a1f6:	4629      	mov	r1, r5
 802a1f8:	9805      	ldr	r0, [sp, #20]
 802a1fa:	22d8      	movs	r2, #216	@ 0xd8
 802a1fc:	f7fe ff80 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a200:	aa10      	add	r2, sp, #64	@ 0x40
 802a202:	9805      	ldr	r0, [sp, #20]
 802a204:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802a208:	a90f      	add	r1, sp, #60	@ 0x3c
 802a20a:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802a20e:	f006 fd22 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a212:	9905      	ldr	r1, [sp, #20]
 802a214:	4630      	mov	r0, r6
 802a216:	f005 fd7d 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 802a21a:	9806      	ldr	r0, [sp, #24]
 802a21c:	22d8      	movs	r2, #216	@ 0xd8
 802a21e:	2150      	movs	r1, #80	@ 0x50
 802a220:	f7fe ff6e 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a224:	aa10      	add	r2, sp, #64	@ 0x40
 802a226:	9806      	ldr	r0, [sp, #24]
 802a228:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802a22c:	a90f      	add	r1, sp, #60	@ 0x3c
 802a22e:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802a232:	f006 fd10 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a236:	9906      	ldr	r1, [sp, #24]
 802a238:	4630      	mov	r0, r6
 802a23a:	f005 fd6b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Down_1.setXY(185, 213);
 802a23e:	22d5      	movs	r2, #213	@ 0xd5
 802a240:	9807      	ldr	r0, [sp, #28]
 802a242:	21b9      	movs	r1, #185	@ 0xb9
 802a244:	f7fe ff5c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a248:	230a      	movs	r3, #10
    Down_1.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DOWNWARD_30_30_000000_SVG_ID));
 802a24a:	9807      	ldr	r0, [sp, #28]
 802a24c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 802a250:	a910      	add	r1, sp, #64	@ 0x40
 802a252:	f006 fdce 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a256:	9907      	ldr	r1, [sp, #28]
 802a258:	4630      	mov	r0, r6
 802a25a:	f005 fd5b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Up_1.setXY(105, 213);
 802a25e:	22d5      	movs	r2, #213	@ 0xd5
 802a260:	9808      	ldr	r0, [sp, #32]
 802a262:	2169      	movs	r1, #105	@ 0x69
 802a264:	f7fe ff4c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a268:	230b      	movs	r3, #11
    Up_1.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_UPWARD_30_30_000000_SVG_ID));
 802a26a:	9808      	ldr	r0, [sp, #32]
 802a26c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 802a270:	a910      	add	r1, sp, #64	@ 0x40
 802a272:	f006 fdbe 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a276:	9908      	ldr	r1, [sp, #32]
 802a278:	4630      	mov	r0, r6
 802a27a:	f005 fd4b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Menu.setXY(25, 213);
 802a27e:	22d5      	movs	r2, #213	@ 0xd5
 802a280:	2119      	movs	r1, #25
 802a282:	4658      	mov	r0, fp
 802a284:	f7fe ff3c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a288:	230d      	movs	r3, #13
    Menu.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_MENU_30_30_000000_SVG_ID));
 802a28a:	a910      	add	r1, sp, #64	@ 0x40
 802a28c:	4658      	mov	r0, fp
 802a28e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 802a292:	f006 fdae 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a296:	4659      	mov	r1, fp
 802a298:	4630      	mov	r0, r6
 802a29a:	f005 fd3b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Enter_1.setXY(265, 213);
 802a29e:	22d5      	movs	r2, #213	@ 0xd5
 802a2a0:	f240 1109 	movw	r1, #265	@ 0x109
 802a2a4:	4650      	mov	r0, sl
 802a2a6:	f7fe ff2b 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a2aa:	230e      	movs	r3, #14
    Enter_1.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_SUBDIRECTORY_ARROW_RIGHT_30_30_000000_SVG_ID));
 802a2ac:	a910      	add	r1, sp, #64	@ 0x40
 802a2ae:	4650      	mov	r0, sl
 802a2b0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 802a2b4:	f006 fd9d 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a2b8:	4651      	mov	r1, sl
 802a2ba:	4630      	mov	r0, r6
 802a2bc:	f005 fd2a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    CategoryTitle.setPosition(64, 0, 193, 25);
 802a2c0:	2319      	movs	r3, #25
 802a2c2:	462a      	mov	r2, r5
 802a2c4:	9300      	str	r3, [sp, #0]
 802a2c6:	2140      	movs	r1, #64	@ 0x40
 802a2c8:	23c1      	movs	r3, #193	@ 0xc1
 802a2ca:	4638      	mov	r0, r7
 802a2cc:	f7fe fe16 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802a2d0:	f04f 33ff 	mov.w	r3, #4294967295
 802a2d4:	f8c4 3274 	str.w	r3, [r4, #628]	@ 0x274
        boundingArea = calculateBoundingArea();
 802a2d8:	f8d4 3244 	ldr.w	r3, [r4, #580]	@ 0x244
        linespace = space;
 802a2dc:	f8a4 5278 	strh.w	r5, [r4, #632]	@ 0x278
        boundingArea = calculateBoundingArea();
 802a2e0:	ad0a      	add	r5, sp, #40	@ 0x28
 802a2e2:	4628      	mov	r0, r5
 802a2e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802a2e8:	4639      	mov	r1, r7
 802a2ea:	4798      	blx	r3
 802a2ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802a2f0:	f504 7320 	add.w	r3, r4, #640	@ 0x280
 802a2f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802a2f8:	4b1b      	ldr	r3, [pc, #108]	@ (802a368 <_ZN18MenuLayer2ViewBaseC1Ev+0x318>)
 802a2fa:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(CategoryTitleBuffer, CATEGORYTITLE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_12CH).getText());
 802a2fc:	f504 7524 	add.w	r5, r4, #656	@ 0x290
 802a300:	b92b      	cbnz	r3, 802a30e <_ZN18MenuLayer2ViewBaseC1Ev+0x2be>
 802a302:	4b1a      	ldr	r3, [pc, #104]	@ (802a36c <_ZN18MenuLayer2ViewBaseC1Ev+0x31c>)
 802a304:	4a1a      	ldr	r2, [pc, #104]	@ (802a370 <_ZN18MenuLayer2ViewBaseC1Ev+0x320>)
 802a306:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a308:	481a      	ldr	r0, [pc, #104]	@ (802a374 <_ZN18MenuLayer2ViewBaseC1Ev+0x324>)
 802a30a:	f012 f90d 	bl	803c528 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 802a30e:	4b1a      	ldr	r3, [pc, #104]	@ (802a378 <_ZN18MenuLayer2ViewBaseC1Ev+0x328>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a310:	881b      	ldrh	r3, [r3, #0]
 802a312:	2b45      	cmp	r3, #69	@ 0x45
 802a314:	d803      	bhi.n	802a31e <_ZN18MenuLayer2ViewBaseC1Ev+0x2ce>
 802a316:	4b19      	ldr	r3, [pc, #100]	@ (802a37c <_ZN18MenuLayer2ViewBaseC1Ev+0x32c>)
 802a318:	4a15      	ldr	r2, [pc, #84]	@ (802a370 <_ZN18MenuLayer2ViewBaseC1Ev+0x320>)
 802a31a:	2161      	movs	r1, #97	@ 0x61
 802a31c:	e7f4      	b.n	802a308 <_ZN18MenuLayer2ViewBaseC1Ev+0x2b8>
        return texts->getText(typedTextId);
 802a31e:	4b18      	ldr	r3, [pc, #96]	@ (802a380 <_ZN18MenuLayer2ViewBaseC1Ev+0x330>)
 802a320:	2145      	movs	r1, #69	@ 0x45
 802a322:	6818      	ldr	r0, [r3, #0]
 802a324:	f002 fdc6 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802a328:	4a16      	ldr	r2, [pc, #88]	@ (802a384 <_ZN18MenuLayer2ViewBaseC1Ev+0x334>)
 802a32a:	4603      	mov	r3, r0
 802a32c:	211e      	movs	r1, #30
 802a32e:	4628      	mov	r0, r5
 802a330:	f00d fd9e 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802a334:	4b0a      	ldr	r3, [pc, #40]	@ (802a360 <_ZN18MenuLayer2ViewBaseC1Ev+0x310>)
 802a336:	9310      	str	r3, [sp, #64]	@ 0x40
    CategoryTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UN0M));
 802a338:	a910      	add	r1, sp, #64	@ 0x40
 802a33a:	2351      	movs	r3, #81	@ 0x51
 802a33c:	4638      	mov	r0, r7
        wc1 = value;
 802a33e:	f8c4 528c 	str.w	r5, [r4, #652]	@ 0x28c
 802a342:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 802a346:	f007 fc37 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802a34a:	4630      	mov	r0, r6
 802a34c:	4639      	mov	r1, r7
 802a34e:	f005 fce1 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 802a352:	4620      	mov	r0, r4
 802a354:	b013      	add	sp, #76	@ 0x4c
 802a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a35a:	bf00      	nop
 802a35c:	08042958 	.word	0x08042958
 802a360:	08042200 	.word	0x08042200
 802a364:	08042758 	.word	0x08042758
 802a368:	2000b930 	.word	0x2000b930
 802a36c:	08040d9d 	.word	0x08040d9d
 802a370:	08040e9a 	.word	0x08040e9a
 802a374:	08040e1a 	.word	0x08040e1a
 802a378:	2000b934 	.word	0x2000b934
 802a37c:	08040e5c 	.word	0x08040e5c
 802a380:	2000b93c 	.word	0x2000b93c
 802a384:	08040ee5 	.word	0x08040ee5

0802a388 <_ZN18MenuLayer3ViewBase14handleUpButtonEv>:
     * Virtual Action Handlers
     */
    virtual void handleUpButton()
    {
        // Override and implement this function in MenuLayer3
    }
 802a388:	4770      	bx	lr

0802a38a <_ZN18MenuLayer3ViewBase16handleDownButtonEv>:
    virtual void handleDownButton()
    {
        // Override and implement this function in MenuLayer3
    }
 802a38a:	4770      	bx	lr

0802a38c <_ZN18MenuLayer3ViewBase17handleEnterButtonEv>:
    virtual void handleEnterButton()
    {
        // Override and implement this function in MenuLayer3
    }
 802a38c:	4770      	bx	lr

0802a38e <_ZN18MenuLayer3ViewBaseD1Ev>:
}

MenuLayer3ViewBase::~MenuLayer3ViewBase()
{

}
 802a38e:	4770      	bx	lr

0802a390 <_ZN18MenuLayer3ViewBase11setupScreenEv>:

void MenuLayer3ViewBase::setupScreen()
{

}
 802a390:	4770      	bx	lr

0802a392 <_ZN18MenuLayer3ViewBaseD0Ev>:
MenuLayer3ViewBase::~MenuLayer3ViewBase()
 802a392:	b510      	push	{r4, lr}
}
 802a394:	f240 7104 	movw	r1, #1796	@ 0x704
MenuLayer3ViewBase::~MenuLayer3ViewBase()
 802a398:	4604      	mov	r4, r0
}
 802a39a:	f012 f8a6 	bl	803c4ea <_ZdlPvj>
 802a39e:	4620      	mov	r0, r4
 802a3a0:	bd10      	pop	{r4, pc}

0802a3a2 <_ZN18MenuLayer3ViewBase14handleKeyEventEh>:

void MenuLayer3ViewBase::handleKeyEvent(uint8_t key)
{
 802a3a2:	b510      	push	{r4, lr}
    if(0 == key)
 802a3a4:	b929      	cbnz	r1, 802a3b2 <_ZN18MenuLayer3ViewBase14handleKeyEventEh+0x10>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802a3a6:	f00a fcb1 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        //When hardware button 3 clicked call virtual function
        //Call handleEnterButton
        handleEnterButton();
    
    }
}
 802a3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoMenuLayer2ScreenNoTransition();
 802a3ae:	f7fd beb1 	b.w	8028114 <_ZN23FrontendApplicationBase32gotoMenuLayer2ScreenNoTransitionEv>
    if(1 == key)
 802a3b2:	2901      	cmp	r1, #1
 802a3b4:	d104      	bne.n	802a3c0 <_ZN18MenuLayer3ViewBase14handleKeyEventEh+0x1e>
        handleUpButton();
 802a3b6:	6803      	ldr	r3, [r0, #0]
 802a3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 802a3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        handleEnterButton();
 802a3be:	4718      	bx	r3
    if(2 == key)
 802a3c0:	2902      	cmp	r1, #2
 802a3c2:	d102      	bne.n	802a3ca <_ZN18MenuLayer3ViewBase14handleKeyEventEh+0x28>
        handleDownButton();
 802a3c4:	6803      	ldr	r3, [r0, #0]
 802a3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a3c8:	e7f7      	b.n	802a3ba <_ZN18MenuLayer3ViewBase14handleKeyEventEh+0x18>
    if(3 == key)
 802a3ca:	2903      	cmp	r1, #3
 802a3cc:	d102      	bne.n	802a3d4 <_ZN18MenuLayer3ViewBase14handleKeyEventEh+0x32>
        handleEnterButton();
 802a3ce:	6803      	ldr	r3, [r0, #0]
 802a3d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a3d2:	e7f2      	b.n	802a3ba <_ZN18MenuLayer3ViewBase14handleKeyEventEh+0x18>
}
 802a3d4:	bd10      	pop	{r4, pc}
	...

0802a3d8 <_ZN18MenuLayer3ViewBaseC1Ev>:
MenuLayer3ViewBase::MenuLayer3ViewBase()
 802a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a3dc:	4604      	mov	r4, r0
 802a3de:	b09b      	sub	sp, #108	@ 0x6c
 802a3e0:	4626      	mov	r6, r4
 802a3e2:	2500      	movs	r5, #0
 802a3e4:	f00c f894 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 802a3e8:	4bd1      	ldr	r3, [pc, #836]	@ (802a730 <_ZN18MenuLayer3ViewBaseC1Ev+0x358>)
 802a3ea:	63e5      	str	r5, [r4, #60]	@ 0x3c
 802a3ec:	f846 3b40 	str.w	r3, [r6], #64
 802a3f0:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 802a3f4:	4630      	mov	r0, r6
 802a3f6:	f7fe fd9d 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802a3fa:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 802a3fe:	a918      	add	r1, sp, #96	@ 0x60
 802a400:	4640      	mov	r0, r8
 802a402:	f8ad b060 	strh.w	fp, [sp, #96]	@ 0x60
 802a406:	f7fe febb 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a40a:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 802a40e:	4618      	mov	r0, r3
 802a410:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a412:	f7fe fd8f 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
        : Box(), borderColor(0), borderSize(0)
 802a416:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 802a41a:	4618      	mov	r0, r3
 802a41c:	4fc5      	ldr	r7, [pc, #788]	@ (802a734 <_ZN18MenuLayer3ViewBaseC1Ev+0x35c>)
 802a41e:	9311      	str	r3, [sp, #68]	@ 0x44
 802a420:	f7fe fd88 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802a424:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 802a428:	4618      	mov	r0, r3
 802a42a:	f8c4 70c4 	str.w	r7, [r4, #196]	@ 0xc4
        : color(col)
 802a42e:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
 802a432:	f8a4 50f4 	strh.w	r5, [r4, #244]	@ 0xf4
 802a436:	9310      	str	r3, [sp, #64]	@ 0x40
 802a438:	f7fe fd7c 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802a43c:	f8c4 70f8 	str.w	r7, [r4, #248]	@ 0xf8
 802a440:	f504 7796 	add.w	r7, r4, #300	@ 0x12c
 802a444:	4638      	mov	r0, r7
 802a446:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 802a44a:	f8a4 5128 	strh.w	r5, [r4, #296]	@ 0x128
 802a44e:	f7fe feb1 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a452:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 802a456:	4618      	mov	r0, r3
 802a458:	9306      	str	r3, [sp, #24]
 802a45a:	f7fe feab 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a45e:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 802a462:	4618      	mov	r0, r3
 802a464:	9307      	str	r3, [sp, #28]
 802a466:	f7fe fea5 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a46a:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 802a46e:	4618      	mov	r0, r3
 802a470:	9308      	str	r3, [sp, #32]
 802a472:	f7fe fe9f 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802a476:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
 802a47a:	a918      	add	r1, sp, #96	@ 0x60
 802a47c:	4618      	mov	r0, r3
 802a47e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a480:	f8ad b060 	strh.w	fp, [sp, #96]	@ 0x60
 802a484:	f7fe fe7c 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a488:	f504 730a 	add.w	r3, r4, #552	@ 0x228
 802a48c:	f504 7a15 	add.w	sl, r4, #596	@ 0x254
 802a490:	4618      	mov	r0, r3
 802a492:	a918      	add	r1, sp, #96	@ 0x60
 802a494:	930a      	str	r3, [sp, #40]	@ 0x28
 802a496:	f504 7920 	add.w	r9, r4, #640	@ 0x280
 802a49a:	f8ad b060 	strh.w	fp, [sp, #96]	@ 0x60
 802a49e:	f7fe fe6f 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a4a2:	a918      	add	r1, sp, #96	@ 0x60
 802a4a4:	4650      	mov	r0, sl
 802a4a6:	f8ad b060 	strh.w	fp, [sp, #96]	@ 0x60
 802a4aa:	f7fe fe69 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a4ae:	a918      	add	r1, sp, #96	@ 0x60
 802a4b0:	4648      	mov	r0, r9
 802a4b2:	f8ad b060 	strh.w	fp, [sp, #96]	@ 0x60
 802a4b6:	f7fe fe63 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802a4ba:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 802a4be:	4618      	mov	r0, r3
 802a4c0:	9303      	str	r3, [sp, #12]
 802a4c2:	f7fe febb 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802a4c6:	f504 733e 	add.w	r3, r4, #760	@ 0x2f8
 802a4ca:	4618      	mov	r0, r3
 802a4cc:	9304      	str	r3, [sp, #16]
 802a4ce:	f7fe feb5 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802a4d2:	f504 7351 	add.w	r3, r4, #836	@ 0x344
 802a4d6:	4618      	mov	r0, r3
 802a4d8:	9305      	str	r3, [sp, #20]
 802a4da:	f7fe feaf 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802a4de:	f504 7364 	add.w	r3, r4, #912	@ 0x390
 802a4e2:	4618      	mov	r0, r3
 802a4e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a4e6:	f7fe fea9 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802a4ea:	f504 7377 	add.w	r3, r4, #988	@ 0x3dc
 802a4ee:	4618      	mov	r0, r3
 802a4f0:	930c      	str	r3, [sp, #48]	@ 0x30
 802a4f2:	f7fe fea3 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802a4f6:	f504 6385 	add.w	r3, r4, #1064	@ 0x428
 802a4fa:	4618      	mov	r0, r3
 802a4fc:	930d      	str	r3, [sp, #52]	@ 0x34
 802a4fe:	f7fe fe9d 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802a502:	f204 4374 	addw	r3, r4, #1140	@ 0x474
 802a506:	4618      	mov	r0, r3
 802a508:	930e      	str	r3, [sp, #56]	@ 0x38
 802a50a:	f7fe fe97 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
    __background.setPosition(0, 0, 320, 240);
 802a50e:	23f0      	movs	r3, #240	@ 0xf0
 802a510:	462a      	mov	r2, r5
 802a512:	4630      	mov	r0, r6
 802a514:	9300      	str	r3, [sp, #0]
 802a516:	4629      	mov	r1, r5
 802a518:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802a51c:	f104 0b04 	add.w	fp, r4, #4
 802a520:	f7fe fcec 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a524:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802a528:	66a3      	str	r3, [r4, #104]	@ 0x68
 802a52a:	4631      	mov	r1, r6
 802a52c:	4658      	mov	r0, fp
 802a52e:	f005 fbf1 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, -1);
 802a532:	f04f 32ff 	mov.w	r2, #4294967295
 802a536:	4640      	mov	r0, r8
 802a538:	4629      	mov	r1, r5
 802a53a:	f7fe fde1 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 802a53e:	4640      	mov	r0, r8
 802a540:	a918      	add	r1, sp, #96	@ 0x60
 802a542:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 802a546:	f006 fc54 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a54a:	4641      	mov	r1, r8
 802a54c:	4658      	mov	r0, fp
 802a54e:	f005 fbe1 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Ribbon.setPosition(0, 1, 320, 23);
 802a552:	2317      	movs	r3, #23
 802a554:	2201      	movs	r2, #1
 802a556:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802a558:	9300      	str	r3, [sp, #0]
 802a55a:	4629      	mov	r1, r5
 802a55c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802a560:	f7fe fccc 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a564:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802a568:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a56a:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 802a56e:	4658      	mov	r0, fp
 802a570:	f005 fbd0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    menuItemBackground.setPosition(16, 40, 293, 29);
 802a574:	231d      	movs	r3, #29
 802a576:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802a578:	9300      	str	r3, [sp, #0]
 802a57a:	2228      	movs	r2, #40	@ 0x28
 802a57c:	f240 1325 	movw	r3, #293	@ 0x125
 802a580:	2110      	movs	r1, #16
 802a582:	f7fe fcbb 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        borderColor = colorBorder;
 802a586:	4a6c      	ldr	r2, [pc, #432]	@ (802a738 <_ZN18MenuLayer3ViewBaseC1Ev+0x360>)
 802a588:	9911      	ldr	r1, [sp, #68]	@ 0x44
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802a58a:	f8df 81c0 	ldr.w	r8, [pc, #448]	@ 802a74c <_ZN18MenuLayer3ViewBaseC1Ev+0x374>
 802a58e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        borderSize = size;
 802a592:	2602      	movs	r6, #2
        borderColor = colorBorder;
 802a594:	e9c4 233b 	strd	r2, r3, [r4, #236]	@ 0xec
        borderSize = size;
 802a598:	f8a4 60f4 	strh.w	r6, [r4, #244]	@ 0xf4
 802a59c:	4658      	mov	r0, fp
 802a59e:	f005 fbb9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    menuItemBackground_1.setPosition(16, 80, 293, 113);
 802a5a2:	2371      	movs	r3, #113	@ 0x71
 802a5a4:	2250      	movs	r2, #80	@ 0x50
 802a5a6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802a5a8:	9300      	str	r3, [sp, #0]
 802a5aa:	2110      	movs	r1, #16
 802a5ac:	f240 1325 	movw	r3, #293	@ 0x125
 802a5b0:	f7fe fca4 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        borderColor = colorBorder;
 802a5b4:	4961      	ldr	r1, [pc, #388]	@ (802a73c <_ZN18MenuLayer3ViewBaseC1Ev+0x364>)
        borderSize = size;
 802a5b6:	f8a4 6128 	strh.w	r6, [r4, #296]	@ 0x128
        borderColor = colorBorder;
 802a5ba:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802a5be:	e9c4 1348 	strd	r1, r3, [r4, #288]	@ 0x120
 802a5c2:	4658      	mov	r0, fp
 802a5c4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802a5c6:	f005 fba5 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 802a5ca:	4638      	mov	r0, r7
 802a5cc:	22d8      	movs	r2, #216	@ 0xd8
 802a5ce:	2150      	movs	r1, #80	@ 0x50
 802a5d0:	f7fe fd96 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a5d4:	2603      	movs	r6, #3
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a5d6:	aa18      	add	r2, sp, #96	@ 0x60
 802a5d8:	4638      	mov	r0, r7
 802a5da:	a917      	add	r1, sp, #92	@ 0x5c
 802a5dc:	f8ad 605c 	strh.w	r6, [sp, #92]	@ 0x5c
 802a5e0:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 802a5e4:	f006 fb37 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a5e8:	4639      	mov	r1, r7
 802a5ea:	4658      	mov	r0, fp
 802a5ec:	f005 fb92 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 802a5f0:	9806      	ldr	r0, [sp, #24]
 802a5f2:	22d8      	movs	r2, #216	@ 0xd8
 802a5f4:	4629      	mov	r1, r5
 802a5f6:	f7fe fd83 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a5fa:	aa18      	add	r2, sp, #96	@ 0x60
 802a5fc:	9806      	ldr	r0, [sp, #24]
 802a5fe:	f8ad 605c 	strh.w	r6, [sp, #92]	@ 0x5c
 802a602:	a917      	add	r1, sp, #92	@ 0x5c
 802a604:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 802a608:	f006 fb25 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a60c:	9906      	ldr	r1, [sp, #24]
 802a60e:	4658      	mov	r0, fp
 802a610:	f005 fb80 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 802a614:	9807      	ldr	r0, [sp, #28]
 802a616:	22d8      	movs	r2, #216	@ 0xd8
 802a618:	21f0      	movs	r1, #240	@ 0xf0
 802a61a:	f7fe fd71 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a61e:	aa18      	add	r2, sp, #96	@ 0x60
 802a620:	9807      	ldr	r0, [sp, #28]
 802a622:	f8ad 605c 	strh.w	r6, [sp, #92]	@ 0x5c
 802a626:	a917      	add	r1, sp, #92	@ 0x5c
 802a628:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 802a62c:	f006 fb13 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a630:	9907      	ldr	r1, [sp, #28]
 802a632:	4658      	mov	r0, fp
 802a634:	f005 fb6e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 802a638:	9808      	ldr	r0, [sp, #32]
 802a63a:	22d8      	movs	r2, #216	@ 0xd8
 802a63c:	21a0      	movs	r1, #160	@ 0xa0
 802a63e:	f7fe fd5f 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802a642:	aa18      	add	r2, sp, #96	@ 0x60
 802a644:	9808      	ldr	r0, [sp, #32]
 802a646:	f8ad 605c 	strh.w	r6, [sp, #92]	@ 0x5c
 802a64a:	a917      	add	r1, sp, #92	@ 0x5c
 802a64c:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 802a650:	f006 fb01 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802a654:	9908      	ldr	r1, [sp, #32]
 802a656:	4658      	mov	r0, fp
 802a658:	f005 fb5c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Enter_1.setXY(265, 213);
 802a65c:	22d5      	movs	r2, #213	@ 0xd5
 802a65e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a660:	f240 1109 	movw	r1, #265	@ 0x109
 802a664:	f7fe fd4c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a668:	230e      	movs	r3, #14
    Enter_1.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_SUBDIRECTORY_ARROW_RIGHT_30_30_000000_SVG_ID));
 802a66a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a66c:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 802a670:	a918      	add	r1, sp, #96	@ 0x60
 802a672:	f006 fbbe 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a676:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a678:	4658      	mov	r0, fp
 802a67a:	f005 fb4b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Menu.setXY(25, 213);
 802a67e:	22d5      	movs	r2, #213	@ 0xd5
 802a680:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802a682:	2119      	movs	r1, #25
 802a684:	f7fe fd3c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a688:	230d      	movs	r3, #13
    Menu.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_MENU_30_30_000000_SVG_ID));
 802a68a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802a68c:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 802a690:	a918      	add	r1, sp, #96	@ 0x60
 802a692:	f006 fbae 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a696:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802a698:	4658      	mov	r0, fp
 802a69a:	f005 fb3b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Up_1.setXY(105, 213);
 802a69e:	22d5      	movs	r2, #213	@ 0xd5
 802a6a0:	4650      	mov	r0, sl
 802a6a2:	2169      	movs	r1, #105	@ 0x69
 802a6a4:	f7fe fd2c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a6a8:	230b      	movs	r3, #11
    Up_1.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_UPWARD_30_30_000000_SVG_ID));
 802a6aa:	4650      	mov	r0, sl
 802a6ac:	a918      	add	r1, sp, #96	@ 0x60
 802a6ae:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 802a6b2:	f006 fb9e 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a6b6:	4651      	mov	r1, sl
 802a6b8:	4658      	mov	r0, fp
 802a6ba:	f005 fb2b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Down_1.setXY(185, 213);
 802a6be:	22d5      	movs	r2, #213	@ 0xd5
 802a6c0:	21b9      	movs	r1, #185	@ 0xb9
 802a6c2:	4648      	mov	r0, r9
 802a6c4:	f7fe fd1c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802a6c8:	f04f 0a0a 	mov.w	sl, #10
    Down_1.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DOWNWARD_30_30_000000_SVG_ID));
 802a6cc:	a918      	add	r1, sp, #96	@ 0x60
 802a6ce:	4648      	mov	r0, r9
 802a6d0:	f8ad a060 	strh.w	sl, [sp, #96]	@ 0x60
 802a6d4:	f006 fb8d 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802a6d8:	4649      	mov	r1, r9
 802a6da:	4658      	mov	r0, fp
 802a6dc:	f005 fb1a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    enumValueText.setPosition(37, 41, 246, 29);
 802a6e0:	231d      	movs	r3, #29
 802a6e2:	2229      	movs	r2, #41	@ 0x29
 802a6e4:	9803      	ldr	r0, [sp, #12]
 802a6e6:	9300      	str	r3, [sp, #0]
 802a6e8:	2125      	movs	r1, #37	@ 0x25
 802a6ea:	23f6      	movs	r3, #246	@ 0xf6
 802a6ec:	f7fe fc06 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a6f0:	f8d4 32ac 	ldr.w	r3, [r4, #684]	@ 0x2ac
 802a6f4:	9903      	ldr	r1, [sp, #12]
 802a6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 802a6fa:	f8a4 52e0 	strh.w	r5, [r4, #736]	@ 0x2e0
        boundingArea = calculateBoundingArea();
 802a6fe:	ae12      	add	r6, sp, #72	@ 0x48
        color = newColor;
 802a700:	f04f 37ff 	mov.w	r7, #4294967295
        boundingArea = calculateBoundingArea();
 802a704:	4630      	mov	r0, r6
        color = newColor;
 802a706:	f8c4 72dc 	str.w	r7, [r4, #732]	@ 0x2dc
        boundingArea = calculateBoundingArea();
 802a70a:	4798      	blx	r3
 802a70c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802a710:	f504 733a 	add.w	r3, r4, #744	@ 0x2e8
 802a714:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(enumValueTextBuffer, ENUMVALUETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_K4NX).getText());
 802a718:	f504 6398 	add.w	r3, r4, #1216	@ 0x4c0
 802a71c:	9306      	str	r3, [sp, #24]
 802a71e:	f8d8 3000 	ldr.w	r3, [r8]
 802a722:	b9ab      	cbnz	r3, 802a750 <_ZN18MenuLayer3ViewBaseC1Ev+0x378>
 802a724:	4b06      	ldr	r3, [pc, #24]	@ (802a740 <_ZN18MenuLayer3ViewBaseC1Ev+0x368>)
 802a726:	4a07      	ldr	r2, [pc, #28]	@ (802a744 <_ZN18MenuLayer3ViewBaseC1Ev+0x36c>)
 802a728:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a72a:	4807      	ldr	r0, [pc, #28]	@ (802a748 <_ZN18MenuLayer3ViewBaseC1Ev+0x370>)
 802a72c:	f011 fefc 	bl	803c528 <__assert_func>
 802a730:	08042998 	.word	0x08042998
 802a734:	08043580 	.word	0x08043580
 802a738:	ff2869b8 	.word	0xff2869b8
 802a73c:	ffb4c3d6 	.word	0xffb4c3d6
 802a740:	08040d9d 	.word	0x08040d9d
 802a744:	08040e9a 	.word	0x08040e9a
 802a748:	08040e1a 	.word	0x08040e1a
 802a74c:	2000b930 	.word	0x2000b930
        return typedTextId < numberOfTypedTexts;
 802a750:	f8df 932c 	ldr.w	r9, [pc, #812]	@ 802aa80 <_ZN18MenuLayer3ViewBaseC1Ev+0x6a8>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a754:	f8b9 3000 	ldrh.w	r3, [r9]
 802a758:	2b48      	cmp	r3, #72	@ 0x48
 802a75a:	d803      	bhi.n	802a764 <_ZN18MenuLayer3ViewBaseC1Ev+0x38c>
 802a75c:	4bc4      	ldr	r3, [pc, #784]	@ (802aa70 <_ZN18MenuLayer3ViewBaseC1Ev+0x698>)
 802a75e:	4ac5      	ldr	r2, [pc, #788]	@ (802aa74 <_ZN18MenuLayer3ViewBaseC1Ev+0x69c>)
 802a760:	2161      	movs	r1, #97	@ 0x61
 802a762:	e7e2      	b.n	802a72a <_ZN18MenuLayer3ViewBaseC1Ev+0x352>
        return texts->getText(typedTextId);
 802a764:	4bc4      	ldr	r3, [pc, #784]	@ (802aa78 <_ZN18MenuLayer3ViewBaseC1Ev+0x6a0>)
 802a766:	2148      	movs	r1, #72	@ 0x48
 802a768:	6818      	ldr	r0, [r3, #0]
 802a76a:	f002 fba3 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802a76e:	4651      	mov	r1, sl
 802a770:	4603      	mov	r3, r0
 802a772:	4ac2      	ldr	r2, [pc, #776]	@ (802aa7c <_ZN18MenuLayer3ViewBaseC1Ev+0x6a4>)
 802a774:	9806      	ldr	r0, [sp, #24]
        : typedTextId(id)
 802a776:	f8df a30c 	ldr.w	sl, [pc, #780]	@ 802aa84 <_ZN18MenuLayer3ViewBaseC1Ev+0x6ac>
 802a77a:	f00d fb79 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802a77e:	9a06      	ldr	r2, [sp, #24]
 802a780:	f8c4 22f4 	str.w	r2, [r4, #756]	@ 0x2f4
 802a784:	234e      	movs	r3, #78	@ 0x4e
    enumValueText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8246));
 802a786:	9803      	ldr	r0, [sp, #12]
 802a788:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802a78c:	a918      	add	r1, sp, #96	@ 0x60
 802a78e:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 802a792:	f007 fa11 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802a796:	9903      	ldr	r1, [sp, #12]
        visible = vis;
 802a798:	f884 52d1 	strb.w	r5, [r4, #721]	@ 0x2d1
 802a79c:	4658      	mov	r0, fp
 802a79e:	f005 fab9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    numberValueText.setPosition(71, 40, 98, 29);
 802a7a2:	221d      	movs	r2, #29
 802a7a4:	9804      	ldr	r0, [sp, #16]
 802a7a6:	9200      	str	r2, [sp, #0]
 802a7a8:	2362      	movs	r3, #98	@ 0x62
 802a7aa:	2228      	movs	r2, #40	@ 0x28
 802a7ac:	2147      	movs	r1, #71	@ 0x47
 802a7ae:	f7fe fba5 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a7b2:	f8d4 32f8 	ldr.w	r3, [r4, #760]	@ 0x2f8
 802a7b6:	9904      	ldr	r1, [sp, #16]
 802a7b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 802a7bc:	f8c4 7328 	str.w	r7, [r4, #808]	@ 0x328
        boundingArea = calculateBoundingArea();
 802a7c0:	4630      	mov	r0, r6
        linespace = space;
 802a7c2:	f8a4 532c 	strh.w	r5, [r4, #812]	@ 0x32c
        boundingArea = calculateBoundingArea();
 802a7c6:	4798      	blx	r3
 802a7c8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802a7cc:	f504 734d 	add.w	r3, r4, #820	@ 0x334
 802a7d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802a7d4:	f8d8 3000 	ldr.w	r3, [r8]
    Unicode::snprintf(numberValueTextBuffer, NUMBERVALUETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AR9V).getText());
 802a7d8:	f204 42d4 	addw	r2, r4, #1236	@ 0x4d4
 802a7dc:	9203      	str	r2, [sp, #12]
 802a7de:	2b00      	cmp	r3, #0
 802a7e0:	d0a0      	beq.n	802a724 <_ZN18MenuLayer3ViewBaseC1Ev+0x34c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a7e2:	f8b9 3000 	ldrh.w	r3, [r9]
 802a7e6:	2b49      	cmp	r3, #73	@ 0x49
 802a7e8:	d9b8      	bls.n	802a75c <_ZN18MenuLayer3ViewBaseC1Ev+0x384>
        return texts->getText(typedTextId);
 802a7ea:	4ba3      	ldr	r3, [pc, #652]	@ (802aa78 <_ZN18MenuLayer3ViewBaseC1Ev+0x6a0>)
 802a7ec:	2149      	movs	r1, #73	@ 0x49
 802a7ee:	6818      	ldr	r0, [r3, #0]
 802a7f0:	f002 fb60 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802a7f4:	4aa1      	ldr	r2, [pc, #644]	@ (802aa7c <_ZN18MenuLayer3ViewBaseC1Ev+0x6a4>)
 802a7f6:	4603      	mov	r3, r0
 802a7f8:	2132      	movs	r1, #50	@ 0x32
 802a7fa:	9803      	ldr	r0, [sp, #12]
 802a7fc:	f00d fb38 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802a800:	9a03      	ldr	r2, [sp, #12]
 802a802:	f8c4 2340 	str.w	r2, [r4, #832]	@ 0x340
        : typedTextId(id)
 802a806:	234f      	movs	r3, #79	@ 0x4f
    numberValueText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AHFH));
 802a808:	9804      	ldr	r0, [sp, #16]
 802a80a:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802a80e:	a918      	add	r1, sp, #96	@ 0x60
 802a810:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 802a814:	f007 f9d0 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802a818:	9904      	ldr	r1, [sp, #16]
 802a81a:	4658      	mov	r0, fp
 802a81c:	f005 fa7a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    minValueText.setPosition(19, 41, 97, 29);
 802a820:	221d      	movs	r2, #29
 802a822:	9805      	ldr	r0, [sp, #20]
 802a824:	9200      	str	r2, [sp, #0]
 802a826:	2361      	movs	r3, #97	@ 0x61
 802a828:	2229      	movs	r2, #41	@ 0x29
 802a82a:	2113      	movs	r1, #19
 802a82c:	f7fe fb66 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a830:	f8d4 3344 	ldr.w	r3, [r4, #836]	@ 0x344
 802a834:	9905      	ldr	r1, [sp, #20]
 802a836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 802a83a:	f8a4 5378 	strh.w	r5, [r4, #888]	@ 0x378
        color = newColor;
 802a83e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802a842:	4630      	mov	r0, r6
        color = newColor;
 802a844:	f8c4 2374 	str.w	r2, [r4, #884]	@ 0x374
        boundingArea = calculateBoundingArea();
 802a848:	4798      	blx	r3
 802a84a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802a84e:	f504 7360 	add.w	r3, r4, #896	@ 0x380
 802a852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802a856:	f8d8 3000 	ldr.w	r3, [r8]
    Unicode::snprintf(minValueTextBuffer, MINVALUETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_CNYR).getText());
 802a85a:	f504 66a7 	add.w	r6, r4, #1336	@ 0x538
 802a85e:	2b00      	cmp	r3, #0
 802a860:	f43f af60 	beq.w	802a724 <_ZN18MenuLayer3ViewBaseC1Ev+0x34c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a864:	f8b9 3000 	ldrh.w	r3, [r9]
 802a868:	2b47      	cmp	r3, #71	@ 0x47
 802a86a:	f67f af77 	bls.w	802a75c <_ZN18MenuLayer3ViewBaseC1Ev+0x384>
        return texts->getText(typedTextId);
 802a86e:	4b82      	ldr	r3, [pc, #520]	@ (802aa78 <_ZN18MenuLayer3ViewBaseC1Ev+0x6a0>)
 802a870:	2147      	movs	r1, #71	@ 0x47
 802a872:	6818      	ldr	r0, [r3, #0]
 802a874:	f002 fb1e 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802a878:	4a80      	ldr	r2, [pc, #512]	@ (802aa7c <_ZN18MenuLayer3ViewBaseC1Ev+0x6a4>)
 802a87a:	4603      	mov	r3, r0
 802a87c:	210f      	movs	r1, #15
 802a87e:	4630      	mov	r0, r6
 802a880:	f00d faf6 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802a884:	234d      	movs	r3, #77	@ 0x4d
    minValueText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HJGX));
 802a886:	9805      	ldr	r0, [sp, #20]
 802a888:	f8c4 638c 	str.w	r6, [r4, #908]	@ 0x38c
 802a88c:	a918      	add	r1, sp, #96	@ 0x60
 802a88e:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802a892:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 802a896:	f007 f98f 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802a89a:	9905      	ldr	r1, [sp, #20]
 802a89c:	4658      	mov	r0, fp
 802a89e:	f005 fa39 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    maxValueText.setPosition(203, 41, 103, 29);
 802a8a2:	221d      	movs	r2, #29
 802a8a4:	9200      	str	r2, [sp, #0]
 802a8a6:	2367      	movs	r3, #103	@ 0x67
 802a8a8:	2229      	movs	r2, #41	@ 0x29
 802a8aa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802a8ac:	21cb      	movs	r1, #203	@ 0xcb
 802a8ae:	f7fe fb25 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802a8b2:	f8d8 3000 	ldr.w	r3, [r8]
        linespace = space;
 802a8b6:	f8a4 53c4 	strh.w	r5, [r4, #964]	@ 0x3c4
        color = newColor;
 802a8ba:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802a8be:	e9c4 57f3 	strd	r5, r7, [r4, #972]	@ 0x3cc
        color = newColor;
 802a8c2:	f8c4 23c0 	str.w	r2, [r4, #960]	@ 0x3c0
        boundingArea = calculateBoundingArea();
 802a8c6:	f8c4 53d4 	str.w	r5, [r4, #980]	@ 0x3d4
    Unicode::snprintf(maxValueTextBuffer, MAXVALUETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7YGH).getText());
 802a8ca:	f204 5656 	addw	r6, r4, #1366	@ 0x556
 802a8ce:	2b00      	cmp	r3, #0
 802a8d0:	f43f af28 	beq.w	802a724 <_ZN18MenuLayer3ViewBaseC1Ev+0x34c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a8d4:	f8b9 3000 	ldrh.w	r3, [r9]
 802a8d8:	2b46      	cmp	r3, #70	@ 0x46
 802a8da:	f67f af3f 	bls.w	802a75c <_ZN18MenuLayer3ViewBaseC1Ev+0x384>
        return texts->getText(typedTextId);
 802a8de:	4b66      	ldr	r3, [pc, #408]	@ (802aa78 <_ZN18MenuLayer3ViewBaseC1Ev+0x6a0>)
 802a8e0:	2146      	movs	r1, #70	@ 0x46
 802a8e2:	6818      	ldr	r0, [r3, #0]
 802a8e4:	f002 fae6 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802a8e8:	4a64      	ldr	r2, [pc, #400]	@ (802aa7c <_ZN18MenuLayer3ViewBaseC1Ev+0x6a4>)
 802a8ea:	4603      	mov	r3, r0
 802a8ec:	210f      	movs	r1, #15
 802a8ee:	4630      	mov	r0, r6
 802a8f0:	f00d fabe 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802a8f4:	234c      	movs	r3, #76	@ 0x4c
    maxValueText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3IVH));
 802a8f6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802a8f8:	f8c4 63d8 	str.w	r6, [r4, #984]	@ 0x3d8
 802a8fc:	a918      	add	r1, sp, #96	@ 0x60
 802a8fe:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802a902:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 802a906:	f007 f957 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802a90a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802a90c:	4658      	mov	r0, fp
 802a90e:	f005 fa01 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    itemNameText.setPosition(28, -1, 264, 23);
 802a912:	2317      	movs	r3, #23
 802a914:	9300      	str	r3, [sp, #0]
 802a916:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802a918:	f44f 7384 	mov.w	r3, #264	@ 0x108
 802a91c:	463a      	mov	r2, r7
 802a91e:	211c      	movs	r1, #28
 802a920:	f7fe faec 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802a924:	f8d8 3000 	ldr.w	r3, [r8]
        linespace = space;
 802a928:	f8a4 5410 	strh.w	r5, [r4, #1040]	@ 0x410
        boundingArea = calculateBoundingArea();
 802a92c:	f8c4 5418 	str.w	r5, [r4, #1048]	@ 0x418
 802a930:	f8c4 5420 	str.w	r5, [r4, #1056]	@ 0x420
        color = newColor;
 802a934:	f8c4 740c 	str.w	r7, [r4, #1036]	@ 0x40c
        boundingArea = calculateBoundingArea();
 802a938:	f8c4 741c 	str.w	r7, [r4, #1052]	@ 0x41c
    Unicode::snprintf(itemNameTextBuffer, ITEMNAMETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BMPI).getText());
 802a93c:	f204 5574 	addw	r5, r4, #1396	@ 0x574
 802a940:	2b00      	cmp	r3, #0
 802a942:	f43f aeef 	beq.w	802a724 <_ZN18MenuLayer3ViewBaseC1Ev+0x34c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a946:	f8b9 3000 	ldrh.w	r3, [r9]
 802a94a:	2b4a      	cmp	r3, #74	@ 0x4a
 802a94c:	f67f af06 	bls.w	802a75c <_ZN18MenuLayer3ViewBaseC1Ev+0x384>
        return texts->getText(typedTextId);
 802a950:	4f49      	ldr	r7, [pc, #292]	@ (802aa78 <_ZN18MenuLayer3ViewBaseC1Ev+0x6a0>)
 802a952:	214a      	movs	r1, #74	@ 0x4a
 802a954:	6838      	ldr	r0, [r7, #0]
 802a956:	f002 faad 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802a95a:	4a48      	ldr	r2, [pc, #288]	@ (802aa7c <_ZN18MenuLayer3ViewBaseC1Ev+0x6a4>)
 802a95c:	4603      	mov	r3, r0
 802a95e:	2132      	movs	r1, #50	@ 0x32
 802a960:	4628      	mov	r0, r5
 802a962:	f00d fa85 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    itemNameText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P2M3));
 802a966:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802a968:	f8c4 5424 	str.w	r5, [r4, #1060]	@ 0x424
 802a96c:	a918      	add	r1, sp, #96	@ 0x60
        : typedTextId(id)
 802a96e:	2550      	movs	r5, #80	@ 0x50
 802a970:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
 802a974:	f8ad 5064 	strh.w	r5, [sp, #100]	@ 0x64
 802a978:	f007 f91e 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802a97c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a97e:	4658      	mov	r0, fp
 802a980:	f005 f9c8 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    descText.setPosition(19, 80, 287, 113);
 802a984:	2371      	movs	r3, #113	@ 0x71
 802a986:	9300      	str	r3, [sp, #0]
 802a988:	462a      	mov	r2, r5
 802a98a:	f240 131f 	movw	r3, #287	@ 0x11f
 802a98e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a990:	2113      	movs	r1, #19
 802a992:	f7fe fab3 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802a996:	4656      	mov	r6, sl
        color = newColor;
 802a998:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802a99c:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 802aa88 <_ZN18MenuLayer3ViewBaseC1Ev+0x6b0>
 802a9a0:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    Unicode::snprintf(descTextBuffer, DESCTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WSQS).getText());
 802a9a4:	f504 63bb 	add.w	r3, r4, #1496	@ 0x5d8
 802a9a8:	9303      	str	r3, [sp, #12]
 802a9aa:	f8da 3000 	ldr.w	r3, [sl]
        linespace = space;
 802a9ae:	2500      	movs	r5, #0
        boundingArea = calculateBoundingArea();
 802a9b0:	f04f 38ff 	mov.w	r8, #4294967295
        linespace = space;
 802a9b4:	f8a4 545c 	strh.w	r5, [r4, #1116]	@ 0x45c
        boundingArea = calculateBoundingArea();
 802a9b8:	f8c4 5464 	str.w	r5, [r4, #1124]	@ 0x464
 802a9bc:	f8c4 8468 	str.w	r8, [r4, #1128]	@ 0x468
 802a9c0:	f8c4 546c 	str.w	r5, [r4, #1132]	@ 0x46c
 802a9c4:	2b00      	cmp	r3, #0
 802a9c6:	f43f aead 	beq.w	802a724 <_ZN18MenuLayer3ViewBaseC1Ev+0x34c>
        return typedTextId < numberOfTypedTexts;
 802a9ca:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 802aa80 <_ZN18MenuLayer3ViewBaseC1Ev+0x6a8>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802a9ce:	f8b9 3000 	ldrh.w	r3, [r9]
 802a9d2:	2b12      	cmp	r3, #18
 802a9d4:	f67f aec2 	bls.w	802a75c <_ZN18MenuLayer3ViewBaseC1Ev+0x384>
        return texts->getText(typedTextId);
 802a9d8:	2112      	movs	r1, #18
 802a9da:	6838      	ldr	r0, [r7, #0]
 802a9dc:	f002 fa6a 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802a9e0:	4a26      	ldr	r2, [pc, #152]	@ (802aa7c <_ZN18MenuLayer3ViewBaseC1Ev+0x6a4>)
 802a9e2:	4603      	mov	r3, r0
 802a9e4:	2196      	movs	r1, #150	@ 0x96
 802a9e6:	9803      	ldr	r0, [sp, #12]
 802a9e8:	f00d fa42 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802a9ec:	9b03      	ldr	r3, [sp, #12]
    descText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZZBX));
 802a9ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a9f0:	f8c4 3470 	str.w	r3, [r4, #1136]	@ 0x470
 802a9f4:	a918      	add	r1, sp, #96	@ 0x60
        : typedTextId(id)
 802a9f6:	2313      	movs	r3, #19
 802a9f8:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802a9fc:	9618      	str	r6, [sp, #96]	@ 0x60
 802a9fe:	f007 f8db 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802aa02:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802aa04:	4658      	mov	r0, fp
 802aa06:	f005 f985 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    unitsText.setPosition(171, 40, 78, 29);
 802aa0a:	231d      	movs	r3, #29
 802aa0c:	9300      	str	r3, [sp, #0]
 802aa0e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802aa10:	234e      	movs	r3, #78	@ 0x4e
 802aa12:	2228      	movs	r2, #40	@ 0x28
 802aa14:	21ab      	movs	r1, #171	@ 0xab
 802aa16:	f7fe fa71 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802aa1a:	f8da 3000 	ldr.w	r3, [sl]
        color = newColor;
 802aa1e:	f8c4 84a4 	str.w	r8, [r4, #1188]	@ 0x4a4
        linespace = space;
 802aa22:	f8a4 54a8 	strh.w	r5, [r4, #1192]	@ 0x4a8
        boundingArea = calculateBoundingArea();
 802aa26:	f8c4 54b0 	str.w	r5, [r4, #1200]	@ 0x4b0
 802aa2a:	f8c4 84b4 	str.w	r8, [r4, #1204]	@ 0x4b4
 802aa2e:	f8c4 54b8 	str.w	r5, [r4, #1208]	@ 0x4b8
 802aa32:	2b00      	cmp	r3, #0
 802aa34:	f43f ae76 	beq.w	802a724 <_ZN18MenuLayer3ViewBaseC1Ev+0x34c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802aa38:	f8b9 3000 	ldrh.w	r3, [r9]
 802aa3c:	2b14      	cmp	r3, #20
 802aa3e:	f67f ae8d 	bls.w	802a75c <_ZN18MenuLayer3ViewBaseC1Ev+0x384>
        return texts->getText(typedTextId);
 802aa42:	6838      	ldr	r0, [r7, #0]
 802aa44:	2114      	movs	r1, #20
 802aa46:	f002 fa35 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
        : typedTextId(id)
 802aa4a:	2315      	movs	r3, #21
 802aa4c:	f8c4 04bc 	str.w	r0, [r4, #1212]	@ 0x4bc
    unitsText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9M44));
 802aa50:	a918      	add	r1, sp, #96	@ 0x60
 802aa52:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802aa54:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802aa58:	9618      	str	r6, [sp, #96]	@ 0x60
 802aa5a:	f007 f8ad 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802aa5e:	4658      	mov	r0, fp
 802aa60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802aa62:	f005 f957 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 802aa66:	4620      	mov	r0, r4
 802aa68:	b01b      	add	sp, #108	@ 0x6c
 802aa6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aa6e:	bf00      	nop
 802aa70:	08040e5c 	.word	0x08040e5c
 802aa74:	08040e9a 	.word	0x08040e9a
 802aa78:	2000b93c 	.word	0x2000b93c
 802aa7c:	08040ee5 	.word	0x08040ee5
 802aa80:	2000b934 	.word	0x2000b934
 802aa84:	08042200 	.word	0x08042200
 802aa88:	2000b930 	.word	0x2000b930

0802aa8c <_ZN21PasswordEntryViewBase14handleUpButtonEv>:
     * Virtual Action Handlers
     */
    virtual void handleUpButton()
    {
        // Override and implement this function in PasswordEntry
    }
 802aa8c:	4770      	bx	lr

0802aa8e <_ZN21PasswordEntryViewBase16handleDownButtonEv>:
    virtual void handleDownButton()
    {
        // Override and implement this function in PasswordEntry
    }
 802aa8e:	4770      	bx	lr

0802aa90 <_ZN21PasswordEntryViewBase17handleEnterButtonEv>:
    virtual void handleEnterButton()
    {
        // Override and implement this function in PasswordEntry
    }
 802aa90:	4770      	bx	lr

0802aa92 <_ZN21PasswordEntryViewBaseD1Ev>:
}

PasswordEntryViewBase::~PasswordEntryViewBase()
{

}
 802aa92:	4770      	bx	lr

0802aa94 <_ZN21PasswordEntryViewBase11setupScreenEv>:

void PasswordEntryViewBase::setupScreen()
{

}
 802aa94:	4770      	bx	lr

0802aa96 <_ZN21PasswordEntryViewBaseD0Ev>:
PasswordEntryViewBase::~PasswordEntryViewBase()
 802aa96:	b510      	push	{r4, lr}
}
 802aa98:	f240 51c4 	movw	r1, #1476	@ 0x5c4
PasswordEntryViewBase::~PasswordEntryViewBase()
 802aa9c:	4604      	mov	r4, r0
}
 802aa9e:	f011 fd24 	bl	803c4ea <_ZdlPvj>
 802aaa2:	4620      	mov	r0, r4
 802aaa4:	bd10      	pop	{r4, pc}

0802aaa6 <_ZN21PasswordEntryViewBase14handleKeyEventEh>:

void PasswordEntryViewBase::handleKeyEvent(uint8_t key)
{
 802aaa6:	b510      	push	{r4, lr}
    if(0 == key)
 802aaa8:	b929      	cbnz	r1, 802aab6 <_ZN21PasswordEntryViewBase14handleKeyEventEh+0x10>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802aaaa:	f00a f92f 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        //When hardware button 3 clicked call virtual function
        //Call handleEnterButton
        handleEnterButton();
    
    }
}
 802aaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoScreenTestHomeScreenNoTransition();
 802aab2:	f7fd baef 	b.w	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
    if(1 == key)
 802aab6:	2901      	cmp	r1, #1
 802aab8:	d104      	bne.n	802aac4 <_ZN21PasswordEntryViewBase14handleKeyEventEh+0x1e>
        handleUpButton();
 802aaba:	6803      	ldr	r3, [r0, #0]
 802aabc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 802aabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        handleEnterButton();
 802aac2:	4718      	bx	r3
    if(2 == key)
 802aac4:	2902      	cmp	r1, #2
 802aac6:	d102      	bne.n	802aace <_ZN21PasswordEntryViewBase14handleKeyEventEh+0x28>
        handleDownButton();
 802aac8:	6803      	ldr	r3, [r0, #0]
 802aaca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802aacc:	e7f7      	b.n	802aabe <_ZN21PasswordEntryViewBase14handleKeyEventEh+0x18>
    if(3 == key)
 802aace:	2903      	cmp	r1, #3
 802aad0:	d102      	bne.n	802aad8 <_ZN21PasswordEntryViewBase14handleKeyEventEh+0x32>
        handleEnterButton();
 802aad2:	6803      	ldr	r3, [r0, #0]
 802aad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802aad6:	e7f2      	b.n	802aabe <_ZN21PasswordEntryViewBase14handleKeyEventEh+0x18>
}
 802aad8:	bd10      	pop	{r4, pc}
	...

0802aadc <_ZN8touchgfx13BoxWithBorderC1Ev>:
    BoxWithBorder()
 802aadc:	b510      	push	{r4, lr}
 802aade:	4604      	mov	r4, r0
        : Box(), borderColor(0), borderSize(0)
 802aae0:	f7fe fa28 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802aae4:	4b03      	ldr	r3, [pc, #12]	@ (802aaf4 <_ZN8touchgfx13BoxWithBorderC1Ev+0x18>)
 802aae6:	6023      	str	r3, [r4, #0]
 802aae8:	2300      	movs	r3, #0
 802aaea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802aaec:	8623      	strh	r3, [r4, #48]	@ 0x30
    }
 802aaee:	4620      	mov	r0, r4
 802aaf0:	bd10      	pop	{r4, pc}
 802aaf2:	bf00      	nop
 802aaf4:	08043580 	.word	0x08043580

0802aaf8 <_ZN21PasswordEntryViewBaseC1Ev>:
PasswordEntryViewBase::PasswordEntryViewBase()
 802aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aafc:	4604      	mov	r4, r0
 802aafe:	b09b      	sub	sp, #108	@ 0x6c
 802ab00:	4627      	mov	r7, r4
 802ab02:	2600      	movs	r6, #0
 802ab04:	f00b fd04 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 802ab08:	4bbb      	ldr	r3, [pc, #748]	@ (802adf8 <_ZN21PasswordEntryViewBaseC1Ev+0x300>)
 802ab0a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 802ab0c:	f847 3b40 	str.w	r3, [r7], #64
 802ab10:	f104 0a6c 	add.w	sl, r4, #108	@ 0x6c
 802ab14:	4638      	mov	r0, r7
 802ab16:	f7fe fa0d 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802ab1a:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 802ab1e:	a918      	add	r1, sp, #96	@ 0x60
 802ab20:	4650      	mov	r0, sl
 802ab22:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 802ab26:	f7fe fb2b 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802ab2a:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 802ab2e:	f104 08cc 	add.w	r8, r4, #204	@ 0xcc
 802ab32:	4618      	mov	r0, r3
 802ab34:	9303      	str	r3, [sp, #12]
 802ab36:	f7fe fb3d 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802ab3a:	4640      	mov	r0, r8
 802ab3c:	f7fe fb3a 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802ab40:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 802ab44:	4618      	mov	r0, r3
 802ab46:	9304      	str	r3, [sp, #16]
 802ab48:	f7fe fb34 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802ab4c:	f504 739a 	add.w	r3, r4, #308	@ 0x134
 802ab50:	4618      	mov	r0, r3
 802ab52:	9305      	str	r3, [sp, #20]
 802ab54:	f7fe fb2e 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802ab58:	f504 73b4 	add.w	r3, r4, #360	@ 0x168
 802ab5c:	4618      	mov	r0, r3
 802ab5e:	930d      	str	r3, [sp, #52]	@ 0x34
 802ab60:	f7fe f9e8 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802ab64:	f504 73ca 	add.w	r3, r4, #404	@ 0x194
 802ab68:	a918      	add	r1, sp, #96	@ 0x60
 802ab6a:	4618      	mov	r0, r3
 802ab6c:	9306      	str	r3, [sp, #24]
 802ab6e:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 802ab72:	f7fe fb05 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802ab76:	f504 73e0 	add.w	r3, r4, #448	@ 0x1c0
 802ab7a:	a918      	add	r1, sp, #96	@ 0x60
 802ab7c:	4618      	mov	r0, r3
 802ab7e:	9307      	str	r3, [sp, #28]
 802ab80:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 802ab84:	f7fe fafc 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802ab88:	f504 73f6 	add.w	r3, r4, #492	@ 0x1ec
 802ab8c:	f504 7b06 	add.w	fp, r4, #536	@ 0x218
 802ab90:	4618      	mov	r0, r3
 802ab92:	a918      	add	r1, sp, #96	@ 0x60
 802ab94:	9308      	str	r3, [sp, #32]
 802ab96:	f504 7911 	add.w	r9, r4, #580	@ 0x244
 802ab9a:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 802ab9e:	f7fe faef 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802aba2:	a918      	add	r1, sp, #96	@ 0x60
 802aba4:	4658      	mov	r0, fp
 802aba6:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
 802abaa:	f7fe fae9 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802abae:	4648      	mov	r0, r9
 802abb0:	f7fe fb44 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802abb4:	f504 7324 	add.w	r3, r4, #656	@ 0x290
 802abb8:	4618      	mov	r0, r3
 802abba:	930e      	str	r3, [sp, #56]	@ 0x38
 802abbc:	f7ff ff8e 	bl	802aadc <_ZN8touchgfx13BoxWithBorderC1Ev>
 802abc0:	f504 7331 	add.w	r3, r4, #708	@ 0x2c4
 802abc4:	4618      	mov	r0, r3
 802abc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 802abc8:	f7ff ff88 	bl	802aadc <_ZN8touchgfx13BoxWithBorderC1Ev>
 802abcc:	f504 733e 	add.w	r3, r4, #760	@ 0x2f8
 802abd0:	4618      	mov	r0, r3
 802abd2:	9310      	str	r3, [sp, #64]	@ 0x40
 802abd4:	f7ff ff82 	bl	802aadc <_ZN8touchgfx13BoxWithBorderC1Ev>
 802abd8:	f504 734b 	add.w	r3, r4, #812	@ 0x32c
 802abdc:	4618      	mov	r0, r3
 802abde:	9311      	str	r3, [sp, #68]	@ 0x44
 802abe0:	f7ff ff7c 	bl	802aadc <_ZN8touchgfx13BoxWithBorderC1Ev>
 802abe4:	f504 7358 	add.w	r3, r4, #864	@ 0x360
 802abe8:	4618      	mov	r0, r3
 802abea:	9302      	str	r3, [sp, #8]
 802abec:	f7fe fb26 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802abf0:	f504 736b 	add.w	r3, r4, #940	@ 0x3ac
 802abf4:	4618      	mov	r0, r3
 802abf6:	9309      	str	r3, [sp, #36]	@ 0x24
 802abf8:	f7fe fb20 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802abfc:	f504 737e 	add.w	r3, r4, #1016	@ 0x3f8
 802ac00:	4618      	mov	r0, r3
 802ac02:	930a      	str	r3, [sp, #40]	@ 0x28
 802ac04:	f7fe fb1a 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802ac08:	f204 4344 	addw	r3, r4, #1092	@ 0x444
 802ac0c:	4618      	mov	r0, r3
 802ac0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ac10:	f7fe fb14 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802ac14:	f504 6392 	add.w	r3, r4, #1168	@ 0x490
 802ac18:	4618      	mov	r0, r3
 802ac1a:	930c      	str	r3, [sp, #48]	@ 0x30
 802ac1c:	f7fe fb0e 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
    __background.setPosition(0, 0, 320, 240);
 802ac20:	23f0      	movs	r3, #240	@ 0xf0
 802ac22:	4632      	mov	r2, r6
 802ac24:	4638      	mov	r0, r7
 802ac26:	9300      	str	r3, [sp, #0]
 802ac28:	4631      	mov	r1, r6
 802ac2a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802ac2e:	1d25      	adds	r5, r4, #4
 802ac30:	f7fe f964 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802ac34:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802ac38:	66a3      	str	r3, [r4, #104]	@ 0x68
 802ac3a:	4639      	mov	r1, r7
 802ac3c:	4628      	mov	r0, r5
 802ac3e:	f005 f869 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image2.setXY(0, 0);
 802ac42:	4632      	mov	r2, r6
 802ac44:	4631      	mov	r1, r6
 802ac46:	4650      	mov	r0, sl
 802ac48:	f7fe fa5a 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 802ac4c:	a918      	add	r1, sp, #96	@ 0x60
 802ac4e:	4650      	mov	r0, sl
 802ac50:	f8ad 6060 	strh.w	r6, [sp, #96]	@ 0x60
 802ac54:	f006 f8cd 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802ac58:	4651      	mov	r1, sl
 802ac5a:	4628      	mov	r0, r5
 802ac5c:	f005 f85a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 802ac60:	9803      	ldr	r0, [sp, #12]
 802ac62:	22d8      	movs	r2, #216	@ 0xd8
 802ac64:	21a0      	movs	r1, #160	@ 0xa0
 802ac66:	2703      	movs	r7, #3
 802ac68:	f7fe fa4a 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802ac6c:	aa18      	add	r2, sp, #96	@ 0x60
 802ac6e:	9803      	ldr	r0, [sp, #12]
 802ac70:	f8ad 705c 	strh.w	r7, [sp, #92]	@ 0x5c
 802ac74:	a917      	add	r1, sp, #92	@ 0x5c
 802ac76:	f8ad 7060 	strh.w	r7, [sp, #96]	@ 0x60
 802ac7a:	f005 ffec 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802ac7e:	9903      	ldr	r1, [sp, #12]
 802ac80:	4628      	mov	r0, r5
 802ac82:	f005 f847 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 802ac86:	4640      	mov	r0, r8
 802ac88:	22d8      	movs	r2, #216	@ 0xd8
 802ac8a:	21f0      	movs	r1, #240	@ 0xf0
 802ac8c:	f7fe fa38 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802ac90:	aa18      	add	r2, sp, #96	@ 0x60
 802ac92:	4640      	mov	r0, r8
 802ac94:	a917      	add	r1, sp, #92	@ 0x5c
 802ac96:	f8ad 705c 	strh.w	r7, [sp, #92]	@ 0x5c
 802ac9a:	f8ad 7060 	strh.w	r7, [sp, #96]	@ 0x60
 802ac9e:	f005 ffda 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802aca2:	4641      	mov	r1, r8
 802aca4:	4628      	mov	r0, r5
 802aca6:	f005 f835 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 802acaa:	9804      	ldr	r0, [sp, #16]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802acac:	f8df 8160 	ldr.w	r8, [pc, #352]	@ 802ae10 <_ZN21PasswordEntryViewBaseC1Ev+0x318>
 802acb0:	22d8      	movs	r2, #216	@ 0xd8
 802acb2:	4631      	mov	r1, r6
 802acb4:	f7fe fa24 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802acb8:	aa18      	add	r2, sp, #96	@ 0x60
 802acba:	9804      	ldr	r0, [sp, #16]
 802acbc:	f8ad 705c 	strh.w	r7, [sp, #92]	@ 0x5c
 802acc0:	a917      	add	r1, sp, #92	@ 0x5c
 802acc2:	f8ad 7060 	strh.w	r7, [sp, #96]	@ 0x60
 802acc6:	f005 ffc6 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802acca:	9904      	ldr	r1, [sp, #16]
 802accc:	4628      	mov	r0, r5
 802acce:	f005 f821 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 802acd2:	9805      	ldr	r0, [sp, #20]
 802acd4:	22d8      	movs	r2, #216	@ 0xd8
 802acd6:	2150      	movs	r1, #80	@ 0x50
 802acd8:	f7fe fa12 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802acdc:	aa18      	add	r2, sp, #96	@ 0x60
 802acde:	9805      	ldr	r0, [sp, #20]
 802ace0:	f8ad 705c 	strh.w	r7, [sp, #92]	@ 0x5c
 802ace4:	a917      	add	r1, sp, #92	@ 0x5c
 802ace6:	f8ad 7060 	strh.w	r7, [sp, #96]	@ 0x60
 802acea:	f005 ffb4 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Ribbon.setPosition(0, 1, 320, 23);
 802acee:	2717      	movs	r7, #23
 802acf0:	9905      	ldr	r1, [sp, #20]
 802acf2:	4628      	mov	r0, r5
 802acf4:	f005 f80e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802acf8:	2201      	movs	r2, #1
 802acfa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802acfc:	9700      	str	r7, [sp, #0]
 802acfe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802ad02:	4631      	mov	r1, r6
 802ad04:	f7fe f8fa 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802ad08:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802ad0c:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
 802ad10:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802ad12:	4628      	mov	r0, r5
 802ad14:	f004 fffe 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Down.setXY(185, 213);
 802ad18:	22d5      	movs	r2, #213	@ 0xd5
 802ad1a:	9806      	ldr	r0, [sp, #24]
 802ad1c:	21b9      	movs	r1, #185	@ 0xb9
 802ad1e:	f7fe f9ef 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802ad22:	f04f 030a 	mov.w	r3, #10
    Down.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_DOWNWARD_30_30_000000_SVG_ID));
 802ad26:	9806      	ldr	r0, [sp, #24]
 802ad28:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 802ad2c:	a918      	add	r1, sp, #96	@ 0x60
 802ad2e:	f006 f860 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802ad32:	9906      	ldr	r1, [sp, #24]
 802ad34:	4628      	mov	r0, r5
 802ad36:	f004 ffed 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Up.setXY(105, 213);
 802ad3a:	22d5      	movs	r2, #213	@ 0xd5
 802ad3c:	9807      	ldr	r0, [sp, #28]
 802ad3e:	2169      	movs	r1, #105	@ 0x69
 802ad40:	f7fe f9de 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802ad44:	230b      	movs	r3, #11
    Up.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_ARROW_UPWARD_30_30_000000_SVG_ID));
 802ad46:	9807      	ldr	r0, [sp, #28]
 802ad48:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 802ad4c:	a918      	add	r1, sp, #96	@ 0x60
 802ad4e:	f006 f850 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802ad52:	9907      	ldr	r1, [sp, #28]
 802ad54:	4628      	mov	r0, r5
 802ad56:	f004 ffdd 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Menu.setXY(25, 213);
 802ad5a:	22d5      	movs	r2, #213	@ 0xd5
 802ad5c:	9808      	ldr	r0, [sp, #32]
 802ad5e:	2119      	movs	r1, #25
 802ad60:	f7fe f9ce 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802ad64:	230d      	movs	r3, #13
    Menu.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_MENU_30_30_000000_SVG_ID));
 802ad66:	9808      	ldr	r0, [sp, #32]
 802ad68:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 802ad6c:	a918      	add	r1, sp, #96	@ 0x60
 802ad6e:	f006 f840 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802ad72:	9908      	ldr	r1, [sp, #32]
 802ad74:	4628      	mov	r0, r5
 802ad76:	f004 ffcd 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Enter.setXY(265, 213);
 802ad7a:	22d5      	movs	r2, #213	@ 0xd5
 802ad7c:	4658      	mov	r0, fp
 802ad7e:	f240 1109 	movw	r1, #265	@ 0x109
 802ad82:	f7fe f9bd 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802ad86:	230e      	movs	r3, #14
    Enter.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_SUBDIRECTORY_ARROW_RIGHT_30_30_000000_SVG_ID));
 802ad88:	4658      	mov	r0, fp
 802ad8a:	a918      	add	r1, sp, #96	@ 0x60
 802ad8c:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
 802ad90:	f006 f82f 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802ad94:	4659      	mov	r1, fp
 802ad96:	4628      	mov	r0, r5
 802ad98:	f004 ffbc 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Header.setPosition(28, 0, 264, 23);
 802ad9c:	4632      	mov	r2, r6
 802ad9e:	9700      	str	r7, [sp, #0]
 802ada0:	f44f 7384 	mov.w	r3, #264	@ 0x108
 802ada4:	211c      	movs	r1, #28
 802ada6:	4648      	mov	r0, r9
 802ada8:	f7fe f8a8 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802adac:	f8d4 3244 	ldr.w	r3, [r4, #580]	@ 0x244
        linespace = space;
 802adb0:	f8a4 6278 	strh.w	r6, [r4, #632]	@ 0x278
        boundingArea = calculateBoundingArea();
 802adb4:	af12      	add	r7, sp, #72	@ 0x48
        color = newColor;
 802adb6:	f04f 3bff 	mov.w	fp, #4294967295
        boundingArea = calculateBoundingArea();
 802adba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 802adbe:	f8c4 b274 	str.w	fp, [r4, #628]	@ 0x274
        boundingArea = calculateBoundingArea();
 802adc2:	4649      	mov	r1, r9
 802adc4:	4638      	mov	r0, r7
 802adc6:	4798      	blx	r3
 802adc8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 802adcc:	f504 7320 	add.w	r3, r4, #640	@ 0x280
 802add0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802add4:	f8d8 3000 	ldr.w	r3, [r8]
 802add8:	b92b      	cbnz	r3, 802ade6 <_ZN21PasswordEntryViewBaseC1Ev+0x2ee>
 802adda:	4b08      	ldr	r3, [pc, #32]	@ (802adfc <_ZN21PasswordEntryViewBaseC1Ev+0x304>)
 802addc:	4a08      	ldr	r2, [pc, #32]	@ (802ae00 <_ZN21PasswordEntryViewBaseC1Ev+0x308>)
 802adde:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802ade0:	4808      	ldr	r0, [pc, #32]	@ (802ae04 <_ZN21PasswordEntryViewBaseC1Ev+0x30c>)
 802ade2:	f011 fba1 	bl	803c528 <__assert_func>
 802ade6:	4b08      	ldr	r3, [pc, #32]	@ (802ae08 <_ZN21PasswordEntryViewBaseC1Ev+0x310>)
 802ade8:	881b      	ldrh	r3, [r3, #0]
 802adea:	2b16      	cmp	r3, #22
 802adec:	d812      	bhi.n	802ae14 <_ZN21PasswordEntryViewBaseC1Ev+0x31c>
 802adee:	4b07      	ldr	r3, [pc, #28]	@ (802ae0c <_ZN21PasswordEntryViewBaseC1Ev+0x314>)
 802adf0:	4a03      	ldr	r2, [pc, #12]	@ (802ae00 <_ZN21PasswordEntryViewBaseC1Ev+0x308>)
 802adf2:	2161      	movs	r1, #97	@ 0x61
 802adf4:	e7f4      	b.n	802ade0 <_ZN21PasswordEntryViewBaseC1Ev+0x2e8>
 802adf6:	bf00      	nop
 802adf8:	080429d8 	.word	0x080429d8
 802adfc:	08040d9d 	.word	0x08040d9d
 802ae00:	08040e9a 	.word	0x08040e9a
 802ae04:	08040e1a 	.word	0x08040e1a
 802ae08:	2000b934 	.word	0x2000b934
 802ae0c:	08040e5c 	.word	0x08040e5c
 802ae10:	2000b930 	.word	0x2000b930
        return texts->getText(typedTextId);
 802ae14:	4bcd      	ldr	r3, [pc, #820]	@ (802b14c <_ZN21PasswordEntryViewBaseC1Ev+0x654>)
 802ae16:	2116      	movs	r1, #22
 802ae18:	6818      	ldr	r0, [r3, #0]
 802ae1a:	f002 f84b 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
        : typedTextId(id)
 802ae1e:	f04f 0121 	mov.w	r1, #33	@ 0x21
 802ae22:	4acb      	ldr	r2, [pc, #812]	@ (802b150 <_ZN21PasswordEntryViewBaseC1Ev+0x658>)
 802ae24:	f8c4 028c 	str.w	r0, [r4, #652]	@ 0x28c
 802ae28:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
    Header.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X5EC));
 802ae2c:	4648      	mov	r0, r9
 802ae2e:	a918      	add	r1, sp, #96	@ 0x60
    boxWithBorder1.setPosition(67, 70, 37, 66);
 802ae30:	f04f 0a42 	mov.w	sl, #66	@ 0x42
 802ae34:	9218      	str	r2, [sp, #96]	@ 0x60
    Header.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X5EC));
 802ae36:	f006 febf 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802ae3a:	4649      	mov	r1, r9
 802ae3c:	4628      	mov	r0, r5
 802ae3e:	f004 ff69 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(67, 70, 37, 66);
 802ae42:	2325      	movs	r3, #37	@ 0x25
 802ae44:	2246      	movs	r2, #70	@ 0x46
 802ae46:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802ae48:	f8cd a000 	str.w	sl, [sp]
 802ae4c:	2143      	movs	r1, #67	@ 0x43
 802ae4e:	f7fe f855 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        borderSize = size;
 802ae52:	f04f 0902 	mov.w	r9, #2
        borderColor = colorBorder;
 802ae56:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802ae5a:	f8c4 12bc 	str.w	r1, [r4, #700]	@ 0x2bc
 802ae5e:	4628      	mov	r0, r5
 802ae60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802ae62:	f8c4 b2b8 	str.w	fp, [r4, #696]	@ 0x2b8
        borderSize = size;
 802ae66:	f8a4 92c0 	strh.w	r9, [r4, #704]	@ 0x2c0
 802ae6a:	f004 ff53 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder4.setPosition(217, 71, 37, 66);
 802ae6e:	2325      	movs	r3, #37	@ 0x25
 802ae70:	2247      	movs	r2, #71	@ 0x47
 802ae72:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802ae74:	f8cd a000 	str.w	sl, [sp]
 802ae78:	21d9      	movs	r1, #217	@ 0xd9
 802ae7a:	f7fe f83f 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        borderColor = colorBorder;
 802ae7e:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802ae82:	f8c4 12f0 	str.w	r1, [r4, #752]	@ 0x2f0
 802ae86:	4628      	mov	r0, r5
 802ae88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802ae8a:	f8c4 b2ec 	str.w	fp, [r4, #748]	@ 0x2ec
        borderSize = size;
 802ae8e:	f8a4 92f4 	strh.w	r9, [r4, #756]	@ 0x2f4
 802ae92:	f004 ff3f 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder3.setPosition(167, 70, 37, 66);
 802ae96:	2325      	movs	r3, #37	@ 0x25
 802ae98:	2246      	movs	r2, #70	@ 0x46
 802ae9a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802ae9c:	f8cd a000 	str.w	sl, [sp]
 802aea0:	21a7      	movs	r1, #167	@ 0xa7
 802aea2:	f7fe f82b 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        borderColor = colorBorder;
 802aea6:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802aeaa:	f8c4 1324 	str.w	r1, [r4, #804]	@ 0x324
 802aeae:	4628      	mov	r0, r5
 802aeb0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802aeb2:	f8c4 b320 	str.w	fp, [r4, #800]	@ 0x320
        borderSize = size;
 802aeb6:	f8a4 9328 	strh.w	r9, [r4, #808]	@ 0x328
 802aeba:	f004 ff2b 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder2.setPosition(117, 70, 37, 66);
 802aebe:	2325      	movs	r3, #37	@ 0x25
 802aec0:	2246      	movs	r2, #70	@ 0x46
 802aec2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802aec4:	f8cd a000 	str.w	sl, [sp]
 802aec8:	2175      	movs	r1, #117	@ 0x75
 802aeca:	f7fe f817 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        borderColor = colorBorder;
 802aece:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802aed2:	f8c4 1358 	str.w	r1, [r4, #856]	@ 0x358
 802aed6:	4628      	mov	r0, r5
 802aed8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802aeda:	f8c4 b354 	str.w	fp, [r4, #852]	@ 0x354
        borderSize = size;
 802aede:	f8a4 935c 	strh.w	r9, [r4, #860]	@ 0x35c
    prompt.setPosition(25, 33, 272, 27);
 802aee2:	f04f 0a1b 	mov.w	sl, #27
 802aee6:	f004 ff15 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802aeea:	2221      	movs	r2, #33	@ 0x21
 802aeec:	9802      	ldr	r0, [sp, #8]
 802aeee:	f8cd a000 	str.w	sl, [sp]
 802aef2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 802aef6:	2119      	movs	r1, #25
 802aef8:	f7fe f800 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802aefc:	f8d4 3360 	ldr.w	r3, [r4, #864]	@ 0x360
        linespace = space;
 802af00:	f8a4 6394 	strh.w	r6, [r4, #916]	@ 0x394
        color = newColor;
 802af04:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802af08:	4638      	mov	r0, r7
 802af0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 802af0e:	f8c4 1390 	str.w	r1, [r4, #912]	@ 0x390
        boundingArea = calculateBoundingArea();
 802af12:	9902      	ldr	r1, [sp, #8]
 802af14:	4798      	blx	r3
 802af16:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 802af1a:	f504 7367 	add.w	r3, r4, #924	@ 0x39c
 802af1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802af22:	f8d8 3000 	ldr.w	r3, [r8]
    Unicode::snprintf(promptBuffer, PROMPT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_1QIZ).getText());
 802af26:	f204 47dc 	addw	r7, r4, #1244	@ 0x4dc
 802af2a:	2b00      	cmp	r3, #0
 802af2c:	f43f af55 	beq.w	802adda <_ZN21PasswordEntryViewBaseC1Ev+0x2e2>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802af30:	4988      	ldr	r1, [pc, #544]	@ (802b154 <_ZN21PasswordEntryViewBaseC1Ev+0x65c>)
 802af32:	880b      	ldrh	r3, [r1, #0]
 802af34:	2b1f      	cmp	r3, #31
 802af36:	f67f af5a 	bls.w	802adee <_ZN21PasswordEntryViewBaseC1Ev+0x2f6>
        return texts->getText(typedTextId);
 802af3a:	4b84      	ldr	r3, [pc, #528]	@ (802b14c <_ZN21PasswordEntryViewBaseC1Ev+0x654>)
 802af3c:	211f      	movs	r1, #31
 802af3e:	6818      	ldr	r0, [r3, #0]
 802af40:	f001 ffb8 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802af44:	4a84      	ldr	r2, [pc, #528]	@ (802b158 <_ZN21PasswordEntryViewBaseC1Ev+0x660>)
 802af46:	4603      	mov	r3, r0
 802af48:	2123      	movs	r1, #35	@ 0x23
 802af4a:	4638      	mov	r0, r7
 802af4c:	f00c ff90 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    prompt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UZ7M));
 802af50:	a818      	add	r0, sp, #96	@ 0x60
        : typedTextId(id)
 802af52:	4a7f      	ldr	r2, [pc, #508]	@ (802b150 <_ZN21PasswordEntryViewBaseC1Ev+0x658>)
 802af54:	f8c4 73a8 	str.w	r7, [r4, #936]	@ 0x3a8
 802af58:	2320      	movs	r3, #32
 802af5a:	4601      	mov	r1, r0
 802af5c:	9802      	ldr	r0, [sp, #8]
 802af5e:	9218      	str	r2, [sp, #96]	@ 0x60
 802af60:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
    digit1.setPosition(81, 91, 10, 24);
 802af64:	2718      	movs	r7, #24
    prompt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UZ7M));
 802af66:	f006 fe27 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802af6a:	9902      	ldr	r1, [sp, #8]
 802af6c:	4628      	mov	r0, r5
 802af6e:	f004 fed1 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    digit1.setPosition(81, 91, 10, 24);
 802af72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802af74:	9700      	str	r7, [sp, #0]
 802af76:	230a      	movs	r3, #10
 802af78:	225b      	movs	r2, #91	@ 0x5b
 802af7a:	2151      	movs	r1, #81	@ 0x51
 802af7c:	f7fd ffbe 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802af80:	f8d8 3000 	ldr.w	r3, [r8]
        linespace = space;
 802af84:	f8a4 63e0 	strh.w	r6, [r4, #992]	@ 0x3e0
        color = newColor;
 802af88:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802af8c:	e9c4 6bfa 	strd	r6, fp, [r4, #1000]	@ 0x3e8
        color = newColor;
 802af90:	f8c4 03dc 	str.w	r0, [r4, #988]	@ 0x3dc
        boundingArea = calculateBoundingArea();
 802af94:	f8c4 63f0 	str.w	r6, [r4, #1008]	@ 0x3f0
    Unicode::snprintf(digit1Buffer, DIGIT1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IO0T).getText());
 802af98:	f204 5922 	addw	r9, r4, #1314	@ 0x522
 802af9c:	2b00      	cmp	r3, #0
 802af9e:	f43f af1c 	beq.w	802adda <_ZN21PasswordEntryViewBaseC1Ev+0x2e2>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802afa2:	496c      	ldr	r1, [pc, #432]	@ (802b154 <_ZN21PasswordEntryViewBaseC1Ev+0x65c>)
 802afa4:	880b      	ldrh	r3, [r1, #0]
 802afa6:	2b1d      	cmp	r3, #29
 802afa8:	f67f af21 	bls.w	802adee <_ZN21PasswordEntryViewBaseC1Ev+0x2f6>
        return texts->getText(typedTextId);
 802afac:	4b67      	ldr	r3, [pc, #412]	@ (802b14c <_ZN21PasswordEntryViewBaseC1Ev+0x654>)
 802afae:	211d      	movs	r1, #29
 802afb0:	6818      	ldr	r0, [r3, #0]
 802afb2:	f001 ff7f 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802afb6:	4a68      	ldr	r2, [pc, #416]	@ (802b158 <_ZN21PasswordEntryViewBaseC1Ev+0x660>)
 802afb8:	4603      	mov	r3, r0
 802afba:	2114      	movs	r1, #20
 802afbc:	4648      	mov	r0, r9
 802afbe:	f00c ff57 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    digit1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MJGL));
 802afc2:	a818      	add	r0, sp, #96	@ 0x60
        : typedTextId(id)
 802afc4:	4a62      	ldr	r2, [pc, #392]	@ (802b150 <_ZN21PasswordEntryViewBaseC1Ev+0x658>)
 802afc6:	f8c4 93f4 	str.w	r9, [r4, #1012]	@ 0x3f4
 802afca:	231e      	movs	r3, #30
 802afcc:	4601      	mov	r1, r0
 802afce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802afd0:	9218      	str	r2, [sp, #96]	@ 0x60
 802afd2:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802afd6:	f006 fdef 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802afda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802afdc:	4628      	mov	r0, r5
 802afde:	f004 fe99 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    digit2.setPosition(131, 91, 10, 24);
 802afe2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802afe4:	9700      	str	r7, [sp, #0]
 802afe6:	230a      	movs	r3, #10
 802afe8:	225b      	movs	r2, #91	@ 0x5b
 802afea:	2183      	movs	r1, #131	@ 0x83
 802afec:	f7fd ff86 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802aff0:	f8d8 3000 	ldr.w	r3, [r8]
        linespace = space;
 802aff4:	f8a4 642c 	strh.w	r6, [r4, #1068]	@ 0x42c
        color = newColor;
 802aff8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 802affc:	f8c4 0428 	str.w	r0, [r4, #1064]	@ 0x428
        boundingArea = calculateBoundingArea();
 802b000:	f8c4 6434 	str.w	r6, [r4, #1076]	@ 0x434
 802b004:	f8c4 b438 	str.w	fp, [r4, #1080]	@ 0x438
 802b008:	f8c4 643c 	str.w	r6, [r4, #1084]	@ 0x43c
    Unicode::snprintf(digit2Buffer, DIGIT2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_0379).getText());
 802b00c:	f204 594a 	addw	r9, r4, #1354	@ 0x54a
 802b010:	2b00      	cmp	r3, #0
 802b012:	f43f aee2 	beq.w	802adda <_ZN21PasswordEntryViewBaseC1Ev+0x2e2>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b016:	494f      	ldr	r1, [pc, #316]	@ (802b154 <_ZN21PasswordEntryViewBaseC1Ev+0x65c>)
 802b018:	880b      	ldrh	r3, [r1, #0]
 802b01a:	4553      	cmp	r3, sl
 802b01c:	f67f aee7 	bls.w	802adee <_ZN21PasswordEntryViewBaseC1Ev+0x2f6>
        return texts->getText(typedTextId);
 802b020:	4b4a      	ldr	r3, [pc, #296]	@ (802b14c <_ZN21PasswordEntryViewBaseC1Ev+0x654>)
 802b022:	4651      	mov	r1, sl
 802b024:	6818      	ldr	r0, [r3, #0]
 802b026:	f001 ff45 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802b02a:	4a4b      	ldr	r2, [pc, #300]	@ (802b158 <_ZN21PasswordEntryViewBaseC1Ev+0x660>)
 802b02c:	4603      	mov	r3, r0
 802b02e:	2114      	movs	r1, #20
 802b030:	4648      	mov	r0, r9
 802b032:	f00c ff1d 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802b036:	231c      	movs	r3, #28
 802b038:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
    digit2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LT6U));
 802b03c:	ab18      	add	r3, sp, #96	@ 0x60
 802b03e:	4a44      	ldr	r2, [pc, #272]	@ (802b150 <_ZN21PasswordEntryViewBaseC1Ev+0x658>)
 802b040:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802b042:	f8c4 9440 	str.w	r9, [r4, #1088]	@ 0x440
 802b046:	4619      	mov	r1, r3
 802b048:	9218      	str	r2, [sp, #96]	@ 0x60
 802b04a:	f006 fdb5 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b04e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802b050:	4628      	mov	r0, r5
 802b052:	f004 fe5f 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    digit3.setPosition(181, 91, 10, 24);
 802b056:	230a      	movs	r3, #10
 802b058:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802b05a:	9700      	str	r7, [sp, #0]
 802b05c:	225b      	movs	r2, #91	@ 0x5b
 802b05e:	21b5      	movs	r1, #181	@ 0xb5
 802b060:	f7fd ff4c 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802b064:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802b068:	f8c4 3474 	str.w	r3, [r4, #1140]	@ 0x474
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802b06c:	f8d8 3000 	ldr.w	r3, [r8]
        linespace = space;
 802b070:	f8a4 6478 	strh.w	r6, [r4, #1144]	@ 0x478
        boundingArea = calculateBoundingArea();
 802b074:	f8c4 6480 	str.w	r6, [r4, #1152]	@ 0x480
 802b078:	f8c4 6488 	str.w	r6, [r4, #1160]	@ 0x488
 802b07c:	f8c4 b484 	str.w	fp, [r4, #1156]	@ 0x484
    Unicode::snprintf(digit3Buffer, DIGIT3_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_HXM8).getText());
 802b080:	f204 5672 	addw	r6, r4, #1394	@ 0x572
 802b084:	2b00      	cmp	r3, #0
 802b086:	f43f aea8 	beq.w	802adda <_ZN21PasswordEntryViewBaseC1Ev+0x2e2>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b08a:	4932      	ldr	r1, [pc, #200]	@ (802b154 <_ZN21PasswordEntryViewBaseC1Ev+0x65c>)
 802b08c:	880b      	ldrh	r3, [r1, #0]
 802b08e:	2b19      	cmp	r3, #25
 802b090:	f67f aead 	bls.w	802adee <_ZN21PasswordEntryViewBaseC1Ev+0x2f6>
        return texts->getText(typedTextId);
 802b094:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 802b14c <_ZN21PasswordEntryViewBaseC1Ev+0x654>
        : typedTextId(id)
 802b098:	4f2d      	ldr	r7, [pc, #180]	@ (802b150 <_ZN21PasswordEntryViewBaseC1Ev+0x658>)
        return texts->getText(typedTextId);
 802b09a:	f8d8 0000 	ldr.w	r0, [r8]
 802b09e:	2119      	movs	r1, #25
 802b0a0:	f001 ff08 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802b0a4:	4a2c      	ldr	r2, [pc, #176]	@ (802b158 <_ZN21PasswordEntryViewBaseC1Ev+0x660>)
 802b0a6:	4603      	mov	r3, r0
 802b0a8:	2114      	movs	r1, #20
 802b0aa:	4630      	mov	r0, r6
 802b0ac:	f00c fee0 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802b0b0:	231a      	movs	r3, #26
    digit3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BFI7));
 802b0b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802b0b4:	f8c4 648c 	str.w	r6, [r4, #1164]	@ 0x48c
 802b0b8:	a918      	add	r1, sp, #96	@ 0x60
 802b0ba:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
 802b0be:	9718      	str	r7, [sp, #96]	@ 0x60
    digit4.setPosition(231, 91, 10, 24);
 802b0c0:	2618      	movs	r6, #24
    digit3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BFI7));
 802b0c2:	f006 fd79 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b0c6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802b0c8:	4628      	mov	r0, r5
 802b0ca:	f004 fe23 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    digit4.setPosition(231, 91, 10, 24);
 802b0ce:	230a      	movs	r3, #10
 802b0d0:	225b      	movs	r2, #91	@ 0x5b
 802b0d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802b0d4:	9600      	str	r6, [sp, #0]
 802b0d6:	21e7      	movs	r1, #231	@ 0xe7
 802b0d8:	f7fd ff10 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802b0dc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802b0e0:	f8c4 34c0 	str.w	r3, [r4, #1216]	@ 0x4c0
        linespace = space;
 802b0e4:	2300      	movs	r3, #0
 802b0e6:	f8a4 34c4 	strh.w	r3, [r4, #1220]	@ 0x4c4
        boundingArea = calculateBoundingArea();
 802b0ea:	f8c4 34cc 	str.w	r3, [r4, #1228]	@ 0x4cc
 802b0ee:	f8c4 34d4 	str.w	r3, [r4, #1236]	@ 0x4d4
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802b0f2:	4b1a      	ldr	r3, [pc, #104]	@ (802b15c <_ZN21PasswordEntryViewBaseC1Ev+0x664>)
 802b0f4:	681b      	ldr	r3, [r3, #0]
 802b0f6:	f04f 32ff 	mov.w	r2, #4294967295
 802b0fa:	f8c4 24d0 	str.w	r2, [r4, #1232]	@ 0x4d0
    Unicode::snprintf(digit4Buffer, DIGIT4_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_O105).getText());
 802b0fe:	f204 599a 	addw	r9, r4, #1434	@ 0x59a
 802b102:	2b00      	cmp	r3, #0
 802b104:	f43f ae69 	beq.w	802adda <_ZN21PasswordEntryViewBaseC1Ev+0x2e2>
        return typedTextId < numberOfTypedTexts;
 802b108:	4b12      	ldr	r3, [pc, #72]	@ (802b154 <_ZN21PasswordEntryViewBaseC1Ev+0x65c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b10a:	881b      	ldrh	r3, [r3, #0]
 802b10c:	2b17      	cmp	r3, #23
 802b10e:	f67f ae6e 	bls.w	802adee <_ZN21PasswordEntryViewBaseC1Ev+0x2f6>
        return texts->getText(typedTextId);
 802b112:	f8d8 0000 	ldr.w	r0, [r8]
 802b116:	2117      	movs	r1, #23
 802b118:	f001 fecc 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802b11c:	4a0e      	ldr	r2, [pc, #56]	@ (802b158 <_ZN21PasswordEntryViewBaseC1Ev+0x660>)
 802b11e:	4603      	mov	r3, r0
 802b120:	2114      	movs	r1, #20
 802b122:	4648      	mov	r0, r9
 802b124:	f00c fea4 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    digit4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z513));
 802b128:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802b12a:	f8c4 94d8 	str.w	r9, [r4, #1240]	@ 0x4d8
 802b12e:	a918      	add	r1, sp, #96	@ 0x60
        : typedTextId(id)
 802b130:	9718      	str	r7, [sp, #96]	@ 0x60
 802b132:	f8ad 6064 	strh.w	r6, [sp, #100]	@ 0x64
 802b136:	f006 fd3f 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b13a:	4628      	mov	r0, r5
 802b13c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802b13e:	f004 fde9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 802b142:	4620      	mov	r0, r4
 802b144:	b01b      	add	sp, #108	@ 0x6c
 802b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b14a:	bf00      	nop
 802b14c:	2000b93c 	.word	0x2000b93c
 802b150:	08042200 	.word	0x08042200
 802b154:	2000b934 	.word	0x2000b934
 802b158:	08040ee5 	.word	0x08040ee5
 802b15c:	2000b930 	.word	0x2000b930

0802b160 <_ZN21ScreenLCDtestViewBase13buttonHandlerEh>:
     * Custom Actions
     */
    virtual void buttonHandler(uint8_t value)
    {
        // Override and implement this function in Screen1
    }
 802b160:	4770      	bx	lr

0802b162 <_ZN21ScreenLCDtestViewBaseD1Ev>:
}

ScreenLCDtestViewBase::~ScreenLCDtestViewBase()
{

}
 802b162:	4770      	bx	lr

0802b164 <_ZN21ScreenLCDtestViewBase11setupScreenEv>:

void ScreenLCDtestViewBase::setupScreen()
{

}
 802b164:	4770      	bx	lr

0802b166 <_ZN21ScreenLCDtestViewBase14handleKeyEventEh>:

void ScreenLCDtestViewBase::handleKeyEvent(uint8_t key)
{
 802b166:	4603      	mov	r3, r0
    if(0 == key)
 802b168:	b911      	cbnz	r1, 802b170 <_ZN21ScreenLCDtestViewBase14handleKeyEventEh+0xa>
    if(3 == key)
    {
        //handle_button_press_3
        //When hardware button 3 clicked call buttonHandler on ScreenLCDtest
        //Call buttonHandler
        buttonHandler(3);
 802b16a:	681b      	ldr	r3, [r3, #0]
 802b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b16e:	4718      	bx	r3
    if(1 == key)
 802b170:	2901      	cmp	r1, #1
 802b172:	d0fa      	beq.n	802b16a <_ZN21ScreenLCDtestViewBase14handleKeyEventEh+0x4>
    if(2 == key)
 802b174:	2902      	cmp	r1, #2
 802b176:	d0f8      	beq.n	802b16a <_ZN21ScreenLCDtestViewBase14handleKeyEventEh+0x4>
    if(3 == key)
 802b178:	2903      	cmp	r1, #3
 802b17a:	d0f6      	beq.n	802b16a <_ZN21ScreenLCDtestViewBase14handleKeyEventEh+0x4>
    
    }
}
 802b17c:	4770      	bx	lr

0802b17e <_ZN21ScreenLCDtestViewBaseD0Ev>:
ScreenLCDtestViewBase::~ScreenLCDtestViewBase()
 802b17e:	b510      	push	{r4, lr}
}
 802b180:	f44f 7133 	mov.w	r1, #716	@ 0x2cc
ScreenLCDtestViewBase::~ScreenLCDtestViewBase()
 802b184:	4604      	mov	r4, r0
}
 802b186:	f011 f9b0 	bl	803c4ea <_ZdlPvj>
 802b18a:	4620      	mov	r0, r4
 802b18c:	bd10      	pop	{r4, pc}
	...

0802b190 <_ZN21ScreenLCDtestViewBaseC1Ev>:
ScreenLCDtestViewBase::ScreenLCDtestViewBase()
 802b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b194:	4604      	mov	r4, r0
 802b196:	b093      	sub	sp, #76	@ 0x4c
 802b198:	46a1      	mov	r9, r4
 802b19a:	2500      	movs	r5, #0
 802b19c:	f00b f9b8 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 802b1a0:	4bb6      	ldr	r3, [pc, #728]	@ (802b47c <_ZN21ScreenLCDtestViewBaseC1Ev+0x2ec>)
 802b1a2:	63e5      	str	r5, [r4, #60]	@ 0x3c
 802b1a4:	f849 3b40 	str.w	r3, [r9], #64
 802b1a8:	4648      	mov	r0, r9
 802b1aa:	f7fd fec3 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b1ae:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 802b1b2:	4618      	mov	r0, r3
 802b1b4:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 802b1b8:	9309      	str	r3, [sp, #36]	@ 0x24
        : TextArea()
 802b1ba:	f104 08c4 	add.w	r8, r4, #196	@ 0xc4
 802b1be:	f7fd feb9 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b1c2:	4650      	mov	r0, sl
 802b1c4:	f7fd feb6 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b1c8:	4640      	mov	r0, r8
 802b1ca:	f7fe f817 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 802b1ce:	4bac      	ldr	r3, [pc, #688]	@ (802b480 <_ZN21ScreenLCDtestViewBaseC1Ev+0x2f0>)
 802b1d0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 802b1d4:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 802b1d8:	4618      	mov	r0, r3
 802b1da:	f8c4 510c 	str.w	r5, [r4, #268]	@ 0x10c
 802b1de:	9305      	str	r3, [sp, #20]
 802b1e0:	f7fd ffe8 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b1e4:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 802b1e8:	4618      	mov	r0, r3
 802b1ea:	9306      	str	r3, [sp, #24]
 802b1ec:	f7fd ffe2 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b1f0:	f504 73bc 	add.w	r3, r4, #376	@ 0x178
 802b1f4:	4618      	mov	r0, r3
 802b1f6:	9307      	str	r3, [sp, #28]
 802b1f8:	f7fd ffdc 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b1fc:	f504 73d6 	add.w	r3, r4, #428	@ 0x1ac
 802b200:	4618      	mov	r0, r3
 802b202:	9308      	str	r3, [sp, #32]
 802b204:	f7fd ffd6 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b208:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 802b20c:	4618      	mov	r0, r3
 802b20e:	9303      	str	r3, [sp, #12]
 802b210:	f7fd fff4 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b214:	f504 730a 	add.w	r3, r4, #552	@ 0x228
 802b218:	4618      	mov	r0, r3
 802b21a:	f504 7b1c 	add.w	fp, r4, #624	@ 0x270
 802b21e:	9304      	str	r3, [sp, #16]
 802b220:	f7fd ffec 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b224:	4658      	mov	r0, fp
 802b226:	f7fd ffe9 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
    __background.setPosition(0, 0, 320, 240);
 802b22a:	23f0      	movs	r3, #240	@ 0xf0
 802b22c:	462a      	mov	r2, r5
 802b22e:	4648      	mov	r0, r9
 802b230:	f04f 477f 	mov.w	r7, #4278190080	@ 0xff000000
 802b234:	1d26      	adds	r6, r4, #4
 802b236:	9300      	str	r3, [sp, #0]
 802b238:	4629      	mov	r1, r5
 802b23a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802b23e:	f7fd fe5d 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802b242:	4649      	mov	r1, r9
 802b244:	4630      	mov	r0, r6
 802b246:	66a7      	str	r7, [r4, #104]	@ 0x68
 802b248:	f004 fd64 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box6.setPosition(0, 0, 320, 23);
 802b24c:	2317      	movs	r3, #23
 802b24e:	462a      	mov	r2, r5
 802b250:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b252:	9300      	str	r3, [sp, #0]
 802b254:	4629      	mov	r1, r5
 802b256:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802b25a:	f7fd fe4f 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802b25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802b260:	f8c4 7094 	str.w	r7, [r4, #148]	@ 0x94
 802b264:	4630      	mov	r0, r6
 802b266:	f004 fd55 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 320, 240);
 802b26a:	23f0      	movs	r3, #240	@ 0xf0
 802b26c:	462a      	mov	r2, r5
 802b26e:	4650      	mov	r0, sl
 802b270:	9300      	str	r3, [sp, #0]
 802b272:	4629      	mov	r1, r5
 802b274:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802b278:	f7fd fe40 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802b27c:	f04f 33ff 	mov.w	r3, #4294967295
 802b280:	4651      	mov	r1, sl
 802b282:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 802b286:	4630      	mov	r0, r6
 802b288:	f004 fd44 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textValueBrightness.setPosition(3, 24, 220, 24);
 802b28c:	2218      	movs	r2, #24
 802b28e:	9200      	str	r2, [sp, #0]
 802b290:	23dc      	movs	r3, #220	@ 0xdc
 802b292:	2103      	movs	r1, #3
 802b294:	4640      	mov	r0, r8
 802b296:	f7fd fe31 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802b29a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
        color = newColor;
 802b29e:	f8c4 70f4 	str.w	r7, [r4, #244]	@ 0xf4
        boundingArea = calculateBoundingArea();
 802b2a2:	f10d 0928 	add.w	r9, sp, #40	@ 0x28
 802b2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 802b2aa:	f8a4 50f8 	strh.w	r5, [r4, #248]	@ 0xf8
        boundingArea = calculateBoundingArea();
 802b2ae:	4641      	mov	r1, r8
 802b2b0:	4648      	mov	r0, r9
 802b2b2:	4798      	blx	r3
 802b2b4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 802b2b8:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 802b2bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802b2c0:	4b70      	ldr	r3, [pc, #448]	@ (802b484 <_ZN21ScreenLCDtestViewBaseC1Ev+0x2f4>)
 802b2c2:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(textValueBrightnessBuffer, TEXTVALUEBRIGHTNESS_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IB5N).getText());
 802b2c4:	f504 7a2e 	add.w	sl, r4, #696	@ 0x2b8
 802b2c8:	b92b      	cbnz	r3, 802b2d6 <_ZN21ScreenLCDtestViewBaseC1Ev+0x146>
 802b2ca:	4b6f      	ldr	r3, [pc, #444]	@ (802b488 <_ZN21ScreenLCDtestViewBaseC1Ev+0x2f8>)
 802b2cc:	4a6f      	ldr	r2, [pc, #444]	@ (802b48c <_ZN21ScreenLCDtestViewBaseC1Ev+0x2fc>)
 802b2ce:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b2d0:	486f      	ldr	r0, [pc, #444]	@ (802b490 <_ZN21ScreenLCDtestViewBaseC1Ev+0x300>)
 802b2d2:	f011 f929 	bl	803c528 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 802b2d6:	4b6f      	ldr	r3, [pc, #444]	@ (802b494 <_ZN21ScreenLCDtestViewBaseC1Ev+0x304>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b2d8:	881b      	ldrh	r3, [r3, #0]
 802b2da:	2b5c      	cmp	r3, #92	@ 0x5c
 802b2dc:	d803      	bhi.n	802b2e6 <_ZN21ScreenLCDtestViewBaseC1Ev+0x156>
 802b2de:	4b6e      	ldr	r3, [pc, #440]	@ (802b498 <_ZN21ScreenLCDtestViewBaseC1Ev+0x308>)
 802b2e0:	4a6a      	ldr	r2, [pc, #424]	@ (802b48c <_ZN21ScreenLCDtestViewBaseC1Ev+0x2fc>)
 802b2e2:	2161      	movs	r1, #97	@ 0x61
 802b2e4:	e7f4      	b.n	802b2d0 <_ZN21ScreenLCDtestViewBaseC1Ev+0x140>
        return texts->getText(typedTextId);
 802b2e6:	4b6d      	ldr	r3, [pc, #436]	@ (802b49c <_ZN21ScreenLCDtestViewBaseC1Ev+0x30c>)
 802b2e8:	215c      	movs	r1, #92	@ 0x5c
 802b2ea:	6818      	ldr	r0, [r3, #0]
 802b2ec:	f001 fde2 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802b2f0:	4a6b      	ldr	r2, [pc, #428]	@ (802b4a0 <_ZN21ScreenLCDtestViewBaseC1Ev+0x310>)
 802b2f2:	4603      	mov	r3, r0
 802b2f4:	210a      	movs	r1, #10
 802b2f6:	4650      	mov	r0, sl
 802b2f8:	f00c fdba 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802b2fc:	235d      	movs	r3, #93	@ 0x5d
        wc1 = value;
 802b2fe:	f8c4 a10c 	str.w	sl, [r4, #268]	@ 0x10c
    textValueBrightness.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1YE5));
 802b302:	a910      	add	r1, sp, #64	@ 0x40
 802b304:	f8df a19c 	ldr.w	sl, [pc, #412]	@ 802b4a4 <_ZN21ScreenLCDtestViewBaseC1Ev+0x314>
 802b308:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 802b30c:	4640      	mov	r0, r8
 802b30e:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802b312:	f006 fc51 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b316:	4641      	mov	r1, r8
 802b318:	4630      	mov	r0, r6
 802b31a:	f004 fcfb 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 802b31e:	9805      	ldr	r0, [sp, #20]
 802b320:	4629      	mov	r1, r5
 802b322:	22d8      	movs	r2, #216	@ 0xd8
 802b324:	f04f 0803 	mov.w	r8, #3
 802b328:	f7fd feea 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b32c:	aa10      	add	r2, sp, #64	@ 0x40
 802b32e:	9805      	ldr	r0, [sp, #20]
 802b330:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802b334:	a90f      	add	r1, sp, #60	@ 0x3c
 802b336:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802b33a:	f005 fc8c 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b33e:	9905      	ldr	r1, [sp, #20]
 802b340:	4630      	mov	r0, r6
 802b342:	f004 fce7 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 802b346:	9806      	ldr	r0, [sp, #24]
 802b348:	22d8      	movs	r2, #216	@ 0xd8
 802b34a:	2150      	movs	r1, #80	@ 0x50
 802b34c:	f7fd fed8 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b350:	aa10      	add	r2, sp, #64	@ 0x40
 802b352:	9806      	ldr	r0, [sp, #24]
 802b354:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802b358:	a90f      	add	r1, sp, #60	@ 0x3c
 802b35a:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802b35e:	f005 fc7a 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b362:	9906      	ldr	r1, [sp, #24]
 802b364:	4630      	mov	r0, r6
 802b366:	f004 fcd5 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 802b36a:	9807      	ldr	r0, [sp, #28]
 802b36c:	22d8      	movs	r2, #216	@ 0xd8
 802b36e:	21a0      	movs	r1, #160	@ 0xa0
 802b370:	f7fd fec6 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b374:	aa10      	add	r2, sp, #64	@ 0x40
 802b376:	9807      	ldr	r0, [sp, #28]
 802b378:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802b37c:	a90f      	add	r1, sp, #60	@ 0x3c
 802b37e:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802b382:	f005 fc68 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b386:	9907      	ldr	r1, [sp, #28]
 802b388:	4630      	mov	r0, r6
 802b38a:	f004 fcc3 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 802b38e:	9808      	ldr	r0, [sp, #32]
 802b390:	22d8      	movs	r2, #216	@ 0xd8
 802b392:	21f0      	movs	r1, #240	@ 0xf0
 802b394:	f7fd feb4 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b398:	aa10      	add	r2, sp, #64	@ 0x40
 802b39a:	9808      	ldr	r0, [sp, #32]
 802b39c:	f8ad 803c 	strh.w	r8, [sp, #60]	@ 0x3c
 802b3a0:	a90f      	add	r1, sp, #60	@ 0x3c
 802b3a2:	f8ad 8040 	strh.w	r8, [sp, #64]	@ 0x40
 802b3a6:	f005 fc56 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b3aa:	9908      	ldr	r1, [sp, #32]
 802b3ac:	4630      	mov	r0, r6
 802b3ae:	f004 fcb1 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textOut2.setXY(197, 219);
 802b3b2:	9803      	ldr	r0, [sp, #12]
 802b3b4:	22db      	movs	r2, #219	@ 0xdb
 802b3b6:	21c5      	movs	r1, #197	@ 0xc5
 802b3b8:	f7fd fea2 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802b3bc:	9903      	ldr	r1, [sp, #12]
        color = newColor;
 802b3be:	f8c4 7210 	str.w	r7, [r4, #528]	@ 0x210
        boundingArea = calculateBoundingArea();
 802b3c2:	4648      	mov	r0, r9
        linespace = space;
 802b3c4:	f8a4 5214 	strh.w	r5, [r4, #532]	@ 0x214
        boundingArea = calculateBoundingArea();
 802b3c8:	f006 f8a8 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802b3cc:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 802b3d0:	f504 7307 	add.w	r3, r4, #540	@ 0x21c
 802b3d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b3d8:	235e      	movs	r3, #94	@ 0x5e
    textOut2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UVSW));
 802b3da:	9803      	ldr	r0, [sp, #12]
 802b3dc:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 802b3e0:	a910      	add	r1, sp, #64	@ 0x40
 802b3e2:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802b3e6:	f006 fbe7 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b3ea:	9903      	ldr	r1, [sp, #12]
 802b3ec:	4630      	mov	r0, r6
 802b3ee:	f004 fc91 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textOut1.setXY(114, 219);
 802b3f2:	9804      	ldr	r0, [sp, #16]
 802b3f4:	22db      	movs	r2, #219	@ 0xdb
 802b3f6:	2172      	movs	r1, #114	@ 0x72
 802b3f8:	f7fd fe82 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802b3fc:	9904      	ldr	r1, [sp, #16]
        color = newColor;
 802b3fe:	f8c4 7258 	str.w	r7, [r4, #600]	@ 0x258
        boundingArea = calculateBoundingArea();
 802b402:	4648      	mov	r0, r9
        linespace = space;
 802b404:	f8a4 525c 	strh.w	r5, [r4, #604]	@ 0x25c
        boundingArea = calculateBoundingArea();
 802b408:	f006 f888 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802b40c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 802b410:	f504 7319 	add.w	r3, r4, #612	@ 0x264
 802b414:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b418:	235f      	movs	r3, #95	@ 0x5f
    textOut1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VYTM));
 802b41a:	9804      	ldr	r0, [sp, #16]
 802b41c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 802b420:	a910      	add	r1, sp, #64	@ 0x40
 802b422:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802b426:	f006 fbc7 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b42a:	9904      	ldr	r1, [sp, #16]
 802b42c:	4630      	mov	r0, r6
 802b42e:	f004 fc71 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textExit.setXY(21, 219);
 802b432:	22db      	movs	r2, #219	@ 0xdb
 802b434:	4658      	mov	r0, fp
 802b436:	2115      	movs	r1, #21
 802b438:	f7fd fe62 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802b43c:	4659      	mov	r1, fp
 802b43e:	4648      	mov	r0, r9
        color = newColor;
 802b440:	f8c4 72a0 	str.w	r7, [r4, #672]	@ 0x2a0
        linespace = space;
 802b444:	f8a4 52a4 	strh.w	r5, [r4, #676]	@ 0x2a4
        boundingArea = calculateBoundingArea();
 802b448:	f006 f868 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802b44c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 802b450:	f504 732b 	add.w	r3, r4, #684	@ 0x2ac
 802b454:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b458:	2360      	movs	r3, #96	@ 0x60
    textExit.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G03W));
 802b45a:	a910      	add	r1, sp, #64	@ 0x40
 802b45c:	4658      	mov	r0, fp
 802b45e:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 802b462:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 802b466:	f006 fba7 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b46a:	4630      	mov	r0, r6
 802b46c:	4659      	mov	r1, fp
 802b46e:	f004 fc51 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 802b472:	4620      	mov	r0, r4
 802b474:	b013      	add	sp, #76	@ 0x4c
 802b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b47a:	bf00      	nop
 802b47c:	08042a18 	.word	0x08042a18
 802b480:	08042758 	.word	0x08042758
 802b484:	2000b930 	.word	0x2000b930
 802b488:	08040d9d 	.word	0x08040d9d
 802b48c:	08040e9a 	.word	0x08040e9a
 802b490:	08040e1a 	.word	0x08040e1a
 802b494:	2000b934 	.word	0x2000b934
 802b498:	08040e5c 	.word	0x08040e5c
 802b49c:	2000b93c 	.word	0x2000b93c
 802b4a0:	08040ee5 	.word	0x08040ee5
 802b4a4:	08042200 	.word	0x08042200

0802b4a8 <_ZN25ScreenOutputsTestViewBase13buttonHandlerEh>:
     * Custom Actions
     */
    virtual void buttonHandler(uint8_t value)
    {
        // Override and implement this function in Screen1
    }
 802b4a8:	4770      	bx	lr

0802b4aa <_ZN25ScreenOutputsTestViewBaseD1Ev>:
}

ScreenOutputsTestViewBase::~ScreenOutputsTestViewBase()
{

}
 802b4aa:	4770      	bx	lr

0802b4ac <_ZN25ScreenOutputsTestViewBase11setupScreenEv>:

void ScreenOutputsTestViewBase::setupScreen()
{

}
 802b4ac:	4770      	bx	lr

0802b4ae <_ZN25ScreenOutputsTestViewBase14handleKeyEventEh>:

void ScreenOutputsTestViewBase::handleKeyEvent(uint8_t key)
{
 802b4ae:	4603      	mov	r3, r0
    if(0 == key)
 802b4b0:	b911      	cbnz	r1, 802b4b8 <_ZN25ScreenOutputsTestViewBase14handleKeyEventEh+0xa>
    if(3 == key)
    {
        //handle_button_press_3
        //When hardware button 3 clicked call buttonHandler on ScreenOutputsTest
        //Call buttonHandler
        buttonHandler(3);
 802b4b2:	681b      	ldr	r3, [r3, #0]
 802b4b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b4b6:	4718      	bx	r3
    if(1 == key)
 802b4b8:	2901      	cmp	r1, #1
 802b4ba:	d0fa      	beq.n	802b4b2 <_ZN25ScreenOutputsTestViewBase14handleKeyEventEh+0x4>
    if(2 == key)
 802b4bc:	2902      	cmp	r1, #2
 802b4be:	d0f8      	beq.n	802b4b2 <_ZN25ScreenOutputsTestViewBase14handleKeyEventEh+0x4>
    if(3 == key)
 802b4c0:	2903      	cmp	r1, #3
 802b4c2:	d0f6      	beq.n	802b4b2 <_ZN25ScreenOutputsTestViewBase14handleKeyEventEh+0x4>
    
    }
}
 802b4c4:	4770      	bx	lr

0802b4c6 <_ZN25ScreenOutputsTestViewBaseD0Ev>:
ScreenOutputsTestViewBase::~ScreenOutputsTestViewBase()
 802b4c6:	b510      	push	{r4, lr}
}
 802b4c8:	f44f 7140 	mov.w	r1, #768	@ 0x300
ScreenOutputsTestViewBase::~ScreenOutputsTestViewBase()
 802b4cc:	4604      	mov	r4, r0
}
 802b4ce:	f011 f80c 	bl	803c4ea <_ZdlPvj>
 802b4d2:	4620      	mov	r0, r4
 802b4d4:	bd10      	pop	{r4, pc}
	...

0802b4d8 <_ZN25ScreenOutputsTestViewBaseC1Ev>:
ScreenOutputsTestViewBase::ScreenOutputsTestViewBase()
 802b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b4dc:	4604      	mov	r4, r0
 802b4de:	b091      	sub	sp, #68	@ 0x44
 802b4e0:	4625      	mov	r5, r4
 802b4e2:	2600      	movs	r6, #0
 802b4e4:	f00b f814 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 802b4e8:	4bd5      	ldr	r3, [pc, #852]	@ (802b840 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x368>)
 802b4ea:	63e6      	str	r6, [r4, #60]	@ 0x3c
 802b4ec:	f845 3b40 	str.w	r3, [r5], #64
 802b4f0:	4628      	mov	r0, r5
 802b4f2:	f7fd fd1f 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b4f6:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 802b4fa:	f104 0898 	add.w	r8, r4, #152	@ 0x98
 802b4fe:	4618      	mov	r0, r3
 802b500:	9307      	str	r3, [sp, #28]
 802b502:	f7fd fd17 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b506:	4640      	mov	r0, r8
 802b508:	f7fd fe54 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b50c:	f104 03cc 	add.w	r3, r4, #204	@ 0xcc
 802b510:	4618      	mov	r0, r3
 802b512:	f504 7b80 	add.w	fp, r4, #256	@ 0x100
 802b516:	9306      	str	r3, [sp, #24]
 802b518:	f504 7a9a 	add.w	sl, r4, #308	@ 0x134
 802b51c:	f7fd fe4a 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b520:	4658      	mov	r0, fp
 802b522:	f7fd fe47 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b526:	f504 79b4 	add.w	r9, r4, #360	@ 0x168
 802b52a:	4650      	mov	r0, sl
 802b52c:	f7fd fe42 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b530:	4648      	mov	r0, r9
 802b532:	f7fd fe63 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
        : TextArea()
 802b536:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 802b53a:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 802b53c:	4fc1      	ldr	r7, [pc, #772]	@ (802b844 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x36c>)
        : TextArea()
 802b53e:	9302      	str	r3, [sp, #8]
 802b540:	f7fd fe5c 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b544:	f504 73fe 	add.w	r3, r4, #508	@ 0x1fc
        : TextAreaWithWildcardBase(), wc1(0)
 802b548:	f8c4 71b0 	str.w	r7, [r4, #432]	@ 0x1b0
        : TextArea()
 802b54c:	4618      	mov	r0, r3
        : TextAreaWithWildcardBase(), wc1(0)
 802b54e:	f8c4 61f8 	str.w	r6, [r4, #504]	@ 0x1f8
        : TextArea()
 802b552:	9303      	str	r3, [sp, #12]
 802b554:	f7fd fe52 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b558:	f504 7312 	add.w	r3, r4, #584	@ 0x248
        : TextAreaWithWildcardBase(), wc1(0)
 802b55c:	f8c4 71fc 	str.w	r7, [r4, #508]	@ 0x1fc
 802b560:	4618      	mov	r0, r3
 802b562:	f8c4 6244 	str.w	r6, [r4, #580]	@ 0x244
 802b566:	9304      	str	r3, [sp, #16]
 802b568:	f7fd fe48 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b56c:	f504 7324 	add.w	r3, r4, #656	@ 0x290
 802b570:	4618      	mov	r0, r3
 802b572:	9305      	str	r3, [sp, #20]
 802b574:	f7fd fe42 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
    __background.setPosition(0, 0, 320, 240);
 802b578:	23f0      	movs	r3, #240	@ 0xf0
 802b57a:	4632      	mov	r2, r6
 802b57c:	4628      	mov	r0, r5
 802b57e:	9300      	str	r3, [sp, #0]
 802b580:	4631      	mov	r1, r6
 802b582:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802b586:	f7fd fcb9 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802b58a:	1d27      	adds	r7, r4, #4
 802b58c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802b590:	4629      	mov	r1, r5
 802b592:	66a3      	str	r3, [r4, #104]	@ 0x68
 802b594:	4638      	mov	r0, r7
 802b596:	f004 fbbd 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box1.setPosition(0, 0, 320, 240);
 802b59a:	23f0      	movs	r3, #240	@ 0xf0
 802b59c:	4632      	mov	r2, r6
 802b59e:	9807      	ldr	r0, [sp, #28]
 802b5a0:	9300      	str	r3, [sp, #0]
 802b5a2:	4631      	mov	r1, r6
 802b5a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802b5a8:	f7fd fca8 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802b5ac:	f04f 33ff 	mov.w	r3, #4294967295
 802b5b0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 802b5b4:	9907      	ldr	r1, [sp, #28]
 802b5b6:	4638      	mov	r0, r7
 802b5b8:	f004 fbac 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 802b5bc:	4640      	mov	r0, r8
 802b5be:	22d8      	movs	r2, #216	@ 0xd8
 802b5c0:	4631      	mov	r1, r6
 802b5c2:	2503      	movs	r5, #3
 802b5c4:	f7fd fd9c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b5c8:	aa0e      	add	r2, sp, #56	@ 0x38
 802b5ca:	4640      	mov	r0, r8
 802b5cc:	a90d      	add	r1, sp, #52	@ 0x34
 802b5ce:	f8ad 5034 	strh.w	r5, [sp, #52]	@ 0x34
 802b5d2:	f8ad 5038 	strh.w	r5, [sp, #56]	@ 0x38
 802b5d6:	f005 fb3e 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b5da:	4641      	mov	r1, r8
 802b5dc:	4638      	mov	r0, r7
 802b5de:	f004 fb99 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 802b5e2:	9806      	ldr	r0, [sp, #24]
 802b5e4:	f8df 8278 	ldr.w	r8, [pc, #632]	@ 802b860 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x388>
 802b5e8:	22d8      	movs	r2, #216	@ 0xd8
 802b5ea:	21f0      	movs	r1, #240	@ 0xf0
 802b5ec:	f7fd fd88 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b5f0:	aa0e      	add	r2, sp, #56	@ 0x38
 802b5f2:	9806      	ldr	r0, [sp, #24]
 802b5f4:	f8ad 5034 	strh.w	r5, [sp, #52]	@ 0x34
 802b5f8:	a90d      	add	r1, sp, #52	@ 0x34
 802b5fa:	f8ad 5038 	strh.w	r5, [sp, #56]	@ 0x38
 802b5fe:	f005 fb2a 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b602:	9906      	ldr	r1, [sp, #24]
 802b604:	4638      	mov	r0, r7
 802b606:	f004 fb85 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 802b60a:	4658      	mov	r0, fp
 802b60c:	22d8      	movs	r2, #216	@ 0xd8
 802b60e:	21a0      	movs	r1, #160	@ 0xa0
 802b610:	f7fd fd76 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b614:	aa0e      	add	r2, sp, #56	@ 0x38
 802b616:	4658      	mov	r0, fp
 802b618:	a90d      	add	r1, sp, #52	@ 0x34
 802b61a:	f8ad 5034 	strh.w	r5, [sp, #52]	@ 0x34
 802b61e:	f8ad 5038 	strh.w	r5, [sp, #56]	@ 0x38
 802b622:	f005 fb18 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b626:	4659      	mov	r1, fp
 802b628:	4638      	mov	r0, r7
 802b62a:	f004 fb73 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 802b62e:	22d8      	movs	r2, #216	@ 0xd8
 802b630:	2150      	movs	r1, #80	@ 0x50
 802b632:	4650      	mov	r0, sl
 802b634:	f7fd fd64 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802b638:	aa0e      	add	r2, sp, #56	@ 0x38
 802b63a:	a90d      	add	r1, sp, #52	@ 0x34
 802b63c:	4650      	mov	r0, sl
 802b63e:	f8ad 5034 	strh.w	r5, [sp, #52]	@ 0x34
 802b642:	f8ad 5038 	strh.w	r5, [sp, #56]	@ 0x38
 802b646:	f005 fb06 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802b64a:	4651      	mov	r1, sl
 802b64c:	4638      	mov	r0, r7
 802b64e:	f004 fb61 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textExit.setXY(21, 219);
 802b652:	22db      	movs	r2, #219	@ 0xdb
 802b654:	4648      	mov	r0, r9
 802b656:	2115      	movs	r1, #21
 802b658:	f7fd fd52 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802b65c:	ad08      	add	r5, sp, #32
        color = newColor;
 802b65e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802b662:	4649      	mov	r1, r9
        color = newColor;
 802b664:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
        boundingArea = calculateBoundingArea();
 802b668:	4628      	mov	r0, r5
        linespace = space;
 802b66a:	f8a4 619c 	strh.w	r6, [r4, #412]	@ 0x19c
        boundingArea = calculateBoundingArea();
 802b66e:	f005 ff55 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802b672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802b676:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 802b67a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b67e:	2369      	movs	r3, #105	@ 0x69
    textExit.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T00Q));
 802b680:	4648      	mov	r0, r9
 802b682:	a90e      	add	r1, sp, #56	@ 0x38
 802b684:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 802b688:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802b68c:	f006 fa94 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b690:	4649      	mov	r1, r9
 802b692:	4638      	mov	r0, r7
 802b694:	f004 fb3e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textOutput2.setXY(9, 39);
 802b698:	2227      	movs	r2, #39	@ 0x27
 802b69a:	9802      	ldr	r0, [sp, #8]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802b69c:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 802b864 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x38c>
 802b6a0:	2109      	movs	r1, #9
 802b6a2:	f7fd fd2d 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802b6a6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802b6aa:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
        boundingArea = calculateBoundingArea();
 802b6ae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
 802b6b2:	9902      	ldr	r1, [sp, #8]
 802b6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 802b6b8:	f8a4 61e4 	strh.w	r6, [r4, #484]	@ 0x1e4
        boundingArea = calculateBoundingArea();
 802b6bc:	4628      	mov	r0, r5
 802b6be:	4798      	blx	r3
 802b6c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802b6c4:	f504 73f6 	add.w	r3, r4, #492	@ 0x1ec
 802b6c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b6cc:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(textOutput2Buffer, TEXTOUTPUT2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OPD1).getText());
 802b6d0:	f504 7936 	add.w	r9, r4, #728	@ 0x2d8
 802b6d4:	b92b      	cbnz	r3, 802b6e2 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x20a>
 802b6d6:	4b5c      	ldr	r3, [pc, #368]	@ (802b848 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x370>)
 802b6d8:	4a5c      	ldr	r2, [pc, #368]	@ (802b84c <_ZN25ScreenOutputsTestViewBaseC1Ev+0x374>)
 802b6da:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b6dc:	485c      	ldr	r0, [pc, #368]	@ (802b850 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x378>)
 802b6de:	f010 ff23 	bl	803c528 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 802b6e2:	f8df a184 	ldr.w	sl, [pc, #388]	@ 802b868 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x390>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b6e6:	f8ba 3000 	ldrh.w	r3, [sl]
 802b6ea:	2b65      	cmp	r3, #101	@ 0x65
 802b6ec:	d803      	bhi.n	802b6f6 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x21e>
 802b6ee:	4b59      	ldr	r3, [pc, #356]	@ (802b854 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x37c>)
 802b6f0:	4a56      	ldr	r2, [pc, #344]	@ (802b84c <_ZN25ScreenOutputsTestViewBaseC1Ev+0x374>)
 802b6f2:	2161      	movs	r1, #97	@ 0x61
 802b6f4:	e7f2      	b.n	802b6dc <_ZN25ScreenOutputsTestViewBaseC1Ev+0x204>
        return texts->getText(typedTextId);
 802b6f6:	4b58      	ldr	r3, [pc, #352]	@ (802b858 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x380>)
 802b6f8:	2165      	movs	r1, #101	@ 0x65
 802b6fa:	6818      	ldr	r0, [r3, #0]
 802b6fc:	f001 fbda 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802b700:	4a56      	ldr	r2, [pc, #344]	@ (802b85c <_ZN25ScreenOutputsTestViewBaseC1Ev+0x384>)
 802b702:	4603      	mov	r3, r0
 802b704:	210a      	movs	r1, #10
 802b706:	4648      	mov	r0, r9
 802b708:	f00c fbb2 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textOutput2.resizeToCurrentText();
 802b70c:	9802      	ldr	r0, [sp, #8]
        wc1 = value;
 802b70e:	f8c4 91f8 	str.w	r9, [r4, #504]	@ 0x1f8
 802b712:	f006 fa31 	bl	8031b78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 802b716:	2366      	movs	r3, #102	@ 0x66
    textOutput2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IT8S));
 802b718:	9802      	ldr	r0, [sp, #8]
 802b71a:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 802b71e:	a90e      	add	r1, sp, #56	@ 0x38
 802b720:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802b724:	f006 fa48 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b728:	9902      	ldr	r1, [sp, #8]
 802b72a:	4638      	mov	r0, r7
 802b72c:	f004 faf2 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textOutput1.setXY(9, 8);
 802b730:	9803      	ldr	r0, [sp, #12]
 802b732:	2208      	movs	r2, #8
 802b734:	2109      	movs	r1, #9
 802b736:	f7fd fce3 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802b73a:	f8d4 31fc 	ldr.w	r3, [r4, #508]	@ 0x1fc
 802b73e:	9903      	ldr	r1, [sp, #12]
 802b740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 802b744:	f8a4 6230 	strh.w	r6, [r4, #560]	@ 0x230
        color = newColor;
 802b748:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 802b74c:	f8c4 222c 	str.w	r2, [r4, #556]	@ 0x22c
        boundingArea = calculateBoundingArea();
 802b750:	4628      	mov	r0, r5
 802b752:	4798      	blx	r3
 802b754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802b758:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 802b75c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802b760:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(textOutput1Buffer, TEXTOUTPUT1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_VLRX).getText());
 802b764:	f504 793b 	add.w	r9, r4, #748	@ 0x2ec
 802b768:	2b00      	cmp	r3, #0
 802b76a:	d0b4      	beq.n	802b6d6 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x1fe>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802b76c:	f8ba 3000 	ldrh.w	r3, [sl]
 802b770:	2b67      	cmp	r3, #103	@ 0x67
 802b772:	d9bc      	bls.n	802b6ee <_ZN25ScreenOutputsTestViewBaseC1Ev+0x216>
        return texts->getText(typedTextId);
 802b774:	4b38      	ldr	r3, [pc, #224]	@ (802b858 <_ZN25ScreenOutputsTestViewBaseC1Ev+0x380>)
 802b776:	2167      	movs	r1, #103	@ 0x67
 802b778:	6818      	ldr	r0, [r3, #0]
 802b77a:	f001 fb9b 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802b77e:	4a37      	ldr	r2, [pc, #220]	@ (802b85c <_ZN25ScreenOutputsTestViewBaseC1Ev+0x384>)
 802b780:	4603      	mov	r3, r0
 802b782:	210a      	movs	r1, #10
 802b784:	4648      	mov	r0, r9
 802b786:	f00c fb73 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textOutput1.resizeToCurrentText();
 802b78a:	9803      	ldr	r0, [sp, #12]
 802b78c:	f8c4 9244 	str.w	r9, [r4, #580]	@ 0x244
 802b790:	f006 f9f2 	bl	8031b78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 802b794:	2368      	movs	r3, #104	@ 0x68
    textOutput1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5PB5));
 802b796:	9803      	ldr	r0, [sp, #12]
 802b798:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 802b79c:	a90e      	add	r1, sp, #56	@ 0x38
 802b79e:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802b7a2:	f006 fa09 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b7a6:	9903      	ldr	r1, [sp, #12]
 802b7a8:	4638      	mov	r0, r7
 802b7aa:	f004 fab3 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textOut1.setXY(98, 219);
 802b7ae:	9804      	ldr	r0, [sp, #16]
 802b7b0:	22db      	movs	r2, #219	@ 0xdb
 802b7b2:	2162      	movs	r1, #98	@ 0x62
 802b7b4:	f7fd fca4 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802b7b8:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802b7bc:	9904      	ldr	r1, [sp, #16]
        color = newColor;
 802b7be:	f8c4 3278 	str.w	r3, [r4, #632]	@ 0x278
        boundingArea = calculateBoundingArea();
 802b7c2:	4628      	mov	r0, r5
        linespace = space;
 802b7c4:	f8a4 627c 	strh.w	r6, [r4, #636]	@ 0x27c
        boundingArea = calculateBoundingArea();
 802b7c8:	f005 fea8 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802b7cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802b7d0:	f504 7321 	add.w	r3, r4, #644	@ 0x284
 802b7d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b7d8:	2364      	movs	r3, #100	@ 0x64
    textOut1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PT8Q));
 802b7da:	9804      	ldr	r0, [sp, #16]
 802b7dc:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 802b7e0:	a90e      	add	r1, sp, #56	@ 0x38
 802b7e2:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802b7e6:	f006 f9e7 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b7ea:	9904      	ldr	r1, [sp, #16]
 802b7ec:	4638      	mov	r0, r7
 802b7ee:	f004 fa91 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textOut2.setXY(178, 219);
 802b7f2:	9805      	ldr	r0, [sp, #20]
 802b7f4:	22db      	movs	r2, #219	@ 0xdb
 802b7f6:	21b2      	movs	r1, #178	@ 0xb2
 802b7f8:	f7fd fc82 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802b7fc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802b800:	9905      	ldr	r1, [sp, #20]
        color = newColor;
 802b802:	f8c4 32c0 	str.w	r3, [r4, #704]	@ 0x2c0
        boundingArea = calculateBoundingArea();
 802b806:	4628      	mov	r0, r5
        linespace = space;
 802b808:	f8a4 62c4 	strh.w	r6, [r4, #708]	@ 0x2c4
        boundingArea = calculateBoundingArea();
 802b80c:	f005 fe86 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802b810:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802b814:	f504 7333 	add.w	r3, r4, #716	@ 0x2cc
 802b818:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b81c:	2363      	movs	r3, #99	@ 0x63
    textOut2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AW8J));
 802b81e:	9805      	ldr	r0, [sp, #20]
 802b820:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 802b824:	a90e      	add	r1, sp, #56	@ 0x38
 802b826:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 802b82a:	f006 f9c5 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802b82e:	4638      	mov	r0, r7
 802b830:	9905      	ldr	r1, [sp, #20]
 802b832:	f004 fa6f 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 802b836:	4620      	mov	r0, r4
 802b838:	b011      	add	sp, #68	@ 0x44
 802b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b83e:	bf00      	nop
 802b840:	08042a50 	.word	0x08042a50
 802b844:	08042758 	.word	0x08042758
 802b848:	08040d9d 	.word	0x08040d9d
 802b84c:	08040e9a 	.word	0x08040e9a
 802b850:	08040e1a 	.word	0x08040e1a
 802b854:	08040e5c 	.word	0x08040e5c
 802b858:	2000b93c 	.word	0x2000b93c
 802b85c:	08040ee5 	.word	0x08040ee5
 802b860:	08042200 	.word	0x08042200
 802b864:	2000b930 	.word	0x2000b930
 802b868:	2000b934 	.word	0x2000b934

0802b86c <_ZN22ScreenTestHomeViewBase13buttonHandlerEh>:
     * Custom Actions
     */
    virtual void buttonHandler(uint8_t value)
    {
        // Override and implement this function in Screen1
    }
 802b86c:	4770      	bx	lr

0802b86e <_ZN22ScreenTestHomeViewBase17GoToCANtestScreenEv>:
    
    virtual void GoToCANtestScreen()
    {
        // Override and implement this function in Screen1
    }
 802b86e:	4770      	bx	lr

0802b870 <_ZN22ScreenTestHomeViewBase20GoToInputsTestScreenEv>:
    
    virtual void GoToInputsTestScreen()
    {
        // Override and implement this function in Screen1
    }
 802b870:	4770      	bx	lr

0802b872 <_ZN22ScreenTestHomeViewBase26navigateBasedOnVehicleTypeEv>:
     * Virtual Action Handlers
     */
    virtual void navigateBasedOnVehicleType()
    {
        // Override and implement this function in ScreenTestHome
    }
 802b872:	4770      	bx	lr

0802b874 <_ZN22ScreenTestHomeViewBaseD1Ev>:
}

ScreenTestHomeViewBase::~ScreenTestHomeViewBase()
{

}
 802b874:	4770      	bx	lr

0802b876 <_ZN22ScreenTestHomeViewBase11setupScreenEv>:

void ScreenTestHomeViewBase::setupScreen()
{

}
 802b876:	4770      	bx	lr

0802b878 <_ZN22ScreenTestHomeViewBaseD0Ev>:
ScreenTestHomeViewBase::~ScreenTestHomeViewBase()
 802b878:	b510      	push	{r4, lr}
}
 802b87a:	f640 21e4 	movw	r1, #2788	@ 0xae4
ScreenTestHomeViewBase::~ScreenTestHomeViewBase()
 802b87e:	4604      	mov	r4, r0
}
 802b880:	f010 fe33 	bl	803c4ea <_ZdlPvj>
 802b884:	4620      	mov	r0, r4
 802b886:	bd10      	pop	{r4, pc}

0802b888 <_ZN22ScreenTestHomeViewBase14handleKeyEventEh>:

void ScreenTestHomeViewBase::handleKeyEvent(uint8_t key)
{
    if(4 == key)
 802b888:	2904      	cmp	r1, #4
{
 802b88a:	b510      	push	{r4, lr}
 802b88c:	4602      	mov	r2, r0
    if(4 == key)
 802b88e:	d104      	bne.n	802b89a <_ZN22ScreenTestHomeViewBase14handleKeyEventEh+0x12>
    {
        //handle_button_press_0
        //When hardware button 4 clicked call buttonHandler on ScreenTestHome
        //Call buttonHandler
        buttonHandler(0);
 802b890:	6803      	ldr	r3, [r0, #0]
 802b892:	2100      	movs	r1, #0
 802b894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b896:	4798      	blx	r3
        //When hardware button 8 clicked change screen to ScreenTrailer
        //Go to ScreenTrailer with no screen transition
        application().gotoScreenTrailerScreenNoTransition();
    
    }
}
 802b898:	bd10      	pop	{r4, pc}
    if(1 == key)
 802b89a:	2901      	cmp	r1, #1
 802b89c:	d104      	bne.n	802b8a8 <_ZN22ScreenTestHomeViewBase14handleKeyEventEh+0x20>
        buttonHandler(3);
 802b89e:	6813      	ldr	r3, [r2, #0]
}
 802b8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonHandler(3);
 802b8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b8a6:	4718      	bx	r3
    if(2 == key)
 802b8a8:	2902      	cmp	r1, #2
 802b8aa:	d0f8      	beq.n	802b89e <_ZN22ScreenTestHomeViewBase14handleKeyEventEh+0x16>
    if(3 == key)
 802b8ac:	2903      	cmp	r1, #3
 802b8ae:	d0f6      	beq.n	802b89e <_ZN22ScreenTestHomeViewBase14handleKeyEventEh+0x16>
    if(0 == key)
 802b8b0:	b921      	cbnz	r1, 802b8bc <_ZN22ScreenTestHomeViewBase14handleKeyEventEh+0x34>
        navigateBasedOnVehicleType();
 802b8b2:	6803      	ldr	r3, [r0, #0]
}
 802b8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        navigateBasedOnVehicleType();
 802b8b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802b8ba:	4718      	bx	r3
    if(8 == key)
 802b8bc:	2908      	cmp	r1, #8
 802b8be:	d1eb      	bne.n	802b898 <_ZN22ScreenTestHomeViewBase14handleKeyEventEh+0x10>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802b8c0:	f009 fa24 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 802b8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoScreenTrailerScreenNoTransition();
 802b8c8:	f7fc bbd4 	b.w	8028074 <_ZN23FrontendApplicationBase35gotoScreenTrailerScreenNoTransitionEv>

0802b8cc <_ZN22ScreenTestHomeViewBase21GoToOutputsTestScreenEv>:

void ScreenTestHomeViewBase::GoToOutputsTestScreen()
{
 802b8cc:	b508      	push	{r3, lr}
 802b8ce:	f009 fa1d 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    //Go_to_Outputs_screen
    //When GoToOutputsTestScreen is called change screen to ScreenOutputsTest
    //Go to ScreenOutputsTest with no screen transition
    application().gotoScreenOutputsTestScreenNoTransition();
}
 802b8d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreenOutputsTestScreenNoTransition();
 802b8d6:	f7fc bbed 	b.w	80280b4 <_ZN23FrontendApplicationBase39gotoScreenOutputsTestScreenNoTransitionEv>

0802b8da <_ZN22ScreenTestHomeViewBase14GoToHomeScreenEv>:

void ScreenTestHomeViewBase::GoToHomeScreen()
{
 802b8da:	b508      	push	{r3, lr}
 802b8dc:	f009 fa16 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    //Go_to_Home_screen
    //When GoToHomeScreen is called change screen to ScreenTestHome
    //Go to ScreenTestHome with no screen transition
    application().gotoScreenTestHomeScreenNoTransition();
}
 802b8e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreenTestHomeScreenNoTransition();
 802b8e4:	f7fc bbd6 	b.w	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>

0802b8e8 <_ZN22ScreenTestHomeViewBase17GoToLCDtestScreenEv>:

void ScreenTestHomeViewBase::GoToLCDtestScreen()
{
 802b8e8:	b508      	push	{r3, lr}
 802b8ea:	f009 fa0f 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    //Go_to_LCD_screen
    //When GoToLCDtestScreen is called change screen to ScreenLCDtest
    //Go to ScreenLCDtest with no screen transition
    application().gotoScreenLCDtestScreenNoTransition();
}
 802b8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    application().gotoScreenLCDtestScreenNoTransition();
 802b8f2:	f7fc bbef 	b.w	80280d4 <_ZN23FrontendApplicationBase35gotoScreenLCDtestScreenNoTransitionEv>
	...

0802b8f8 <_ZN22ScreenTestHomeViewBaseC1Ev>:
ScreenTestHomeViewBase::ScreenTestHomeViewBase()
 802b8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b8fc:	4604      	mov	r4, r0
 802b8fe:	b0a7      	sub	sp, #156	@ 0x9c
 802b900:	4627      	mov	r7, r4
 802b902:	f00a fe05 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 802b906:	2600      	movs	r6, #0
 802b908:	4b8f      	ldr	r3, [pc, #572]	@ (802bb48 <_ZN22ScreenTestHomeViewBaseC1Ev+0x250>)
 802b90a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 802b90c:	f847 3b40 	str.w	r3, [r7], #64
 802b910:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
 802b914:	4638      	mov	r0, r7
 802b916:	f7fd fb0d 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b91a:	4640      	mov	r0, r8
 802b91c:	ad23      	add	r5, sp, #140	@ 0x8c
 802b91e:	f7fd fc8d 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802b922:	f104 03b8 	add.w	r3, r4, #184	@ 0xb8
 802b926:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 802b92a:	4629      	mov	r1, r5
 802b92c:	4618      	mov	r0, r3
 802b92e:	930b      	str	r3, [sp, #44]	@ 0x2c
 802b930:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802b934:	f7fd fc24 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802b938:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 802b93c:	4629      	mov	r1, r5
 802b93e:	4618      	mov	r0, r3
 802b940:	930c      	str	r3, [sp, #48]	@ 0x30
 802b942:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802b946:	f7fd fc1b 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802b94a:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 802b94e:	4629      	mov	r1, r5
 802b950:	4618      	mov	r0, r3
 802b952:	930d      	str	r3, [sp, #52]	@ 0x34
 802b954:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802b958:	f7fd fc12 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802b95c:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 802b960:	4618      	mov	r0, r3
 802b962:	930e      	str	r3, [sp, #56]	@ 0x38
 802b964:	f7fd fc26 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b968:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 802b96c:	4618      	mov	r0, r3
 802b96e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802b970:	f7fd fc20 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b974:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 802b978:	4618      	mov	r0, r3
 802b97a:	9310      	str	r3, [sp, #64]	@ 0x40
 802b97c:	f7fd fc1a 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b980:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 802b984:	4618      	mov	r0, r3
 802b986:	9311      	str	r3, [sp, #68]	@ 0x44
 802b988:	f7fd fc14 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802b98c:	f504 7303 	add.w	r3, r4, #524	@ 0x20c
 802b990:	4618      	mov	r0, r3
 802b992:	9304      	str	r3, [sp, #16]
 802b994:	f7fd fc32 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b998:	f504 7315 	add.w	r3, r4, #596	@ 0x254
 802b99c:	4618      	mov	r0, r3
 802b99e:	9305      	str	r3, [sp, #20]
 802b9a0:	f7fd fc4c 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802b9a4:	f504 7328 	add.w	r3, r4, #672	@ 0x2a0
 802b9a8:	4618      	mov	r0, r3
 802b9aa:	9306      	str	r3, [sp, #24]
 802b9ac:	f7fd fc26 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b9b0:	f504 733a 	add.w	r3, r4, #744	@ 0x2e8
 802b9b4:	4618      	mov	r0, r3
 802b9b6:	9307      	str	r3, [sp, #28]
 802b9b8:	f7fd fc20 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802b9bc:	f504 734c 	add.w	r3, r4, #816	@ 0x330
 802b9c0:	4618      	mov	r0, r3
 802b9c2:	9302      	str	r3, [sp, #8]
 802b9c4:	f004 ffec 	bl	80309a0 <_ZN8touchgfx13ImageProgressC1Ev>
 802b9c8:	f504 6389 	add.w	r3, r4, #1096	@ 0x448
 802b9cc:	4618      	mov	r0, r3
 802b9ce:	9303      	str	r3, [sp, #12]
 802b9d0:	f004 ffe6 	bl	80309a0 <_ZN8touchgfx13ImageProgressC1Ev>
 802b9d4:	f504 63ac 	add.w	r3, r4, #1376	@ 0x560
 802b9d8:	4618      	mov	r0, r3
 802b9da:	931b      	str	r3, [sp, #108]	@ 0x6c
 802b9dc:	f7fd faaa 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b9e0:	f204 538c 	addw	r3, r4, #1420	@ 0x58c
 802b9e4:	4618      	mov	r0, r3
 802b9e6:	931c      	str	r3, [sp, #112]	@ 0x70
 802b9e8:	f7fd faa4 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802b9ec:	f504 63b7 	add.w	r3, r4, #1464	@ 0x5b8
 802b9f0:	4618      	mov	r0, r3
 802b9f2:	9312      	str	r3, [sp, #72]	@ 0x48
 802b9f4:	f7fd fc22 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802b9f8:	f204 6304 	addw	r3, r4, #1540	@ 0x604
 802b9fc:	4618      	mov	r0, r3
 802b9fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ba00:	f7fd fc1c 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802ba04:	f504 63ca 	add.w	r3, r4, #1616	@ 0x650
 802ba08:	4618      	mov	r0, r3
 802ba0a:	9314      	str	r3, [sp, #80]	@ 0x50
 802ba0c:	f7fd fc16 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802ba10:	f204 639c 	addw	r3, r4, #1692	@ 0x69c
 802ba14:	4629      	mov	r1, r5
 802ba16:	4618      	mov	r0, r3
 802ba18:	9308      	str	r3, [sp, #32]
 802ba1a:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802ba1e:	f005 fabf 	bl	8030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 802ba22:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 802ba26:	4629      	mov	r1, r5
 802ba28:	4618      	mov	r0, r3
 802ba2a:	9309      	str	r3, [sp, #36]	@ 0x24
 802ba2c:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802ba30:	f005 fab6 	bl	8030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 802ba34:	f204 63f4 	addw	r3, r4, #1780	@ 0x6f4
 802ba38:	4629      	mov	r1, r5
 802ba3a:	4618      	mov	r0, r3
 802ba3c:	9315      	str	r3, [sp, #84]	@ 0x54
 802ba3e:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802ba42:	f7fd fb9d 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802ba46:	f504 63e4 	add.w	r3, r4, #1824	@ 0x720
 802ba4a:	4629      	mov	r1, r5
 802ba4c:	4618      	mov	r0, r3
 802ba4e:	9316      	str	r3, [sp, #88]	@ 0x58
 802ba50:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802ba54:	f7fd fb94 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802ba58:	f204 734c 	addw	r3, r4, #1868	@ 0x74c
 802ba5c:	4629      	mov	r1, r5
 802ba5e:	4618      	mov	r0, r3
 802ba60:	9317      	str	r3, [sp, #92]	@ 0x5c
 802ba62:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802ba66:	f7fd fb8b 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802ba6a:	f504 63ef 	add.w	r3, r4, #1912	@ 0x778
 802ba6e:	4629      	mov	r1, r5
 802ba70:	4618      	mov	r0, r3
 802ba72:	930a      	str	r3, [sp, #40]	@ 0x28
 802ba74:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802ba78:	f005 fa92 	bl	8030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 802ba7c:	f204 73a4 	addw	r3, r4, #1956	@ 0x7a4
 802ba80:	4629      	mov	r1, r5
 802ba82:	4618      	mov	r0, r3
 802ba84:	9318      	str	r3, [sp, #96]	@ 0x60
 802ba86:	f8ad a08c 	strh.w	sl, [sp, #140]	@ 0x8c
 802ba8a:	f7fd fb79 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Box(), borderColor(0), borderSize(0)
 802ba8e:	f504 63fa 	add.w	r3, r4, #2000	@ 0x7d0
 802ba92:	4618      	mov	r0, r3
 802ba94:	931d      	str	r3, [sp, #116]	@ 0x74
 802ba96:	f7fd fa4d 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802ba9a:	4b2c      	ldr	r3, [pc, #176]	@ (802bb4c <_ZN22ScreenTestHomeViewBaseC1Ev+0x254>)
 802ba9c:	f8c4 37d0 	str.w	r3, [r4, #2000]	@ 0x7d0
 802baa0:	f604 0304 	addw	r3, r4, #2052	@ 0x804
 802baa4:	4618      	mov	r0, r3
 802baa6:	f8c4 67fc 	str.w	r6, [r4, #2044]	@ 0x7fc
 802baaa:	f8a4 6800 	strh.w	r6, [r4, #2048]	@ 0x800
 802baae:	9319      	str	r3, [sp, #100]	@ 0x64
 802bab0:	f7fd fbc4 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802bab4:	f504 6305 	add.w	r3, r4, #2128	@ 0x850
 802bab8:	4618      	mov	r0, r3
 802baba:	931a      	str	r3, [sp, #104]	@ 0x68
 802babc:	f7fd fbbe 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
    __background.setPosition(0, 0, 320, 240);
 802bac0:	23f0      	movs	r3, #240	@ 0xf0
 802bac2:	4632      	mov	r2, r6
 802bac4:	4638      	mov	r0, r7
 802bac6:	9300      	str	r3, [sp, #0]
 802bac8:	4631      	mov	r1, r6
 802baca:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802bace:	f7fd fa15 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802bad2:	f104 0b04 	add.w	fp, r4, #4
 802bad6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802bada:	4639      	mov	r1, r7
 802badc:	66a3      	str	r3, [r4, #104]	@ 0x68
 802bade:	4658      	mov	r0, fp
 802bae0:	f004 f918 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textVersion.setPosition(10, 178, 300, 24);
 802bae4:	2318      	movs	r3, #24
 802bae6:	22b2      	movs	r2, #178	@ 0xb2
 802bae8:	9300      	str	r3, [sp, #0]
 802baea:	210a      	movs	r1, #10
 802baec:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 802baf0:	4640      	mov	r0, r8
 802baf2:	f7fd fa03 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802baf6:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802bafa:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
        boundingArea = calculateBoundingArea();
 802bafe:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        linespace = space;
 802bb00:	f8a4 60a0 	strh.w	r6, [r4, #160]	@ 0xa0
        boundingArea = calculateBoundingArea();
 802bb04:	af1e      	add	r7, sp, #120	@ 0x78
 802bb06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802bb0a:	f8df 9058 	ldr.w	r9, [pc, #88]	@ 802bb64 <_ZN22ScreenTestHomeViewBaseC1Ev+0x26c>
 802bb0e:	4641      	mov	r1, r8
 802bb10:	4638      	mov	r0, r7
 802bb12:	4798      	blx	r3
 802bb14:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 802bb18:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 802bb1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802bb20:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(textVersionBuffer, TEXTVERSION_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8HN7).getText());
 802bb24:	f604 0a9c 	addw	sl, r4, #2204	@ 0x89c
 802bb28:	b92b      	cbnz	r3, 802bb36 <_ZN22ScreenTestHomeViewBaseC1Ev+0x23e>
 802bb2a:	4b09      	ldr	r3, [pc, #36]	@ (802bb50 <_ZN22ScreenTestHomeViewBaseC1Ev+0x258>)
 802bb2c:	4a09      	ldr	r2, [pc, #36]	@ (802bb54 <_ZN22ScreenTestHomeViewBaseC1Ev+0x25c>)
 802bb2e:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802bb30:	4809      	ldr	r0, [pc, #36]	@ (802bb58 <_ZN22ScreenTestHomeViewBaseC1Ev+0x260>)
 802bb32:	f010 fcf9 	bl	803c528 <__assert_func>
 802bb36:	4b09      	ldr	r3, [pc, #36]	@ (802bb5c <_ZN22ScreenTestHomeViewBaseC1Ev+0x264>)
 802bb38:	881b      	ldrh	r3, [r3, #0]
 802bb3a:	2b61      	cmp	r3, #97	@ 0x61
 802bb3c:	d814      	bhi.n	802bb68 <_ZN22ScreenTestHomeViewBaseC1Ev+0x270>
 802bb3e:	4b08      	ldr	r3, [pc, #32]	@ (802bb60 <_ZN22ScreenTestHomeViewBaseC1Ev+0x268>)
 802bb40:	4a04      	ldr	r2, [pc, #16]	@ (802bb54 <_ZN22ScreenTestHomeViewBaseC1Ev+0x25c>)
 802bb42:	2161      	movs	r1, #97	@ 0x61
 802bb44:	e7f4      	b.n	802bb30 <_ZN22ScreenTestHomeViewBaseC1Ev+0x238>
 802bb46:	bf00      	nop
 802bb48:	08042a88 	.word	0x08042a88
 802bb4c:	08043580 	.word	0x08043580
 802bb50:	08040d9d 	.word	0x08040d9d
 802bb54:	08040e9a 	.word	0x08040e9a
 802bb58:	08040e1a 	.word	0x08040e1a
 802bb5c:	2000b934 	.word	0x2000b934
 802bb60:	08040e5c 	.word	0x08040e5c
 802bb64:	2000b930 	.word	0x2000b930
        return texts->getText(typedTextId);
 802bb68:	4bd7      	ldr	r3, [pc, #860]	@ (802bec8 <_ZN22ScreenTestHomeViewBaseC1Ev+0x5d0>)
 802bb6a:	2161      	movs	r1, #97	@ 0x61
 802bb6c:	6818      	ldr	r0, [r3, #0]
 802bb6e:	f001 f9a1 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802bb72:	4ad6      	ldr	r2, [pc, #856]	@ (802becc <_ZN22ScreenTestHomeViewBaseC1Ev+0x5d4>)
 802bb74:	4603      	mov	r3, r0
 802bb76:	2118      	movs	r1, #24
 802bb78:	4650      	mov	r0, sl
 802bb7a:	f00c f979 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802bb7e:	236c      	movs	r3, #108	@ 0x6c
    textVersion.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DDD1));
 802bb80:	4640      	mov	r0, r8
 802bb82:	f8c4 a0b4 	str.w	sl, [r4, #180]	@ 0xb4
 802bb86:	4629      	mov	r1, r5
 802bb88:	f8df a34c 	ldr.w	sl, [pc, #844]	@ 802bed8 <_ZN22ScreenTestHomeViewBaseC1Ev+0x5e0>
 802bb8c:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802bb90:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802bb94:	f006 f810 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802bb98:	4641      	mov	r1, r8
 802bb9a:	4658      	mov	r0, fp
 802bb9c:	f004 f8ba 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    test_1.setXY(-1, 0);
 802bba0:	4632      	mov	r2, r6
 802bba2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802bba4:	f04f 31ff 	mov.w	r1, #4294967295
 802bba8:	f7fd faaa 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    test_1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 802bbac:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802bbae:	f8ad 608c 	strh.w	r6, [sp, #140]	@ 0x8c
 802bbb2:	4629      	mov	r1, r5
 802bbb4:	f005 f91d 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802bbb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802bbba:	4658      	mov	r0, fp
 802bbbc:	f004 f8aa 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 23);
 802bbc0:	2217      	movs	r2, #23
 802bbc2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802bbc4:	4631      	mov	r1, r6
 802bbc6:	f7fd fa9b 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802bbca:	2310      	movs	r3, #16
    image1.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_ID));
 802bbcc:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802bbce:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802bbd2:	4629      	mov	r1, r5
 802bbd4:	f005 f90d 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802bbd8:	2374      	movs	r3, #116	@ 0x74
 802bbda:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
 802bbde:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802bbe0:	4658      	mov	r0, fp
 802bbe2:	f004 f897 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    statusImage.setXY(-2, 52);
 802bbe6:	2234      	movs	r2, #52	@ 0x34
 802bbe8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802bbea:	f06f 0101 	mvn.w	r1, #1
 802bbee:	f7fd fa87 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802bbf2:	2315      	movs	r3, #21
    statusImage.setBitmap(touchgfx::Bitmap(BITMAP_TRUCKLATCHED_ID));
 802bbf4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802bbf6:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802bbfa:	4629      	mov	r1, r5
 802bbfc:	f005 f8f9 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802bc00:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802bc02:	4658      	mov	r0, fp
 802bc04:	f004 f886 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 802bc08:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802bc0a:	22d8      	movs	r2, #216	@ 0xd8
 802bc0c:	21f0      	movs	r1, #240	@ 0xf0
 802bc0e:	f04f 0803 	mov.w	r8, #3
 802bc12:	f7fd fa75 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802bc16:	462a      	mov	r2, r5
 802bc18:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802bc1a:	f8ad 8088 	strh.w	r8, [sp, #136]	@ 0x88
 802bc1e:	a922      	add	r1, sp, #136	@ 0x88
 802bc20:	f8ad 808c 	strh.w	r8, [sp, #140]	@ 0x8c
 802bc24:	f005 f817 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802bc28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802bc2a:	4658      	mov	r0, fp
 802bc2c:	f004 f872 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 802bc30:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802bc32:	22d8      	movs	r2, #216	@ 0xd8
 802bc34:	21a0      	movs	r1, #160	@ 0xa0
 802bc36:	f7fd fa63 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802bc3a:	462a      	mov	r2, r5
 802bc3c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802bc3e:	f8ad 8088 	strh.w	r8, [sp, #136]	@ 0x88
 802bc42:	a922      	add	r1, sp, #136	@ 0x88
 802bc44:	f8ad 808c 	strh.w	r8, [sp, #140]	@ 0x8c
 802bc48:	f005 f805 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802bc4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802bc4e:	4658      	mov	r0, fp
 802bc50:	f004 f860 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 802bc54:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802bc56:	22d8      	movs	r2, #216	@ 0xd8
 802bc58:	4631      	mov	r1, r6
 802bc5a:	f7fd fa51 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802bc5e:	462a      	mov	r2, r5
 802bc60:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802bc62:	f8ad 8088 	strh.w	r8, [sp, #136]	@ 0x88
 802bc66:	a922      	add	r1, sp, #136	@ 0x88
 802bc68:	f8ad 808c 	strh.w	r8, [sp, #140]	@ 0x8c
 802bc6c:	f004 fff3 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802bc70:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802bc72:	4658      	mov	r0, fp
 802bc74:	f004 f84e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 802bc78:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802bc7a:	22d8      	movs	r2, #216	@ 0xd8
 802bc7c:	2150      	movs	r1, #80	@ 0x50
 802bc7e:	f7fd fa3f 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802bc82:	462a      	mov	r2, r5
 802bc84:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802bc86:	f8ad 8088 	strh.w	r8, [sp, #136]	@ 0x88
 802bc8a:	a922      	add	r1, sp, #136	@ 0x88
 802bc8c:	f8ad 808c 	strh.w	r8, [sp, #140]	@ 0x8c
 802bc90:	f004 ffe1 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802bc94:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802bc96:	4658      	mov	r0, fp
 802bc98:	f004 f83c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3.setXY(174, 215);
 802bc9c:	9804      	ldr	r0, [sp, #16]
 802bc9e:	22d7      	movs	r2, #215	@ 0xd7
 802bca0:	21ae      	movs	r1, #174	@ 0xae
 802bca2:	f7fd fa2d 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802bca6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802bcaa:	9904      	ldr	r1, [sp, #16]
        color = newColor;
 802bcac:	f8c4 223c 	str.w	r2, [r4, #572]	@ 0x23c
        boundingArea = calculateBoundingArea();
 802bcb0:	4638      	mov	r0, r7
        linespace = space;
 802bcb2:	f8a4 6240 	strh.w	r6, [r4, #576]	@ 0x240
        boundingArea = calculateBoundingArea();
 802bcb6:	f005 fc31 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802bcba:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 802bcbe:	f504 7312 	add.w	r3, r4, #584	@ 0x248
 802bcc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802bcc6:	2362      	movs	r3, #98	@ 0x62
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8D9K));
 802bcc8:	9804      	ldr	r0, [sp, #16]
 802bcca:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802bcce:	4629      	mov	r1, r5
 802bcd0:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802bcd4:	f005 ff70 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802bcd8:	9904      	ldr	r1, [sp, #16]
 802bcda:	4658      	mov	r0, fp
 802bcdc:	f004 f81a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LATCH.setPosition(240, 215, 80, 23);
 802bce0:	2217      	movs	r2, #23
 802bce2:	9805      	ldr	r0, [sp, #20]
 802bce4:	9200      	str	r2, [sp, #0]
 802bce6:	2350      	movs	r3, #80	@ 0x50
 802bce8:	22d7      	movs	r2, #215	@ 0xd7
 802bcea:	21f0      	movs	r1, #240	@ 0xf0
 802bcec:	f7fd f906 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802bcf0:	f8d4 3254 	ldr.w	r3, [r4, #596]	@ 0x254
 802bcf4:	9905      	ldr	r1, [sp, #20]
 802bcf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        linespace = space;
 802bcfa:	f8a4 6288 	strh.w	r6, [r4, #648]	@ 0x288
        color = newColor;
 802bcfe:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 802bd02:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
        boundingArea = calculateBoundingArea();
 802bd06:	4638      	mov	r0, r7
 802bd08:	4798      	blx	r3
 802bd0a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 802bd0e:	f504 7324 	add.w	r3, r4, #656	@ 0x290
 802bd12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802bd16:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(LATCHBuffer, LATCH_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_TBV7).getText());
 802bd1a:	f604 08cc 	addw	r8, r4, #2252	@ 0x8cc
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	f43f af03 	beq.w	802bb2a <_ZN22ScreenTestHomeViewBaseC1Ev+0x232>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802bd24:	4a6a      	ldr	r2, [pc, #424]	@ (802bed0 <_ZN22ScreenTestHomeViewBaseC1Ev+0x5d8>)
 802bd26:	8813      	ldrh	r3, [r2, #0]
 802bd28:	2b53      	cmp	r3, #83	@ 0x53
 802bd2a:	f67f af08 	bls.w	802bb3e <_ZN22ScreenTestHomeViewBaseC1Ev+0x246>
        return texts->getText(typedTextId);
 802bd2e:	4b66      	ldr	r3, [pc, #408]	@ (802bec8 <_ZN22ScreenTestHomeViewBaseC1Ev+0x5d0>)
 802bd30:	2153      	movs	r1, #83	@ 0x53
 802bd32:	6818      	ldr	r0, [r3, #0]
 802bd34:	f001 f8be 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802bd38:	4a64      	ldr	r2, [pc, #400]	@ (802becc <_ZN22ScreenTestHomeViewBaseC1Ev+0x5d4>)
 802bd3a:	4603      	mov	r3, r0
 802bd3c:	210a      	movs	r1, #10
 802bd3e:	4640      	mov	r0, r8
 802bd40:	f00c f896 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802bd44:	235b      	movs	r3, #91	@ 0x5b
    LATCH.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LLVS));
 802bd46:	9805      	ldr	r0, [sp, #20]
 802bd48:	f8c4 829c 	str.w	r8, [r4, #668]	@ 0x29c
 802bd4c:	4629      	mov	r1, r5
 802bd4e:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802bd52:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802bd56:	f005 ff2f 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802bd5a:	9905      	ldr	r1, [sp, #20]
 802bd5c:	4658      	mov	r0, fp
 802bd5e:	f003 ffd9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(99, 215);
 802bd62:	22d7      	movs	r2, #215	@ 0xd7
 802bd64:	9806      	ldr	r0, [sp, #24]
 802bd66:	2163      	movs	r1, #99	@ 0x63
 802bd68:	f7fd f9ca 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802bd6c:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802bd70:	4638      	mov	r0, r7
        color = newColor;
 802bd72:	f8c4 12d0 	str.w	r1, [r4, #720]	@ 0x2d0
        linespace = space;
 802bd76:	f8a4 62d4 	strh.w	r6, [r4, #724]	@ 0x2d4
        boundingArea = calculateBoundingArea();
 802bd7a:	9906      	ldr	r1, [sp, #24]
 802bd7c:	f005 fbce 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802bd80:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 802bd84:	f504 7337 	add.w	r3, r4, #732	@ 0x2dc
 802bd88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802bd8c:	236d      	movs	r3, #109	@ 0x6d
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z8CI));
 802bd8e:	9806      	ldr	r0, [sp, #24]
 802bd90:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802bd94:	4629      	mov	r1, r5
 802bd96:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802bd9a:	f005 ff0d 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802bd9e:	9906      	ldr	r1, [sp, #24]
 802bda0:	4658      	mov	r0, fp
 802bda2:	f003 ffb7 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5.setXY(10, 23);
 802bda6:	2217      	movs	r2, #23
 802bda8:	9807      	ldr	r0, [sp, #28]
 802bdaa:	210a      	movs	r1, #10
 802bdac:	f7fd f9a8 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802bdb0:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802bdb4:	4638      	mov	r0, r7
        color = newColor;
 802bdb6:	f8c4 1318 	str.w	r1, [r4, #792]	@ 0x318
        linespace = space;
 802bdba:	f8a4 631c 	strh.w	r6, [r4, #796]	@ 0x31c
        boundingArea = calculateBoundingArea();
 802bdbe:	9907      	ldr	r1, [sp, #28]
 802bdc0:	f005 fbac 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802bdc4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 802bdc8:	f504 7349 	add.w	r3, r4, #804	@ 0x324
 802bdcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802bdd0:	235a      	movs	r3, #90	@ 0x5a
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1Y1W));
 802bdd2:	9807      	ldr	r0, [sp, #28]
 802bdd4:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802bdd8:	4629      	mov	r1, r5
 802bdda:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802bdde:	f005 feeb 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802bde2:	9907      	ldr	r1, [sp, #28]
 802bde4:	4658      	mov	r0, fp
 802bde6:	f003 ff95 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    imageProgressRollPos.setProgressIndicatorPosition(0, 0, 100, 10);
 802bdea:	f04f 080a 	mov.w	r8, #10
    imageProgressRollPos.setXY(160, 183);
 802bdee:	9802      	ldr	r0, [sp, #8]
 802bdf0:	22b7      	movs	r2, #183	@ 0xb7
 802bdf2:	21a0      	movs	r1, #160	@ 0xa0
 802bdf4:	f7fd f984 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    imageProgressRollPos.setProgressIndicatorPosition(0, 0, 100, 10);
 802bdf8:	9802      	ldr	r0, [sp, #8]
 802bdfa:	f8cd 8000 	str.w	r8, [sp]
 802bdfe:	2364      	movs	r3, #100	@ 0x64
 802be00:	4632      	mov	r2, r6
 802be02:	4631      	mov	r1, r6
 802be04:	f004 fc78 	bl	80306f8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    imageProgressRollPos.setRange(64, 128);
 802be08:	4633      	mov	r3, r6
 802be0a:	2280      	movs	r2, #128	@ 0x80
 802be0c:	9802      	ldr	r0, [sp, #8]
 802be0e:	9600      	str	r6, [sp, #0]
 802be10:	2140      	movs	r1, #64	@ 0x40
 802be12:	f004 fab9 	bl	8030388 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    imageProgressRollPos.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 802be16:	9802      	ldr	r0, [sp, #8]
 802be18:	4631      	mov	r1, r6
 802be1a:	f004 fa4d 	bl	80302b8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 802be1e:	2701      	movs	r7, #1
    imageProgressRollPos.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ID));
 802be20:	9802      	ldr	r0, [sp, #8]
 802be22:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
 802be26:	4629      	mov	r1, r5
 802be28:	f004 fbc0 	bl	80305ac <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    imageProgressRollPos.setBitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ACTION_ID);
 802be2c:	9802      	ldr	r0, [sp, #8]
 802be2e:	2102      	movs	r1, #2
 802be30:	f004 fc3a 	bl	80306a8 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    imageProgressRollPos.setValue(64);
 802be34:	9802      	ldr	r0, [sp, #8]
 802be36:	2140      	movs	r1, #64	@ 0x40
 802be38:	f004 fc78 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
    imageProgressRollPos.setAnchorAtZero(true);
 802be3c:	4639      	mov	r1, r7
 802be3e:	9802      	ldr	r0, [sp, #8]
 802be40:	f004 fc16 	bl	8030670 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
 802be44:	9902      	ldr	r1, [sp, #8]
 802be46:	4658      	mov	r0, fp
 802be48:	f003 ff64 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    imageProgressRollNeg.setXY(58, 183);
 802be4c:	9803      	ldr	r0, [sp, #12]
 802be4e:	22b7      	movs	r2, #183	@ 0xb7
 802be50:	213a      	movs	r1, #58	@ 0x3a
 802be52:	f7fd f955 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    imageProgressRollNeg.setProgressIndicatorPosition(0, 0, 100, 10);
 802be56:	9803      	ldr	r0, [sp, #12]
 802be58:	f8cd 8000 	str.w	r8, [sp]
 802be5c:	2364      	movs	r3, #100	@ 0x64
 802be5e:	4632      	mov	r2, r6
 802be60:	4631      	mov	r1, r6
 802be62:	f004 fc49 	bl	80306f8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    imageProgressRollNeg.setRange(64, 128);
 802be66:	4633      	mov	r3, r6
 802be68:	2280      	movs	r2, #128	@ 0x80
 802be6a:	9803      	ldr	r0, [sp, #12]
 802be6c:	9600      	str	r6, [sp, #0]
 802be6e:	2140      	movs	r1, #64	@ 0x40
 802be70:	f004 fa8a 	bl	8030388 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    imageProgressRollNeg.setDirection(touchgfx::AbstractDirectionProgress::LEFT);
 802be74:	4639      	mov	r1, r7
 802be76:	9803      	ldr	r0, [sp, #12]
 802be78:	f004 fa1e 	bl	80302b8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    imageProgressRollNeg.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ID));
 802be7c:	9803      	ldr	r0, [sp, #12]
 802be7e:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
 802be82:	4629      	mov	r1, r5
 802be84:	f004 fb92 	bl	80305ac <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    imageProgressRollNeg.setBitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ACTION_ID);
 802be88:	9803      	ldr	r0, [sp, #12]
 802be8a:	2102      	movs	r1, #2
 802be8c:	f004 fc0c 	bl	80306a8 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    imageProgressRollNeg.setValue(64);
 802be90:	9803      	ldr	r0, [sp, #12]
 802be92:	2140      	movs	r1, #64	@ 0x40
 802be94:	f004 fc4a 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
    imageProgressRollNeg.setAnchorAtZero(true);
 802be98:	4639      	mov	r1, r7
 802be9a:	9803      	ldr	r0, [sp, #12]
        color = newColor;
 802be9c:	4f0d      	ldr	r7, [pc, #52]	@ (802bed4 <_ZN22ScreenTestHomeViewBaseC1Ev+0x5dc>)
 802be9e:	f004 fbe7 	bl	8030670 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
 802bea2:	9903      	ldr	r1, [sp, #12]
 802bea4:	4658      	mov	r0, fp
 802bea6:	f003 ff35 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box6.setPosition(0, 0, 320, 23);
 802beaa:	2117      	movs	r1, #23
 802beac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802beb0:	4632      	mov	r2, r6
 802beb2:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802beb4:	9100      	str	r1, [sp, #0]
 802beb6:	4631      	mov	r1, r6
 802beb8:	f7fd f820 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802bebc:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802bec0:	f8c4 1588 	str.w	r1, [r4, #1416]	@ 0x588
 802bec4:	4658      	mov	r0, fp
 802bec6:	e009      	b.n	802bedc <_ZN22ScreenTestHomeViewBaseC1Ev+0x5e4>
 802bec8:	2000b93c 	.word	0x2000b93c
 802becc:	08040ee5 	.word	0x08040ee5
 802bed0:	2000b934 	.word	0x2000b934
 802bed4:	fffafafa 	.word	0xfffafafa
 802bed8:	08042200 	.word	0x08042200
 802bedc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802bede:	f003 ff19 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7.setPosition(155, 182, 9, 11);
 802bee2:	230b      	movs	r3, #11
 802bee4:	22b6      	movs	r2, #182	@ 0xb6
 802bee6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802bee8:	9300      	str	r3, [sp, #0]
 802beea:	219b      	movs	r1, #155	@ 0x9b
 802beec:	2309      	movs	r3, #9
 802beee:	f7fd f805 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802bef2:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802bef6:	f8c4 15b4 	str.w	r1, [r4, #1460]	@ 0x5b4
 802befa:	4658      	mov	r0, fp
 802befc:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802befe:	f003 ff09 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    testtext.setPosition(24, -1, 215, 24);
 802bf02:	2118      	movs	r1, #24
 802bf04:	9100      	str	r1, [sp, #0]
 802bf06:	23d7      	movs	r3, #215	@ 0xd7
 802bf08:	f04f 32ff 	mov.w	r2, #4294967295
 802bf0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802bf0e:	f7fc fff5 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802bf12:	f8c4 75e8 	str.w	r7, [r4, #1512]	@ 0x5e8
        linespace = space;
 802bf16:	f8a4 65ec 	strh.w	r6, [r4, #1516]	@ 0x5ec
        return TextArea::BoundingArea();
 802bf1a:	4628      	mov	r0, r5
 802bf1c:	f7fd f966 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802bf20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802bf24:	f204 53f4 	addw	r3, r4, #1524	@ 0x5f4
 802bf28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802bf2c:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(testtextBuffer, TESTTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZLUT).getText());
 802bf30:	f504 680e 	add.w	r8, r4, #2272	@ 0x8e0
 802bf34:	2b00      	cmp	r3, #0
 802bf36:	f43f adf8 	beq.w	802bb2a <_ZN22ScreenTestHomeViewBaseC1Ev+0x232>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802bf3a:	4ad5      	ldr	r2, [pc, #852]	@ (802c290 <_ZN22ScreenTestHomeViewBaseC1Ev+0x998>)
 802bf3c:	8813      	ldrh	r3, [r2, #0]
 802bf3e:	2b58      	cmp	r3, #88	@ 0x58
 802bf40:	f67f adfd 	bls.w	802bb3e <_ZN22ScreenTestHomeViewBaseC1Ev+0x246>
        return texts->getText(typedTextId);
 802bf44:	4bd3      	ldr	r3, [pc, #844]	@ (802c294 <_ZN22ScreenTestHomeViewBaseC1Ev+0x99c>)
 802bf46:	2158      	movs	r1, #88	@ 0x58
 802bf48:	6818      	ldr	r0, [r3, #0]
 802bf4a:	f000 ffb3 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802bf4e:	4ad2      	ldr	r2, [pc, #840]	@ (802c298 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9a0>)
 802bf50:	4603      	mov	r3, r0
 802bf52:	2119      	movs	r1, #25
 802bf54:	4640      	mov	r0, r8
 802bf56:	f00b ff8b 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802bf5a:	2359      	movs	r3, #89	@ 0x59
    testtext.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DG0F));
 802bf5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
        wc1 = value;
 802bf5e:	f8c4 8600 	str.w	r8, [r4, #1536]	@ 0x600
 802bf62:	4629      	mov	r1, r5
 802bf64:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802bf68:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802bf6c:	f005 fe24 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802bf70:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802bf72:	4658      	mov	r0, fp
 802bf74:	f003 fece 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PTOSTATUSTXT.setPosition(239, -1, 86, 23);
 802bf78:	2117      	movs	r1, #23
 802bf7a:	2356      	movs	r3, #86	@ 0x56
 802bf7c:	f04f 32ff 	mov.w	r2, #4294967295
 802bf80:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802bf82:	9100      	str	r1, [sp, #0]
 802bf84:	21ef      	movs	r1, #239	@ 0xef
 802bf86:	f7fc ffb9 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802bf8a:	f8c4 7634 	str.w	r7, [r4, #1588]	@ 0x634
        linespace = space;
 802bf8e:	f8a4 6638 	strh.w	r6, [r4, #1592]	@ 0x638
        return TextArea::BoundingArea();
 802bf92:	4628      	mov	r0, r5
 802bf94:	f7fd f92a 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802bf98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802bf9c:	f504 63c8 	add.w	r3, r4, #1600	@ 0x640
 802bfa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802bfa4:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(PTOSTATUSTXTBuffer, PTOSTATUSTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_A54D).getText());
 802bfa8:	f604 1712 	addw	r7, r4, #2322	@ 0x912
 802bfac:	2b00      	cmp	r3, #0
 802bfae:	f43f adbc 	beq.w	802bb2a <_ZN22ScreenTestHomeViewBaseC1Ev+0x232>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802bfb2:	4ab7      	ldr	r2, [pc, #732]	@ (802c290 <_ZN22ScreenTestHomeViewBaseC1Ev+0x998>)
 802bfb4:	8813      	ldrh	r3, [r2, #0]
 802bfb6:	2b54      	cmp	r3, #84	@ 0x54
 802bfb8:	f67f adc1 	bls.w	802bb3e <_ZN22ScreenTestHomeViewBaseC1Ev+0x246>
        return texts->getText(typedTextId);
 802bfbc:	4bb5      	ldr	r3, [pc, #724]	@ (802c294 <_ZN22ScreenTestHomeViewBaseC1Ev+0x99c>)
 802bfbe:	2154      	movs	r1, #84	@ 0x54
 802bfc0:	6818      	ldr	r0, [r3, #0]
 802bfc2:	f000 ff77 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802bfc6:	4ab4      	ldr	r2, [pc, #720]	@ (802c298 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9a0>)
 802bfc8:	4603      	mov	r3, r0
 802bfca:	2119      	movs	r1, #25
 802bfcc:	4638      	mov	r0, r7
 802bfce:	f00b ff4f 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802bfd2:	2355      	movs	r3, #85	@ 0x55
    PTOSTATUSTXT.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W9L5));
 802bfd4:	4629      	mov	r1, r5
 802bfd6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
        wc1 = value;
 802bfd8:	f8c4 764c 	str.w	r7, [r4, #1612]	@ 0x64c
 802bfdc:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802bfe0:	f8cd a08c 	str.w	sl, [sp, #140]	@ 0x8c
 802bfe4:	f005 fde8 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802bfe8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802bfea:	4658      	mov	r0, fp
 802bfec:	f003 fe92 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textRoll.setPosition(72, 192, 100, 24);
 802bff0:	2318      	movs	r3, #24
 802bff2:	22c0      	movs	r2, #192	@ 0xc0
 802bff4:	2148      	movs	r1, #72	@ 0x48
 802bff6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802bff8:	9300      	str	r3, [sp, #0]
 802bffa:	2364      	movs	r3, #100	@ 0x64
 802bffc:	f7fc ff7e 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802c000:	f04f 33ff 	mov.w	r3, #4294967295
 802c004:	f8c4 3680 	str.w	r3, [r4, #1664]	@ 0x680
        return TextArea::BoundingArea();
 802c008:	4628      	mov	r0, r5
        linespace = space;
 802c00a:	f8a4 6684 	strh.w	r6, [r4, #1668]	@ 0x684
 802c00e:	f7fd f8ed 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802c012:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802c016:	f204 638c 	addw	r3, r4, #1676	@ 0x68c
 802c01a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802c01e:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZUJZ).getText());
 802c022:	f604 1544 	addw	r5, r4, #2372	@ 0x944
 802c026:	2b00      	cmp	r3, #0
 802c028:	f43f ad7f 	beq.w	802bb2a <_ZN22ScreenTestHomeViewBaseC1Ev+0x232>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802c02c:	4a98      	ldr	r2, [pc, #608]	@ (802c290 <_ZN22ScreenTestHomeViewBaseC1Ev+0x998>)
 802c02e:	8813      	ldrh	r3, [r2, #0]
 802c030:	2b56      	cmp	r3, #86	@ 0x56
 802c032:	f67f ad84 	bls.w	802bb3e <_ZN22ScreenTestHomeViewBaseC1Ev+0x246>
        return texts->getText(typedTextId);
 802c036:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 802c294 <_ZN22ScreenTestHomeViewBaseC1Ev+0x99c>
        : typedTextId(id)
 802c03a:	4f98      	ldr	r7, [pc, #608]	@ (802c29c <_ZN22ScreenTestHomeViewBaseC1Ev+0x9a4>)
        return texts->getText(typedTextId);
 802c03c:	f8da 0000 	ldr.w	r0, [sl]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802c040:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 802c2a4 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9ac>
        return texts->getText(typedTextId);
 802c044:	2156      	movs	r1, #86	@ 0x56
 802c046:	f000 ff35 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802c04a:	4a93      	ldr	r2, [pc, #588]	@ (802c298 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9a0>)
 802c04c:	4603      	mov	r3, r0
 802c04e:	210c      	movs	r1, #12
 802c050:	4628      	mov	r0, r5
 802c052:	f00b ff0d 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 802c056:	f8c4 5698 	str.w	r5, [r4, #1688]	@ 0x698
    textRoll.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GT5V));
 802c05a:	ad23      	add	r5, sp, #140	@ 0x8c
        : typedTextId(id)
 802c05c:	2357      	movs	r3, #87	@ 0x57
 802c05e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802c060:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802c064:	4629      	mov	r1, r5
 802c066:	9723      	str	r7, [sp, #140]	@ 0x8c
 802c068:	f005 fda6 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c06c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802c06e:	4658      	mov	r0, fp
 802c070:	f003 fe50 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LOCKED.setPosition(288, 143, 24, 24);
 802c074:	2618      	movs	r6, #24
    LOCKED.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_LOCK_48_44_E84141_SVG_ID));
 802c076:	9808      	ldr	r0, [sp, #32]
 802c078:	f04f 0805 	mov.w	r8, #5
 802c07c:	4629      	mov	r1, r5
 802c07e:	f8ad 808c 	strh.w	r8, [sp, #140]	@ 0x8c
 802c082:	f004 feb6 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    LOCKED.setPosition(288, 143, 24, 24);
 802c086:	4633      	mov	r3, r6
 802c088:	228f      	movs	r2, #143	@ 0x8f
 802c08a:	9808      	ldr	r0, [sp, #32]
 802c08c:	9600      	str	r6, [sp, #0]
 802c08e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 802c092:	f7fc ff33 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
    LOCKED.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 802c096:	9808      	ldr	r0, [sp, #32]
 802c098:	2100      	movs	r1, #0
 802c09a:	f004 ff41 	bl	8030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 802c09e:	9908      	ldr	r1, [sp, #32]
 802c0a0:	4658      	mov	r0, fp
 802c0a2:	f003 fe37 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802c0a6:	2306      	movs	r3, #6
    UNLOCKED.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_LOCK_OPEN_48_44_0AA34A_SVG_ID));
 802c0a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c0aa:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802c0ae:	4629      	mov	r1, r5
 802c0b0:	f004 fe9f 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    UNLOCKED.setPosition(288, 142, 24, 24);
 802c0b4:	4633      	mov	r3, r6
 802c0b6:	228e      	movs	r2, #142	@ 0x8e
 802c0b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c0ba:	9600      	str	r6, [sp, #0]
 802c0bc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 802c0c0:	f7fc ff1c 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802c0c4:	2600      	movs	r6, #0
    UNLOCKED.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 802c0c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802c0c8:	2100      	movs	r1, #0
 802c0ca:	f004 ff29 	bl	8030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 802c0ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802c0d0:	f884 66ed 	strb.w	r6, [r4, #1773]	@ 0x6ed
 802c0d4:	4658      	mov	r0, fp
 802c0d6:	f003 fe1d 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PTOStatusON.setXY(300, 2);
 802c0da:	2202      	movs	r2, #2
 802c0dc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802c0de:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 802c0e2:	f7fd f80d 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802c0e6:	2307      	movs	r3, #7
    PTOStatusON.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_20_20_0AA34A_SVG_ID));
 802c0e8:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802c0ea:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802c0ee:	4629      	mov	r1, r5
 802c0f0:	f004 fe7f 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c0f4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802c0f6:	4658      	mov	r0, fp
 802c0f8:	f003 fe0c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PTOStatusOFF.setXY(300, 2);
 802c0fc:	2202      	movs	r2, #2
 802c0fe:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802c100:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 802c104:	f7fc fffc 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802c108:	2308      	movs	r3, #8
    PTOStatusOFF.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_20_20_E84141_SVG_ID));
 802c10a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802c10c:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802c110:	4629      	mov	r1, r5
 802c112:	f004 fe6e 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c116:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802c118:	4658      	mov	r0, fp
 802c11a:	f003 fdfb 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ALARM.setXY(2, 1);
 802c11e:	2201      	movs	r2, #1
 802c120:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802c122:	2102      	movs	r1, #2
 802c124:	f7fc ffec 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802c128:	2309      	movs	r3, #9
    ALARM.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ALERT_WARNING_AMBER_20_20_CCC041_SVG_ID));
 802c12a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802c12c:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802c130:	4629      	mov	r1, r5
 802c132:	f004 fe5e 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c136:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802c138:	4658      	mov	r0, fp
 802c13a:	f003 fdeb 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802c13e:	230c      	movs	r3, #12
    next.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_EAST_50_50_000000_SVG_ID));
 802c140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802c142:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802c146:	4629      	mov	r1, r5
 802c148:	f004 fe53 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    next.setPosition(20, 215, 37, 27);
 802c14c:	231b      	movs	r3, #27
 802c14e:	22d7      	movs	r2, #215	@ 0xd7
 802c150:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802c152:	9300      	str	r3, [sp, #0]
 802c154:	2114      	movs	r1, #20
 802c156:	2325      	movs	r3, #37	@ 0x25
 802c158:	f7fc fed0 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
    next.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 802c15c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802c15e:	4631      	mov	r1, r6
 802c160:	f004 fede 	bl	8030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 802c164:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802c166:	4658      	mov	r0, fp
 802c168:	f003 fdd4 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MOVING.setXY(140, 70);
 802c16c:	2246      	movs	r2, #70	@ 0x46
 802c16e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802c170:	218c      	movs	r1, #140	@ 0x8c
 802c172:	f7fc ffc5 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802c176:	f04f 030f 	mov.w	r3, #15
    MOVING.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NOTIFICATION_SYNC_PROBLEM_50_50_000000_SVG_ID));
 802c17a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802c17c:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 802c180:	4629      	mov	r1, r5
 802c182:	f004 fe36 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c186:	9918      	ldr	r1, [sp, #96]	@ 0x60
 802c188:	4658      	mov	r0, fp
 802c18a:	f003 fdc3 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Alarmpopup.setPosition(10, 35, 300, 102);
 802c18e:	2366      	movs	r3, #102	@ 0x66
 802c190:	2223      	movs	r2, #35	@ 0x23
 802c192:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802c194:	9300      	str	r3, [sp, #0]
 802c196:	210a      	movs	r1, #10
 802c198:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 802c19c:	f7fc feae 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802c1a0:	f04f 33ff 	mov.w	r3, #4294967295
 802c1a4:	f8c4 37f8 	str.w	r3, [r4, #2040]	@ 0x7f8
        borderColor = colorBorder;
 802c1a8:	4b3d      	ldr	r3, [pc, #244]	@ (802c2a0 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9a8>)
 802c1aa:	f8c4 37fc 	str.w	r3, [r4, #2044]	@ 0x7fc
        alpha = newAlpha;
 802c1ae:	23ac      	movs	r3, #172	@ 0xac
 802c1b0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802c1b2:	f884 37f6 	strb.w	r3, [r4, #2038]	@ 0x7f6
 802c1b6:	4658      	mov	r0, fp
        borderSize = size;
 802c1b8:	f8a4 8800 	strh.w	r8, [r4, #2048]	@ 0x800
 802c1bc:	f003 fdaa 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Alarmtitletext.setPosition(17, 38, 286, 22);
 802c1c0:	2316      	movs	r3, #22
 802c1c2:	2111      	movs	r1, #17
 802c1c4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802c1c6:	9300      	str	r3, [sp, #0]
 802c1c8:	2226      	movs	r2, #38	@ 0x26
 802c1ca:	f44f 738f 	mov.w	r3, #286	@ 0x11e
 802c1ce:	f7fc fe95 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802c1d2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 802c1d6:	f8c4 2834 	str.w	r2, [r4, #2100]	@ 0x834
        linespace = space;
 802c1da:	f8a4 6838 	strh.w	r6, [r4, #2104]	@ 0x838
        return TextArea::BoundingArea();
 802c1de:	4628      	mov	r0, r5
 802c1e0:	f7fd f804 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802c1e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802c1e8:	f504 6304 	add.w	r3, r4, #2112	@ 0x840
 802c1ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802c1f0:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(AlarmtitletextBuffer, ALARMTITLETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_E9GQ).getText());
 802c1f4:	f604 125c 	addw	r2, r4, #2396	@ 0x95c
 802c1f8:	9202      	str	r2, [sp, #8]
 802c1fa:	2b00      	cmp	r3, #0
 802c1fc:	f43f ac95 	beq.w	802bb2a <_ZN22ScreenTestHomeViewBaseC1Ev+0x232>
        return typedTextId < numberOfTypedTexts;
 802c200:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 802c290 <_ZN22ScreenTestHomeViewBaseC1Ev+0x998>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802c204:	f8b8 3000 	ldrh.w	r3, [r8]
 802c208:	2b10      	cmp	r3, #16
 802c20a:	f67f ac98 	bls.w	802bb3e <_ZN22ScreenTestHomeViewBaseC1Ev+0x246>
        return texts->getText(typedTextId);
 802c20e:	2110      	movs	r1, #16
 802c210:	f8da 0000 	ldr.w	r0, [sl]
 802c214:	f000 fe4e 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802c218:	4a1f      	ldr	r2, [pc, #124]	@ (802c298 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9a0>)
 802c21a:	4603      	mov	r3, r0
 802c21c:	212d      	movs	r1, #45	@ 0x2d
 802c21e:	9802      	ldr	r0, [sp, #8]
 802c220:	f00b fe26 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 802c224:	9b02      	ldr	r3, [sp, #8]
 802c226:	f8c4 384c 	str.w	r3, [r4, #2124]	@ 0x84c
        : typedTextId(id)
 802c22a:	f04f 0211 	mov.w	r2, #17
    Alarmtitletext.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N949));
 802c22e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802c230:	f8ad 2090 	strh.w	r2, [sp, #144]	@ 0x90
 802c234:	4629      	mov	r1, r5
 802c236:	9723      	str	r7, [sp, #140]	@ 0x8c
 802c238:	f005 fcbe 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c23c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 802c23e:	4658      	mov	r0, fp
 802c240:	f003 fd68 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Alarmdesctext.setPosition(17, 60, 286, 77);
 802c244:	234d      	movs	r3, #77	@ 0x4d
 802c246:	2111      	movs	r1, #17
 802c248:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802c24a:	9300      	str	r3, [sp, #0]
 802c24c:	223c      	movs	r2, #60	@ 0x3c
 802c24e:	f44f 738f 	mov.w	r3, #286	@ 0x11e
 802c252:	f7fc fe53 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802c256:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 802c25a:	f8c4 2880 	str.w	r2, [r4, #2176]	@ 0x880
        linespace = space;
 802c25e:	f8a4 6884 	strh.w	r6, [r4, #2180]	@ 0x884
        return TextArea::BoundingArea();
 802c262:	4628      	mov	r0, r5
 802c264:	f7fc ffc2 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802c268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802c26c:	f604 038c 	addw	r3, r4, #2188	@ 0x88c
 802c270:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802c274:	f8d9 3000 	ldr.w	r3, [r9]
    Unicode::snprintf(AlarmdesctextBuffer, ALARMDESCTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_J6S6).getText());
 802c278:	f604 16b6 	addw	r6, r4, #2486	@ 0x9b6
 802c27c:	2b00      	cmp	r3, #0
 802c27e:	f43f ac54 	beq.w	802bb2a <_ZN22ScreenTestHomeViewBaseC1Ev+0x232>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802c282:	f8b8 3000 	ldrh.w	r3, [r8]
 802c286:	2b0e      	cmp	r3, #14
 802c288:	f67f ac59 	bls.w	802bb3e <_ZN22ScreenTestHomeViewBaseC1Ev+0x246>
 802c28c:	e00c      	b.n	802c2a8 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9b0>
 802c28e:	bf00      	nop
 802c290:	2000b934 	.word	0x2000b934
 802c294:	2000b93c 	.word	0x2000b93c
 802c298:	08040ee5 	.word	0x08040ee5
 802c29c:	08042200 	.word	0x08042200
 802c2a0:	ffff0000 	.word	0xffff0000
 802c2a4:	2000b930 	.word	0x2000b930
        return texts->getText(typedTextId);
 802c2a8:	f8da 0000 	ldr.w	r0, [sl]
 802c2ac:	210e      	movs	r1, #14
 802c2ae:	f000 fe01 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802c2b2:	4a0c      	ldr	r2, [pc, #48]	@ (802c2e4 <_ZN22ScreenTestHomeViewBaseC1Ev+0x9ec>)
 802c2b4:	4603      	mov	r3, r0
 802c2b6:	2196      	movs	r1, #150	@ 0x96
 802c2b8:	4630      	mov	r0, r6
 802c2ba:	f00b fdd9 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802c2be:	f04f 030f 	mov.w	r3, #15
    Alarmdesctext.setTypedText(touchgfx::TypedText(T___SINGLEUSE_H2SB));
 802c2c2:	981a      	ldr	r0, [sp, #104]	@ 0x68
        wc1 = value;
 802c2c4:	f8c4 6898 	str.w	r6, [r4, #2200]	@ 0x898
 802c2c8:	4629      	mov	r1, r5
 802c2ca:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
 802c2ce:	9723      	str	r7, [sp, #140]	@ 0x8c
 802c2d0:	f005 fc72 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c2d4:	4658      	mov	r0, fp
 802c2d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802c2d8:	f003 fd1c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 802c2dc:	4620      	mov	r0, r4
 802c2de:	b027      	add	sp, #156	@ 0x9c
 802c2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c2e4:	08040ee5 	.word	0x08040ee5

0802c2e8 <_ZN21ScreenTrailerViewBase13buttonHandlerEh>:
     * Custom Actions
     */
    virtual void buttonHandler(uint8_t value)
    {
        // Override and implement this function in Screen1
    }
 802c2e8:	4770      	bx	lr

0802c2ea <_ZN21ScreenTrailerViewBase17GoToCANtestScreenEv>:
    
    virtual void GoToCANtestScreen()
    {
        // Override and implement this function in Screen1
    }
 802c2ea:	4770      	bx	lr

0802c2ec <_ZN21ScreenTrailerViewBase21GoToOutputsTestScreenEv>:
    
    virtual void GoToOutputsTestScreen()
    {
        // Override and implement this function in Screen1
    }
 802c2ec:	4770      	bx	lr

0802c2ee <_ZN21ScreenTrailerViewBase20GoToInputsTestScreenEv>:
    
    virtual void GoToInputsTestScreen()
    {
        // Override and implement this function in Screen1
    }
 802c2ee:	4770      	bx	lr

0802c2f0 <_ZN21ScreenTrailerViewBase14GoToHomeScreenEv>:
    
    virtual void GoToHomeScreen()
    {
        // Override and implement this function in Screen1
    }
 802c2f0:	4770      	bx	lr

0802c2f2 <_ZN21ScreenTrailerViewBase17GoToLCDtestScreenEv>:
    
    virtual void GoToLCDtestScreen()
    {
        // Override and implement this function in Screen1
    }
 802c2f2:	4770      	bx	lr

0802c2f4 <_ZN21ScreenTrailerViewBaseD1Ev>:
}

ScreenTrailerViewBase::~ScreenTrailerViewBase()
{

}
 802c2f4:	4770      	bx	lr

0802c2f6 <_ZN21ScreenTrailerViewBase11setupScreenEv>:

void ScreenTrailerViewBase::setupScreen()
{

}
 802c2f6:	4770      	bx	lr

0802c2f8 <_ZN21ScreenTrailerViewBaseD0Ev>:
ScreenTrailerViewBase::~ScreenTrailerViewBase()
 802c2f8:	b510      	push	{r4, lr}
}
 802c2fa:	f640 3114 	movw	r1, #2836	@ 0xb14
ScreenTrailerViewBase::~ScreenTrailerViewBase()
 802c2fe:	4604      	mov	r4, r0
}
 802c300:	f010 f8f3 	bl	803c4ea <_ZdlPvj>
 802c304:	4620      	mov	r0, r4
 802c306:	bd10      	pop	{r4, pc}

0802c308 <_ZN21ScreenTrailerViewBase14handleKeyEventEh>:

void ScreenTrailerViewBase::handleKeyEvent(uint8_t key)
{
 802c308:	b510      	push	{r4, lr}
    if(0 == key)
 802c30a:	b929      	cbnz	r1, 802c318 <_ZN21ScreenTrailerViewBase14handleKeyEventEh+0x10>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802c30c:	f008 fcfe 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        //When hardware button 3 clicked call buttonHandler on ScreenTrailer
        //Call buttonHandler
        buttonHandler(3);
    
    }
}
 802c310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        application().gotoDiagnosticScreenNoTransition();
 802c314:	f7fb bf1e 	b.w	8028154 <_ZN23FrontendApplicationBase32gotoDiagnosticScreenNoTransitionEv>
    if(3 == key)
 802c318:	2903      	cmp	r1, #3
 802c31a:	d104      	bne.n	802c326 <_ZN21ScreenTrailerViewBase14handleKeyEventEh+0x1e>
        buttonHandler(3);
 802c31c:	6803      	ldr	r3, [r0, #0]
}
 802c31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        buttonHandler(3);
 802c322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c324:	4718      	bx	r3
}
 802c326:	bd10      	pop	{r4, pc}

0802c328 <_ZN21ScreenTrailerViewBaseC1Ev>:
ScreenTrailerViewBase::ScreenTrailerViewBase()
 802c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c32c:	4604      	mov	r4, r0
 802c32e:	b0a9      	sub	sp, #164	@ 0xa4
 802c330:	46a0      	mov	r8, r4
 802c332:	f00a f8ed 	bl	8036510 <_ZN8touchgfx6ScreenC1Ev>
 802c336:	2700      	movs	r7, #0
 802c338:	4b93      	ldr	r3, [pc, #588]	@ (802c588 <_ZN21ScreenTrailerViewBaseC1Ev+0x260>)
 802c33a:	63e7      	str	r7, [r4, #60]	@ 0x3c
 802c33c:	f848 3b40 	str.w	r3, [r8], #64
 802c340:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
 802c344:	4640      	mov	r0, r8
 802c346:	f7fc fdf5 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802c34a:	4648      	mov	r0, r9
 802c34c:	ae25      	add	r6, sp, #148	@ 0x94
 802c34e:	f7fc ff75 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802c352:	f104 03b8 	add.w	r3, r4, #184	@ 0xb8
 802c356:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 802c35a:	4631      	mov	r1, r6
 802c35c:	4618      	mov	r0, r3
 802c35e:	930c      	str	r3, [sp, #48]	@ 0x30
 802c360:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c364:	f7fc ff0c 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802c368:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 802c36c:	4631      	mov	r1, r6
 802c36e:	4618      	mov	r0, r3
 802c370:	930d      	str	r3, [sp, #52]	@ 0x34
 802c372:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c376:	f7fc ff03 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802c37a:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 802c37e:	4631      	mov	r1, r6
 802c380:	4618      	mov	r0, r3
 802c382:	930e      	str	r3, [sp, #56]	@ 0x38
 802c384:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c388:	f7fc fefa 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802c38c:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 802c390:	4631      	mov	r1, r6
 802c392:	4618      	mov	r0, r3
 802c394:	930f      	str	r3, [sp, #60]	@ 0x3c
 802c396:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c39a:	f7fc fef1 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802c39e:	f504 73b4 	add.w	r3, r4, #360	@ 0x168
 802c3a2:	4618      	mov	r0, r3
 802c3a4:	9310      	str	r3, [sp, #64]	@ 0x40
 802c3a6:	f7fc ff05 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802c3aa:	f504 73ce 	add.w	r3, r4, #412	@ 0x19c
 802c3ae:	4618      	mov	r0, r3
 802c3b0:	9311      	str	r3, [sp, #68]	@ 0x44
 802c3b2:	f7fc feff 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802c3b6:	f504 73e8 	add.w	r3, r4, #464	@ 0x1d0
 802c3ba:	4618      	mov	r0, r3
 802c3bc:	9312      	str	r3, [sp, #72]	@ 0x48
 802c3be:	f7fc fef9 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802c3c2:	f504 7301 	add.w	r3, r4, #516	@ 0x204
 802c3c6:	4618      	mov	r0, r3
 802c3c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 802c3ca:	f7fc fef3 	bl	80291b4 <_ZN8touchgfx6ButtonC1Ev>
 802c3ce:	f504 730e 	add.w	r3, r4, #568	@ 0x238
 802c3d2:	4618      	mov	r0, r3
 802c3d4:	9305      	str	r3, [sp, #20]
 802c3d6:	f7fc ff11 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802c3da:	f504 7320 	add.w	r3, r4, #640	@ 0x280
 802c3de:	4618      	mov	r0, r3
 802c3e0:	9306      	str	r3, [sp, #24]
 802c3e2:	f7fc ff2b 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802c3e6:	f504 7333 	add.w	r3, r4, #716	@ 0x2cc
 802c3ea:	4618      	mov	r0, r3
 802c3ec:	9307      	str	r3, [sp, #28]
 802c3ee:	f7fc ff05 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802c3f2:	f504 7345 	add.w	r3, r4, #788	@ 0x314
 802c3f6:	4618      	mov	r0, r3
 802c3f8:	9308      	str	r3, [sp, #32]
 802c3fa:	f7fc feff 	bl	80291fc <_ZN8touchgfx8TextAreaC1Ev>
 802c3fe:	f504 7357 	add.w	r3, r4, #860	@ 0x35c
 802c402:	4618      	mov	r0, r3
 802c404:	9303      	str	r3, [sp, #12]
 802c406:	f004 facb 	bl	80309a0 <_ZN8touchgfx13ImageProgressC1Ev>
 802c40a:	f204 4374 	addw	r3, r4, #1140	@ 0x474
 802c40e:	4618      	mov	r0, r3
 802c410:	9304      	str	r3, [sp, #16]
 802c412:	f004 fac5 	bl	80309a0 <_ZN8touchgfx13ImageProgressC1Ev>
 802c416:	f204 538c 	addw	r3, r4, #1420	@ 0x58c
 802c41a:	4618      	mov	r0, r3
 802c41c:	931d      	str	r3, [sp, #116]	@ 0x74
 802c41e:	f7fc fd89 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802c422:	f504 63b7 	add.w	r3, r4, #1464	@ 0x5b8
 802c426:	4618      	mov	r0, r3
 802c428:	931e      	str	r3, [sp, #120]	@ 0x78
 802c42a:	f7fc fd83 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802c42e:	f204 53e4 	addw	r3, r4, #1508	@ 0x5e4
 802c432:	4618      	mov	r0, r3
 802c434:	9314      	str	r3, [sp, #80]	@ 0x50
 802c436:	f7fc ff01 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802c43a:	f504 63c6 	add.w	r3, r4, #1584	@ 0x630
 802c43e:	4618      	mov	r0, r3
 802c440:	9315      	str	r3, [sp, #84]	@ 0x54
 802c442:	f7fc fefb 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802c446:	f204 637c 	addw	r3, r4, #1660	@ 0x67c
 802c44a:	4618      	mov	r0, r3
 802c44c:	9316      	str	r3, [sp, #88]	@ 0x58
 802c44e:	f7fc fef5 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802c452:	f504 63d9 	add.w	r3, r4, #1736	@ 0x6c8
 802c456:	4631      	mov	r1, r6
 802c458:	4618      	mov	r0, r3
 802c45a:	9309      	str	r3, [sp, #36]	@ 0x24
 802c45c:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c460:	f004 fd9e 	bl	8030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 802c464:	f204 63f4 	addw	r3, r4, #1780	@ 0x6f4
 802c468:	4631      	mov	r1, r6
 802c46a:	4618      	mov	r0, r3
 802c46c:	9317      	str	r3, [sp, #92]	@ 0x5c
 802c46e:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c472:	f7fc fe85 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802c476:	f504 63e4 	add.w	r3, r4, #1824	@ 0x720
 802c47a:	4631      	mov	r1, r6
 802c47c:	4618      	mov	r0, r3
 802c47e:	930a      	str	r3, [sp, #40]	@ 0x28
 802c480:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c484:	f004 fd8c 	bl	8030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 802c488:	f204 734c 	addw	r3, r4, #1868	@ 0x74c
 802c48c:	4631      	mov	r1, r6
 802c48e:	4618      	mov	r0, r3
 802c490:	9318      	str	r3, [sp, #96]	@ 0x60
 802c492:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c496:	f7fc fe73 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Box(), borderColor(0), borderSize(0)
 802c49a:	f504 63ef 	add.w	r3, r4, #1912	@ 0x778
 802c49e:	4618      	mov	r0, r3
 802c4a0:	931f      	str	r3, [sp, #124]	@ 0x7c
 802c4a2:	f7fc fd47 	bl	8028f34 <_ZN8touchgfx3BoxC1Ev>
 802c4a6:	4b39      	ldr	r3, [pc, #228]	@ (802c58c <_ZN21ScreenTrailerViewBaseC1Ev+0x264>)
 802c4a8:	f8c4 3778 	str.w	r3, [r4, #1912]	@ 0x778
 802c4ac:	f204 73ac 	addw	r3, r4, #1964	@ 0x7ac
 802c4b0:	4618      	mov	r0, r3
 802c4b2:	f8c4 77a4 	str.w	r7, [r4, #1956]	@ 0x7a4
 802c4b6:	f8a4 77a8 	strh.w	r7, [r4, #1960]	@ 0x7a8
 802c4ba:	9319      	str	r3, [sp, #100]	@ 0x64
 802c4bc:	f7fc febe 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802c4c0:	f504 63ff 	add.w	r3, r4, #2040	@ 0x7f8
 802c4c4:	4618      	mov	r0, r3
 802c4c6:	931a      	str	r3, [sp, #104]	@ 0x68
 802c4c8:	f7fc feb8 	bl	802923c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 802c4cc:	f604 0344 	addw	r3, r4, #2116	@ 0x844
 802c4d0:	4631      	mov	r1, r6
 802c4d2:	4618      	mov	r0, r3
 802c4d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 802c4d6:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c4da:	f7fc fe51 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802c4de:	f504 6307 	add.w	r3, r4, #2160	@ 0x870
 802c4e2:	4631      	mov	r1, r6
 802c4e4:	4618      	mov	r0, r3
 802c4e6:	931c      	str	r3, [sp, #112]	@ 0x70
 802c4e8:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c4ec:	f7fc fe48 	bl	8029180 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 802c4f0:	f604 039c 	addw	r3, r4, #2204	@ 0x89c
 802c4f4:	4631      	mov	r1, r6
 802c4f6:	4618      	mov	r0, r3
 802c4f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802c4fa:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
 802c4fe:	f004 fd4f 	bl	8030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
    __background.setPosition(0, 0, 320, 240);
 802c502:	23f0      	movs	r3, #240	@ 0xf0
 802c504:	463a      	mov	r2, r7
 802c506:	4640      	mov	r0, r8
 802c508:	9300      	str	r3, [sp, #0]
 802c50a:	4639      	mov	r1, r7
 802c50c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802c510:	f7fc fcf4 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802c514:	1d25      	adds	r5, r4, #4
        color = newColor;
 802c516:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802c51a:	4641      	mov	r1, r8
 802c51c:	66a3      	str	r3, [r4, #104]	@ 0x68
 802c51e:	4628      	mov	r0, r5
 802c520:	f003 fbf8 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textVersion.setPosition(10, 178, 300, 24);
 802c524:	2318      	movs	r3, #24
 802c526:	22b2      	movs	r2, #178	@ 0xb2
 802c528:	9300      	str	r3, [sp, #0]
 802c52a:	210a      	movs	r1, #10
 802c52c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 802c530:	4648      	mov	r0, r9
 802c532:	f7fc fce3 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802c536:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 802c53a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
        boundingArea = calculateBoundingArea();
 802c53e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
        linespace = space;
 802c540:	f8a4 70a0 	strh.w	r7, [r4, #160]	@ 0xa0
        boundingArea = calculateBoundingArea();
 802c544:	f10d 0880 	add.w	r8, sp, #128	@ 0x80
 802c548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802c54c:	f8df a054 	ldr.w	sl, [pc, #84]	@ 802c5a4 <_ZN21ScreenTrailerViewBaseC1Ev+0x27c>
 802c550:	4649      	mov	r1, r9
 802c552:	4640      	mov	r0, r8
 802c554:	4798      	blx	r3
 802c556:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 802c55a:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 802c55e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c562:	f8da 3000 	ldr.w	r3, [sl]
    Unicode::snprintf(textVersionBuffer, TEXTVERSION_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FR6I).getText());
 802c566:	f604 0bc8 	addw	fp, r4, #2248	@ 0x8c8
 802c56a:	b92b      	cbnz	r3, 802c578 <_ZN21ScreenTrailerViewBaseC1Ev+0x250>
 802c56c:	4b08      	ldr	r3, [pc, #32]	@ (802c590 <_ZN21ScreenTrailerViewBaseC1Ev+0x268>)
 802c56e:	4a09      	ldr	r2, [pc, #36]	@ (802c594 <_ZN21ScreenTrailerViewBaseC1Ev+0x26c>)
 802c570:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802c572:	4809      	ldr	r0, [pc, #36]	@ (802c598 <_ZN21ScreenTrailerViewBaseC1Ev+0x270>)
 802c574:	f00f ffd8 	bl	803c528 <__assert_func>
 802c578:	4b08      	ldr	r3, [pc, #32]	@ (802c59c <_ZN21ScreenTrailerViewBaseC1Ev+0x274>)
 802c57a:	881b      	ldrh	r3, [r3, #0]
 802c57c:	2b32      	cmp	r3, #50	@ 0x32
 802c57e:	d813      	bhi.n	802c5a8 <_ZN21ScreenTrailerViewBaseC1Ev+0x280>
 802c580:	4b07      	ldr	r3, [pc, #28]	@ (802c5a0 <_ZN21ScreenTrailerViewBaseC1Ev+0x278>)
 802c582:	4a04      	ldr	r2, [pc, #16]	@ (802c594 <_ZN21ScreenTrailerViewBaseC1Ev+0x26c>)
 802c584:	2161      	movs	r1, #97	@ 0x61
 802c586:	e7f4      	b.n	802c572 <_ZN21ScreenTrailerViewBaseC1Ev+0x24a>
 802c588:	08042ad8 	.word	0x08042ad8
 802c58c:	08043580 	.word	0x08043580
 802c590:	08040d9d 	.word	0x08040d9d
 802c594:	08040e9a 	.word	0x08040e9a
 802c598:	08040e1a 	.word	0x08040e1a
 802c59c:	2000b934 	.word	0x2000b934
 802c5a0:	08040e5c 	.word	0x08040e5c
 802c5a4:	2000b930 	.word	0x2000b930
        return texts->getText(typedTextId);
 802c5a8:	4bd8      	ldr	r3, [pc, #864]	@ (802c90c <_ZN21ScreenTrailerViewBaseC1Ev+0x5e4>)
 802c5aa:	2132      	movs	r1, #50	@ 0x32
 802c5ac:	6818      	ldr	r0, [r3, #0]
 802c5ae:	f000 fc81 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802c5b2:	4ad7      	ldr	r2, [pc, #860]	@ (802c910 <_ZN21ScreenTrailerViewBaseC1Ev+0x5e8>)
 802c5b4:	4603      	mov	r3, r0
 802c5b6:	2118      	movs	r1, #24
 802c5b8:	4658      	mov	r0, fp
 802c5ba:	f00b fc59 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802c5be:	2333      	movs	r3, #51	@ 0x33
    textVersion.setTypedText(touchgfx::TypedText(T___SINGLEUSE_C1QR));
 802c5c0:	4648      	mov	r0, r9
 802c5c2:	f8c4 b0b4 	str.w	fp, [r4, #180]	@ 0xb4
 802c5c6:	4631      	mov	r1, r6
 802c5c8:	f8df b34c 	ldr.w	fp, [pc, #844]	@ 802c918 <_ZN21ScreenTrailerViewBaseC1Ev+0x5f0>
 802c5cc:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802c5d0:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802c5d4:	f005 faf0 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c5d8:	4649      	mov	r1, r9
 802c5da:	4628      	mov	r0, r5
 802c5dc:	f003 fb9a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    test.setXY(-1, 0);
 802c5e0:	463a      	mov	r2, r7
 802c5e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802c5e4:	f04f 31ff 	mov.w	r1, #4294967295
 802c5e8:	f7fc fd8a 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    test.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_320X240_POLY_ID));
 802c5ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802c5ee:	f8ad 7094 	strh.w	r7, [sp, #148]	@ 0x94
 802c5f2:	4631      	mov	r1, r6
 802c5f4:	f004 fbfd 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c5f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802c5fa:	4628      	mov	r0, r5
 802c5fc:	f003 fb8a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image3.setXY(46, 141);
 802c600:	228d      	movs	r2, #141	@ 0x8d
 802c602:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802c604:	212e      	movs	r1, #46	@ 0x2e
 802c606:	f7fc fd7b 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802c60a:	2311      	movs	r3, #17
    image3.setBitmap(touchgfx::Bitmap(BITMAP_SHADE1_ID));
 802c60c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802c60e:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802c612:	4631      	mov	r1, r6
 802c614:	f004 fbed 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c618:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802c61a:	4628      	mov	r0, r5
 802c61c:	f003 fb7a 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 23);
 802c620:	2217      	movs	r2, #23
 802c622:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802c624:	4639      	mov	r1, r7
 802c626:	f7fc fd6b 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802c62a:	2310      	movs	r3, #16
    image1.setBitmap(touchgfx::Bitmap(BITMAP_LOGO_ID));
 802c62c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802c62e:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802c632:	4631      	mov	r1, r6
 802c634:	f004 fbdd 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c638:	2374      	movs	r3, #116	@ 0x74
 802c63a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 802c63e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802c640:	4628      	mov	r0, r5
 802c642:	f003 fb67 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    statusImage.setXY(-2, 52);
 802c646:	2234      	movs	r2, #52	@ 0x34
 802c648:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802c64a:	f06f 0101 	mvn.w	r1, #1
 802c64e:	f7fc fd57 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802c652:	2312      	movs	r3, #18
    statusImage.setBitmap(touchgfx::Bitmap(BITMAP_TRAILERLATCHED_ID));
 802c654:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802c656:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802c65a:	4631      	mov	r1, r6
 802c65c:	f004 fbc9 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802c660:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802c662:	4628      	mov	r0, r5
 802c664:	f003 fb56 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button3.setXY(240, 216);
 802c668:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802c66a:	22d8      	movs	r2, #216	@ 0xd8
 802c66c:	21f0      	movs	r1, #240	@ 0xf0
 802c66e:	f04f 0903 	mov.w	r9, #3
 802c672:	f7fc fd45 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802c676:	4632      	mov	r2, r6
 802c678:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802c67a:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 802c67e:	a924      	add	r1, sp, #144	@ 0x90
 802c680:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 802c684:	f004 fae7 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802c688:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802c68a:	4628      	mov	r0, r5
 802c68c:	f003 fb42 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button2.setXY(160, 216);
 802c690:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802c692:	22d8      	movs	r2, #216	@ 0xd8
 802c694:	21a0      	movs	r1, #160	@ 0xa0
 802c696:	f7fc fd33 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802c69a:	4632      	mov	r2, r6
 802c69c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802c69e:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 802c6a2:	a924      	add	r1, sp, #144	@ 0x90
 802c6a4:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 802c6a8:	f004 fad5 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802c6ac:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802c6ae:	4628      	mov	r0, r5
 802c6b0:	f003 fb30 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button0.setXY(0, 216);
 802c6b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802c6b6:	22d8      	movs	r2, #216	@ 0xd8
 802c6b8:	4639      	mov	r1, r7
 802c6ba:	f7fc fd21 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button0.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802c6be:	4632      	mov	r2, r6
 802c6c0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802c6c2:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 802c6c6:	a924      	add	r1, sp, #144	@ 0x90
 802c6c8:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 802c6cc:	f004 fac3 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802c6d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802c6d2:	4628      	mov	r0, r5
 802c6d4:	f003 fb1e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(80, 216);
 802c6d8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802c6da:	22d8      	movs	r2, #216	@ 0xd8
 802c6dc:	2150      	movs	r1, #80	@ 0x50
 802c6de:	f7fc fd0f 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID), touchgfx::Bitmap(BITMAP_BUTTON_GREY_ID));
 802c6e2:	4632      	mov	r2, r6
 802c6e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802c6e6:	f8ad 9090 	strh.w	r9, [sp, #144]	@ 0x90
 802c6ea:	a924      	add	r1, sp, #144	@ 0x90
 802c6ec:	f8ad 9094 	strh.w	r9, [sp, #148]	@ 0x94
 802c6f0:	f004 fab1 	bl	8030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 802c6f4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802c6f6:	4628      	mov	r0, r5
 802c6f8:	f003 fb0c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3.setXY(174, 215);
 802c6fc:	22d7      	movs	r2, #215	@ 0xd7
 802c6fe:	9805      	ldr	r0, [sp, #20]
 802c700:	21ae      	movs	r1, #174	@ 0xae
 802c702:	f7fc fcfd 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802c706:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802c70a:	f8c4 1268 	str.w	r1, [r4, #616]	@ 0x268
        boundingArea = calculateBoundingArea();
 802c70e:	4640      	mov	r0, r8
 802c710:	9905      	ldr	r1, [sp, #20]
        linespace = space;
 802c712:	f8a4 726c 	strh.w	r7, [r4, #620]	@ 0x26c
        boundingArea = calculateBoundingArea();
 802c716:	f004 ff01 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802c71a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 802c71e:	f504 731d 	add.w	r3, r4, #628	@ 0x274
 802c722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c726:	2331      	movs	r3, #49	@ 0x31
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XKLM));
 802c728:	9805      	ldr	r0, [sp, #20]
 802c72a:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802c72e:	4631      	mov	r1, r6
 802c730:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802c734:	f005 fa40 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c738:	9905      	ldr	r1, [sp, #20]
 802c73a:	4628      	mov	r0, r5
 802c73c:	f003 faea 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LATCH.setPosition(240, 215, 79, 25);
 802c740:	2119      	movs	r1, #25
 802c742:	22d7      	movs	r2, #215	@ 0xd7
 802c744:	9806      	ldr	r0, [sp, #24]
 802c746:	9100      	str	r1, [sp, #0]
 802c748:	234f      	movs	r3, #79	@ 0x4f
 802c74a:	21f0      	movs	r1, #240	@ 0xf0
 802c74c:	f7fc fbd6 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802c750:	f8d4 3280 	ldr.w	r3, [r4, #640]	@ 0x280
        linespace = space;
 802c754:	f8a4 72b4 	strh.w	r7, [r4, #692]	@ 0x2b4
        color = newColor;
 802c758:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802c75c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 802c760:	f8c4 12b0 	str.w	r1, [r4, #688]	@ 0x2b0
        boundingArea = calculateBoundingArea();
 802c764:	4640      	mov	r0, r8
 802c766:	9906      	ldr	r1, [sp, #24]
 802c768:	4798      	blx	r3
 802c76a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 802c76e:	f504 732f 	add.w	r3, r4, #700	@ 0x2bc
 802c772:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802c776:	f8da 3000 	ldr.w	r3, [sl]
    Unicode::snprintf(LATCHBuffer, LATCH_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OFYC).getText());
 802c77a:	f604 09f8 	addw	r9, r4, #2296	@ 0x8f8
 802c77e:	2b00      	cmp	r3, #0
 802c780:	f43f aef4 	beq.w	802c56c <_ZN21ScreenTrailerViewBaseC1Ev+0x244>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802c784:	4b63      	ldr	r3, [pc, #396]	@ (802c914 <_ZN21ScreenTrailerViewBaseC1Ev+0x5ec>)
 802c786:	881b      	ldrh	r3, [r3, #0]
 802c788:	2b2f      	cmp	r3, #47	@ 0x2f
 802c78a:	f67f aef9 	bls.w	802c580 <_ZN21ScreenTrailerViewBaseC1Ev+0x258>
        return texts->getText(typedTextId);
 802c78e:	4a5f      	ldr	r2, [pc, #380]	@ (802c90c <_ZN21ScreenTrailerViewBaseC1Ev+0x5e4>)
 802c790:	212f      	movs	r1, #47	@ 0x2f
 802c792:	6810      	ldr	r0, [r2, #0]
 802c794:	f000 fb8e 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802c798:	4a5d      	ldr	r2, [pc, #372]	@ (802c910 <_ZN21ScreenTrailerViewBaseC1Ev+0x5e8>)
 802c79a:	4603      	mov	r3, r0
 802c79c:	210d      	movs	r1, #13
 802c79e:	4648      	mov	r0, r9
 802c7a0:	f00b fb66 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802c7a4:	2330      	movs	r3, #48	@ 0x30
    LATCH.setTypedText(touchgfx::TypedText(T___SINGLEUSE_44I5));
 802c7a6:	9806      	ldr	r0, [sp, #24]
 802c7a8:	f8c4 92c8 	str.w	r9, [r4, #712]	@ 0x2c8
 802c7ac:	4631      	mov	r1, r6
 802c7ae:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802c7b2:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802c7b6:	f005 f9ff 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c7ba:	9906      	ldr	r1, [sp, #24]
 802c7bc:	4628      	mov	r0, r5
 802c7be:	f003 faa9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(99, 215);
 802c7c2:	22d7      	movs	r2, #215	@ 0xd7
 802c7c4:	9807      	ldr	r0, [sp, #28]
 802c7c6:	2163      	movs	r1, #99	@ 0x63
 802c7c8:	f7fc fc9a 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802c7cc:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802c7d0:	4640      	mov	r0, r8
        color = newColor;
 802c7d2:	f8c4 12fc 	str.w	r1, [r4, #764]	@ 0x2fc
        linespace = space;
 802c7d6:	f8a4 7300 	strh.w	r7, [r4, #768]	@ 0x300
        boundingArea = calculateBoundingArea();
 802c7da:	9907      	ldr	r1, [sp, #28]
 802c7dc:	f004 fe9e 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802c7e0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 802c7e4:	f504 7342 	add.w	r3, r4, #776	@ 0x308
 802c7e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c7ec:	232e      	movs	r3, #46	@ 0x2e
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WUYF));
 802c7ee:	9807      	ldr	r0, [sp, #28]
 802c7f0:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802c7f4:	4631      	mov	r1, r6
 802c7f6:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802c7fa:	f005 f9dd 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c7fe:	9907      	ldr	r1, [sp, #28]
 802c800:	4628      	mov	r0, r5
 802c802:	f003 fa87 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea5.setXY(10, 23);
 802c806:	2217      	movs	r2, #23
 802c808:	9808      	ldr	r0, [sp, #32]
 802c80a:	210a      	movs	r1, #10
 802c80c:	f7fc fc78 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 802c810:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 802c814:	4640      	mov	r0, r8
        color = newColor;
 802c816:	f8c4 1344 	str.w	r1, [r4, #836]	@ 0x344
        linespace = space;
 802c81a:	f8a4 7348 	strh.w	r7, [r4, #840]	@ 0x348
        boundingArea = calculateBoundingArea();
 802c81e:	9908      	ldr	r1, [sp, #32]
 802c820:	f004 fe7c 	bl	803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 802c824:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 802c828:	f504 7354 	add.w	r3, r4, #848	@ 0x350
 802c82c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c830:	232d      	movs	r3, #45	@ 0x2d
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NSJ4));
 802c832:	9808      	ldr	r0, [sp, #32]
 802c834:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802c838:	4631      	mov	r1, r6
 802c83a:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802c83e:	f005 f9bb 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c842:	9908      	ldr	r1, [sp, #32]
 802c844:	4628      	mov	r0, r5
 802c846:	f003 fa65 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    imageProgressRollPos.setProgressIndicatorPosition(0, 0, 100, 10);
 802c84a:	f04f 090a 	mov.w	r9, #10
    imageProgressRollPos.setXY(160, 183);
 802c84e:	9803      	ldr	r0, [sp, #12]
 802c850:	22b7      	movs	r2, #183	@ 0xb7
 802c852:	21a0      	movs	r1, #160	@ 0xa0
 802c854:	f7fc fc54 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    imageProgressRollPos.setProgressIndicatorPosition(0, 0, 100, 10);
 802c858:	9803      	ldr	r0, [sp, #12]
 802c85a:	f8cd 9000 	str.w	r9, [sp]
 802c85e:	2364      	movs	r3, #100	@ 0x64
 802c860:	463a      	mov	r2, r7
 802c862:	4639      	mov	r1, r7
 802c864:	f003 ff48 	bl	80306f8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    imageProgressRollPos.setRange(64, 128);
 802c868:	463b      	mov	r3, r7
 802c86a:	2280      	movs	r2, #128	@ 0x80
 802c86c:	9803      	ldr	r0, [sp, #12]
 802c86e:	9700      	str	r7, [sp, #0]
 802c870:	2140      	movs	r1, #64	@ 0x40
 802c872:	f003 fd89 	bl	8030388 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    imageProgressRollPos.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 802c876:	9803      	ldr	r0, [sp, #12]
 802c878:	4639      	mov	r1, r7
 802c87a:	f003 fd1d 	bl	80302b8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
 802c87e:	f04f 0801 	mov.w	r8, #1
    imageProgressRollPos.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ID));
 802c882:	9803      	ldr	r0, [sp, #12]
 802c884:	f8ad 8094 	strh.w	r8, [sp, #148]	@ 0x94
 802c888:	4631      	mov	r1, r6
 802c88a:	f003 fe8f 	bl	80305ac <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    imageProgressRollPos.setBitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ACTION_ID);
 802c88e:	9803      	ldr	r0, [sp, #12]
 802c890:	2102      	movs	r1, #2
 802c892:	f003 ff09 	bl	80306a8 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    imageProgressRollPos.setValue(64);
 802c896:	9803      	ldr	r0, [sp, #12]
 802c898:	2140      	movs	r1, #64	@ 0x40
 802c89a:	f003 ff47 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
    imageProgressRollPos.setAnchorAtZero(true);
 802c89e:	4641      	mov	r1, r8
 802c8a0:	9803      	ldr	r0, [sp, #12]
 802c8a2:	f003 fee5 	bl	8030670 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
 802c8a6:	9903      	ldr	r1, [sp, #12]
 802c8a8:	4628      	mov	r0, r5
 802c8aa:	f003 fa33 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    imageProgressRollNeg.setXY(58, 183);
 802c8ae:	9804      	ldr	r0, [sp, #16]
 802c8b0:	22b7      	movs	r2, #183	@ 0xb7
 802c8b2:	213a      	movs	r1, #58	@ 0x3a
 802c8b4:	f7fc fc24 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    imageProgressRollNeg.setProgressIndicatorPosition(0, 0, 100, 10);
 802c8b8:	9804      	ldr	r0, [sp, #16]
 802c8ba:	f8cd 9000 	str.w	r9, [sp]
 802c8be:	2364      	movs	r3, #100	@ 0x64
 802c8c0:	463a      	mov	r2, r7
 802c8c2:	4639      	mov	r1, r7
 802c8c4:	f003 ff18 	bl	80306f8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>
    imageProgressRollNeg.setRange(64, 128);
 802c8c8:	463b      	mov	r3, r7
 802c8ca:	2280      	movs	r2, #128	@ 0x80
 802c8cc:	9804      	ldr	r0, [sp, #16]
 802c8ce:	9700      	str	r7, [sp, #0]
 802c8d0:	2140      	movs	r1, #64	@ 0x40
 802c8d2:	f003 fd59 	bl	8030388 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    imageProgressRollNeg.setDirection(touchgfx::AbstractDirectionProgress::LEFT);
 802c8d6:	4641      	mov	r1, r8
 802c8d8:	9804      	ldr	r0, [sp, #16]
 802c8da:	f003 fced 	bl	80302b8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    imageProgressRollNeg.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ID));
 802c8de:	9804      	ldr	r0, [sp, #16]
 802c8e0:	f8ad 8094 	strh.w	r8, [sp, #148]	@ 0x94
 802c8e4:	4631      	mov	r1, r6
 802c8e6:	f003 fe61 	bl	80305ac <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    imageProgressRollNeg.setBitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_IMAGEPROGRESS_PLAIN_NORMAL_TINY_ACTION_ID);
 802c8ea:	9804      	ldr	r0, [sp, #16]
 802c8ec:	2102      	movs	r1, #2
 802c8ee:	f003 fedb 	bl	80306a8 <_ZN8touchgfx13ImageProgress9setBitmapEt>
    imageProgressRollNeg.setValue(64);
 802c8f2:	9804      	ldr	r0, [sp, #16]
 802c8f4:	2140      	movs	r1, #64	@ 0x40
 802c8f6:	f003 ff19 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
    imageProgressRollNeg.setAnchorAtZero(true);
 802c8fa:	4641      	mov	r1, r8
 802c8fc:	9804      	ldr	r0, [sp, #16]
 802c8fe:	f003 feb7 	bl	8030670 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>
    box6.setPosition(0, 0, 320, 23);
 802c902:	f04f 0917 	mov.w	r9, #23
 802c906:	9904      	ldr	r1, [sp, #16]
 802c908:	e008      	b.n	802c91c <_ZN21ScreenTrailerViewBaseC1Ev+0x5f4>
 802c90a:	bf00      	nop
 802c90c:	2000b93c 	.word	0x2000b93c
 802c910:	08040ee5 	.word	0x08040ee5
 802c914:	2000b934 	.word	0x2000b934
 802c918:	08042200 	.word	0x08042200
 802c91c:	4628      	mov	r0, r5
 802c91e:	f003 f9f9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802c922:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 802c926:	463a      	mov	r2, r7
 802c928:	981d      	ldr	r0, [sp, #116]	@ 0x74
 802c92a:	f8cd 9000 	str.w	r9, [sp]
 802c92e:	4639      	mov	r1, r7
 802c930:	f7fc fae4 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802c934:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802c938:	f8c4 15b4 	str.w	r1, [r4, #1460]	@ 0x5b4
 802c93c:	4628      	mov	r0, r5
 802c93e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802c940:	f003 f9e8 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    box7.setPosition(155, 182, 9, 11);
 802c944:	230b      	movs	r3, #11
 802c946:	22b6      	movs	r2, #182	@ 0xb6
 802c948:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802c94a:	9300      	str	r3, [sp, #0]
 802c94c:	219b      	movs	r1, #155	@ 0x9b
 802c94e:	2309      	movs	r3, #9
 802c950:	f7fc fad4 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802c954:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802c958:	f8c4 15e0 	str.w	r1, [r4, #1504]	@ 0x5e0
 802c95c:	4628      	mov	r0, r5
 802c95e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802c960:	f003 f9d8 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    testtext.setPosition(24, -1, 198, 24);
 802c964:	2118      	movs	r1, #24
 802c966:	23c6      	movs	r3, #198	@ 0xc6
 802c968:	f04f 32ff 	mov.w	r2, #4294967295
 802c96c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 802c96e:	9100      	str	r1, [sp, #0]
 802c970:	f7fc fac4 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802c974:	49d7      	ldr	r1, [pc, #860]	@ (802ccd4 <_ZN21ScreenTrailerViewBaseC1Ev+0x9ac>)
 802c976:	f8c4 1614 	str.w	r1, [r4, #1556]	@ 0x614
        linespace = space;
 802c97a:	f8a4 7618 	strh.w	r7, [r4, #1560]	@ 0x618
        return TextArea::BoundingArea();
 802c97e:	4630      	mov	r0, r6
 802c980:	f7fc fc34 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802c984:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802c988:	f504 63c4 	add.w	r3, r4, #1568	@ 0x620
 802c98c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802c990:	f8da 3000 	ldr.w	r3, [sl]
    Unicode::snprintf(testtextBuffer, TESTTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_28XB).getText());
 802c994:	f604 1812 	addw	r8, r4, #2322	@ 0x912
 802c998:	2b00      	cmp	r3, #0
 802c99a:	f43f ade7 	beq.w	802c56c <_ZN21ScreenTrailerViewBaseC1Ev+0x244>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802c99e:	4bce      	ldr	r3, [pc, #824]	@ (802ccd8 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b0>)
 802c9a0:	881b      	ldrh	r3, [r3, #0]
 802c9a2:	2b2b      	cmp	r3, #43	@ 0x2b
 802c9a4:	f67f adec 	bls.w	802c580 <_ZN21ScreenTrailerViewBaseC1Ev+0x258>
        return texts->getText(typedTextId);
 802c9a8:	4acc      	ldr	r2, [pc, #816]	@ (802ccdc <_ZN21ScreenTrailerViewBaseC1Ev+0x9b4>)
 802c9aa:	212b      	movs	r1, #43	@ 0x2b
 802c9ac:	6810      	ldr	r0, [r2, #0]
 802c9ae:	f000 fa81 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802c9b2:	4acb      	ldr	r2, [pc, #812]	@ (802cce0 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b8>)
 802c9b4:	4603      	mov	r3, r0
 802c9b6:	2119      	movs	r1, #25
 802c9b8:	4640      	mov	r0, r8
 802c9ba:	f00b fa59 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802c9be:	232c      	movs	r3, #44	@ 0x2c
    testtext.setTypedText(touchgfx::TypedText(T___SINGLEUSE_87GC));
 802c9c0:	9814      	ldr	r0, [sp, #80]	@ 0x50
        wc1 = value;
 802c9c2:	f8c4 862c 	str.w	r8, [r4, #1580]	@ 0x62c
 802c9c6:	4631      	mov	r1, r6
 802c9c8:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802c9cc:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802c9d0:	f005 f8f2 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802c9d4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802c9d6:	4628      	mov	r0, r5
 802c9d8:	f003 f99c 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PTOSTATUSTXT.setPosition(239, -1, 86, 23);
 802c9dc:	2356      	movs	r3, #86	@ 0x56
 802c9de:	f04f 32ff 	mov.w	r2, #4294967295
 802c9e2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802c9e4:	f8cd 9000 	str.w	r9, [sp]
 802c9e8:	21ef      	movs	r1, #239	@ 0xef
 802c9ea:	f7fc fa87 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802c9ee:	49b9      	ldr	r1, [pc, #740]	@ (802ccd4 <_ZN21ScreenTrailerViewBaseC1Ev+0x9ac>)
 802c9f0:	f8c4 1660 	str.w	r1, [r4, #1632]	@ 0x660
        linespace = space;
 802c9f4:	f8a4 7664 	strh.w	r7, [r4, #1636]	@ 0x664
        return TextArea::BoundingArea();
 802c9f8:	4630      	mov	r0, r6
 802c9fa:	f7fc fbf7 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802c9fe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802ca02:	f204 636c 	addw	r3, r4, #1644	@ 0x66c
 802ca06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802ca0a:	f8da 3000 	ldr.w	r3, [sl]
    Unicode::snprintf(PTOSTATUSTXTBuffer, PTOSTATUSTXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_EFFI).getText());
 802ca0e:	f604 1844 	addw	r8, r4, #2372	@ 0x944
 802ca12:	2b00      	cmp	r3, #0
 802ca14:	f43f adaa 	beq.w	802c56c <_ZN21ScreenTrailerViewBaseC1Ev+0x244>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802ca18:	4baf      	ldr	r3, [pc, #700]	@ (802ccd8 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b0>)
 802ca1a:	881b      	ldrh	r3, [r3, #0]
 802ca1c:	2b29      	cmp	r3, #41	@ 0x29
 802ca1e:	f67f adaf 	bls.w	802c580 <_ZN21ScreenTrailerViewBaseC1Ev+0x258>
        return texts->getText(typedTextId);
 802ca22:	4aae      	ldr	r2, [pc, #696]	@ (802ccdc <_ZN21ScreenTrailerViewBaseC1Ev+0x9b4>)
 802ca24:	2129      	movs	r1, #41	@ 0x29
 802ca26:	6810      	ldr	r0, [r2, #0]
 802ca28:	f000 fa44 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802ca2c:	4aac      	ldr	r2, [pc, #688]	@ (802cce0 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b8>)
 802ca2e:	4603      	mov	r3, r0
 802ca30:	2119      	movs	r1, #25
 802ca32:	4640      	mov	r0, r8
 802ca34:	f00b fa1c 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802ca38:	232a      	movs	r3, #42	@ 0x2a
    PTOSTATUSTXT.setTypedText(touchgfx::TypedText(T___SINGLEUSE_D72J));
 802ca3a:	4631      	mov	r1, r6
 802ca3c:	9815      	ldr	r0, [sp, #84]	@ 0x54
        wc1 = value;
 802ca3e:	f8c4 8678 	str.w	r8, [r4, #1656]	@ 0x678
 802ca42:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802ca46:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802ca4a:	f005 f8b5 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802ca4e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802ca50:	4628      	mov	r0, r5
 802ca52:	f003 f95f 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textRoll.setPosition(72, 192, 100, 24);
 802ca56:	2218      	movs	r2, #24
 802ca58:	2148      	movs	r1, #72	@ 0x48
 802ca5a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802ca5c:	9200      	str	r2, [sp, #0]
 802ca5e:	2364      	movs	r3, #100	@ 0x64
 802ca60:	22c0      	movs	r2, #192	@ 0xc0
 802ca62:	f7fc fa4b 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802ca66:	f04f 33ff 	mov.w	r3, #4294967295
 802ca6a:	f8c4 36ac 	str.w	r3, [r4, #1708]	@ 0x6ac
        return TextArea::BoundingArea();
 802ca6e:	4630      	mov	r0, r6
        linespace = space;
 802ca70:	f8a4 76b0 	strh.w	r7, [r4, #1712]	@ 0x6b0
 802ca74:	f7fc fbba 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802ca78:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802ca7c:	f504 63d7 	add.w	r3, r4, #1720	@ 0x6b8
 802ca80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802ca84:	f8da 3000 	ldr.w	r3, [sl]
    Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_G8BW).getText());
 802ca88:	f604 1676 	addw	r6, r4, #2422	@ 0x976
 802ca8c:	2b00      	cmp	r3, #0
 802ca8e:	f43f ad6d 	beq.w	802c56c <_ZN21ScreenTrailerViewBaseC1Ev+0x244>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802ca92:	4b91      	ldr	r3, [pc, #580]	@ (802ccd8 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b0>)
 802ca94:	881b      	ldrh	r3, [r3, #0]
 802ca96:	2b0c      	cmp	r3, #12
 802ca98:	f67f ad72 	bls.w	802c580 <_ZN21ScreenTrailerViewBaseC1Ev+0x258>
        return texts->getText(typedTextId);
 802ca9c:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 802ccdc <_ZN21ScreenTrailerViewBaseC1Ev+0x9b4>
 802caa0:	210c      	movs	r1, #12
 802caa2:	f8da 0000 	ldr.w	r0, [sl]
 802caa6:	f000 fa05 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802caaa:	4a8d      	ldr	r2, [pc, #564]	@ (802cce0 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b8>)
 802caac:	4603      	mov	r3, r0
 802caae:	210c      	movs	r1, #12
 802cab0:	4630      	mov	r0, r6
 802cab2:	f00b f9dd 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 802cab6:	f8c4 66c4 	str.w	r6, [r4, #1732]	@ 0x6c4
    textRoll.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KQ9P));
 802caba:	ae25      	add	r6, sp, #148	@ 0x94
        : typedTextId(id)
 802cabc:	230d      	movs	r3, #13
 802cabe:	9816      	ldr	r0, [sp, #88]	@ 0x58
 802cac0:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802cac4:	4631      	mov	r1, r6
 802cac6:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
 802caca:	f005 f875 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802cace:	9916      	ldr	r1, [sp, #88]	@ 0x58
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802cad0:	f8df b218 	ldr.w	fp, [pc, #536]	@ 802ccec <_ZN21ScreenTrailerViewBaseC1Ev+0x9c4>
 802cad4:	4628      	mov	r0, r5
 802cad6:	f003 f91d 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    LOCKED.setPosition(288, 143, 24, 24);
 802cada:	2718      	movs	r7, #24
 802cadc:	f04f 0805 	mov.w	r8, #5
    LOCKED.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_LOCK_48_44_E84141_SVG_ID));
 802cae0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802cae2:	f8ad 8094 	strh.w	r8, [sp, #148]	@ 0x94
 802cae6:	4631      	mov	r1, r6
 802cae8:	f004 f983 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    LOCKED.setPosition(288, 143, 24, 24);
 802caec:	463b      	mov	r3, r7
 802caee:	228f      	movs	r2, #143	@ 0x8f
 802caf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802caf2:	9700      	str	r7, [sp, #0]
 802caf4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 802caf8:	f7fc fa00 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
    LOCKED.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 802cafc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802cafe:	2100      	movs	r1, #0
 802cb00:	f004 fa0e 	bl	8030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 802cb04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802cb06:	4628      	mov	r0, r5
 802cb08:	f003 f904 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    MOVING.setXY(133, 95);
 802cb0c:	225f      	movs	r2, #95	@ 0x5f
 802cb0e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802cb10:	2185      	movs	r1, #133	@ 0x85
 802cb12:	f7fc faf5 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802cb16:	230f      	movs	r3, #15
    MOVING.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NOTIFICATION_SYNC_PROBLEM_50_50_000000_SVG_ID));
 802cb18:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 802cb1a:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802cb1e:	4631      	mov	r1, r6
 802cb20:	f004 f967 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802cb24:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802cb26:	4628      	mov	r0, r5
 802cb28:	f003 f8f4 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802cb2c:	2306      	movs	r3, #6
    UNLOCKED.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_LOCK_OPEN_48_44_0AA34A_SVG_ID));
 802cb2e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802cb30:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802cb34:	4631      	mov	r1, r6
 802cb36:	f004 f95c 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    UNLOCKED.setPosition(288, 142, 24, 24);
 802cb3a:	463b      	mov	r3, r7
 802cb3c:	228e      	movs	r2, #142	@ 0x8e
 802cb3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802cb40:	9700      	str	r7, [sp, #0]
 802cb42:	f44f 7190 	mov.w	r1, #288	@ 0x120
 802cb46:	f7fc f9d9 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802cb4a:	2700      	movs	r7, #0
    UNLOCKED.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 802cb4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802cb4e:	2100      	movs	r1, #0
 802cb50:	f004 f9e6 	bl	8030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 802cb54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802cb56:	f884 7745 	strb.w	r7, [r4, #1861]	@ 0x745
 802cb5a:	4628      	mov	r0, r5
 802cb5c:	f003 f8da 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PTOStatusON.setXY(300, 2);
 802cb60:	2202      	movs	r2, #2
 802cb62:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802cb64:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 802cb68:	f7fc faca 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802cb6c:	2307      	movs	r3, #7
    PTOStatusON.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_20_20_0AA34A_SVG_ID));
 802cb6e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 802cb70:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802cb74:	4631      	mov	r1, r6
 802cb76:	f004 f93c 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802cb7a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 802cb7c:	4628      	mov	r0, r5
 802cb7e:	f003 f8c9 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Alarmpopup.setPosition(10, 35, 300, 102);
 802cb82:	2366      	movs	r3, #102	@ 0x66
 802cb84:	2223      	movs	r2, #35	@ 0x23
 802cb86:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802cb88:	9300      	str	r3, [sp, #0]
 802cb8a:	210a      	movs	r1, #10
 802cb8c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 802cb90:	f7fc f9b4 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802cb94:	f04f 33ff 	mov.w	r3, #4294967295
 802cb98:	f8c4 37a0 	str.w	r3, [r4, #1952]	@ 0x7a0
        borderColor = colorBorder;
 802cb9c:	4b51      	ldr	r3, [pc, #324]	@ (802cce4 <_ZN21ScreenTrailerViewBaseC1Ev+0x9bc>)
 802cb9e:	f8c4 37a4 	str.w	r3, [r4, #1956]	@ 0x7a4
        alpha = newAlpha;
 802cba2:	23ac      	movs	r3, #172	@ 0xac
 802cba4:	991f      	ldr	r1, [sp, #124]	@ 0x7c
        borderSize = size;
 802cba6:	f8a4 87a8 	strh.w	r8, [r4, #1960]	@ 0x7a8
 802cbaa:	f884 379e 	strb.w	r3, [r4, #1950]	@ 0x79e
 802cbae:	4628      	mov	r0, r5
 802cbb0:	f003 f8b0 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Alarmdesctext.setPosition(17, 60, 286, 77);
 802cbb4:	234d      	movs	r3, #77	@ 0x4d
 802cbb6:	223c      	movs	r2, #60	@ 0x3c
 802cbb8:	2111      	movs	r1, #17
 802cbba:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802cbbc:	9300      	str	r3, [sp, #0]
        color = newColor;
 802cbbe:	f04f 497f 	mov.w	r9, #4278190080	@ 0xff000000
 802cbc2:	f44f 738f 	mov.w	r3, #286	@ 0x11e
 802cbc6:	f7fc f999 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 802cbca:	f8c4 97dc 	str.w	r9, [r4, #2012]	@ 0x7dc
        linespace = space;
 802cbce:	f8a4 77e0 	strh.w	r7, [r4, #2016]	@ 0x7e0
        return TextArea::BoundingArea();
 802cbd2:	4630      	mov	r0, r6
 802cbd4:	f7fc fb0a 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802cbd8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802cbdc:	f504 63fd 	add.w	r3, r4, #2024	@ 0x7e8
 802cbe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802cbe4:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(AlarmdesctextBuffer, ALARMDESCTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_FOQA).getText());
 802cbe8:	f604 188e 	addw	r8, r4, #2446	@ 0x98e
 802cbec:	2b00      	cmp	r3, #0
 802cbee:	f43f acbd 	beq.w	802c56c <_ZN21ScreenTrailerViewBaseC1Ev+0x244>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802cbf2:	4b39      	ldr	r3, [pc, #228]	@ (802ccd8 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b0>)
 802cbf4:	881b      	ldrh	r3, [r3, #0]
 802cbf6:	2b08      	cmp	r3, #8
 802cbf8:	f67f acc2 	bls.w	802c580 <_ZN21ScreenTrailerViewBaseC1Ev+0x258>
        return texts->getText(typedTextId);
 802cbfc:	2108      	movs	r1, #8
 802cbfe:	f8da 0000 	ldr.w	r0, [sl]
 802cc02:	f000 f957 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802cc06:	4a36      	ldr	r2, [pc, #216]	@ (802cce0 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b8>)
 802cc08:	4603      	mov	r3, r0
 802cc0a:	2196      	movs	r1, #150	@ 0x96
 802cc0c:	4640      	mov	r0, r8
 802cc0e:	f00b f92f 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802cc12:	4a35      	ldr	r2, [pc, #212]	@ (802cce8 <_ZN21ScreenTrailerViewBaseC1Ev+0x9c0>)
    Alarmdesctext.setTypedText(touchgfx::TypedText(T___SINGLEUSE_69UO));
 802cc14:	9819      	ldr	r0, [sp, #100]	@ 0x64
        wc1 = value;
 802cc16:	f8c4 87f4 	str.w	r8, [r4, #2036]	@ 0x7f4
 802cc1a:	4631      	mov	r1, r6
 802cc1c:	f04f 0809 	mov.w	r8, #9
 802cc20:	9225      	str	r2, [sp, #148]	@ 0x94
 802cc22:	f8ad 8098 	strh.w	r8, [sp, #152]	@ 0x98
 802cc26:	f004 ffc7 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802cc2a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 802cc2c:	4628      	mov	r0, r5
 802cc2e:	f003 f871 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Alarmtitletext.setPosition(17, 38, 286, 22);
 802cc32:	2316      	movs	r3, #22
 802cc34:	2226      	movs	r2, #38	@ 0x26
 802cc36:	2111      	movs	r1, #17
 802cc38:	981a      	ldr	r0, [sp, #104]	@ 0x68
 802cc3a:	9300      	str	r3, [sp, #0]
 802cc3c:	f44f 738f 	mov.w	r3, #286	@ 0x11e
 802cc40:	f7fc f95c 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 802cc44:	f8c4 9828 	str.w	r9, [r4, #2088]	@ 0x828
        linespace = space;
 802cc48:	f8a4 782c 	strh.w	r7, [r4, #2092]	@ 0x82c
        return TextArea::BoundingArea();
 802cc4c:	4630      	mov	r0, r6
 802cc4e:	f7fc facd 	bl	80291ec <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
        boundingArea = calculateBoundingArea();
 802cc52:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802cc56:	f604 0334 	addw	r3, r4, #2100	@ 0x834
 802cc5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 802cc5e:	f8db 3000 	ldr.w	r3, [fp]
    Unicode::snprintf(AlarmtitletextBuffer, ALARMTITLETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LE8V).getText());
 802cc62:	f604 29ba 	addw	r9, r4, #2746	@ 0xaba
 802cc66:	2b00      	cmp	r3, #0
 802cc68:	f43f ac80 	beq.w	802c56c <_ZN21ScreenTrailerViewBaseC1Ev+0x244>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 802cc6c:	4b1a      	ldr	r3, [pc, #104]	@ (802ccd8 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b0>)
 802cc6e:	881b      	ldrh	r3, [r3, #0]
 802cc70:	2b0a      	cmp	r3, #10
 802cc72:	f67f ac85 	bls.w	802c580 <_ZN21ScreenTrailerViewBaseC1Ev+0x258>
        return texts->getText(typedTextId);
 802cc76:	f8da 0000 	ldr.w	r0, [sl]
 802cc7a:	210a      	movs	r1, #10
 802cc7c:	f000 f91a 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 802cc80:	4a17      	ldr	r2, [pc, #92]	@ (802cce0 <_ZN21ScreenTrailerViewBaseC1Ev+0x9b8>)
 802cc82:	4603      	mov	r3, r0
 802cc84:	212d      	movs	r1, #45	@ 0x2d
 802cc86:	4648      	mov	r0, r9
 802cc88:	f00b f8f2 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 802cc8c:	230b      	movs	r3, #11
 802cc8e:	4a16      	ldr	r2, [pc, #88]	@ (802cce8 <_ZN21ScreenTrailerViewBaseC1Ev+0x9c0>)
    Alarmtitletext.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NSUW));
 802cc90:	981a      	ldr	r0, [sp, #104]	@ 0x68
        wc1 = value;
 802cc92:	f8c4 9840 	str.w	r9, [r4, #2112]	@ 0x840
 802cc96:	4631      	mov	r1, r6
 802cc98:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
 802cc9c:	9225      	str	r2, [sp, #148]	@ 0x94
 802cc9e:	f004 ff8b 	bl	8031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 802cca2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802cca4:	4628      	mov	r0, r5
 802cca6:	f003 f835 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    PTOStatusOFF.setXY(300, 2);
 802ccaa:	2202      	movs	r2, #2
 802ccac:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802ccae:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 802ccb2:	f7fc fa25 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 802ccb6:	2308      	movs	r3, #8
    PTOStatusOFF.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ACTION_SETTINGS_20_20_E84141_SVG_ID));
 802ccb8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802ccba:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802ccbe:	4631      	mov	r1, r6
 802ccc0:	f004 f897 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802ccc4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802ccc6:	4628      	mov	r0, r5
 802ccc8:	f003 f824 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    ALARM.setXY(2, 1);
 802cccc:	2201      	movs	r2, #1
 802ccce:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802ccd0:	2102      	movs	r1, #2
 802ccd2:	e00d      	b.n	802ccf0 <_ZN21ScreenTrailerViewBaseC1Ev+0x9c8>
 802ccd4:	fffafafa 	.word	0xfffafafa
 802ccd8:	2000b934 	.word	0x2000b934
 802ccdc:	2000b93c 	.word	0x2000b93c
 802cce0:	08040ee5 	.word	0x08040ee5
 802cce4:	ffff0000 	.word	0xffff0000
 802cce8:	08042200 	.word	0x08042200
 802ccec:	2000b930 	.word	0x2000b930
 802ccf0:	f7fc fa06 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    ALARM.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ALERT_WARNING_AMBER_20_20_CCC041_SVG_ID));
 802ccf4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 802ccf6:	f8ad 8094 	strh.w	r8, [sp, #148]	@ 0x94
 802ccfa:	4631      	mov	r1, r6
 802ccfc:	f004 f879 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 802cd00:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802cd02:	f884 7895 	strb.w	r7, [r4, #2197]	@ 0x895
 802cd06:	4628      	mov	r0, r5
 802cd08:	f003 f804 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    next.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_NAVIGATION_EAST_50_50_000000_SVG_ID));
 802cd0c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802cd0e:	230c      	movs	r3, #12
 802cd10:	4631      	mov	r1, r6
 802cd12:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 802cd16:	f004 f86c 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    next.setPosition(20, 215, 37, 27);
 802cd1a:	231b      	movs	r3, #27
 802cd1c:	22d7      	movs	r2, #215	@ 0xd7
 802cd1e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802cd20:	9300      	str	r3, [sp, #0]
 802cd22:	2114      	movs	r1, #20
 802cd24:	2325      	movs	r3, #37	@ 0x25
 802cd26:	f7fc f8e9 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
    next.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 802cd2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802cd2c:	4639      	mov	r1, r7
 802cd2e:	f004 f8f7 	bl	8030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 802cd32:	4628      	mov	r0, r5
 802cd34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802cd36:	f002 ffed 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 802cd3a:	4620      	mov	r0, r4
 802cd3c:	b029      	add	sp, #164	@ 0xa4
 802cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cd42:	bf00      	nop

0802cd44 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 802cd44:	4800      	ldr	r0, [pc, #0]	@ (802cd48 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 802cd46:	4770      	bx	lr
 802cd48:	08042b1c 	.word	0x08042b1c

0802cd4c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 802cd4c:	2018      	movs	r0, #24
 802cd4e:	4770      	bx	lr

0802cd50 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 802cd50:	2000      	movs	r0, #0
 802cd52:	4770      	bx	lr

0802cd54 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 802cd54:	2000      	movs	r0, #0
 802cd56:	4770      	bx	lr

0802cd58 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 802cd58:	b40e      	push	{r1, r2, r3}
 802cd5a:	b503      	push	{r0, r1, lr}
 802cd5c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 802cd5e:	2100      	movs	r1, #0
{
 802cd60:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 802cd64:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 802cd66:	f008 ff67 	bl	8035c38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 802cd6a:	b002      	add	sp, #8
 802cd6c:	f85d eb04 	ldr.w	lr, [sp], #4
 802cd70:	b003      	add	sp, #12
 802cd72:	4770      	bx	lr

0802cd74 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 802cd74:	b40c      	push	{r2, r3}
 802cd76:	b507      	push	{r0, r1, r2, lr}
 802cd78:	ab04      	add	r3, sp, #16
 802cd7a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 802cd7e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 802cd80:	f008 ff5a 	bl	8035c38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 802cd84:	b003      	add	sp, #12
 802cd86:	f85d eb04 	ldr.w	lr, [sp], #4
 802cd8a:	b002      	add	sp, #8
 802cd8c:	4770      	bx	lr
	...

0802cd90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 802cd90:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 802cd92:	b510      	push	{r4, lr}
 802cd94:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 802cd96:	b373      	cbz	r3, 802cdf6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 802cd98:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 802cd9a:	b92b      	cbnz	r3, 802cda8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 802cd9c:	4b18      	ldr	r3, [pc, #96]	@ (802ce00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 802cd9e:	4a19      	ldr	r2, [pc, #100]	@ (802ce04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
 802cda0:	21c5      	movs	r1, #197	@ 0xc5
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 802cda2:	4819      	ldr	r0, [pc, #100]	@ (802ce08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 802cda4:	f00f fbc0 	bl	803c528 <__assert_func>
            return buffer[pos];
 802cda8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 802cdaa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802cdae:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 802cdb0:	b30b      	cbz	r3, 802cdf6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 802cdb2:	f00a fab4 	bl	803731e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 802cdb6:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 802cdb8:	2b01      	cmp	r3, #1
 802cdba:	d803      	bhi.n	802cdc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 802cdbc:	4b13      	ldr	r3, [pc, #76]	@ (802ce0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 802cdbe:	4a14      	ldr	r2, [pc, #80]	@ (802ce10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 802cdc0:	21cb      	movs	r1, #203	@ 0xcb
 802cdc2:	e7ee      	b.n	802cda2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 802cdc4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 802cdc6:	1c53      	adds	r3, r2, #1
 802cdc8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 802cdca:	2b09      	cmp	r3, #9
 802cdcc:	4619      	mov	r1, r3
 802cdce:	bf88      	it	hi
 802cdd0:	f1a3 010a 	subhi.w	r1, r3, #10
 802cdd4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 802cdd8:	f640 103f 	movw	r0, #2367	@ 0x93f
 802cddc:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 802cdde:	4281      	cmp	r1, r0
 802cde0:	d109      	bne.n	802cdf6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 802cde2:	2b0a      	cmp	r3, #10
 802cde4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 802cde8:	bf28      	it	cs
 802cdea:	2300      	movcs	r3, #0
 802cdec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 802cdf0:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 802cdf2:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 802cdf4:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 802cdf6:	4620      	mov	r0, r4
}
 802cdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 802cdfc:	f00a b992 	b.w	8037124 <_ZN8touchgfx12TextProvider11getNextCharEv>
 802ce00:	08040ee8 	.word	0x08040ee8
 802ce04:	08040ef1 	.word	0x08040ef1
 802ce08:	08040f9c 	.word	0x08040f9c
 802ce0c:	08040fe1 	.word	0x08040fe1
 802ce10:	08040fef 	.word	0x08040fef

0802ce14 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 802ce14:	f00a b94d 	b.w	80370b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0802ce18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 802ce18:	b510      	push	{r4, lr}
 802ce1a:	b086      	sub	sp, #24
 802ce1c:	ac02      	add	r4, sp, #8
 802ce1e:	e884 0006 	stmia.w	r4, {r1, r2}
 802ce22:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 802ce24:	ab0a      	add	r3, sp, #40	@ 0x28
 802ce26:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 802ce28:	9301      	str	r3, [sp, #4]
 802ce2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ce2c:	9300      	str	r3, [sp, #0]
 802ce2e:	4621      	mov	r1, r4
 802ce30:	9b08      	ldr	r3, [sp, #32]
 802ce32:	f007 fb47 	bl	80344c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 802ce36:	b006      	add	sp, #24
 802ce38:	bd10      	pop	{r4, pc}
	...

0802ce3c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 802ce3c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 802ce3e:	bb18      	cbnz	r0, 802ce88 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 802ce40:	4b12      	ldr	r3, [pc, #72]	@ (802ce8c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 802ce42:	4813      	ldr	r0, [pc, #76]	@ (802ce90 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 802ce44:	681c      	ldr	r4, [r3, #0]
 802ce46:	4913      	ldr	r1, [pc, #76]	@ (802ce94 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 802ce48:	b1b4      	cbz	r4, 802ce78 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 802ce4a:	6822      	ldr	r2, [r4, #0]
 802ce4c:	4422      	add	r2, r4
 802ce4e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 802ce50:	6862      	ldr	r2, [r4, #4]
 802ce52:	4422      	add	r2, r4
 802ce54:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 802ce56:	68a2      	ldr	r2, [r4, #8]
 802ce58:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 802ce5a:	4b0f      	ldr	r3, [pc, #60]	@ (802ce98 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 802ce5c:	2200      	movs	r2, #0
 802ce5e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 802ce60:	f000 f838 	bl	802ced4 <_ZN17TypedTextDatabase8getFontsEv>
 802ce64:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 802ce66:	f000 f833 	bl	802ced0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 802ce6a:	4b0c      	ldr	r3, [pc, #48]	@ (802ce9c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 802ce6c:	601c      	str	r4, [r3, #0]
        fonts = f;
 802ce6e:	4b0c      	ldr	r3, [pc, #48]	@ (802cea0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 802ce70:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 802ce72:	4b0c      	ldr	r3, [pc, #48]	@ (802cea4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 802ce74:	8018      	strh	r0, [r3, #0]
    }
}
 802ce76:	e007      	b.n	802ce88 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 802ce78:	4b0b      	ldr	r3, [pc, #44]	@ (802cea8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 802ce7a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 802ce7c:	4b0b      	ldr	r3, [pc, #44]	@ (802ceac <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 802ce7e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 802ce80:	4b0b      	ldr	r3, [pc, #44]	@ (802ceb0 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 802ce82:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 802ce84:	2c00      	cmp	r4, #0
 802ce86:	d1e8      	bne.n	802ce5a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 802ce88:	bd38      	pop	{r3, r4, r5, pc}
 802ce8a:	bf00      	nop
 802ce8c:	20009dac 	.word	0x20009dac
 802ce90:	20009da4 	.word	0x20009da4
 802ce94:	20009da0 	.word	0x20009da0
 802ce98:	20009da8 	.word	0x20009da8
 802ce9c:	2000b930 	.word	0x2000b930
 802cea0:	2000b938 	.word	0x2000b938
 802cea4:	2000b934 	.word	0x2000b934
 802cea8:	081b5818 	.word	0x081b5818
 802ceac:	081b5650 	.word	0x081b5650
 802ceb0:	081b5b78 	.word	0x081b5b78

0802ceb4 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 802ceb4:	4b04      	ldr	r3, [pc, #16]	@ (802cec8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 802ceb6:	681b      	ldr	r3, [r3, #0]
 802ceb8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 802cebc:	4b03      	ldr	r3, [pc, #12]	@ (802cecc <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 802cebe:	681b      	ldr	r3, [r3, #0]
}
 802cec0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 802cec4:	4770      	bx	lr
 802cec6:	bf00      	nop
 802cec8:	20009da0 	.word	0x20009da0
 802cecc:	20009da4 	.word	0x20009da4

0802ced0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 802ced0:	2072      	movs	r0, #114	@ 0x72
 802ced2:	4770      	bx	lr

0802ced4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 802ced4:	4800      	ldr	r0, [pc, #0]	@ (802ced8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 802ced6:	4770      	bx	lr
 802ced8:	20009db0 	.word	0x20009db0

0802cedc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 1:
        touchgfx_fonts[1] = &(getFont_GemunuLibre_Regular_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 802cedc:	b510      	push	{r4, lr}
    &(getFont_times_10_4bpp()),
 802cede:	f7fa ffdf 	bl	8027ea0 <_Z21getFont_times_10_4bppv>
};
 802cee2:	4c03      	ldr	r4, [pc, #12]	@ (802cef0 <_GLOBAL__sub_I_touchgfx_fonts+0x14>)
 802cee4:	6020      	str	r0, [r4, #0]
    &(getFont_GemunuLibre_Regular_20_4bpp())
 802cee6:	f7fa ff9d 	bl	8027e24 <_Z35getFont_GemunuLibre_Regular_20_4bppv>
};
 802ceea:	6060      	str	r0, [r4, #4]
} // namespace TypedTextDatabase
 802ceec:	bd10      	pop	{r4, pc}
 802ceee:	bf00      	nop
 802cef0:	20009db0 	.word	0x20009db0

0802cef4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 802cef4:	4770      	bx	lr

0802cef6 <_ZN19FrontendApplicationD0Ev>:
 802cef6:	b510      	push	{r4, lr}
 802cef8:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 802cefc:	4604      	mov	r4, r0
 802cefe:	f00f faf4 	bl	803c4ea <_ZdlPvj>
 802cf02:	4620      	mov	r0, r4
 802cf04:	bd10      	pop	{r4, pc}

0802cf06 <_ZN19FrontendApplication15handleTickEventEv>:
    void gotoMenuLayer1Screen() { gotoMenuLayer1ScreenNoTransition(); }
    void gotoMenuLayer2Screen() { gotoMenuLayer2ScreenNoTransition(); }
    void gotoMenuLayer3Screen() { gotoMenuLayer3ScreenNoTransition(); }
    //void gotoTrailer() { gotoScreenTrailerScreenNoTransition(); }

    virtual void handleTickEvent()
 802cf06:	b510      	push	{r4, lr}
 802cf08:	4604      	mov	r4, r0
    {
        model.tick();
 802cf0a:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 802cf0e:	f001 fadf 	bl	802e4d0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 802cf12:	4620      	mov	r0, r4
    }
 802cf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 802cf18:	f007 bf94 	b.w	8034e44 <_ZN8touchgfx11Application15handleTickEventEv>

0802cf1c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 802cf1c:	b510      	push	{r4, lr}
 802cf1e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 802cf20:	f7fb f878 	bl	8028014 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 802cf24:	4b01      	ldr	r3, [pc, #4]	@ (802cf2c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 802cf26:	6023      	str	r3, [r4, #0]
{

}
 802cf28:	4620      	mov	r0, r4
 802cf2a:	bd10      	pop	{r4, pc}
 802cf2c:	08042d04 	.word	0x08042d04

0802cf30 <_ZN17MenuItemContainerD1Ev>:

class MenuItemContainer : public MenuItemContainerBase
{
public:
    MenuItemContainer();
    virtual ~MenuItemContainer() {}
 802cf30:	b510      	push	{r4, lr}
 802cf32:	4b03      	ldr	r3, [pc, #12]	@ (802cf40 <_ZN17MenuItemContainerD1Ev+0x10>)
 802cf34:	6003      	str	r3, [r0, #0]
 802cf36:	4604      	mov	r4, r0
 802cf38:	f7fb ff7b 	bl	8028e32 <_ZN21MenuItemContainerBaseD1Ev>
 802cf3c:	4620      	mov	r0, r4
 802cf3e:	bd10      	pop	{r4, pc}
 802cf40:	08042d58 	.word	0x08042d58

0802cf44 <_ZN17MenuItemContainerD0Ev>:
 802cf44:	b510      	push	{r4, lr}
 802cf46:	4604      	mov	r4, r0
 802cf48:	f7ff fff2 	bl	802cf30 <_ZN17MenuItemContainerD1Ev>
 802cf4c:	4620      	mov	r0, r4
 802cf4e:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 802cf52:	f00f faca 	bl	803c4ea <_ZdlPvj>
 802cf56:	4620      	mov	r0, r4
 802cf58:	bd10      	pop	{r4, pc}
	...

0802cf5c <_ZN17MenuItemContainerC1Ev>:
#include <gui/containers/MenuItemContainer.hpp>
#include <touchgfx/Color.hpp>

MenuItemContainer::MenuItemContainer()
 802cf5c:	b510      	push	{r4, lr}
 802cf5e:	4604      	mov	r4, r0
 802cf60:	f7fb fffc 	bl	8028f5c <_ZN21MenuItemContainerBaseC1Ev>
 802cf64:	4b03      	ldr	r3, [pc, #12]	@ (802cf74 <_ZN17MenuItemContainerC1Ev+0x18>)
 802cf66:	6023      	str	r3, [r4, #0]
{
	// Initialize the buffer
	textBuffer[0] = 0;
 802cf68:	2300      	movs	r3, #0
 802cf6a:	f8a4 30ec 	strh.w	r3, [r4, #236]	@ 0xec
}
 802cf6e:	4620      	mov	r0, r4
 802cf70:	bd10      	pop	{r4, pc}
 802cf72:	bf00      	nop
 802cf74:	08042d58 	.word	0x08042d58

0802cf78 <_ZN17MenuItemContainer11setMenuTextEPKc>:
{
    MenuItemContainerBase::initialize();
}

void MenuItemContainer::setMenuText(const char* text)
{
 802cf78:	b538      	push	{r3, r4, r5, lr}
    //menuItemText.setWildcard(text);

	touchgfx::Unicode::strncpy(textBuffer, text, 99);
 802cf7a:	f100 05ec 	add.w	r5, r0, #236	@ 0xec
{
 802cf7e:	4604      	mov	r4, r0
	touchgfx::Unicode::strncpy(textBuffer, text, 99);
 802cf80:	2263      	movs	r2, #99	@ 0x63
 802cf82:	4628      	mov	r0, r5
 802cf84:	f00a fc13 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	textBuffer[99] = 0; // Null terminate
 802cf88:	2300      	movs	r3, #0
 802cf8a:	f8a4 31b2 	strh.w	r3, [r4, #434]	@ 0x1b2
 802cf8e:	f8c4 50d4 	str.w	r5, [r4, #212]	@ 0xd4
	//static touchgfx::Unicode::UnicodeChar textBuffer[100]; // Adjust size as needed
	//touchgfx::Unicode::strncpy(textBuffer, text, 99);
	//textBuffer[99] = 0; // Null terminate
	//menuItemText.setWildcard(textBuffer);

    menuItemText.invalidate();
 802cf92:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
}
 802cf96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    menuItemText.invalidate();
 802cf9a:	f008 bf77 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
	...

0802cfa0 <_ZN17MenuItemContainer14setHighlightedEb>:

void MenuItemContainer::setHighlighted(bool highlighted)
{
 802cfa0:	b510      	push	{r4, lr}
 802cfa2:	4604      	mov	r4, r0
    if (highlighted) {
 802cfa4:	b989      	cbnz	r1, 802cfca <_ZN17MenuItemContainer14setHighlightedEb+0x2a>
 802cfa6:	4b0c      	ldr	r3, [pc, #48]	@ (802cfd8 <_ZN17MenuItemContainer14setHighlightedEb+0x38>)
 802cfa8:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 802cfac:	4619      	mov	r1, r3
        menuItemBackground.setBorderColor(touchgfx::Color::getColorFromRGB(180,195,214)); // Hide border by matching background
        menuItemText.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0)); // Black text
    }

    // Invalidate elements
    menuItemBackground.invalidate();
 802cfae:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
        borderColor = colorBorder;
 802cfb2:	e9c4 3115 	strd	r3, r1, [r4, #84]	@ 0x54
        color = newColor;
 802cfb6:	f8c4 20bc 	str.w	r2, [r4, #188]	@ 0xbc
 802cfba:	f008 ff67 	bl	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
    menuItemText.invalidate();
 802cfbe:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
}
 802cfc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    menuItemText.invalidate();
 802cfc6:	f008 bf61 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802cfca:	4b04      	ldr	r3, [pc, #16]	@ (802cfdc <_ZN17MenuItemContainer14setHighlightedEb+0x3c>)
 802cfcc:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
 802cfd0:	f04f 32ff 	mov.w	r2, #4294967295
 802cfd4:	e7eb      	b.n	802cfae <_ZN17MenuItemContainer14setHighlightedEb+0xe>
 802cfd6:	bf00      	nop
 802cfd8:	ffb4c3d6 	.word	0xffb4c3d6
 802cfdc:	ff2869b8 	.word	0xff2869b8

0802cfe0 <_ZN17MenuItemContainer10initializeEv>:
    MenuItemContainerBase::initialize();
 802cfe0:	f7fb bf28 	b.w	8028e34 <_ZN21MenuItemContainerBase10initializeEv>

0802cfe4 <_ZN13ModelListener18systemStateChangedEv>:
    {
        model = m;
    }

    // System state change notification
    virtual void systemStateChanged() {}
 802cfe4:	4770      	bx	lr

0802cfe6 <_ZN19DiagnosticPresenterD1Ev>:
    virtual ~DiagnosticPresenter() {}
 802cfe6:	4770      	bx	lr

0802cfe8 <_ZThn4_N19DiagnosticPresenterD1Ev>:
 802cfe8:	3804      	subs	r0, #4
 802cfea:	4770      	bx	lr

0802cfec <_ZN19DiagnosticPresenter10deactivateEv>:
}

void DiagnosticPresenter::activate()
{

}
 802cfec:	4770      	bx	lr

0802cfee <_ZN19DiagnosticPresenterD0Ev>:
 802cfee:	b510      	push	{r4, lr}
 802cff0:	2114      	movs	r1, #20
 802cff2:	4604      	mov	r4, r0
 802cff4:	f00f fa79 	bl	803c4ea <_ZdlPvj>
 802cff8:	4620      	mov	r0, r4
 802cffa:	bd10      	pop	{r4, pc}

0802cffc <_ZThn4_N19DiagnosticPresenterD0Ev>:
 802cffc:	f1a0 0004 	sub.w	r0, r0, #4
 802d000:	e7f5      	b.n	802cfee <_ZN19DiagnosticPresenterD0Ev>
	...

0802d004 <_ZN19DiagnosticPresenterC1ER14DiagnosticView>:
    ModelListener() : model(0) {}
 802d004:	2200      	movs	r2, #0
 802d006:	6082      	str	r2, [r0, #8]
    : view(v)
 802d008:	4a02      	ldr	r2, [pc, #8]	@ (802d014 <_ZN19DiagnosticPresenterC1ER14DiagnosticView+0x10>)
 802d00a:	6002      	str	r2, [r0, #0]
 802d00c:	3218      	adds	r2, #24
 802d00e:	6042      	str	r2, [r0, #4]
 802d010:	60c1      	str	r1, [r0, #12]
}
 802d012:	4770      	bx	lr
 802d014:	08042dec 	.word	0x08042dec

0802d018 <_ZN14DiagnosticView14tearDownScreenEv>:
}

void DiagnosticView::tearDownScreen()
{
    DiagnosticViewBase::tearDownScreen();
}
 802d018:	4770      	bx	lr
	...

0802d01c <_ZN14DiagnosticViewD1Ev>:

class DiagnosticView : public DiagnosticViewBase
{
public:
    DiagnosticView();
    virtual ~DiagnosticView() {}
 802d01c:	b510      	push	{r4, lr}
 802d01e:	4b03      	ldr	r3, [pc, #12]	@ (802d02c <_ZN14DiagnosticViewD1Ev+0x10>)
 802d020:	6003      	str	r3, [r0, #0]
 802d022:	4604      	mov	r4, r0
 802d024:	f7fc f87e 	bl	8029124 <_ZN18DiagnosticViewBaseD1Ev>
 802d028:	4620      	mov	r0, r4
 802d02a:	bd10      	pop	{r4, pc}
 802d02c:	08042e18 	.word	0x08042e18

0802d030 <_ZN14DiagnosticViewD0Ev>:
 802d030:	b510      	push	{r4, lr}
 802d032:	4604      	mov	r4, r0
 802d034:	f7ff fff2 	bl	802d01c <_ZN14DiagnosticViewD1Ev>
 802d038:	4620      	mov	r0, r4
 802d03a:	f640 111c 	movw	r1, #2332	@ 0x91c
 802d03e:	f00f fa54 	bl	803c4ea <_ZdlPvj>
 802d042:	4620      	mov	r0, r4
 802d044:	bd10      	pop	{r4, pc}
	...

0802d048 <_ZN14DiagnosticViewC1Ev>:
DiagnosticView::DiagnosticView()
 802d048:	b510      	push	{r4, lr}
 802d04a:	4604      	mov	r4, r0
 802d04c:	f7fc f902 	bl	8029254 <_ZN18DiagnosticViewBaseC1Ev>
 802d050:	4b01      	ldr	r3, [pc, #4]	@ (802d058 <_ZN14DiagnosticViewC1Ev+0x10>)
 802d052:	6023      	str	r3, [r4, #0]
}
 802d054:	4620      	mov	r0, r4
 802d056:	bd10      	pop	{r4, pc}
 802d058:	08042e18 	.word	0x08042e18

0802d05c <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv>:
}

void DiagnosticView::forceUpdateDiagnosticDisplays()
{
    // Get current vehicle type from config
    uint8_t currentVehicleType = S35_config[TOUCHGFX_VEHICLETYPE];
 802d05c:	4a38      	ldr	r2, [pc, #224]	@ (802d140 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xe4>)
{
 802d05e:	b538      	push	{r3, r4, r5, lr}
    uint8_t currentVehicleType = S35_config[TOUCHGFX_VEHICLETYPE];
 802d060:	8812      	ldrh	r2, [r2, #0]
 802d062:	4b38      	ldr	r3, [pc, #224]	@ (802d144 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xe8>)
 802d064:	f813 5012 	ldrb.w	r5, [r3, r2, lsl #1]

    // Roll (Inclinometer) - handle edge case for 65535
    if (j1939Roll == 0xFFFF || j1939Roll == 65535)
 802d068:	4b37      	ldr	r3, [pc, #220]	@ (802d148 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xec>)
 802d06a:	881b      	ldrh	r3, [r3, #0]
 802d06c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802d070:	4293      	cmp	r3, r2
{
 802d072:	4604      	mov	r4, r0
 802d074:	f600 000c 	addw	r0, r0, #2060	@ 0x80c
    if (j1939Roll == 0xFFFF || j1939Roll == 65535)
 802d078:	d13e      	bne.n	802d0f8 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x9c>
    {
        Unicode::snprintf(InclotxtBuffer, INCLOTXT_SIZE, "----");
 802d07a:	4a34      	ldr	r2, [pc, #208]	@ (802d14c <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xf0>)
 802d07c:	210a      	movs	r1, #10
 802d07e:	f00a fef7 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    {
        Unicode::snprintf(InclotxtBuffer, INCLOTXT_SIZE, "%d Deg", (j1939Roll - 64));
    }

    // Truck Hydraulic Pressure
    if (j1939Truck_Press == 0xFFFF || j1939Truck_Press == 65535)
 802d082:	4b33      	ldr	r3, [pc, #204]	@ (802d150 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xf4>)
 802d084:	881b      	ldrh	r3, [r3, #0]
 802d086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802d08a:	4293      	cmp	r3, r2
 802d08c:	f504 6002 	add.w	r0, r4, #2080	@ 0x820
 802d090:	d138      	bne.n	802d104 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xa8>
    {
        Unicode::snprintf(HydPresstxtBuffer, HYDPRESSTXT_SIZE, "0 bar");
 802d092:	4a30      	ldr	r2, [pc, #192]	@ (802d154 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xf8>)
 802d094:	2119      	movs	r1, #25
 802d096:	f00a feeb 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    {
        Unicode::snprintf(HydPresstxtBuffer, HYDPRESSTXT_SIZE, "%d bar", j1939Truck_Press);
    }

    // Trailer Hydraulic Pressure (show NaN if Truck-only mode)
    if (currentVehicleType == 0) // Truck only
 802d09a:	f604 00b6 	addw	r0, r4, #2230	@ 0x8b6
 802d09e:	2d00      	cmp	r5, #0
 802d0a0:	d135      	bne.n	802d10e <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xb2>
    {
        Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "NaN");
 802d0a2:	4a2d      	ldr	r2, [pc, #180]	@ (802d158 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xfc>)
    }
    else if (j1939Trailer_Press == 0xFFFF || j1939Trailer_Press == 65535)
    {
        Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "0 bar");
 802d0a4:	2119      	movs	r1, #25
 802d0a6:	f00a fee3 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    {
        Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "%d bar", j1939Trailer_Press);
    }

    // Truck Latch/Proximity - show LATCHED/UNLATCHED
    if (j1939TruckProximity == 0xFFFF || j1939TruckProximity == 65535)
 802d0aa:	4b2c      	ldr	r3, [pc, #176]	@ (802d15c <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x100>)
 802d0ac:	881b      	ldrh	r3, [r3, #0]
 802d0ae:	3b01      	subs	r3, #1
 802d0b0:	b29b      	uxth	r3, r3
 802d0b2:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802d0b6:	4293      	cmp	r3, r2
    {
        Unicode::strncpy(LatchtxtBuffer, "OPEN", LATCHTXT_SIZE);
 802d0b8:	bf8c      	ite	hi
 802d0ba:	4929      	ldrhi	r1, [pc, #164]	@ (802d160 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x104>)
    }
    else if (j1939TruckProximity > 0)
    {
        Unicode::strncpy(LatchtxtBuffer, "LATCHED", LATCHTXT_SIZE);
 802d0bc:	4929      	ldrls	r1, [pc, #164]	@ (802d164 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x108>)
 802d0be:	f604 0052 	addw	r0, r4, #2130	@ 0x852
        Unicode::strncpy(LatchtxtBuffer, "OPEN", LATCHTXT_SIZE);
 802d0c2:	2219      	movs	r2, #25
        Unicode::strncpy(LatchtxtBuffer, "LATCHED", LATCHTXT_SIZE);
 802d0c4:	f00a fb73 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    {
        Unicode::strncpy(LatchtxtBuffer, "OPEN", LATCHTXT_SIZE);
    }

    // Trailer Latch/Proximity (show NaN if Truck-only mode)
    if (currentVehicleType == 0) // Truck only
 802d0c8:	f604 0084 	addw	r0, r4, #2180	@ 0x884
 802d0cc:	bb65      	cbnz	r5, 802d128 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xcc>
    {
        Unicode::strncpy(Latchtxt_trailerBuffer, "NaN", LATCHTXT_TRAILER_SIZE);
 802d0ce:	4922      	ldr	r1, [pc, #136]	@ (802d158 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xfc>)
 802d0d0:	2219      	movs	r2, #25
    {
        Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
    }
    else if (j1939TrailerProximity > 0)
    {
        Unicode::strncpy(Latchtxt_trailerBuffer, "LATCHED", LATCHTXT_TRAILER_SIZE);
 802d0d2:	f00a fb6c 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    {
        Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
    }

    // E-Stop Status - show ACTIVE/INACTIVE
    if (j1939EStopStatus == 0xFFFF || j1939EStopStatus == 65535)
 802d0d6:	4b24      	ldr	r3, [pc, #144]	@ (802d168 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x10c>)
 802d0d8:	881b      	ldrh	r3, [r3, #0]
 802d0da:	3b01      	subs	r3, #1
 802d0dc:	b29b      	uxth	r3, r3
 802d0de:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802d0e2:	4293      	cmp	r3, r2
 802d0e4:	f604 00e8 	addw	r0, r4, #2280	@ 0x8e8
    {
        Unicode::strncpy(EStoptxtBuffer, "INACTIVE", ESTOPTXT_SIZE);
 802d0e8:	bf8c      	ite	hi
 802d0ea:	4920      	ldrhi	r1, [pc, #128]	@ (802d16c <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x110>)
    }
    else if (j1939EStopStatus > 0)
    {
        Unicode::strncpy(EStoptxtBuffer, "ACTIVE", ESTOPTXT_SIZE);
 802d0ec:	4920      	ldrls	r1, [pc, #128]	@ (802d170 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x114>)
    }
    else
    {
        Unicode::strncpy(EStoptxtBuffer, "INACTIVE", ESTOPTXT_SIZE);
    }
}
 802d0ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Unicode::strncpy(EStoptxtBuffer, "INACTIVE", ESTOPTXT_SIZE);
 802d0f2:	2219      	movs	r2, #25
        Unicode::strncpy(EStoptxtBuffer, "ACTIVE", ESTOPTXT_SIZE);
 802d0f4:	f00a bb5b 	b.w	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        Unicode::snprintf(InclotxtBuffer, INCLOTXT_SIZE, "%d Deg", (j1939Roll - 64));
 802d0f8:	4a1e      	ldr	r2, [pc, #120]	@ (802d174 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x118>)
 802d0fa:	3b40      	subs	r3, #64	@ 0x40
 802d0fc:	210a      	movs	r1, #10
 802d0fe:	f00a feb7 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802d102:	e7be      	b.n	802d082 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x26>
        Unicode::snprintf(HydPresstxtBuffer, HYDPRESSTXT_SIZE, "%d bar", j1939Truck_Press);
 802d104:	4a1c      	ldr	r2, [pc, #112]	@ (802d178 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x11c>)
 802d106:	2119      	movs	r1, #25
 802d108:	f00a feb2 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802d10c:	e7c5      	b.n	802d09a <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x3e>
    else if (j1939Trailer_Press == 0xFFFF || j1939Trailer_Press == 65535)
 802d10e:	4b1b      	ldr	r3, [pc, #108]	@ (802d17c <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x120>)
 802d110:	881b      	ldrh	r3, [r3, #0]
 802d112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802d116:	4293      	cmp	r3, r2
 802d118:	d101      	bne.n	802d11e <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xc2>
        Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "0 bar");
 802d11a:	4a0e      	ldr	r2, [pc, #56]	@ (802d154 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0xf8>)
 802d11c:	e7c2      	b.n	802d0a4 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x48>
        Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "%d bar", j1939Trailer_Press);
 802d11e:	4a16      	ldr	r2, [pc, #88]	@ (802d178 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x11c>)
 802d120:	2119      	movs	r1, #25
 802d122:	f00a fea5 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802d126:	e7c0      	b.n	802d0aa <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x4e>
    else if (j1939TrailerProximity == 0xFFFF || j1939TrailerProximity == 65535)
 802d128:	4b15      	ldr	r3, [pc, #84]	@ (802d180 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x124>)
 802d12a:	881b      	ldrh	r3, [r3, #0]
 802d12c:	3b01      	subs	r3, #1
 802d12e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802d132:	b29b      	uxth	r3, r3
 802d134:	4293      	cmp	r3, r2
        Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
 802d136:	bf8c      	ite	hi
 802d138:	4909      	ldrhi	r1, [pc, #36]	@ (802d160 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x104>)
        Unicode::strncpy(Latchtxt_trailerBuffer, "LATCHED", LATCHTXT_TRAILER_SIZE);
 802d13a:	490a      	ldrls	r1, [pc, #40]	@ (802d164 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x108>)
        Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
 802d13c:	2219      	movs	r2, #25
        Unicode::strncpy(Latchtxt_trailerBuffer, "LATCHED", LATCHTXT_TRAILER_SIZE);
 802d13e:	e7c8      	b.n	802d0d2 <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv+0x76>
 802d140:	08041e68 	.word	0x08041e68
 802d144:	20001e72 	.word	0x20001e72
 802d148:	20001dc6 	.word	0x20001dc6
 802d14c:	080410c1 	.word	0x080410c1
 802d150:	20001db2 	.word	0x20001db2
 802d154:	080410cd 	.word	0x080410cd
 802d158:	080410da 	.word	0x080410da
 802d15c:	20001db0 	.word	0x20001db0
 802d160:	080410de 	.word	0x080410de
 802d164:	080410e3 	.word	0x080410e3
 802d168:	20001dc2 	.word	0x20001dc2
 802d16c:	080410eb 	.word	0x080410eb
 802d170:	08041325 	.word	0x08041325
 802d174:	080410c6 	.word	0x080410c6
 802d178:	080410d3 	.word	0x080410d3
 802d17c:	20001da6 	.word	0x20001da6
 802d180:	20001da4 	.word	0x20001da4

0802d184 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv>:

bool DiagnosticView::updateDiagnosticDisplays()
{
 802d184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    static uint16_t lastEStopStatus = 0xFFFF;
    static uint8_t lastVehicleType = 0xFF;
    static bool firstRun = true;

    // Get current vehicle type from config
    uint8_t currentVehicleType = S35_config[TOUCHGFX_VEHICLETYPE];
 802d188:	4a5f      	ldr	r2, [pc, #380]	@ (802d308 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x184>)
 802d18a:	4b60      	ldr	r3, [pc, #384]	@ (802d30c <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x188>)
 802d18c:	8812      	ldrh	r2, [r2, #0]

    // Check if vehicle type changed (affects trailer display)
    if (currentVehicleType != lastVehicleType || firstRun)
 802d18e:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 802d368 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1e4>
    uint8_t currentVehicleType = S35_config[TOUCHGFX_VEHICLETYPE];
 802d192:	f813 8012 	ldrb.w	r8, [r3, r2, lsl #1]
    if (currentVehicleType != lastVehicleType || firstRun)
 802d196:	f899 3000 	ldrb.w	r3, [r9]
 802d19a:	4d5d      	ldr	r5, [pc, #372]	@ (802d310 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x18c>)
 802d19c:	4543      	cmp	r3, r8
{
 802d19e:	4604      	mov	r4, r0
    if (currentVehicleType != lastVehicleType || firstRun)
 802d1a0:	d101      	bne.n	802d1a6 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x22>
 802d1a2:	7828      	ldrb	r0, [r5, #0]
 802d1a4:	b110      	cbz	r0, 802d1ac <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x28>
    {
        lastVehicleType = currentVehicleType;
 802d1a6:	f889 8000 	strb.w	r8, [r9]
        changed = true;
 802d1aa:	2001      	movs	r0, #1
    }

    // Roll (Inclinometer) - only update if changed
    if (j1939Roll != lastRoll || firstRun)
 802d1ac:	4f59      	ldr	r7, [pc, #356]	@ (802d314 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x190>)
 802d1ae:	4e5a      	ldr	r6, [pc, #360]	@ (802d318 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x194>)
 802d1b0:	883b      	ldrh	r3, [r7, #0]
 802d1b2:	8832      	ldrh	r2, [r6, #0]
 802d1b4:	429a      	cmp	r2, r3
 802d1b6:	d101      	bne.n	802d1bc <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x38>
 802d1b8:	782a      	ldrb	r2, [r5, #0]
 802d1ba:	b162      	cbz	r2, 802d1d6 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x52>
    {
        if (j1939Roll == 0xFFFF || j1939Roll == 65535)
 802d1bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802d1c0:	4293      	cmp	r3, r2
 802d1c2:	f604 000c 	addw	r0, r4, #2060	@ 0x80c
 802d1c6:	d17f      	bne.n	802d2c8 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x144>
        {
            Unicode::snprintf(InclotxtBuffer, INCLOTXT_SIZE, "----");
 802d1c8:	4a54      	ldr	r2, [pc, #336]	@ (802d31c <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x198>)
 802d1ca:	210a      	movs	r1, #10
 802d1cc:	f00a fe50 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        }
        else
        {
            Unicode::snprintf(InclotxtBuffer, INCLOTXT_SIZE, "%d Deg", (j1939Roll - 64));
        }
        lastRoll = j1939Roll;
 802d1d0:	883b      	ldrh	r3, [r7, #0]
 802d1d2:	8033      	strh	r3, [r6, #0]
        changed = true;
 802d1d4:	2001      	movs	r0, #1
    }

    // Truck Hydraulic Pressure - only update if changed
    if (j1939Truck_Press != lastTruckPress || firstRun)
 802d1d6:	4f52      	ldr	r7, [pc, #328]	@ (802d320 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x19c>)
 802d1d8:	4e52      	ldr	r6, [pc, #328]	@ (802d324 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1a0>)
 802d1da:	883b      	ldrh	r3, [r7, #0]
 802d1dc:	8832      	ldrh	r2, [r6, #0]
 802d1de:	429a      	cmp	r2, r3
 802d1e0:	d101      	bne.n	802d1e6 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x62>
 802d1e2:	782a      	ldrb	r2, [r5, #0]
 802d1e4:	b162      	cbz	r2, 802d200 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x7c>
    {
        if (j1939Truck_Press == 0xFFFF || j1939Truck_Press == 65535)
 802d1e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802d1ea:	4293      	cmp	r3, r2
 802d1ec:	f504 6002 	add.w	r0, r4, #2080	@ 0x820
 802d1f0:	d170      	bne.n	802d2d4 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x150>
        {
            Unicode::snprintf(HydPresstxtBuffer, HYDPRESSTXT_SIZE, "0 bar");
 802d1f2:	4a4d      	ldr	r2, [pc, #308]	@ (802d328 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1a4>)
 802d1f4:	2119      	movs	r1, #25
 802d1f6:	f00a fe3b 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        }
        else
        {
            Unicode::snprintf(HydPresstxtBuffer, HYDPRESSTXT_SIZE, "%d bar", j1939Truck_Press);
        }
        lastTruckPress = j1939Truck_Press;
 802d1fa:	883b      	ldrh	r3, [r7, #0]
 802d1fc:	8033      	strh	r3, [r6, #0]
        changed = true;
 802d1fe:	2001      	movs	r0, #1
    }

    // Trailer Hydraulic Pressure - only update if changed or vehicle type changed
    if (j1939Trailer_Press != lastTrailerPress || currentVehicleType != lastVehicleType || firstRun)
 802d200:	4f4a      	ldr	r7, [pc, #296]	@ (802d32c <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1a8>)
 802d202:	4e4b      	ldr	r6, [pc, #300]	@ (802d330 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1ac>)
 802d204:	883b      	ldrh	r3, [r7, #0]
 802d206:	8832      	ldrh	r2, [r6, #0]
 802d208:	429a      	cmp	r2, r3
 802d20a:	d105      	bne.n	802d218 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x94>
 802d20c:	f899 2000 	ldrb.w	r2, [r9]
 802d210:	4542      	cmp	r2, r8
 802d212:	d101      	bne.n	802d218 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x94>
 802d214:	782a      	ldrb	r2, [r5, #0]
 802d216:	b15a      	cbz	r2, 802d230 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0xac>
    {
        if (currentVehicleType == 0) // Truck only
 802d218:	f604 00b6 	addw	r0, r4, #2230	@ 0x8b6
 802d21c:	f1b8 0f00 	cmp.w	r8, #0
 802d220:	d15d      	bne.n	802d2de <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x15a>
        {
            Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "NaN");
 802d222:	4a44      	ldr	r2, [pc, #272]	@ (802d334 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1b0>)
        }
        else if (j1939Trailer_Press == 0xFFFF || j1939Trailer_Press == 65535)
        {
            Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "0 bar");
 802d224:	2119      	movs	r1, #25
 802d226:	f00a fe23 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        }
        else
        {
            Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "%d bar", j1939Trailer_Press);
        }
        lastTrailerPress = j1939Trailer_Press;
 802d22a:	883b      	ldrh	r3, [r7, #0]
 802d22c:	8033      	strh	r3, [r6, #0]
        changed = true;
 802d22e:	2001      	movs	r0, #1
    }

    // Truck Latch/Proximity - only update if changed
    if (j1939TruckProximity != lastTruckProximity || firstRun)
 802d230:	4f41      	ldr	r7, [pc, #260]	@ (802d338 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1b4>)
 802d232:	4e42      	ldr	r6, [pc, #264]	@ (802d33c <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1b8>)
 802d234:	883b      	ldrh	r3, [r7, #0]
 802d236:	8832      	ldrh	r2, [r6, #0]
 802d238:	429a      	cmp	r2, r3
 802d23a:	d101      	bne.n	802d240 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0xbc>
 802d23c:	782a      	ldrb	r2, [r5, #0]
 802d23e:	b17a      	cbz	r2, 802d260 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0xdc>
    {
        if (j1939TruckProximity == 0xFFFF || j1939TruckProximity == 65535)
 802d240:	3b01      	subs	r3, #1
 802d242:	b29b      	uxth	r3, r3
 802d244:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802d248:	4293      	cmp	r3, r2
        {
            Unicode::strncpy(LatchtxtBuffer, "OPEN", LATCHTXT_SIZE);
 802d24a:	bf8c      	ite	hi
 802d24c:	493c      	ldrhi	r1, [pc, #240]	@ (802d340 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1bc>)
        }
        else if (j1939TruckProximity > 0)
        {
            Unicode::strncpy(LatchtxtBuffer, "LATCHED", LATCHTXT_SIZE);
 802d24e:	493d      	ldrls	r1, [pc, #244]	@ (802d344 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1c0>)
 802d250:	f604 0052 	addw	r0, r4, #2130	@ 0x852
            Unicode::strncpy(LatchtxtBuffer, "OPEN", LATCHTXT_SIZE);
 802d254:	2219      	movs	r2, #25
            Unicode::strncpy(LatchtxtBuffer, "LATCHED", LATCHTXT_SIZE);
 802d256:	f00a faaa 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        }
        else
        {
            Unicode::strncpy(LatchtxtBuffer, "OPEN", LATCHTXT_SIZE);
        }
        lastTruckProximity = j1939TruckProximity;
 802d25a:	883b      	ldrh	r3, [r7, #0]
 802d25c:	8033      	strh	r3, [r6, #0]
        changed = true;
 802d25e:	2001      	movs	r0, #1
    }

    // Trailer Latch/Proximity - only update if changed or vehicle type changed
    if (j1939TrailerProximity != lastTrailerProximity || currentVehicleType != lastVehicleType || firstRun)
 802d260:	4f39      	ldr	r7, [pc, #228]	@ (802d348 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1c4>)
 802d262:	4e3a      	ldr	r6, [pc, #232]	@ (802d34c <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1c8>)
 802d264:	883b      	ldrh	r3, [r7, #0]
 802d266:	8832      	ldrh	r2, [r6, #0]
 802d268:	429a      	cmp	r2, r3
 802d26a:	d105      	bne.n	802d278 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0xf4>
 802d26c:	f899 2000 	ldrb.w	r2, [r9]
 802d270:	4542      	cmp	r2, r8
 802d272:	d101      	bne.n	802d278 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0xf4>
 802d274:	782a      	ldrb	r2, [r5, #0]
 802d276:	b15a      	cbz	r2, 802d290 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x10c>
    {
        if (currentVehicleType == 0) // Truck only
 802d278:	f604 0084 	addw	r0, r4, #2180	@ 0x884
 802d27c:	f1b8 0f00 	cmp.w	r8, #0
 802d280:	d138      	bne.n	802d2f4 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x170>
        {
            Unicode::strncpy(Latchtxt_trailerBuffer, "NaN", LATCHTXT_TRAILER_SIZE);
 802d282:	492c      	ldr	r1, [pc, #176]	@ (802d334 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1b0>)
 802d284:	2219      	movs	r2, #25
        {
            Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
        }
        else if (j1939TrailerProximity > 0)
        {
            Unicode::strncpy(Latchtxt_trailerBuffer, "LATCHED", LATCHTXT_TRAILER_SIZE);
 802d286:	f00a fa92 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        }
        else
        {
            Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
        }
        lastTrailerProximity = j1939TrailerProximity;
 802d28a:	883b      	ldrh	r3, [r7, #0]
 802d28c:	8033      	strh	r3, [r6, #0]
        changed = true;
 802d28e:	2001      	movs	r0, #1
    }

    // E-Stop Status - only update if changed
    if (j1939EStopStatus != lastEStopStatus || firstRun)
 802d290:	4f2f      	ldr	r7, [pc, #188]	@ (802d350 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1cc>)
 802d292:	4e30      	ldr	r6, [pc, #192]	@ (802d354 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1d0>)
 802d294:	883b      	ldrh	r3, [r7, #0]
 802d296:	8832      	ldrh	r2, [r6, #0]
 802d298:	429a      	cmp	r2, r3
 802d29a:	d101      	bne.n	802d2a0 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x11c>
 802d29c:	782a      	ldrb	r2, [r5, #0]
 802d29e:	b17a      	cbz	r2, 802d2c0 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x13c>
    {
        if (j1939EStopStatus == 0xFFFF || j1939EStopStatus == 65535)
 802d2a0:	3b01      	subs	r3, #1
 802d2a2:	b29b      	uxth	r3, r3
 802d2a4:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802d2a8:	4293      	cmp	r3, r2
        {
            Unicode::strncpy(EStoptxtBuffer, "INACTIVE", ESTOPTXT_SIZE);
 802d2aa:	bf8c      	ite	hi
 802d2ac:	492a      	ldrhi	r1, [pc, #168]	@ (802d358 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1d4>)
        }
        else if (j1939EStopStatus > 0)
        {
            Unicode::strncpy(EStoptxtBuffer, "ACTIVE", ESTOPTXT_SIZE);
 802d2ae:	492b      	ldrls	r1, [pc, #172]	@ (802d35c <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1d8>)
 802d2b0:	f604 00e8 	addw	r0, r4, #2280	@ 0x8e8
            Unicode::strncpy(EStoptxtBuffer, "INACTIVE", ESTOPTXT_SIZE);
 802d2b4:	2219      	movs	r2, #25
            Unicode::strncpy(EStoptxtBuffer, "ACTIVE", ESTOPTXT_SIZE);
 802d2b6:	f00a fa7a 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        }
        else
        {
            Unicode::strncpy(EStoptxtBuffer, "INACTIVE", ESTOPTXT_SIZE);
        }
        lastEStopStatus = j1939EStopStatus;
 802d2ba:	883b      	ldrh	r3, [r7, #0]
 802d2bc:	8033      	strh	r3, [r6, #0]
        changed = true;
 802d2be:	2001      	movs	r0, #1
    }

    firstRun = false;
 802d2c0:	2300      	movs	r3, #0
 802d2c2:	702b      	strb	r3, [r5, #0]
    return changed;
}
 802d2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            Unicode::snprintf(InclotxtBuffer, INCLOTXT_SIZE, "%d Deg", (j1939Roll - 64));
 802d2c8:	4a25      	ldr	r2, [pc, #148]	@ (802d360 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1dc>)
 802d2ca:	3b40      	subs	r3, #64	@ 0x40
 802d2cc:	210a      	movs	r1, #10
 802d2ce:	f00a fdcf 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802d2d2:	e77d      	b.n	802d1d0 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x4c>
            Unicode::snprintf(HydPresstxtBuffer, HYDPRESSTXT_SIZE, "%d bar", j1939Truck_Press);
 802d2d4:	4a23      	ldr	r2, [pc, #140]	@ (802d364 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1e0>)
 802d2d6:	2119      	movs	r1, #25
 802d2d8:	f00a fdca 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802d2dc:	e78d      	b.n	802d1fa <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x76>
        else if (j1939Trailer_Press == 0xFFFF || j1939Trailer_Press == 65535)
 802d2de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802d2e2:	4293      	cmp	r3, r2
 802d2e4:	d101      	bne.n	802d2ea <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x166>
            Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "0 bar");
 802d2e6:	4a10      	ldr	r2, [pc, #64]	@ (802d328 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1a4>)
 802d2e8:	e79c      	b.n	802d224 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0xa0>
            Unicode::snprintf(HydPresstxt_trailerBuffer, HYDPRESSTXT_TRAILER_SIZE, "%d bar", j1939Trailer_Press);
 802d2ea:	4a1e      	ldr	r2, [pc, #120]	@ (802d364 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1e0>)
 802d2ec:	2119      	movs	r1, #25
 802d2ee:	f00a fdbf 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802d2f2:	e79a      	b.n	802d22a <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0xa6>
        else if (j1939TrailerProximity == 0xFFFF || j1939TrailerProximity == 65535)
 802d2f4:	3b01      	subs	r3, #1
 802d2f6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 802d2fa:	b29b      	uxth	r3, r3
 802d2fc:	4293      	cmp	r3, r2
            Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
 802d2fe:	bf8c      	ite	hi
 802d300:	490f      	ldrhi	r1, [pc, #60]	@ (802d340 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1bc>)
            Unicode::strncpy(Latchtxt_trailerBuffer, "LATCHED", LATCHTXT_TRAILER_SIZE);
 802d302:	4910      	ldrls	r1, [pc, #64]	@ (802d344 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x1c0>)
            Unicode::strncpy(Latchtxt_trailerBuffer, "OPEN", LATCHTXT_TRAILER_SIZE);
 802d304:	2219      	movs	r2, #25
            Unicode::strncpy(Latchtxt_trailerBuffer, "LATCHED", LATCHTXT_TRAILER_SIZE);
 802d306:	e7be      	b.n	802d286 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv+0x102>
 802d308:	08041e68 	.word	0x08041e68
 802d30c:	20001e72 	.word	0x20001e72
 802d310:	200004f4 	.word	0x200004f4
 802d314:	20001dc6 	.word	0x20001dc6
 802d318:	20000500 	.word	0x20000500
 802d31c:	080410c1 	.word	0x080410c1
 802d320:	20001db2 	.word	0x20001db2
 802d324:	200004fe 	.word	0x200004fe
 802d328:	080410cd 	.word	0x080410cd
 802d32c:	20001da6 	.word	0x20001da6
 802d330:	200004fc 	.word	0x200004fc
 802d334:	080410da 	.word	0x080410da
 802d338:	20001db0 	.word	0x20001db0
 802d33c:	200004fa 	.word	0x200004fa
 802d340:	080410de 	.word	0x080410de
 802d344:	080410e3 	.word	0x080410e3
 802d348:	20001da4 	.word	0x20001da4
 802d34c:	200004f8 	.word	0x200004f8
 802d350:	20001dc2 	.word	0x20001dc2
 802d354:	200004f6 	.word	0x200004f6
 802d358:	080410eb 	.word	0x080410eb
 802d35c:	08041325 	.word	0x08041325
 802d360:	080410c6 	.word	0x080410c6
 802d364:	080410d3 	.word	0x080410d3
 802d368:	200004f5 	.word	0x200004f5

0802d36c <_ZN14DiagnosticView11setupScreenEv>:
{
 802d36c:	b510      	push	{r4, lr}
 802d36e:	4604      	mov	r4, r0
    DiagnosticViewBase::setupScreen();
 802d370:	f7fb fed9 	bl	8029126 <_ZN18DiagnosticViewBase11setupScreenEv>
    forceUpdateDiagnosticDisplays();
 802d374:	4620      	mov	r0, r4
}
 802d376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    forceUpdateDiagnosticDisplays();
 802d37a:	f7ff be6f 	b.w	802d05c <_ZN14DiagnosticView29forceUpdateDiagnosticDisplaysEv>

0802d37e <_ZN14DiagnosticView15handleTickEventEv>:
{
 802d37e:	b510      	push	{r4, lr}
 802d380:	4604      	mov	r4, r0
    bool displayChanged = updateDiagnosticDisplays();
 802d382:	f7ff feff 	bl	802d184 <_ZN14DiagnosticView24updateDiagnosticDisplaysEv>
    if (displayChanged) {
 802d386:	b120      	cbz	r0, 802d392 <_ZN14DiagnosticView15handleTickEventEv+0x14>
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 802d388:	1d20      	adds	r0, r4, #4
}
 802d38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d38e:	f008 bd7d 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802d392:	bd10      	pop	{r4, pc}

0802d394 <_ZN19MenuLayer1PresenterD1Ev>:
    virtual ~MenuLayer1Presenter() {}
 802d394:	4770      	bx	lr

0802d396 <_ZThn4_N19MenuLayer1PresenterD1Ev>:
 802d396:	3804      	subs	r0, #4
 802d398:	4770      	bx	lr

0802d39a <_ZN19MenuLayer1Presenter10deactivateEv>:
}

void MenuLayer1Presenter::activate()
{

}
 802d39a:	4770      	bx	lr

0802d39c <_ZN19MenuLayer1PresenterD0Ev>:
 802d39c:	b510      	push	{r4, lr}
 802d39e:	2114      	movs	r1, #20
 802d3a0:	4604      	mov	r4, r0
 802d3a2:	f00f f8a2 	bl	803c4ea <_ZdlPvj>
 802d3a6:	4620      	mov	r0, r4
 802d3a8:	bd10      	pop	{r4, pc}

0802d3aa <_ZThn4_N19MenuLayer1PresenterD0Ev>:
 802d3aa:	f1a0 0004 	sub.w	r0, r0, #4
 802d3ae:	e7f5      	b.n	802d39c <_ZN19MenuLayer1PresenterD0Ev>

0802d3b0 <_ZN19MenuLayer1PresenterC1ER14MenuLayer1View>:
 802d3b0:	2200      	movs	r2, #0
 802d3b2:	6082      	str	r2, [r0, #8]
    : view(v)
 802d3b4:	4a02      	ldr	r2, [pc, #8]	@ (802d3c0 <_ZN19MenuLayer1PresenterC1ER14MenuLayer1View+0x10>)
 802d3b6:	6002      	str	r2, [r0, #0]
 802d3b8:	3218      	adds	r2, #24
 802d3ba:	6042      	str	r2, [r0, #4]
 802d3bc:	60c1      	str	r1, [r0, #12]
}
 802d3be:	4770      	bx	lr
 802d3c0:	08042e4c 	.word	0x08042e4c

0802d3c4 <_ZN19MenuLayer1Presenter16menuItemSelectedEh>:
{

}

void MenuLayer1Presenter::menuItemSelected(uint8_t index)
{
 802d3c4:	b508      	push	{r3, lr}
    // Menu system methods - used by MenuLayer presenters
    MenuSubItem* getCurrentSubItem();
    void saveCurrentValue(int32_t value);
    void saveCurrentEnumSelection(uint8_t enumIndex);

    void setCurrentLayer1Selection(uint8_t selection) { currentLayer1Selection = selection; }
 802d3c6:	6903      	ldr	r3, [r0, #16]
 802d3c8:	f883 1034 	strb.w	r1, [r3, #52]	@ 0x34
    model->setCurrentLayer1Selection(index);
    static_cast<FrontendApplication*>(Application::getInstance())->gotoMenuLayer2ScreenNoTransition();
 802d3cc:	f007 fc9e 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 802d3d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    static_cast<FrontendApplication*>(Application::getInstance())->gotoMenuLayer2ScreenNoTransition();
 802d3d4:	f7fa be9e 	b.w	8028114 <_ZN23FrontendApplicationBase32gotoMenuLayer2ScreenNoTransitionEv>

0802d3d8 <_ZN19MenuLayer1Presenter16getCategoryCountEv>:

uint8_t MenuLayer1Presenter::getCategoryCount()
{
    return model->getCategoryCount();
}
 802d3d8:	2004      	movs	r0, #4
 802d3da:	4770      	bx	lr

0802d3dc <_ZN19MenuLayer1Presenter17getMenuCategoriesEv>:
    void setCurrentLayer2Selection(uint8_t selection) { currentLayer2Selection = selection; }
    uint8_t getCurrentLayer1Selection() const { return currentLayer1Selection; }
    uint8_t getCurrentLayer2Selection() const { return currentLayer2Selection; }

    // Menu system getters - used by MenuLayer1 and MenuLayer2 presenters
    MenuCategory* getMenuCategories() { return menuCategories; }
 802d3dc:	6900      	ldr	r0, [r0, #16]

MenuCategory* MenuLayer1Presenter::getMenuCategories()
{
    return model->getMenuCategories();
}
 802d3de:	3004      	adds	r0, #4
 802d3e0:	4770      	bx	lr

0802d3e2 <_ZN14MenuLayer1View14tearDownScreenEv>:
}

void MenuLayer1View::tearDownScreen()
{
    MenuLayer1ViewBase::tearDownScreen();
}
 802d3e2:	4770      	bx	lr

0802d3e4 <_ZN14MenuLayer1View13buttonHandlerEh>:

void MenuLayer1View::buttonHandler( uint8_t value ) {
 802d3e4:	b538      	push	{r3, r4, r5, lr}
 802d3e6:	4604      	mov	r4, r0
 802d3e8:	460d      	mov	r5, r1
  buttonHandlerObj.handleKey(value);
 802d3ea:	f500 7023 	add.w	r0, r0, #652	@ 0x28c
 802d3ee:	f7e9 f98b 	bl	8016708 <_ZN13ButtonHandler9handleKeyEh>

  switch (value)
 802d3f2:	2d03      	cmp	r5, #3
 802d3f4:	d807      	bhi.n	802d406 <_ZN14MenuLayer1View13buttonHandlerEh+0x22>
 802d3f6:	e8df f005 	tbb	[pc, r5]
 802d3fa:	0b02      	.short	0x0b02
 802d3fc:	1310      	.short	0x1310
 802d3fe:	f007 fc85 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
  	  {
      case 0:
    	  //button 0: Exit to home screen
    	  application().gotoScreenTestHomeScreenNoTransition();
 802d402:	f7fa fe47 	bl	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
 802d406:	1d20      	adds	r0, r4, #4
      default:
    	  break;
    }

  this->invalidate();
}
 802d408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802d40c:	f008 bd3e 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
    	  handleUpButton();
 802d410:	6823      	ldr	r3, [r4, #0]
 802d412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    	  handleEnterButton();
 802d414:	4620      	mov	r0, r4
 802d416:	4798      	blx	r3
    	  break;
 802d418:	e7f5      	b.n	802d406 <_ZN14MenuLayer1View13buttonHandlerEh+0x22>
    	  handleDownButton();
 802d41a:	6823      	ldr	r3, [r4, #0]
 802d41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802d41e:	e7f9      	b.n	802d414 <_ZN14MenuLayer1View13buttonHandlerEh+0x30>
    	  handleEnterButton();
 802d420:	6823      	ldr	r3, [r4, #0]
 802d422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d424:	e7f6      	b.n	802d414 <_ZN14MenuLayer1View13buttonHandlerEh+0x30>

0802d426 <_ZN14MenuLayer1View17handleEnterButtonEv>:
    }
}

void MenuLayer1View::handleEnterButton()
{
    presenter->menuItemSelected(selectedIndex);
 802d426:	f890 1978 	ldrb.w	r1, [r0, #2424]	@ 0x978
 802d42a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802d42c:	f7ff bfca 	b.w	802d3c4 <_ZN19MenuLayer1Presenter16menuItemSelectedEh>

0802d430 <_ZN14MenuLayer1ViewD1Ev>:

class MenuLayer1View : public MenuLayer1ViewBase
{
public:
    MenuLayer1View();
    virtual ~MenuLayer1View() {}
 802d430:	b538      	push	{r3, r4, r5, lr}
 802d432:	4b09      	ldr	r3, [pc, #36]	@ (802d458 <_ZN14MenuLayer1ViewD1Ev+0x28>)
 802d434:	6003      	str	r3, [r0, #0]
 802d436:	4604      	mov	r4, r0
 802d438:	f240 75c4 	movw	r5, #1988	@ 0x7c4
 802d43c:	2df4      	cmp	r5, #244	@ 0xf4
 802d43e:	d006      	beq.n	802d44e <_ZN14MenuLayer1ViewD1Ev+0x1e>
 802d440:	5963      	ldr	r3, [r4, r5]
 802d442:	1960      	adds	r0, r4, r5
 802d444:	681b      	ldr	r3, [r3, #0]
 802d446:	4798      	blx	r3
 802d448:	f5a5 75da 	sub.w	r5, r5, #436	@ 0x1b4
 802d44c:	e7f6      	b.n	802d43c <_ZN14MenuLayer1ViewD1Ev+0xc>
 802d44e:	4620      	mov	r0, r4
 802d450:	f7fc fc45 	bl	8029cde <_ZN18MenuLayer1ViewBaseD1Ev>
 802d454:	4620      	mov	r0, r4
 802d456:	bd38      	pop	{r3, r4, r5, pc}
 802d458:	08042e78 	.word	0x08042e78

0802d45c <_ZN14MenuLayer1ViewD0Ev>:
 802d45c:	b510      	push	{r4, lr}
 802d45e:	4604      	mov	r4, r0
 802d460:	f7ff ffe6 	bl	802d430 <_ZN14MenuLayer1ViewD1Ev>
 802d464:	4620      	mov	r0, r4
 802d466:	f640 117c 	movw	r1, #2428	@ 0x97c
 802d46a:	f00f f83e 	bl	803c4ea <_ZdlPvj>
 802d46e:	4620      	mov	r0, r4
 802d470:	bd10      	pop	{r4, pc}
	...

0802d474 <_ZN14MenuLayer1ViewC1Ev>:
MenuLayer1View::MenuLayer1View() : buttonHandlerObj(10, static_cast<Button*>(&button0),
 802d474:	b570      	push	{r4, r5, r6, lr}
 802d476:	4604      	mov	r4, r0
		 static_cast<Button*>(&button3)) ,selectedIndex(0), totalItems(0), topVisibleIndex(0)
 802d478:	f7fc fc56 	bl	8029d28 <_ZN18MenuLayer1ViewBaseC1Ev>
 802d47c:	4b15      	ldr	r3, [pc, #84]	@ (802d4d4 <_ZN14MenuLayer1ViewC1Ev+0x60>)
 802d47e:	6023      	str	r3, [r4, #0]
using namespace touchgfx;

class ButtonHandler {
public:
  ButtonHandler(uint16_t delay, Button* button0, Button* button1, Button* button2, Button* button3):
    delayInTicks(delay), buttons{button0, button1, button2, button3}{}
 802d480:	230a      	movs	r3, #10
 802d482:	f8a4 328c 	strh.w	r3, [r4, #652]	@ 0x28c
MenuLayer1View::MenuLayer1View() : buttonHandlerObj(10, static_cast<Button*>(&button0),
 802d486:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 802d48a:	f8c4 3290 	str.w	r3, [r4, #656]	@ 0x290
 802d48e:	f104 03c4 	add.w	r3, r4, #196	@ 0xc4
 802d492:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
 802d496:	f504 73b0 	add.w	r3, r4, #352	@ 0x160
 802d49a:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
 802d49e:	f504 7396 	add.w	r3, r4, #300	@ 0x12c
 802d4a2:	f8c4 329c 	str.w	r3, [r4, #668]	@ 0x29c
 802d4a6:	2300      	movs	r3, #0
 802d4a8:	f8c4 32a0 	str.w	r3, [r4, #672]	@ 0x2a0
 802d4ac:	f884 32a4 	strb.w	r3, [r4, #676]	@ 0x2a4
		 static_cast<Button*>(&button3)) ,selectedIndex(0), totalItems(0), topVisibleIndex(0)
 802d4b0:	f504 752a 	add.w	r5, r4, #680	@ 0x2a8
 802d4b4:	f604 1678 	addw	r6, r4, #2424	@ 0x978
 802d4b8:	4628      	mov	r0, r5
 802d4ba:	f505 75da 	add.w	r5, r5, #436	@ 0x1b4
 802d4be:	f7ff fd4d 	bl	802cf5c <_ZN17MenuItemContainerC1Ev>
 802d4c2:	42b5      	cmp	r5, r6
 802d4c4:	d1f8      	bne.n	802d4b8 <_ZN14MenuLayer1ViewC1Ev+0x44>
 802d4c6:	2300      	movs	r3, #0
 802d4c8:	f8a4 3978 	strh.w	r3, [r4, #2424]	@ 0x978
 802d4cc:	f884 397a 	strb.w	r3, [r4, #2426]	@ 0x97a
}
 802d4d0:	4620      	mov	r0, r4
 802d4d2:	bd70      	pop	{r4, r5, r6, pc}
 802d4d4:	08042e78 	.word	0x08042e78

0802d4d8 <_ZN14MenuLayer1View19initializeMenuItemsEv>:
{
 802d4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d4dc:	4604      	mov	r4, r0
    totalItems = presenter->getCategoryCount();
 802d4de:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802d4e0:	f7ff ff7a 	bl	802d3d8 <_ZN19MenuLayer1Presenter16getCategoryCountEv>
 802d4e4:	4625      	mov	r5, r4
 802d4e6:	f884 0979 	strb.w	r0, [r4, #2425]	@ 0x979
 802d4ea:	2628      	movs	r6, #40	@ 0x28
 802d4ec:	f04f 0900 	mov.w	r9, #0
 802d4f0:	2701      	movs	r7, #1
        container.add(d);
 802d4f2:	f104 0804 	add.w	r8, r4, #4
    for (uint8_t i = 0; i < MAX_VISIBLE_ITEMS && i < totalItems; i++) {
 802d4f6:	f894 2979 	ldrb.w	r2, [r4, #2425]	@ 0x979
 802d4fa:	fa5f f389 	uxtb.w	r3, r9
 802d4fe:	429a      	cmp	r2, r3
 802d500:	d91c      	bls.n	802d53c <_ZN14MenuLayer1View19initializeMenuItemsEv+0x64>
        setX(x);
 802d502:	f8d5 32a8 	ldr.w	r3, [r5, #680]	@ 0x2a8
        menuItems[i].setXY(16, 40 + (i * 40)); // Use setXY instead of setPosition
 802d506:	f505 7a2a 	add.w	sl, r5, #680	@ 0x2a8
 802d50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802d50c:	2110      	movs	r1, #16
 802d50e:	4650      	mov	r0, sl
 802d510:	4798      	blx	r3
        setY(y);
 802d512:	f8d5 32a8 	ldr.w	r3, [r5, #680]	@ 0x2a8
 802d516:	b231      	sxth	r1, r6
 802d518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d51a:	4650      	mov	r0, sl
 802d51c:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_VISIBLE_ITEMS && i < totalItems; i++) {
 802d51e:	f109 0901 	add.w	r9, r9, #1
        visible = vis;
 802d522:	f885 72cd 	strb.w	r7, [r5, #717]	@ 0x2cd
 802d526:	4651      	mov	r1, sl
 802d528:	4640      	mov	r0, r8
 802d52a:	f002 fbf3 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802d52e:	3628      	adds	r6, #40	@ 0x28
 802d530:	f1b9 0f04 	cmp.w	r9, #4
 802d534:	f505 75da 	add.w	r5, r5, #436	@ 0x1b4
 802d538:	b2b6      	uxth	r6, r6
 802d53a:	d1dc      	bne.n	802d4f6 <_ZN14MenuLayer1View19initializeMenuItemsEv+0x1e>
}
 802d53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802d540 <_ZN14MenuLayer1View17updateMenuDisplayEv>:
{
 802d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d544:	4604      	mov	r4, r0
    MenuCategory* categories = presenter->getMenuCategories();
 802d546:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802d548:	f7ff ff48 	bl	802d3dc <_ZN19MenuLayer1Presenter17getMenuCategoriesEv>
 802d54c:	f504 762a 	add.w	r6, r4, #680	@ 0x2a8
 802d550:	4680      	mov	r8, r0
 802d552:	2700      	movs	r7, #0
        uint8_t itemIndex = topVisibleIndex + i;
 802d554:	f894 597a 	ldrb.w	r5, [r4, #2426]	@ 0x97a
        if (itemIndex < totalItems) {
 802d558:	f894 3979 	ldrb.w	r3, [r4, #2425]	@ 0x979
        uint8_t itemIndex = topVisibleIndex + i;
 802d55c:	443d      	add	r5, r7
 802d55e:	b2ed      	uxtb	r5, r5
        if (itemIndex < totalItems) {
 802d560:	42ab      	cmp	r3, r5
 802d562:	d91b      	bls.n	802d59c <_ZN14MenuLayer1View17updateMenuDisplayEv+0x5c>
            menuItems[i].setMenuText(categories[itemIndex].name);
 802d564:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 802d568:	4630      	mov	r0, r6
 802d56a:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 802d56e:	f7ff fd03 	bl	802cf78 <_ZN17MenuItemContainer11setMenuTextEPKc>
        	menuItems[i].setHighlighted(itemIndex == selectedIndex);
 802d572:	f894 1978 	ldrb.w	r1, [r4, #2424]	@ 0x978
 802d576:	1b4b      	subs	r3, r1, r5
 802d578:	4259      	negs	r1, r3
 802d57a:	4159      	adcs	r1, r3
 802d57c:	4630      	mov	r0, r6
 802d57e:	f7ff fd0f 	bl	802cfa0 <_ZN17MenuItemContainer14setHighlightedEb>
    }
 802d582:	2301      	movs	r3, #1
    for (uint8_t i = 0; i < MAX_VISIBLE_ITEMS; i++) {
 802d584:	3701      	adds	r7, #1
 802d586:	2f04      	cmp	r7, #4
        visible = vis;
 802d588:	f886 3025 	strb.w	r3, [r6, #37]	@ 0x25
 802d58c:	f506 76da 	add.w	r6, r6, #436	@ 0x1b4
 802d590:	d1e0      	bne.n	802d554 <_ZN14MenuLayer1View17updateMenuDisplayEv+0x14>
        container.invalidate();
 802d592:	1d20      	adds	r0, r4, #4
}
 802d594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d598:	f008 bc78 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802d59c:	2300      	movs	r3, #0
 802d59e:	e7f1      	b.n	802d584 <_ZN14MenuLayer1View17updateMenuDisplayEv+0x44>

0802d5a0 <_ZN14MenuLayer1View14handleUpButtonEv>:
    if (selectedIndex > 0) {
 802d5a0:	f890 3978 	ldrb.w	r3, [r0, #2424]	@ 0x978
 802d5a4:	b15b      	cbz	r3, 802d5be <_ZN14MenuLayer1View14handleUpButtonEv+0x1e>
        if (selectedIndex < topVisibleIndex) {
 802d5a6:	f890 297a 	ldrb.w	r2, [r0, #2426]	@ 0x97a
        selectedIndex--;
 802d5aa:	3b01      	subs	r3, #1
 802d5ac:	b2db      	uxtb	r3, r3
        if (selectedIndex < topVisibleIndex) {
 802d5ae:	429a      	cmp	r2, r3
        selectedIndex--;
 802d5b0:	f880 3978 	strb.w	r3, [r0, #2424]	@ 0x978
            topVisibleIndex = selectedIndex;
 802d5b4:	bf88      	it	hi
 802d5b6:	f880 397a 	strbhi.w	r3, [r0, #2426]	@ 0x97a
        updateMenuDisplay();
 802d5ba:	f7ff bfc1 	b.w	802d540 <_ZN14MenuLayer1View17updateMenuDisplayEv>
}
 802d5be:	4770      	bx	lr

0802d5c0 <_ZN14MenuLayer1View16handleDownButtonEv>:
    if (selectedIndex < (totalItems - 1)) {
 802d5c0:	f890 2979 	ldrb.w	r2, [r0, #2425]	@ 0x979
 802d5c4:	f890 3978 	ldrb.w	r3, [r0, #2424]	@ 0x978
 802d5c8:	3a01      	subs	r2, #1
 802d5ca:	4293      	cmp	r3, r2
 802d5cc:	da0e      	bge.n	802d5ec <_ZN14MenuLayer1View16handleDownButtonEv+0x2c>
        if (selectedIndex >= (topVisibleIndex + MAX_VISIBLE_ITEMS)) {
 802d5ce:	f890 197a 	ldrb.w	r1, [r0, #2426]	@ 0x97a
        selectedIndex++;
 802d5d2:	1c5a      	adds	r2, r3, #1
 802d5d4:	b2d2      	uxtb	r2, r2
        if (selectedIndex >= (topVisibleIndex + MAX_VISIBLE_ITEMS)) {
 802d5d6:	3103      	adds	r1, #3
 802d5d8:	4291      	cmp	r1, r2
            topVisibleIndex = selectedIndex - MAX_VISIBLE_ITEMS + 1;
 802d5da:	bfb8      	it	lt
 802d5dc:	3b02      	sublt	r3, #2
        selectedIndex++;
 802d5de:	f880 2978 	strb.w	r2, [r0, #2424]	@ 0x978
            topVisibleIndex = selectedIndex - MAX_VISIBLE_ITEMS + 1;
 802d5e2:	bfb8      	it	lt
 802d5e4:	f880 397a 	strblt.w	r3, [r0, #2426]	@ 0x97a
        updateMenuDisplay();
 802d5e8:	f7ff bfaa 	b.w	802d540 <_ZN14MenuLayer1View17updateMenuDisplayEv>
}
 802d5ec:	4770      	bx	lr

0802d5ee <_ZN14MenuLayer1View11setupScreenEv>:
{
 802d5ee:	b510      	push	{r4, lr}
 802d5f0:	4604      	mov	r4, r0
    MenuLayer1ViewBase::setupScreen();
 802d5f2:	f7fc fb75 	bl	8029ce0 <_ZN18MenuLayer1ViewBase11setupScreenEv>
    initializeMenuItems(); //added to existing func
 802d5f6:	4620      	mov	r0, r4
 802d5f8:	f7ff ff6e 	bl	802d4d8 <_ZN14MenuLayer1View19initializeMenuItemsEv>
    updateMenuDisplay();   //added to existing func
 802d5fc:	4620      	mov	r0, r4
}
 802d5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateMenuDisplay();   //added to existing func
 802d602:	f7ff bf9d 	b.w	802d540 <_ZN14MenuLayer1View17updateMenuDisplayEv>

0802d606 <_ZN19MenuLayer2PresenterD1Ev>:
    virtual ~MenuLayer2Presenter() {}
 802d606:	4770      	bx	lr

0802d608 <_ZThn4_N19MenuLayer2PresenterD1Ev>:
 802d608:	3804      	subs	r0, #4
 802d60a:	4770      	bx	lr

0802d60c <_ZN19MenuLayer2Presenter10deactivateEv>:
}

void MenuLayer2Presenter::activate()
{

}
 802d60c:	4770      	bx	lr

0802d60e <_ZN19MenuLayer2PresenterD0Ev>:
 802d60e:	b510      	push	{r4, lr}
 802d610:	2114      	movs	r1, #20
 802d612:	4604      	mov	r4, r0
 802d614:	f00e ff69 	bl	803c4ea <_ZdlPvj>
 802d618:	4620      	mov	r0, r4
 802d61a:	bd10      	pop	{r4, pc}

0802d61c <_ZThn4_N19MenuLayer2PresenterD0Ev>:
 802d61c:	f1a0 0004 	sub.w	r0, r0, #4
 802d620:	e7f5      	b.n	802d60e <_ZN19MenuLayer2PresenterD0Ev>
	...

0802d624 <_ZN19MenuLayer2PresenterC1ER14MenuLayer2View>:
 802d624:	2200      	movs	r2, #0
 802d626:	6082      	str	r2, [r0, #8]
    : view(v)
 802d628:	4a02      	ldr	r2, [pc, #8]	@ (802d634 <_ZN19MenuLayer2PresenterC1ER14MenuLayer2View+0x10>)
 802d62a:	6002      	str	r2, [r0, #0]
 802d62c:	3218      	adds	r2, #24
 802d62e:	6042      	str	r2, [r0, #4]
 802d630:	60c1      	str	r1, [r0, #12]
}
 802d632:	4770      	bx	lr
 802d634:	08042ebc 	.word	0x08042ebc

0802d638 <_ZN19MenuLayer2Presenter19subMenuItemSelectedEh>:
{

}

void MenuLayer2Presenter::subMenuItemSelected(uint8_t index)
{
 802d638:	b508      	push	{r3, lr}
    void setCurrentLayer2Selection(uint8_t selection) { currentLayer2Selection = selection; }
 802d63a:	6903      	ldr	r3, [r0, #16]
 802d63c:	f883 1035 	strb.w	r1, [r3, #53]	@ 0x35
    model->setCurrentLayer2Selection(index);
    static_cast<FrontendApplication*>(Application::getInstance())->gotoMenuLayer3ScreenNoTransition();
 802d640:	f007 fb64 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 802d644:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    static_cast<FrontendApplication*>(Application::getInstance())->gotoMenuLayer3ScreenNoTransition();
 802d648:	f7fa bd74 	b.w	8028134 <_ZN23FrontendApplicationBase32gotoMenuLayer3ScreenNoTransitionEv>

0802d64c <_ZN19MenuLayer2Presenter18getCurrentCategoryEv>:

MenuCategory* MenuLayer2Presenter::getCurrentCategory()
{
    MenuCategory* categories = model->getMenuCategories();
 802d64c:	6900      	ldr	r0, [r0, #16]
    uint8_t getCurrentLayer1Selection() const { return currentLayer1Selection; }
 802d64e:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
    uint8_t currentSelection = model->getCurrentLayer1Selection();

    if (currentSelection < model->getCategoryCount()) {
 802d652:	2b03      	cmp	r3, #3
    MenuCategory* getMenuCategories() { return menuCategories; }
 802d654:	bf9d      	ittte	ls
 802d656:	3004      	addls	r0, #4
        return &categories[currentSelection];
 802d658:	eb03 0343 	addls.w	r3, r3, r3, lsl #1
 802d65c:	eb00 0083 	addls.w	r0, r0, r3, lsl #2
    }
    return nullptr;
 802d660:	2000      	movhi	r0, #0
}
 802d662:	4770      	bx	lr

0802d664 <_ZN14MenuLayer2View14tearDownScreenEv>:
}

void MenuLayer2View::tearDownScreen() // maybe need to delet
{
    MenuLayer2ViewBase::tearDownScreen();
}
 802d664:	4770      	bx	lr

0802d666 <_ZN14MenuLayer2View17handleEnterButtonEv>:
    }
}

void MenuLayer2View::handleEnterButton()
{
    presenter->subMenuItemSelected(selectedIndex);
 802d666:	f890 199c 	ldrb.w	r1, [r0, #2460]	@ 0x99c
 802d66a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802d66c:	f7ff bfe4 	b.w	802d638 <_ZN19MenuLayer2Presenter19subMenuItemSelectedEh>

0802d670 <_ZN14MenuLayer2ViewD1Ev>:

class MenuLayer2View : public MenuLayer2ViewBase
{
public:
    MenuLayer2View();
    virtual ~MenuLayer2View() {}
 802d670:	b538      	push	{r3, r4, r5, lr}
 802d672:	4b0a      	ldr	r3, [pc, #40]	@ (802d69c <_ZN14MenuLayer2ViewD1Ev+0x2c>)
 802d674:	6003      	str	r3, [r0, #0]
 802d676:	4604      	mov	r4, r0
 802d678:	f44f 65fd 	mov.w	r5, #2024	@ 0x7e8
 802d67c:	f5b5 7f8c 	cmp.w	r5, #280	@ 0x118
 802d680:	d006      	beq.n	802d690 <_ZN14MenuLayer2ViewD1Ev+0x20>
 802d682:	5963      	ldr	r3, [r4, r5]
 802d684:	1960      	adds	r0, r4, r5
 802d686:	681b      	ldr	r3, [r3, #0]
 802d688:	4798      	blx	r3
 802d68a:	f5a5 75da 	sub.w	r5, r5, #436	@ 0x1b4
 802d68e:	e7f5      	b.n	802d67c <_ZN14MenuLayer2ViewD1Ev+0xc>
 802d690:	4620      	mov	r0, r4
 802d692:	f7fc fcb0 	bl	8029ff6 <_ZN18MenuLayer2ViewBaseD1Ev>
 802d696:	4620      	mov	r0, r4
 802d698:	bd38      	pop	{r3, r4, r5, pc}
 802d69a:	bf00      	nop
 802d69c:	08042ee8 	.word	0x08042ee8

0802d6a0 <_ZN14MenuLayer2ViewD0Ev>:
 802d6a0:	b510      	push	{r4, lr}
 802d6a2:	4604      	mov	r4, r0
 802d6a4:	f7ff ffe4 	bl	802d670 <_ZN14MenuLayer2ViewD1Ev>
 802d6a8:	4620      	mov	r0, r4
 802d6aa:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 802d6ae:	f00e ff1c 	bl	803c4ea <_ZdlPvj>
 802d6b2:	4620      	mov	r0, r4
 802d6b4:	bd10      	pop	{r4, pc}
	...

0802d6b8 <_ZN14MenuLayer2ViewC1Ev>:
MenuLayer2View::MenuLayer2View() : selectedIndex(0), totalItems(0), topVisibleIndex(0)
 802d6b8:	b570      	push	{r4, r5, r6, lr}
 802d6ba:	4604      	mov	r4, r0
 802d6bc:	f7fc fcc8 	bl	802a050 <_ZN18MenuLayer2ViewBaseC1Ev>
 802d6c0:	4b09      	ldr	r3, [pc, #36]	@ (802d6e8 <_ZN14MenuLayer2ViewC1Ev+0x30>)
 802d6c2:	6023      	str	r3, [r4, #0]
 802d6c4:	f504 7533 	add.w	r5, r4, #716	@ 0x2cc
 802d6c8:	f604 169c 	addw	r6, r4, #2460	@ 0x99c
 802d6cc:	4628      	mov	r0, r5
 802d6ce:	f505 75da 	add.w	r5, r5, #436	@ 0x1b4
 802d6d2:	f7ff fc43 	bl	802cf5c <_ZN17MenuItemContainerC1Ev>
 802d6d6:	42b5      	cmp	r5, r6
 802d6d8:	d1f8      	bne.n	802d6cc <_ZN14MenuLayer2ViewC1Ev+0x14>
 802d6da:	2300      	movs	r3, #0
 802d6dc:	f8a4 399c 	strh.w	r3, [r4, #2460]	@ 0x99c
 802d6e0:	f884 399e 	strb.w	r3, [r4, #2462]	@ 0x99e
}
 802d6e4:	4620      	mov	r0, r4
 802d6e6:	bd70      	pop	{r4, r5, r6, pc}
 802d6e8:	08042ee8 	.word	0x08042ee8

0802d6ec <_ZN14MenuLayer2View19initializeMenuItemsEv>:
{
 802d6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d6f0:	4604      	mov	r4, r0
    MenuCategory* currentCategory = presenter->getCurrentCategory();
 802d6f2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802d6f4:	f7ff ffaa 	bl	802d64c <_ZN19MenuLayer2Presenter18getCurrentCategoryEv>
    if (currentCategory) {
 802d6f8:	b360      	cbz	r0, 802d754 <_ZN14MenuLayer2View19initializeMenuItemsEv+0x68>
        totalItems = currentCategory->subItemCount;
 802d6fa:	7a03      	ldrb	r3, [r0, #8]
 802d6fc:	f884 399d 	strb.w	r3, [r4, #2461]	@ 0x99d
        for (uint8_t i = 0; i < MAX_VISIBLE_ITEMS && i < totalItems; i++) {
 802d700:	4625      	mov	r5, r4
        totalItems = currentCategory->subItemCount;
 802d702:	2628      	movs	r6, #40	@ 0x28
 802d704:	f04f 0900 	mov.w	r9, #0
 802d708:	2701      	movs	r7, #1
        container.add(d);
 802d70a:	f104 0804 	add.w	r8, r4, #4
        for (uint8_t i = 0; i < MAX_VISIBLE_ITEMS && i < totalItems; i++) {
 802d70e:	f894 299d 	ldrb.w	r2, [r4, #2461]	@ 0x99d
 802d712:	fa5f f389 	uxtb.w	r3, r9
 802d716:	429a      	cmp	r2, r3
 802d718:	d91c      	bls.n	802d754 <_ZN14MenuLayer2View19initializeMenuItemsEv+0x68>
        setX(x);
 802d71a:	f8d5 32cc 	ldr.w	r3, [r5, #716]	@ 0x2cc
            menuItems[i].setXY(16, 40 + (i * 40));
 802d71e:	f505 7a33 	add.w	sl, r5, #716	@ 0x2cc
 802d722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802d724:	2110      	movs	r1, #16
 802d726:	4650      	mov	r0, sl
 802d728:	4798      	blx	r3
        setY(y);
 802d72a:	f8d5 32cc 	ldr.w	r3, [r5, #716]	@ 0x2cc
 802d72e:	b231      	sxth	r1, r6
 802d730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802d732:	4650      	mov	r0, sl
 802d734:	4798      	blx	r3
        for (uint8_t i = 0; i < MAX_VISIBLE_ITEMS && i < totalItems; i++) {
 802d736:	f109 0901 	add.w	r9, r9, #1
        visible = vis;
 802d73a:	f885 72f1 	strb.w	r7, [r5, #753]	@ 0x2f1
 802d73e:	4651      	mov	r1, sl
 802d740:	4640      	mov	r0, r8
 802d742:	f002 fae7 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 802d746:	3628      	adds	r6, #40	@ 0x28
 802d748:	f1b9 0f04 	cmp.w	r9, #4
 802d74c:	f505 75da 	add.w	r5, r5, #436	@ 0x1b4
 802d750:	b2b6      	uxth	r6, r6
 802d752:	d1dc      	bne.n	802d70e <_ZN14MenuLayer2View19initializeMenuItemsEv+0x22>
}
 802d754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802d758 <_ZN14MenuLayer2View19updateCategoryTitleEv>:
{
 802d758:	b538      	push	{r3, r4, r5, lr}
 802d75a:	4604      	mov	r4, r0
    MenuCategory* currentCategory = presenter->getCurrentCategory();
 802d75c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802d75e:	f7ff ff75 	bl	802d64c <_ZN19MenuLayer2Presenter18getCurrentCategoryEv>
    if (currentCategory) {
 802d762:	b180      	cbz	r0, 802d786 <_ZN14MenuLayer2View19updateCategoryTitleEv+0x2e>
    	touchgfx::Unicode::strncpy(categoryBuffer, currentCategory->name, 99);
 802d764:	4d08      	ldr	r5, [pc, #32]	@ (802d788 <_ZN14MenuLayer2View19updateCategoryTitleEv+0x30>)
 802d766:	6801      	ldr	r1, [r0, #0]
 802d768:	2263      	movs	r2, #99	@ 0x63
 802d76a:	4628      	mov	r0, r5
 802d76c:	f00a f81f 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    	categoryBuffer[99] = 0; // Null terminate
 802d770:	2300      	movs	r3, #0
 802d772:	f8a5 30c6 	strh.w	r3, [r5, #198]	@ 0xc6
 802d776:	f8c4 528c 	str.w	r5, [r4, #652]	@ 0x28c
    	CategoryTitle.invalidate();
 802d77a:	f504 7011 	add.w	r0, r4, #580	@ 0x244
}
 802d77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    	CategoryTitle.invalidate();
 802d782:	f008 bb83 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 802d786:	bd38      	pop	{r3, r4, r5, pc}
 802d788:	20009db8 	.word	0x20009db8

0802d78c <_ZN14MenuLayer2View17updateMenuDisplayEv>:
{
 802d78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d790:	4604      	mov	r4, r0
    MenuCategory* currentCategory = presenter->getCurrentCategory();
 802d792:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802d794:	f7ff ff5a 	bl	802d64c <_ZN19MenuLayer2Presenter18getCurrentCategoryEv>
    if (!currentCategory) return;
 802d798:	4680      	mov	r8, r0
 802d79a:	b350      	cbz	r0, 802d7f2 <_ZN14MenuLayer2View17updateMenuDisplayEv+0x66>
 802d79c:	f504 7633 	add.w	r6, r4, #716	@ 0x2cc
 802d7a0:	2700      	movs	r7, #0
        uint8_t itemIndex = topVisibleIndex + i;
 802d7a2:	f894 599e 	ldrb.w	r5, [r4, #2462]	@ 0x99e
        if (itemIndex < totalItems) {
 802d7a6:	f894 399d 	ldrb.w	r3, [r4, #2461]	@ 0x99d
        uint8_t itemIndex = topVisibleIndex + i;
 802d7aa:	443d      	add	r5, r7
 802d7ac:	b2ed      	uxtb	r5, r5
        if (itemIndex < totalItems) {
 802d7ae:	42ab      	cmp	r3, r5
 802d7b0:	d91d      	bls.n	802d7ee <_ZN14MenuLayer2View17updateMenuDisplayEv+0x62>
            menuItems[i].setMenuText(subItem.name);
 802d7b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
            MenuSubItem& subItem = currentCategory->subItems[itemIndex];
 802d7b6:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
            menuItems[i].setMenuText(subItem.name);
 802d7ba:	4630      	mov	r0, r6
 802d7bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802d7c0:	f7ff fbda 	bl	802cf78 <_ZN17MenuItemContainer11setMenuTextEPKc>
            menuItems[i].setHighlighted(itemIndex == selectedIndex);
 802d7c4:	f894 199c 	ldrb.w	r1, [r4, #2460]	@ 0x99c
 802d7c8:	1b4b      	subs	r3, r1, r5
 802d7ca:	4259      	negs	r1, r3
 802d7cc:	4159      	adcs	r1, r3
 802d7ce:	4630      	mov	r0, r6
 802d7d0:	f7ff fbe6 	bl	802cfa0 <_ZN17MenuItemContainer14setHighlightedEb>
    }
 802d7d4:	2301      	movs	r3, #1
    for (uint8_t i = 0; i < MAX_VISIBLE_ITEMS; i++) {
 802d7d6:	3701      	adds	r7, #1
 802d7d8:	2f04      	cmp	r7, #4
        visible = vis;
 802d7da:	f886 3025 	strb.w	r3, [r6, #37]	@ 0x25
 802d7de:	f506 76da 	add.w	r6, r6, #436	@ 0x1b4
 802d7e2:	d1de      	bne.n	802d7a2 <_ZN14MenuLayer2View17updateMenuDisplayEv+0x16>
        container.invalidate();
 802d7e4:	1d20      	adds	r0, r4, #4
}
 802d7e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d7ea:	f008 bb4f 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802d7ee:	2300      	movs	r3, #0
 802d7f0:	e7f1      	b.n	802d7d6 <_ZN14MenuLayer2View17updateMenuDisplayEv+0x4a>
 802d7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802d7f6 <_ZN14MenuLayer2View14handleUpButtonEv>:
    if (selectedIndex > 0) {
 802d7f6:	f890 399c 	ldrb.w	r3, [r0, #2460]	@ 0x99c
 802d7fa:	b15b      	cbz	r3, 802d814 <_ZN14MenuLayer2View14handleUpButtonEv+0x1e>
        if (selectedIndex < topVisibleIndex) {
 802d7fc:	f890 299e 	ldrb.w	r2, [r0, #2462]	@ 0x99e
        selectedIndex--;
 802d800:	3b01      	subs	r3, #1
 802d802:	b2db      	uxtb	r3, r3
        if (selectedIndex < topVisibleIndex) {
 802d804:	429a      	cmp	r2, r3
        selectedIndex--;
 802d806:	f880 399c 	strb.w	r3, [r0, #2460]	@ 0x99c
            topVisibleIndex = selectedIndex;
 802d80a:	bf88      	it	hi
 802d80c:	f880 399e 	strbhi.w	r3, [r0, #2462]	@ 0x99e
        updateMenuDisplay();
 802d810:	f7ff bfbc 	b.w	802d78c <_ZN14MenuLayer2View17updateMenuDisplayEv>
}
 802d814:	4770      	bx	lr

0802d816 <_ZN14MenuLayer2View16handleDownButtonEv>:
    if (selectedIndex < (totalItems - 1)) {
 802d816:	f890 299d 	ldrb.w	r2, [r0, #2461]	@ 0x99d
 802d81a:	f890 399c 	ldrb.w	r3, [r0, #2460]	@ 0x99c
 802d81e:	3a01      	subs	r2, #1
 802d820:	4293      	cmp	r3, r2
 802d822:	da0e      	bge.n	802d842 <_ZN14MenuLayer2View16handleDownButtonEv+0x2c>
        if (selectedIndex >= (topVisibleIndex + MAX_VISIBLE_ITEMS)) {
 802d824:	f890 199e 	ldrb.w	r1, [r0, #2462]	@ 0x99e
        selectedIndex++;
 802d828:	1c5a      	adds	r2, r3, #1
 802d82a:	b2d2      	uxtb	r2, r2
        if (selectedIndex >= (topVisibleIndex + MAX_VISIBLE_ITEMS)) {
 802d82c:	3103      	adds	r1, #3
 802d82e:	4291      	cmp	r1, r2
            topVisibleIndex = selectedIndex - MAX_VISIBLE_ITEMS + 1;
 802d830:	bfb8      	it	lt
 802d832:	3b02      	sublt	r3, #2
        selectedIndex++;
 802d834:	f880 299c 	strb.w	r2, [r0, #2460]	@ 0x99c
            topVisibleIndex = selectedIndex - MAX_VISIBLE_ITEMS + 1;
 802d838:	bfb8      	it	lt
 802d83a:	f880 399e 	strblt.w	r3, [r0, #2462]	@ 0x99e
        updateMenuDisplay();
 802d83e:	f7ff bfa5 	b.w	802d78c <_ZN14MenuLayer2View17updateMenuDisplayEv>
}
 802d842:	4770      	bx	lr

0802d844 <_ZN14MenuLayer2View11setupScreenEv>:
{
 802d844:	b510      	push	{r4, lr}
 802d846:	4604      	mov	r4, r0
    MenuLayer2ViewBase::setupScreen();
 802d848:	f7fc fbd6 	bl	8029ff8 <_ZN18MenuLayer2ViewBase11setupScreenEv>
    initializeMenuItems(); //Added to existing func
 802d84c:	4620      	mov	r0, r4
 802d84e:	f7ff ff4d 	bl	802d6ec <_ZN14MenuLayer2View19initializeMenuItemsEv>
    updateCategoryTitle(); //Added to existing func
 802d852:	4620      	mov	r0, r4
 802d854:	f7ff ff80 	bl	802d758 <_ZN14MenuLayer2View19updateCategoryTitleEv>
    updateMenuDisplay();   //Added to existing func
 802d858:	4620      	mov	r0, r4
}
 802d85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateMenuDisplay();   //Added to existing func
 802d85e:	f7ff bf95 	b.w	802d78c <_ZN14MenuLayer2View17updateMenuDisplayEv>

0802d862 <_ZN19MenuLayer3PresenterD1Ev>:
    virtual ~MenuLayer3Presenter() {}
 802d862:	4770      	bx	lr

0802d864 <_ZThn4_N19MenuLayer3PresenterD1Ev>:
 802d864:	3804      	subs	r0, #4
 802d866:	4770      	bx	lr

0802d868 <_ZN19MenuLayer3Presenter10deactivateEv>:
}

void MenuLayer3Presenter::activate()
{

}
 802d868:	4770      	bx	lr

0802d86a <_ZN19MenuLayer3PresenterD0Ev>:
 802d86a:	b510      	push	{r4, lr}
 802d86c:	2114      	movs	r1, #20
 802d86e:	4604      	mov	r4, r0
 802d870:	f00e fe3b 	bl	803c4ea <_ZdlPvj>
 802d874:	4620      	mov	r0, r4
 802d876:	bd10      	pop	{r4, pc}

0802d878 <_ZThn4_N19MenuLayer3PresenterD0Ev>:
 802d878:	f1a0 0004 	sub.w	r0, r0, #4
 802d87c:	e7f5      	b.n	802d86a <_ZN19MenuLayer3PresenterD0Ev>
	...

0802d880 <_ZN19MenuLayer3PresenterC1ER14MenuLayer3View>:
 802d880:	2200      	movs	r2, #0
 802d882:	6082      	str	r2, [r0, #8]
    : view(v)
 802d884:	4a02      	ldr	r2, [pc, #8]	@ (802d890 <_ZN19MenuLayer3PresenterC1ER14MenuLayer3View+0x10>)
 802d886:	6002      	str	r2, [r0, #0]
 802d888:	3218      	adds	r2, #24
 802d88a:	6042      	str	r2, [r0, #4]
 802d88c:	60c1      	str	r1, [r0, #12]
}
 802d88e:	4770      	bx	lr
 802d890:	08042f28 	.word	0x08042f28

0802d894 <_ZN19MenuLayer3Presenter17getCurrentSubItemEv>:

}

MenuSubItem* MenuLayer3Presenter::getCurrentSubItem()
{
    return model->getCurrentSubItem();
 802d894:	6900      	ldr	r0, [r0, #16]
 802d896:	f000 bb5a 	b.w	802df4e <_ZN5Model17getCurrentSubItemEv>

0802d89a <_ZN19MenuLayer3Presenter15saveNumberValueEl>:
}

void MenuLayer3Presenter::saveNumberValue(int32_t value)
{
    model->saveCurrentValue(value);
 802d89a:	6900      	ldr	r0, [r0, #16]
 802d89c:	f000 bd2a 	b.w	802e2f4 <_ZN5Model16saveCurrentValueEl>

0802d8a0 <_ZN19MenuLayer3Presenter17saveEnumSelectionEh>:
}

void MenuLayer3Presenter::saveEnumSelection(uint8_t enumIndex)
{
    model->saveCurrentEnumSelection(enumIndex);
 802d8a0:	6900      	ldr	r0, [r0, #16]
 802d8a2:	f000 bd38 	b.w	802e316 <_ZN5Model24saveCurrentEnumSelectionEh>

0802d8a6 <_ZN14MenuLayer3View14tearDownScreenEv>:
}

void MenuLayer3View::tearDownScreen()
{
    // Reset state to prevent issues on next entry
    processingTick = false;
 802d8a6:	2300      	movs	r3, #0
 802d8a8:	f880 3724 	strb.w	r3, [r0, #1828]	@ 0x724
    needsRedraw = false;
 802d8ac:	f880 371c 	strb.w	r3, [r0, #1820]	@ 0x71c
    currentItem = nullptr;
 802d8b0:	f8c0 3704 	str.w	r3, [r0, #1796]	@ 0x704
    m_buttonController = nullptr;
 802d8b4:	f8c0 3710 	str.w	r3, [r0, #1808]	@ 0x710

    MenuLayer3ViewBase::tearDownScreen();
}
 802d8b8:	4770      	bx	lr
	...

0802d8bc <_ZN14MenuLayer3View16handleHomeButtonEv>:
        static_cast<FrontendApplication*>(app)->gotoMenuLayer2Screen();
    }
}

void MenuLayer3View::handleHomeButton()
{
 802d8bc:	b508      	push	{r3, lr}
    // Prevent multiple rapid home presses
    uint32_t currentTime = HAL_GetTick();
 802d8be:	f7ea ff35 	bl	801872c <HAL_GetTick>
    static uint32_t lastHomeTime = 0;
    if (currentTime - lastHomeTime < ENTER_BUTTON_DEBOUNCE) {
 802d8c2:	4a07      	ldr	r2, [pc, #28]	@ (802d8e0 <_ZN14MenuLayer3View16handleHomeButtonEv+0x24>)
 802d8c4:	6813      	ldr	r3, [r2, #0]
 802d8c6:	1ac3      	subs	r3, r0, r3
 802d8c8:	2bc7      	cmp	r3, #199	@ 0xc7
 802d8ca:	d907      	bls.n	802d8dc <_ZN14MenuLayer3View16handleHomeButtonEv+0x20>
        return;
    }
    lastHomeTime = currentTime;
 802d8cc:	6010      	str	r0, [r2, #0]

    // Exit without saving (discard temporary values)
    Application* app = Application::getInstance();
 802d8ce:	f007 fa1d 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (app) {
 802d8d2:	b118      	cbz	r0, 802d8dc <_ZN14MenuLayer3View16handleHomeButtonEv+0x20>
        static_cast<FrontendApplication*>(app)->gotoMenuLayer1ScreenNoTransition();
    }
}
 802d8d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        static_cast<FrontendApplication*>(app)->gotoMenuLayer1ScreenNoTransition();
 802d8d8:	f7fa bc0c 	b.w	80280f4 <_ZN23FrontendApplicationBase32gotoMenuLayer1ScreenNoTransitionEv>
}
 802d8dc:	bd08      	pop	{r3, pc}
 802d8de:	bf00      	nop
 802d8e0:	20009e80 	.word	0x20009e80

0802d8e4 <_ZN14MenuLayer3ViewD1Ev>:

class MenuLayer3View : public MenuLayer3ViewBase
{
public:
    MenuLayer3View();
    virtual ~MenuLayer3View() {}
 802d8e4:	b510      	push	{r4, lr}
 802d8e6:	4b03      	ldr	r3, [pc, #12]	@ (802d8f4 <_ZN14MenuLayer3ViewD1Ev+0x10>)
 802d8e8:	6003      	str	r3, [r0, #0]
 802d8ea:	4604      	mov	r4, r0
 802d8ec:	f7fc fd4f 	bl	802a38e <_ZN18MenuLayer3ViewBaseD1Ev>
 802d8f0:	4620      	mov	r0, r4
 802d8f2:	bd10      	pop	{r4, pc}
 802d8f4:	08042f54 	.word	0x08042f54

0802d8f8 <_ZN14MenuLayer3ViewD0Ev>:
 802d8f8:	b510      	push	{r4, lr}
 802d8fa:	4604      	mov	r4, r0
 802d8fc:	f7ff fff2 	bl	802d8e4 <_ZN14MenuLayer3ViewD1Ev>
 802d900:	4620      	mov	r0, r4
 802d902:	f640 1138 	movw	r1, #2360	@ 0x938
 802d906:	f00e fdf0 	bl	803c4ea <_ZdlPvj>
 802d90a:	4620      	mov	r0, r4
 802d90c:	bd10      	pop	{r4, pc}
	...

0802d910 <_ZN14MenuLayer3View17handleEnterButtonEv>:
    if (!currentItem || !presenter) return;
 802d910:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802d914:	b510      	push	{r4, lr}
 802d916:	4604      	mov	r4, r0
    if (!currentItem || !presenter) return;
 802d918:	b1f3      	cbz	r3, 802d958 <_ZN14MenuLayer3View17handleEnterButtonEv+0x48>
 802d91a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 802d91c:	b1e3      	cbz	r3, 802d958 <_ZN14MenuLayer3View17handleEnterButtonEv+0x48>
    uint32_t currentTime = HAL_GetTick();
 802d91e:	f7ea ff05 	bl	801872c <HAL_GetTick>
    if (currentTime - lastEnterTime < ENTER_BUTTON_DEBOUNCE) {
 802d922:	4a0e      	ldr	r2, [pc, #56]	@ (802d95c <_ZN14MenuLayer3View17handleEnterButtonEv+0x4c>)
 802d924:	6813      	ldr	r3, [r2, #0]
 802d926:	1ac3      	subs	r3, r0, r3
 802d928:	2bc7      	cmp	r3, #199	@ 0xc7
 802d92a:	d915      	bls.n	802d958 <_ZN14MenuLayer3View17handleEnterButtonEv+0x48>
    if (currentItem->type == NUMBER_TYPE) {
 802d92c:	f8d4 3704 	ldr.w	r3, [r4, #1796]	@ 0x704
    lastEnterTime = currentTime;
 802d930:	6010      	str	r0, [r2, #0]
    if (currentItem->type == NUMBER_TYPE) {
 802d932:	791b      	ldrb	r3, [r3, #4]
        presenter->saveNumberValue(tempValue);
 802d934:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
    if (currentItem->type == NUMBER_TYPE) {
 802d936:	b953      	cbnz	r3, 802d94e <_ZN14MenuLayer3View17handleEnterButtonEv+0x3e>
        presenter->saveNumberValue(tempValue);
 802d938:	f8d4 1708 	ldr.w	r1, [r4, #1800]	@ 0x708
 802d93c:	f7ff ffad 	bl	802d89a <_ZN19MenuLayer3Presenter15saveNumberValueEl>
    Application* app = Application::getInstance();
 802d940:	f007 f9e4 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    if (app) {
 802d944:	b140      	cbz	r0, 802d958 <_ZN14MenuLayer3View17handleEnterButtonEv+0x48>
}
 802d946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    void gotoMenuLayer2Screen() { gotoMenuLayer2ScreenNoTransition(); }
 802d94a:	f7fa bbe3 	b.w	8028114 <_ZN23FrontendApplicationBase32gotoMenuLayer2ScreenNoTransitionEv>
        presenter->saveEnumSelection(tempEnumIndex);
 802d94e:	f894 170c 	ldrb.w	r1, [r4, #1804]	@ 0x70c
 802d952:	f7ff ffa5 	bl	802d8a0 <_ZN19MenuLayer3Presenter17saveEnumSelectionEh>
 802d956:	e7f3      	b.n	802d940 <_ZN14MenuLayer3View17handleEnterButtonEv+0x30>
}
 802d958:	bd10      	pop	{r4, pc}
 802d95a:	bf00      	nop
 802d95c:	20009e84 	.word	0x20009e84

0802d960 <_ZN14MenuLayer3ViewC1Ev>:
MenuLayer3View::MenuLayer3View() : currentItem(nullptr), tempValue(0), tempEnumIndex(0),
 802d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d962:	4604      	mov	r4, r0
 802d964:	2500      	movs	r5, #0
    processingTick(false), lastTickTime(0), tickCount(0)
 802d966:	f7fc fd37 	bl	802a3d8 <_ZN18MenuLayer3ViewBaseC1Ev>
    memset(nameBuffer, 0, sizeof(nameBuffer));
 802d96a:	2664      	movs	r6, #100	@ 0x64
    processingTick(false), lastTickTime(0), tickCount(0)
 802d96c:	4b22      	ldr	r3, [pc, #136]	@ (802d9f8 <_ZN14MenuLayer3ViewC1Ev+0x98>)
 802d96e:	6023      	str	r3, [r4, #0]
    memset(nameBuffer, 0, sizeof(nameBuffer));
 802d970:	4632      	mov	r2, r6
 802d972:	4629      	mov	r1, r5
MenuLayer3View::MenuLayer3View() : currentItem(nullptr), tempValue(0), tempEnumIndex(0),
 802d974:	f8c4 5704 	str.w	r5, [r4, #1796]	@ 0x704
 802d978:	f8c4 5708 	str.w	r5, [r4, #1800]	@ 0x708
 802d97c:	f884 570c 	strb.w	r5, [r4, #1804]	@ 0x70c
    m_buttonController(nullptr), // Initialize as null
 802d980:	f8c4 5710 	str.w	r5, [r4, #1808]	@ 0x710
    lastHoldTime(0), holdIncrement(0), needsRedraw(false), lastButtonChangeTime(0),
 802d984:	f8c4 5714 	str.w	r5, [r4, #1812]	@ 0x714
 802d988:	f8c4 5718 	str.w	r5, [r4, #1816]	@ 0x718
 802d98c:	f884 571c 	strb.w	r5, [r4, #1820]	@ 0x71c
 802d990:	f8c4 5720 	str.w	r5, [r4, #1824]	@ 0x720
    processingTick(false), lastTickTime(0), tickCount(0)
 802d994:	f884 5724 	strb.w	r5, [r4, #1828]	@ 0x724
 802d998:	f8c4 5728 	str.w	r5, [r4, #1832]	@ 0x728
 802d99c:	f8c4 572c 	str.w	r5, [r4, #1836]	@ 0x72c
    memset(nameBuffer, 0, sizeof(nameBuffer));
 802d9a0:	f504 60e6 	add.w	r0, r4, #1840	@ 0x730
 802d9a4:	f00f fd7e 	bl	803d4a4 <memset>
    memset(minValueBuffer, 0, sizeof(minValueBuffer));
 802d9a8:	271e      	movs	r7, #30
    memset(numberValueBuffer, 0, sizeof(numberValueBuffer));
 802d9aa:	4629      	mov	r1, r5
 802d9ac:	2214      	movs	r2, #20
 802d9ae:	f204 7094 	addw	r0, r4, #1940	@ 0x794
 802d9b2:	f00f fd77 	bl	803d4a4 <memset>
    memset(minValueBuffer, 0, sizeof(minValueBuffer));
 802d9b6:	463a      	mov	r2, r7
 802d9b8:	4629      	mov	r1, r5
 802d9ba:	f504 60f5 	add.w	r0, r4, #1960	@ 0x7a8
 802d9be:	f00f fd71 	bl	803d4a4 <memset>
    memset(maxValueBuffer, 0, sizeof(maxValueBuffer));
 802d9c2:	463a      	mov	r2, r7
 802d9c4:	4629      	mov	r1, r5
 802d9c6:	f204 70c6 	addw	r0, r4, #1990	@ 0x7c6
 802d9ca:	f00f fd6b 	bl	803d4a4 <memset>
    memset(enumBuffer, 0, sizeof(enumBuffer));
 802d9ce:	4632      	mov	r2, r6
 802d9d0:	4629      	mov	r1, r5
 802d9d2:	f204 70e4 	addw	r0, r4, #2020	@ 0x7e4
 802d9d6:	f00f fd65 	bl	803d4a4 <memset>
    memset(descBuffer, 0, sizeof(descBuffer));
 802d9da:	4629      	mov	r1, r5
 802d9dc:	22c8      	movs	r2, #200	@ 0xc8
 802d9de:	f604 0048 	addw	r0, r4, #2120	@ 0x848
 802d9e2:	f00f fd5f 	bl	803d4a4 <memset>
    memset(unitsBuffer, 0, sizeof(unitsBuffer));
 802d9e6:	2228      	movs	r2, #40	@ 0x28
 802d9e8:	4629      	mov	r1, r5
 802d9ea:	f504 6011 	add.w	r0, r4, #2320	@ 0x910
 802d9ee:	f00f fd59 	bl	803d4a4 <memset>
}
 802d9f2:	4620      	mov	r0, r4
 802d9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d9f6:	bf00      	nop
 802d9f8:	08042f54 	.word	0x08042f54

0802d9fc <_ZN14MenuLayer3View21initializeCurrentItemEv>:
{
 802d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d9fe:	4604      	mov	r4, r0
    currentItem = presenter ? presenter->getCurrentSubItem() : nullptr;
 802da00:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802da02:	b910      	cbnz	r0, 802da0a <_ZN14MenuLayer3View21initializeCurrentItemEv+0xe>
 802da04:	f8c4 0704 	str.w	r0, [r4, #1796]	@ 0x704
}
 802da08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    currentItem = presenter ? presenter->getCurrentSubItem() : nullptr;
 802da0a:	f7ff ff43 	bl	802d894 <_ZN19MenuLayer3Presenter17getCurrentSubItemEv>
 802da0e:	f8c4 0704 	str.w	r0, [r4, #1796]	@ 0x704
    if (currentItem) {
 802da12:	2800      	cmp	r0, #0
 802da14:	d0f8      	beq.n	802da08 <_ZN14MenuLayer3View21initializeCurrentItemEv+0xc>
        const char* sourceName = currentItem->name;
 802da16:	6806      	ldr	r6, [r0, #0]
        if (sourceName) {
 802da18:	b1ae      	cbz	r6, 802da46 <_ZN14MenuLayer3View21initializeCurrentItemEv+0x4a>
            size_t sourceLen = strlen(sourceName);
 802da1a:	4630      	mov	r0, r6
 802da1c:	f7e7 fd50 	bl	80154c0 <strlen>
            size_t copyLen = (sourceLen < 49) ? sourceLen : 49;
 802da20:	2831      	cmp	r0, #49	@ 0x31
 802da22:	4605      	mov	r5, r0
 802da24:	f504 67e6 	add.w	r7, r4, #1840	@ 0x730
 802da28:	bf28      	it	cs
 802da2a:	2531      	movcs	r5, #49	@ 0x31
            if (copyLen > 0) {
 802da2c:	b120      	cbz	r0, 802da38 <_ZN14MenuLayer3View21initializeCurrentItemEv+0x3c>
                touchgfx::Unicode::strncpy(nameBuffer, sourceName, copyLen);
 802da2e:	b2aa      	uxth	r2, r5
 802da30:	4631      	mov	r1, r6
 802da32:	4638      	mov	r0, r7
 802da34:	f009 febb 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            nameBuffer[copyLen] = 0; // Ensure null termination
 802da38:	f505 7566 	add.w	r5, r5, #920	@ 0x398
 802da3c:	2300      	movs	r3, #0
 802da3e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
 802da42:	f8c4 7424 	str.w	r7, [r4, #1060]	@ 0x424
        if (currentItem->type == NUMBER_TYPE) {
 802da46:	f8d4 2704 	ldr.w	r2, [r4, #1796]	@ 0x704
 802da4a:	7911      	ldrb	r1, [r2, #4]
 802da4c:	b9e1      	cbnz	r1, 802da88 <_ZN14MenuLayer3View21initializeCurrentItemEv+0x8c>
            tempValue = currentItem->currentValue;
 802da4e:	6893      	ldr	r3, [r2, #8]
 802da50:	f8c4 3708 	str.w	r3, [r4, #1800]	@ 0x708
            int32_t range = currentItem->maxValue - currentItem->minValue;
 802da54:	e9d2 2303 	ldrd	r2, r3, [r2, #12]
 802da58:	1a9b      	subs	r3, r3, r2
            if (range > 100) {
 802da5a:	2b64      	cmp	r3, #100	@ 0x64
 802da5c:	dd10      	ble.n	802da80 <_ZN14MenuLayer3View21initializeCurrentItemEv+0x84>
                holdIncrement = range / 100; // 1% of range
 802da5e:	2264      	movs	r2, #100	@ 0x64
                holdIncrement = range / 10;  // 10% of smaller ranges
 802da60:	fb93 f2f2 	sdiv	r2, r3, r2
            if (holdIncrement > range / 2) holdIncrement = range / 2;
 802da64:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802da68:	105b      	asrs	r3, r3, #1
                holdIncrement = 1; // Minimum increment
 802da6a:	429a      	cmp	r2, r3
 802da6c:	bfa8      	it	ge
 802da6e:	461a      	movge	r2, r3
            if (holdIncrement > 50) holdIncrement = 50; // Cap at 50 for safety
 802da70:	2a32      	cmp	r2, #50	@ 0x32
                holdIncrement = 1; // Minimum increment
 802da72:	f8c4 2718 	str.w	r2, [r4, #1816]	@ 0x718
            if (holdIncrement > 50) holdIncrement = 50; // Cap at 50 for safety
 802da76:	ddc7      	ble.n	802da08 <_ZN14MenuLayer3View21initializeCurrentItemEv+0xc>
 802da78:	2332      	movs	r3, #50	@ 0x32
 802da7a:	f8c4 3718 	str.w	r3, [r4, #1816]	@ 0x718
 802da7e:	e7c3      	b.n	802da08 <_ZN14MenuLayer3View21initializeCurrentItemEv+0xc>
            } else if (range > 10) {
 802da80:	2b0a      	cmp	r3, #10
 802da82:	dd0d      	ble.n	802daa0 <_ZN14MenuLayer3View21initializeCurrentItemEv+0xa4>
                holdIncrement = range / 10;  // 10% of smaller ranges
 802da84:	220a      	movs	r2, #10
 802da86:	e7eb      	b.n	802da60 <_ZN14MenuLayer3View21initializeCurrentItemEv+0x64>
        } else if (currentItem->type == ENUM_TYPE) {
 802da88:	2901      	cmp	r1, #1
 802da8a:	d1bd      	bne.n	802da08 <_ZN14MenuLayer3View21initializeCurrentItemEv+0xc>
            tempEnumIndex = currentItem->currentEnumIndex;
 802da8c:	7e53      	ldrb	r3, [r2, #25]
            if (tempEnumIndex >= currentItem->enumCount) {
 802da8e:	7e12      	ldrb	r2, [r2, #24]
            holdIncrement = 1;
 802da90:	f8c4 1718 	str.w	r1, [r4, #1816]	@ 0x718
                tempEnumIndex = 0;
 802da94:	429a      	cmp	r2, r3
 802da96:	bf98      	it	ls
 802da98:	2300      	movls	r3, #0
 802da9a:	f884 370c 	strb.w	r3, [r4, #1804]	@ 0x70c
}
 802da9e:	e7b3      	b.n	802da08 <_ZN14MenuLayer3View21initializeCurrentItemEv+0xc>
 802daa0:	2201      	movs	r2, #1
 802daa2:	e7df      	b.n	802da64 <_ZN14MenuLayer3View21initializeCurrentItemEv+0x68>

0802daa4 <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv>:
{
 802daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!currentItem) return;
 802daa6:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802daaa:	4604      	mov	r4, r0
    if (!currentItem) return;
 802daac:	b3bb      	cbz	r3, 802db1e <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv+0x7a>
    if (currentItem->description) {
 802daae:	69dd      	ldr	r5, [r3, #28]
 802dab0:	b1b5      	cbz	r5, 802dae0 <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv+0x3c>
        size_t descLen = strlen(sourceDesc);
 802dab2:	4628      	mov	r0, r5
 802dab4:	f7e7 fd04 	bl	80154c0 <strlen>
        size_t copyLen = (descLen < 99) ? descLen : 99;
 802dab8:	2863      	cmp	r0, #99	@ 0x63
 802daba:	4606      	mov	r6, r0
 802dabc:	f604 0748 	addw	r7, r4, #2120	@ 0x848
 802dac0:	bf28      	it	cs
 802dac2:	2663      	movcs	r6, #99	@ 0x63
        if (copyLen > 0) {
 802dac4:	b120      	cbz	r0, 802dad0 <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv+0x2c>
            touchgfx::Unicode::strncpy(descBuffer, sourceDesc, copyLen);
 802dac6:	b2b2      	uxth	r2, r6
 802dac8:	4629      	mov	r1, r5
 802daca:	4638      	mov	r0, r7
 802dacc:	f009 fe6f 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        descBuffer[copyLen] = 0;
 802dad0:	f206 4624 	addw	r6, r6, #1060	@ 0x424
 802dad4:	2300      	movs	r3, #0
 802dad6:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
    }
 802dada:	2501      	movs	r5, #1
 802dadc:	f8c4 7470 	str.w	r7, [r4, #1136]	@ 0x470
    if (currentItem->units) {
 802dae0:	f8d4 3704 	ldr.w	r3, [r4, #1796]	@ 0x704
        visible = vis;
 802dae4:	f884 544d 	strb.w	r5, [r4, #1101]	@ 0x44d
 802dae8:	6a1d      	ldr	r5, [r3, #32]
 802daea:	b1cd      	cbz	r5, 802db20 <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv+0x7c>
        size_t unitsLen = strlen(sourceUnits);
 802daec:	4628      	mov	r0, r5
 802daee:	f7e7 fce7 	bl	80154c0 <strlen>
        size_t copyLen = (unitsLen < 19) ? unitsLen : 19;
 802daf2:	2813      	cmp	r0, #19
 802daf4:	4606      	mov	r6, r0
 802daf6:	f504 6711 	add.w	r7, r4, #2320	@ 0x910
 802dafa:	bf28      	it	cs
 802dafc:	2613      	movcs	r6, #19
        if (copyLen > 0) {
 802dafe:	b120      	cbz	r0, 802db0a <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv+0x66>
            touchgfx::Unicode::strncpy(unitsBuffer, sourceUnits, copyLen);
 802db00:	b2b2      	uxth	r2, r6
 802db02:	4629      	mov	r1, r5
 802db04:	4638      	mov	r0, r7
 802db06:	f009 fe52 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        unitsBuffer[copyLen] = 0;
 802db0a:	f506 6691 	add.w	r6, r6, #1160	@ 0x488
 802db0e:	2300      	movs	r3, #0
 802db10:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 802db14:	2301      	movs	r3, #1
 802db16:	f8c4 74bc 	str.w	r7, [r4, #1212]	@ 0x4bc
 802db1a:	f884 3499 	strb.w	r3, [r4, #1177]	@ 0x499
}
 802db1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802db20:	f884 5499 	strb.w	r5, [r4, #1177]	@ 0x499
    }
 802db24:	e7fb      	b.n	802db1e <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv+0x7a>
	...

0802db28 <_ZN14MenuLayer3View18updateValueDisplayEv>:
    if (!currentItem || currentItem->type != NUMBER_TYPE) return;
 802db28:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802db2c:	b570      	push	{r4, r5, r6, lr}
 802db2e:	4604      	mov	r4, r0
    if (!currentItem || currentItem->type != NUMBER_TYPE) return;
 802db30:	2b00      	cmp	r3, #0
 802db32:	d039      	beq.n	802dba8 <_ZN14MenuLayer3View18updateValueDisplayEv+0x80>
 802db34:	791a      	ldrb	r2, [r3, #4]
 802db36:	bbba      	cbnz	r2, 802dba8 <_ZN14MenuLayer3View18updateValueDisplayEv+0x80>
    if (tempValue < currentItem->minValue) tempValue = currentItem->minValue;
 802db38:	68da      	ldr	r2, [r3, #12]
 802db3a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
    if (tempValue > currentItem->maxValue) tempValue = currentItem->maxValue;
 802db3e:	691b      	ldr	r3, [r3, #16]
    if (tempValue < currentItem->minValue) tempValue = currentItem->minValue;
 802db40:	4291      	cmp	r1, r2
 802db42:	bfb8      	it	lt
 802db44:	f8c0 2708 	strlt.w	r2, [r0, #1800]	@ 0x708
    if (tempValue > currentItem->maxValue) tempValue = currentItem->maxValue;
 802db48:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 802db4c:	429a      	cmp	r2, r3
 802db4e:	bfc8      	it	gt
 802db50:	f8c0 3708 	strgt.w	r3, [r0, #1800]	@ 0x708
    Unicode::snprintf(numberValueBuffer, 9, "%d", tempValue); // Leave room for null terminator
 802db54:	f200 7594 	addw	r5, r0, #1940	@ 0x794
 802db58:	f8d0 3708 	ldr.w	r3, [r0, #1800]	@ 0x708
 802db5c:	4a13      	ldr	r2, [pc, #76]	@ (802dbac <_ZN14MenuLayer3View18updateValueDisplayEv+0x84>)
 802db5e:	2109      	movs	r1, #9
 802db60:	4628      	mov	r0, r5
 802db62:	f00a f985 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Unicode::snprintf(minValueBuffer, 14, "Min: %d", currentItem->minValue);
 802db66:	f8d4 3704 	ldr.w	r3, [r4, #1796]	@ 0x704
 802db6a:	f8c4 5340 	str.w	r5, [r4, #832]	@ 0x340
 802db6e:	f504 66f5 	add.w	r6, r4, #1960	@ 0x7a8
        visible = vis;
 802db72:	2501      	movs	r5, #1
 802db74:	68db      	ldr	r3, [r3, #12]
 802db76:	4a0e      	ldr	r2, [pc, #56]	@ (802dbb0 <_ZN14MenuLayer3View18updateValueDisplayEv+0x88>)
 802db78:	f884 531d 	strb.w	r5, [r4, #797]	@ 0x31d
 802db7c:	210e      	movs	r1, #14
 802db7e:	4630      	mov	r0, r6
 802db80:	f00a f976 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Unicode::snprintf(maxValueBuffer, 14, "Max: %d", currentItem->maxValue);
 802db84:	f8d4 3704 	ldr.w	r3, [r4, #1796]	@ 0x704
 802db88:	f8c4 638c 	str.w	r6, [r4, #908]	@ 0x38c
 802db8c:	f204 76c6 	addw	r6, r4, #1990	@ 0x7c6
 802db90:	691b      	ldr	r3, [r3, #16]
 802db92:	4a08      	ldr	r2, [pc, #32]	@ (802dbb4 <_ZN14MenuLayer3View18updateValueDisplayEv+0x8c>)
 802db94:	f884 5369 	strb.w	r5, [r4, #873]	@ 0x369
 802db98:	210e      	movs	r1, #14
 802db9a:	4630      	mov	r0, r6
 802db9c:	f00a f968 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802dba0:	f8c4 63d8 	str.w	r6, [r4, #984]	@ 0x3d8
 802dba4:	f884 53b5 	strb.w	r5, [r4, #949]	@ 0x3b5
}
 802dba8:	bd70      	pop	{r4, r5, r6, pc}
 802dbaa:	bf00      	nop
 802dbac:	080410f9 	.word	0x080410f9
 802dbb0:	080410f4 	.word	0x080410f4
 802dbb4:	080410fc 	.word	0x080410fc

0802dbb8 <_ZN14MenuLayer3View17updateEnumDisplayEv>:
{
 802dbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!currentItem || currentItem->type != ENUM_TYPE) return;
 802dbba:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802dbbe:	4604      	mov	r4, r0
    if (!currentItem || currentItem->type != ENUM_TYPE) return;
 802dbc0:	b363      	cbz	r3, 802dc1c <_ZN14MenuLayer3View17updateEnumDisplayEv+0x64>
 802dbc2:	791a      	ldrb	r2, [r3, #4]
 802dbc4:	2a01      	cmp	r2, #1
 802dbc6:	d129      	bne.n	802dc1c <_ZN14MenuLayer3View17updateEnumDisplayEv+0x64>
    if (tempEnumIndex >= currentItem->enumCount) {
 802dbc8:	7e19      	ldrb	r1, [r3, #24]
 802dbca:	f890 270c 	ldrb.w	r2, [r0, #1804]	@ 0x70c
 802dbce:	428a      	cmp	r2, r1
        tempEnumIndex = 0;
 802dbd0:	bf24      	itt	cs
 802dbd2:	2200      	movcs	r2, #0
 802dbd4:	f880 270c 	strbcs.w	r2, [r0, #1804]	@ 0x70c
    if (currentItem->enumOptions && tempEnumIndex < currentItem->enumCount) {
 802dbd8:	695b      	ldr	r3, [r3, #20]
 802dbda:	b1fb      	cbz	r3, 802dc1c <_ZN14MenuLayer3View17updateEnumDisplayEv+0x64>
 802dbdc:	f890 270c 	ldrb.w	r2, [r0, #1804]	@ 0x70c
 802dbe0:	4291      	cmp	r1, r2
 802dbe2:	d91b      	bls.n	802dc1c <_ZN14MenuLayer3View17updateEnumDisplayEv+0x64>
        const char* enumOption = currentItem->enumOptions[tempEnumIndex];
 802dbe4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        if (enumOption) {
 802dbe8:	b1c6      	cbz	r6, 802dc1c <_ZN14MenuLayer3View17updateEnumDisplayEv+0x64>
            size_t optionLen = strlen(enumOption);
 802dbea:	4630      	mov	r0, r6
 802dbec:	f7e7 fc68 	bl	80154c0 <strlen>
            size_t copyLen = (optionLen < 49) ? optionLen : 49;
 802dbf0:	2831      	cmp	r0, #49	@ 0x31
 802dbf2:	bf28      	it	cs
 802dbf4:	2031      	movcs	r0, #49	@ 0x31
 802dbf6:	4605      	mov	r5, r0
            touchgfx::Unicode::strncpy(enumBuffer, enumOption, copyLen);
 802dbf8:	f204 77e4 	addw	r7, r4, #2020	@ 0x7e4
            enumBuffer[copyLen] = 0;
 802dbfc:	f505 757c 	add.w	r5, r5, #1008	@ 0x3f0
            touchgfx::Unicode::strncpy(enumBuffer, enumOption, copyLen);
 802dc00:	b282      	uxth	r2, r0
 802dc02:	4631      	mov	r1, r6
 802dc04:	4638      	mov	r0, r7
            enumBuffer[copyLen] = 0;
 802dc06:	eb04 0545 	add.w	r5, r4, r5, lsl #1
            touchgfx::Unicode::strncpy(enumBuffer, enumOption, copyLen);
 802dc0a:	f009 fdd0 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            enumBuffer[copyLen] = 0;
 802dc0e:	2300      	movs	r3, #0
 802dc10:	80ab      	strh	r3, [r5, #4]
 802dc12:	2301      	movs	r3, #1
 802dc14:	f8c4 72f4 	str.w	r7, [r4, #756]	@ 0x2f4
 802dc18:	f884 32d1 	strb.w	r3, [r4, #721]	@ 0x2d1
}
 802dc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802dc1e <_ZN14MenuLayer3View13updateDisplayEv>:
{
 802dc1e:	b538      	push	{r3, r4, r5, lr}
    if (!currentItem) return;
 802dc20:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802dc24:	4604      	mov	r4, r0
    if (!currentItem) return;
 802dc26:	b16b      	cbz	r3, 802dc44 <_ZN14MenuLayer3View13updateDisplayEv+0x26>
    updateDescriptionAndUnits();
 802dc28:	f7ff ff3c 	bl	802daa4 <_ZN14MenuLayer3View25updateDescriptionAndUnitsEv>
    if (currentItem->type == NUMBER_TYPE) {
 802dc2c:	f8d4 3704 	ldr.w	r3, [r4, #1796]	@ 0x704
 802dc30:	791d      	ldrb	r5, [r3, #4]
        updateValueDisplay();
 802dc32:	4620      	mov	r0, r4
    if (currentItem->type == NUMBER_TYPE) {
 802dc34:	b93d      	cbnz	r5, 802dc46 <_ZN14MenuLayer3View13updateDisplayEv+0x28>
        updateValueDisplay();
 802dc36:	f7ff ff77 	bl	802db28 <_ZN14MenuLayer3View18updateValueDisplayEv>
 802dc3a:	f884 52d1 	strb.w	r5, [r4, #721]	@ 0x2d1

void MenuLayer3View::requestRedraw()
{
    needsRedraw = true;
 802dc3e:	2301      	movs	r3, #1
 802dc40:	f884 371c 	strb.w	r3, [r4, #1820]	@ 0x71c
}
 802dc44:	bd38      	pop	{r3, r4, r5, pc}
        updateEnumDisplay();
 802dc46:	f7ff ffb7 	bl	802dbb8 <_ZN14MenuLayer3View17updateEnumDisplayEv>
 802dc4a:	2300      	movs	r3, #0
 802dc4c:	f884 331d 	strb.w	r3, [r4, #797]	@ 0x31d
 802dc50:	f884 3369 	strb.w	r3, [r4, #873]	@ 0x369
 802dc54:	f884 33b5 	strb.w	r3, [r4, #949]	@ 0x3b5
    }
 802dc58:	e7f1      	b.n	802dc3e <_ZN14MenuLayer3View13updateDisplayEv+0x20>

0802dc5a <_ZN14MenuLayer3View14handleUpButtonEv>:
{
 802dc5a:	b538      	push	{r3, r4, r5, lr}
    if (!currentItem) return;
 802dc5c:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802dc60:	4604      	mov	r4, r0
    if (!currentItem) return;
 802dc62:	b1d3      	cbz	r3, 802dc9a <_ZN14MenuLayer3View14handleUpButtonEv+0x40>
    uint32_t currentTime = HAL_GetTick();
 802dc64:	f7ea fd62 	bl	801872c <HAL_GetTick>
    if (currentTime - lastButtonChangeTime < BUTTON_PRESS_DEBOUNCE) {
 802dc68:	f8d4 3720 	ldr.w	r3, [r4, #1824]	@ 0x720
 802dc6c:	1ac3      	subs	r3, r0, r3
 802dc6e:	2b18      	cmp	r3, #24
 802dc70:	d913      	bls.n	802dc9a <_ZN14MenuLayer3View14handleUpButtonEv+0x40>
    if (currentItem->type == NUMBER_TYPE) {
 802dc72:	f8d4 2704 	ldr.w	r2, [r4, #1796]	@ 0x704
    lastButtonChangeTime = currentTime;
 802dc76:	f8c4 0720 	str.w	r0, [r4, #1824]	@ 0x720
    if (currentItem->type == NUMBER_TYPE) {
 802dc7a:	7915      	ldrb	r5, [r2, #4]
 802dc7c:	b975      	cbnz	r5, 802dc9c <_ZN14MenuLayer3View14handleUpButtonEv+0x42>
        if (tempValue < currentItem->maxValue) {
 802dc7e:	f8d4 3708 	ldr.w	r3, [r4, #1800]	@ 0x708
 802dc82:	6912      	ldr	r2, [r2, #16]
 802dc84:	4293      	cmp	r3, r2
 802dc86:	da08      	bge.n	802dc9a <_ZN14MenuLayer3View14handleUpButtonEv+0x40>
            tempValue++;
 802dc88:	3301      	adds	r3, #1
 802dc8a:	f8c4 3708 	str.w	r3, [r4, #1800]	@ 0x708
            updateValueDisplay();
 802dc8e:	4620      	mov	r0, r4
 802dc90:	f7ff ff4a 	bl	802db28 <_ZN14MenuLayer3View18updateValueDisplayEv>
    needsRedraw = true;
 802dc94:	2301      	movs	r3, #1
 802dc96:	f884 371c 	strb.w	r3, [r4, #1820]	@ 0x71c
}
 802dc9a:	bd38      	pop	{r3, r4, r5, pc}
    } else if (currentItem->type == ENUM_TYPE && currentItem->enumCount > 0) {
 802dc9c:	2d01      	cmp	r5, #1
 802dc9e:	d1fc      	bne.n	802dc9a <_ZN14MenuLayer3View14handleUpButtonEv+0x40>
 802dca0:	7e12      	ldrb	r2, [r2, #24]
 802dca2:	2a00      	cmp	r2, #0
 802dca4:	d0f9      	beq.n	802dc9a <_ZN14MenuLayer3View14handleUpButtonEv+0x40>
        tempEnumIndex = (tempEnumIndex + 1) % currentItem->enumCount;
 802dca6:	f894 370c 	ldrb.w	r3, [r4, #1804]	@ 0x70c
 802dcaa:	3301      	adds	r3, #1
 802dcac:	fbb3 f1f2 	udiv	r1, r3, r2
 802dcb0:	fb02 3311 	mls	r3, r2, r1, r3
 802dcb4:	f884 370c 	strb.w	r3, [r4, #1804]	@ 0x70c
        updateEnumDisplay();
 802dcb8:	4620      	mov	r0, r4
 802dcba:	f7ff ff7d 	bl	802dbb8 <_ZN14MenuLayer3View17updateEnumDisplayEv>
    needsRedraw = true;
 802dcbe:	f884 571c 	strb.w	r5, [r4, #1820]	@ 0x71c
}
 802dcc2:	e7ea      	b.n	802dc9a <_ZN14MenuLayer3View14handleUpButtonEv+0x40>

0802dcc4 <_ZN14MenuLayer3View16handleDownButtonEv>:
    if (!currentItem) return;
 802dcc4:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802dcc8:	b510      	push	{r4, lr}
 802dcca:	4604      	mov	r4, r0
    if (!currentItem) return;
 802dccc:	b1d3      	cbz	r3, 802dd04 <_ZN14MenuLayer3View16handleDownButtonEv+0x40>
    uint32_t currentTime = HAL_GetTick();
 802dcce:	f7ea fd2d 	bl	801872c <HAL_GetTick>
    if (currentTime - lastButtonChangeTime < BUTTON_PRESS_DEBOUNCE) {
 802dcd2:	f8d4 3720 	ldr.w	r3, [r4, #1824]	@ 0x720
 802dcd6:	1ac3      	subs	r3, r0, r3
 802dcd8:	2b18      	cmp	r3, #24
 802dcda:	d913      	bls.n	802dd04 <_ZN14MenuLayer3View16handleDownButtonEv+0x40>
    if (currentItem->type == NUMBER_TYPE) {
 802dcdc:	f8d4 2704 	ldr.w	r2, [r4, #1796]	@ 0x704
    lastButtonChangeTime = currentTime;
 802dce0:	f8c4 0720 	str.w	r0, [r4, #1824]	@ 0x720
    if (currentItem->type == NUMBER_TYPE) {
 802dce4:	7913      	ldrb	r3, [r2, #4]
 802dce6:	b973      	cbnz	r3, 802dd06 <_ZN14MenuLayer3View16handleDownButtonEv+0x42>
        if (tempValue > currentItem->minValue) {
 802dce8:	f8d4 3708 	ldr.w	r3, [r4, #1800]	@ 0x708
 802dcec:	68d2      	ldr	r2, [r2, #12]
 802dcee:	4293      	cmp	r3, r2
 802dcf0:	dd08      	ble.n	802dd04 <_ZN14MenuLayer3View16handleDownButtonEv+0x40>
            tempValue--;
 802dcf2:	3b01      	subs	r3, #1
 802dcf4:	f8c4 3708 	str.w	r3, [r4, #1800]	@ 0x708
            updateValueDisplay();
 802dcf8:	4620      	mov	r0, r4
 802dcfa:	f7ff ff15 	bl	802db28 <_ZN14MenuLayer3View18updateValueDisplayEv>
    needsRedraw = true;
 802dcfe:	2301      	movs	r3, #1
 802dd00:	f884 371c 	strb.w	r3, [r4, #1820]	@ 0x71c
}
 802dd04:	bd10      	pop	{r4, pc}
    } else if (currentItem->type == ENUM_TYPE && currentItem->enumCount > 0) {
 802dd06:	2b01      	cmp	r3, #1
 802dd08:	d1fc      	bne.n	802dd04 <_ZN14MenuLayer3View16handleDownButtonEv+0x40>
 802dd0a:	7e12      	ldrb	r2, [r2, #24]
 802dd0c:	2a00      	cmp	r2, #0
 802dd0e:	d0f9      	beq.n	802dd04 <_ZN14MenuLayer3View16handleDownButtonEv+0x40>
        if (tempEnumIndex == 0) {
 802dd10:	f894 370c 	ldrb.w	r3, [r4, #1804]	@ 0x70c
 802dd14:	b93b      	cbnz	r3, 802dd26 <_ZN14MenuLayer3View16handleDownButtonEv+0x62>
            tempEnumIndex = currentItem->enumCount - 1;
 802dd16:	3a01      	subs	r2, #1
 802dd18:	b2d3      	uxtb	r3, r2
 802dd1a:	f884 370c 	strb.w	r3, [r4, #1804]	@ 0x70c
        updateEnumDisplay();
 802dd1e:	4620      	mov	r0, r4
 802dd20:	f7ff ff4a 	bl	802dbb8 <_ZN14MenuLayer3View17updateEnumDisplayEv>
 802dd24:	e7eb      	b.n	802dcfe <_ZN14MenuLayer3View16handleDownButtonEv+0x3a>
            tempEnumIndex--;
 802dd26:	3b01      	subs	r3, #1
 802dd28:	b2db      	uxtb	r3, r3
 802dd2a:	e7f6      	b.n	802dd1a <_ZN14MenuLayer3View16handleDownButtonEv+0x56>

0802dd2c <_ZN14MenuLayer3View19processUpButtonHoldEv>:
{
 802dd2c:	b538      	push	{r3, r4, r5, lr}
    if (!currentItem) return;
 802dd2e:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802dd32:	4604      	mov	r4, r0
    if (!currentItem) return;
 802dd34:	b19b      	cbz	r3, 802dd5e <_ZN14MenuLayer3View19processUpButtonHoldEv+0x32>
    if (currentItem->type == NUMBER_TYPE) {
 802dd36:	791d      	ldrb	r5, [r3, #4]
 802dd38:	b995      	cbnz	r5, 802dd60 <_ZN14MenuLayer3View19processUpButtonHoldEv+0x34>
        int32_t newValue = tempValue + holdIncrement;
 802dd3a:	f8d0 1718 	ldr.w	r1, [r0, #1816]	@ 0x718
 802dd3e:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 802dd42:	440a      	add	r2, r1
        if (newValue <= currentItem->maxValue && newValue >= currentItem->minValue) {
 802dd44:	6919      	ldr	r1, [r3, #16]
 802dd46:	4291      	cmp	r1, r2
 802dd48:	db09      	blt.n	802dd5e <_ZN14MenuLayer3View19processUpButtonHoldEv+0x32>
 802dd4a:	68db      	ldr	r3, [r3, #12]
 802dd4c:	4293      	cmp	r3, r2
 802dd4e:	dc06      	bgt.n	802dd5e <_ZN14MenuLayer3View19processUpButtonHoldEv+0x32>
            tempValue = newValue;
 802dd50:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
            updateValueDisplay();
 802dd54:	f7ff fee8 	bl	802db28 <_ZN14MenuLayer3View18updateValueDisplayEv>
    needsRedraw = true;
 802dd58:	2301      	movs	r3, #1
 802dd5a:	f884 371c 	strb.w	r3, [r4, #1820]	@ 0x71c
}
 802dd5e:	bd38      	pop	{r3, r4, r5, pc}
    } else if (currentItem->type == ENUM_TYPE && currentItem->enumCount > 0) {
 802dd60:	2d01      	cmp	r5, #1
 802dd62:	d1fc      	bne.n	802dd5e <_ZN14MenuLayer3View19processUpButtonHoldEv+0x32>
 802dd64:	7e1a      	ldrb	r2, [r3, #24]
 802dd66:	2a00      	cmp	r2, #0
 802dd68:	d0f9      	beq.n	802dd5e <_ZN14MenuLayer3View19processUpButtonHoldEv+0x32>
        tempEnumIndex = (tempEnumIndex + 1) % currentItem->enumCount;
 802dd6a:	f890 370c 	ldrb.w	r3, [r0, #1804]	@ 0x70c
 802dd6e:	3301      	adds	r3, #1
 802dd70:	fbb3 f1f2 	udiv	r1, r3, r2
 802dd74:	fb02 3311 	mls	r3, r2, r1, r3
 802dd78:	f880 370c 	strb.w	r3, [r0, #1804]	@ 0x70c
        updateEnumDisplay();
 802dd7c:	f7ff ff1c 	bl	802dbb8 <_ZN14MenuLayer3View17updateEnumDisplayEv>
    needsRedraw = true;
 802dd80:	f884 571c 	strb.w	r5, [r4, #1820]	@ 0x71c
}
 802dd84:	e7eb      	b.n	802dd5e <_ZN14MenuLayer3View19processUpButtonHoldEv+0x32>

0802dd86 <_ZN14MenuLayer3View21processDownButtonHoldEv>:
    if (!currentItem) return;
 802dd86:	f8d0 3704 	ldr.w	r3, [r0, #1796]	@ 0x704
{
 802dd8a:	b510      	push	{r4, lr}
 802dd8c:	4604      	mov	r4, r0
    if (!currentItem) return;
 802dd8e:	b19b      	cbz	r3, 802ddb8 <_ZN14MenuLayer3View21processDownButtonHoldEv+0x32>
    if (currentItem->type == NUMBER_TYPE) {
 802dd90:	791a      	ldrb	r2, [r3, #4]
 802dd92:	b992      	cbnz	r2, 802ddba <_ZN14MenuLayer3View21processDownButtonHoldEv+0x34>
        int32_t newValue = tempValue - holdIncrement;
 802dd94:	f8d0 1718 	ldr.w	r1, [r0, #1816]	@ 0x718
 802dd98:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 802dd9c:	1a52      	subs	r2, r2, r1
        if (newValue >= currentItem->minValue && newValue <= currentItem->maxValue) {
 802dd9e:	68d9      	ldr	r1, [r3, #12]
 802dda0:	4291      	cmp	r1, r2
 802dda2:	dc09      	bgt.n	802ddb8 <_ZN14MenuLayer3View21processDownButtonHoldEv+0x32>
 802dda4:	691b      	ldr	r3, [r3, #16]
 802dda6:	4293      	cmp	r3, r2
 802dda8:	db06      	blt.n	802ddb8 <_ZN14MenuLayer3View21processDownButtonHoldEv+0x32>
            tempValue = newValue;
 802ddaa:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
            updateValueDisplay();
 802ddae:	f7ff febb 	bl	802db28 <_ZN14MenuLayer3View18updateValueDisplayEv>
    needsRedraw = true;
 802ddb2:	2301      	movs	r3, #1
 802ddb4:	f884 371c 	strb.w	r3, [r4, #1820]	@ 0x71c
}
 802ddb8:	bd10      	pop	{r4, pc}
    } else if (currentItem->type == ENUM_TYPE && currentItem->enumCount > 0) {
 802ddba:	2a01      	cmp	r2, #1
 802ddbc:	d1fc      	bne.n	802ddb8 <_ZN14MenuLayer3View21processDownButtonHoldEv+0x32>
 802ddbe:	7e1a      	ldrb	r2, [r3, #24]
 802ddc0:	2a00      	cmp	r2, #0
 802ddc2:	d0f9      	beq.n	802ddb8 <_ZN14MenuLayer3View21processDownButtonHoldEv+0x32>
        if (tempEnumIndex == 0) {
 802ddc4:	f890 370c 	ldrb.w	r3, [r0, #1804]	@ 0x70c
 802ddc8:	b93b      	cbnz	r3, 802ddda <_ZN14MenuLayer3View21processDownButtonHoldEv+0x54>
            tempEnumIndex = currentItem->enumCount - 1;
 802ddca:	3a01      	subs	r2, #1
 802ddcc:	b2d3      	uxtb	r3, r2
 802ddce:	f884 370c 	strb.w	r3, [r4, #1804]	@ 0x70c
        updateEnumDisplay();
 802ddd2:	4620      	mov	r0, r4
 802ddd4:	f7ff fef0 	bl	802dbb8 <_ZN14MenuLayer3View17updateEnumDisplayEv>
 802ddd8:	e7eb      	b.n	802ddb2 <_ZN14MenuLayer3View21processDownButtonHoldEv+0x2c>
            tempEnumIndex--;
 802ddda:	3b01      	subs	r3, #1
 802dddc:	b2db      	uxtb	r3, r3
 802ddde:	e7f6      	b.n	802ddce <_ZN14MenuLayer3View21processDownButtonHoldEv+0x48>

0802dde0 <_ZN14MenuLayer3View11setupScreenEv>:
{
 802dde0:	b510      	push	{r4, lr}
 802dde2:	4604      	mov	r4, r0
    MenuLayer3ViewBase::setupScreen();
 802dde4:	f7fc fad4 	bl	802a390 <_ZN18MenuLayer3ViewBase11setupScreenEv>
 802dde8:	4b06      	ldr	r3, [pc, #24]	@ (802de04 <_ZN14MenuLayer3View11setupScreenEv+0x24>)
 802ddea:	681b      	ldr	r3, [r3, #0]
    if (hal) {
 802ddec:	b113      	cbz	r3, 802ddf4 <_ZN14MenuLayer3View11setupScreenEv+0x14>
        m_buttonController = static_cast<TouchGfxInputController*>(hal->getButtonController());
 802ddee:	695b      	ldr	r3, [r3, #20]
 802ddf0:	f8c4 3710 	str.w	r3, [r4, #1808]	@ 0x710
    initializeCurrentItem();
 802ddf4:	4620      	mov	r0, r4
 802ddf6:	f7ff fe01 	bl	802d9fc <_ZN14MenuLayer3View21initializeCurrentItemEv>
    updateDisplay();
 802ddfa:	4620      	mov	r0, r4
}
 802ddfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateDisplay();
 802de00:	f7ff bf0d 	b.w	802dc1e <_ZN14MenuLayer3View13updateDisplayEv>
 802de04:	2000b8e0 	.word	0x2000b8e0

0802de08 <_ZN14MenuLayer3View15handleTickEventEv>:
{
 802de08:	b570      	push	{r4, r5, r6, lr}
 802de0a:	4604      	mov	r4, r0
    uint32_t currentTime = HAL_GetTick();
 802de0c:	f7ea fc8e 	bl	801872c <HAL_GetTick>
    if (currentTime - lastTickTime < MIN_TICK_INTERVAL) {
 802de10:	f8d4 3728 	ldr.w	r3, [r4, #1832]	@ 0x728
 802de14:	1ac3      	subs	r3, r0, r3
 802de16:	2b09      	cmp	r3, #9
    uint32_t currentTime = HAL_GetTick();
 802de18:	4605      	mov	r5, r0
    if (currentTime - lastTickTime < MIN_TICK_INTERVAL) {
 802de1a:	d91b      	bls.n	802de54 <_ZN14MenuLayer3View15handleTickEventEv+0x4c>
    tickCount++;
 802de1c:	f8d4 372c 	ldr.w	r3, [r4, #1836]	@ 0x72c
    if (tickCount > 1000000) tickCount = 0; // Prevent overflow
 802de20:	4a29      	ldr	r2, [pc, #164]	@ (802dec8 <_ZN14MenuLayer3View15handleTickEventEv+0xc0>)
    lastTickTime = currentTime;
 802de22:	f8c4 0728 	str.w	r0, [r4, #1832]	@ 0x728
    tickCount++;
 802de26:	3301      	adds	r3, #1
    if (tickCount > 1000000) tickCount = 0; // Prevent overflow
 802de28:	4293      	cmp	r3, r2
 802de2a:	bf88      	it	hi
 802de2c:	2300      	movhi	r3, #0
 802de2e:	f8c4 372c 	str.w	r3, [r4, #1836]	@ 0x72c
    if (!currentItem || processingTick) return;
 802de32:	f8d4 3704 	ldr.w	r3, [r4, #1796]	@ 0x704
 802de36:	b16b      	cbz	r3, 802de54 <_ZN14MenuLayer3View15handleTickEventEv+0x4c>
 802de38:	f894 3724 	ldrb.w	r3, [r4, #1828]	@ 0x724
 802de3c:	b953      	cbnz	r3, 802de54 <_ZN14MenuLayer3View15handleTickEventEv+0x4c>
    if (currentTime - lastButtonChangeTime < DEBOUNCE_TIME) {
 802de3e:	f8d4 3720 	ldr.w	r3, [r4, #1824]	@ 0x720
 802de42:	1ac3      	subs	r3, r0, r3
    processingTick = true;
 802de44:	2101      	movs	r1, #1
    if (currentTime - lastButtonChangeTime < DEBOUNCE_TIME) {
 802de46:	2b31      	cmp	r3, #49	@ 0x31
    processingTick = true;
 802de48:	f884 1724 	strb.w	r1, [r4, #1828]	@ 0x724
    if (currentTime - lastButtonChangeTime < DEBOUNCE_TIME) {
 802de4c:	d803      	bhi.n	802de56 <_ZN14MenuLayer3View15handleTickEventEv+0x4e>
        processingTick = false;
 802de4e:	2300      	movs	r3, #0
 802de50:	f884 3724 	strb.w	r3, [r4, #1828]	@ 0x724
}
 802de54:	bd70      	pop	{r4, r5, r6, pc}
    if (m_buttonController) {
 802de56:	f8d4 0710 	ldr.w	r0, [r4, #1808]	@ 0x710
 802de5a:	b1a8      	cbz	r0, 802de88 <_ZN14MenuLayer3View15handleTickEventEv+0x80>
            upHeld = m_buttonController->isButtonHeld(1);
 802de5c:	f7e8 febb 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
            downHeld = m_buttonController->isButtonHeld(2);
 802de60:	2102      	movs	r1, #2
            upHeld = m_buttonController->isButtonHeld(1);
 802de62:	4606      	mov	r6, r0
            downHeld = m_buttonController->isButtonHeld(2);
 802de64:	f8d4 0710 	ldr.w	r0, [r4, #1808]	@ 0x710
 802de68:	f7e8 feb5 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
            if (upHeld && !downHeld) {
 802de6c:	b1ee      	cbz	r6, 802deaa <_ZN14MenuLayer3View15handleTickEventEv+0xa2>
 802de6e:	bb30      	cbnz	r0, 802debe <_ZN14MenuLayer3View15handleTickEventEv+0xb6>
                if (currentTime - lastHoldTime >= HOLD_REPEAT_TIME) {
 802de70:	f8d4 3714 	ldr.w	r3, [r4, #1812]	@ 0x714
 802de74:	1aeb      	subs	r3, r5, r3
 802de76:	2b63      	cmp	r3, #99	@ 0x63
 802de78:	d906      	bls.n	802de88 <_ZN14MenuLayer3View15handleTickEventEv+0x80>
                    processUpButtonHold();
 802de7a:	4620      	mov	r0, r4
 802de7c:	f7ff ff56 	bl	802dd2c <_ZN14MenuLayer3View19processUpButtonHoldEv>
                    lastHoldTime = currentTime;
 802de80:	f8c4 5714 	str.w	r5, [r4, #1812]	@ 0x714
                    lastButtonChangeTime = currentTime;
 802de84:	f8c4 5720 	str.w	r5, [r4, #1824]	@ 0x720
    if (needsRedraw && (currentTime - lastInvalidateTime >= MIN_INVALIDATE_INTERVAL)) {
 802de88:	f894 371c 	ldrb.w	r3, [r4, #1820]	@ 0x71c
 802de8c:	2b00      	cmp	r3, #0
 802de8e:	d0de      	beq.n	802de4e <_ZN14MenuLayer3View15handleTickEventEv+0x46>
 802de90:	4e0e      	ldr	r6, [pc, #56]	@ (802decc <_ZN14MenuLayer3View15handleTickEventEv+0xc4>)
 802de92:	6833      	ldr	r3, [r6, #0]
 802de94:	1aeb      	subs	r3, r5, r3
 802de96:	2b31      	cmp	r3, #49	@ 0x31
 802de98:	d9d9      	bls.n	802de4e <_ZN14MenuLayer3View15handleTickEventEv+0x46>
 802de9a:	1d20      	adds	r0, r4, #4
 802de9c:	f007 fff6 	bl	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
        needsRedraw = false;
 802dea0:	2300      	movs	r3, #0
 802dea2:	f884 371c 	strb.w	r3, [r4, #1820]	@ 0x71c
        lastInvalidateTime = currentTime;
 802dea6:	6035      	str	r5, [r6, #0]
 802dea8:	e7d1      	b.n	802de4e <_ZN14MenuLayer3View15handleTickEventEv+0x46>
            else if (downHeld && !upHeld) {
 802deaa:	b140      	cbz	r0, 802debe <_ZN14MenuLayer3View15handleTickEventEv+0xb6>
                if (currentTime - lastHoldTime >= HOLD_REPEAT_TIME) {
 802deac:	f8d4 3714 	ldr.w	r3, [r4, #1812]	@ 0x714
 802deb0:	1aeb      	subs	r3, r5, r3
 802deb2:	2b63      	cmp	r3, #99	@ 0x63
 802deb4:	d9e8      	bls.n	802de88 <_ZN14MenuLayer3View15handleTickEventEv+0x80>
                    processDownButtonHold();
 802deb6:	4620      	mov	r0, r4
 802deb8:	f7ff ff65 	bl	802dd86 <_ZN14MenuLayer3View21processDownButtonHoldEv>
 802debc:	e7e0      	b.n	802de80 <_ZN14MenuLayer3View15handleTickEventEv+0x78>
                lastHoldTime = 0;
 802debe:	2300      	movs	r3, #0
 802dec0:	f8c4 3714 	str.w	r3, [r4, #1812]	@ 0x714
 802dec4:	e7e0      	b.n	802de88 <_ZN14MenuLayer3View15handleTickEventEv+0x80>
 802dec6:	bf00      	nop
 802dec8:	000f4240 	.word	0x000f4240
 802decc:	20009e88 	.word	0x20009e88

0802ded0 <_ZN5Model18initializeMenuDataEv>:
    initializeMenuData();
    initializeSystemState();
}

void Model::initializeMenuData()
{
 802ded0:	b530      	push	{r4, r5, lr}
    menuCategories[0] = {"Display Settings", SystemSubItems, 2};
 802ded2:	4c0e      	ldr	r4, [pc, #56]	@ (802df0c <_ZN5Model18initializeMenuDataEv+0x3c>)
{
 802ded4:	4603      	mov	r3, r0
    menuCategories[0] = {"Display Settings", SystemSubItems, 2};
 802ded6:	1d05      	adds	r5, r0, #4
 802ded8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802dedc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    menuCategories[1] = {"Sensor Calibration", SensorSubItems, 4};
 802dee0:	f104 020c 	add.w	r2, r4, #12
 802dee4:	ca07      	ldmia	r2, {r0, r1, r2}
 802dee6:	f103 0510 	add.w	r5, r3, #16
 802deea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    menuCategories[2] = {"Warnings and Alarms", PressureSubItems, 7};  // UPDATED: Changed from 9 to 7 items
 802deee:	f104 0218 	add.w	r2, r4, #24
 802def2:	ca07      	ldmia	r2, {r0, r1, r2}
 802def4:	f103 051c 	add.w	r5, r3, #28
    menuCategories[3] = {"Timers", TimerSubItems, 2};
 802def8:	3424      	adds	r4, #36	@ 0x24
    menuCategories[2] = {"Warnings and Alarms", PressureSubItems, 7};  // UPDATED: Changed from 9 to 7 items
 802defa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    menuCategories[3] = {"Timers", TimerSubItems, 2};
 802defe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802df02:	3328      	adds	r3, #40	@ 0x28
 802df04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 802df08:	bd30      	pop	{r4, r5, pc}
 802df0a:	bf00      	nop
 802df0c:	0803f5f0 	.word	0x0803f5f0

0802df10 <_ZN5Model21initializeSystemStateEv>:

void Model::initializeSystemState()
{
    currentTruckState = TRUCK_STATE_UNKNOWN;
 802df10:	2300      	movs	r3, #0
    currentTrailerState = TRAILER_STATE_UNKNOWN;
    currentErrorState = ERROR_NONE;
    flashState = false;
    lastFlashTime = 0;
    stateChanged = false;
    rollValue = 0;
 802df12:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
    currentTruckState = TRUCK_STATE_UNKNOWN;
 802df16:	f880 3037 	strb.w	r3, [r0, #55]	@ 0x37
    currentErrorState = ERROR_NONE;
 802df1a:	8703      	strh	r3, [r0, #56]	@ 0x38
    flashState = false;
 802df1c:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
    rollValid = false;
    ptoActive = false;
    ptoValid = false;
 802df20:	f8a0 3044 	strh.w	r3, [r0, #68]	@ 0x44
    alarmActive = false;
 802df24:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
    //latchButtonPressed = false;  // ADD THIS
}
 802df28:	4770      	bx	lr

0802df2a <_ZN5ModelC1Ev>:
Model::Model() : modelListener(0), currentLayer1Selection(0), currentLayer2Selection(0), settingsLoaded(false),
 802df2a:	b510      	push	{r4, lr}
 802df2c:	2300      	movs	r3, #0
 802df2e:	4604      	mov	r4, r0
 802df30:	6003      	str	r3, [r0, #0]
 802df32:	8683      	strh	r3, [r0, #52]	@ 0x34
 802df34:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
                 lastButtonPressed(0), buttonFeedbackActive(false), buttonFeedbackTimer(0)
 802df38:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 802df3c:	f880 3048 	strb.w	r3, [r0, #72]	@ 0x48
 802df40:	64c3      	str	r3, [r0, #76]	@ 0x4c
    initializeMenuData();
 802df42:	f7ff ffc5 	bl	802ded0 <_ZN5Model18initializeMenuDataEv>
    initializeSystemState();
 802df46:	4620      	mov	r0, r4
 802df48:	f7ff ffe2 	bl	802df10 <_ZN5Model21initializeSystemStateEv>
}
 802df4c:	bd10      	pop	{r4, pc}

0802df4e <_ZN5Model17getCurrentSubItemEv>:

MenuSubItem* Model::getCurrentSubItem()
{
    if (currentLayer1Selection < CATEGORY_COUNT) {
 802df4e:	f890 2034 	ldrb.w	r2, [r0, #52]	@ 0x34
 802df52:	2a03      	cmp	r2, #3
 802df54:	d80d      	bhi.n	802df72 <_ZN5Model17getCurrentSubItemEv+0x24>
        MenuCategory& category = menuCategories[currentLayer1Selection];
        if (currentLayer2Selection < category.subItemCount) {
 802df56:	210c      	movs	r1, #12
 802df58:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 802df5c:	fb01 0002 	mla	r0, r1, r2, r0
 802df60:	7b02      	ldrb	r2, [r0, #12]
 802df62:	429a      	cmp	r2, r3
 802df64:	d905      	bls.n	802df72 <_ZN5Model17getCurrentSubItemEv+0x24>
            return &category.subItems[currentLayer2Selection];
 802df66:	6880      	ldr	r0, [r0, #8]
 802df68:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 802df6c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802df70:	4770      	bx	lr
        }
    }
    return nullptr;
 802df72:	2000      	movs	r0, #0
}
 802df74:	4770      	bx	lr
	...

0802df78 <_ZN5Model16updateAlarmStateEv>:

// UPDATED: Removed PTO_DISABLED, added OVERPRESSURE alarm
void Model::updateAlarmState()
{
    bool newAlarmState = (currentErrorState == ERROR_ESTOP_ACTIVE ||
                         currentErrorState == ERROR_ANGLE_EXCEEDED ||
 802df78:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
                         currentErrorState == ERROR_OVERPRESSURE);  // UPDATED: Added overpressure

    if (alarmActive != newAlarmState)
 802df7c:	f890 2046 	ldrb.w	r2, [r0, #70]	@ 0x46
    bool newAlarmState = (currentErrorState == ERROR_ESTOP_ACTIVE ||
 802df80:	3b01      	subs	r3, #1
 802df82:	2b02      	cmp	r3, #2
 802df84:	bf8c      	ite	hi
 802df86:	2300      	movhi	r3, #0
 802df88:	2301      	movls	r3, #1
    if (alarmActive != newAlarmState)
 802df8a:	429a      	cmp	r2, r3
 802df8c:	d006      	beq.n	802df9c <_ZN5Model16updateAlarmStateEv+0x24>
    {
        alarmActive = newAlarmState;
        Output1_control = alarmActive;
 802df8e:	4a04      	ldr	r2, [pc, #16]	@ (802dfa0 <_ZN5Model16updateAlarmStateEv+0x28>)
        alarmActive = newAlarmState;
 802df90:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
        Output1_control = alarmActive;
 802df94:	7013      	strb	r3, [r2, #0]
        stateChanged = true;
 802df96:	2301      	movs	r3, #1
 802df98:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
    }
}
 802df9c:	4770      	bx	lr
 802df9e:	bf00      	nop
 802dfa0:	20001eb5 	.word	0x20001eb5

0802dfa4 <_ZNK5Model13isAlarmActiveEv>:

bool Model::isAlarmActive() const
{
    return alarmActive;
}
 802dfa4:	f890 0046 	ldrb.w	r0, [r0, #70]	@ 0x46
 802dfa8:	4770      	bx	lr
	...

0802dfac <_ZNK5Model13getAlarmTitleEv>:

// UPDATED: Larger buffers and new alarm types
const char* Model::getAlarmTitle() const
{
    switch(currentErrorState)
 802dfac:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 802dfb0:	3b01      	subs	r3, #1
 802dfb2:	b2db      	uxtb	r3, r3
 802dfb4:	2b02      	cmp	r3, #2
 802dfb6:	bf9a      	itte	ls
 802dfb8:	4a02      	ldrls	r2, [pc, #8]	@ (802dfc4 <_ZNK5Model13getAlarmTitleEv+0x18>)
 802dfba:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
 802dfbe:	4802      	ldrhi	r0, [pc, #8]	@ (802dfc8 <_ZNK5Model13getAlarmTitleEv+0x1c>)
        case ERROR_OVERPRESSURE:  // NEW
            return "PTO OVERPRESSURE ALARM";
        default:
            return "";
    }
}
 802dfc0:	4770      	bx	lr
 802dfc2:	bf00      	nop
 802dfc4:	08042f9c 	.word	0x08042f9c
 802dfc8:	0803f6b1 	.word	0x0803f6b1

0802dfcc <_ZNK5Model19getAlarmDescriptionEv>:

const char* Model::getAlarmDescription() const
{
	switch(currentErrorState)
 802dfcc:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 802dfd0:	3b01      	subs	r3, #1
 802dfd2:	b2db      	uxtb	r3, r3
 802dfd4:	2b02      	cmp	r3, #2
 802dfd6:	bf9a      	itte	ls
 802dfd8:	4a02      	ldrls	r2, [pc, #8]	@ (802dfe4 <_ZNK5Model19getAlarmDescriptionEv+0x18>)
 802dfda:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
 802dfde:	4802      	ldrhi	r0, [pc, #8]	@ (802dfe8 <_ZNK5Model19getAlarmDescriptionEv+0x1c>)
	case ERROR_OVERPRESSURE: // NEW
		return "PTO hydraulic pressure has exceeded\n the maximum safe operating threshold.\n Raise disabled";
	default:
		return "";
	}
}
 802dfe0:	4770      	bx	lr
 802dfe2:	bf00      	nop
 802dfe4:	08042f90 	.word	0x08042f90
 802dfe8:	0803f6b1 	.word	0x0803f6b1

0802dfec <_ZN5Model18processTruckStatusEv>:

void Model::processTruckStatus()
{
    TruckState newState = TRUCK_STATE_UNKNOWN;

    if(j1939Truck_Latched == 1)
 802dfec:	4b0f      	ldr	r3, [pc, #60]	@ (802e02c <_ZN5Model18processTruckStatusEv+0x40>)
 802dfee:	881b      	ldrh	r3, [r3, #0]
 802dff0:	2b01      	cmp	r3, #1
 802dff2:	d00d      	beq.n	802e010 <_ZN5Model18processTruckStatusEv+0x24>
    {
        newState = TRUCK_STATE_LATCHED;
    }
    else if(j1939Truck_Lowered == 1)
 802dff4:	4b0e      	ldr	r3, [pc, #56]	@ (802e030 <_ZN5Model18processTruckStatusEv+0x44>)
 802dff6:	881b      	ldrh	r3, [r3, #0]
 802dff8:	2b01      	cmp	r3, #1
 802dffa:	d013      	beq.n	802e024 <_ZN5Model18processTruckStatusEv+0x38>
    {
        newState = TRUCK_STATE_LOWERED;
    }
    else if(j1939Truck_Moving == 1)
 802dffc:	4b0d      	ldr	r3, [pc, #52]	@ (802e034 <_ZN5Model18processTruckStatusEv+0x48>)
 802dffe:	881b      	ldrh	r3, [r3, #0]
 802e000:	2b01      	cmp	r3, #1
 802e002:	d011      	beq.n	802e028 <_ZN5Model18processTruckStatusEv+0x3c>
    {
        newState = TRUCK_STATE_MOVING;
    }
    else if(j1939Truck_Raised == 1)
 802e004:	4b0c      	ldr	r3, [pc, #48]	@ (802e038 <_ZN5Model18processTruckStatusEv+0x4c>)
 802e006:	881b      	ldrh	r3, [r3, #0]
 802e008:	1e5a      	subs	r2, r3, #1
 802e00a:	4253      	negs	r3, r2
 802e00c:	4153      	adcs	r3, r2
 802e00e:	009b      	lsls	r3, r3, #2
    else
    {
        newState = TRUCK_STATE_UNKNOWN;
    }

    if (currentTruckState != newState)
 802e010:	f890 2037 	ldrb.w	r2, [r0, #55]	@ 0x37
 802e014:	429a      	cmp	r2, r3
    {
        currentTruckState = newState;
 802e016:	bf1e      	ittt	ne
 802e018:	f880 3037 	strbne.w	r3, [r0, #55]	@ 0x37
        stateChanged = true;
 802e01c:	2301      	movne	r3, #1
 802e01e:	f880 3045 	strbne.w	r3, [r0, #69]	@ 0x45
    }
}
 802e022:	4770      	bx	lr
        newState = TRUCK_STATE_LOWERED;
 802e024:	2302      	movs	r3, #2
 802e026:	e7f3      	b.n	802e010 <_ZN5Model18processTruckStatusEv+0x24>
        newState = TRUCK_STATE_MOVING;
 802e028:	2303      	movs	r3, #3
 802e02a:	e7f1      	b.n	802e010 <_ZN5Model18processTruckStatusEv+0x24>
 802e02c:	20001dc0 	.word	0x20001dc0
 802e030:	20001dbe 	.word	0x20001dbe
 802e034:	20001dbc 	.word	0x20001dbc
 802e038:	20001dba 	.word	0x20001dba

0802e03c <_ZN5Model20processTrailerStatusEv>:

void Model::processTrailerStatus()
{
    TrailerState newState = TRAILER_STATE_UNKNOWN;

    if(j1939Trailer_Latched == 1)
 802e03c:	4b0f      	ldr	r3, [pc, #60]	@ (802e07c <_ZN5Model20processTrailerStatusEv+0x40>)
 802e03e:	881b      	ldrh	r3, [r3, #0]
 802e040:	2b01      	cmp	r3, #1
 802e042:	d017      	beq.n	802e074 <_ZN5Model20processTrailerStatusEv+0x38>
    {
        newState = TRAILER_STATE_LATCHED;
    }
    else if(j1939Trailer_Lowered == 1)
 802e044:	4b0e      	ldr	r3, [pc, #56]	@ (802e080 <_ZN5Model20processTrailerStatusEv+0x44>)
 802e046:	881b      	ldrh	r3, [r3, #0]
 802e048:	2b01      	cmp	r3, #1
 802e04a:	d009      	beq.n	802e060 <_ZN5Model20processTrailerStatusEv+0x24>
    {
        newState = TRAILER_STATE_LOWERED;
    }
    else if(j1939Trailer_Moving == 1)
 802e04c:	4b0d      	ldr	r3, [pc, #52]	@ (802e084 <_ZN5Model20processTrailerStatusEv+0x48>)
 802e04e:	881b      	ldrh	r3, [r3, #0]
 802e050:	2b01      	cmp	r3, #1
 802e052:	d011      	beq.n	802e078 <_ZN5Model20processTrailerStatusEv+0x3c>
    {
        newState = TRAILER_STATE_MOVING;
    }
    else if(j1939Trailer_Raised == 1)
 802e054:	4b0c      	ldr	r3, [pc, #48]	@ (802e088 <_ZN5Model20processTrailerStatusEv+0x4c>)
 802e056:	881b      	ldrh	r3, [r3, #0]
    {
        newState = TRAILER_STATE_RAISED;
 802e058:	2b01      	cmp	r3, #1
 802e05a:	bf14      	ite	ne
 802e05c:	2300      	movne	r3, #0
 802e05e:	2303      	moveq	r3, #3
    else
    {
        newState = TRAILER_STATE_UNKNOWN;
    }

    if (currentTrailerState != newState)
 802e060:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 802e064:	429a      	cmp	r2, r3
    {
        currentTrailerState = newState;
 802e066:	bf1e      	ittt	ne
 802e068:	f880 3039 	strbne.w	r3, [r0, #57]	@ 0x39
        stateChanged = true;
 802e06c:	2301      	movne	r3, #1
 802e06e:	f880 3045 	strbne.w	r3, [r0, #69]	@ 0x45
    }
}
 802e072:	4770      	bx	lr
        newState = TRAILER_STATE_LATCHED;
 802e074:	2304      	movs	r3, #4
 802e076:	e7f3      	b.n	802e060 <_ZN5Model20processTrailerStatusEv+0x24>
        newState = TRAILER_STATE_MOVING;
 802e078:	2302      	movs	r3, #2
 802e07a:	e7f1      	b.n	802e060 <_ZN5Model20processTrailerStatusEv+0x24>
 802e07c:	20001dae 	.word	0x20001dae
 802e080:	20001dac 	.word	0x20001dac
 802e084:	20001daa 	.word	0x20001daa
 802e088:	20001da8 	.word	0x20001da8

0802e08c <_ZN5Model22processErrorConditionsEv>:
void Model::processErrorConditions()
{
    ErrorState newErrorState = ERROR_NONE;

    // Check for error conditions (priority order)
    if(j1939EStop_Active == 1)
 802e08c:	4b0c      	ldr	r3, [pc, #48]	@ (802e0c0 <_ZN5Model22processErrorConditionsEv+0x34>)
 802e08e:	881b      	ldrh	r3, [r3, #0]
 802e090:	2b01      	cmp	r3, #1
 802e092:	d009      	beq.n	802e0a8 <_ZN5Model22processErrorConditionsEv+0x1c>
    {
        newErrorState = ERROR_ESTOP_ACTIVE;
    }
    else if(j1939Angle_Exceeded == 1)
 802e094:	4b0b      	ldr	r3, [pc, #44]	@ (802e0c4 <_ZN5Model22processErrorConditionsEv+0x38>)
 802e096:	881b      	ldrh	r3, [r3, #0]
 802e098:	2b01      	cmp	r3, #1
 802e09a:	d00f      	beq.n	802e0bc <_ZN5Model22processErrorConditionsEv+0x30>
    {
        newErrorState = ERROR_ANGLE_EXCEEDED;
    }
    else if(j1939Overpressure == 1)  // NEW: Added overpressure check
 802e09c:	4b0a      	ldr	r3, [pc, #40]	@ (802e0c8 <_ZN5Model22processErrorConditionsEv+0x3c>)
 802e09e:	881b      	ldrh	r3, [r3, #0]
    ErrorState newErrorState = ERROR_NONE;
 802e0a0:	2b01      	cmp	r3, #1
 802e0a2:	bf0c      	ite	eq
 802e0a4:	2303      	moveq	r3, #3
 802e0a6:	2300      	movne	r3, #0
    {
        newErrorState = ERROR_OVERPRESSURE;
    }

    if (currentErrorState != newErrorState)
 802e0a8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 802e0ac:	429a      	cmp	r2, r3
    {
        currentErrorState = newErrorState;
 802e0ae:	bf1e      	ittt	ne
 802e0b0:	f880 3038 	strbne.w	r3, [r0, #56]	@ 0x38
        stateChanged = true;
 802e0b4:	2301      	movne	r3, #1
 802e0b6:	f880 3045 	strbne.w	r3, [r0, #69]	@ 0x45
    }
}
 802e0ba:	4770      	bx	lr
        newErrorState = ERROR_ANGLE_EXCEEDED;
 802e0bc:	2302      	movs	r3, #2
 802e0be:	e7f3      	b.n	802e0a8 <_ZN5Model22processErrorConditionsEv+0x1c>
 802e0c0:	20001db6 	.word	0x20001db6
 802e0c4:	20001db4 	.word	0x20001db4
 802e0c8:	20001da2 	.word	0x20001da2

0802e0cc <_ZN5Model20updateFlashingStatesEv>:

void Model::updateFlashingStates()
{
 802e0cc:	b510      	push	{r4, lr}
 802e0ce:	4604      	mov	r4, r0
    uint32_t currentTime = HAL_GetTick();
 802e0d0:	f7ea fb2c 	bl	801872c <HAL_GetTick>

    if(currentTime - lastFlashTime >= 1000)
 802e0d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802e0d6:	1ac3      	subs	r3, r0, r3
 802e0d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 802e0dc:	d30d      	bcc.n	802e0fa <_ZN5Model20updateFlashingStatesEv+0x2e>
    {
        flashState = !flashState;
 802e0de:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
        lastFlashTime = currentTime;
 802e0e2:	63e0      	str	r0, [r4, #60]	@ 0x3c
        flashState = !flashState;
 802e0e4:	f083 0301 	eor.w	r3, r3, #1
 802e0e8:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a

        if (currentTruckState == TRUCK_STATE_MOVING)
 802e0ec:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 802e0f0:	2b03      	cmp	r3, #3
        {
            stateChanged = true;
 802e0f2:	bf04      	itt	eq
 802e0f4:	2301      	moveq	r3, #1
 802e0f6:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
        }
    }
}
 802e0fa:	bd10      	pop	{r4, pc}

0802e0fc <_ZN5Model15processRollDataEv>:

void Model::processRollData()
{
    if(j1939Roll != 0xFFFF)
 802e0fc:	4b12      	ldr	r3, [pc, #72]	@ (802e148 <_ZN5Model15processRollDataEv+0x4c>)
 802e0fe:	881b      	ldrh	r3, [r3, #0]
 802e100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802e104:	4293      	cmp	r3, r2
 802e106:	d014      	beq.n	802e132 <_ZN5Model15processRollDataEv+0x36>
    {
        int16_t newRollValue = j1939Roll - 64;

        if (abs(newRollValue - rollValue) > 1 || !rollValid)
 802e108:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	@ 0x40
        int16_t newRollValue = j1939Roll - 64;
 802e10c:	3b40      	subs	r3, #64	@ 0x40
 802e10e:	b21b      	sxth	r3, r3
        if (abs(newRollValue - rollValue) > 1 || !rollValid)
 802e110:	1a9a      	subs	r2, r3, r2
 802e112:	2a00      	cmp	r2, #0
 802e114:	bfb8      	it	lt
 802e116:	4252      	neglt	r2, r2
 802e118:	2a01      	cmp	r2, #1
 802e11a:	dc02      	bgt.n	802e122 <_ZN5Model15processRollDataEv+0x26>
 802e11c:	f890 2042 	ldrb.w	r2, [r0, #66]	@ 0x42
 802e120:	b932      	cbnz	r2, 802e130 <_ZN5Model15processRollDataEv+0x34>
        {
            rollValue = newRollValue;
 802e122:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
            rollValid = true;
 802e126:	2301      	movs	r3, #1
 802e128:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    {
        if (rollValid)
        {
            rollValue = 0;
            rollValid = false;
            stateChanged = true;
 802e12c:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
        }
    }
}
 802e130:	4770      	bx	lr
        if (rollValid)
 802e132:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 802e136:	2b00      	cmp	r3, #0
 802e138:	d0fa      	beq.n	802e130 <_ZN5Model15processRollDataEv+0x34>
            rollValue = 0;
 802e13a:	2300      	movs	r3, #0
 802e13c:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
            rollValid = false;
 802e140:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
            stateChanged = true;
 802e144:	2301      	movs	r3, #1
 802e146:	e7f1      	b.n	802e12c <_ZN5Model15processRollDataEv+0x30>
 802e148:	20001dc6 	.word	0x20001dc6

0802e14c <_ZN5Model16processPTOStatusEv>:

void Model::processPTOStatus()
{
    if(j1939PTOStatus != 0xFFFF)
 802e14c:	4b08      	ldr	r3, [pc, #32]	@ (802e170 <_ZN5Model16processPTOStatusEv+0x24>)
 802e14e:	881b      	ldrh	r3, [r3, #0]
 802e150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802e154:	4293      	cmp	r3, r2
 802e156:	d008      	beq.n	802e16a <_ZN5Model16processPTOStatusEv+0x1e>
    {
        ptoActive = (j1939PTOStatus > 0);
 802e158:	3b00      	subs	r3, #0
 802e15a:	bf18      	it	ne
 802e15c:	2301      	movne	r3, #1
        ptoValid = true;
 802e15e:	2201      	movs	r2, #1
        ptoActive = (j1939PTOStatus > 0);
 802e160:	f880 3043 	strb.w	r3, [r0, #67]	@ 0x43
        ptoValid = true;
 802e164:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
    else
    {
        ptoActive = false;
        ptoValid = false;
    }
}
 802e168:	4770      	bx	lr
 802e16a:	2300      	movs	r3, #0
 802e16c:	461a      	mov	r2, r3
 802e16e:	e7f7      	b.n	802e160 <_ZN5Model16processPTOStatusEv+0x14>
 802e170:	20001dc4 	.word	0x20001dc4

0802e174 <_ZN5Model18notifyStateChangedEv>:

void Model::notifyStateChanged()
{
    if (stateChanged && modelListener)
 802e174:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
{
 802e178:	b510      	push	{r4, lr}
 802e17a:	4604      	mov	r4, r0
    if (stateChanged && modelListener)
 802e17c:	b13b      	cbz	r3, 802e18e <_ZN5Model18notifyStateChangedEv+0x1a>
 802e17e:	6800      	ldr	r0, [r0, #0]
 802e180:	b128      	cbz	r0, 802e18e <_ZN5Model18notifyStateChangedEv+0x1a>
    {
        modelListener->systemStateChanged();
 802e182:	6803      	ldr	r3, [r0, #0]
 802e184:	689b      	ldr	r3, [r3, #8]
 802e186:	4798      	blx	r3
        stateChanged = false;
 802e188:	2300      	movs	r3, #0
 802e18a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
    }
}
 802e18e:	bd10      	pop	{r4, pc}

0802e190 <_ZNK5Model13getTruckStateEv>:

// Getters for UI
Model::TruckState Model::getTruckState() const
{
    return currentTruckState;
}
 802e190:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 802e194:	4770      	bx	lr

0802e196 <_ZNK5Model13getErrorStateEv>:

Model::ErrorState Model::getErrorState() const
{
    return currentErrorState;
}
 802e196:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 802e19a:	4770      	bx	lr

0802e19c <_ZNK5Model15getTrailerStateEv>:

Model::TrailerState Model::getTrailerState() const
{
    return currentTrailerState;
}
 802e19c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 802e1a0:	4770      	bx	lr

0802e1a2 <_ZNK5Model13getFlashStateEv>:

bool Model::getFlashState() const
{
    return flashState;
}
 802e1a2:	f890 003a 	ldrb.w	r0, [r0, #58]	@ 0x3a
 802e1a6:	4770      	bx	lr

0802e1a8 <_ZNK5Model12getRollValueEv>:

int16_t Model::getRollValue() const
{
    return rollValue;
}
 802e1a8:	f9b0 0040 	ldrsh.w	r0, [r0, #64]	@ 0x40
 802e1ac:	4770      	bx	lr

0802e1ae <_ZNK5Model11isRollValidEv>:

bool Model::isRollValid() const
{
    return rollValid;
}
 802e1ae:	f890 0042 	ldrb.w	r0, [r0, #66]	@ 0x42
 802e1b2:	4770      	bx	lr

0802e1b4 <_ZNK5Model11isPTOActiveEv>:

bool Model::isPTOActive() const
{
    return ptoActive;
}
 802e1b4:	f890 0043 	ldrb.w	r0, [r0, #67]	@ 0x43
 802e1b8:	4770      	bx	lr

0802e1ba <_ZNK5Model10isPTOValidEv>:

bool Model::isPTOValid() const
{
    return ptoValid;
}
 802e1ba:	f890 0044 	ldrb.w	r0, [r0, #68]	@ 0x44
 802e1be:	4770      	bx	lr

0802e1c0 <_ZNK5Model21getTruckStateBitmapIdEv>:
    }
}

uint16_t Model::getTruckStateBitmapId() const
{
    switch(currentTruckState)
 802e1c0:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 802e1c4:	2b01      	cmp	r3, #1
 802e1c6:	d005      	beq.n	802e1d4 <_ZNK5Model21getTruckStateBitmapIdEv+0x14>
 802e1c8:	3b03      	subs	r3, #3
    {
        case TRUCK_STATE_LATCHED: return BITMAP_TRUCKLATCHED_ID;
        case TRUCK_STATE_LOWERED: return BITMAP_TRUCKUNLATCHED_ID;
        case TRUCK_STATE_MOVING: return BITMAP_TRUCKRAISED_ID;
 802e1ca:	2b01      	cmp	r3, #1
 802e1cc:	bf8c      	ite	hi
 802e1ce:	2017      	movhi	r0, #23
 802e1d0:	2016      	movls	r0, #22
 802e1d2:	4770      	bx	lr
        case TRUCK_STATE_LATCHED: return BITMAP_TRUCKLATCHED_ID;
 802e1d4:	2015      	movs	r0, #21
        case TRUCK_STATE_RAISED: return BITMAP_TRUCKRAISED_ID;
        case TRUCK_STATE_UNKNOWN: return BITMAP_TRUCKUNLATCHED_ID;
        default: return BITMAP_TRUCKUNLATCHED_ID;
    }
}
 802e1d6:	4770      	bx	lr

0802e1d8 <_ZNK5Model23getTrailerStateBitmapIdEv>:

uint16_t Model::getTrailerStateBitmapId() const
{
    switch(currentTrailerState)
 802e1d8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 802e1dc:	2b03      	cmp	r3, #3
 802e1de:	d804      	bhi.n	802e1ea <_ZNK5Model23getTrailerStateBitmapIdEv+0x12>
    {
        case TRAILER_STATE_LATCHED: return BITMAP_TRAILERLATCHED_ID;
        case TRAILER_STATE_LOWERED: return BITMAP_TRAILERUNLATCHED_ID;
        case TRAILER_STATE_MOVING: return BITMAP_TRAILERRAISED_ID;
 802e1e0:	2b02      	cmp	r3, #2
 802e1e2:	bf34      	ite	cc
 802e1e4:	2014      	movcc	r0, #20
 802e1e6:	2013      	movcs	r0, #19
 802e1e8:	4770      	bx	lr
        case TRAILER_STATE_LATCHED: return BITMAP_TRAILERLATCHED_ID;
 802e1ea:	2b04      	cmp	r3, #4
 802e1ec:	bf14      	ite	ne
 802e1ee:	2014      	movne	r0, #20
 802e1f0:	2012      	moveq	r0, #18
        case TRAILER_STATE_RAISED: return BITMAP_TRAILERRAISED_ID;
        case TRAILER_STATE_UNKNOWN: return BITMAP_TRAILERUNLATCHED_ID;
        default: return BITMAP_TRAILERUNLATCHED_ID;
    }
}
 802e1f2:	4770      	bx	lr

0802e1f4 <_ZN5Model21syncMenuItemsToConfigEv>:

// UPDATED: Removed emergency setpoint mappings
void Model::syncMenuItemsToConfig()
{
    // System settings
    S35_config[TOUCHGFX_VEHICLETYPE] = SystemSubItems[0].currentEnumIndex;
 802e1f4:	4a2a      	ldr	r2, [pc, #168]	@ (802e2a0 <_ZN5Model21syncMenuItemsToConfigEv+0xac>)
 802e1f6:	4b2b      	ldr	r3, [pc, #172]	@ (802e2a4 <_ZN5Model21syncMenuItemsToConfigEv+0xb0>)
 802e1f8:	8811      	ldrh	r1, [r2, #0]
 802e1fa:	4a2b      	ldr	r2, [pc, #172]	@ (802e2a8 <_ZN5Model21syncMenuItemsToConfigEv+0xb4>)
 802e1fc:	7e50      	ldrb	r0, [r2, #25]
 802e1fe:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_BRIGHTNESS] = SystemSubItems[1].currentValue;
 802e202:	492a      	ldr	r1, [pc, #168]	@ (802e2ac <_ZN5Model21syncMenuItemsToConfigEv+0xb8>)
 802e204:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 802e206:	8809      	ldrh	r1, [r1, #0]
 802e208:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    LCD_brightness = SystemSubItems[1].currentValue;
 802e20c:	4928      	ldr	r1, [pc, #160]	@ (802e2b0 <_ZN5Model21syncMenuItemsToConfigEv+0xbc>)
 802e20e:	700a      	strb	r2, [r1, #0]

    // Sensor settings
    S35_config[TOUCHGFX_TRUCKMAX] = SensorSubItems[0].currentValue;
 802e210:	4a28      	ldr	r2, [pc, #160]	@ (802e2b4 <_ZN5Model21syncMenuItemsToConfigEv+0xc0>)
 802e212:	8811      	ldrh	r1, [r2, #0]
 802e214:	4a28      	ldr	r2, [pc, #160]	@ (802e2b8 <_ZN5Model21syncMenuItemsToConfigEv+0xc4>)
 802e216:	6890      	ldr	r0, [r2, #8]
 802e218:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRUCKMIN] = SensorSubItems[1].currentValue;
 802e21c:	4927      	ldr	r1, [pc, #156]	@ (802e2bc <_ZN5Model21syncMenuItemsToConfigEv+0xc8>)
 802e21e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 802e220:	8809      	ldrh	r1, [r1, #0]
 802e222:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRAILERMAX] = SensorSubItems[2].currentValue;
 802e226:	4926      	ldr	r1, [pc, #152]	@ (802e2c0 <_ZN5Model21syncMenuItemsToConfigEv+0xcc>)
 802e228:	6d10      	ldr	r0, [r2, #80]	@ 0x50
 802e22a:	8809      	ldrh	r1, [r1, #0]
    S35_config[TOUCHGFX_TRAILERMIN] = SensorSubItems[3].currentValue;
 802e22c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
    S35_config[TOUCHGFX_TRAILERMAX] = SensorSubItems[2].currentValue;
 802e22e:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRAILERMIN] = SensorSubItems[3].currentValue;
 802e232:	4924      	ldr	r1, [pc, #144]	@ (802e2c4 <_ZN5Model21syncMenuItemsToConfigEv+0xd0>)
 802e234:	8809      	ldrh	r1, [r1, #0]
 802e236:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

    // Pressure settings (UPDATED: Removed emergency setpoints)
    S35_config[TOUCHGFX_ANGLE] = PressureSubItems[0].currentValue;
 802e23a:	4a23      	ldr	r2, [pc, #140]	@ (802e2c8 <_ZN5Model21syncMenuItemsToConfigEv+0xd4>)
 802e23c:	8811      	ldrh	r1, [r2, #0]
 802e23e:	4a23      	ldr	r2, [pc, #140]	@ (802e2cc <_ZN5Model21syncMenuItemsToConfigEv+0xd8>)
 802e240:	6890      	ldr	r0, [r2, #8]
 802e242:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRUCK_LOWERED] = PressureSubItems[1].currentValue;
 802e246:	4922      	ldr	r1, [pc, #136]	@ (802e2d0 <_ZN5Model21syncMenuItemsToConfigEv+0xdc>)
 802e248:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 802e24a:	8809      	ldrh	r1, [r1, #0]
 802e24c:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRUCK_RAISED] = PressureSubItems[2].currentValue;
 802e250:	4920      	ldr	r1, [pc, #128]	@ (802e2d4 <_ZN5Model21syncMenuItemsToConfigEv+0xe0>)
 802e252:	6d10      	ldr	r0, [r2, #80]	@ 0x50
 802e254:	8809      	ldrh	r1, [r1, #0]
 802e256:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRUCK_OVERLOAD] = PressureSubItems[3].currentValue;
 802e25a:	491f      	ldr	r1, [pc, #124]	@ (802e2d8 <_ZN5Model21syncMenuItemsToConfigEv+0xe4>)
 802e25c:	6f50      	ldr	r0, [r2, #116]	@ 0x74
 802e25e:	8809      	ldrh	r1, [r1, #0]
 802e260:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    // REMOVED: S35_config[TOUCHGFX_TRUCK_EMERGENCY] = PressureSubItems[4].currentValue;
    S35_config[TOUCHGFX_TRAILER_LOWERED] = PressureSubItems[4].currentValue;  // Index adjusted
 802e264:	491d      	ldr	r1, [pc, #116]	@ (802e2dc <_ZN5Model21syncMenuItemsToConfigEv+0xe8>)
 802e266:	8809      	ldrh	r1, [r1, #0]
 802e268:	f8d2 0098 	ldr.w	r0, [r2, #152]	@ 0x98
 802e26c:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRAILER_RAISED] = PressureSubItems[5].currentValue;   // Index adjusted
 802e270:	491b      	ldr	r1, [pc, #108]	@ (802e2e0 <_ZN5Model21syncMenuItemsToConfigEv+0xec>)
 802e272:	f8d2 00bc 	ldr.w	r0, [r2, #188]	@ 0xbc
 802e276:	8809      	ldrh	r1, [r1, #0]
    S35_config[TOUCHGFX_TRAILER_OVERLOAD] = PressureSubItems[6].currentValue; // Index adjusted
 802e278:	f8d2 20e0 	ldr.w	r2, [r2, #224]	@ 0xe0
    S35_config[TOUCHGFX_TRAILER_RAISED] = PressureSubItems[5].currentValue;   // Index adjusted
 802e27c:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_TRAILER_OVERLOAD] = PressureSubItems[6].currentValue; // Index adjusted
 802e280:	4918      	ldr	r1, [pc, #96]	@ (802e2e4 <_ZN5Model21syncMenuItemsToConfigEv+0xf0>)
 802e282:	8809      	ldrh	r1, [r1, #0]
 802e284:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    // REMOVED: S35_config[TOUCHGFX_TRAILER_EMERGENCY] = PressureSubItems[8].currentValue;

    // Timer settings
    S35_config[TOUCHGFX_INCLO_BUBBLE] = TimerSubItems[0].currentValue;
 802e288:	4a17      	ldr	r2, [pc, #92]	@ (802e2e8 <_ZN5Model21syncMenuItemsToConfigEv+0xf4>)
 802e28a:	8811      	ldrh	r1, [r2, #0]
 802e28c:	4a17      	ldr	r2, [pc, #92]	@ (802e2ec <_ZN5Model21syncMenuItemsToConfigEv+0xf8>)
 802e28e:	6890      	ldr	r0, [r2, #8]
 802e290:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
    S35_config[TOUCHGFX_PRESSURE_BUBBLE] = TimerSubItems[1].currentValue;
 802e294:	4916      	ldr	r1, [pc, #88]	@ (802e2f0 <_ZN5Model21syncMenuItemsToConfigEv+0xfc>)
 802e296:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 802e298:	8809      	ldrh	r1, [r1, #0]
 802e29a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 802e29e:	4770      	bx	lr
 802e2a0:	08041e68 	.word	0x08041e68
 802e2a4:	20001e72 	.word	0x20001e72
 802e2a8:	200006d8 	.word	0x200006d8
 802e2ac:	08041e66 	.word	0x08041e66
 802e2b0:	20000430 	.word	0x20000430
 802e2b4:	08041e64 	.word	0x08041e64
 802e2b8:	20000648 	.word	0x20000648
 802e2bc:	08041e62 	.word	0x08041e62
 802e2c0:	08041e60 	.word	0x08041e60
 802e2c4:	08041e5e 	.word	0x08041e5e
 802e2c8:	08041e4c 	.word	0x08041e4c
 802e2cc:	2000054c 	.word	0x2000054c
 802e2d0:	08041e5c 	.word	0x08041e5c
 802e2d4:	08041e5a 	.word	0x08041e5a
 802e2d8:	08041e58 	.word	0x08041e58
 802e2dc:	08041e54 	.word	0x08041e54
 802e2e0:	08041e52 	.word	0x08041e52
 802e2e4:	08041e50 	.word	0x08041e50
 802e2e8:	08041e4a 	.word	0x08041e4a
 802e2ec:	20000504 	.word	0x20000504
 802e2f0:	08041e48 	.word	0x08041e48

0802e2f4 <_ZN5Model16saveCurrentValueEl>:
{
 802e2f4:	b538      	push	{r3, r4, r5, lr}
 802e2f6:	4604      	mov	r4, r0
 802e2f8:	460d      	mov	r5, r1
    MenuSubItem* item = getCurrentSubItem();
 802e2fa:	f7ff fe28 	bl	802df4e <_ZN5Model17getCurrentSubItemEv>
    if (item && item->type == NUMBER_TYPE) {
 802e2fe:	b148      	cbz	r0, 802e314 <_ZN5Model16saveCurrentValueEl+0x20>
 802e300:	7903      	ldrb	r3, [r0, #4]
 802e302:	b93b      	cbnz	r3, 802e314 <_ZN5Model16saveCurrentValueEl+0x20>
        item->currentValue = value;
 802e304:	6085      	str	r5, [r0, #8]
        syncMenuItemsToConfig();
 802e306:	4620      	mov	r0, r4
 802e308:	f7ff ff74 	bl	802e1f4 <_ZN5Model21syncMenuItemsToConfigEv>
}
 802e30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    loadSettingsFromConfig();
}

void Model::saveSettingsToFile()
{
    SaveConfigFile();
 802e310:	f7f1 b97a 	b.w	801f608 <SaveConfigFile>
}
 802e314:	bd38      	pop	{r3, r4, r5, pc}

0802e316 <_ZN5Model24saveCurrentEnumSelectionEh>:
{
 802e316:	b538      	push	{r3, r4, r5, lr}
 802e318:	4604      	mov	r4, r0
 802e31a:	460d      	mov	r5, r1
    MenuSubItem* item = getCurrentSubItem();
 802e31c:	f7ff fe17 	bl	802df4e <_ZN5Model17getCurrentSubItemEv>
    if (item && item->type == ENUM_TYPE) {
 802e320:	b150      	cbz	r0, 802e338 <_ZN5Model24saveCurrentEnumSelectionEh+0x22>
 802e322:	7903      	ldrb	r3, [r0, #4]
 802e324:	2b01      	cmp	r3, #1
 802e326:	d107      	bne.n	802e338 <_ZN5Model24saveCurrentEnumSelectionEh+0x22>
        item->currentEnumIndex = enumIndex;
 802e328:	7645      	strb	r5, [r0, #25]
        syncMenuItemsToConfig();
 802e32a:	4620      	mov	r0, r4
 802e32c:	f7ff ff62 	bl	802e1f4 <_ZN5Model21syncMenuItemsToConfigEv>
}
 802e330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    SaveConfigFile();
 802e334:	f7f1 b968 	b.w	801f608 <SaveConfigFile>
}
 802e338:	bd38      	pop	{r3, r4, r5, pc}
	...

0802e33c <_ZN5Model22loadSettingsFromConfigEv>:

// UPDATED: Removed emergency setpoint loading
void Model::loadSettingsFromConfig()
{
    // System settings - with bounds checking
    SystemSubItems[0].currentEnumIndex = constrain(S35_config[TOUCHGFX_VEHICLETYPE], 0, 1);
 802e33c:	4a4a      	ldr	r2, [pc, #296]	@ (802e468 <_ZN5Model22loadSettingsFromConfigEv+0x12c>)
 802e33e:	4b4b      	ldr	r3, [pc, #300]	@ (802e46c <_ZN5Model22loadSettingsFromConfigEv+0x130>)
 802e340:	8812      	ldrh	r2, [r2, #0]
 802e342:	494b      	ldr	r1, [pc, #300]	@ (802e470 <_ZN5Model22loadSettingsFromConfigEv+0x134>)
 802e344:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
}

int32_t Model::constrain(int32_t value, int32_t minVal, int32_t maxVal)
{
    if (value < minVal) return minVal;
    if (value > maxVal) return maxVal;
 802e348:	2a01      	cmp	r2, #1
 802e34a:	bfa8      	it	ge
 802e34c:	2201      	movge	r2, #1
    SystemSubItems[0].currentEnumIndex = constrain(S35_config[TOUCHGFX_VEHICLETYPE], 0, 1);
 802e34e:	764a      	strb	r2, [r1, #25]
    SystemSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_BRIGHTNESS], 10, 100);
 802e350:	4a48      	ldr	r2, [pc, #288]	@ (802e474 <_ZN5Model22loadSettingsFromConfigEv+0x138>)
 802e352:	8812      	ldrh	r2, [r2, #0]
 802e354:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    if (value > maxVal) return maxVal;
 802e358:	2a64      	cmp	r2, #100	@ 0x64
 802e35a:	bfa8      	it	ge
 802e35c:	2264      	movge	r2, #100	@ 0x64
 802e35e:	2a0a      	cmp	r2, #10
 802e360:	bfb8      	it	lt
 802e362:	220a      	movlt	r2, #10
    SystemSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_BRIGHTNESS], 10, 100);
 802e364:	62ca      	str	r2, [r1, #44]	@ 0x2c
    LCD_brightness = constrain(S35_config[TOUCHGFX_BRIGHTNESS], 10, 100);
 802e366:	4944      	ldr	r1, [pc, #272]	@ (802e478 <_ZN5Model22loadSettingsFromConfigEv+0x13c>)
 802e368:	700a      	strb	r2, [r1, #0]
    SensorSubItems[0].currentValue = constrain(S35_config[TOUCHGFX_TRUCKMAX], 0, 1000);
 802e36a:	4944      	ldr	r1, [pc, #272]	@ (802e47c <_ZN5Model22loadSettingsFromConfigEv+0x140>)
 802e36c:	4a44      	ldr	r2, [pc, #272]	@ (802e480 <_ZN5Model22loadSettingsFromConfigEv+0x144>)
 802e36e:	8809      	ldrh	r1, [r1, #0]
 802e370:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e374:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 802e378:	bfa8      	it	ge
 802e37a:	f44f 717a 	movge.w	r1, #1000	@ 0x3e8
    SensorSubItems[0].currentValue = constrain(S35_config[TOUCHGFX_TRUCKMAX], 0, 1000);
 802e37e:	6091      	str	r1, [r2, #8]
    SensorSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_TRUCKMIN], 0, 100);
 802e380:	4940      	ldr	r1, [pc, #256]	@ (802e484 <_ZN5Model22loadSettingsFromConfigEv+0x148>)
 802e382:	8809      	ldrh	r1, [r1, #0]
 802e384:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e388:	2964      	cmp	r1, #100	@ 0x64
 802e38a:	bfa8      	it	ge
 802e38c:	2164      	movge	r1, #100	@ 0x64
    SensorSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_TRUCKMIN], 0, 100);
 802e38e:	62d1      	str	r1, [r2, #44]	@ 0x2c
    SensorSubItems[2].currentValue = constrain(S35_config[TOUCHGFX_TRAILERMAX], 0, 1000);
 802e390:	493d      	ldr	r1, [pc, #244]	@ (802e488 <_ZN5Model22loadSettingsFromConfigEv+0x14c>)
 802e392:	8809      	ldrh	r1, [r1, #0]
 802e394:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e398:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 802e39c:	bfa8      	it	ge
 802e39e:	f44f 717a 	movge.w	r1, #1000	@ 0x3e8
    SensorSubItems[2].currentValue = constrain(S35_config[TOUCHGFX_TRAILERMAX], 0, 1000);
 802e3a2:	6511      	str	r1, [r2, #80]	@ 0x50
    SensorSubItems[3].currentValue = constrain(S35_config[TOUCHGFX_TRAILERMIN], 0, 100);
 802e3a4:	4939      	ldr	r1, [pc, #228]	@ (802e48c <_ZN5Model22loadSettingsFromConfigEv+0x150>)
 802e3a6:	8809      	ldrh	r1, [r1, #0]
 802e3a8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e3ac:	2964      	cmp	r1, #100	@ 0x64
 802e3ae:	bfa8      	it	ge
 802e3b0:	2164      	movge	r1, #100	@ 0x64
    SensorSubItems[3].currentValue = constrain(S35_config[TOUCHGFX_TRAILERMIN], 0, 100);
 802e3b2:	6751      	str	r1, [r2, #116]	@ 0x74
    PressureSubItems[0].currentValue = constrain(S35_config[TOUCHGFX_ANGLE], 0, 64);
 802e3b4:	4936      	ldr	r1, [pc, #216]	@ (802e490 <_ZN5Model22loadSettingsFromConfigEv+0x154>)
 802e3b6:	4a37      	ldr	r2, [pc, #220]	@ (802e494 <_ZN5Model22loadSettingsFromConfigEv+0x158>)
 802e3b8:	8809      	ldrh	r1, [r1, #0]
 802e3ba:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e3be:	2940      	cmp	r1, #64	@ 0x40
 802e3c0:	bfa8      	it	ge
 802e3c2:	2140      	movge	r1, #64	@ 0x40
    PressureSubItems[0].currentValue = constrain(S35_config[TOUCHGFX_ANGLE], 0, 64);
 802e3c4:	6091      	str	r1, [r2, #8]
    PressureSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_TRUCK_LOWERED], 0, 400);
 802e3c6:	4934      	ldr	r1, [pc, #208]	@ (802e498 <_ZN5Model22loadSettingsFromConfigEv+0x15c>)
 802e3c8:	8809      	ldrh	r1, [r1, #0]
 802e3ca:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e3ce:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802e3d2:	bfa8      	it	ge
 802e3d4:	f44f 71c8 	movge.w	r1, #400	@ 0x190
    PressureSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_TRUCK_LOWERED], 0, 400);
 802e3d8:	62d1      	str	r1, [r2, #44]	@ 0x2c
    PressureSubItems[2].currentValue = constrain(S35_config[TOUCHGFX_TRUCK_RAISED], 0, 400);
 802e3da:	4930      	ldr	r1, [pc, #192]	@ (802e49c <_ZN5Model22loadSettingsFromConfigEv+0x160>)
 802e3dc:	8809      	ldrh	r1, [r1, #0]
 802e3de:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e3e2:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802e3e6:	bfa8      	it	ge
 802e3e8:	f44f 71c8 	movge.w	r1, #400	@ 0x190
    PressureSubItems[2].currentValue = constrain(S35_config[TOUCHGFX_TRUCK_RAISED], 0, 400);
 802e3ec:	6511      	str	r1, [r2, #80]	@ 0x50
    PressureSubItems[3].currentValue = constrain(S35_config[TOUCHGFX_TRUCK_OVERLOAD], 0, 400);
 802e3ee:	492c      	ldr	r1, [pc, #176]	@ (802e4a0 <_ZN5Model22loadSettingsFromConfigEv+0x164>)
 802e3f0:	8809      	ldrh	r1, [r1, #0]
 802e3f2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e3f6:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802e3fa:	bfa8      	it	ge
 802e3fc:	f44f 71c8 	movge.w	r1, #400	@ 0x190
    PressureSubItems[3].currentValue = constrain(S35_config[TOUCHGFX_TRUCK_OVERLOAD], 0, 400);
 802e400:	6751      	str	r1, [r2, #116]	@ 0x74
    PressureSubItems[4].currentValue = constrain(S35_config[TOUCHGFX_TRAILER_LOWERED], 0, 400);  // Index adjusted
 802e402:	4928      	ldr	r1, [pc, #160]	@ (802e4a4 <_ZN5Model22loadSettingsFromConfigEv+0x168>)
 802e404:	8809      	ldrh	r1, [r1, #0]
 802e406:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e40a:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802e40e:	bfa8      	it	ge
 802e410:	f44f 71c8 	movge.w	r1, #400	@ 0x190
    PressureSubItems[4].currentValue = constrain(S35_config[TOUCHGFX_TRAILER_LOWERED], 0, 400);  // Index adjusted
 802e414:	f8c2 1098 	str.w	r1, [r2, #152]	@ 0x98
    PressureSubItems[5].currentValue = constrain(S35_config[TOUCHGFX_TRAILER_RAISED], 0, 400);   // Index adjusted
 802e418:	4923      	ldr	r1, [pc, #140]	@ (802e4a8 <_ZN5Model22loadSettingsFromConfigEv+0x16c>)
 802e41a:	8809      	ldrh	r1, [r1, #0]
 802e41c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e420:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802e424:	bfa8      	it	ge
 802e426:	f44f 71c8 	movge.w	r1, #400	@ 0x190
    PressureSubItems[5].currentValue = constrain(S35_config[TOUCHGFX_TRAILER_RAISED], 0, 400);   // Index adjusted
 802e42a:	f8c2 10bc 	str.w	r1, [r2, #188]	@ 0xbc
    PressureSubItems[6].currentValue = constrain(S35_config[TOUCHGFX_TRAILER_OVERLOAD], 0, 400); // Index adjusted
 802e42e:	491f      	ldr	r1, [pc, #124]	@ (802e4ac <_ZN5Model22loadSettingsFromConfigEv+0x170>)
 802e430:	8809      	ldrh	r1, [r1, #0]
 802e432:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    if (value > maxVal) return maxVal;
 802e436:	f5b1 7fc8 	cmp.w	r1, #400	@ 0x190
 802e43a:	bfa8      	it	ge
 802e43c:	f44f 71c8 	movge.w	r1, #400	@ 0x190
    PressureSubItems[6].currentValue = constrain(S35_config[TOUCHGFX_TRAILER_OVERLOAD], 0, 400); // Index adjusted
 802e440:	f8c2 10e0 	str.w	r1, [r2, #224]	@ 0xe0
    TimerSubItems[0].currentValue = constrain(S35_config[TOUCHGFX_INCLO_BUBBLE], 0, 100);
 802e444:	4a1a      	ldr	r2, [pc, #104]	@ (802e4b0 <_ZN5Model22loadSettingsFromConfigEv+0x174>)
 802e446:	491b      	ldr	r1, [pc, #108]	@ (802e4b4 <_ZN5Model22loadSettingsFromConfigEv+0x178>)
 802e448:	8812      	ldrh	r2, [r2, #0]
 802e44a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    if (value > maxVal) return maxVal;
 802e44e:	2a64      	cmp	r2, #100	@ 0x64
 802e450:	bfa8      	it	ge
 802e452:	2264      	movge	r2, #100	@ 0x64
    TimerSubItems[0].currentValue = constrain(S35_config[TOUCHGFX_INCLO_BUBBLE], 0, 100);
 802e454:	608a      	str	r2, [r1, #8]
    TimerSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_PRESSURE_BUBBLE], 0, 100);
 802e456:	4a18      	ldr	r2, [pc, #96]	@ (802e4b8 <_ZN5Model22loadSettingsFromConfigEv+0x17c>)
 802e458:	8812      	ldrh	r2, [r2, #0]
 802e45a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (value > maxVal) return maxVal;
 802e45e:	2b64      	cmp	r3, #100	@ 0x64
 802e460:	bfa8      	it	ge
 802e462:	2364      	movge	r3, #100	@ 0x64
    TimerSubItems[1].currentValue = constrain(S35_config[TOUCHGFX_PRESSURE_BUBBLE], 0, 100);
 802e464:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 802e466:	4770      	bx	lr
 802e468:	08041e68 	.word	0x08041e68
 802e46c:	20001e72 	.word	0x20001e72
 802e470:	200006d8 	.word	0x200006d8
 802e474:	08041e66 	.word	0x08041e66
 802e478:	20000430 	.word	0x20000430
 802e47c:	08041e64 	.word	0x08041e64
 802e480:	20000648 	.word	0x20000648
 802e484:	08041e62 	.word	0x08041e62
 802e488:	08041e60 	.word	0x08041e60
 802e48c:	08041e5e 	.word	0x08041e5e
 802e490:	08041e4c 	.word	0x08041e4c
 802e494:	2000054c 	.word	0x2000054c
 802e498:	08041e5c 	.word	0x08041e5c
 802e49c:	08041e5a 	.word	0x08041e5a
 802e4a0:	08041e58 	.word	0x08041e58
 802e4a4:	08041e54 	.word	0x08041e54
 802e4a8:	08041e52 	.word	0x08041e52
 802e4ac:	08041e50 	.word	0x08041e50
 802e4b0:	08041e4a 	.word	0x08041e4a
 802e4b4:	20000504 	.word	0x20000504
 802e4b8:	08041e48 	.word	0x08041e48

0802e4bc <_ZN5Model23loadSettingsFromStorageEv>:
{
 802e4bc:	b510      	push	{r4, lr}
 802e4be:	4604      	mov	r4, r0
    LoadConfigFile();
 802e4c0:	f7f1 f90e 	bl	801f6e0 <LoadConfigFile>
    loadSettingsFromConfig();
 802e4c4:	4620      	mov	r0, r4
}
 802e4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    loadSettingsFromConfig();
 802e4ca:	f7ff bf37 	b.w	802e33c <_ZN5Model22loadSettingsFromConfigEv>
	...

0802e4d0 <_ZN5Model4tickEv>:
{
 802e4d0:	b510      	push	{r4, lr}
    if (!can_data_updated) return;
 802e4d2:	4b11      	ldr	r3, [pc, #68]	@ (802e518 <_ZN5Model4tickEv+0x48>)
 802e4d4:	781a      	ldrb	r2, [r3, #0]
{
 802e4d6:	4604      	mov	r4, r0
    if (!can_data_updated) return;
 802e4d8:	b1ea      	cbz	r2, 802e516 <_ZN5Model4tickEv+0x46>
    can_data_updated = 0;
 802e4da:	2200      	movs	r2, #0
 802e4dc:	701a      	strb	r2, [r3, #0]
    if (!settingsLoaded) {
 802e4de:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 802e4e2:	b923      	cbnz	r3, 802e4ee <_ZN5Model4tickEv+0x1e>
        loadSettingsFromStorage();
 802e4e4:	f7ff ffea 	bl	802e4bc <_ZN5Model23loadSettingsFromStorageEv>
        settingsLoaded = true;
 802e4e8:	2301      	movs	r3, #1
 802e4ea:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
    processTruckStatus();
 802e4ee:	4620      	mov	r0, r4
 802e4f0:	f7ff fd7c 	bl	802dfec <_ZN5Model18processTruckStatusEv>
    processTrailerStatus();
 802e4f4:	f7ff fda2 	bl	802e03c <_ZN5Model20processTrailerStatusEv>
    processErrorConditions();
 802e4f8:	f7ff fdc8 	bl	802e08c <_ZN5Model22processErrorConditionsEv>
    updateAlarmState();
 802e4fc:	f7ff fd3c 	bl	802df78 <_ZN5Model16updateAlarmStateEv>
    updateFlashingStates();
 802e500:	f7ff fde4 	bl	802e0cc <_ZN5Model20updateFlashingStatesEv>
    processRollData();
 802e504:	4620      	mov	r0, r4
 802e506:	f7ff fdf9 	bl	802e0fc <_ZN5Model15processRollDataEv>
    processPTOStatus();
 802e50a:	f7ff fe1f 	bl	802e14c <_ZN5Model16processPTOStatusEv>
}
 802e50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    notifyStateChanged();
 802e512:	f7ff be2f 	b.w	802e174 <_ZN5Model18notifyStateChangedEv>
}
 802e516:	bd10      	pop	{r4, pc}
 802e518:	20001d98 	.word	0x20001d98

0802e51c <_ZN5Model4bindEPv>:
}
 802e51c:	4770      	bx	lr
	...

0802e520 <_ZNK5Model24getButtonFeedbackMessageEhb>:
    return value;
}

const char* Model::getButtonFeedbackMessage(uint8_t buttonPressed, bool isHeld) const
{
    switch(currentTruckState)
 802e520:	f890 3037 	ldrb.w	r3, [r0, #55]	@ 0x37
 802e524:	2b04      	cmp	r3, #4
 802e526:	d81f      	bhi.n	802e568 <_ZNK5Model24getButtonFeedbackMessageEhb+0x48>
 802e528:	e8df f003 	tbb	[pc, r3]
 802e52c:	180a032a 	.word	0x180a032a
 802e530:	20          	.byte	0x20
 802e531:	00          	.byte	0x00
            }
            break;
    }

    // Default return for any unhandled cases
    return "";
 802e532:	4b19      	ldr	r3, [pc, #100]	@ (802e598 <_ZNK5Model24getButtonFeedbackMessageEhb+0x78>)
 802e534:	4819      	ldr	r0, [pc, #100]	@ (802e59c <_ZNK5Model24getButtonFeedbackMessageEhb+0x7c>)
            switch(buttonPressed)
 802e536:	3901      	subs	r1, #1
    return "";
 802e538:	2901      	cmp	r1, #1
 802e53a:	bf88      	it	hi
 802e53c:	4618      	movhi	r0, r3
 802e53e:	4770      	bx	lr
            switch(buttonPressed)
 802e540:	2901      	cmp	r1, #1
 802e542:	d005      	beq.n	802e550 <_ZNK5Model24getButtonFeedbackMessageEhb+0x30>
 802e544:	4b16      	ldr	r3, [pc, #88]	@ (802e5a0 <_ZNK5Model24getButtonFeedbackMessageEhb+0x80>)
 802e546:	4814      	ldr	r0, [pc, #80]	@ (802e598 <_ZNK5Model24getButtonFeedbackMessageEhb+0x78>)
 802e548:	2902      	cmp	r1, #2
 802e54a:	bf08      	it	eq
 802e54c:	4618      	moveq	r0, r3
 802e54e:	4770      	bx	lr
                case 1: return isHeld ? "RAISING..." : "HOLD TO RAISE";        // RAISE button - show operation
 802e550:	4814      	ldr	r0, [pc, #80]	@ (802e5a4 <_ZNK5Model24getButtonFeedbackMessageEhb+0x84>)
 802e552:	4b15      	ldr	r3, [pc, #84]	@ (802e5a8 <_ZNK5Model24getButtonFeedbackMessageEhb+0x88>)
                case 2: return isHeld ? "LOWERING..." : "HOLD TO LOWER";       // LOWER button - continue showing operation
 802e554:	2a00      	cmp	r2, #0
 802e556:	bf08      	it	eq
 802e558:	4618      	moveq	r0, r3
 802e55a:	4770      	bx	lr
            switch(buttonPressed)
 802e55c:	2902      	cmp	r1, #2
 802e55e:	d013      	beq.n	802e588 <_ZNK5Model24getButtonFeedbackMessageEhb+0x68>
 802e560:	2903      	cmp	r1, #3
 802e562:	d014      	beq.n	802e58e <_ZNK5Model24getButtonFeedbackMessageEhb+0x6e>
 802e564:	2901      	cmp	r1, #1
 802e566:	d0f3      	beq.n	802e550 <_ZNK5Model24getButtonFeedbackMessageEhb+0x30>
    return "";
 802e568:	480b      	ldr	r0, [pc, #44]	@ (802e598 <_ZNK5Model24getButtonFeedbackMessageEhb+0x78>)
 802e56a:	4770      	bx	lr
            switch(buttonPressed)
 802e56c:	2902      	cmp	r1, #2
 802e56e:	d00b      	beq.n	802e588 <_ZNK5Model24getButtonFeedbackMessageEhb+0x68>
 802e570:	2903      	cmp	r1, #3
 802e572:	d00e      	beq.n	802e592 <_ZNK5Model24getButtonFeedbackMessageEhb+0x72>
                case 1: return isHeld ? "ALREADY RAISED" : "ALREADY RAISED";   // RAISE button - already in position
 802e574:	4b0d      	ldr	r3, [pc, #52]	@ (802e5ac <_ZNK5Model24getButtonFeedbackMessageEhb+0x8c>)
 802e576:	4808      	ldr	r0, [pc, #32]	@ (802e598 <_ZNK5Model24getButtonFeedbackMessageEhb+0x78>)
 802e578:	2901      	cmp	r1, #1
 802e57a:	bf08      	it	eq
 802e57c:	4618      	moveq	r0, r3
 802e57e:	4770      	bx	lr
            switch(buttonPressed)
 802e580:	2901      	cmp	r1, #1
 802e582:	d0e5      	beq.n	802e550 <_ZNK5Model24getButtonFeedbackMessageEhb+0x30>
 802e584:	2902      	cmp	r1, #2
 802e586:	d1ef      	bne.n	802e568 <_ZNK5Model24getButtonFeedbackMessageEhb+0x48>
                case 2: return isHeld ? "LOWERING..." : "HOLD TO LOWER";       // LOWER button - continue showing operation
 802e588:	4809      	ldr	r0, [pc, #36]	@ (802e5b0 <_ZNK5Model24getButtonFeedbackMessageEhb+0x90>)
 802e58a:	4b0a      	ldr	r3, [pc, #40]	@ (802e5b4 <_ZNK5Model24getButtonFeedbackMessageEhb+0x94>)
 802e58c:	e7e2      	b.n	802e554 <_ZNK5Model24getButtonFeedbackMessageEhb+0x34>
            switch(buttonPressed)
 802e58e:	480a      	ldr	r0, [pc, #40]	@ (802e5b8 <_ZNK5Model24getButtonFeedbackMessageEhb+0x98>)
 802e590:	4770      	bx	lr
            switch(buttonPressed)
 802e592:	480a      	ldr	r0, [pc, #40]	@ (802e5bc <_ZNK5Model24getButtonFeedbackMessageEhb+0x9c>)
}
 802e594:	4770      	bx	lr
 802e596:	bf00      	nop
 802e598:	0803f6b1 	.word	0x0803f6b1
 802e59c:	08041104 	.word	0x08041104
 802e5a0:	0804112c 	.word	0x0804112c
 802e5a4:	08041148 	.word	0x08041148
 802e5a8:	0804111e 	.word	0x0804111e
 802e5ac:	0804116f 	.word	0x0804116f
 802e5b0:	08041112 	.word	0x08041112
 802e5b4:	08041153 	.word	0x08041153
 802e5b8:	08041161 	.word	0x08041161
 802e5bc:	0804113c 	.word	0x0804113c

0802e5c0 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb>:

// Add this method to Model.cpp after the existing getButtonFeedbackMessage method

const char* Model::getTrailerButtonFeedbackMessage(uint8_t buttonPressed, bool isHeld) const
{
    switch(currentTrailerState)
 802e5c0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 802e5c4:	2b04      	cmp	r3, #4
 802e5c6:	d81f      	bhi.n	802e608 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x48>
 802e5c8:	e8df f003 	tbb	[pc, r3]
 802e5cc:	20180a2a 	.word	0x20180a2a
 802e5d0:	03          	.byte	0x03
 802e5d1:	00          	.byte	0x00
            }
            break;
    }

    // Default return for any unhandled cases
    return "";
 802e5d2:	4b19      	ldr	r3, [pc, #100]	@ (802e638 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x78>)
 802e5d4:	4819      	ldr	r0, [pc, #100]	@ (802e63c <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x7c>)
            switch(buttonPressed)
 802e5d6:	3901      	subs	r1, #1
    return "";
 802e5d8:	2901      	cmp	r1, #1
 802e5da:	bf88      	it	hi
 802e5dc:	4618      	movhi	r0, r3
 802e5de:	4770      	bx	lr
            switch(buttonPressed)
 802e5e0:	2901      	cmp	r1, #1
 802e5e2:	d005      	beq.n	802e5f0 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x30>
 802e5e4:	4b16      	ldr	r3, [pc, #88]	@ (802e640 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x80>)
 802e5e6:	4814      	ldr	r0, [pc, #80]	@ (802e638 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x78>)
 802e5e8:	2902      	cmp	r1, #2
 802e5ea:	bf08      	it	eq
 802e5ec:	4618      	moveq	r0, r3
 802e5ee:	4770      	bx	lr
                case 1: return isHeld ? "RAISING..." : "HOLD TO RAISE";        // RAISE button - show operation
 802e5f0:	4814      	ldr	r0, [pc, #80]	@ (802e644 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x84>)
 802e5f2:	4b15      	ldr	r3, [pc, #84]	@ (802e648 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x88>)
                case 2: return isHeld ? "LOWERING..." : "HOLD TO LOWER";       // LOWER button - continue showing operation
 802e5f4:	2a00      	cmp	r2, #0
 802e5f6:	bf08      	it	eq
 802e5f8:	4618      	moveq	r0, r3
 802e5fa:	4770      	bx	lr
            switch(buttonPressed)
 802e5fc:	2902      	cmp	r1, #2
 802e5fe:	d013      	beq.n	802e628 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x68>
 802e600:	2903      	cmp	r1, #3
 802e602:	d014      	beq.n	802e62e <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x6e>
 802e604:	2901      	cmp	r1, #1
 802e606:	d0f3      	beq.n	802e5f0 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x30>
    return "";
 802e608:	480b      	ldr	r0, [pc, #44]	@ (802e638 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x78>)
 802e60a:	4770      	bx	lr
            switch(buttonPressed)
 802e60c:	2902      	cmp	r1, #2
 802e60e:	d00b      	beq.n	802e628 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x68>
 802e610:	2903      	cmp	r1, #3
 802e612:	d00e      	beq.n	802e632 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x72>
                case 1: return isHeld ? "ALREADY RAISED" : "ALREADY RAISED";   // RAISE button - already in position
 802e614:	4b0d      	ldr	r3, [pc, #52]	@ (802e64c <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x8c>)
 802e616:	4808      	ldr	r0, [pc, #32]	@ (802e638 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x78>)
 802e618:	2901      	cmp	r1, #1
 802e61a:	bf08      	it	eq
 802e61c:	4618      	moveq	r0, r3
 802e61e:	4770      	bx	lr
            switch(buttonPressed)
 802e620:	2901      	cmp	r1, #1
 802e622:	d0e5      	beq.n	802e5f0 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x30>
 802e624:	2902      	cmp	r1, #2
 802e626:	d1ef      	bne.n	802e608 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x48>
                case 2: return isHeld ? "LOWERING..." : "HOLD TO LOWER";       // LOWER button - continue showing operation
 802e628:	4809      	ldr	r0, [pc, #36]	@ (802e650 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x90>)
 802e62a:	4b0a      	ldr	r3, [pc, #40]	@ (802e654 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x94>)
 802e62c:	e7e2      	b.n	802e5f4 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x34>
            switch(buttonPressed)
 802e62e:	480a      	ldr	r0, [pc, #40]	@ (802e658 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x98>)
 802e630:	4770      	bx	lr
            switch(buttonPressed)
 802e632:	480a      	ldr	r0, [pc, #40]	@ (802e65c <_ZNK5Model31getTrailerButtonFeedbackMessageEhb+0x9c>)
}
 802e634:	4770      	bx	lr
 802e636:	bf00      	nop
 802e638:	0803f6b1 	.word	0x0803f6b1
 802e63c:	08041104 	.word	0x08041104
 802e640:	0804112c 	.word	0x0804112c
 802e644:	08041148 	.word	0x08041148
 802e648:	0804111e 	.word	0x0804111e
 802e64c:	0804116f 	.word	0x0804116f
 802e650:	08041112 	.word	0x08041112
 802e654:	08041153 	.word	0x08041153
 802e658:	08041161 	.word	0x08041161
 802e65c:	0804113c 	.word	0x0804113c

0802e660 <_ZN22PasswordEntryPresenterD1Ev>:
    virtual ~PasswordEntryPresenter() {}
 802e660:	4770      	bx	lr

0802e662 <_ZThn4_N22PasswordEntryPresenterD1Ev>:
 802e662:	3804      	subs	r0, #4
 802e664:	4770      	bx	lr

0802e666 <_ZN22PasswordEntryPresenter10deactivateEv>:
{
}

void PasswordEntryPresenter::activate()
{
}
 802e666:	4770      	bx	lr

0802e668 <_ZN22PasswordEntryPresenterD0Ev>:
 802e668:	b510      	push	{r4, lr}
 802e66a:	2114      	movs	r1, #20
 802e66c:	4604      	mov	r4, r0
 802e66e:	f00d ff3c 	bl	803c4ea <_ZdlPvj>
 802e672:	4620      	mov	r0, r4
 802e674:	bd10      	pop	{r4, pc}

0802e676 <_ZThn4_N22PasswordEntryPresenterD0Ev>:
 802e676:	f1a0 0004 	sub.w	r0, r0, #4
 802e67a:	e7f5      	b.n	802e668 <_ZN22PasswordEntryPresenterD0Ev>

0802e67c <_ZN22PasswordEntryPresenterC1ER17PasswordEntryView>:
PasswordEntryPresenter::PasswordEntryPresenter(PasswordEntryView& v)
 802e67c:	b510      	push	{r4, lr}
    : view(v), model(nullptr)  // Initialize model to nullptr
 802e67e:	4a04      	ldr	r2, [pc, #16]	@ (802e690 <_ZN22PasswordEntryPresenterC1ER17PasswordEntryView+0x14>)
 802e680:	6002      	str	r2, [r0, #0]
 802e682:	2400      	movs	r4, #0
 802e684:	3218      	adds	r2, #24
 802e686:	e9c0 1403 	strd	r1, r4, [r0, #12]
 802e68a:	6084      	str	r4, [r0, #8]
 802e68c:	6042      	str	r2, [r0, #4]
}
 802e68e:	bd10      	pop	{r4, pc}
 802e690:	08042fb0 	.word	0x08042fb0

0802e694 <_ZN22PasswordEntryPresenter17getStoredPasswordEv>:
    if (model) {
        // Get password from model/config, default to 1234
        return 3482; // You can extend this to get from S35_config if needed
    }
    return 3482; // Default fallback
}
 802e694:	f640 509a 	movw	r0, #3482	@ 0xd9a
 802e698:	4770      	bx	lr

0802e69a <_ZN17PasswordEntryView14tearDownScreenEv>:
}

void PasswordEntryView::tearDownScreen()
{
    PasswordEntryViewBase::tearDownScreen();
}
 802e69a:	4770      	bx	lr

0802e69c <_ZN17PasswordEntryViewD1Ev>:

class PasswordEntryView : public PasswordEntryViewBase
{
public:
    PasswordEntryView();
    virtual ~PasswordEntryView() {}
 802e69c:	b510      	push	{r4, lr}
 802e69e:	4b03      	ldr	r3, [pc, #12]	@ (802e6ac <_ZN17PasswordEntryViewD1Ev+0x10>)
 802e6a0:	6003      	str	r3, [r0, #0]
 802e6a2:	4604      	mov	r4, r0
 802e6a4:	f7fc f9f5 	bl	802aa92 <_ZN21PasswordEntryViewBaseD1Ev>
 802e6a8:	4620      	mov	r0, r4
 802e6aa:	bd10      	pop	{r4, pc}
 802e6ac:	08042fdc 	.word	0x08042fdc

0802e6b0 <_ZN17PasswordEntryViewD0Ev>:
 802e6b0:	b510      	push	{r4, lr}
 802e6b2:	4604      	mov	r4, r0
 802e6b4:	f7ff fff2 	bl	802e69c <_ZN17PasswordEntryViewD1Ev>
 802e6b8:	4620      	mov	r0, r4
 802e6ba:	f44f 61b9 	mov.w	r1, #1480	@ 0x5c8
 802e6be:	f00d ff14 	bl	803c4ea <_ZdlPvj>
 802e6c2:	4620      	mov	r0, r4
 802e6c4:	bd10      	pop	{r4, pc}
	...

0802e6c8 <_ZN17PasswordEntryViewC1Ev>:
PasswordEntryView::PasswordEntryView() :
 802e6c8:	b510      	push	{r4, lr}
 802e6ca:	4604      	mov	r4, r0
attempts(0)
 802e6cc:	f7fc fa14 	bl	802aaf8 <_ZN21PasswordEntryViewBaseC1Ev>
 802e6d0:	4b04      	ldr	r3, [pc, #16]	@ (802e6e4 <_ZN17PasswordEntryViewC1Ev+0x1c>)
 802e6d2:	6023      	str	r3, [r4, #0]
currentDigit(0),
 802e6d4:	2300      	movs	r3, #0
 802e6d6:	f884 35c2 	strb.w	r3, [r4, #1474]	@ 0x5c2
attempts(0)
 802e6da:	f884 35c7 	strb.w	r3, [r4, #1479]	@ 0x5c7
}
 802e6de:	4620      	mov	r0, r4
 802e6e0:	bd10      	pop	{r4, pc}
 802e6e2:	bf00      	nop
 802e6e4:	08042fdc 	.word	0x08042fdc

0802e6e8 <_ZN17PasswordEntryView18updateDigitDisplayEv>:
    if (currentDigit > 3) currentDigit = 3;
    updateBorderHighlight();
}

void PasswordEntryView::updateDigitDisplay()
{
 802e6e8:	b570      	push	{r4, r5, r6, lr}
    // Update the 4 text areas with current digits
    Unicode::snprintf(digit1Buffer, 2, "%d", passwordDigits[0]);
 802e6ea:	4d12      	ldr	r5, [pc, #72]	@ (802e734 <_ZN17PasswordEntryView18updateDigitDisplayEv+0x4c>)
 802e6ec:	f890 35c3 	ldrb.w	r3, [r0, #1475]	@ 0x5c3
{
 802e6f0:	4604      	mov	r4, r0
    Unicode::snprintf(digit1Buffer, 2, "%d", passwordDigits[0]);
 802e6f2:	462a      	mov	r2, r5
 802e6f4:	2102      	movs	r1, #2
 802e6f6:	f200 5022 	addw	r0, r0, #1314	@ 0x522
 802e6fa:	f009 fbb9 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Unicode::snprintf(digit2Buffer, 2, "%d", passwordDigits[1]);
 802e6fe:	f894 35c4 	ldrb.w	r3, [r4, #1476]	@ 0x5c4
 802e702:	462a      	mov	r2, r5
 802e704:	2102      	movs	r1, #2
 802e706:	f204 504a 	addw	r0, r4, #1354	@ 0x54a
 802e70a:	f009 fbb1 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Unicode::snprintf(digit3Buffer, 2, "%d", passwordDigits[2]);
 802e70e:	f894 35c5 	ldrb.w	r3, [r4, #1477]	@ 0x5c5
 802e712:	462a      	mov	r2, r5
 802e714:	2102      	movs	r1, #2
 802e716:	f204 5072 	addw	r0, r4, #1394	@ 0x572
 802e71a:	f009 fba9 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    Unicode::snprintf(digit4Buffer, 2, "%d", passwordDigits[3]);
 802e71e:	f894 35c6 	ldrb.w	r3, [r4, #1478]	@ 0x5c6
 802e722:	462a      	mov	r2, r5
 802e724:	f204 509a 	addw	r0, r4, #1434	@ 0x59a
 802e728:	2102      	movs	r1, #2
}
 802e72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Unicode::snprintf(digit4Buffer, 2, "%d", passwordDigits[3]);
 802e72e:	f009 bb9f 	b.w	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802e732:	bf00      	nop
 802e734:	080410f9 	.word	0x080410f9

0802e738 <_ZN17PasswordEntryView21updateBorderHighlightEv>:
 802e738:	4b10      	ldr	r3, [pc, #64]	@ (802e77c <_ZN17PasswordEntryView21updateBorderHighlightEv+0x44>)
 802e73a:	f8c0 32bc 	str.w	r3, [r0, #700]	@ 0x2bc
 802e73e:	f8c0 3358 	str.w	r3, [r0, #856]	@ 0x358
 802e742:	f8c0 3324 	str.w	r3, [r0, #804]	@ 0x324
 802e746:	f8c0 32f0 	str.w	r3, [r0, #752]	@ 0x2f0
    boxWithBorder2.setBorderColor(touchgfx::Color::getColorFromRGB(128, 128, 128));
    boxWithBorder3.setBorderColor(touchgfx::Color::getColorFromRGB(128, 128, 128));
    boxWithBorder4.setBorderColor(touchgfx::Color::getColorFromRGB(128, 128, 128));

    // Highlight current digit box
    switch(currentDigit) {
 802e74a:	f890 35c2 	ldrb.w	r3, [r0, #1474]	@ 0x5c2
 802e74e:	2b03      	cmp	r3, #3
 802e750:	d812      	bhi.n	802e778 <_ZN17PasswordEntryView21updateBorderHighlightEv+0x40>
 802e752:	e8df f003 	tbb	[pc, r3]
 802e756:	0602      	.short	0x0602
 802e758:	0e0a      	.short	0x0e0a
 802e75a:	4b09      	ldr	r3, [pc, #36]	@ (802e780 <_ZN17PasswordEntryView21updateBorderHighlightEv+0x48>)
 802e75c:	f8c0 32bc 	str.w	r3, [r0, #700]	@ 0x2bc
        case 0:
            boxWithBorder1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 123, 255)); // Blue
            break;
 802e760:	4770      	bx	lr
 802e762:	4b07      	ldr	r3, [pc, #28]	@ (802e780 <_ZN17PasswordEntryView21updateBorderHighlightEv+0x48>)
 802e764:	f8c0 3358 	str.w	r3, [r0, #856]	@ 0x358
        case 1:
            boxWithBorder2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 123, 255));
            break;
 802e768:	4770      	bx	lr
 802e76a:	4b05      	ldr	r3, [pc, #20]	@ (802e780 <_ZN17PasswordEntryView21updateBorderHighlightEv+0x48>)
 802e76c:	f8c0 3324 	str.w	r3, [r0, #804]	@ 0x324
        case 2:
            boxWithBorder3.setBorderColor(touchgfx::Color::getColorFromRGB(0, 123, 255));
            break;
 802e770:	4770      	bx	lr
 802e772:	4b03      	ldr	r3, [pc, #12]	@ (802e780 <_ZN17PasswordEntryView21updateBorderHighlightEv+0x48>)
 802e774:	f8c0 32f0 	str.w	r3, [r0, #752]	@ 0x2f0
        case 3:
            boxWithBorder4.setBorderColor(touchgfx::Color::getColorFromRGB(0, 123, 255));
            break;
    }
}
 802e778:	4770      	bx	lr
 802e77a:	bf00      	nop
 802e77c:	ff808080 	.word	0xff808080
 802e780:	ff007bff 	.word	0xff007bff

0802e784 <_ZN17PasswordEntryView18resetPasswordEntryEv>:
{
 802e784:	b510      	push	{r4, lr}
    currentDigit = 0;
 802e786:	2300      	movs	r3, #0
{
 802e788:	4604      	mov	r4, r0
    currentDigit = 0;
 802e78a:	f8a0 35c2 	strh.w	r3, [r0, #1474]	@ 0x5c2
        passwordDigits[i] = 0;
 802e78e:	f8a0 35c4 	strh.w	r3, [r0, #1476]	@ 0x5c4
 802e792:	f880 35c6 	strb.w	r3, [r0, #1478]	@ 0x5c6
    updateDigitDisplay();
 802e796:	f7ff ffa7 	bl	802e6e8 <_ZN17PasswordEntryView18updateDigitDisplayEv>
    updateBorderHighlight();
 802e79a:	4620      	mov	r0, r4
}
 802e79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateBorderHighlight();
 802e7a0:	f7ff bfca 	b.w	802e738 <_ZN17PasswordEntryView21updateBorderHighlightEv>

0802e7a4 <_ZN17PasswordEntryView15moveToNextDigitEv>:
    currentDigit++;
 802e7a4:	f890 35c2 	ldrb.w	r3, [r0, #1474]	@ 0x5c2
 802e7a8:	3301      	adds	r3, #1
    if (currentDigit > 3) currentDigit = 3;
 802e7aa:	b2db      	uxtb	r3, r3
 802e7ac:	2b03      	cmp	r3, #3
 802e7ae:	bf28      	it	cs
 802e7b0:	2303      	movcs	r3, #3
 802e7b2:	f880 35c2 	strb.w	r3, [r0, #1474]	@ 0x5c2
    updateBorderHighlight();
 802e7b6:	f7ff bfbf 	b.w	802e738 <_ZN17PasswordEntryView21updateBorderHighlightEv>

0802e7ba <_ZN17PasswordEntryView13checkPasswordEv>:
        }
    }
}

bool PasswordEntryView::checkPassword()
{
 802e7ba:	b510      	push	{r4, lr}
 802e7bc:	4604      	mov	r4, r0
    uint16_t storedPassword = presenter->getStoredPassword();
 802e7be:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 802e7c0:	f7ff ff68 	bl	802e694 <_ZN22PasswordEntryPresenter17getStoredPasswordEv>
    uint16_t enteredPassword = passwordDigits[0] * 1000 +
 802e7c4:	f894 35c3 	ldrb.w	r3, [r4, #1475]	@ 0x5c3
 802e7c8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 802e7cc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 802e7d0:	f894 35c4 	ldrb.w	r3, [r4, #1476]	@ 0x5c4
 802e7d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802e7d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 802e7dc:	009b      	lsls	r3, r3, #2
 802e7de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
                              passwordDigits[1] * 100 +
                              passwordDigits[2] * 10 +
                              passwordDigits[3];
 802e7e2:	f894 25c6 	ldrb.w	r2, [r4, #1478]	@ 0x5c6
    uint16_t enteredPassword = passwordDigits[0] * 1000 +
 802e7e6:	4413      	add	r3, r2
                              passwordDigits[1] * 100 +
 802e7e8:	f894 25c5 	ldrb.w	r2, [r4, #1477]	@ 0x5c5
 802e7ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    uint16_t enteredPassword = passwordDigits[0] * 1000 +
 802e7f0:	eb03 0342 	add.w	r3, r3, r2, lsl #1

    return (enteredPassword == storedPassword);
 802e7f4:	b29b      	uxth	r3, r3
}
 802e7f6:	1a1b      	subs	r3, r3, r0
 802e7f8:	4258      	negs	r0, r3
 802e7fa:	4158      	adcs	r0, r3
 802e7fc:	bd10      	pop	{r4, pc}

0802e7fe <_ZN17PasswordEntryView14handleUpButtonEv>:
{
 802e7fe:	b538      	push	{r3, r4, r5, lr}
    passwordDigits[currentDigit] = (passwordDigits[currentDigit] + 1) % 10;
 802e800:	f890 25c2 	ldrb.w	r2, [r0, #1474]	@ 0x5c2
 802e804:	4402      	add	r2, r0
 802e806:	210a      	movs	r1, #10
 802e808:	f892 35c3 	ldrb.w	r3, [r2, #1475]	@ 0x5c3
 802e80c:	3301      	adds	r3, #1
 802e80e:	fbb3 f5f1 	udiv	r5, r3, r1
 802e812:	fb01 3315 	mls	r3, r1, r5, r3
{
 802e816:	4604      	mov	r4, r0
    passwordDigits[currentDigit] = (passwordDigits[currentDigit] + 1) % 10;
 802e818:	f882 35c3 	strb.w	r3, [r2, #1475]	@ 0x5c3
    updateDigitDisplay();
 802e81c:	f7ff ff64 	bl	802e6e8 <_ZN17PasswordEntryView18updateDigitDisplayEv>
 802e820:	1d20      	adds	r0, r4, #4
}
 802e822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e826:	f007 bb31 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>

0802e82a <_ZN17PasswordEntryView16handleDownButtonEv>:
{
 802e82a:	b510      	push	{r4, lr}
    passwordDigits[currentDigit] = (passwordDigits[currentDigit] == 0) ? 9 : passwordDigits[currentDigit] - 1;
 802e82c:	f890 25c2 	ldrb.w	r2, [r0, #1474]	@ 0x5c2
 802e830:	4402      	add	r2, r0
{
 802e832:	4604      	mov	r4, r0
    passwordDigits[currentDigit] = (passwordDigits[currentDigit] == 0) ? 9 : passwordDigits[currentDigit] - 1;
 802e834:	f892 35c3 	ldrb.w	r3, [r2, #1475]	@ 0x5c3
 802e838:	b15b      	cbz	r3, 802e852 <_ZN17PasswordEntryView16handleDownButtonEv+0x28>
 802e83a:	3b01      	subs	r3, #1
 802e83c:	b2db      	uxtb	r3, r3
    updateDigitDisplay();
 802e83e:	4620      	mov	r0, r4
    passwordDigits[currentDigit] = (passwordDigits[currentDigit] == 0) ? 9 : passwordDigits[currentDigit] - 1;
 802e840:	f882 35c3 	strb.w	r3, [r2, #1475]	@ 0x5c3
    updateDigitDisplay();
 802e844:	f7ff ff50 	bl	802e6e8 <_ZN17PasswordEntryView18updateDigitDisplayEv>
 802e848:	1d20      	adds	r0, r4, #4
}
 802e84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e84e:	f007 bb1d 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
    passwordDigits[currentDigit] = (passwordDigits[currentDigit] == 0) ? 9 : passwordDigits[currentDigit] - 1;
 802e852:	2309      	movs	r3, #9
 802e854:	e7f3      	b.n	802e83e <_ZN17PasswordEntryView16handleDownButtonEv+0x14>
	...

0802e858 <_ZN17PasswordEntryView9showErrorEv>:

void PasswordEntryView::showError()
{
 802e858:	b510      	push	{r4, lr}
    // Show error message on your prompt text
    Unicode::strncpy(promptBuffer, "INCORRECT PASSWORD", PROMPT_SIZE);
 802e85a:	4908      	ldr	r1, [pc, #32]	@ (802e87c <_ZN17PasswordEntryView9showErrorEv+0x24>)
{
 802e85c:	4604      	mov	r4, r0
    Unicode::strncpy(promptBuffer, "INCORRECT PASSWORD", PROMPT_SIZE);
 802e85e:	2223      	movs	r2, #35	@ 0x23
 802e860:	f200 40dc 	addw	r0, r0, #1244	@ 0x4dc
 802e864:	f008 ffa3 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 802e868:	4b05      	ldr	r3, [pc, #20]	@ (802e880 <_ZN17PasswordEntryView9showErrorEv+0x28>)
 802e86a:	f8c4 3390 	str.w	r3, [r4, #912]	@ 0x390
    prompt.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0)); // Red
    prompt.invalidate();
 802e86e:	f504 7058 	add.w	r0, r4, #864	@ 0x360
}
 802e872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prompt.invalidate();
 802e876:	f007 bb09 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802e87a:	bf00      	nop
 802e87c:	080417ad 	.word	0x080417ad
 802e880:	ffff0000 	.word	0xffff0000

0802e884 <_ZN17PasswordEntryView10clearErrorEv>:

void PasswordEntryView::clearError()
{
 802e884:	b510      	push	{r4, lr}
    Unicode::strncpy(promptBuffer, "ENTER PASSWORD", PROMPT_SIZE);
 802e886:	4908      	ldr	r1, [pc, #32]	@ (802e8a8 <_ZN17PasswordEntryView10clearErrorEv+0x24>)
{
 802e888:	4604      	mov	r4, r0
    Unicode::strncpy(promptBuffer, "ENTER PASSWORD", PROMPT_SIZE);
 802e88a:	2223      	movs	r2, #35	@ 0x23
 802e88c:	f200 40dc 	addw	r0, r0, #1244	@ 0x4dc
 802e890:	f008 ff8d 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 802e894:	f04f 33ff 	mov.w	r3, #4294967295
 802e898:	f8c4 3390 	str.w	r3, [r4, #912]	@ 0x390
    prompt.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255)); // White
    prompt.invalidate();
 802e89c:	f504 7058 	add.w	r0, r4, #864	@ 0x360
}
 802e8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prompt.invalidate();
 802e8a4:	f007 baf2 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802e8a8:	080417c0 	.word	0x080417c0

0802e8ac <_ZN17PasswordEntryView11setupScreenEv>:
{
 802e8ac:	b510      	push	{r4, lr}
 802e8ae:	4604      	mov	r4, r0
    PasswordEntryViewBase::setupScreen();
 802e8b0:	f7fc f8f0 	bl	802aa94 <_ZN21PasswordEntryViewBase11setupScreenEv>
    resetPasswordEntry();
 802e8b4:	4620      	mov	r0, r4
 802e8b6:	f7ff ff65 	bl	802e784 <_ZN17PasswordEntryView18resetPasswordEntryEv>
    updateBorderHighlight();
 802e8ba:	4620      	mov	r0, r4
 802e8bc:	f7ff ff3c 	bl	802e738 <_ZN17PasswordEntryView21updateBorderHighlightEv>
}
 802e8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clearError();
 802e8c4:	f7ff bfde 	b.w	802e884 <_ZN17PasswordEntryView10clearErrorEv>

0802e8c8 <_ZN17PasswordEntryView16validatePasswordEv>:
{
 802e8c8:	b510      	push	{r4, lr}
 802e8ca:	4604      	mov	r4, r0
    if (checkPassword()) {
 802e8cc:	f7ff ff75 	bl	802e7ba <_ZN17PasswordEntryView13checkPasswordEv>
 802e8d0:	b140      	cbz	r0, 802e8e4 <_ZN17PasswordEntryView16validatePasswordEv+0x1c>
        clearError();
 802e8d2:	4620      	mov	r0, r4
 802e8d4:	f7ff ffd6 	bl	802e884 <_ZN17PasswordEntryView10clearErrorEv>
 802e8d8:	f006 fa18 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 802e8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    void gotoMenuLayer1Screen() { gotoMenuLayer1ScreenNoTransition(); }
 802e8e0:	f7f9 bc08 	b.w	80280f4 <_ZN23FrontendApplicationBase32gotoMenuLayer1ScreenNoTransitionEv>
        attempts++;
 802e8e4:	f894 35c7 	ldrb.w	r3, [r4, #1479]	@ 0x5c7
 802e8e8:	3301      	adds	r3, #1
 802e8ea:	f884 35c7 	strb.w	r3, [r4, #1479]	@ 0x5c7
        showError();
 802e8ee:	4620      	mov	r0, r4
 802e8f0:	f7ff ffb2 	bl	802e858 <_ZN17PasswordEntryView9showErrorEv>
        if (attempts >= 3) {
 802e8f4:	f894 35c7 	ldrb.w	r3, [r4, #1479]	@ 0x5c7
 802e8f8:	2b02      	cmp	r3, #2
 802e8fa:	d905      	bls.n	802e908 <_ZN17PasswordEntryView16validatePasswordEv+0x40>
 802e8fc:	f006 fa06 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 802e900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    void gotoHomeScreen() { gotoScreenTestHomeScreenNoTransition(); } // Replace 'MainScreen' with your actual home screen name
 802e904:	f7f9 bbc6 	b.w	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
            resetPasswordEntry();
 802e908:	4620      	mov	r0, r4
}
 802e90a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            resetPasswordEntry();
 802e90e:	f7ff bf39 	b.w	802e784 <_ZN17PasswordEntryView18resetPasswordEntryEv>

0802e912 <_ZN17PasswordEntryView17handleEnterButtonEv>:
{
 802e912:	b510      	push	{r4, lr}
    if (currentDigit < 3) {
 802e914:	f890 35c2 	ldrb.w	r3, [r0, #1474]	@ 0x5c2
 802e918:	2b02      	cmp	r3, #2
{
 802e91a:	4604      	mov	r4, r0
    if (currentDigit < 3) {
 802e91c:	d806      	bhi.n	802e92c <_ZN17PasswordEntryView17handleEnterButtonEv+0x1a>
        moveToNextDigit();
 802e91e:	f7ff ff41 	bl	802e7a4 <_ZN17PasswordEntryView15moveToNextDigitEv>
 802e922:	1d20      	adds	r0, r4, #4
}
 802e924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e928:	f007 bab0 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
        validatePassword();
 802e92c:	f7ff ffcc 	bl	802e8c8 <_ZN17PasswordEntryView16validatePasswordEv>
 802e930:	e7f7      	b.n	802e922 <_ZN17PasswordEntryView17handleEnterButtonEv+0x10>

0802e932 <_ZN22ScreenLCDtestPresenterD1Ev>:
    virtual ~ScreenLCDtestPresenter() {}
 802e932:	4770      	bx	lr

0802e934 <_ZThn4_N22ScreenLCDtestPresenterD1Ev>:
 802e934:	3804      	subs	r0, #4
 802e936:	4770      	bx	lr

0802e938 <_ZN22ScreenLCDtestPresenter10deactivateEv>:
}

void ScreenLCDtestPresenter::activate()
{

}
 802e938:	4770      	bx	lr

0802e93a <_ZN22ScreenLCDtestPresenterD0Ev>:
 802e93a:	b510      	push	{r4, lr}
 802e93c:	2114      	movs	r1, #20
 802e93e:	4604      	mov	r4, r0
 802e940:	f00d fdd3 	bl	803c4ea <_ZdlPvj>
 802e944:	4620      	mov	r0, r4
 802e946:	bd10      	pop	{r4, pc}

0802e948 <_ZThn4_N22ScreenLCDtestPresenterD0Ev>:
 802e948:	f1a0 0004 	sub.w	r0, r0, #4
 802e94c:	e7f5      	b.n	802e93a <_ZN22ScreenLCDtestPresenterD0Ev>
	...

0802e950 <_ZN22ScreenLCDtestPresenterC1ER17ScreenLCDtestView>:
 802e950:	2200      	movs	r2, #0
 802e952:	6082      	str	r2, [r0, #8]
    : view(v)
 802e954:	4a02      	ldr	r2, [pc, #8]	@ (802e960 <_ZN22ScreenLCDtestPresenterC1ER17ScreenLCDtestView+0x10>)
 802e956:	6002      	str	r2, [r0, #0]
 802e958:	3218      	adds	r2, #24
 802e95a:	6042      	str	r2, [r0, #4]
 802e95c:	60c1      	str	r1, [r0, #12]
}
 802e95e:	4770      	bx	lr
 802e960:	0804301c 	.word	0x0804301c

0802e964 <_ZN17ScreenLCDtestView14tearDownScreenEv>:
}

void ScreenLCDtestView::tearDownScreen()
{
    ScreenLCDtestViewBase::tearDownScreen();
}
 802e964:	4770      	bx	lr
	...

0802e968 <_ZN17ScreenLCDtestViewD1Ev>:

class ScreenLCDtestView : public ScreenLCDtestViewBase
{
public:
    ScreenLCDtestView();
    virtual ~ScreenLCDtestView() {}
 802e968:	b510      	push	{r4, lr}
 802e96a:	4b03      	ldr	r3, [pc, #12]	@ (802e978 <_ZN17ScreenLCDtestViewD1Ev+0x10>)
 802e96c:	6003      	str	r3, [r0, #0]
 802e96e:	4604      	mov	r4, r0
 802e970:	f7fc fbf7 	bl	802b162 <_ZN21ScreenLCDtestViewBaseD1Ev>
 802e974:	4620      	mov	r0, r4
 802e976:	bd10      	pop	{r4, pc}
 802e978:	08043048 	.word	0x08043048

0802e97c <_ZN17ScreenLCDtestViewD0Ev>:
 802e97c:	b510      	push	{r4, lr}
 802e97e:	4604      	mov	r4, r0
 802e980:	f7ff fff2 	bl	802e968 <_ZN17ScreenLCDtestViewD1Ev>
 802e984:	4620      	mov	r0, r4
 802e986:	f44f 713b 	mov.w	r1, #748	@ 0x2ec
 802e98a:	f00d fdae 	bl	803c4ea <_ZdlPvj>
 802e98e:	4620      	mov	r0, r4
 802e990:	bd10      	pop	{r4, pc}
	...

0802e994 <_ZN17ScreenLCDtestViewC1Ev>:
ScreenLCDtestView::ScreenLCDtestView() :
 802e994:	b510      	push	{r4, lr}
 802e996:	4604      	mov	r4, r0
		m_buttonController(static_cast<TouchGfxInputController*>(HAL::getInstance()->getButtonController() ))
 802e998:	f7fc fbfa 	bl	802b190 <_ZN21ScreenLCDtestViewBaseC1Ev>
 802e99c:	4b10      	ldr	r3, [pc, #64]	@ (802e9e0 <_ZN17ScreenLCDtestViewC1Ev+0x4c>)
 802e99e:	6023      	str	r3, [r4, #0]
using namespace touchgfx;

class ButtonHandler {
public:
  ButtonHandler(uint16_t delay, Button* button0, Button* button1, Button* button2, Button* button3):
    delayInTicks(delay), buttons{button0, button1, button2, button3}{}
 802e9a0:	230a      	movs	r3, #10
 802e9a2:	f8a4 32cc 	strh.w	r3, [r4, #716]	@ 0x2cc
		buttonHandlerObj(10, static_cast<Button*>(&button0),
 802e9a6:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 802e9aa:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0
 802e9ae:	f504 73a2 	add.w	r3, r4, #324	@ 0x144
 802e9b2:	f8c4 32d4 	str.w	r3, [r4, #724]	@ 0x2d4
 802e9b6:	f504 73bc 	add.w	r3, r4, #376	@ 0x178
 802e9ba:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
 802e9be:	f504 73d6 	add.w	r3, r4, #428	@ 0x1ac
 802e9c2:	f8c4 32dc 	str.w	r3, [r4, #732]	@ 0x2dc
 802e9c6:	2300      	movs	r3, #0
 802e9c8:	f8c4 32e0 	str.w	r3, [r4, #736]	@ 0x2e0
 802e9cc:	f884 32e4 	strb.w	r3, [r4, #740]	@ 0x2e4
        return buttonController;
 802e9d0:	4b04      	ldr	r3, [pc, #16]	@ (802e9e4 <_ZN17ScreenLCDtestViewC1Ev+0x50>)
 802e9d2:	681b      	ldr	r3, [r3, #0]
		m_buttonController(static_cast<TouchGfxInputController*>(HAL::getInstance()->getButtonController() ))
 802e9d4:	695b      	ldr	r3, [r3, #20]
 802e9d6:	f8c4 32e8 	str.w	r3, [r4, #744]	@ 0x2e8
}
 802e9da:	4620      	mov	r0, r4
 802e9dc:	bd10      	pop	{r4, pc}
 802e9de:	bf00      	nop
 802e9e0:	08043048 	.word	0x08043048
 802e9e4:	2000b8e0 	.word	0x2000b8e0

0802e9e8 <_ZN17ScreenLCDtestView11setupScreenEv>:
    ScreenLCDtestViewBase::setupScreen();
 802e9e8:	f7fc bbbc 	b.w	802b164 <_ZN21ScreenLCDtestViewBase11setupScreenEv>

0802e9ec <_ZN17ScreenLCDtestView13buttonHandlerEh>:

/*
 * Virtual Action Handlers
 */
void ScreenLCDtestView::buttonHandler( uint8_t value ) {
 802e9ec:	b538      	push	{r3, r4, r5, lr}
 802e9ee:	460c      	mov	r4, r1
 802e9f0:	4605      	mov	r5, r0
  buttonHandlerObj.handleKey(value);
 802e9f2:	f500 7033 	add.w	r0, r0, #716	@ 0x2cc
 802e9f6:	f7e7 fe87 	bl	8016708 <_ZN13ButtonHandler9handleKeyEh>

  switch (value)
 802e9fa:	2c01      	cmp	r4, #1
 802e9fc:	d010      	beq.n	802ea20 <_ZN17ScreenLCDtestView13buttonHandlerEh+0x34>
 802e9fe:	2c02      	cmp	r4, #2
 802ea00:	d015      	beq.n	802ea2e <_ZN17ScreenLCDtestView13buttonHandlerEh+0x42>
 802ea02:	b944      	cbnz	r4, 802ea16 <_ZN17ScreenLCDtestView13buttonHandlerEh+0x2a>
      {
    	  case 0:
    		  //Button 0: Goto home screen
    		  if(LCD_brightness == 0)
 802ea04:	4b0d      	ldr	r3, [pc, #52]	@ (802ea3c <_ZN17ScreenLCDtestView13buttonHandlerEh+0x50>)
 802ea06:	781a      	ldrb	r2, [r3, #0]
 802ea08:	b90a      	cbnz	r2, 802ea0e <_ZN17ScreenLCDtestView13buttonHandlerEh+0x22>
    			  LCD_brightness = 1;
 802ea0a:	2201      	movs	r2, #1
 802ea0c:	701a      	strb	r2, [r3, #0]
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802ea0e:	f006 f97d 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    		  application().gotoScreenTestHomeScreenNoTransition();
 802ea12:	f7f9 fb3f 	bl	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
 802ea16:	1d28      	adds	r0, r5, #4
    	  case 3:
    		  break;
      }

  this->invalidate();
}
 802ea18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ea1c:	f007 ba36 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
    		  if(LCD_brightness < 100)
 802ea20:	4a06      	ldr	r2, [pc, #24]	@ (802ea3c <_ZN17ScreenLCDtestView13buttonHandlerEh+0x50>)
 802ea22:	7813      	ldrb	r3, [r2, #0]
 802ea24:	2b63      	cmp	r3, #99	@ 0x63
 802ea26:	d8f6      	bhi.n	802ea16 <_ZN17ScreenLCDtestView13buttonHandlerEh+0x2a>
    			  LCD_brightness += 1;
 802ea28:	3301      	adds	r3, #1
    			  LCD_brightness -= 1;
 802ea2a:	7013      	strb	r3, [r2, #0]
 802ea2c:	e7f3      	b.n	802ea16 <_ZN17ScreenLCDtestView13buttonHandlerEh+0x2a>
    		  if(LCD_brightness > 0)
 802ea2e:	4a03      	ldr	r2, [pc, #12]	@ (802ea3c <_ZN17ScreenLCDtestView13buttonHandlerEh+0x50>)
 802ea30:	7813      	ldrb	r3, [r2, #0]
 802ea32:	2b00      	cmp	r3, #0
 802ea34:	d0ef      	beq.n	802ea16 <_ZN17ScreenLCDtestView13buttonHandlerEh+0x2a>
    			  LCD_brightness -= 1;
 802ea36:	3b01      	subs	r3, #1
 802ea38:	e7f7      	b.n	802ea2a <_ZN17ScreenLCDtestView13buttonHandlerEh+0x3e>
 802ea3a:	bf00      	nop
 802ea3c:	20000430 	.word	0x20000430

0802ea40 <_ZN17ScreenLCDtestView15handleTickEventEv>:

void ScreenLCDtestView::handleTickEvent()
{
 802ea40:	b538      	push	{r3, r4, r5, lr}
	//LCD brightness inc/dec (button held)
	if(m_buttonController->isButtonHeld(1))
 802ea42:	2101      	movs	r1, #1
{
 802ea44:	4604      	mov	r4, r0
	if(m_buttonController->isButtonHeld(1))
 802ea46:	f8d0 02e8 	ldr.w	r0, [r0, #744]	@ 0x2e8
 802ea4a:	4d10      	ldr	r5, [pc, #64]	@ (802ea8c <_ZN17ScreenLCDtestView15handleTickEventEv+0x4c>)
 802ea4c:	f7e8 f8c3 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802ea50:	b180      	cbz	r0, 802ea74 <_ZN17ScreenLCDtestView15handleTickEventEv+0x34>
	{
		//Increase brightness
		if(LCD_brightness < 100)
 802ea52:	782b      	ldrb	r3, [r5, #0]
 802ea54:	2b63      	cmp	r3, #99	@ 0x63
 802ea56:	d801      	bhi.n	802ea5c <_ZN17ScreenLCDtestView15handleTickEventEv+0x1c>
			++LCD_brightness;
 802ea58:	3301      	adds	r3, #1
	}
	else if(m_buttonController->isButtonHeld(2))
	{
		//Decrease brightness
		if(LCD_brightness > 0)
			--LCD_brightness;
 802ea5a:	702b      	strb	r3, [r5, #0]
	}

	Unicode::snprintf(textValueBrightnessBuffer,TEXTVALUEBRIGHTNESS_SIZE, "%d", LCD_brightness);
 802ea5c:	782b      	ldrb	r3, [r5, #0]
 802ea5e:	4a0c      	ldr	r2, [pc, #48]	@ (802ea90 <_ZN17ScreenLCDtestView15handleTickEventEv+0x50>)
 802ea60:	f504 702e 	add.w	r0, r4, #696	@ 0x2b8
 802ea64:	210a      	movs	r1, #10
 802ea66:	f009 fa03 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802ea6a:	1d20      	adds	r0, r4, #4

	this->invalidate();
}
 802ea6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ea70:	f007 ba0c 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
	else if(m_buttonController->isButtonHeld(2))
 802ea74:	f8d4 02e8 	ldr.w	r0, [r4, #744]	@ 0x2e8
 802ea78:	2102      	movs	r1, #2
 802ea7a:	f7e8 f8ac 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802ea7e:	2800      	cmp	r0, #0
 802ea80:	d0ec      	beq.n	802ea5c <_ZN17ScreenLCDtestView15handleTickEventEv+0x1c>
		if(LCD_brightness > 0)
 802ea82:	782b      	ldrb	r3, [r5, #0]
 802ea84:	2b00      	cmp	r3, #0
 802ea86:	d0e9      	beq.n	802ea5c <_ZN17ScreenLCDtestView15handleTickEventEv+0x1c>
			--LCD_brightness;
 802ea88:	3b01      	subs	r3, #1
 802ea8a:	e7e6      	b.n	802ea5a <_ZN17ScreenLCDtestView15handleTickEventEv+0x1a>
 802ea8c:	20000430 	.word	0x20000430
 802ea90:	080410f9 	.word	0x080410f9

0802ea94 <_ZN26ScreenOutputsTestPresenterD1Ev>:
    virtual ~ScreenOutputsTestPresenter() {}
 802ea94:	4770      	bx	lr

0802ea96 <_ZThn4_N26ScreenOutputsTestPresenterD1Ev>:
 802ea96:	3804      	subs	r0, #4
 802ea98:	4770      	bx	lr

0802ea9a <_ZN26ScreenOutputsTestPresenter10deactivateEv>:
}

void ScreenOutputsTestPresenter::activate()
{

}
 802ea9a:	4770      	bx	lr

0802ea9c <_ZN26ScreenOutputsTestPresenterD0Ev>:
 802ea9c:	b510      	push	{r4, lr}
 802ea9e:	2114      	movs	r1, #20
 802eaa0:	4604      	mov	r4, r0
 802eaa2:	f00d fd22 	bl	803c4ea <_ZdlPvj>
 802eaa6:	4620      	mov	r0, r4
 802eaa8:	bd10      	pop	{r4, pc}

0802eaaa <_ZThn4_N26ScreenOutputsTestPresenterD0Ev>:
 802eaaa:	f1a0 0004 	sub.w	r0, r0, #4
 802eaae:	e7f5      	b.n	802ea9c <_ZN26ScreenOutputsTestPresenterD0Ev>

0802eab0 <_ZN26ScreenOutputsTestPresenterC1ER21ScreenOutputsTestView>:
 802eab0:	2200      	movs	r2, #0
 802eab2:	6082      	str	r2, [r0, #8]
    : view(v)
 802eab4:	4a02      	ldr	r2, [pc, #8]	@ (802eac0 <_ZN26ScreenOutputsTestPresenterC1ER21ScreenOutputsTestView+0x10>)
 802eab6:	6002      	str	r2, [r0, #0]
 802eab8:	3218      	adds	r2, #24
 802eaba:	6042      	str	r2, [r0, #4]
 802eabc:	60c1      	str	r1, [r0, #12]
}
 802eabe:	4770      	bx	lr
 802eac0:	08043080 	.word	0x08043080

0802eac4 <_ZN21ScreenOutputsTestView14tearDownScreenEv>:
}

void ScreenOutputsTestView::tearDownScreen()
{
    ScreenOutputsTestViewBase::tearDownScreen();
}
 802eac4:	4770      	bx	lr
	...

0802eac8 <_ZN21ScreenOutputsTestViewD1Ev>:

class ScreenOutputsTestView : public ScreenOutputsTestViewBase
{
public:
    ScreenOutputsTestView();
    virtual ~ScreenOutputsTestView() {}
 802eac8:	b510      	push	{r4, lr}
 802eaca:	4b03      	ldr	r3, [pc, #12]	@ (802ead8 <_ZN21ScreenOutputsTestViewD1Ev+0x10>)
 802eacc:	6003      	str	r3, [r0, #0]
 802eace:	4604      	mov	r4, r0
 802ead0:	f7fc fceb 	bl	802b4aa <_ZN25ScreenOutputsTestViewBaseD1Ev>
 802ead4:	4620      	mov	r0, r4
 802ead6:	bd10      	pop	{r4, pc}
 802ead8:	080430ac 	.word	0x080430ac

0802eadc <_ZN21ScreenOutputsTestViewD0Ev>:
 802eadc:	b510      	push	{r4, lr}
 802eade:	4604      	mov	r4, r0
 802eae0:	f7ff fff2 	bl	802eac8 <_ZN21ScreenOutputsTestViewD1Ev>
 802eae4:	4620      	mov	r0, r4
 802eae6:	f44f 7147 	mov.w	r1, #796	@ 0x31c
 802eaea:	f00d fcfe 	bl	803c4ea <_ZdlPvj>
 802eaee:	4620      	mov	r0, r4
 802eaf0:	bd10      	pop	{r4, pc}
	...

0802eaf4 <_ZN21ScreenOutputsTestViewC1Ev>:
ScreenOutputsTestView::ScreenOutputsTestView() :
 802eaf4:	b510      	push	{r4, lr}
 802eaf6:	4604      	mov	r4, r0
						 static_cast<Button*>(&button3)) {
 802eaf8:	f7fc fcee 	bl	802b4d8 <_ZN25ScreenOutputsTestViewBaseC1Ev>
 802eafc:	4b0d      	ldr	r3, [pc, #52]	@ (802eb34 <_ZN21ScreenOutputsTestViewC1Ev+0x40>)
 802eafe:	6023      	str	r3, [r4, #0]
 802eb00:	230a      	movs	r3, #10
 802eb02:	f8a4 3300 	strh.w	r3, [r4, #768]	@ 0x300
	buttonHandlerObj(10, static_cast<Button*>(&button0),
 802eb06:	f104 0398 	add.w	r3, r4, #152	@ 0x98
 802eb0a:	f8c4 3304 	str.w	r3, [r4, #772]	@ 0x304
 802eb0e:	f504 739a 	add.w	r3, r4, #308	@ 0x134
 802eb12:	f8c4 3308 	str.w	r3, [r4, #776]	@ 0x308
 802eb16:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 802eb1a:	f8c4 330c 	str.w	r3, [r4, #780]	@ 0x30c
 802eb1e:	f104 03cc 	add.w	r3, r4, #204	@ 0xcc
 802eb22:	f8c4 3310 	str.w	r3, [r4, #784]	@ 0x310
 802eb26:	2300      	movs	r3, #0
 802eb28:	f8c4 3314 	str.w	r3, [r4, #788]	@ 0x314
 802eb2c:	f884 3318 	strb.w	r3, [r4, #792]	@ 0x318
}
 802eb30:	4620      	mov	r0, r4
 802eb32:	bd10      	pop	{r4, pc}
 802eb34:	080430ac 	.word	0x080430ac

0802eb38 <_ZN21ScreenOutputsTestView11setupScreenEv>:
    ScreenOutputsTestViewBase::setupScreen();
 802eb38:	f7fc bcb8 	b.w	802b4ac <_ZN25ScreenOutputsTestViewBase11setupScreenEv>

0802eb3c <_ZN21ScreenOutputsTestView13buttonHandlerEh>:


/*
 * Virtual Action Handlers
 */
void ScreenOutputsTestView::buttonHandler( uint8_t value ) {
 802eb3c:	b538      	push	{r3, r4, r5, lr}
 802eb3e:	460c      	mov	r4, r1
 802eb40:	4605      	mov	r5, r0
  buttonHandlerObj.handleKey(value);
 802eb42:	f500 7040 	add.w	r0, r0, #768	@ 0x300
 802eb46:	f7e7 fddf 	bl	8016708 <_ZN13ButtonHandler9handleKeyEh>

  switch (value)
 802eb4a:	2c01      	cmp	r4, #1
 802eb4c:	d00b      	beq.n	802eb66 <_ZN21ScreenOutputsTestView13buttonHandlerEh+0x2a>
 802eb4e:	2c02      	cmp	r4, #2
 802eb50:	d00f      	beq.n	802eb72 <_ZN21ScreenOutputsTestView13buttonHandlerEh+0x36>
 802eb52:	b91c      	cbnz	r4, 802eb5c <_ZN21ScreenOutputsTestView13buttonHandlerEh+0x20>
    

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 802eb54:	f006 f8da 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
  	  {
      case 0:
    	  //button 0: Exit
    	  application().gotoScreenTestHomeScreenNoTransition();
 802eb58:	f7f9 fa9c 	bl	8028094 <_ZN23FrontendApplicationBase36gotoScreenTestHomeScreenNoTransitionEv>
 802eb5c:	1d28      	adds	r0, r5, #4
    	  break;
    }

  this->invalidate();

}
 802eb5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802eb62:	f007 b993 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
    	  Output1_control = (1 - Output1_control);
 802eb66:	4a04      	ldr	r2, [pc, #16]	@ (802eb78 <_ZN21ScreenOutputsTestView13buttonHandlerEh+0x3c>)
    	  Output2_control = (1 - Output2_control);
 802eb68:	7813      	ldrb	r3, [r2, #0]
 802eb6a:	f083 0301 	eor.w	r3, r3, #1
 802eb6e:	7013      	strb	r3, [r2, #0]
    	  break;
 802eb70:	e7f4      	b.n	802eb5c <_ZN21ScreenOutputsTestView13buttonHandlerEh+0x20>
    	  Output2_control = (1 - Output2_control);
 802eb72:	4a02      	ldr	r2, [pc, #8]	@ (802eb7c <_ZN21ScreenOutputsTestView13buttonHandlerEh+0x40>)
 802eb74:	e7f8      	b.n	802eb68 <_ZN21ScreenOutputsTestView13buttonHandlerEh+0x2c>
 802eb76:	bf00      	nop
 802eb78:	20001eb5 	.word	0x20001eb5
 802eb7c:	20001eb4 	.word	0x20001eb4

0802eb80 <_ZN21ScreenOutputsTestView15handleTickEventEv>:

void ScreenOutputsTestView::handleTickEvent()
{
 802eb80:	b538      	push	{r3, r4, r5, lr}
	//Output 1 status
	Unicode::snprintf(textOutput1Buffer,TEXTOUTPUT1_SIZE, "%d", Output1_control);
 802eb82:	4d0b      	ldr	r5, [pc, #44]	@ (802ebb0 <_ZN21ScreenOutputsTestView15handleTickEventEv+0x30>)
 802eb84:	4b0b      	ldr	r3, [pc, #44]	@ (802ebb4 <_ZN21ScreenOutputsTestView15handleTickEventEv+0x34>)
{
 802eb86:	4604      	mov	r4, r0
	Unicode::snprintf(textOutput1Buffer,TEXTOUTPUT1_SIZE, "%d", Output1_control);
 802eb88:	462a      	mov	r2, r5
 802eb8a:	781b      	ldrb	r3, [r3, #0]
 802eb8c:	210a      	movs	r1, #10
 802eb8e:	f500 703b 	add.w	r0, r0, #748	@ 0x2ec
 802eb92:	f009 f96d 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>

	//Output 2 status
	Unicode::snprintf(textOutput2Buffer,TEXTOUTPUT2_SIZE, "%d", Output2_control);
 802eb96:	4b08      	ldr	r3, [pc, #32]	@ (802ebb8 <_ZN21ScreenOutputsTestView15handleTickEventEv+0x38>)
 802eb98:	462a      	mov	r2, r5
 802eb9a:	781b      	ldrb	r3, [r3, #0]
 802eb9c:	f504 7036 	add.w	r0, r4, #728	@ 0x2d8
 802eba0:	210a      	movs	r1, #10
 802eba2:	f009 f965 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 802eba6:	1d20      	adds	r0, r4, #4

	this->invalidate();
}
 802eba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ebac:	f007 b96e 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802ebb0:	080410f9 	.word	0x080410f9
 802ebb4:	20001eb5 	.word	0x20001eb5
 802ebb8:	20001eb4 	.word	0x20001eb4

0802ebbc <_ZN23ScreenTestHomePresenterD1Ev>:
    virtual ~ScreenTestHomePresenter() {}
 802ebbc:	4770      	bx	lr

0802ebbe <_ZThn4_N23ScreenTestHomePresenterD1Ev>:
 802ebbe:	3804      	subs	r0, #4
 802ebc0:	4770      	bx	lr

0802ebc2 <_ZN23ScreenTestHomePresenter10deactivateEv>:
}

void ScreenTestHomePresenter::activate()
{

}
 802ebc2:	4770      	bx	lr

0802ebc4 <_ZN23ScreenTestHomePresenterD0Ev>:
 802ebc4:	b510      	push	{r4, lr}
 802ebc6:	2114      	movs	r1, #20
 802ebc8:	4604      	mov	r4, r0
 802ebca:	f00d fc8e 	bl	803c4ea <_ZdlPvj>
 802ebce:	4620      	mov	r0, r4
 802ebd0:	bd10      	pop	{r4, pc}

0802ebd2 <_ZThn4_N23ScreenTestHomePresenterD0Ev>:
 802ebd2:	f1a0 0004 	sub.w	r0, r0, #4
 802ebd6:	e7f5      	b.n	802ebc4 <_ZN23ScreenTestHomePresenterD0Ev>

0802ebd8 <_ZN23ScreenTestHomePresenterC1ER18ScreenTestHomeView>:
 802ebd8:	2200      	movs	r2, #0
 802ebda:	6082      	str	r2, [r0, #8]
    : view(v)
 802ebdc:	4a02      	ldr	r2, [pc, #8]	@ (802ebe8 <_ZN23ScreenTestHomePresenterC1ER18ScreenTestHomeView+0x10>)
 802ebde:	6002      	str	r2, [r0, #0]
 802ebe0:	3218      	adds	r2, #24
 802ebe2:	6042      	str	r2, [r0, #4]
 802ebe4:	60c1      	str	r1, [r0, #12]
}
 802ebe6:	4770      	bx	lr
 802ebe8:	080430e4 	.word	0x080430e4

0802ebec <_ZN18ScreenTestHomeView14tearDownScreenEv>:


void ScreenTestHomeView::tearDownScreen()
{
    ScreenTestHomeViewBase::tearDownScreen();
}
 802ebec:	4770      	bx	lr
	...

0802ebf0 <_ZN18ScreenTestHomeViewD1Ev>:

class ScreenTestHomeView : public ScreenTestHomeViewBase
{
public:
    ScreenTestHomeView();
    virtual ~ScreenTestHomeView() {}
 802ebf0:	b510      	push	{r4, lr}
 802ebf2:	4b03      	ldr	r3, [pc, #12]	@ (802ec00 <_ZN18ScreenTestHomeViewD1Ev+0x10>)
 802ebf4:	6003      	str	r3, [r0, #0]
 802ebf6:	4604      	mov	r4, r0
 802ebf8:	f7fc fe3c 	bl	802b874 <_ZN22ScreenTestHomeViewBaseD1Ev>
 802ebfc:	4620      	mov	r0, r4
 802ebfe:	bd10      	pop	{r4, pc}
 802ec00:	08043110 	.word	0x08043110

0802ec04 <_ZN18ScreenTestHomeViewD0Ev>:
 802ec04:	b510      	push	{r4, lr}
 802ec06:	4604      	mov	r4, r0
 802ec08:	f7ff fff2 	bl	802ebf0 <_ZN18ScreenTestHomeViewD1Ev>
 802ec0c:	4620      	mov	r0, r4
 802ec0e:	f640 3114 	movw	r1, #2836	@ 0xb14
 802ec12:	f00d fc6a 	bl	803c4ea <_ZdlPvj>
 802ec16:	4620      	mov	r0, r4
 802ec18:	bd10      	pop	{r4, pc}
	...

0802ec1c <_ZN18ScreenTestHomeView26navigateBasedOnVehicleTypeEv>:

void ScreenTestHomeView::navigateBasedOnVehicleType()
{
    // Check vehicle type from configuration
    // 0 = "Truck", 1 = "Truck/Trailer" (based on TypeModeOptions array in Model.cpp)
    if (S35_config[TOUCHGFX_VEHICLETYPE] == 1) {
 802ec1c:	4a09      	ldr	r2, [pc, #36]	@ (802ec44 <_ZN18ScreenTestHomeView26navigateBasedOnVehicleTypeEv+0x28>)
{
 802ec1e:	b508      	push	{r3, lr}
    if (S35_config[TOUCHGFX_VEHICLETYPE] == 1) {
 802ec20:	8812      	ldrh	r2, [r2, #0]
 802ec22:	4b09      	ldr	r3, [pc, #36]	@ (802ec48 <_ZN18ScreenTestHomeView26navigateBasedOnVehicleTypeEv+0x2c>)
 802ec24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802ec28:	2b01      	cmp	r3, #1
 802ec2a:	d105      	bne.n	802ec38 <_ZN18ScreenTestHomeView26navigateBasedOnVehicleTypeEv+0x1c>
 802ec2c:	f006 f86e 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        application().gotoScreenTrailerScreenNoTransition();
    } else {
        // Truck only mode - go to Diagnostic Page
        application().gotoDiagnosticScreenNoTransition();
    }
}
 802ec30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreenTrailerScreenNoTransition();
 802ec34:	f7f9 ba1e 	b.w	8028074 <_ZN23FrontendApplicationBase35gotoScreenTrailerScreenNoTransitionEv>
 802ec38:	f006 f868 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
}
 802ec3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoDiagnosticScreenNoTransition();
 802ec40:	f7f9 ba88 	b.w	8028154 <_ZN23FrontendApplicationBase32gotoDiagnosticScreenNoTransitionEv>
 802ec44:	08041e68 	.word	0x08041e68
 802ec48:	20001e72 	.word	0x20001e72

0802ec4c <_ZN18ScreenTestHomeViewC1Ev>:
ScreenTestHomeView::ScreenTestHomeView() :
 802ec4c:	b510      	push	{r4, lr}
 802ec4e:	4604      	mov	r4, r0
	isButtonHeld(false)
 802ec50:	f7fc fe52 	bl	802b8f8 <_ZN22ScreenTestHomeViewBaseC1Ev>
 802ec54:	4b14      	ldr	r3, [pc, #80]	@ (802eca8 <_ZN18ScreenTestHomeViewC1Ev+0x5c>)
 802ec56:	6023      	str	r3, [r4, #0]
 802ec58:	230a      	movs	r3, #10
 802ec5a:	f8a4 3ae4 	strh.w	r3, [r4, #2788]	@ 0xae4
    buttonHandlerObj(10, static_cast<Button*>(&button0),
 802ec5e:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 802ec62:	f8c4 3ae8 	str.w	r3, [r4, #2792]	@ 0xae8
 802ec66:	4a11      	ldr	r2, [pc, #68]	@ (802ecac <_ZN18ScreenTestHomeViewC1Ev+0x60>)
 802ec68:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 802ec6c:	f8c4 3aec 	str.w	r3, [r4, #2796]	@ 0xaec
 802ec70:	f504 73b8 	add.w	r3, r4, #368	@ 0x170
 802ec74:	6812      	ldr	r2, [r2, #0]
 802ec76:	f8c4 3af0 	str.w	r3, [r4, #2800]	@ 0xaf0
 802ec7a:	f504 739e 	add.w	r3, r4, #316	@ 0x13c
 802ec7e:	f8c4 3af4 	str.w	r3, [r4, #2804]	@ 0xaf4
 802ec82:	2300      	movs	r3, #0
    m_buttonController(static_cast<TouchGfxInputController*>(HAL::getInstance()->getButtonController())),
 802ec84:	6952      	ldr	r2, [r2, #20]
    lastButtonPressed(0),
 802ec86:	f8a4 3b0c 	strh.w	r3, [r4, #2828]	@ 0xb0c
 802ec8a:	f8c4 3af8 	str.w	r3, [r4, #2808]	@ 0xaf8
 802ec8e:	f884 3afc 	strb.w	r3, [r4, #2812]	@ 0xafc
    m_buttonController(static_cast<TouchGfxInputController*>(HAL::getInstance()->getButtonController())),
 802ec92:	f8c4 2b00 	str.w	r2, [r4, #2816]	@ 0xb00
    showButtonFeedback(false),
 802ec96:	f884 3b05 	strb.w	r3, [r4, #2821]	@ 0xb05
    buttonFeedbackStartTime(0),
 802ec9a:	f8c4 3b08 	str.w	r3, [r4, #2824]	@ 0xb08
	isButtonHeld(false)
 802ec9e:	f884 3b0e 	strb.w	r3, [r4, #2830]	@ 0xb0e
}
 802eca2:	4620      	mov	r0, r4
 802eca4:	bd10      	pop	{r4, pc}
 802eca6:	bf00      	nop
 802eca8:	08043110 	.word	0x08043110
 802ecac:	2000b8e0 	.word	0x2000b8e0

0802ecb0 <_ZN18ScreenTestHomeView22initializeLatchDisplayEv>:
{
 802ecb0:	b510      	push	{r4, lr}
    const char* latchText = (Latchtest == 1) ? "CLOSE" : "OPEN";
 802ecb2:	4b08      	ldr	r3, [pc, #32]	@ (802ecd4 <_ZN18ScreenTestHomeView22initializeLatchDisplayEv+0x24>)
    Unicode::strncpy(LATCHBuffer, latchText, LATCH_SIZE - 1);
 802ecb4:	4908      	ldr	r1, [pc, #32]	@ (802ecd8 <_ZN18ScreenTestHomeView22initializeLatchDisplayEv+0x28>)
{
 802ecb6:	4604      	mov	r4, r0
    const char* latchText = (Latchtest == 1) ? "CLOSE" : "OPEN";
 802ecb8:	7818      	ldrb	r0, [r3, #0]
    Unicode::strncpy(LATCHBuffer, latchText, LATCH_SIZE - 1);
 802ecba:	4b08      	ldr	r3, [pc, #32]	@ (802ecdc <_ZN18ScreenTestHomeView22initializeLatchDisplayEv+0x2c>)
 802ecbc:	2209      	movs	r2, #9
 802ecbe:	2801      	cmp	r0, #1
 802ecc0:	bf08      	it	eq
 802ecc2:	4619      	moveq	r1, r3
 802ecc4:	f604 00cc 	addw	r0, r4, #2252	@ 0x8cc
 802ecc8:	f008 fd71 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    LATCHBuffer[LATCH_SIZE - 1] = 0;
 802eccc:	2300      	movs	r3, #0
 802ecce:	f8a4 38de 	strh.w	r3, [r4, #2270]	@ 0x8de
}
 802ecd2:	bd10      	pop	{r4, pc}
 802ecd4:	20001d9e 	.word	0x20001d9e
 802ecd8:	080410de 	.word	0x080410de
 802ecdc:	080417cf 	.word	0x080417cf

0802ece0 <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv>:
{
 802ece0:	b570      	push	{r4, r5, r6, lr}
 802ece2:	4604      	mov	r4, r0
 802ece4:	f006 f812 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
    Model& getModel() { return model; }
 802ece8:	f8d0 5158 	ldr.w	r5, [r0, #344]	@ 0x158
    bool currentAlarmState = model.isAlarmActive();
 802ecec:	4628      	mov	r0, r5
 802ecee:	f7ff f959 	bl	802dfa4 <_ZNK5Model13isAlarmActiveEv>
    if(currentAlarmState)
 802ecf2:	b350      	cbz	r0, 802ed4a <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv+0x6a>
        visible = vis;
 802ecf4:	2301      	movs	r3, #1
 802ecf6:	f884 37f5 	strb.w	r3, [r4, #2037]	@ 0x7f5
 802ecfa:	f884 3771 	strb.w	r3, [r4, #1905]	@ 0x771
        const char* title = model.getAlarmTitle();
 802ecfe:	4628      	mov	r0, r5
 802ed00:	f7ff f954 	bl	802dfac <_ZNK5Model13getAlarmTitleEv>
 802ed04:	4606      	mov	r6, r0
        const char* description = model.getAlarmDescription();
 802ed06:	4628      	mov	r0, r5
 802ed08:	f7ff f960 	bl	802dfcc <_ZNK5Model19getAlarmDescriptionEv>
 802ed0c:	4605      	mov	r5, r0
        if (title && strlen(title) > 0) {
 802ed0e:	b156      	cbz	r6, 802ed26 <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv+0x46>
 802ed10:	7833      	ldrb	r3, [r6, #0]
 802ed12:	b143      	cbz	r3, 802ed26 <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv+0x46>
            Unicode::strncpy(AlarmtitletextBuffer, title, ALARMTITLETEXT_SIZE - 1);
 802ed14:	222c      	movs	r2, #44	@ 0x2c
 802ed16:	4631      	mov	r1, r6
 802ed18:	f604 105c 	addw	r0, r4, #2396	@ 0x95c
 802ed1c:	f008 fd47 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            AlarmtitletextBuffer[ALARMTITLETEXT_SIZE - 1] = 0;
 802ed20:	2300      	movs	r3, #0
 802ed22:	f8a4 39b4 	strh.w	r3, [r4, #2484]	@ 0x9b4
        if (description && strlen(description) > 0) {
 802ed26:	b155      	cbz	r5, 802ed3e <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv+0x5e>
 802ed28:	782b      	ldrb	r3, [r5, #0]
 802ed2a:	b143      	cbz	r3, 802ed3e <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv+0x5e>
            Unicode::strncpy(AlarmdesctextBuffer, description, ALARMDESCTEXT_SIZE - 1);
 802ed2c:	2295      	movs	r2, #149	@ 0x95
 802ed2e:	4629      	mov	r1, r5
 802ed30:	f604 10b6 	addw	r0, r4, #2486	@ 0x9b6
 802ed34:	f008 fd3b 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            AlarmdesctextBuffer[ALARMDESCTEXT_SIZE - 1] = 0;
 802ed38:	2300      	movs	r3, #0
 802ed3a:	f8a4 3ae0 	strh.w	r3, [r4, #2784]	@ 0xae0
 802ed3e:	2301      	movs	r3, #1
 802ed40:	f884 3829 	strb.w	r3, [r4, #2089]	@ 0x829
 802ed44:	f884 3875 	strb.w	r3, [r4, #2165]	@ 0x875
}
 802ed48:	bd70      	pop	{r4, r5, r6, pc}
 802ed4a:	f884 07f5 	strb.w	r0, [r4, #2037]	@ 0x7f5
 802ed4e:	f884 0829 	strb.w	r0, [r4, #2089]	@ 0x829
 802ed52:	f884 0875 	strb.w	r0, [r4, #2165]	@ 0x875
 802ed56:	f884 0771 	strb.w	r0, [r4, #1905]	@ 0x771
 802ed5a:	e7f5      	b.n	802ed48 <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv+0x68>

0802ed5c <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model>:
{
 802ed5c:	b570      	push	{r4, r5, r6, lr}
 802ed5e:	4604      	mov	r4, r0
    if(model.isPTOValid())
 802ed60:	4608      	mov	r0, r1
{
 802ed62:	460d      	mov	r5, r1
    if(model.isPTOValid())
 802ed64:	f7ff fa29 	bl	802e1ba <_ZNK5Model10isPTOValidEv>
 802ed68:	f604 1612 	addw	r6, r4, #2322	@ 0x912
 802ed6c:	b1b8      	cbz	r0, 802ed9e <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model+0x42>
        if(model.isPTOActive())
 802ed6e:	4628      	mov	r0, r5
 802ed70:	f7ff fa20 	bl	802e1b4 <_ZNK5Model11isPTOActiveEv>
 802ed74:	2301      	movs	r3, #1
 802ed76:	b158      	cbz	r0, 802ed90 <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model+0x34>
 802ed78:	f884 3719 	strb.w	r3, [r4, #1817]	@ 0x719
            Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ON", PTOSTATUSTXT_SIZE);
 802ed7c:	490c      	ldr	r1, [pc, #48]	@ (802edb0 <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model+0x54>)
 802ed7e:	2300      	movs	r3, #0
 802ed80:	f884 3745 	strb.w	r3, [r4, #1861]	@ 0x745
 802ed84:	2210      	movs	r2, #16
        Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802ed86:	4630      	mov	r0, r6
}
 802ed88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802ed8c:	f008 bd0f 	b.w	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO OFF", PTOSTATUSTXT_SIZE);
 802ed90:	4908      	ldr	r1, [pc, #32]	@ (802edb4 <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model+0x58>)
 802ed92:	f884 0719 	strb.w	r0, [r4, #1817]	@ 0x719
 802ed96:	f884 3745 	strb.w	r3, [r4, #1861]	@ 0x745
 802ed9a:	2210      	movs	r2, #16
 802ed9c:	e7f3      	b.n	802ed86 <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model+0x2a>
 802ed9e:	2301      	movs	r3, #1
        Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802eda0:	4905      	ldr	r1, [pc, #20]	@ (802edb8 <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model+0x5c>)
 802eda2:	f884 0719 	strb.w	r0, [r4, #1817]	@ 0x719
 802eda6:	f884 3745 	strb.w	r3, [r4, #1861]	@ 0x745
 802edaa:	2210      	movs	r2, #16
 802edac:	e7eb      	b.n	802ed86 <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model+0x2a>
 802edae:	bf00      	nop
 802edb0:	080417d5 	.word	0x080417d5
 802edb4:	080417dc 	.word	0x080417dc
 802edb8:	080417e4 	.word	0x080417e4

0802edbc <_ZN18ScreenTestHomeView18updateButtonStatesEv>:
{
 802edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Raisetest = 0;
 802edbe:	2300      	movs	r3, #0
    bool wasHeld = isButtonHeld;
 802edc0:	f890 5b0e 	ldrb.w	r5, [r0, #2830]	@ 0xb0e
    Raisetest = 0;
 802edc4:	4f27      	ldr	r7, [pc, #156]	@ (802ee64 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0xa8>)
    Lowertest = 0;
 802edc6:	4e28      	ldr	r6, [pc, #160]	@ (802ee68 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0xac>)
    isButtonHeld = false;
 802edc8:	f880 3b0e 	strb.w	r3, [r0, #2830]	@ 0xb0e
{
 802edcc:	4604      	mov	r4, r0
    if(m_buttonController && m_buttonController->isButtonHeld(1))
 802edce:	f8d0 0b00 	ldr.w	r0, [r0, #2816]	@ 0xb00
    Raisetest = 0;
 802edd2:	703b      	strb	r3, [r7, #0]
    Lowertest = 0;
 802edd4:	7033      	strb	r3, [r6, #0]
    if(m_buttonController && m_buttonController->isButtonHeld(1))
 802edd6:	b198      	cbz	r0, 802ee00 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x44>
 802edd8:	2101      	movs	r1, #1
 802edda:	f7e7 fefc 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802edde:	b178      	cbz	r0, 802ee00 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x44>
        Traystate = 1;
 802ede0:	4a22      	ldr	r2, [pc, #136]	@ (802ee6c <_ZN18ScreenTestHomeView18updateButtonStatesEv+0xb0>)
        Raisetest = 1;
 802ede2:	2301      	movs	r3, #1
 802ede4:	703b      	strb	r3, [r7, #0]
        Traystate = 1;
 802ede6:	7013      	strb	r3, [r2, #0]
        isButtonHeld = true;
 802ede8:	f884 3b0e 	strb.w	r3, [r4, #2830]	@ 0xb0e
        if(!wasHeld || lastButtonPressed != 1)
 802edec:	b9a5      	cbnz	r5, 802ee18 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x5c>
            lastButtonPressed = 1;
 802edee:	f884 3b0c 	strb.w	r3, [r4, #2828]	@ 0xb0c
            showButtonFeedback = true;
 802edf2:	f884 3b05 	strb.w	r3, [r4, #2821]	@ 0xb05
            buttonFeedbackStartTime = HAL_GetTick();
 802edf6:	f7e9 fc99 	bl	801872c <HAL_GetTick>
 802edfa:	f8c4 0b08 	str.w	r0, [r4, #2824]	@ 0xb08
 802edfe:	e00f      	b.n	802ee20 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x64>
    else if(m_buttonController && m_buttonController->isButtonHeld(2))
 802ee00:	f8d4 0b00 	ldr.w	r0, [r4, #2816]	@ 0xb00
 802ee04:	b968      	cbnz	r0, 802ee22 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x66>
    else if(m_buttonController && m_buttonController->isButtonHeld(3))
 802ee06:	f8d4 0b00 	ldr.w	r0, [r4, #2816]	@ 0xb00
 802ee0a:	4c19      	ldr	r4, [pc, #100]	@ (802ee70 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0xb4>)
 802ee0c:	b9f0      	cbnz	r0, 802ee4c <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x90>
        if(Latchtest == 0) // Only clear tray state if latch is not active
 802ee0e:	7823      	ldrb	r3, [r4, #0]
 802ee10:	b933      	cbnz	r3, 802ee20 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x64>
            Traystate = 0;
 802ee12:	4a16      	ldr	r2, [pc, #88]	@ (802ee6c <_ZN18ScreenTestHomeView18updateButtonStatesEv+0xb0>)
 802ee14:	7013      	strb	r3, [r2, #0]
}
 802ee16:	e003      	b.n	802ee20 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x64>
        if(!wasHeld || lastButtonPressed != 1)
 802ee18:	f894 2b0c 	ldrb.w	r2, [r4, #2828]	@ 0xb0c
 802ee1c:	2a01      	cmp	r2, #1
 802ee1e:	d1e6      	bne.n	802edee <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x32>
}
 802ee20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(m_buttonController && m_buttonController->isButtonHeld(2))
 802ee22:	2102      	movs	r1, #2
 802ee24:	f7e7 fed7 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802ee28:	2800      	cmp	r0, #0
 802ee2a:	d0ec      	beq.n	802ee06 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x4a>
        Traystate = 2;
 802ee2c:	490f      	ldr	r1, [pc, #60]	@ (802ee6c <_ZN18ScreenTestHomeView18updateButtonStatesEv+0xb0>)
        Lowertest = 1;
 802ee2e:	2201      	movs	r2, #1
        Traystate = 2;
 802ee30:	2302      	movs	r3, #2
        Lowertest = 1;
 802ee32:	7032      	strb	r2, [r6, #0]
        Traystate = 2;
 802ee34:	700b      	strb	r3, [r1, #0]
        isButtonHeld = true;
 802ee36:	f884 2b0e 	strb.w	r2, [r4, #2830]	@ 0xb0e
        if(!wasHeld || lastButtonPressed != 2)
 802ee3a:	b11d      	cbz	r5, 802ee44 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x88>
 802ee3c:	f894 2b0c 	ldrb.w	r2, [r4, #2828]	@ 0xb0c
 802ee40:	429a      	cmp	r2, r3
 802ee42:	d0ed      	beq.n	802ee20 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x64>
            lastButtonPressed = 2;
 802ee44:	f884 3b0c 	strb.w	r3, [r4, #2828]	@ 0xb0c
            showButtonFeedback = true;
 802ee48:	2301      	movs	r3, #1
 802ee4a:	e7d2      	b.n	802edf2 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x36>
    else if(m_buttonController && m_buttonController->isButtonHeld(3))
 802ee4c:	2103      	movs	r1, #3
 802ee4e:	f7e7 fec2 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802ee52:	2800      	cmp	r0, #0
 802ee54:	d0db      	beq.n	802ee0e <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x52>
        Latchtest = 1;
 802ee56:	2301      	movs	r3, #1
 802ee58:	7023      	strb	r3, [r4, #0]
        Traystate = 3;
 802ee5a:	4b04      	ldr	r3, [pc, #16]	@ (802ee6c <_ZN18ScreenTestHomeView18updateButtonStatesEv+0xb0>)
 802ee5c:	2203      	movs	r2, #3
 802ee5e:	701a      	strb	r2, [r3, #0]
 802ee60:	e7de      	b.n	802ee20 <_ZN18ScreenTestHomeView18updateButtonStatesEv+0x64>
 802ee62:	bf00      	nop
 802ee64:	20001da0 	.word	0x20001da0
 802ee68:	20001d9f 	.word	0x20001d9f
 802ee6c:	20001d9d 	.word	0x20001d9d
 802ee70:	20001d9e 	.word	0x20001d9e

0802ee74 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model>:
{
 802ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ee78:	4604      	mov	r4, r0
    if(model.isPTOValid())
 802ee7a:	4608      	mov	r0, r1
{
 802ee7c:	460d      	mov	r5, r1
    if(model.isPTOValid())
 802ee7e:	f7ff f99c 	bl	802e1ba <_ZNK5Model10isPTOValidEv>
 802ee82:	4e21      	ldr	r6, [pc, #132]	@ (802ef08 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x94>)
 802ee84:	4f21      	ldr	r7, [pc, #132]	@ (802ef0c <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x98>)
 802ee86:	b360      	cbz	r0, 802eee2 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x6e>
        bool currentPTOActive = model.isPTOActive();
 802ee88:	4628      	mov	r0, r5
        if (currentPTOActive != lastPTOActive || !lastPTOValid || firstRun)
 802ee8a:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 802ef1c <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0xa8>
        bool currentPTOActive = model.isPTOActive();
 802ee8e:	f7ff f991 	bl	802e1b4 <_ZNK5Model11isPTOActiveEv>
        if (currentPTOActive != lastPTOActive || !lastPTOValid || firstRun)
 802ee92:	f898 3000 	ldrb.w	r3, [r8]
 802ee96:	4283      	cmp	r3, r0
        bool currentPTOActive = model.isPTOActive();
 802ee98:	4605      	mov	r5, r0
        if (currentPTOActive != lastPTOActive || !lastPTOValid || firstRun)
 802ee9a:	d108      	bne.n	802eeae <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x3a>
 802ee9c:	7833      	ldrb	r3, [r6, #0]
 802ee9e:	b133      	cbz	r3, 802eeae <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x3a>
 802eea0:	783b      	ldrb	r3, [r7, #0]
 802eea2:	b923      	cbnz	r3, 802eeae <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x3a>
    bool changed = false;
 802eea4:	2000      	movs	r0, #0
    firstRun = false;
 802eea6:	2300      	movs	r3, #0
 802eea8:	703b      	strb	r3, [r7, #0]
}
 802eeaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(currentPTOActive)
 802eeae:	2301      	movs	r3, #1
 802eeb0:	f604 1012 	addw	r0, r4, #2322	@ 0x912
 802eeb4:	b175      	cbz	r5, 802eed4 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x60>
 802eeb6:	f884 3719 	strb.w	r3, [r4, #1817]	@ 0x719
                Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ON", PTOSTATUSTXT_SIZE);
 802eeba:	4915      	ldr	r1, [pc, #84]	@ (802ef10 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x9c>)
 802eebc:	2300      	movs	r3, #0
 802eebe:	f884 3745 	strb.w	r3, [r4, #1861]	@ 0x745
 802eec2:	2210      	movs	r2, #16
                Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO OFF", PTOSTATUSTXT_SIZE);
 802eec4:	f008 fc73 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            lastPTOValid = true;
 802eec8:	2301      	movs	r3, #1
            lastPTOActive = currentPTOActive;
 802eeca:	f888 5000 	strb.w	r5, [r8]
            lastPTOValid = true;
 802eece:	7033      	strb	r3, [r6, #0]
            changed = true;
 802eed0:	2001      	movs	r0, #1
 802eed2:	e7e8      	b.n	802eea6 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x32>
                Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO OFF", PTOSTATUSTXT_SIZE);
 802eed4:	490f      	ldr	r1, [pc, #60]	@ (802ef14 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0xa0>)
 802eed6:	f884 5719 	strb.w	r5, [r4, #1817]	@ 0x719
 802eeda:	f884 3745 	strb.w	r3, [r4, #1861]	@ 0x745
 802eede:	2210      	movs	r2, #16
 802eee0:	e7f0      	b.n	802eec4 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x50>
        if (lastPTOValid || firstRun)
 802eee2:	7833      	ldrb	r3, [r6, #0]
 802eee4:	b913      	cbnz	r3, 802eeec <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x78>
 802eee6:	783b      	ldrb	r3, [r7, #0]
 802eee8:	2b00      	cmp	r3, #0
 802eeea:	d0db      	beq.n	802eea4 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x30>
 802eeec:	2500      	movs	r5, #0
 802eeee:	2301      	movs	r3, #1
            Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802eef0:	4909      	ldr	r1, [pc, #36]	@ (802ef18 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0xa4>)
 802eef2:	f884 5719 	strb.w	r5, [r4, #1817]	@ 0x719
 802eef6:	f884 3745 	strb.w	r3, [r4, #1861]	@ 0x745
 802eefa:	2210      	movs	r2, #16
 802eefc:	f604 1012 	addw	r0, r4, #2322	@ 0x912
 802ef00:	f008 fc55 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            lastPTOValid = false;
 802ef04:	7035      	strb	r5, [r6, #0]
            changed = true;
 802ef06:	e7e3      	b.n	802eed0 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model+0x5c>
 802ef08:	20009e90 	.word	0x20009e90
 802ef0c:	20000730 	.word	0x20000730
 802ef10:	080417d5 	.word	0x080417d5
 802ef14:	080417dc 	.word	0x080417dc
 802ef18:	080417e4 	.word	0x080417e4
 802ef1c:	20009e91 	.word	0x20009e91

0802ef20 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model>:

bool ScreenTestHomeView::updateButtonFeedbackDisplay(Model& model)
{
 802ef20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bool changed = false;
    static bool lastShowTestText = false;
    static const char* lastDisplayMessage = "";

    // Handle button feedback timeout (3 seconds)
    if(showButtonFeedback)
 802ef24:	f890 5b05 	ldrb.w	r5, [r0, #2821]	@ 0xb05
{
 802ef28:	4606      	mov	r6, r0
 802ef2a:	460f      	mov	r7, r1
    if(showButtonFeedback)
 802ef2c:	bb25      	cbnz	r5, 802ef78 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x58>

    // Determine what message to show
    bool showTestText = false;
    const char* displayMessage = "";

    if(showButtonFeedback && lastButtonPressed > 0)
 802ef2e:	f896 4b05 	ldrb.w	r4, [r6, #2821]	@ 0xb05
 802ef32:	bb94      	cbnz	r4, 802ef9a <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x7a>
 802ef34:	4625      	mov	r5, r4
        showTestText = (displayMessage[0] != '\0');
    }
    else
    {
        // No button feedback active - show nothing
        displayMessage = "";
 802ef36:	4f27      	ldr	r7, [pc, #156]	@ (802efd4 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0xb4>)
        showTestText = false;
    }

    // Only update display if something actually changed
    if(showTestText != lastShowTestText ||
 802ef38:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 802efdc <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0xbc>
 802ef3c:	f898 3000 	ldrb.w	r3, [r8]
 802ef40:	42a3      	cmp	r3, r4
 802ef42:	d13d      	bne.n	802efc0 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0xa0>
 802ef44:	b1ac      	cbz	r4, 802ef72 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x52>
       (showTestText && strcmp(displayMessage, lastDisplayMessage) != 0))
 802ef46:	4b24      	ldr	r3, [pc, #144]	@ (802efd8 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0xb8>)
 802ef48:	4638      	mov	r0, r7
 802ef4a:	6819      	ldr	r1, [r3, #0]
 802ef4c:	f7e6 fa58 	bl	8015400 <strcmp>
 802ef50:	b178      	cbz	r0, 802ef72 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x52>
 802ef52:	2301      	movs	r3, #1
 802ef54:	f886 35dd 	strb.w	r3, [r6, #1501]	@ 0x5dd
    {
        testtext.setVisible(showTestText);

        if(showTestText && displayMessage[0] != '\0')
 802ef58:	783b      	ldrb	r3, [r7, #0]
 802ef5a:	b12b      	cbz	r3, 802ef68 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x48>
        {
            Unicode::strncpy(testtextBuffer, displayMessage, TESTTEXT_SIZE);
 802ef5c:	2220      	movs	r2, #32
 802ef5e:	4639      	mov	r1, r7
 802ef60:	f506 600e 	add.w	r0, r6, #2272	@ 0x8e0
 802ef64:	f008 fc23 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
                testtextBuffer[0] = '\0';
            }
        }

        lastShowTestText = showTestText;
        lastDisplayMessage = displayMessage;
 802ef68:	4b1b      	ldr	r3, [pc, #108]	@ (802efd8 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0xb8>)
        lastShowTestText = showTestText;
 802ef6a:	f888 4000 	strb.w	r4, [r8]
        lastDisplayMessage = displayMessage;
 802ef6e:	601f      	str	r7, [r3, #0]
        changed = true;
 802ef70:	2501      	movs	r5, #1
    }

    return changed;
}
 802ef72:	4628      	mov	r0, r5
 802ef74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(HAL_GetTick() - buttonFeedbackStartTime > 3000)
 802ef78:	f7e9 fbd8 	bl	801872c <HAL_GetTick>
 802ef7c:	f8d6 3b08 	ldr.w	r3, [r6, #2824]	@ 0xb08
 802ef80:	1ac0      	subs	r0, r0, r3
 802ef82:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802ef86:	4298      	cmp	r0, r3
 802ef88:	d9d1      	bls.n	802ef2e <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0xe>
            showButtonFeedback = false;
 802ef8a:	2400      	movs	r4, #0
 802ef8c:	f886 4b05 	strb.w	r4, [r6, #2821]	@ 0xb05
            lastButtonPressed = 0;
 802ef90:	f886 4b0c 	strb.w	r4, [r6, #2828]	@ 0xb0c
            isButtonHeld = false;
 802ef94:	f886 4b0e 	strb.w	r4, [r6, #2830]	@ 0xb0e
 802ef98:	e7cd      	b.n	802ef36 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x16>
    if(showButtonFeedback && lastButtonPressed > 0)
 802ef9a:	f896 1b0c 	ldrb.w	r1, [r6, #2828]	@ 0xb0c
 802ef9e:	b159      	cbz	r1, 802efb8 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x98>
        displayMessage = model.getButtonFeedbackMessage(lastButtonPressed, isButtonHeld);
 802efa0:	4638      	mov	r0, r7
 802efa2:	f896 2b0e 	ldrb.w	r2, [r6, #2830]	@ 0xb0e
 802efa6:	f7ff fabb 	bl	802e520 <_ZNK5Model24getButtonFeedbackMessageEhb>
        showTestText = (displayMessage[0] != '\0');
 802efaa:	7804      	ldrb	r4, [r0, #0]
 802efac:	3c00      	subs	r4, #0
        displayMessage = model.getButtonFeedbackMessage(lastButtonPressed, isButtonHeld);
 802efae:	4607      	mov	r7, r0
        showTestText = (displayMessage[0] != '\0');
 802efb0:	bf18      	it	ne
 802efb2:	2401      	movne	r4, #1
 802efb4:	2500      	movs	r5, #0
 802efb6:	e7bf      	b.n	802ef38 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x18>
        displayMessage = "";
 802efb8:	4f06      	ldr	r7, [pc, #24]	@ (802efd4 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0xb4>)
 802efba:	460d      	mov	r5, r1
        showTestText = false;
 802efbc:	460c      	mov	r4, r1
 802efbe:	e7bb      	b.n	802ef38 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x18>
 802efc0:	f886 45dd 	strb.w	r4, [r6, #1501]	@ 0x5dd
        if(showTestText && displayMessage[0] != '\0')
 802efc4:	2c00      	cmp	r4, #0
 802efc6:	d1c7      	bne.n	802ef58 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x38>
            if(lastShowTestText && !showTestText)
 802efc8:	2b00      	cmp	r3, #0
 802efca:	d0cd      	beq.n	802ef68 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x48>
                testtextBuffer[0] = '\0';
 802efcc:	f8a6 48e0 	strh.w	r4, [r6, #2272]	@ 0x8e0
 802efd0:	e7ca      	b.n	802ef68 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model+0x48>
 802efd2:	bf00      	nop
 802efd4:	0803f6b1 	.word	0x0803f6b1
 802efd8:	2000072c 	.word	0x2000072c
 802efdc:	20009e8f 	.word	0x20009e8f

0802efe0 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model>:

bool ScreenTestHomeView::updateAlarmDisplay(Model& model)
{
 802efe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802efe4:	4604      	mov	r4, r0
    bool changed = false;
    static bool lastAlarmState = false;
    static Model::ErrorState lastErrorState = Model::ERROR_NONE;

    bool currentAlarmState = model.isAlarmActive();
 802efe6:	4608      	mov	r0, r1
{
 802efe8:	460e      	mov	r6, r1
    bool currentAlarmState = model.isAlarmActive();
 802efea:	f7fe ffdb 	bl	802dfa4 <_ZNK5Model13isAlarmActiveEv>
    Model::ErrorState currentErrorState = model.getErrorState();

    // Check if alarm state changed
    if(currentAlarmState != lastAlarmState || currentErrorState != lastErrorState)
 802efee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 802f074 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x94>
 802eff2:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 802f078 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x98>
    bool currentAlarmState = model.isAlarmActive();
 802eff6:	4605      	mov	r5, r0
    Model::ErrorState currentErrorState = model.getErrorState();
 802eff8:	4630      	mov	r0, r6
 802effa:	f7ff f8cc 	bl	802e196 <_ZNK5Model13getErrorStateEv>
    if(currentAlarmState != lastAlarmState || currentErrorState != lastErrorState)
 802effe:	f89a 3000 	ldrb.w	r3, [sl]
 802f002:	42ab      	cmp	r3, r5
    Model::ErrorState currentErrorState = model.getErrorState();
 802f004:	4680      	mov	r8, r0
    if(currentAlarmState != lastAlarmState || currentErrorState != lastErrorState)
 802f006:	d103      	bne.n	802f010 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x30>
 802f008:	f899 3000 	ldrb.w	r3, [r9]
 802f00c:	4283      	cmp	r3, r0
 802f00e:	d02f      	beq.n	802f070 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x90>
 802f010:	f884 57f5 	strb.w	r5, [r4, #2037]	@ 0x7f5
 802f014:	f884 5771 	strb.w	r5, [r4, #1905]	@ 0x771
    {
        // Update alarm popup visibility
        Alarmpopup.setVisible(currentAlarmState);
        ALARM.setVisible(currentAlarmState);  // ALARM image follows popup state

        if(currentAlarmState)
 802f018:	b1fd      	cbz	r5, 802f05a <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x7a>
        {
            // Update alarm title and description using TouchGFX Unicode functions
            const char* title = model.getAlarmTitle();
 802f01a:	4630      	mov	r0, r6
 802f01c:	f7fe ffc6 	bl	802dfac <_ZNK5Model13getAlarmTitleEv>
 802f020:	4607      	mov	r7, r0
            const char* description = model.getAlarmDescription();
 802f022:	4630      	mov	r0, r6
 802f024:	f7fe ffd2 	bl	802dfcc <_ZNK5Model19getAlarmDescriptionEv>
 802f028:	4606      	mov	r6, r0

            // Copy title using Unicode::strncpy
            if (title && strlen(title) > 0) {
 802f02a:	b157      	cbz	r7, 802f042 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x62>
 802f02c:	783b      	ldrb	r3, [r7, #0]
 802f02e:	b143      	cbz	r3, 802f042 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x62>
                Unicode::strncpy(AlarmtitletextBuffer, title, ALARMTITLETEXT_SIZE - 1);
 802f030:	222c      	movs	r2, #44	@ 0x2c
 802f032:	4639      	mov	r1, r7
 802f034:	f604 105c 	addw	r0, r4, #2396	@ 0x95c
 802f038:	f008 fbb9 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
                AlarmtitletextBuffer[ALARMTITLETEXT_SIZE - 1] = 0; // Ensure null termination
 802f03c:	2300      	movs	r3, #0
 802f03e:	f8a4 39b4 	strh.w	r3, [r4, #2484]	@ 0x9b4
            }

            // Copy description using Unicode::strncpy
            if (description && strlen(description) > 0) {
 802f042:	b156      	cbz	r6, 802f05a <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x7a>
 802f044:	7833      	ldrb	r3, [r6, #0]
 802f046:	b143      	cbz	r3, 802f05a <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x7a>
                Unicode::strncpy(AlarmdesctextBuffer, description, ALARMDESCTEXT_SIZE - 1);
 802f048:	2295      	movs	r2, #149	@ 0x95
 802f04a:	4631      	mov	r1, r6
 802f04c:	f604 10b6 	addw	r0, r4, #2486	@ 0x9b6
 802f050:	f008 fbad 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
                AlarmdesctextBuffer[ALARMDESCTEXT_SIZE - 1] = 0; // Ensure null termination
 802f054:	2300      	movs	r3, #0
 802f056:	f8a4 3ae0 	strh.w	r3, [r4, #2784]	@ 0xae0
 802f05a:	f884 5829 	strb.w	r5, [r4, #2089]	@ 0x829
 802f05e:	f884 5875 	strb.w	r5, [r4, #2165]	@ 0x875
            // Hide alarm text elements when no alarm
            Alarmtitletext.setVisible(false);
            Alarmdesctext.setVisible(false);
        }

        lastAlarmState = currentAlarmState;
 802f062:	f88a 5000 	strb.w	r5, [sl]
        lastErrorState = currentErrorState;
 802f066:	f889 8000 	strb.w	r8, [r9]
        changed = true;
 802f06a:	2001      	movs	r0, #1
    }

    return changed;
}
 802f06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bool changed = false;
 802f070:	2000      	movs	r0, #0
 802f072:	e7fb      	b.n	802f06c <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model+0x8c>
 802f074:	20009e8e 	.word	0x20009e8e
 802f078:	20009e8d 	.word	0x20009e8d

0802f07c <_ZN18ScreenTestHomeView18updateLatchDisplayEv>:

bool ScreenTestHomeView::updateLatchDisplay()
{
 802f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool changed = false;
    static uint8_t lastLatchtest = 0;
    static bool firstRun = true;

    // Check if Latchtest state changed OR first run
    if(Latchtest != lastLatchtest || firstRun)
 802f07e:	4f0e      	ldr	r7, [pc, #56]	@ (802f0b8 <_ZN18ScreenTestHomeView18updateLatchDisplayEv+0x3c>)
 802f080:	4e0e      	ldr	r6, [pc, #56]	@ (802f0bc <_ZN18ScreenTestHomeView18updateLatchDisplayEv+0x40>)
 802f082:	783b      	ldrb	r3, [r7, #0]
 802f084:	7832      	ldrb	r2, [r6, #0]
 802f086:	4d0e      	ldr	r5, [pc, #56]	@ (802f0c0 <_ZN18ScreenTestHomeView18updateLatchDisplayEv+0x44>)
 802f088:	429a      	cmp	r2, r3
{
 802f08a:	4604      	mov	r4, r0
    if(Latchtest != lastLatchtest || firstRun)
 802f08c:	d101      	bne.n	802f092 <_ZN18ScreenTestHomeView18updateLatchDisplayEv+0x16>
 802f08e:	7828      	ldrb	r0, [r5, #0]
 802f090:	b180      	cbz	r0, 802f0b4 <_ZN18ScreenTestHomeView18updateLatchDisplayEv+0x38>
        // Simple logic: if Latchtest is 1, show "CLOSE", if 0 show "OPEN"
        const char* latchText = (Latchtest == 1) ? "CLOSE" : "OPEN";

        // Update the LATCH text area - check your .hpp file for exact buffer name
        // Common buffer names: LATCHBuffer, textLatchBuffer, latchTextBuffer
        Unicode::strncpy(LATCHBuffer, latchText, LATCH_SIZE - 1);
 802f092:	480c      	ldr	r0, [pc, #48]	@ (802f0c4 <_ZN18ScreenTestHomeView18updateLatchDisplayEv+0x48>)
 802f094:	490c      	ldr	r1, [pc, #48]	@ (802f0c8 <_ZN18ScreenTestHomeView18updateLatchDisplayEv+0x4c>)
 802f096:	2209      	movs	r2, #9
 802f098:	2b01      	cmp	r3, #1
 802f09a:	bf18      	it	ne
 802f09c:	4601      	movne	r1, r0
 802f09e:	f604 00cc 	addw	r0, r4, #2252	@ 0x8cc
 802f0a2:	f008 fb84 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        LATCHBuffer[LATCH_SIZE - 1] = 0;
 802f0a6:	2300      	movs	r3, #0

        lastLatchtest = Latchtest;
 802f0a8:	783a      	ldrb	r2, [r7, #0]
        LATCHBuffer[LATCH_SIZE - 1] = 0;
 802f0aa:	f8a4 38de 	strh.w	r3, [r4, #2270]	@ 0x8de
        lastLatchtest = Latchtest;
 802f0ae:	7032      	strb	r2, [r6, #0]
        firstRun = false;
 802f0b0:	702b      	strb	r3, [r5, #0]
        changed = true;
 802f0b2:	2001      	movs	r0, #1
    }

    return changed;
}
 802f0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f0b6:	bf00      	nop
 802f0b8:	20001d9e 	.word	0x20001d9e
 802f0bc:	20009e8c 	.word	0x20009e8c
 802f0c0:	20000728 	.word	0x20000728
 802f0c4:	080410de 	.word	0x080410de
 802f0c8:	080417cf 	.word	0x080417cf

0802f0cc <_ZN18ScreenTestHomeView13buttonHandlerEh>:
{
 802f0cc:	b538      	push	{r3, r4, r5, lr}
 802f0ce:	460d      	mov	r5, r1
 802f0d0:	4604      	mov	r4, r0
    buttonHandlerObj.handleKey(value);
 802f0d2:	f600 20e4 	addw	r0, r0, #2788	@ 0xae4
 802f0d6:	f7e7 fb17 	bl	8016708 <_ZN13ButtonHandler9handleKeyEh>
    switch (value)
 802f0da:	2d02      	cmp	r5, #2
 802f0dc:	d805      	bhi.n	802f0ea <_ZN18ScreenTestHomeView13buttonHandlerEh+0x1e>
 802f0de:	b9ad      	cbnz	r5, 802f10c <_ZN18ScreenTestHomeView13buttonHandlerEh+0x40>
 802f0e0:	1d20      	adds	r0, r4, #4
}
 802f0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802f0e6:	f006 bed1 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
    switch (value)
 802f0ea:	2d03      	cmp	r5, #3
 802f0ec:	d1f8      	bne.n	802f0e0 <_ZN18ScreenTestHomeView13buttonHandlerEh+0x14>
            latchActive = !latchActive;
 802f0ee:	4a0f      	ldr	r2, [pc, #60]	@ (802f12c <_ZN18ScreenTestHomeView13buttonHandlerEh+0x60>)
 802f0f0:	7813      	ldrb	r3, [r2, #0]
 802f0f2:	f083 0301 	eor.w	r3, r3, #1
 802f0f6:	7013      	strb	r3, [r2, #0]
            Latchtest = latchActive ? 1 : 0;
 802f0f8:	b1ab      	cbz	r3, 802f126 <_ZN18ScreenTestHomeView13buttonHandlerEh+0x5a>
 802f0fa:	2301      	movs	r3, #1
 802f0fc:	4a0c      	ldr	r2, [pc, #48]	@ (802f130 <_ZN18ScreenTestHomeView13buttonHandlerEh+0x64>)
 802f0fe:	7013      	strb	r3, [r2, #0]
            Traystate = latchActive ? 3 : 0;
 802f100:	4b0c      	ldr	r3, [pc, #48]	@ (802f134 <_ZN18ScreenTestHomeView13buttonHandlerEh+0x68>)
 802f102:	701d      	strb	r5, [r3, #0]
            lastButtonPressed = 3;
 802f104:	2303      	movs	r3, #3
 802f106:	f884 3b0c 	strb.w	r3, [r4, #2828]	@ 0xb0c
 802f10a:	e001      	b.n	802f110 <_ZN18ScreenTestHomeView13buttonHandlerEh+0x44>
            lastButtonPressed = value;
 802f10c:	f884 5b0c 	strb.w	r5, [r4, #2828]	@ 0xb0c
            showButtonFeedback = true;
 802f110:	2301      	movs	r3, #1
 802f112:	f884 3b05 	strb.w	r3, [r4, #2821]	@ 0xb05
            buttonFeedbackStartTime = HAL_GetTick();
 802f116:	f7e9 fb09 	bl	801872c <HAL_GetTick>
            isButtonHeld = false;
 802f11a:	2300      	movs	r3, #0
            buttonFeedbackStartTime = HAL_GetTick();
 802f11c:	f8c4 0b08 	str.w	r0, [r4, #2824]	@ 0xb08
            isButtonHeld = false;
 802f120:	f884 3b0e 	strb.w	r3, [r4, #2830]	@ 0xb0e
            break;
 802f124:	e7dc      	b.n	802f0e0 <_ZN18ScreenTestHomeView13buttonHandlerEh+0x14>
            Traystate = latchActive ? 3 : 0;
 802f126:	461d      	mov	r5, r3
 802f128:	e7e8      	b.n	802f0fc <_ZN18ScreenTestHomeView13buttonHandlerEh+0x30>
 802f12a:	bf00      	nop
 802f12c:	20009e92 	.word	0x20009e92
 802f130:	20001d9e 	.word	0x20001d9e
 802f134:	20001d9d 	.word	0x20001d9d

0802f138 <_ZN18ScreenTestHomeView29forceUpdateTruckStatusDisplayERK5Model>:
{
 802f138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802f13c:	4605      	mov	r5, r0
    Model::TruckState truckState = model.getTruckState();
 802f13e:	4608      	mov	r0, r1
{
 802f140:	460e      	mov	r6, r1
    Model::TruckState truckState = model.getTruckState();
 802f142:	f7ff f825 	bl	802e190 <_ZNK5Model13getTruckStateEv>
 802f146:	4604      	mov	r4, r0
    newBitmapId = model.getTruckStateBitmapId();
 802f148:	4630      	mov	r0, r6
 802f14a:	f7ff f839 	bl	802e1c0 <_ZNK5Model21getTruckStateBitmapIdEv>
    switch(truckState)
 802f14e:	2c01      	cmp	r4, #1
    newBitmapId = model.getTruckStateBitmapId();
 802f150:	4607      	mov	r7, r0
    switch(truckState)
 802f152:	d01a      	beq.n	802f18a <_ZN18ScreenTestHomeView29forceUpdateTruckStatusDisplayERK5Model+0x52>
 802f154:	2c03      	cmp	r4, #3
 802f156:	d11b      	bne.n	802f190 <_ZN18ScreenTestHomeView29forceUpdateTruckStatusDisplayERK5Model+0x58>
            showMoving = model.getFlashState();
 802f158:	4630      	mov	r0, r6
 802f15a:	f7ff f822 	bl	802e1a2 <_ZNK5Model13getFlashStateEv>
            showUnlocked = true;
 802f15e:	f04f 0801 	mov.w	r8, #1
            showMoving = model.getFlashState();
 802f162:	4606      	mov	r6, r0
    bool showLocked = false;
 802f164:	2400      	movs	r4, #0
    statusImage.setBitmap(Bitmap(newBitmapId));
 802f166:	a901      	add	r1, sp, #4
 802f168:	f505 7088 	add.w	r0, r5, #272	@ 0x110
 802f16c:	f8ad 7004 	strh.w	r7, [sp, #4]
 802f170:	f001 fe3f 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    previousBitmapId = newBitmapId;
 802f174:	f8a5 7b10 	strh.w	r7, [r5, #2832]	@ 0xb10
 802f178:	f885 86ed 	strb.w	r8, [r5, #1773]	@ 0x6ed
 802f17c:	f885 46c1 	strb.w	r4, [r5, #1729]	@ 0x6c1
 802f180:	f885 67c9 	strb.w	r6, [r5, #1993]	@ 0x7c9
}
 802f184:	b002      	add	sp, #8
 802f186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool showMoving = false;
 802f18a:	2600      	movs	r6, #0
    bool showUnlocked = false;
 802f18c:	46b0      	mov	r8, r6
 802f18e:	e7ea      	b.n	802f166 <_ZN18ScreenTestHomeView29forceUpdateTruckStatusDisplayERK5Model+0x2e>
    switch(truckState)
 802f190:	2600      	movs	r6, #0
 802f192:	f04f 0801 	mov.w	r8, #1
 802f196:	4634      	mov	r4, r6
 802f198:	e7e5      	b.n	802f166 <_ZN18ScreenTestHomeView29forceUpdateTruckStatusDisplayERK5Model+0x2e>

0802f19a <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model>:
{
 802f19a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f19e:	4604      	mov	r4, r0
    Model::TruckState truckState = model.getTruckState();
 802f1a0:	4608      	mov	r0, r1
{
 802f1a2:	460f      	mov	r7, r1
    Model::TruckState truckState = model.getTruckState();
 802f1a4:	f7fe fff4 	bl	802e190 <_ZNK5Model13getTruckStateEv>
 802f1a8:	4605      	mov	r5, r0
    newBitmapId = model.getTruckStateBitmapId();
 802f1aa:	4638      	mov	r0, r7
 802f1ac:	f7ff f808 	bl	802e1c0 <_ZNK5Model21getTruckStateBitmapIdEv>
    switch(truckState)
 802f1b0:	2d01      	cmp	r5, #1
    newBitmapId = model.getTruckStateBitmapId();
 802f1b2:	4606      	mov	r6, r0
    switch(truckState)
 802f1b4:	d030      	beq.n	802f218 <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x7e>
            showMoving = (truckState == Model::TRUCK_STATE_MOVING) ? model.getFlashState() : false;
 802f1b6:	2d03      	cmp	r5, #3
 802f1b8:	d131      	bne.n	802f21e <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x84>
 802f1ba:	4638      	mov	r0, r7
 802f1bc:	f7fe fff1 	bl	802e1a2 <_ZNK5Model13getFlashStateEv>
            showUnlocked = true;
 802f1c0:	f04f 0801 	mov.w	r8, #1
            showMoving = (truckState == Model::TRUCK_STATE_MOVING) ? model.getFlashState() : false;
 802f1c4:	4607      	mov	r7, r0
            showLocked = false;
 802f1c6:	2500      	movs	r5, #0
    if(newBitmapId != previousBitmapId)
 802f1c8:	f8b4 3b10 	ldrh.w	r3, [r4, #2832]	@ 0xb10
 802f1cc:	42b3      	cmp	r3, r6
 802f1ce:	d02b      	beq.n	802f228 <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x8e>
        statusImage.setBitmap(Bitmap(newBitmapId));
 802f1d0:	f504 7988 	add.w	r9, r4, #272	@ 0x110
 802f1d4:	a901      	add	r1, sp, #4
 802f1d6:	4648      	mov	r0, r9
 802f1d8:	f8ad 6004 	strh.w	r6, [sp, #4]
 802f1dc:	f001 fe09 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        statusImage.invalidate();
 802f1e0:	4648      	mov	r0, r9
 802f1e2:	f006 fe53 	bl	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
        previousBitmapId = newBitmapId;
 802f1e6:	f8a4 6b10 	strh.w	r6, [r4, #2832]	@ 0xb10
        changed = true;
 802f1ea:	2001      	movs	r0, #1
    if (currentUnlocked != showUnlocked ||
 802f1ec:	f894 16ed 	ldrb.w	r1, [r4, #1773]	@ 0x6ed
        return visible;
 802f1f0:	f894 26c1 	ldrb.w	r2, [r4, #1729]	@ 0x6c1
 802f1f4:	f894 37c9 	ldrb.w	r3, [r4, #1993]	@ 0x7c9
 802f1f8:	4541      	cmp	r1, r8
 802f1fa:	d117      	bne.n	802f22c <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x92>
 802f1fc:	4295      	cmp	r5, r2
 802f1fe:	d115      	bne.n	802f22c <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x92>
        changed = true;
 802f200:	429f      	cmp	r7, r3
 802f202:	bf18      	it	ne
 802f204:	2001      	movne	r0, #1
        visible = vis;
 802f206:	f884 86ed 	strb.w	r8, [r4, #1773]	@ 0x6ed
 802f20a:	f884 56c1 	strb.w	r5, [r4, #1729]	@ 0x6c1
 802f20e:	f884 77c9 	strb.w	r7, [r4, #1993]	@ 0x7c9
}
 802f212:	b003      	add	sp, #12
 802f214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            showMoving = false;
 802f218:	2700      	movs	r7, #0
            showUnlocked = false;
 802f21a:	46b8      	mov	r8, r7
 802f21c:	e7d4      	b.n	802f1c8 <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x2e>
            showMoving = (truckState == Model::TRUCK_STATE_MOVING) ? model.getFlashState() : false;
 802f21e:	2700      	movs	r7, #0
            showUnlocked = true;
 802f220:	f04f 0801 	mov.w	r8, #1
            showLocked = false;
 802f224:	463d      	mov	r5, r7
 802f226:	e7cf      	b.n	802f1c8 <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x2e>
    bool changed = false;
 802f228:	2000      	movs	r0, #0
 802f22a:	e7df      	b.n	802f1ec <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x52>
        changed = true;
 802f22c:	2001      	movs	r0, #1
 802f22e:	e7ea      	b.n	802f206 <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model+0x6c>

0802f230 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model>:
{
 802f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f232:	4604      	mov	r4, r0
    if(model.isRollValid())
 802f234:	4608      	mov	r0, r1
{
 802f236:	460d      	mov	r5, r1
    if(model.isRollValid())
 802f238:	f7fe ffb9 	bl	802e1ae <_ZNK5Model11isRollValidEv>
 802f23c:	f604 1744 	addw	r7, r4, #2372	@ 0x944
 802f240:	f504 764c 	add.w	r6, r4, #816	@ 0x330
 802f244:	f504 6489 	add.w	r4, r4, #1096	@ 0x448
 802f248:	b318      	cbz	r0, 802f292 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model+0x62>
        int16_t rollValue = model.getRollValue();
 802f24a:	4628      	mov	r0, r5
 802f24c:	f7fe ffac 	bl	802e1a8 <_ZNK5Model12getRollValueEv>
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%d", rollValue);
 802f250:	4a13      	ldr	r2, [pc, #76]	@ (802f2a0 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model+0x70>)
        int16_t rollValue = model.getRollValue();
 802f252:	4605      	mov	r5, r0
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%d", rollValue);
 802f254:	4603      	mov	r3, r0
 802f256:	2110      	movs	r1, #16
 802f258:	4638      	mov	r0, r7
 802f25a:	f008 fe09 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        if(rollValue > 0)
 802f25e:	2d00      	cmp	r5, #0
 802f260:	dd06      	ble.n	802f270 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model+0x40>
            imageProgressRollPos.setValue(rollValue + 64);
 802f262:	f105 0140 	add.w	r1, r5, #64	@ 0x40
        imageProgressRollPos.setValue(64);
 802f266:	4630      	mov	r0, r6
 802f268:	f001 fa60 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        imageProgressRollNeg.setValue(64);
 802f26c:	2140      	movs	r1, #64	@ 0x40
 802f26e:	e00b      	b.n	802f288 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model+0x58>
            imageProgressRollPos.setValue(64);
 802f270:	f04f 0140 	mov.w	r1, #64	@ 0x40
 802f274:	4630      	mov	r0, r6
        else if(rollValue < 0)
 802f276:	d0f7      	beq.n	802f268 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model+0x38>
            imageProgressRollPos.setValue(64);
 802f278:	f001 fa58 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
            imageProgressRollNeg.setValue(abs(rollValue) + 64);
 802f27c:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 802f280:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 802f284:	3140      	adds	r1, #64	@ 0x40
 802f286:	b289      	uxth	r1, r1
        imageProgressRollNeg.setValue(64);
 802f288:	4620      	mov	r0, r4
}
 802f28a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        imageProgressRollNeg.setValue(64);
 802f28e:	f001 ba4d 	b.w	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "----");
 802f292:	2110      	movs	r1, #16
 802f294:	4a03      	ldr	r2, [pc, #12]	@ (802f2a4 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model+0x74>)
 802f296:	4638      	mov	r0, r7
 802f298:	f008 fdea 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        imageProgressRollPos.setValue(64);
 802f29c:	2140      	movs	r1, #64	@ 0x40
 802f29e:	e7e2      	b.n	802f266 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model+0x36>
 802f2a0:	080410f9 	.word	0x080410f9
 802f2a4:	080410c1 	.word	0x080410c1

0802f2a8 <_ZN18ScreenTestHomeView22initializeDisplayStateEv>:
{
 802f2a8:	b538      	push	{r3, r4, r5, lr}
 802f2aa:	4604      	mov	r4, r0
 802f2ac:	f005 fd2e 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 802f2b0:	f8d0 5158 	ldr.w	r5, [r0, #344]	@ 0x158
    forceUpdateTruckStatusDisplay(model);
 802f2b4:	4620      	mov	r0, r4
 802f2b6:	4629      	mov	r1, r5
 802f2b8:	f7ff ff3e 	bl	802f138 <_ZN18ScreenTestHomeView29forceUpdateTruckStatusDisplayERK5Model>
    forceUpdateRollDisplay(model);
 802f2bc:	4629      	mov	r1, r5
 802f2be:	4620      	mov	r0, r4
 802f2c0:	f7ff ffb6 	bl	802f230 <_ZN18ScreenTestHomeView22forceUpdateRollDisplayERK5Model>
    forceUpdatePTODisplay(model);
 802f2c4:	4620      	mov	r0, r4
 802f2c6:	4629      	mov	r1, r5
 802f2c8:	f7ff fd48 	bl	802ed5c <_ZN18ScreenTestHomeView21forceUpdatePTODisplayERK5Model>
 802f2cc:	1d20      	adds	r0, r4, #4
}
 802f2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802f2d2:	f006 bddb 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
	...

0802f2d8 <_ZN18ScreenTestHomeView11setupScreenEv>:
{
 802f2d8:	b510      	push	{r4, lr}
 802f2da:	4604      	mov	r4, r0
    ScreenTestHomeViewBase::setupScreen();
 802f2dc:	f7fc facb 	bl	802b876 <_ZN22ScreenTestHomeViewBase11setupScreenEv>
    Unicode::strncpy(textVersionBuffer, firmware_version, VERSION_STRING_LENGTH);
 802f2e0:	4908      	ldr	r1, [pc, #32]	@ (802f304 <_ZN18ScreenTestHomeView11setupScreenEv+0x2c>)
 802f2e2:	2218      	movs	r2, #24
 802f2e4:	f604 009c 	addw	r0, r4, #2204	@ 0x89c
 802f2e8:	f008 fa61 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    initializeDisplayState();
 802f2ec:	4620      	mov	r0, r4
 802f2ee:	f7ff ffdb 	bl	802f2a8 <_ZN18ScreenTestHomeView22initializeDisplayStateEv>
    initializeAlarmDisplay();  // This now checks current state instead of always hiding
 802f2f2:	4620      	mov	r0, r4
 802f2f4:	f7ff fcf4 	bl	802ece0 <_ZN18ScreenTestHomeView22initializeAlarmDisplayEv>
    initializeLatchDisplay();
 802f2f8:	4620      	mov	r0, r4
}
 802f2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initializeLatchDisplay();
 802f2fe:	f7ff bcd7 	b.w	802ecb0 <_ZN18ScreenTestHomeView22initializeLatchDisplayEv>
 802f302:	bf00      	nop
 802f304:	2000040c 	.word	0x2000040c

0802f308 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model>:
{
 802f308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f30a:	4604      	mov	r4, r0
    if(model.isRollValid())
 802f30c:	4608      	mov	r0, r1
{
 802f30e:	460e      	mov	r6, r1
    if(model.isRollValid())
 802f310:	f7fe ff4d 	bl	802e1ae <_ZNK5Model11isRollValidEv>
 802f314:	4f25      	ldr	r7, [pc, #148]	@ (802f3ac <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0xa4>)
 802f316:	4605      	mov	r5, r0
 802f318:	b390      	cbz	r0, 802f380 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x78>
        int16_t rollValue = model.getRollValue();
 802f31a:	4630      	mov	r0, r6
        if (rollValue != lastRollValue || !lastRollValid)
 802f31c:	4e24      	ldr	r6, [pc, #144]	@ (802f3b0 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0xa8>)
        int16_t rollValue = model.getRollValue();
 802f31e:	f7fe ff43 	bl	802e1a8 <_ZNK5Model12getRollValueEv>
        if (rollValue != lastRollValue || !lastRollValid)
 802f322:	f9b6 3000 	ldrsh.w	r3, [r6]
 802f326:	4283      	cmp	r3, r0
        int16_t rollValue = model.getRollValue();
 802f328:	4605      	mov	r5, r0
        if (rollValue != lastRollValue || !lastRollValid)
 802f32a:	d103      	bne.n	802f334 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x2c>
 802f32c:	783b      	ldrb	r3, [r7, #0]
 802f32e:	b10b      	cbz	r3, 802f334 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x2c>
    bool changed = false;
 802f330:	2000      	movs	r0, #0
}
 802f332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%d", rollValue);
 802f334:	f604 1044 	addw	r0, r4, #2372	@ 0x944
 802f338:	4a1e      	ldr	r2, [pc, #120]	@ (802f3b4 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0xac>)
 802f33a:	462b      	mov	r3, r5
 802f33c:	2110      	movs	r1, #16
 802f33e:	f008 fd97 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
            if(rollValue > 0)
 802f342:	2d00      	cmp	r5, #0
 802f344:	f504 704c 	add.w	r0, r4, #816	@ 0x330
 802f348:	f504 6489 	add.w	r4, r4, #1096	@ 0x448
 802f34c:	dd05      	ble.n	802f35a <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x52>
                imageProgressRollPos.setValue(rollValue + 64);
 802f34e:	f105 0140 	add.w	r1, r5, #64	@ 0x40
                imageProgressRollPos.setValue(64);
 802f352:	f001 f9eb 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
                imageProgressRollNeg.setValue(64);
 802f356:	2140      	movs	r1, #64	@ 0x40
 802f358:	e00a      	b.n	802f370 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x68>
                imageProgressRollPos.setValue(64);
 802f35a:	f04f 0140 	mov.w	r1, #64	@ 0x40
            else if(rollValue < 0)
 802f35e:	d0f8      	beq.n	802f352 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x4a>
                imageProgressRollPos.setValue(64);
 802f360:	f001 f9e4 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
                imageProgressRollNeg.setValue(abs(rollValue) + 64);
 802f364:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 802f368:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 802f36c:	3140      	adds	r1, #64	@ 0x40
 802f36e:	b289      	uxth	r1, r1
                imageProgressRollNeg.setValue(64);
 802f370:	4620      	mov	r0, r4
 802f372:	f001 f9db 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
            lastRollValid = true;
 802f376:	2301      	movs	r3, #1
            lastRollValue = rollValue;
 802f378:	8035      	strh	r5, [r6, #0]
            lastRollValid = true;
 802f37a:	703b      	strb	r3, [r7, #0]
            changed = true;
 802f37c:	2001      	movs	r0, #1
 802f37e:	e7d8      	b.n	802f332 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x2a>
    else if (lastRollValid)  // Only update if state changed from valid to invalid
 802f380:	783b      	ldrb	r3, [r7, #0]
 802f382:	2b00      	cmp	r3, #0
 802f384:	d0d4      	beq.n	802f330 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x28>
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "----");
 802f386:	4a0c      	ldr	r2, [pc, #48]	@ (802f3b8 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0xb0>)
 802f388:	2110      	movs	r1, #16
 802f38a:	f604 1044 	addw	r0, r4, #2372	@ 0x944
 802f38e:	f008 fd6f 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        imageProgressRollPos.setValue(64);
 802f392:	2140      	movs	r1, #64	@ 0x40
 802f394:	f504 704c 	add.w	r0, r4, #816	@ 0x330
 802f398:	f001 f9c8 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        imageProgressRollNeg.setValue(64);
 802f39c:	2140      	movs	r1, #64	@ 0x40
 802f39e:	f504 6089 	add.w	r0, r4, #1096	@ 0x448
 802f3a2:	f001 f9c3 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        lastRollValid = false;
 802f3a6:	703d      	strb	r5, [r7, #0]
        changed = true;
 802f3a8:	e7e8      	b.n	802f37c <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model+0x74>
 802f3aa:	bf00      	nop
 802f3ac:	20009e93 	.word	0x20009e93
 802f3b0:	20000732 	.word	0x20000732
 802f3b4:	080410f9 	.word	0x080410f9
 802f3b8:	080410c1 	.word	0x080410c1

0802f3bc <_ZN18ScreenTestHomeView15handleTickEventEv>:
{
 802f3bc:	b570      	push	{r4, r5, r6, lr}
 802f3be:	4605      	mov	r5, r0
    updateButtonStates();
 802f3c0:	f7ff fcfc 	bl	802edbc <_ZN18ScreenTestHomeView18updateButtonStatesEv>
 802f3c4:	f005 fca2 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 802f3c8:	f8d0 6158 	ldr.w	r6, [r0, #344]	@ 0x158
    displayChanged |= updateTruckStatusDisplay(model);
 802f3cc:	4628      	mov	r0, r5
 802f3ce:	4631      	mov	r1, r6
 802f3d0:	f7ff fee3 	bl	802f19a <_ZN18ScreenTestHomeView24updateTruckStatusDisplayERK5Model>
    displayChanged |= updateRollDisplay(model);
 802f3d4:	4631      	mov	r1, r6
    displayChanged |= updateTruckStatusDisplay(model);
 802f3d6:	4604      	mov	r4, r0
    displayChanged |= updateRollDisplay(model);
 802f3d8:	4628      	mov	r0, r5
 802f3da:	f7ff ff95 	bl	802f308 <_ZN18ScreenTestHomeView17updateRollDisplayERK5Model>
    displayChanged |= updatePTODisplay(model);
 802f3de:	4631      	mov	r1, r6
    displayChanged |= updateRollDisplay(model);
 802f3e0:	4304      	orrs	r4, r0
    displayChanged |= updatePTODisplay(model);
 802f3e2:	4628      	mov	r0, r5
 802f3e4:	f7ff fd46 	bl	802ee74 <_ZN18ScreenTestHomeView16updatePTODisplayERK5Model>
    displayChanged |= updateRollDisplay(model);
 802f3e8:	b2e4      	uxtb	r4, r4
    displayChanged |= updatePTODisplay(model);
 802f3ea:	4304      	orrs	r4, r0
    displayChanged |= updateButtonFeedbackDisplay(model);
 802f3ec:	4631      	mov	r1, r6
 802f3ee:	4628      	mov	r0, r5
 802f3f0:	f7ff fd96 	bl	802ef20 <_ZN18ScreenTestHomeView27updateButtonFeedbackDisplayER5Model>
    displayChanged |= updatePTODisplay(model);
 802f3f4:	b2e4      	uxtb	r4, r4
    displayChanged |= updateButtonFeedbackDisplay(model);
 802f3f6:	4304      	orrs	r4, r0
    displayChanged |= updateAlarmDisplay(model);
 802f3f8:	4631      	mov	r1, r6
 802f3fa:	4628      	mov	r0, r5
 802f3fc:	f7ff fdf0 	bl	802efe0 <_ZN18ScreenTestHomeView18updateAlarmDisplayER5Model>
    displayChanged |= updateButtonFeedbackDisplay(model);
 802f400:	b2e4      	uxtb	r4, r4
    displayChanged |= updateAlarmDisplay(model);
 802f402:	4304      	orrs	r4, r0
 802f404:	b2e4      	uxtb	r4, r4
    displayChanged |= updateLatchDisplay();  // ADD THIS LINE
 802f406:	4628      	mov	r0, r5
 802f408:	f7ff fe38 	bl	802f07c <_ZN18ScreenTestHomeView18updateLatchDisplayEv>
    if (displayChanged) {
 802f40c:	b904      	cbnz	r4, 802f410 <_ZN18ScreenTestHomeView15handleTickEventEv+0x54>
 802f40e:	b120      	cbz	r0, 802f41a <_ZN18ScreenTestHomeView15handleTickEventEv+0x5e>
 802f410:	1d28      	adds	r0, r5, #4
}
 802f412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802f416:	f006 bd39 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802f41a:	bd70      	pop	{r4, r5, r6, pc}

0802f41c <_ZN22ScreenTrailerPresenterD1Ev>:
    virtual ~ScreenTrailerPresenter() {}
 802f41c:	4770      	bx	lr

0802f41e <_ZThn4_N22ScreenTrailerPresenterD1Ev>:
 802f41e:	3804      	subs	r0, #4
 802f420:	4770      	bx	lr

0802f422 <_ZN22ScreenTrailerPresenter10deactivateEv>:
}

void ScreenTrailerPresenter::activate()
{

}
 802f422:	4770      	bx	lr

0802f424 <_ZN22ScreenTrailerPresenterD0Ev>:
 802f424:	b510      	push	{r4, lr}
 802f426:	2114      	movs	r1, #20
 802f428:	4604      	mov	r4, r0
 802f42a:	f00d f85e 	bl	803c4ea <_ZdlPvj>
 802f42e:	4620      	mov	r0, r4
 802f430:	bd10      	pop	{r4, pc}

0802f432 <_ZThn4_N22ScreenTrailerPresenterD0Ev>:
 802f432:	f1a0 0004 	sub.w	r0, r0, #4
 802f436:	e7f5      	b.n	802f424 <_ZN22ScreenTrailerPresenterD0Ev>

0802f438 <_ZN22ScreenTrailerPresenterC1ER17ScreenTrailerView>:
 802f438:	2200      	movs	r2, #0
 802f43a:	6082      	str	r2, [r0, #8]
    : view(v)
 802f43c:	4a02      	ldr	r2, [pc, #8]	@ (802f448 <_ZN22ScreenTrailerPresenterC1ER17ScreenTrailerView+0x10>)
 802f43e:	6002      	str	r2, [r0, #0]
 802f440:	3218      	adds	r2, #24
 802f442:	6042      	str	r2, [r0, #4]
 802f444:	60c1      	str	r1, [r0, #12]
}
 802f446:	4770      	bx	lr
 802f448:	08043160 	.word	0x08043160

0802f44c <_ZN17ScreenTrailerView14tearDownScreenEv>:
}

void ScreenTrailerView::tearDownScreen()
{
    ScreenTrailerViewBase::tearDownScreen();
}
 802f44c:	4770      	bx	lr
	...

0802f450 <_ZN17ScreenTrailerViewD1Ev>:

class ScreenTrailerView : public ScreenTrailerViewBase
{
public:
    ScreenTrailerView();
    virtual ~ScreenTrailerView() {}
 802f450:	b510      	push	{r4, lr}
 802f452:	4b03      	ldr	r3, [pc, #12]	@ (802f460 <_ZN17ScreenTrailerViewD1Ev+0x10>)
 802f454:	6003      	str	r3, [r0, #0]
 802f456:	4604      	mov	r4, r0
 802f458:	f7fc ff4c 	bl	802c2f4 <_ZN21ScreenTrailerViewBaseD1Ev>
 802f45c:	4620      	mov	r0, r4
 802f45e:	bd10      	pop	{r4, pc}
 802f460:	0804318c 	.word	0x0804318c

0802f464 <_ZN17ScreenTrailerViewD0Ev>:
 802f464:	b510      	push	{r4, lr}
 802f466:	4604      	mov	r4, r0
 802f468:	f7ff fff2 	bl	802f450 <_ZN17ScreenTrailerViewD1Ev>
 802f46c:	4620      	mov	r0, r4
 802f46e:	f640 3144 	movw	r1, #2884	@ 0xb44
 802f472:	f00d f83a 	bl	803c4ea <_ZdlPvj>
 802f476:	4620      	mov	r0, r4
 802f478:	bd10      	pop	{r4, pc}
	...

0802f47c <_ZN17ScreenTrailerViewC1Ev>:
ScreenTrailerView::ScreenTrailerView() :
 802f47c:	b510      	push	{r4, lr}
 802f47e:	4604      	mov	r4, r0
    trailerLatchToggleState(false)
 802f480:	f7fc ff52 	bl	802c328 <_ZN21ScreenTrailerViewBaseC1Ev>
 802f484:	4b14      	ldr	r3, [pc, #80]	@ (802f4d8 <_ZN17ScreenTrailerViewC1Ev+0x5c>)
 802f486:	6023      	str	r3, [r4, #0]
 802f488:	230a      	movs	r3, #10
 802f48a:	f8a4 3b14 	strh.w	r3, [r4, #2836]	@ 0xb14
    buttonHandlerObj(10, static_cast<Button*>(&button0),
 802f48e:	f504 73e8 	add.w	r3, r4, #464	@ 0x1d0
 802f492:	f8c4 3b18 	str.w	r3, [r4, #2840]	@ 0xb18
 802f496:	4a11      	ldr	r2, [pc, #68]	@ (802f4dc <_ZN17ScreenTrailerViewC1Ev+0x60>)
 802f498:	f504 7301 	add.w	r3, r4, #516	@ 0x204
 802f49c:	f8c4 3b1c 	str.w	r3, [r4, #2844]	@ 0xb1c
 802f4a0:	f504 73ce 	add.w	r3, r4, #412	@ 0x19c
 802f4a4:	6812      	ldr	r2, [r2, #0]
 802f4a6:	f8c4 3b20 	str.w	r3, [r4, #2848]	@ 0xb20
 802f4aa:	f504 73b4 	add.w	r3, r4, #360	@ 0x168
 802f4ae:	f8c4 3b24 	str.w	r3, [r4, #2852]	@ 0xb24
 802f4b2:	2300      	movs	r3, #0
    m_buttonController(static_cast<TouchGfxInputController*>(HAL::getInstance()->getButtonController())),
 802f4b4:	6952      	ldr	r2, [r2, #20]
    lastButtonPressed(0),
 802f4b6:	f8c4 3b3c 	str.w	r3, [r4, #2876]	@ 0xb3c
 802f4ba:	f8c4 3b28 	str.w	r3, [r4, #2856]	@ 0xb28
 802f4be:	f884 3b2c 	strb.w	r3, [r4, #2860]	@ 0xb2c
    m_buttonController(static_cast<TouchGfxInputController*>(HAL::getInstance()->getButtonController())),
 802f4c2:	f8c4 2b30 	str.w	r2, [r4, #2864]	@ 0xb30
    showButtonFeedback(false),
 802f4c6:	f884 3b34 	strb.w	r3, [r4, #2868]	@ 0xb34
    buttonFeedbackStartTime(0),
 802f4ca:	f8c4 3b38 	str.w	r3, [r4, #2872]	@ 0xb38
    trailerLatchToggleState(false)
 802f4ce:	f884 3b40 	strb.w	r3, [r4, #2880]	@ 0xb40
}
 802f4d2:	4620      	mov	r0, r4
 802f4d4:	bd10      	pop	{r4, pc}
 802f4d6:	bf00      	nop
 802f4d8:	0804318c 	.word	0x0804318c
 802f4dc:	2000b8e0 	.word	0x2000b8e0

0802f4e0 <_ZN17ScreenTrailerView22initializeLatchDisplayEv>:
    // Force immediate invalidation to ensure display updates
    this->invalidate();
}

void ScreenTrailerView::initializeLatchDisplay()
{
 802f4e0:	b510      	push	{r4, lr}
    // Simple initialization based on current TrailerLatchtest value
    const char* latchText = (TrailerLatchtest == 1) ? "CLOSE" : "OPEN";
 802f4e2:	4b08      	ldr	r3, [pc, #32]	@ (802f504 <_ZN17ScreenTrailerView22initializeLatchDisplayEv+0x24>)

    // Update the LATCH text
    Unicode::strncpy(LATCHBuffer, latchText, LATCH_SIZE - 1);
 802f4e4:	4908      	ldr	r1, [pc, #32]	@ (802f508 <_ZN17ScreenTrailerView22initializeLatchDisplayEv+0x28>)
{
 802f4e6:	4604      	mov	r4, r0
    const char* latchText = (TrailerLatchtest == 1) ? "CLOSE" : "OPEN";
 802f4e8:	7818      	ldrb	r0, [r3, #0]
    Unicode::strncpy(LATCHBuffer, latchText, LATCH_SIZE - 1);
 802f4ea:	4b08      	ldr	r3, [pc, #32]	@ (802f50c <_ZN17ScreenTrailerView22initializeLatchDisplayEv+0x2c>)
 802f4ec:	220c      	movs	r2, #12
 802f4ee:	2801      	cmp	r0, #1
 802f4f0:	bf08      	it	eq
 802f4f2:	4619      	moveq	r1, r3
 802f4f4:	f604 00f8 	addw	r0, r4, #2296	@ 0x8f8
 802f4f8:	f008 f959 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
    LATCHBuffer[LATCH_SIZE - 1] = 0;
 802f4fc:	2300      	movs	r3, #0
 802f4fe:	f8a4 3910 	strh.w	r3, [r4, #2320]	@ 0x910
}
 802f502:	bd10      	pop	{r4, pc}
 802f504:	20001d9a 	.word	0x20001d9a
 802f508:	080410de 	.word	0x080410de
 802f50c:	080417cf 	.word	0x080417cf

0802f510 <_ZN17ScreenTrailerView22initializeAlarmDisplayEv>:

void ScreenTrailerView::initializeAlarmDisplay()
{
 802f510:	b570      	push	{r4, r5, r6, lr}
 802f512:	4604      	mov	r4, r0
 802f514:	f005 fbfa 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 802f518:	f8d0 5158 	ldr.w	r5, [r0, #344]	@ 0x158
    // Get current alarm state from model
    Model& model = static_cast<FrontendApplication*>(&application())->getModel();
    bool currentAlarmState = model.isAlarmActive();
 802f51c:	4628      	mov	r0, r5
 802f51e:	f7fe fd41 	bl	802dfa4 <_ZNK5Model13isAlarmActiveEv>

    if(currentAlarmState)
 802f522:	b350      	cbz	r0, 802f57a <_ZN17ScreenTrailerView22initializeAlarmDisplayEv+0x6a>
 802f524:	2301      	movs	r3, #1
 802f526:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 802f52a:	f884 3895 	strb.w	r3, [r4, #2197]	@ 0x895
        // Alarm is active - show the popup
        Alarmpopup.setVisible(true);
        ALARM.setVisible(true);

        // Update alarm title and description
        const char* title = model.getAlarmTitle();
 802f52e:	4628      	mov	r0, r5
 802f530:	f7fe fd3c 	bl	802dfac <_ZNK5Model13getAlarmTitleEv>
 802f534:	4606      	mov	r6, r0
        const char* description = model.getAlarmDescription();
 802f536:	4628      	mov	r0, r5
 802f538:	f7fe fd48 	bl	802dfcc <_ZNK5Model19getAlarmDescriptionEv>
 802f53c:	4605      	mov	r5, r0

        if (title && strlen(title) > 0) {
 802f53e:	b156      	cbz	r6, 802f556 <_ZN17ScreenTrailerView22initializeAlarmDisplayEv+0x46>
 802f540:	7833      	ldrb	r3, [r6, #0]
 802f542:	b143      	cbz	r3, 802f556 <_ZN17ScreenTrailerView22initializeAlarmDisplayEv+0x46>
            Unicode::strncpy(AlarmtitletextBuffer, title, ALARMTITLETEXT_SIZE - 1);
 802f544:	222c      	movs	r2, #44	@ 0x2c
 802f546:	4631      	mov	r1, r6
 802f548:	f604 20ba 	addw	r0, r4, #2746	@ 0xaba
 802f54c:	f008 f92f 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            AlarmtitletextBuffer[ALARMTITLETEXT_SIZE - 1] = 0;
 802f550:	2300      	movs	r3, #0
 802f552:	f8a4 3b12 	strh.w	r3, [r4, #2834]	@ 0xb12
        }

        if (description && strlen(description) > 0) {
 802f556:	b155      	cbz	r5, 802f56e <_ZN17ScreenTrailerView22initializeAlarmDisplayEv+0x5e>
 802f558:	782b      	ldrb	r3, [r5, #0]
 802f55a:	b143      	cbz	r3, 802f56e <_ZN17ScreenTrailerView22initializeAlarmDisplayEv+0x5e>
            Unicode::strncpy(AlarmdesctextBuffer, description, ALARMDESCTEXT_SIZE - 1);
 802f55c:	2295      	movs	r2, #149	@ 0x95
 802f55e:	4629      	mov	r1, r5
 802f560:	f604 108e 	addw	r0, r4, #2446	@ 0x98e
 802f564:	f008 f923 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            AlarmdesctextBuffer[ALARMDESCTEXT_SIZE - 1] = 0;
 802f568:	2300      	movs	r3, #0
 802f56a:	f8a4 3ab8 	strh.w	r3, [r4, #2744]	@ 0xab8
 802f56e:	2301      	movs	r3, #1
 802f570:	f884 381d 	strb.w	r3, [r4, #2077]	@ 0x81d
 802f574:	f884 37d1 	strb.w	r3, [r4, #2001]	@ 0x7d1
        Alarmpopup.setVisible(false);
        Alarmtitletext.setVisible(false);
        Alarmdesctext.setVisible(false);
        ALARM.setVisible(false);
    }
}
 802f578:	bd70      	pop	{r4, r5, r6, pc}
 802f57a:	f884 079d 	strb.w	r0, [r4, #1949]	@ 0x79d
 802f57e:	f884 081d 	strb.w	r0, [r4, #2077]	@ 0x81d
 802f582:	f884 07d1 	strb.w	r0, [r4, #2001]	@ 0x7d1
 802f586:	f884 0895 	strb.w	r0, [r4, #2197]	@ 0x895
 802f58a:	e7f5      	b.n	802f578 <_ZN17ScreenTrailerView22initializeAlarmDisplayEv+0x68>

0802f58c <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model>:
        imageProgressRollNeg.setValue(64);
    }
}

void ScreenTrailerView::forceUpdatePTODisplay(const Model& model)
{
 802f58c:	b570      	push	{r4, r5, r6, lr}
 802f58e:	4604      	mov	r4, r0
    if(model.isPTOValid())
 802f590:	4608      	mov	r0, r1
{
 802f592:	460d      	mov	r5, r1
    if(model.isPTOValid())
 802f594:	f7fe fe11 	bl	802e1ba <_ZNK5Model10isPTOValidEv>
 802f598:	f604 1644 	addw	r6, r4, #2372	@ 0x944
 802f59c:	b1b8      	cbz	r0, 802f5ce <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model+0x42>
    {
        if(model.isPTOActive())
 802f59e:	4628      	mov	r0, r5
 802f5a0:	f7fe fe08 	bl	802e1b4 <_ZNK5Model11isPTOActiveEv>
 802f5a4:	2301      	movs	r3, #1
 802f5a6:	b158      	cbz	r0, 802f5c0 <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model+0x34>
 802f5a8:	f884 3771 	strb.w	r3, [r4, #1905]	@ 0x771
        {
            PTOStatusON.setVisible(true);
            PTOStatusOFF.setVisible(false);
            Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ON", PTOSTATUSTXT_SIZE);
 802f5ac:	490c      	ldr	r1, [pc, #48]	@ (802f5e0 <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model+0x54>)
 802f5ae:	2300      	movs	r3, #0
 802f5b0:	f884 3869 	strb.w	r3, [r4, #2153]	@ 0x869
 802f5b4:	2219      	movs	r2, #25
    }
    else
    {
        PTOStatusON.setVisible(false);
        PTOStatusOFF.setVisible(true);
        Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802f5b6:	4630      	mov	r0, r6
    }
}
 802f5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802f5bc:	f008 b8f7 	b.w	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO OFF", PTOSTATUSTXT_SIZE);
 802f5c0:	4908      	ldr	r1, [pc, #32]	@ (802f5e4 <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model+0x58>)
 802f5c2:	f884 0771 	strb.w	r0, [r4, #1905]	@ 0x771
 802f5c6:	f884 3869 	strb.w	r3, [r4, #2153]	@ 0x869
 802f5ca:	2219      	movs	r2, #25
 802f5cc:	e7f3      	b.n	802f5b6 <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model+0x2a>
 802f5ce:	2301      	movs	r3, #1
        Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802f5d0:	4905      	ldr	r1, [pc, #20]	@ (802f5e8 <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model+0x5c>)
 802f5d2:	f884 0771 	strb.w	r0, [r4, #1905]	@ 0x771
 802f5d6:	f884 3869 	strb.w	r3, [r4, #2153]	@ 0x869
 802f5da:	2219      	movs	r2, #25
 802f5dc:	e7eb      	b.n	802f5b6 <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model+0x2a>
 802f5de:	bf00      	nop
 802f5e0:	080417d5 	.word	0x080417d5
 802f5e4:	080417dc 	.word	0x080417dc
 802f5e8:	080417e4 	.word	0x080417e4

0802f5ec <_ZN17ScreenTrailerView18updateButtonStatesEv>:
        this->invalidate();
    }
}

void ScreenTrailerView::updateButtonStates()
{
 802f5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Reset button flags
    TrailerRaisetest = 0;
 802f5ee:	2300      	movs	r3, #0
    TrailerLowertest = 0;

    bool wasHeld = isButtonHeld;
 802f5f0:	f890 5b3d 	ldrb.w	r5, [r0, #2877]	@ 0xb3d
    TrailerRaisetest = 0;
 802f5f4:	4f27      	ldr	r7, [pc, #156]	@ (802f694 <_ZN17ScreenTrailerView18updateButtonStatesEv+0xa8>)
    TrailerLowertest = 0;
 802f5f6:	4e28      	ldr	r6, [pc, #160]	@ (802f698 <_ZN17ScreenTrailerView18updateButtonStatesEv+0xac>)
    isButtonHeld = false;
 802f5f8:	f880 3b3d 	strb.w	r3, [r0, #2877]	@ 0xb3d
{
 802f5fc:	4604      	mov	r4, r0

    // Check for button hold states
    if(m_buttonController && m_buttonController->isButtonHeld(1))
 802f5fe:	f8d0 0b30 	ldr.w	r0, [r0, #2864]	@ 0xb30
    TrailerRaisetest = 0;
 802f602:	703b      	strb	r3, [r7, #0]
    TrailerLowertest = 0;
 802f604:	7033      	strb	r3, [r6, #0]
    if(m_buttonController && m_buttonController->isButtonHeld(1))
 802f606:	b198      	cbz	r0, 802f630 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x44>
 802f608:	2101      	movs	r1, #1
 802f60a:	f7e7 fae4 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802f60e:	b178      	cbz	r0, 802f630 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x44>
    {
        TrailerRaisetest = 1;
        TrailerTraystate = 1;
 802f610:	4a22      	ldr	r2, [pc, #136]	@ (802f69c <_ZN17ScreenTrailerView18updateButtonStatesEv+0xb0>)
        TrailerRaisetest = 1;
 802f612:	2301      	movs	r3, #1
 802f614:	703b      	strb	r3, [r7, #0]
        TrailerTraystate = 1;
 802f616:	7013      	strb	r3, [r2, #0]
        isButtonHeld = true;
 802f618:	f884 3b3d 	strb.w	r3, [r4, #2877]	@ 0xb3d

        // Trigger hold feedback if just started holding or button changed
        if(!wasHeld || lastButtonPressed != 1)
 802f61c:	b9a5      	cbnz	r5, 802f648 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x5c>
        {
            lastButtonPressed = 1;
 802f61e:	f884 3b3c 	strb.w	r3, [r4, #2876]	@ 0xb3c
        isButtonHeld = true;

        if(!wasHeld || lastButtonPressed != 2)
        {
            lastButtonPressed = 2;
            showButtonFeedback = true;
 802f622:	f884 3b34 	strb.w	r3, [r4, #2868]	@ 0xb34
            buttonFeedbackStartTime = HAL_GetTick();
 802f626:	f7e9 f881 	bl	801872c <HAL_GetTick>
 802f62a:	f8c4 0b38 	str.w	r0, [r4, #2872]	@ 0xb38
 802f62e:	e00f      	b.n	802f650 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x64>
    else if(m_buttonController && m_buttonController->isButtonHeld(2))
 802f630:	f8d4 0b30 	ldr.w	r0, [r4, #2864]	@ 0xb30
 802f634:	b968      	cbnz	r0, 802f652 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x66>
        }
    }
    else if(m_buttonController && m_buttonController->isButtonHeld(3))
 802f636:	f8d4 0b30 	ldr.w	r0, [r4, #2864]	@ 0xb30
 802f63a:	4c19      	ldr	r4, [pc, #100]	@ (802f6a0 <_ZN17ScreenTrailerView18updateButtonStatesEv+0xb4>)
 802f63c:	b9f0      	cbnz	r0, 802f67c <_ZN17ScreenTrailerView18updateButtonStatesEv+0x90>
        // Latch doesn't use hold behavior
    }
    else
    {
        // No buttons held
        if(TrailerLatchtest == 0) // Only clear tray state if latch is not active
 802f63e:	7823      	ldrb	r3, [r4, #0]
 802f640:	b933      	cbnz	r3, 802f650 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x64>
        {
            TrailerTraystate = 0;
 802f642:	4a16      	ldr	r2, [pc, #88]	@ (802f69c <_ZN17ScreenTrailerView18updateButtonStatesEv+0xb0>)
 802f644:	7013      	strb	r3, [r2, #0]
        }
    }
}
 802f646:	e003      	b.n	802f650 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x64>
        if(!wasHeld || lastButtonPressed != 1)
 802f648:	f894 2b3c 	ldrb.w	r2, [r4, #2876]	@ 0xb3c
 802f64c:	2a01      	cmp	r2, #1
 802f64e:	d1e6      	bne.n	802f61e <_ZN17ScreenTrailerView18updateButtonStatesEv+0x32>
}
 802f650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(m_buttonController && m_buttonController->isButtonHeld(2))
 802f652:	2102      	movs	r1, #2
 802f654:	f7e7 fabf 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802f658:	2800      	cmp	r0, #0
 802f65a:	d0ec      	beq.n	802f636 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x4a>
        TrailerTraystate = 2;
 802f65c:	490f      	ldr	r1, [pc, #60]	@ (802f69c <_ZN17ScreenTrailerView18updateButtonStatesEv+0xb0>)
        TrailerLowertest = 1;
 802f65e:	2201      	movs	r2, #1
        TrailerTraystate = 2;
 802f660:	2302      	movs	r3, #2
        TrailerLowertest = 1;
 802f662:	7032      	strb	r2, [r6, #0]
        TrailerTraystate = 2;
 802f664:	700b      	strb	r3, [r1, #0]
        isButtonHeld = true;
 802f666:	f884 2b3d 	strb.w	r2, [r4, #2877]	@ 0xb3d
        if(!wasHeld || lastButtonPressed != 2)
 802f66a:	b11d      	cbz	r5, 802f674 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x88>
 802f66c:	f894 2b3c 	ldrb.w	r2, [r4, #2876]	@ 0xb3c
 802f670:	429a      	cmp	r2, r3
 802f672:	d0ed      	beq.n	802f650 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x64>
            lastButtonPressed = 2;
 802f674:	f884 3b3c 	strb.w	r3, [r4, #2876]	@ 0xb3c
            showButtonFeedback = true;
 802f678:	2301      	movs	r3, #1
 802f67a:	e7d2      	b.n	802f622 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x36>
    else if(m_buttonController && m_buttonController->isButtonHeld(3))
 802f67c:	2103      	movs	r1, #3
 802f67e:	f7e7 faaa 	bl	8016bd6 <_ZN23TouchGfxInputController12isButtonHeldEh>
 802f682:	2800      	cmp	r0, #0
 802f684:	d0db      	beq.n	802f63e <_ZN17ScreenTrailerView18updateButtonStatesEv+0x52>
        TrailerLatchtest = 1;
 802f686:	2301      	movs	r3, #1
 802f688:	7023      	strb	r3, [r4, #0]
        TrailerTraystate = 3;
 802f68a:	4b04      	ldr	r3, [pc, #16]	@ (802f69c <_ZN17ScreenTrailerView18updateButtonStatesEv+0xb0>)
 802f68c:	2203      	movs	r2, #3
 802f68e:	701a      	strb	r2, [r3, #0]
 802f690:	e7de      	b.n	802f650 <_ZN17ScreenTrailerView18updateButtonStatesEv+0x64>
 802f692:	bf00      	nop
 802f694:	20001d9c 	.word	0x20001d9c
 802f698:	20001d9b 	.word	0x20001d9b
 802f69c:	20001d99 	.word	0x20001d99
 802f6a0:	20001d9a 	.word	0x20001d9a

0802f6a4 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model>:

    return changed;
}

bool ScreenTrailerView::updatePTODisplay(const Model& model)
{
 802f6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f6a8:	4604      	mov	r4, r0
    bool changed = false;
    static bool lastPTOActive = false;
    static bool lastPTOValid = false;
    static bool firstRun = true;

    if(model.isPTOValid())
 802f6aa:	4608      	mov	r0, r1
{
 802f6ac:	460d      	mov	r5, r1
    if(model.isPTOValid())
 802f6ae:	f7fe fd84 	bl	802e1ba <_ZNK5Model10isPTOValidEv>
 802f6b2:	4e21      	ldr	r6, [pc, #132]	@ (802f738 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x94>)
 802f6b4:	4f21      	ldr	r7, [pc, #132]	@ (802f73c <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x98>)
 802f6b6:	b360      	cbz	r0, 802f712 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x6e>
    {
        bool currentPTOActive = model.isPTOActive();
 802f6b8:	4628      	mov	r0, r5

        // Check if PTO state changed or if this is the first run
        if (currentPTOActive != lastPTOActive || !lastPTOValid || firstRun)
 802f6ba:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 802f74c <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0xa8>
        bool currentPTOActive = model.isPTOActive();
 802f6be:	f7fe fd79 	bl	802e1b4 <_ZNK5Model11isPTOActiveEv>
        if (currentPTOActive != lastPTOActive || !lastPTOValid || firstRun)
 802f6c2:	f898 3000 	ldrb.w	r3, [r8]
 802f6c6:	4283      	cmp	r3, r0
        bool currentPTOActive = model.isPTOActive();
 802f6c8:	4605      	mov	r5, r0
        if (currentPTOActive != lastPTOActive || !lastPTOValid || firstRun)
 802f6ca:	d108      	bne.n	802f6de <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x3a>
 802f6cc:	7833      	ldrb	r3, [r6, #0]
 802f6ce:	b133      	cbz	r3, 802f6de <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x3a>
 802f6d0:	783b      	ldrb	r3, [r7, #0]
 802f6d2:	b923      	cbnz	r3, 802f6de <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x3a>
    bool changed = false;
 802f6d4:	2000      	movs	r0, #0
            lastPTOValid = false;
            changed = true;
        }
    }

    firstRun = false;
 802f6d6:	2300      	movs	r3, #0
 802f6d8:	703b      	strb	r3, [r7, #0]
    return changed;
}
 802f6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(currentPTOActive)
 802f6de:	2301      	movs	r3, #1
 802f6e0:	f604 1044 	addw	r0, r4, #2372	@ 0x944
 802f6e4:	b175      	cbz	r5, 802f704 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x60>
 802f6e6:	f884 3771 	strb.w	r3, [r4, #1905]	@ 0x771
                Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ON", PTOSTATUSTXT_SIZE);
 802f6ea:	4915      	ldr	r1, [pc, #84]	@ (802f740 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x9c>)
 802f6ec:	2300      	movs	r3, #0
 802f6ee:	f884 3869 	strb.w	r3, [r4, #2153]	@ 0x869
 802f6f2:	2219      	movs	r2, #25
                Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO OFF", PTOSTATUSTXT_SIZE);
 802f6f4:	f008 f85b 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            lastPTOValid = true;
 802f6f8:	2301      	movs	r3, #1
            lastPTOActive = currentPTOActive;
 802f6fa:	f888 5000 	strb.w	r5, [r8]
            lastPTOValid = true;
 802f6fe:	7033      	strb	r3, [r6, #0]
            changed = true;
 802f700:	2001      	movs	r0, #1
 802f702:	e7e8      	b.n	802f6d6 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x32>
                Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO OFF", PTOSTATUSTXT_SIZE);
 802f704:	490f      	ldr	r1, [pc, #60]	@ (802f744 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0xa0>)
 802f706:	f884 5771 	strb.w	r5, [r4, #1905]	@ 0x771
 802f70a:	f884 3869 	strb.w	r3, [r4, #2153]	@ 0x869
 802f70e:	2219      	movs	r2, #25
 802f710:	e7f0      	b.n	802f6f4 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x50>
        if (lastPTOValid || firstRun)
 802f712:	7833      	ldrb	r3, [r6, #0]
 802f714:	b913      	cbnz	r3, 802f71c <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x78>
 802f716:	783b      	ldrb	r3, [r7, #0]
 802f718:	2b00      	cmp	r3, #0
 802f71a:	d0db      	beq.n	802f6d4 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x30>
 802f71c:	2500      	movs	r5, #0
 802f71e:	2301      	movs	r3, #1
            Unicode::strncpy(PTOSTATUSTXTBuffer, "PTO ---", PTOSTATUSTXT_SIZE);
 802f720:	4909      	ldr	r1, [pc, #36]	@ (802f748 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0xa4>)
 802f722:	f884 5771 	strb.w	r5, [r4, #1905]	@ 0x771
 802f726:	f884 3869 	strb.w	r3, [r4, #2153]	@ 0x869
 802f72a:	2219      	movs	r2, #25
 802f72c:	f604 1044 	addw	r0, r4, #2372	@ 0x944
 802f730:	f008 f83d 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
            lastPTOValid = false;
 802f734:	7035      	strb	r5, [r6, #0]
            changed = true;
 802f736:	e7e3      	b.n	802f700 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model+0x5c>
 802f738:	20009e98 	.word	0x20009e98
 802f73c:	2000073c 	.word	0x2000073c
 802f740:	080417d5 	.word	0x080417d5
 802f744:	080417dc 	.word	0x080417dc
 802f748:	080417e4 	.word	0x080417e4
 802f74c:	20009e99 	.word	0x20009e99

0802f750 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model>:

bool ScreenTrailerView::updateButtonFeedbackDisplay(Model& model)
{
 802f750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bool changed = false;
    static bool lastShowTestText = false;
    static const char* lastDisplayMessage = "";

    // Handle button feedback timeout (3 seconds)
    if(showButtonFeedback)
 802f754:	f890 5b34 	ldrb.w	r5, [r0, #2868]	@ 0xb34
{
 802f758:	4607      	mov	r7, r0
 802f75a:	460e      	mov	r6, r1
    if(showButtonFeedback)
 802f75c:	bb25      	cbnz	r5, 802f7a8 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x58>

    // Determine what message to show
    bool showTestText = false;
    const char* displayMessage = "";

    if(showButtonFeedback && lastButtonPressed > 0)
 802f75e:	f897 4b34 	ldrb.w	r4, [r7, #2868]	@ 0xb34
 802f762:	bb84      	cbnz	r4, 802f7c6 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x76>
 802f764:	4625      	mov	r5, r4
        showTestText = (displayMessage[0] != '\0');
    }
    else
    {
        // No button feedback active - show nothing
        displayMessage = "";
 802f766:	4e26      	ldr	r6, [pc, #152]	@ (802f800 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0xb0>)
        showTestText = false;
    }

    // Only update display if something actually changed
    if(showTestText != lastShowTestText ||
 802f768:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 802f808 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0xb8>
 802f76c:	f898 3000 	ldrb.w	r3, [r8]
 802f770:	42a3      	cmp	r3, r4
 802f772:	d13b      	bne.n	802f7ec <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x9c>
 802f774:	b1ac      	cbz	r4, 802f7a2 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x52>
       (showTestText && strcmp(displayMessage, lastDisplayMessage) != 0))
 802f776:	4b23      	ldr	r3, [pc, #140]	@ (802f804 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0xb4>)
 802f778:	4630      	mov	r0, r6
 802f77a:	6819      	ldr	r1, [r3, #0]
 802f77c:	f7e5 fe40 	bl	8015400 <strcmp>
 802f780:	b178      	cbz	r0, 802f7a2 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x52>
 802f782:	2301      	movs	r3, #1
 802f784:	f887 3609 	strb.w	r3, [r7, #1545]	@ 0x609
    {
        testtext.setVisible(showTestText);

        if(showTestText && displayMessage[0] != '\0')
 802f788:	7833      	ldrb	r3, [r6, #0]
 802f78a:	b12b      	cbz	r3, 802f798 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x48>
        {
            Unicode::strncpy(testtextBuffer, displayMessage, TESTTEXT_SIZE);
 802f78c:	2219      	movs	r2, #25
 802f78e:	4631      	mov	r1, r6
 802f790:	f607 1012 	addw	r0, r7, #2322	@ 0x912
 802f794:	f008 f80b 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
                testtextBuffer[0] = '\0';
            }
        }

        lastShowTestText = showTestText;
        lastDisplayMessage = displayMessage;
 802f798:	4b1a      	ldr	r3, [pc, #104]	@ (802f804 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0xb4>)
        lastShowTestText = showTestText;
 802f79a:	f888 4000 	strb.w	r4, [r8]
        lastDisplayMessage = displayMessage;
 802f79e:	601e      	str	r6, [r3, #0]
        changed = true;
 802f7a0:	2501      	movs	r5, #1
    }

    return changed;
}
 802f7a2:	4628      	mov	r0, r5
 802f7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(HAL_GetTick() - buttonFeedbackStartTime > 3000)
 802f7a8:	f7e8 ffc0 	bl	801872c <HAL_GetTick>
 802f7ac:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 802f7b0:	1ac0      	subs	r0, r0, r3
 802f7b2:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 802f7b6:	4298      	cmp	r0, r3
 802f7b8:	d9d1      	bls.n	802f75e <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0xe>
            showButtonFeedback = false;
 802f7ba:	2400      	movs	r4, #0
 802f7bc:	f887 4b34 	strb.w	r4, [r7, #2868]	@ 0xb34
            lastButtonPressed = 0;
 802f7c0:	f8a7 4b3c 	strh.w	r4, [r7, #2876]	@ 0xb3c
 802f7c4:	e7cf      	b.n	802f766 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x16>
    if(showButtonFeedback && lastButtonPressed > 0)
 802f7c6:	f897 1b3c 	ldrb.w	r1, [r7, #2876]	@ 0xb3c
 802f7ca:	b159      	cbz	r1, 802f7e4 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x94>
        displayMessage = model.getTrailerButtonFeedbackMessage(lastButtonPressed, isButtonHeld);
 802f7cc:	4630      	mov	r0, r6
 802f7ce:	f897 2b3d 	ldrb.w	r2, [r7, #2877]	@ 0xb3d
 802f7d2:	f7fe fef5 	bl	802e5c0 <_ZNK5Model31getTrailerButtonFeedbackMessageEhb>
        showTestText = (displayMessage[0] != '\0');
 802f7d6:	7804      	ldrb	r4, [r0, #0]
 802f7d8:	3c00      	subs	r4, #0
        displayMessage = model.getTrailerButtonFeedbackMessage(lastButtonPressed, isButtonHeld);
 802f7da:	4606      	mov	r6, r0
        showTestText = (displayMessage[0] != '\0');
 802f7dc:	bf18      	it	ne
 802f7de:	2401      	movne	r4, #1
 802f7e0:	2500      	movs	r5, #0
 802f7e2:	e7c1      	b.n	802f768 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x18>
        displayMessage = "";
 802f7e4:	4e06      	ldr	r6, [pc, #24]	@ (802f800 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0xb0>)
 802f7e6:	460d      	mov	r5, r1
        showTestText = false;
 802f7e8:	460c      	mov	r4, r1
 802f7ea:	e7bd      	b.n	802f768 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x18>
 802f7ec:	f887 4609 	strb.w	r4, [r7, #1545]	@ 0x609
        if(showTestText && displayMessage[0] != '\0')
 802f7f0:	2c00      	cmp	r4, #0
 802f7f2:	d1c9      	bne.n	802f788 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x38>
            if(lastShowTestText && !showTestText)
 802f7f4:	2b00      	cmp	r3, #0
 802f7f6:	d0cf      	beq.n	802f798 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x48>
                testtextBuffer[0] = '\0';
 802f7f8:	f8a7 4912 	strh.w	r4, [r7, #2322]	@ 0x912
 802f7fc:	e7cc      	b.n	802f798 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model+0x48>
 802f7fe:	bf00      	nop
 802f800:	0803f6b1 	.word	0x0803f6b1
 802f804:	20000738 	.word	0x20000738
 802f808:	20009e97 	.word	0x20009e97

0802f80c <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model>:

bool ScreenTrailerView::updateAlarmDisplay(Model& model)
{
 802f80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f810:	4604      	mov	r4, r0
    bool changed = false;
    static bool lastAlarmState = false;
    static Model::ErrorState lastErrorState = Model::ERROR_NONE;

    bool currentAlarmState = model.isAlarmActive();
 802f812:	4608      	mov	r0, r1
{
 802f814:	460e      	mov	r6, r1
    bool currentAlarmState = model.isAlarmActive();
 802f816:	f7fe fbc5 	bl	802dfa4 <_ZNK5Model13isAlarmActiveEv>
    Model::ErrorState currentErrorState = model.getErrorState();

    // Check if alarm state changed
    if(currentAlarmState != lastAlarmState || currentErrorState != lastErrorState)
 802f81a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 802f8a0 <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x94>
 802f81e:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 802f8a4 <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x98>
    bool currentAlarmState = model.isAlarmActive();
 802f822:	4605      	mov	r5, r0
    Model::ErrorState currentErrorState = model.getErrorState();
 802f824:	4630      	mov	r0, r6
 802f826:	f7fe fcb6 	bl	802e196 <_ZNK5Model13getErrorStateEv>
    if(currentAlarmState != lastAlarmState || currentErrorState != lastErrorState)
 802f82a:	f89a 3000 	ldrb.w	r3, [sl]
 802f82e:	42ab      	cmp	r3, r5
    Model::ErrorState currentErrorState = model.getErrorState();
 802f830:	4680      	mov	r8, r0
    if(currentAlarmState != lastAlarmState || currentErrorState != lastErrorState)
 802f832:	d103      	bne.n	802f83c <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x30>
 802f834:	f899 3000 	ldrb.w	r3, [r9]
 802f838:	4283      	cmp	r3, r0
 802f83a:	d02f      	beq.n	802f89c <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x90>
 802f83c:	f884 579d 	strb.w	r5, [r4, #1949]	@ 0x79d
 802f840:	f884 5895 	strb.w	r5, [r4, #2197]	@ 0x895
    {
        // Update alarm popup visibility
        Alarmpopup.setVisible(currentAlarmState);
        ALARM.setVisible(currentAlarmState);  // ALARM image follows popup state

        if(currentAlarmState)
 802f844:	b1fd      	cbz	r5, 802f886 <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x7a>
        {
            // Update alarm title and description using TouchGFX Unicode functions
            const char* title = model.getAlarmTitle();
 802f846:	4630      	mov	r0, r6
 802f848:	f7fe fbb0 	bl	802dfac <_ZNK5Model13getAlarmTitleEv>
 802f84c:	4607      	mov	r7, r0
            const char* description = model.getAlarmDescription();
 802f84e:	4630      	mov	r0, r6
 802f850:	f7fe fbbc 	bl	802dfcc <_ZNK5Model19getAlarmDescriptionEv>
 802f854:	4606      	mov	r6, r0

            // Copy title using Unicode::strncpy
            if (title && strlen(title) > 0) {
 802f856:	b157      	cbz	r7, 802f86e <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x62>
 802f858:	783b      	ldrb	r3, [r7, #0]
 802f85a:	b143      	cbz	r3, 802f86e <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x62>
                Unicode::strncpy(AlarmtitletextBuffer, title, ALARMTITLETEXT_SIZE - 1);
 802f85c:	222c      	movs	r2, #44	@ 0x2c
 802f85e:	4639      	mov	r1, r7
 802f860:	f604 20ba 	addw	r0, r4, #2746	@ 0xaba
 802f864:	f007 ffa3 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
                AlarmtitletextBuffer[ALARMTITLETEXT_SIZE - 1] = 0; // Ensure null termination
 802f868:	2300      	movs	r3, #0
 802f86a:	f8a4 3b12 	strh.w	r3, [r4, #2834]	@ 0xb12
            }

            // Copy description using Unicode::strncpy
            if (description && strlen(description) > 0) {
 802f86e:	b156      	cbz	r6, 802f886 <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x7a>
 802f870:	7833      	ldrb	r3, [r6, #0]
 802f872:	b143      	cbz	r3, 802f886 <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x7a>
                Unicode::strncpy(AlarmdesctextBuffer, description, ALARMDESCTEXT_SIZE - 1);
 802f874:	2295      	movs	r2, #149	@ 0x95
 802f876:	4631      	mov	r1, r6
 802f878:	f604 108e 	addw	r0, r4, #2446	@ 0x98e
 802f87c:	f007 ff97 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
                AlarmdesctextBuffer[ALARMDESCTEXT_SIZE - 1] = 0; // Ensure null termination
 802f880:	2300      	movs	r3, #0
 802f882:	f8a4 3ab8 	strh.w	r3, [r4, #2744]	@ 0xab8
 802f886:	f884 581d 	strb.w	r5, [r4, #2077]	@ 0x81d
 802f88a:	f884 57d1 	strb.w	r5, [r4, #2001]	@ 0x7d1
            // Hide alarm text elements when no alarm
            Alarmtitletext.setVisible(false);
            Alarmdesctext.setVisible(false);
        }

        lastAlarmState = currentAlarmState;
 802f88e:	f88a 5000 	strb.w	r5, [sl]
        lastErrorState = currentErrorState;
 802f892:	f889 8000 	strb.w	r8, [r9]
        changed = true;
 802f896:	2001      	movs	r0, #1
    }

    return changed;
}
 802f898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bool changed = false;
 802f89c:	2000      	movs	r0, #0
 802f89e:	e7fb      	b.n	802f898 <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model+0x8c>
 802f8a0:	20009e96 	.word	0x20009e96
 802f8a4:	20009e95 	.word	0x20009e95

0802f8a8 <_ZN17ScreenTrailerView18updateLatchDisplayEv>:

bool ScreenTrailerView::updateLatchDisplay()
{
 802f8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool changed = false;
    static uint8_t lastTrailerLatchtest = 0;
    static bool firstRun = true;

    // Check if TrailerLatchtest state changed OR first run
    if(TrailerLatchtest != lastTrailerLatchtest || firstRun)
 802f8aa:	4f0e      	ldr	r7, [pc, #56]	@ (802f8e4 <_ZN17ScreenTrailerView18updateLatchDisplayEv+0x3c>)
 802f8ac:	4e0e      	ldr	r6, [pc, #56]	@ (802f8e8 <_ZN17ScreenTrailerView18updateLatchDisplayEv+0x40>)
 802f8ae:	783b      	ldrb	r3, [r7, #0]
 802f8b0:	7832      	ldrb	r2, [r6, #0]
 802f8b2:	4d0e      	ldr	r5, [pc, #56]	@ (802f8ec <_ZN17ScreenTrailerView18updateLatchDisplayEv+0x44>)
 802f8b4:	429a      	cmp	r2, r3
{
 802f8b6:	4604      	mov	r4, r0
    if(TrailerLatchtest != lastTrailerLatchtest || firstRun)
 802f8b8:	d101      	bne.n	802f8be <_ZN17ScreenTrailerView18updateLatchDisplayEv+0x16>
 802f8ba:	7828      	ldrb	r0, [r5, #0]
 802f8bc:	b180      	cbz	r0, 802f8e0 <_ZN17ScreenTrailerView18updateLatchDisplayEv+0x38>
    {
        // Simple logic: if TrailerLatchtest is 1, show "CLOSE", if 0 show "OPEN"
        const char* latchText = (TrailerLatchtest == 1) ? "CLOSE" : "OPEN";

        // Update the LATCH text area
        Unicode::strncpy(LATCHBuffer, latchText, LATCH_SIZE - 1);
 802f8be:	480c      	ldr	r0, [pc, #48]	@ (802f8f0 <_ZN17ScreenTrailerView18updateLatchDisplayEv+0x48>)
 802f8c0:	490c      	ldr	r1, [pc, #48]	@ (802f8f4 <_ZN17ScreenTrailerView18updateLatchDisplayEv+0x4c>)
 802f8c2:	220c      	movs	r2, #12
 802f8c4:	2b01      	cmp	r3, #1
 802f8c6:	bf18      	it	ne
 802f8c8:	4601      	movne	r1, r0
 802f8ca:	f604 00f8 	addw	r0, r4, #2296	@ 0x8f8
 802f8ce:	f007 ff6e 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
        LATCHBuffer[LATCH_SIZE - 1] = 0;
 802f8d2:	2300      	movs	r3, #0

        lastTrailerLatchtest = TrailerLatchtest;
 802f8d4:	783a      	ldrb	r2, [r7, #0]
        LATCHBuffer[LATCH_SIZE - 1] = 0;
 802f8d6:	f8a4 3910 	strh.w	r3, [r4, #2320]	@ 0x910
        lastTrailerLatchtest = TrailerLatchtest;
 802f8da:	7032      	strb	r2, [r6, #0]
        firstRun = false;
 802f8dc:	702b      	strb	r3, [r5, #0]
        changed = true;
 802f8de:	2001      	movs	r0, #1
    }

    return changed;
}
 802f8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802f8e2:	bf00      	nop
 802f8e4:	20001d9a 	.word	0x20001d9a
 802f8e8:	20009e94 	.word	0x20009e94
 802f8ec:	20000734 	.word	0x20000734
 802f8f0:	080410de 	.word	0x080410de
 802f8f4:	080417cf 	.word	0x080417cf

0802f8f8 <_ZN17ScreenTrailerView13buttonHandlerEh>:
{
 802f8f8:	b538      	push	{r3, r4, r5, lr}
 802f8fa:	460d      	mov	r5, r1
 802f8fc:	4604      	mov	r4, r0
    buttonHandlerObj.handleKey(value);
 802f8fe:	f600 3014 	addw	r0, r0, #2836	@ 0xb14
 802f902:	f7e6 ff01 	bl	8016708 <_ZN13ButtonHandler9handleKeyEh>
    switch (value)
 802f906:	2d02      	cmp	r5, #2
 802f908:	d805      	bhi.n	802f916 <_ZN17ScreenTrailerView13buttonHandlerEh+0x1e>
 802f90a:	b9ad      	cbnz	r5, 802f938 <_ZN17ScreenTrailerView13buttonHandlerEh+0x40>
 802f90c:	1d20      	adds	r0, r4, #4
}
 802f90e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802f912:	f006 babb 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
    switch (value)
 802f916:	2d03      	cmp	r5, #3
 802f918:	d1f8      	bne.n	802f90c <_ZN17ScreenTrailerView13buttonHandlerEh+0x14>
        	trailerLatchState = !trailerLatchState;
 802f91a:	4a0f      	ldr	r2, [pc, #60]	@ (802f958 <_ZN17ScreenTrailerView13buttonHandlerEh+0x60>)
 802f91c:	7813      	ldrb	r3, [r2, #0]
 802f91e:	f083 0301 	eor.w	r3, r3, #1
 802f922:	7013      	strb	r3, [r2, #0]
        	TrailerLatchtest = trailerLatchState ? 1 : 0;
 802f924:	b1ab      	cbz	r3, 802f952 <_ZN17ScreenTrailerView13buttonHandlerEh+0x5a>
 802f926:	2301      	movs	r3, #1
 802f928:	4a0c      	ldr	r2, [pc, #48]	@ (802f95c <_ZN17ScreenTrailerView13buttonHandlerEh+0x64>)
 802f92a:	7013      	strb	r3, [r2, #0]
        	TrailerTraystate = trailerLatchState ? 3 : 0;
 802f92c:	4b0c      	ldr	r3, [pc, #48]	@ (802f960 <_ZN17ScreenTrailerView13buttonHandlerEh+0x68>)
 802f92e:	701d      	strb	r5, [r3, #0]
            lastButtonPressed = 3;
 802f930:	2303      	movs	r3, #3
 802f932:	f884 3b3c 	strb.w	r3, [r4, #2876]	@ 0xb3c
 802f936:	e001      	b.n	802f93c <_ZN17ScreenTrailerView13buttonHandlerEh+0x44>
            lastButtonPressed = value;
 802f938:	f884 5b3c 	strb.w	r5, [r4, #2876]	@ 0xb3c
            showButtonFeedback = true;
 802f93c:	2301      	movs	r3, #1
 802f93e:	f884 3b34 	strb.w	r3, [r4, #2868]	@ 0xb34
            buttonFeedbackStartTime = HAL_GetTick();
 802f942:	f7e8 fef3 	bl	801872c <HAL_GetTick>
            isButtonHeld = false;
 802f946:	2300      	movs	r3, #0
            buttonFeedbackStartTime = HAL_GetTick();
 802f948:	f8c4 0b38 	str.w	r0, [r4, #2872]	@ 0xb38
            isButtonHeld = false;
 802f94c:	f884 3b3d 	strb.w	r3, [r4, #2877]	@ 0xb3d
            break;
 802f950:	e7dc      	b.n	802f90c <_ZN17ScreenTrailerView13buttonHandlerEh+0x14>
        	TrailerTraystate = trailerLatchState ? 3 : 0;
 802f952:	461d      	mov	r5, r3
 802f954:	e7e8      	b.n	802f928 <_ZN17ScreenTrailerView13buttonHandlerEh+0x30>
 802f956:	bf00      	nop
 802f958:	20009e9b 	.word	0x20009e9b
 802f95c:	20001d9a 	.word	0x20001d9a
 802f960:	20001d99 	.word	0x20001d99

0802f964 <_ZN17ScreenTrailerView31forceUpdateTrailerStatusDisplayERK5Model>:
{
 802f964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802f968:	4604      	mov	r4, r0
    Model::TrailerState trailerState = model.getTrailerState();
 802f96a:	4608      	mov	r0, r1
{
 802f96c:	460d      	mov	r5, r1
    Model::TrailerState trailerState = model.getTrailerState();
 802f96e:	f7fe fc15 	bl	802e19c <_ZNK5Model15getTrailerStateEv>
 802f972:	4607      	mov	r7, r0
    newBitmapId = model.getTrailerStateBitmapId();
 802f974:	4628      	mov	r0, r5
 802f976:	f7fe fc2f 	bl	802e1d8 <_ZNK5Model23getTrailerStateBitmapIdEv>
    switch(trailerState)
 802f97a:	2f02      	cmp	r7, #2
    newBitmapId = model.getTrailerStateBitmapId();
 802f97c:	4606      	mov	r6, r0
    switch(trailerState)
 802f97e:	d018      	beq.n	802f9b2 <_ZN17ScreenTrailerView31forceUpdateTrailerStatusDisplayERK5Model+0x4e>
 802f980:	2f04      	cmp	r7, #4
 802f982:	f04f 0500 	mov.w	r5, #0
 802f986:	d019      	beq.n	802f9bc <_ZN17ScreenTrailerView31forceUpdateTrailerStatusDisplayERK5Model+0x58>
            showUnlocked = true;
 802f988:	f04f 0801 	mov.w	r8, #1
    bool showLocked = false;
 802f98c:	2700      	movs	r7, #0
    statusImage.setBitmap(Bitmap(newBitmapId));
 802f98e:	a901      	add	r1, sp, #4
 802f990:	f504 709e 	add.w	r0, r4, #316	@ 0x13c
 802f994:	f8ad 6004 	strh.w	r6, [sp, #4]
 802f998:	f001 fa2b 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    previousBitmapId = newBitmapId;
 802f99c:	f8a4 6b3e 	strh.w	r6, [r4, #2878]	@ 0xb3e
 802f9a0:	f884 8745 	strb.w	r8, [r4, #1861]	@ 0x745
 802f9a4:	f884 76ed 	strb.w	r7, [r4, #1773]	@ 0x6ed
 802f9a8:	f884 5719 	strb.w	r5, [r4, #1817]	@ 0x719
}
 802f9ac:	b002      	add	sp, #8
 802f9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            showMoving = model.getFlashState();
 802f9b2:	4628      	mov	r0, r5
 802f9b4:	f7fe fbf5 	bl	802e1a2 <_ZNK5Model13getFlashStateEv>
 802f9b8:	4605      	mov	r5, r0
 802f9ba:	e7e5      	b.n	802f988 <_ZN17ScreenTrailerView31forceUpdateTrailerStatusDisplayERK5Model+0x24>
    bool showUnlocked = false;
 802f9bc:	46a8      	mov	r8, r5
            showLocked = true;
 802f9be:	2701      	movs	r7, #1
 802f9c0:	e7e5      	b.n	802f98e <_ZN17ScreenTrailerView31forceUpdateTrailerStatusDisplayERK5Model+0x2a>

0802f9c2 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model>:
{
 802f9c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f9c6:	4604      	mov	r4, r0
    Model::TrailerState trailerState = model.getTrailerState();
 802f9c8:	4608      	mov	r0, r1
{
 802f9ca:	460d      	mov	r5, r1
    Model::TrailerState trailerState = model.getTrailerState();
 802f9cc:	f7fe fbe6 	bl	802e19c <_ZNK5Model15getTrailerStateEv>
 802f9d0:	4607      	mov	r7, r0
    newBitmapId = model.getTrailerStateBitmapId();
 802f9d2:	4628      	mov	r0, r5
 802f9d4:	f7fe fc00 	bl	802e1d8 <_ZNK5Model23getTrailerStateBitmapIdEv>
    switch(trailerState)
 802f9d8:	2f04      	cmp	r7, #4
    newBitmapId = model.getTrailerStateBitmapId();
 802f9da:	4606      	mov	r6, r0
    switch(trailerState)
 802f9dc:	d030      	beq.n	802fa40 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x7e>
            showMoving = (trailerState == Model::TRAILER_STATE_MOVING) ? model.getFlashState() : false;
 802f9de:	2f02      	cmp	r7, #2
 802f9e0:	d132      	bne.n	802fa48 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x86>
 802f9e2:	4628      	mov	r0, r5
 802f9e4:	f7fe fbdd 	bl	802e1a2 <_ZNK5Model13getFlashStateEv>
            showUnlocked = true;
 802f9e8:	f04f 0801 	mov.w	r8, #1
            showMoving = (trailerState == Model::TRAILER_STATE_MOVING) ? model.getFlashState() : false;
 802f9ec:	4605      	mov	r5, r0
            showLocked = false;
 802f9ee:	2700      	movs	r7, #0
    if(newBitmapId != previousBitmapId)
 802f9f0:	f8b4 3b3e 	ldrh.w	r3, [r4, #2878]	@ 0xb3e
 802f9f4:	42b3      	cmp	r3, r6
 802f9f6:	d02c      	beq.n	802fa52 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x90>
        statusImage.setBitmap(Bitmap(newBitmapId));
 802f9f8:	f504 799e 	add.w	r9, r4, #316	@ 0x13c
 802f9fc:	a901      	add	r1, sp, #4
 802f9fe:	4648      	mov	r0, r9
 802fa00:	f8ad 6004 	strh.w	r6, [sp, #4]
 802fa04:	f001 f9f5 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        statusImage.invalidate();
 802fa08:	4648      	mov	r0, r9
 802fa0a:	f006 fa3f 	bl	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
        previousBitmapId = newBitmapId;
 802fa0e:	f8a4 6b3e 	strh.w	r6, [r4, #2878]	@ 0xb3e
        changed = true;
 802fa12:	2001      	movs	r0, #1
    if (currentUnlocked != showUnlocked ||
 802fa14:	f894 1745 	ldrb.w	r1, [r4, #1861]	@ 0x745
        return visible;
 802fa18:	f894 26ed 	ldrb.w	r2, [r4, #1773]	@ 0x6ed
 802fa1c:	f894 3719 	ldrb.w	r3, [r4, #1817]	@ 0x719
 802fa20:	4541      	cmp	r1, r8
 802fa22:	d118      	bne.n	802fa56 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x94>
 802fa24:	4297      	cmp	r7, r2
 802fa26:	d116      	bne.n	802fa56 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x94>
        changed = true;
 802fa28:	429d      	cmp	r5, r3
 802fa2a:	bf18      	it	ne
 802fa2c:	2001      	movne	r0, #1
        visible = vis;
 802fa2e:	f884 8745 	strb.w	r8, [r4, #1861]	@ 0x745
 802fa32:	f884 76ed 	strb.w	r7, [r4, #1773]	@ 0x6ed
 802fa36:	f884 5719 	strb.w	r5, [r4, #1817]	@ 0x719
}
 802fa3a:	b003      	add	sp, #12
 802fa3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            showMoving = false;
 802fa40:	2500      	movs	r5, #0
            showUnlocked = false;
 802fa42:	46a8      	mov	r8, r5
            showLocked = true;
 802fa44:	2701      	movs	r7, #1
 802fa46:	e7d3      	b.n	802f9f0 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x2e>
            showMoving = (trailerState == Model::TRAILER_STATE_MOVING) ? model.getFlashState() : false;
 802fa48:	2500      	movs	r5, #0
            showUnlocked = true;
 802fa4a:	f04f 0801 	mov.w	r8, #1
            showLocked = false;
 802fa4e:	462f      	mov	r7, r5
 802fa50:	e7ce      	b.n	802f9f0 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x2e>
    bool changed = false;
 802fa52:	2000      	movs	r0, #0
 802fa54:	e7de      	b.n	802fa14 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x52>
        changed = true;
 802fa56:	2001      	movs	r0, #1
 802fa58:	e7e9      	b.n	802fa2e <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model+0x6c>
	...

0802fa5c <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model>:
{
 802fa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802fa5e:	4604      	mov	r4, r0
    if(model.isRollValid())
 802fa60:	4608      	mov	r0, r1
{
 802fa62:	460d      	mov	r5, r1
    if(model.isRollValid())
 802fa64:	f7fe fba3 	bl	802e1ae <_ZNK5Model11isRollValidEv>
 802fa68:	f604 1776 	addw	r7, r4, #2422	@ 0x976
 802fa6c:	f504 7657 	add.w	r6, r4, #860	@ 0x35c
 802fa70:	f204 4474 	addw	r4, r4, #1140	@ 0x474
 802fa74:	b318      	cbz	r0, 802fabe <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model+0x62>
        int16_t rollValue = model.getRollValue();
 802fa76:	4628      	mov	r0, r5
 802fa78:	f7fe fb96 	bl	802e1a8 <_ZNK5Model12getRollValueEv>
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%d", rollValue);
 802fa7c:	4a13      	ldr	r2, [pc, #76]	@ (802facc <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model+0x70>)
        int16_t rollValue = model.getRollValue();
 802fa7e:	4605      	mov	r5, r0
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%d", rollValue);
 802fa80:	4603      	mov	r3, r0
 802fa82:	210c      	movs	r1, #12
 802fa84:	4638      	mov	r0, r7
 802fa86:	f008 f9f3 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        if(rollValue > 0)
 802fa8a:	2d00      	cmp	r5, #0
 802fa8c:	dd06      	ble.n	802fa9c <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model+0x40>
            imageProgressRollPos.setValue(rollValue + 64);
 802fa8e:	f105 0140 	add.w	r1, r5, #64	@ 0x40
        imageProgressRollPos.setValue(64);
 802fa92:	4630      	mov	r0, r6
 802fa94:	f000 fe4a 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        imageProgressRollNeg.setValue(64);
 802fa98:	2140      	movs	r1, #64	@ 0x40
 802fa9a:	e00b      	b.n	802fab4 <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model+0x58>
            imageProgressRollPos.setValue(64);
 802fa9c:	f04f 0140 	mov.w	r1, #64	@ 0x40
 802faa0:	4630      	mov	r0, r6
        else if(rollValue < 0)
 802faa2:	d0f7      	beq.n	802fa94 <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model+0x38>
            imageProgressRollPos.setValue(64);
 802faa4:	f000 fe42 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
            imageProgressRollNeg.setValue(abs(rollValue) + 64);
 802faa8:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 802faac:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 802fab0:	3140      	adds	r1, #64	@ 0x40
 802fab2:	b289      	uxth	r1, r1
        imageProgressRollNeg.setValue(64);
 802fab4:	4620      	mov	r0, r4
}
 802fab6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        imageProgressRollNeg.setValue(64);
 802faba:	f000 be37 	b.w	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "----");
 802fabe:	210c      	movs	r1, #12
 802fac0:	4a03      	ldr	r2, [pc, #12]	@ (802fad0 <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model+0x74>)
 802fac2:	4638      	mov	r0, r7
 802fac4:	f008 f9d4 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        imageProgressRollPos.setValue(64);
 802fac8:	2140      	movs	r1, #64	@ 0x40
 802faca:	e7e2      	b.n	802fa92 <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model+0x36>
 802facc:	080410f9 	.word	0x080410f9
 802fad0:	080410c1 	.word	0x080410c1

0802fad4 <_ZN17ScreenTrailerView22initializeDisplayStateEv>:
{
 802fad4:	b538      	push	{r3, r4, r5, lr}
 802fad6:	4604      	mov	r4, r0
 802fad8:	f005 f918 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 802fadc:	f8d0 5158 	ldr.w	r5, [r0, #344]	@ 0x158
    forceUpdateTrailerStatusDisplay(model);
 802fae0:	4620      	mov	r0, r4
 802fae2:	4629      	mov	r1, r5
 802fae4:	f7ff ff3e 	bl	802f964 <_ZN17ScreenTrailerView31forceUpdateTrailerStatusDisplayERK5Model>
    forceUpdateRollDisplay(model);
 802fae8:	4629      	mov	r1, r5
 802faea:	4620      	mov	r0, r4
 802faec:	f7ff ffb6 	bl	802fa5c <_ZN17ScreenTrailerView22forceUpdateRollDisplayERK5Model>
    forceUpdatePTODisplay(model);
 802faf0:	4620      	mov	r0, r4
 802faf2:	4629      	mov	r1, r5
 802faf4:	f7ff fd4a 	bl	802f58c <_ZN17ScreenTrailerView21forceUpdatePTODisplayERK5Model>
 802faf8:	1d20      	adds	r0, r4, #4
}
 802fafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802fafe:	f006 b9c5 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>

0802fb02 <_ZN17ScreenTrailerView11setupScreenEv>:
{
 802fb02:	b510      	push	{r4, lr}
 802fb04:	4604      	mov	r4, r0
    ScreenTrailerViewBase::setupScreen();
 802fb06:	f7fc fbf6 	bl	802c2f6 <_ZN21ScreenTrailerViewBase11setupScreenEv>
    initializeDisplayState();
 802fb0a:	4620      	mov	r0, r4
 802fb0c:	f7ff ffe2 	bl	802fad4 <_ZN17ScreenTrailerView22initializeDisplayStateEv>
    initializeAlarmDisplay();
 802fb10:	4620      	mov	r0, r4
 802fb12:	f7ff fcfd 	bl	802f510 <_ZN17ScreenTrailerView22initializeAlarmDisplayEv>
    initializeLatchDisplay();
 802fb16:	4620      	mov	r0, r4
}
 802fb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    initializeLatchDisplay();
 802fb1c:	f7ff bce0 	b.w	802f4e0 <_ZN17ScreenTrailerView22initializeLatchDisplayEv>

0802fb20 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model>:
{
 802fb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802fb22:	4604      	mov	r4, r0
    if(model.isRollValid())
 802fb24:	4608      	mov	r0, r1
{
 802fb26:	460e      	mov	r6, r1
    if(model.isRollValid())
 802fb28:	f7fe fb41 	bl	802e1ae <_ZNK5Model11isRollValidEv>
 802fb2c:	4f25      	ldr	r7, [pc, #148]	@ (802fbc4 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0xa4>)
 802fb2e:	4605      	mov	r5, r0
 802fb30:	b390      	cbz	r0, 802fb98 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x78>
        int16_t rollValue = model.getRollValue();
 802fb32:	4630      	mov	r0, r6
        if (rollValue != lastRollValue || !lastRollValid)
 802fb34:	4e24      	ldr	r6, [pc, #144]	@ (802fbc8 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0xa8>)
        int16_t rollValue = model.getRollValue();
 802fb36:	f7fe fb37 	bl	802e1a8 <_ZNK5Model12getRollValueEv>
        if (rollValue != lastRollValue || !lastRollValid)
 802fb3a:	f9b6 3000 	ldrsh.w	r3, [r6]
 802fb3e:	4283      	cmp	r3, r0
        int16_t rollValue = model.getRollValue();
 802fb40:	4605      	mov	r5, r0
        if (rollValue != lastRollValue || !lastRollValid)
 802fb42:	d103      	bne.n	802fb4c <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x2c>
 802fb44:	783b      	ldrb	r3, [r7, #0]
 802fb46:	b10b      	cbz	r3, 802fb4c <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x2c>
    bool changed = false;
 802fb48:	2000      	movs	r0, #0
}
 802fb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "%d", rollValue);
 802fb4c:	f604 1076 	addw	r0, r4, #2422	@ 0x976
 802fb50:	4a1e      	ldr	r2, [pc, #120]	@ (802fbcc <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0xac>)
 802fb52:	462b      	mov	r3, r5
 802fb54:	210c      	movs	r1, #12
 802fb56:	f008 f98b 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
            if(rollValue > 0)
 802fb5a:	2d00      	cmp	r5, #0
 802fb5c:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 802fb60:	f204 4474 	addw	r4, r4, #1140	@ 0x474
 802fb64:	dd05      	ble.n	802fb72 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x52>
                imageProgressRollPos.setValue(rollValue + 64);
 802fb66:	f105 0140 	add.w	r1, r5, #64	@ 0x40
                imageProgressRollPos.setValue(64);
 802fb6a:	f000 fddf 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
                imageProgressRollNeg.setValue(64);
 802fb6e:	2140      	movs	r1, #64	@ 0x40
 802fb70:	e00a      	b.n	802fb88 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x68>
                imageProgressRollPos.setValue(64);
 802fb72:	f04f 0140 	mov.w	r1, #64	@ 0x40
            else if(rollValue < 0)
 802fb76:	d0f8      	beq.n	802fb6a <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x4a>
                imageProgressRollPos.setValue(64);
 802fb78:	f000 fdd8 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
                imageProgressRollNeg.setValue(abs(rollValue) + 64);
 802fb7c:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 802fb80:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 802fb84:	3140      	adds	r1, #64	@ 0x40
 802fb86:	b289      	uxth	r1, r1
                imageProgressRollNeg.setValue(64);
 802fb88:	4620      	mov	r0, r4
 802fb8a:	f000 fdcf 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
            lastRollValid = true;
 802fb8e:	2301      	movs	r3, #1
            lastRollValue = rollValue;
 802fb90:	8035      	strh	r5, [r6, #0]
            lastRollValid = true;
 802fb92:	703b      	strb	r3, [r7, #0]
            changed = true;
 802fb94:	2001      	movs	r0, #1
 802fb96:	e7d8      	b.n	802fb4a <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x2a>
    else if (lastRollValid)  // Only update if state changed from valid to invalid
 802fb98:	783b      	ldrb	r3, [r7, #0]
 802fb9a:	2b00      	cmp	r3, #0
 802fb9c:	d0d4      	beq.n	802fb48 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x28>
        Unicode::snprintf(textRollBuffer, TEXTROLL_SIZE, "----");
 802fb9e:	4a0c      	ldr	r2, [pc, #48]	@ (802fbd0 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0xb0>)
 802fba0:	210c      	movs	r1, #12
 802fba2:	f604 1076 	addw	r0, r4, #2422	@ 0x976
 802fba6:	f008 f963 	bl	8037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        imageProgressRollPos.setValue(64);
 802fbaa:	2140      	movs	r1, #64	@ 0x40
 802fbac:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 802fbb0:	f000 fdbc 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        imageProgressRollNeg.setValue(64);
 802fbb4:	2140      	movs	r1, #64	@ 0x40
 802fbb6:	f204 4074 	addw	r0, r4, #1140	@ 0x474
 802fbba:	f000 fdb7 	bl	803072c <_ZN8touchgfx13ImageProgress8setValueEi>
        lastRollValid = false;
 802fbbe:	703d      	strb	r5, [r7, #0]
        changed = true;
 802fbc0:	e7e8      	b.n	802fb94 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model+0x74>
 802fbc2:	bf00      	nop
 802fbc4:	20009e9a 	.word	0x20009e9a
 802fbc8:	2000073e 	.word	0x2000073e
 802fbcc:	080410f9 	.word	0x080410f9
 802fbd0:	080410c1 	.word	0x080410c1

0802fbd4 <_ZN17ScreenTrailerView15handleTickEventEv>:
{
 802fbd4:	b570      	push	{r4, r5, r6, lr}
 802fbd6:	4605      	mov	r5, r0
    updateButtonStates();
 802fbd8:	f7ff fd08 	bl	802f5ec <_ZN17ScreenTrailerView18updateButtonStatesEv>
 802fbdc:	f005 f896 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 802fbe0:	f8d0 6158 	ldr.w	r6, [r0, #344]	@ 0x158
    displayChanged |= updateTrailerStatusDisplay(model);
 802fbe4:	4628      	mov	r0, r5
 802fbe6:	4631      	mov	r1, r6
 802fbe8:	f7ff feeb 	bl	802f9c2 <_ZN17ScreenTrailerView26updateTrailerStatusDisplayERK5Model>
    displayChanged |= updateRollDisplay(model);
 802fbec:	4631      	mov	r1, r6
    displayChanged |= updateTrailerStatusDisplay(model);
 802fbee:	4604      	mov	r4, r0
    displayChanged |= updateRollDisplay(model);
 802fbf0:	4628      	mov	r0, r5
 802fbf2:	f7ff ff95 	bl	802fb20 <_ZN17ScreenTrailerView17updateRollDisplayERK5Model>
    displayChanged |= updatePTODisplay(model);
 802fbf6:	4631      	mov	r1, r6
    displayChanged |= updateRollDisplay(model);
 802fbf8:	4304      	orrs	r4, r0
    displayChanged |= updatePTODisplay(model);
 802fbfa:	4628      	mov	r0, r5
 802fbfc:	f7ff fd52 	bl	802f6a4 <_ZN17ScreenTrailerView16updatePTODisplayERK5Model>
    displayChanged |= updateRollDisplay(model);
 802fc00:	b2e4      	uxtb	r4, r4
    displayChanged |= updatePTODisplay(model);
 802fc02:	4304      	orrs	r4, r0
    displayChanged |= updateButtonFeedbackDisplay(model);
 802fc04:	4631      	mov	r1, r6
 802fc06:	4628      	mov	r0, r5
 802fc08:	f7ff fda2 	bl	802f750 <_ZN17ScreenTrailerView27updateButtonFeedbackDisplayER5Model>
    displayChanged |= updatePTODisplay(model);
 802fc0c:	b2e4      	uxtb	r4, r4
    displayChanged |= updateButtonFeedbackDisplay(model);
 802fc0e:	4304      	orrs	r4, r0
    displayChanged |= updateAlarmDisplay(model);
 802fc10:	4631      	mov	r1, r6
 802fc12:	4628      	mov	r0, r5
 802fc14:	f7ff fdfa 	bl	802f80c <_ZN17ScreenTrailerView18updateAlarmDisplayER5Model>
    displayChanged |= updateButtonFeedbackDisplay(model);
 802fc18:	b2e4      	uxtb	r4, r4
    displayChanged |= updateAlarmDisplay(model);
 802fc1a:	4304      	orrs	r4, r0
 802fc1c:	b2e4      	uxtb	r4, r4
    displayChanged |= updateLatchDisplay();
 802fc1e:	4628      	mov	r0, r5
 802fc20:	f7ff fe42 	bl	802f8a8 <_ZN17ScreenTrailerView18updateLatchDisplayEv>
    if (displayChanged) {
 802fc24:	b904      	cbnz	r4, 802fc28 <_ZN17ScreenTrailerView15handleTickEventEv+0x54>
 802fc26:	b120      	cbz	r0, 802fc32 <_ZN17ScreenTrailerView15handleTickEventEv+0x5e>
 802fc28:	1d28      	adds	r0, r5, #4
}
 802fc2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802fc2e:	f006 b92d 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
 802fc32:	bd70      	pop	{r4, r5, r6, pc}

0802fc34 <_ZNK8touchgfx5Image17invalidateContentEv>:
        return alpha;
    }

    virtual Rect getSolidRect() const;

    virtual void invalidateContent() const
 802fc34:	b508      	push	{r3, lr}
    {
        if (alpha > 0)
 802fc36:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 802fc3a:	b10b      	cbz	r3, 802fc40 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
        {
            Widget::invalidateContent();
 802fc3c:	f7f9 f8ab 	bl	8028d96 <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 802fc40:	bd08      	pop	{r3, pc}

0802fc42 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
    bool found = false;
    Drawable* head = firstChild;
 802fc42:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    bool found = false;
 802fc44:	2000      	movs	r0, #0
    while (head && !found)
 802fc46:	b103      	cbz	r3, 802fc4a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x8>
 802fc48:	b100      	cbz	r0, 802fc4c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0xa>
    {
        found = (head == &d);
        head = head->nextSibling;
    }
    return found;
}
 802fc4a:	4770      	bx	lr
        found = (head == &d);
 802fc4c:	1a5a      	subs	r2, r3, r1
 802fc4e:	4250      	negs	r0, r2
        head = head->nextSibling;
 802fc50:	699b      	ldr	r3, [r3, #24]
        found = (head == &d);
 802fc52:	4150      	adcs	r0, r2
        head = head->nextSibling;
 802fc54:	e7f7      	b.n	802fc46 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>

0802fc56 <_ZN8touchgfx9Container9removeAllEv>:
{
    while (firstChild)
    {
        Drawable* d = firstChild;
        firstChild = firstChild->nextSibling;
        d->parent = 0;
 802fc56:	2200      	movs	r2, #0
    while (firstChild)
 802fc58:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 802fc5a:	b903      	cbnz	r3, 802fc5e <_ZN8touchgfx9Container9removeAllEv+0x8>
        d->nextSibling = 0;
    }
}
 802fc5c:	4770      	bx	lr
        firstChild = firstChild->nextSibling;
 802fc5e:	6999      	ldr	r1, [r3, #24]
 802fc60:	6281      	str	r1, [r0, #40]	@ 0x28
        d->nextSibling = 0;
 802fc62:	e9c3 2205 	strd	r2, r2, [r3, #20]
 802fc66:	e7f7      	b.n	802fc58 <_ZN8touchgfx9Container9removeAllEv+0x2>

0802fc68 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
    firstChild = 0;
 802fc68:	2300      	movs	r3, #0
 802fc6a:	6283      	str	r3, [r0, #40]	@ 0x28
}
 802fc6c:	4770      	bx	lr

0802fc6e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
        d = d->nextSibling;
    }
}

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 802fc6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802fc72:	461f      	mov	r7, r3
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 802fc74:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 802fc78:	460d      	mov	r5, r1
 802fc7a:	4616      	mov	r6, r2
    if (isTouchable())
 802fc7c:	b103      	cbz	r3, 802fc80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 802fc7e:	6038      	str	r0, [r7, #0]
    }

    Drawable* d = firstChild;
 802fc80:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    while (d)
 802fc82:	b90c      	cbnz	r4, 802fc88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x1a>
            const int16_t yadj = y - d->getY();
            d->getLastChild(xadj, yadj, last);
        }
        d = d->nextSibling;
    }
}
 802fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (d->isVisible() && d->getRect().intersect(x, y))
 802fc88:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 802fc8c:	b1fb      	cbz	r3, 802fcce <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x60>
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
    {
        return otherX >= x && otherX < right() && otherY >= y && otherY < bottom();
 802fc8e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802fc92:	4285      	cmp	r5, r0
 802fc94:	db1b      	blt.n	802fcce <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x60>
        return x + width;
 802fc96:	8923      	ldrh	r3, [r4, #8]
 802fc98:	b281      	uxth	r1, r0
 802fc9a:	fa13 f080 	uxtah	r0, r3, r0
        return otherX >= x && otherX < right() && otherY >= y && otherY < bottom();
 802fc9e:	b200      	sxth	r0, r0
 802fca0:	4285      	cmp	r5, r0
 802fca2:	da14      	bge.n	802fcce <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x60>
 802fca4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802fca8:	4286      	cmp	r6, r0
 802fcaa:	db10      	blt.n	802fcce <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x60>
        return y + height;
 802fcac:	8963      	ldrh	r3, [r4, #10]
 802fcae:	b282      	uxth	r2, r0
 802fcb0:	fa13 f080 	uxtah	r0, r3, r0
        return otherX >= x && otherX < right() && otherY >= y && otherY < bottom();
 802fcb4:	b200      	sxth	r0, r0
 802fcb6:	4286      	cmp	r6, r0
 802fcb8:	da09      	bge.n	802fcce <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x60>
            d->getLastChild(xadj, yadj, last);
 802fcba:	6823      	ldr	r3, [r4, #0]
            const int16_t yadj = y - d->getY();
 802fcbc:	1ab2      	subs	r2, r6, r2
            const int16_t xadj = x - d->getX();
 802fcbe:	1a69      	subs	r1, r5, r1
            d->getLastChild(xadj, yadj, last);
 802fcc0:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 802fcc4:	b212      	sxth	r2, r2
 802fcc6:	463b      	mov	r3, r7
 802fcc8:	b209      	sxth	r1, r1
 802fcca:	4620      	mov	r0, r4
 802fccc:	47c0      	blx	r8
        d = d->nextSibling;
 802fcce:	69a4      	ldr	r4, [r4, #24]
 802fcd0:	e7d7      	b.n	802fc82 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>

0802fcd2 <_ZNK8touchgfx9Container12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 802fcd2:	2200      	movs	r2, #0
 802fcd4:	8002      	strh	r2, [r0, #0]
 802fcd6:	8042      	strh	r2, [r0, #2]
 802fcd8:	8082      	strh	r2, [r0, #4]
 802fcda:	80c2      	strh	r2, [r0, #6]
}

Rect Container::getSolidRect() const
{
    return Rect();
}
 802fcdc:	4770      	bx	lr

0802fcde <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
    }
    return contained;
}

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 802fcde:	b570      	push	{r4, r5, r6, lr}
    Drawable* d = firstChild;
 802fce0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 802fce2:	460d      	mov	r5, r1
 802fce4:	4616      	mov	r6, r2
    while (d)
 802fce6:	b904      	cbnz	r4, 802fcea <_ZN8touchgfx9Container20moveChildrenRelativeEss+0xc>
    {
        d->moveRelative(deltaX, deltaY);
        d = d->nextSibling;
    }
}
 802fce8:	bd70      	pop	{r4, r5, r6, pc}
        d->moveRelative(deltaX, deltaY);
 802fcea:	6823      	ldr	r3, [r4, #0]
 802fcec:	4620      	mov	r0, r4
 802fcee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802fcf0:	4632      	mov	r2, r6
 802fcf2:	4629      	mov	r1, r5
 802fcf4:	4798      	blx	r3
        d = d->nextSibling;
 802fcf6:	69a4      	ldr	r4, [r4, #24]
 802fcf8:	e7f5      	b.n	802fce6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>

0802fcfa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 802fcfa:	b538      	push	{r3, r4, r5, lr}
    Drawable* d = firstChild;
 802fcfc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 802fcfe:	460d      	mov	r5, r1
    while (d)
 802fd00:	b904      	cbnz	r4, 802fd04 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0xa>
    {
        function->execute(*d);
        d = d->nextSibling;
    }
}
 802fd02:	bd38      	pop	{r3, r4, r5, pc}
        function->execute(*d);
 802fd04:	682b      	ldr	r3, [r5, #0]
 802fd06:	4621      	mov	r1, r4
 802fd08:	689b      	ldr	r3, [r3, #8]
 802fd0a:	4628      	mov	r0, r5
 802fd0c:	4798      	blx	r3
        d = d->nextSibling;
 802fd0e:	69a4      	ldr	r4, [r4, #24]
 802fd10:	e7f6      	b.n	802fd00 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>

0802fd12 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 802fd12:	4770      	bx	lr

0802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
    assert(&d != this && "Cannot add Drawable to self");
 802fd14:	4288      	cmp	r0, r1
{
 802fd16:	b508      	push	{r3, lr}
    assert(&d != this && "Cannot add Drawable to self");
 802fd18:	d105      	bne.n	802fd26 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 802fd1a:	4b12      	ldr	r3, [pc, #72]	@ (802fd64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 802fd1c:	4a12      	ldr	r2, [pc, #72]	@ (802fd68 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 802fd1e:	2120      	movs	r1, #32
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 802fd20:	4812      	ldr	r0, [pc, #72]	@ (802fd6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 802fd22:	f00c fc01 	bl	803c528 <__assert_func>
 802fd26:	694b      	ldr	r3, [r1, #20]
 802fd28:	b11b      	cbz	r3, 802fd32 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 802fd2a:	4b11      	ldr	r3, [pc, #68]	@ (802fd70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 802fd2c:	4a0e      	ldr	r2, [pc, #56]	@ (802fd68 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 802fd2e:	2121      	movs	r1, #33	@ 0x21
 802fd30:	e7f6      	b.n	802fd20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
    d.nextSibling = 0;
 802fd32:	e9c1 0305 	strd	r0, r3, [r1, #20]
    if (!firstChild)
 802fd36:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 802fd38:	b93b      	cbnz	r3, 802fd4a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x36>
        firstChild = &d;
 802fd3a:	6281      	str	r1, [r0, #40]	@ 0x28
}
 802fd3c:	bd08      	pop	{r3, pc}
            assert(head != &d && "Cannot add Drawable multiple times");
 802fd3e:	428a      	cmp	r2, r1
 802fd40:	d103      	bne.n	802fd4a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x36>
 802fd42:	4b0c      	ldr	r3, [pc, #48]	@ (802fd74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 802fd44:	4a08      	ldr	r2, [pc, #32]	@ (802fd68 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 802fd46:	2132      	movs	r1, #50	@ 0x32
 802fd48:	e7ea      	b.n	802fd20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
        while (head->nextSibling)
 802fd4a:	461a      	mov	r2, r3
 802fd4c:	699b      	ldr	r3, [r3, #24]
 802fd4e:	2b00      	cmp	r3, #0
 802fd50:	d1f5      	bne.n	802fd3e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
        assert(head != &d && "Cannot add Drawable multiple times");
 802fd52:	428a      	cmp	r2, r1
 802fd54:	d103      	bne.n	802fd5e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4a>
 802fd56:	4b07      	ldr	r3, [pc, #28]	@ (802fd74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x60>)
 802fd58:	4a03      	ldr	r2, [pc, #12]	@ (802fd68 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 802fd5a:	2135      	movs	r1, #53	@ 0x35
 802fd5c:	e7e0      	b.n	802fd20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
        head->nextSibling = &d;
 802fd5e:	6191      	str	r1, [r2, #24]
}
 802fd60:	e7ec      	b.n	802fd3c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 802fd62:	bf00      	nop
 802fd64:	080417ec 	.word	0x080417ec
 802fd68:	08041818 	.word	0x08041818
 802fd6c:	08041853 	.word	0x08041853
 802fd70:	0804189f 	.word	0x0804189f
 802fd74:	080418d5 	.word	0x080418d5

0802fd78 <_ZN8touchgfx9ContainerD0Ev>:
 802fd78:	b510      	push	{r4, lr}
 802fd7a:	212c      	movs	r1, #44	@ 0x2c
 802fd7c:	4604      	mov	r4, r0
 802fd7e:	f00c fbb4 	bl	803c4ea <_ZdlPvj>
 802fd82:	4620      	mov	r0, r4
 802fd84:	bd10      	pop	{r4, pc}

0802fd86 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
    if (!firstChild)
 802fd86:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 802fd88:	b1ab      	cbz	r3, 802fdb6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x30>
    if (&d == firstChild)
 802fd8a:	428b      	cmp	r3, r1
 802fd8c:	d107      	bne.n	802fd9e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
        if (!d.nextSibling)
 802fd8e:	699a      	ldr	r2, [r3, #24]
        d.parent = 0;
 802fd90:	2100      	movs	r1, #0
 802fd92:	6159      	str	r1, [r3, #20]
            firstChild = 0;
 802fd94:	6282      	str	r2, [r0, #40]	@ 0x28
        if (!d.nextSibling)
 802fd96:	b902      	cbnz	r2, 802fd9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
            firstChild = 0;
 802fd98:	4770      	bx	lr
            d.nextSibling = 0;
 802fd9a:	6199      	str	r1, [r3, #24]
 802fd9c:	4770      	bx	lr
        if (tmp->nextSibling == &d)
 802fd9e:	461a      	mov	r2, r3
 802fda0:	699b      	ldr	r3, [r3, #24]
 802fda2:	428b      	cmp	r3, r1
 802fda4:	d105      	bne.n	802fdb2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
            tmp->nextSibling = d.nextSibling;
 802fda6:	6999      	ldr	r1, [r3, #24]
 802fda8:	6191      	str	r1, [r2, #24]
            d.parent = 0;
 802fdaa:	2200      	movs	r2, #0
            d.nextSibling = 0;
 802fdac:	e9c3 2205 	strd	r2, r2, [r3, #20]
            return;
 802fdb0:	4770      	bx	lr
    while (tmp)
 802fdb2:	2b00      	cmp	r3, #0
 802fdb4:	d1f3      	bne.n	802fd9e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
}
 802fdb6:	4770      	bx	lr

0802fdb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
    if (!firstChild)
 802fdb8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 802fdba:	b430      	push	{r4, r5}
 802fdbc:	460d      	mov	r5, r1
 802fdbe:	4604      	mov	r4, r0
 802fdc0:	4611      	mov	r1, r2
    if (!firstChild)
 802fdc2:	b91b      	cbnz	r3, 802fdcc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
    {
        // Insert as only element
        add(d);
 802fdc4:	6803      	ldr	r3, [r0, #0]
                return;
            }
            tmp = tmp->nextSibling;
        }
    }
}
 802fdc6:	bc30      	pop	{r4, r5}
        add(d);
 802fdc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 802fdca:	4718      	bx	r3
    else if (!previous)
 802fdcc:	b12d      	cbz	r5, 802fdda <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
            if (tmp == previous)
 802fdce:	42ab      	cmp	r3, r5
 802fdd0:	d108      	bne.n	802fde4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x2c>
                d.nextSibling = tmp->nextSibling;
 802fdd2:	699a      	ldr	r2, [r3, #24]
 802fdd4:	618a      	str	r2, [r1, #24]
                tmp->nextSibling = &d;
 802fdd6:	6199      	str	r1, [r3, #24]
 802fdd8:	e001      	b.n	802fdde <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x26>
        d.nextSibling = firstChild;
 802fdda:	6193      	str	r3, [r2, #24]
        firstChild = &d;
 802fddc:	62a2      	str	r2, [r4, #40]	@ 0x28
                d.parent = this;
 802fdde:	614c      	str	r4, [r1, #20]
}
 802fde0:	bc30      	pop	{r4, r5}
 802fde2:	4770      	bx	lr
            tmp = tmp->nextSibling;
 802fde4:	699b      	ldr	r3, [r3, #24]
        while (tmp)
 802fde6:	2b00      	cmp	r3, #0
 802fde8:	d0fa      	beq.n	802fde0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
            if (tmp == previous)
 802fdea:	429d      	cmp	r5, r3
 802fdec:	e7f0      	b.n	802fdd0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x18>

0802fdee <_ZNK8touchgfx9Container16getContainedAreaEv>:
 802fdee:	2300      	movs	r3, #0
{
 802fdf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
 802fdf4:	469c      	mov	ip, r3
    Drawable* d = firstChild;
 802fdf6:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
        : x(0), y(0), width(0), height(0)
 802fdf8:	8003      	strh	r3, [r0, #0]
 802fdfa:	8043      	strh	r3, [r0, #2]
 802fdfc:	8083      	strh	r3, [r0, #4]
 802fdfe:	80c3      	strh	r3, [r0, #6]
    }
 802fe00:	461f      	mov	r7, r3
 802fe02:	469e      	mov	lr, r3
 802fe04:	4619      	mov	r1, r3
 802fe06:	461a      	mov	r2, r3
 802fe08:	461e      	mov	r6, r3
 802fe0a:	461c      	mov	r4, r3
    while (d)
 802fe0c:	b96d      	cbnz	r5, 802fe2a <_ZNK8touchgfx9Container16getContainedAreaEv+0x3c>
 802fe0e:	b103      	cbz	r3, 802fe12 <_ZNK8touchgfx9Container16getContainedAreaEv+0x24>
 802fe10:	8047      	strh	r7, [r0, #2]
 802fe12:	f1be 0f00 	cmp.w	lr, #0
 802fe16:	d000      	beq.n	802fe1a <_ZNK8touchgfx9Container16getContainedAreaEv+0x2c>
 802fe18:	8001      	strh	r1, [r0, #0]
 802fe1a:	f1bc 0f00 	cmp.w	ip, #0
 802fe1e:	d000      	beq.n	802fe22 <_ZNK8touchgfx9Container16getContainedAreaEv+0x34>
 802fe20:	80c2      	strh	r2, [r0, #6]
 802fe22:	b106      	cbz	r6, 802fe26 <_ZNK8touchgfx9Container16getContainedAreaEv+0x38>
 802fe24:	8084      	strh	r4, [r0, #4]
}
 802fe26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     *
     * @param  other The other rectangle.
     */
    void expandToFit(const Rect& other)
    {
        if (!other.isEmpty())
 802fe2a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
    {
        return width <= 0 || height <= 0;
 802fe2e:	f1b9 0f00 	cmp.w	r9, #0
 802fe32:	dd14      	ble.n	802fe5e <_ZNK8touchgfx9Container16getContainedAreaEv+0x70>
 802fe34:	f9b5 800a 	ldrsh.w	r8, [r5, #10]
 802fe38:	f1b8 0f00 	cmp.w	r8, #0
 802fe3c:	dd0f      	ble.n	802fe5e <_ZNK8touchgfx9Container16getContainedAreaEv+0x70>
 802fe3e:	2c00      	cmp	r4, #0
 802fe40:	f9b5 6004 	ldrsh.w	r6, [r5, #4]
 802fe44:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 802fe48:	dd01      	ble.n	802fe4e <_ZNK8touchgfx9Container16getContainedAreaEv+0x60>
 802fe4a:	2a00      	cmp	r2, #0
 802fe4c:	dc09      	bgt.n	802fe62 <_ZNK8touchgfx9Container16getContainedAreaEv+0x74>
                x = other.x;
 802fe4e:	4631      	mov	r1, r6
                y = other.y;
 802fe50:	461f      	mov	r7, r3
                height = other.height;
 802fe52:	4642      	mov	r2, r8
                width = other.width;
 802fe54:	464c      	mov	r4, r9
    }
 802fe56:	2301      	movs	r3, #1
 802fe58:	469e      	mov	lr, r3
 802fe5a:	469c      	mov	ip, r3
 802fe5c:	461e      	mov	r6, r3
        d = d->nextSibling;
 802fe5e:	69ad      	ldr	r5, [r5, #24]
 802fe60:	e7d4      	b.n	802fe0c <_ZNK8touchgfx9Container16getContainedAreaEv+0x1e>
                int16_t newX = MIN(x, other.x);
 802fe62:	42b1      	cmp	r1, r6
 802fe64:	468c      	mov	ip, r1
 802fe66:	bfa8      	it	ge
 802fe68:	46b4      	movge	ip, r6
                int16_t newY = MIN(y, other.y);
 802fe6a:	429f      	cmp	r7, r3
 802fe6c:	46be      	mov	lr, r7
        return x + width;
 802fe6e:	4421      	add	r1, r4
                int16_t newY = MIN(y, other.y);
 802fe70:	bfa8      	it	ge
 802fe72:	469e      	movge	lr, r3
        return y + height;
 802fe74:	443a      	add	r2, r7
        return x + width;
 802fe76:	444e      	add	r6, r9
        return y + height;
 802fe78:	4443      	add	r3, r8
                int16_t endPointX = MAX(right(), other.right());
 802fe7a:	b209      	sxth	r1, r1
                int16_t endPointY = MAX(bottom(), other.bottom());
 802fe7c:	b212      	sxth	r2, r2
                int16_t endPointX = MAX(right(), other.right());
 802fe7e:	b236      	sxth	r6, r6
                int16_t endPointY = MAX(bottom(), other.bottom());
 802fe80:	b21b      	sxth	r3, r3
                width = endPointX - newX;
 802fe82:	42b1      	cmp	r1, r6
 802fe84:	bfac      	ite	ge
 802fe86:	ebcc 0401 	rsbge	r4, ip, r1
 802fe8a:	ebcc 0406 	rsblt	r4, ip, r6
                height = endPointY - newY;
 802fe8e:	429a      	cmp	r2, r3
 802fe90:	bfac      	ite	ge
 802fe92:	ebce 0102 	rsbge	r1, lr, r2
 802fe96:	ebce 0103 	rsblt	r1, lr, r3
 802fe9a:	b20a      	sxth	r2, r1
                width = endPointX - newX;
 802fe9c:	b224      	sxth	r4, r4
                y = newY;
 802fe9e:	4677      	mov	r7, lr
                x = newX;
 802fea0:	4661      	mov	r1, ip
 802fea2:	e7d8      	b.n	802fe56 <_ZNK8touchgfx9Container16getContainedAreaEv+0x68>

0802fea4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
{
 802fea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return fingerSize;
 802fea8:	4c6a      	ldr	r4, [pc, #424]	@ (8030054 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>)
 802feaa:	b09f      	sub	sp, #124	@ 0x7c
 802feac:	6824      	ldr	r4, [r4, #0]
    *fingerAdjustmentX = 0;
 802feae:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 802feb0:	f894 8049 	ldrb.w	r8, [r4, #73]	@ 0x49
{
 802feb4:	9303      	str	r3, [sp, #12]
    *fingerAdjustmentX = 0;
 802feb6:	2400      	movs	r4, #0
 802feb8:	802c      	strh	r4, [r5, #0]
    *fingerAdjustmentY = 0;
 802feba:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 802febc:	802c      	strh	r4, [r5, #0]
    *last = 0;
 802febe:	601c      	str	r4, [r3, #0]
{
 802fec0:	e9cd 1201 	strd	r1, r2, [sp, #4]
 802fec4:	4606      	mov	r6, r0
    Container::getLastChild(x, y, last);
 802fec6:	f7ff fed2 	bl	802fc6e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
    if (fingerSize > fingerSizeDistance)
 802feca:	f1b8 0f03 	cmp.w	r8, #3
 802fece:	f340 80ba 	ble.w	8030046 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1a2>
        const Rect meAbsRect = getAbsoluteRect();
 802fed2:	4631      	mov	r1, r6
 802fed4:	a80a      	add	r0, sp, #40	@ 0x28
 802fed6:	f006 f875 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
        if (*last)
 802feda:	9b03      	ldr	r3, [sp, #12]
 802fedc:	f8d3 9000 	ldr.w	r9, [r3]
 802fee0:	f1b9 0f00 	cmp.w	r9, #0
 802fee4:	f000 80b2 	beq.w	803004c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1a8>
            const Rect absRect = (*last)->getAbsoluteRect();
 802fee8:	4649      	mov	r1, r9
 802feea:	a80e      	add	r0, sp, #56	@ 0x38
 802feec:	f006 f86a 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
            const int dx = (x + meAbsRect.x) - (absRect.x + (absRect.width / 2));
 802fef0:	9b01      	ldr	r3, [sp, #4]
 802fef2:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	@ 0x28
 802fef6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
            const int dy = (y + meAbsRect.y) - (absRect.y + (absRect.height / 2));
 802fefa:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
            const int dx = (x + meAbsRect.x) - (absRect.x + (absRect.width / 2));
 802fefe:	441c      	add	r4, r3
 802ff00:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802ff04:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 802ff08:	eb02 0363 	add.w	r3, r2, r3, asr #1
 802ff0c:	1ae4      	subs	r4, r4, r3
            const int dy = (y + meAbsRect.y) - (absRect.y + (absRect.height / 2));
 802ff0e:	9a02      	ldr	r2, [sp, #8]
 802ff10:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 802ff14:	4413      	add	r3, r2
 802ff16:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	@ 0x3e
 802ff1a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 802ff1e:	eb01 0262 	add.w	r2, r1, r2, asr #1
 802ff22:	1a9b      	subs	r3, r3, r2
            bestDistance = dx * dx + dy * dy;
 802ff24:	435b      	muls	r3, r3
 802ff26:	fb04 3404 	mla	r4, r4, r4, r3
        const int samplePoints[2][4][2] = { { { 0, -1 }, { -1, 0 }, { 1, 0 }, { 0, 1 } },     // above, left, right, below
 802ff2a:	4f4b      	ldr	r7, [pc, #300]	@ (8030058 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b4>)
 802ff2c:	2303      	movs	r3, #3
        const int numRings = MIN(maxRings, (fingerSize - 1) / fingerSizeDistance);
 802ff2e:	f1b8 0f0c 	cmp.w	r8, #12
 802ff32:	bfdc      	itt	le
 802ff34:	f108 32ff 	addle.w	r2, r8, #4294967295
 802ff38:	fbb2 f3f3 	udivle	r3, r2, r3
 802ff3c:	9300      	str	r3, [sp, #0]
        const int samplePoints[2][4][2] = { { { 0, -1 }, { -1, 0 }, { 1, 0 }, { 0, 1 } },     // above, left, right, below
 802ff3e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 802ff40:	ad0e      	add	r5, sp, #56	@ 0x38
 802ff42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802ff44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 802ff46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802ff48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 802ff4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802ff4c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 802ff50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802ff54:	46c2      	mov	sl, r8
        for (int ring = 0; ring < numRings; ring++)
 802ff56:	2700      	movs	r7, #0
                const int* xy = samplePoints[ring % 2][sampleIndex];
 802ff58:	f007 0501 	and.w	r5, r7, #1
            const int distance = fingerSize * (ring + 1) / numRings;
 802ff5c:	9b00      	ldr	r3, [sp, #0]
 802ff5e:	fbba f3f3 	udiv	r3, sl, r3
            for (int sampleIndex = 0; sampleIndex < 4; sampleIndex++)
 802ff62:	aa0e      	add	r2, sp, #56	@ 0x38
                const int16_t deltaX = xy[0] * distance;
 802ff64:	b29b      	uxth	r3, r3
                const int* xy = samplePoints[ring % 2][sampleIndex];
 802ff66:	3701      	adds	r7, #1
 802ff68:	eb02 1545 	add.w	r5, r2, r5, lsl #5
            for (int sampleIndex = 0; sampleIndex < 4; sampleIndex++)
 802ff6c:	f04f 0b00 	mov.w	fp, #0
                const int16_t deltaX = xy[0] * distance;
 802ff70:	9304      	str	r3, [sp, #16]
 802ff72:	9b04      	ldr	r3, [sp, #16]
 802ff74:	6829      	ldr	r1, [r5, #0]
 802ff76:	fb11 f103 	smulbb	r1, r1, r3
 802ff7a:	b28b      	uxth	r3, r1
 802ff7c:	9305      	str	r3, [sp, #20]
                if (rect.intersect(x + deltaX, y + deltaY))
 802ff7e:	9b01      	ldr	r3, [sp, #4]
 802ff80:	fa13 f181 	uxtah	r1, r3, r1
        return otherX >= x && otherX < right() && otherY >= y && otherY < bottom();
 802ff84:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 802ff88:	b209      	sxth	r1, r1
 802ff8a:	4299      	cmp	r1, r3
 802ff8c:	db50      	blt.n	8030030 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18c>
        return x + width;
 802ff8e:	8932      	ldrh	r2, [r6, #8]
 802ff90:	4413      	add	r3, r2
        return otherX >= x && otherX < right() && otherY >= y && otherY < bottom();
 802ff92:	b21b      	sxth	r3, r3
 802ff94:	4299      	cmp	r1, r3
 802ff96:	da4b      	bge.n	8030030 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18c>
                const int16_t deltaY = xy[1] * distance;
 802ff98:	9b04      	ldr	r3, [sp, #16]
 802ff9a:	686a      	ldr	r2, [r5, #4]
 802ff9c:	fb12 f203 	smulbb	r2, r2, r3
 802ffa0:	b293      	uxth	r3, r2
 802ffa2:	9306      	str	r3, [sp, #24]
                if (rect.intersect(x + deltaX, y + deltaY))
 802ffa4:	9b02      	ldr	r3, [sp, #8]
 802ffa6:	fa13 f282 	uxtah	r2, r3, r2
 802ffaa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 802ffae:	b212      	sxth	r2, r2
 802ffb0:	429a      	cmp	r2, r3
 802ffb2:	db3d      	blt.n	8030030 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18c>
        return y + height;
 802ffb4:	8970      	ldrh	r0, [r6, #10]
 802ffb6:	4403      	add	r3, r0
        return otherX >= x && otherX < right() && otherY >= y && otherY < bottom();
 802ffb8:	b21b      	sxth	r3, r3
 802ffba:	429a      	cmp	r2, r3
 802ffbc:	da38      	bge.n	8030030 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18c>
                    Drawable* drawable = 0;
 802ffbe:	2300      	movs	r3, #0
 802ffc0:	9309      	str	r3, [sp, #36]	@ 0x24
                    Container::getLastChild(x + deltaX, y + deltaY, &drawable);
 802ffc2:	4630      	mov	r0, r6
 802ffc4:	ab09      	add	r3, sp, #36	@ 0x24
 802ffc6:	f7ff fe52 	bl	802fc6e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
                    if (drawable && drawable != previous)
 802ffca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802ffcc:	b381      	cbz	r1, 8030030 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18c>
 802ffce:	4549      	cmp	r1, r9
 802ffd0:	d02e      	beq.n	8030030 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18c>
                        const Rect absRect = drawable->getAbsoluteRect();
 802ffd2:	a80c      	add	r0, sp, #48	@ 0x30
 802ffd4:	9107      	str	r1, [sp, #28]
 802ffd6:	f005 fff5 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
                        const int dx = (x + meAbsRect.x) - (absRect.x + (absRect.width / 2));
 802ffda:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 802ffde:	9a01      	ldr	r2, [sp, #4]
 802ffe0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 802ffe4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
                        const int dy = (y + meAbsRect.y) - (absRect.y + (absRect.height / 2));
 802ffe8:	9902      	ldr	r1, [sp, #8]
                        const int dx = (x + meAbsRect.x) - (absRect.x + (absRect.width / 2));
 802ffea:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802ffee:	eb0c 0060 	add.w	r0, ip, r0, asr #1
 802fff2:	4413      	add	r3, r2
 802fff4:	1a1a      	subs	r2, r3, r0
                        const int dy = (y + meAbsRect.y) - (absRect.y + (absRect.height / 2));
 802fff6:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 802fffa:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 802fffe:	f9bd c032 	ldrsh.w	ip, [sp, #50]	@ 0x32
 8030002:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8030006:	440b      	add	r3, r1
 8030008:	eb0c 0060 	add.w	r0, ip, r0, asr #1
 803000c:	1a1b      	subs	r3, r3, r0
                        const uint32_t dist = dx * dx + dy * dy;
 803000e:	435b      	muls	r3, r3
 8030010:	fb02 3302 	mla	r3, r2, r2, r3
                        if (dist < bestDistance)
 8030014:	42a3      	cmp	r3, r4
 8030016:	9907      	ldr	r1, [sp, #28]
 8030018:	d209      	bcs.n	803002e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x18a>
                            *last = drawable;
 803001a:	9803      	ldr	r0, [sp, #12]
 803001c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803001e:	6002      	str	r2, [r0, #0]
                            *fingerAdjustmentX = deltaX;
 8030020:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8030022:	9805      	ldr	r0, [sp, #20]
 8030024:	8010      	strh	r0, [r2, #0]
                            *fingerAdjustmentY = deltaY;
 8030026:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8030028:	9806      	ldr	r0, [sp, #24]
 803002a:	8010      	strh	r0, [r2, #0]
                            bestDistance = dist;
 803002c:	461c      	mov	r4, r3
                        previous = drawable;
 803002e:	4689      	mov	r9, r1
            for (int sampleIndex = 0; sampleIndex < 4; sampleIndex++)
 8030030:	f10b 0b01 	add.w	fp, fp, #1
 8030034:	f1bb 0f04 	cmp.w	fp, #4
 8030038:	f105 0508 	add.w	r5, r5, #8
 803003c:	d199      	bne.n	802ff72 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xce>
        for (int ring = 0; ring < numRings; ring++)
 803003e:	9b00      	ldr	r3, [sp, #0]
 8030040:	429f      	cmp	r7, r3
 8030042:	44c2      	add	sl, r8
 8030044:	d188      	bne.n	802ff58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xb4>
}
 8030046:	b01f      	add	sp, #124	@ 0x7c
 8030048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t bestDistance = 0xFFFFFFFF;
 803004c:	f04f 34ff 	mov.w	r4, #4294967295
 8030050:	e76b      	b.n	802ff2a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x86>
 8030052:	bf00      	nop
 8030054:	2000b8e0 	.word	0x2000b8e0
 8030058:	0803f620 	.word	0x0803f620

0803005c <_ZN8touchgfx4RectaNERKS0_>:
    void operator&=(const Rect& other)
 803005c:	b5f0      	push	{r4, r5, r6, r7, lr}
        return x + width;
 803005e:	f9b1 c000 	ldrsh.w	ip, [r1]
 8030062:	888e      	ldrh	r6, [r1, #4]
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030064:	f9b0 2000 	ldrsh.w	r2, [r0]
        return x + width;
 8030068:	4466      	add	r6, ip
 803006a:	b236      	sxth	r6, r6
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 803006c:	42b2      	cmp	r2, r6
 803006e:	da04      	bge.n	803007a <_ZN8touchgfx4RectaNERKS0_+0x1e>
        return x + width;
 8030070:	8885      	ldrh	r5, [r0, #4]
 8030072:	4415      	add	r5, r2
 8030074:	b22d      	sxth	r5, r5
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030076:	45ac      	cmp	ip, r5
 8030078:	db05      	blt.n	8030086 <_ZN8touchgfx4RectaNERKS0_+0x2a>
            x = 0;
 803007a:	2300      	movs	r3, #0
 803007c:	8003      	strh	r3, [r0, #0]
            y = 0;
 803007e:	8043      	strh	r3, [r0, #2]
            width = 0;
 8030080:	8083      	strh	r3, [r0, #4]
            height = 0;
 8030082:	80c3      	strh	r3, [r0, #6]
    }
 8030084:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return y + height;
 8030086:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 803008a:	88cc      	ldrh	r4, [r1, #6]
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 803008c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
        return y + height;
 8030090:	443c      	add	r4, r7
 8030092:	b224      	sxth	r4, r4
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030094:	42a3      	cmp	r3, r4
 8030096:	daf0      	bge.n	803007a <_ZN8touchgfx4RectaNERKS0_+0x1e>
        return y + height;
 8030098:	88c1      	ldrh	r1, [r0, #6]
 803009a:	4419      	add	r1, r3
 803009c:	b209      	sxth	r1, r1
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 803009e:	428f      	cmp	r7, r1
 80300a0:	daeb      	bge.n	803007a <_ZN8touchgfx4RectaNERKS0_+0x1e>
            int16_t newX = MAX(x, other.x);
 80300a2:	4562      	cmp	r2, ip
 80300a4:	bfb8      	it	lt
 80300a6:	4662      	movlt	r2, ip
            int16_t newY = MAX(y, other.y);
 80300a8:	42bb      	cmp	r3, r7
 80300aa:	bfb8      	it	lt
 80300ac:	463b      	movlt	r3, r7
            width = MIN(right(), other.right()) - newX;
 80300ae:	42ae      	cmp	r6, r5
 80300b0:	bfd4      	ite	le
 80300b2:	ebc2 0706 	rsble	r7, r2, r6
 80300b6:	ebc2 0705 	rsbgt	r7, r2, r5
            height = MIN(bottom(), other.bottom()) - newY;
 80300ba:	428c      	cmp	r4, r1
 80300bc:	bfd4      	ite	le
 80300be:	ebc3 0504 	rsble	r5, r3, r4
 80300c2:	ebc3 0501 	rsbgt	r5, r3, r1
            width = MIN(right(), other.right()) - newX;
 80300c6:	8087      	strh	r7, [r0, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 80300c8:	80c5      	strh	r5, [r0, #6]
            x = newX;
 80300ca:	8002      	strh	r2, [r0, #0]
            y = newY;
 80300cc:	8043      	strh	r3, [r0, #2]
    }
 80300ce:	e7d9      	b.n	8030084 <_ZN8touchgfx4RectaNERKS0_+0x28>

080300d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
    if (!isVisible() || !firstChild)
 80300d0:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
{
 80300d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (!isVisible() || !firstChild)
 80300d8:	b3a3      	cbz	r3, 8030144 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x74>
 80300da:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80300dc:	b394      	cbz	r4, 8030144 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x74>
    const Rect tmp = invalidatedArea;
 80300de:	f9b1 6000 	ldrsh.w	r6, [r1]
 80300e2:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80300e6:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80300ea:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
        if (d->isVisible())
 80300ee:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80300f2:	b323      	cbz	r3, 803013e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6e>
        r &= other;
 80300f4:	1d21      	adds	r1, r4, #4
 80300f6:	4668      	mov	r0, sp
        Rect r = *this;
 80300f8:	f8ad 6000 	strh.w	r6, [sp]
 80300fc:	f8ad 5002 	strh.w	r5, [sp, #2]
 8030100:	f8ad 7004 	strh.w	r7, [sp, #4]
 8030104:	f8ad 8006 	strh.w	r8, [sp, #6]
        r &= other;
 8030108:	f7ff ffa8 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
        return width <= 0 || height <= 0;
 803010c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8030110:	2b00      	cmp	r3, #0
 8030112:	dd14      	ble.n	803013e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6e>
 8030114:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8030118:	2b00      	cmp	r3, #0
 803011a:	dd10      	ble.n	803013e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6e>
                drawableRegion.x -= d->getX();
 803011c:	f8bd 3000 	ldrh.w	r3, [sp]
 8030120:	88a2      	ldrh	r2, [r4, #4]
 8030122:	1a9b      	subs	r3, r3, r2
 8030124:	f8ad 3000 	strh.w	r3, [sp]
                drawableRegion.y -= d->getY();
 8030128:	88e2      	ldrh	r2, [r4, #6]
 803012a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 803012e:	1a9b      	subs	r3, r3, r2
 8030130:	f8ad 3002 	strh.w	r3, [sp, #2]
                d->draw(drawableRegion);
 8030134:	6823      	ldr	r3, [r4, #0]
 8030136:	4669      	mov	r1, sp
 8030138:	689b      	ldr	r3, [r3, #8]
 803013a:	4620      	mov	r0, r4
 803013c:	4798      	blx	r3
        d = d->nextSibling;
 803013e:	69a4      	ldr	r4, [r4, #24]
    while (d)
 8030140:	2c00      	cmp	r4, #0
 8030142:	d1d4      	bne.n	80300ee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
}
 8030144:	b002      	add	sp, #8
 8030146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0803014a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 803014a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
{
 803014e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030150:	460d      	mov	r5, r1
 8030152:	4616      	mov	r6, r2
    if (!isVisible())
 8030154:	b343      	cbz	r3, 80301a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5e>
 8030156:	6a84      	ldr	r4, [r0, #40]	@ 0x28
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 8030158:	b334      	cbz	r4, 80301a8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5e>
        return;
    }
    Drawable* d = firstChild;
    while (d)
    {
        if (d->isVisible())
 803015a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 803015e:	b30b      	cbz	r3, 80301a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5a>
        Rect r = *this;
 8030160:	6828      	ldr	r0, [r5, #0]
 8030162:	6869      	ldr	r1, [r5, #4]
 8030164:	466b      	mov	r3, sp
 8030166:	c303      	stmia	r3!, {r0, r1}
        r &= other;
 8030168:	1d21      	adds	r1, r4, #4
 803016a:	4668      	mov	r0, sp
 803016c:	f7ff ff76 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
        return width <= 0 || height <= 0;
 8030170:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8030174:	2b00      	cmp	r3, #0
 8030176:	dd15      	ble.n	80301a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5a>
 8030178:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 803017c:	2b00      	cmp	r3, #0
 803017e:	dd11      	ble.n	80301a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x5a>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
            if (!drawableRegion.isEmpty())
            {
                drawableRegion.x -= d->getX();
 8030180:	f8bd 3000 	ldrh.w	r3, [sp]
 8030184:	88a2      	ldrh	r2, [r4, #4]
 8030186:	1a9b      	subs	r3, r3, r2
 8030188:	f8ad 3000 	strh.w	r3, [sp]
                drawableRegion.y -= d->getY();
 803018c:	88e2      	ldrh	r2, [r4, #6]
 803018e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8030192:	1a9b      	subs	r3, r3, r2
 8030194:	f8ad 3002 	strh.w	r3, [sp, #2]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 8030198:	6823      	ldr	r3, [r4, #0]
 803019a:	4632      	mov	r2, r6
 803019c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 803019e:	4669      	mov	r1, sp
 80301a0:	4620      	mov	r0, r4
 80301a2:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 80301a4:	69a4      	ldr	r4, [r4, #24]
    while (d)
 80301a6:	e7d7      	b.n	8030158 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
    }
}
 80301a8:	b002      	add	sp, #8
 80301aa:	bd70      	pop	{r4, r5, r6, pc}

080301ac <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 80301ac:	b570      	push	{r4, r5, r6, lr}
        setWidth(width);
 80301ae:	6803      	ldr	r3, [r0, #0]
    void setWidthHeight(int16_t width, int16_t height)
 80301b0:	4604      	mov	r4, r0
        setWidth(width);
 80301b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    void setWidthHeight(int16_t width, int16_t height)
 80301b4:	4615      	mov	r5, r2
        setWidth(width);
 80301b6:	4798      	blx	r3
        setHeight(height);
 80301b8:	6823      	ldr	r3, [r4, #0]
 80301ba:	4629      	mov	r1, r5
 80301bc:	4620      	mov	r0, r4
 80301be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80301c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80301c4:	4718      	bx	r3

080301c6 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
     * @return The type of this event.
     */
    virtual Event::EventType getEventType() const
    {
        return Event::EVENT_DRAG;
    }
 80301c6:	2001      	movs	r0, #1
 80301c8:	4770      	bx	lr

080301ca <_ZN8touchgfx9DragEventD1Ev>:
class DragEvent : public Event
 80301ca:	4770      	bx	lr

080301cc <_ZN8touchgfx9DragEventD0Ev>:
 80301cc:	b510      	push	{r4, lr}
 80301ce:	2110      	movs	r1, #16
 80301d0:	4604      	mov	r4, r0
 80301d2:	f00c f98a 	bl	803c4ea <_ZdlPvj>
 80301d6:	4620      	mov	r0, r4
 80301d8:	bd10      	pop	{r4, pc}

080301da <_ZNK8touchgfx4Rect7isEmptyEv.isra.0>:
 80301da:	2800      	cmp	r0, #0
 80301dc:	dd04      	ble.n	80301e8 <_ZNK8touchgfx4Rect7isEmptyEv.isra.0+0xe>
 80301de:	2900      	cmp	r1, #0
 80301e0:	bfcc      	ite	gt
 80301e2:	2000      	movgt	r0, #0
 80301e4:	2001      	movle	r0, #1
 80301e6:	4770      	bx	lr
 80301e8:	2001      	movs	r0, #1
    }
 80301ea:	4770      	bx	lr

080301ec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
    void expandToFit(const Rect& other)
 80301ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80301f0:	f9b1 8004 	ldrsh.w	r8, [r1, #4]
 80301f4:	f9b1 7006 	ldrsh.w	r7, [r1, #6]
 80301f8:	4603      	mov	r3, r0
 80301fa:	460a      	mov	r2, r1
        if (!other.isEmpty())
 80301fc:	4640      	mov	r0, r8
 80301fe:	4639      	mov	r1, r7
 8030200:	f7ff ffeb 	bl	80301da <_ZNK8touchgfx4Rect7isEmptyEv.isra.0>
 8030204:	b980      	cbnz	r0, 8030228 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x3c>
            if (isEmpty())
 8030206:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 803020a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 803020e:	4648      	mov	r0, r9
 8030210:	f7ff ffe3 	bl	80301da <_ZNK8touchgfx4Rect7isEmptyEv.isra.0>
                x = other.x;
 8030214:	f9b2 4000 	ldrsh.w	r4, [r2]
                y = other.y;
 8030218:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
            if (isEmpty())
 803021c:	b130      	cbz	r0, 803022c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x40>
                x = other.x;
 803021e:	801c      	strh	r4, [r3, #0]
                y = other.y;
 8030220:	805a      	strh	r2, [r3, #2]
                width = other.width;
 8030222:	f8a3 8004 	strh.w	r8, [r3, #4]
                height = other.height;
 8030226:	80df      	strh	r7, [r3, #6]
    }
 8030228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                int16_t newX = MIN(x, other.x);
 803022c:	f9b3 6000 	ldrsh.w	r6, [r3]
                int16_t newY = MIN(y, other.y);
 8030230:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
                int16_t newX = MIN(x, other.x);
 8030234:	42a6      	cmp	r6, r4
 8030236:	4630      	mov	r0, r6
 8030238:	bfa8      	it	ge
 803023a:	4620      	movge	r0, r4
                int16_t newY = MIN(y, other.y);
 803023c:	4295      	cmp	r5, r2
 803023e:	46ac      	mov	ip, r5
        return x + width;
 8030240:	444e      	add	r6, r9
                int16_t newY = MIN(y, other.y);
 8030242:	bfa8      	it	ge
 8030244:	4694      	movge	ip, r2
        return x + width;
 8030246:	4444      	add	r4, r8
        return y + height;
 8030248:	440d      	add	r5, r1
 803024a:	443a      	add	r2, r7
                int16_t endPointX = MAX(right(), other.right());
 803024c:	b236      	sxth	r6, r6
 803024e:	b224      	sxth	r4, r4
                int16_t endPointY = MAX(bottom(), other.bottom());
 8030250:	b22d      	sxth	r5, r5
 8030252:	b212      	sxth	r2, r2
                x = newX;
 8030254:	8018      	strh	r0, [r3, #0]
                y = newY;
 8030256:	f8a3 c002 	strh.w	ip, [r3, #2]
                width = endPointX - newX;
 803025a:	42a6      	cmp	r6, r4
 803025c:	bfac      	ite	ge
 803025e:	ebc0 0006 	rsbge	r0, r0, r6
 8030262:	ebc0 0004 	rsblt	r0, r0, r4
                height = endPointY - newY;
 8030266:	4295      	cmp	r5, r2
 8030268:	bfac      	ite	ge
 803026a:	ebcc 0c05 	rsbge	ip, ip, r5
 803026e:	ebcc 0c02 	rsblt	ip, ip, r2
                width = endPointX - newX;
 8030272:	8098      	strh	r0, [r3, #4]
                height = endPointY - newY;
 8030274:	f8a3 c006 	strh.w	ip, [r3, #6]
    }
 8030278:	e7d6      	b.n	8030228 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x3c>

0803027a <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:
}

AbstractDirectionProgress::DirectionType AbstractDirectionProgress::getDirection() const
{
    return progressDirection;
}
 803027a:	f890 00b4 	ldrb.w	r0, [r0, #180]	@ 0xb4
 803027e:	4770      	bx	lr

08030280 <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:
{
/**
 * An abstract class for progress indicators that need a horizontal or vertical direction to be
 * specified.
 */
class AbstractDirectionProgress : public AbstractProgressIndicator
 8030280:	4770      	bx	lr

08030282 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
 8030282:	b510      	push	{r4, lr}
 8030284:	21b8      	movs	r1, #184	@ 0xb8
 8030286:	4604      	mov	r4, r0
 8030288:	f00c f92f 	bl	803c4ea <_ZdlPvj>
 803028c:	4620      	mov	r0, r4
 803028e:	bd10      	pop	{r4, pc}

08030290 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>:
void AbstractDirectionProgress::setDirection(DirectionType direction)
 8030290:	b570      	push	{r4, r5, r6, lr}
 8030292:	4604      	mov	r4, r0
        progressDirection = direction;
 8030294:	f880 10b4 	strb.w	r1, [r0, #180]	@ 0xb4
        progressIndicatorContainer.invalidate();
 8030298:	3058      	adds	r0, #88	@ 0x58
 803029a:	f005 fdf7 	bl	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
        setValue(getValue());
 803029e:	6823      	ldr	r3, [r4, #0]
 80302a0:	4620      	mov	r0, r4
 80302a2:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 80302a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80302aa:	4798      	blx	r3
 80302ac:	462b      	mov	r3, r5
 80302ae:	4601      	mov	r1, r0
 80302b0:	4620      	mov	r0, r4
}
 80302b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setValue(getValue());
 80302b6:	4718      	bx	r3

080302b8 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:
    if (direction != progressDirection)
 80302b8:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
 80302bc:	428b      	cmp	r3, r1
 80302be:	d001      	beq.n	80302c4 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE+0xc>
 80302c0:	f7ff bfe6 	b.w	8030290 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE.part.0>
}
 80302c4:	4770      	bx	lr

080302c6 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:

    virtual void handleTickEvent();

    virtual void invalidateContent() const
    {
        if (getAlpha() > 0)
 80302c6:	6803      	ldr	r3, [r0, #0]
    virtual void invalidateContent() const
 80302c8:	b510      	push	{r4, lr}
        if (getAlpha() > 0)
 80302ca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
    virtual void invalidateContent() const
 80302ce:	4604      	mov	r4, r0
        if (getAlpha() > 0)
 80302d0:	4798      	blx	r3
 80302d2:	b140      	cbz	r0, 80302e6 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
        if (visible)
 80302d4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80302d8:	b12b      	cbz	r3, 80302e6 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x20>
            invalidate();
 80302da:	6823      	ldr	r3, [r4, #0]
 80302dc:	4620      	mov	r0, r4
 80302de:	695b      	ldr	r3, [r3, #20]
        {
            Container::invalidateContent();
        }
    }
 80302e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80302e4:	4718      	bx	r3
 80302e6:	bd10      	pop	{r4, pc}

080302e8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:
AbstractDirectionProgress::AbstractDirectionProgress()
 80302e8:	b510      	push	{r4, lr}
 80302ea:	4604      	mov	r4, r0
    : AbstractProgressIndicator(), progressDirection(RIGHT)
 80302ec:	f000 f96c 	bl	80305c8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80302f0:	4b03      	ldr	r3, [pc, #12]	@ (8030300 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x18>)
 80302f2:	6023      	str	r3, [r4, #0]
 80302f4:	2300      	movs	r3, #0
 80302f6:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
}
 80302fa:	4620      	mov	r0, r4
 80302fc:	bd10      	pop	{r4, pc}
 80302fe:	bf00      	nop
 8030300:	0804327c 	.word	0x0804327c

08030304 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
}

int16_t AbstractProgressIndicator::getProgressIndicatorX() const
{
    return progressIndicatorContainer.getX();
}
 8030304:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 8030308:	4770      	bx	lr

0803030a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorY() const
{
    return progressIndicatorContainer.getY();
}
 803030a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 803030e:	4770      	bx	lr

08030310 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorWidth() const
{
    return progressIndicatorContainer.getWidth();
}
 8030310:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 8030314:	4770      	bx	lr

08030316 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorHeight() const
{
    return progressIndicatorContainer.getHeight();
}
 8030316:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 803031a:	4770      	bx	lr

0803031c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
    rangeStepsMin = minStep;
    assert(rangeStepsMin < rangeSteps);
}

void AbstractProgressIndicator::getRange(int& min, int& max, uint16_t& steps, uint16_t& minStep) const
{
 803031c:	b510      	push	{r4, lr}
    min = rangeMin;
 803031e:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8030322:	600c      	str	r4, [r1, #0]
    max = rangeMax;
 8030324:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8030328:	6011      	str	r1, [r2, #0]
    steps = rangeSteps;
 803032a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 803032e:	801a      	strh	r2, [r3, #0]
    minStep = rangeStepsMin;
 8030330:	9b02      	ldr	r3, [sp, #8]
 8030332:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 8030336:	801a      	strh	r2, [r3, #0]
}
 8030338:	bd10      	pop	{r4, pc}

0803033a <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:

void AbstractProgressIndicator::getRange(int& min, int& max, uint16_t& steps) const
{
 803033a:	b510      	push	{r4, lr}
    min = rangeMin;
 803033c:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8030340:	600c      	str	r4, [r1, #0]
    max = rangeMax;
 8030342:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8030346:	6011      	str	r1, [r2, #0]
    steps = rangeSteps;
 8030348:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 803034c:	801a      	strh	r2, [r3, #0]
}
 803034e:	bd10      	pop	{r4, pc}

08030350 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:

void AbstractProgressIndicator::getRange(int& min, int& max) const
{
    min = rangeMin;
 8030350:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8030354:	600b      	str	r3, [r1, #0]
    max = rangeMax;
 8030356:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 803035a:	6013      	str	r3, [r2, #0]
}
 803035c:	4770      	bx	lr

0803035e <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
    }
}

void AbstractProgressIndicator::setEasingEquation(EasingEquation easingEquation)
{
    equation = easingEquation;
 803035e:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
}
 8030362:	4770      	bx	lr

08030364 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
}

int AbstractProgressIndicator::getValue() const
{
    return currentValue;
}
 8030364:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 8030368:	4770      	bx	lr

0803036a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
        alpha = newAlpha;
 803036a:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
}

void AbstractProgressIndicator::setAlpha(uint8_t newAlpha)
{
    background.setAlpha(newAlpha);
}
 803036e:	4770      	bx	lr

08030370 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:

uint8_t AbstractProgressIndicator::getAlpha() const
{
    return background.getAlpha();
}
 8030370:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 8030374:	4770      	bx	lr

08030376 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
class AbstractProgressIndicator : public Container
 8030376:	4770      	bx	lr

08030378 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8030378:	b510      	push	{r4, lr}
 803037a:	21b4      	movs	r1, #180	@ 0xb4
 803037c:	4604      	mov	r4, r0
 803037e:	f00c f8b4 	bl	803c4ea <_ZdlPvj>
 8030382:	4620      	mov	r0, r4
 8030384:	bd10      	pop	{r4, pc}
	...

08030388 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
{
 8030388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(min < max);
 803038c:	4291      	cmp	r1, r2
{
 803038e:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8030392:	4604      	mov	r4, r0
 8030394:	460f      	mov	r7, r1
 8030396:	4615      	mov	r5, r2
 8030398:	461e      	mov	r6, r3
    assert(min < max);
 803039a:	db05      	blt.n	80303a8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 803039c:	4b0e      	ldr	r3, [pc, #56]	@ (80303d8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>)
 803039e:	4a0f      	ldr	r2, [pc, #60]	@ (80303dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x54>)
 80303a0:	2148      	movs	r1, #72	@ 0x48
    assert(rangeStepsMin < rangeSteps);
 80303a2:	480f      	ldr	r0, [pc, #60]	@ (80303e0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x58>)
 80303a4:	f00c f8c0 	bl	803c528 <__assert_func>
    setValue(currentValue);
 80303a8:	6803      	ldr	r3, [r0, #0]
    rangeMax = max;
 80303aa:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
    setValue(currentValue);
 80303ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80303b2:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 80303b6:	4798      	blx	r3
    if (steps == 0)
 80303b8:	b90e      	cbnz	r6, 80303be <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x36>
        rangeSteps = max - min;
 80303ba:	1bed      	subs	r5, r5, r7
 80303bc:	b2ae      	uxth	r6, r5
    assert(rangeStepsMin < rangeSteps);
 80303be:	45b0      	cmp	r8, r6
 80303c0:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
    rangeStepsMin = minStep;
 80303c4:	f8a4 8092 	strh.w	r8, [r4, #146]	@ 0x92
    assert(rangeStepsMin < rangeSteps);
 80303c8:	d303      	bcc.n	80303d2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x4a>
 80303ca:	4b06      	ldr	r3, [pc, #24]	@ (80303e4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 80303cc:	4a03      	ldr	r2, [pc, #12]	@ (80303dc <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x54>)
 80303ce:	2155      	movs	r1, #85	@ 0x55
 80303d0:	e7e7      	b.n	80303a2 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
}
 80303d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80303d6:	bf00      	nop
 80303d8:	08041908 	.word	0x08041908
 80303dc:	08041912 	.word	0x08041912
 80303e0:	0804196b 	.word	0x0804196b
 80303e4:	080419db 	.word	0x080419db

080303e8 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
    value = MAX(value, rangeMin);
 80303e8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80303ec:	4299      	cmp	r1, r3
 80303ee:	bfb8      	it	lt
 80303f0:	4619      	movlt	r1, r3
    value = MIN(value, rangeMax);
 80303f2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80303f6:	4299      	cmp	r1, r3
 80303f8:	bfa8      	it	ge
 80303fa:	4619      	movge	r1, r3
{
 80303fc:	b570      	push	{r4, r5, r6, lr}
 80303fe:	4604      	mov	r4, r0
    value = MIN(value, rangeMax);
 8030400:	460d      	mov	r5, r1
    if (duration == 0)
 8030402:	4616      	mov	r6, r2
 8030404:	b992      	cbnz	r2, 803042c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
        setValue(value);
 8030406:	6803      	ldr	r3, [r0, #0]
 8030408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 803040c:	4798      	blx	r3
        if (valueUpdatedCallback && valueUpdatedCallback->isValid())
 803040e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8030412:	b368      	cbz	r0, 8030470 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8030414:	6803      	ldr	r3, [r0, #0]
 8030416:	68db      	ldr	r3, [r3, #12]
 8030418:	4798      	blx	r3
 803041a:	b348      	cbz	r0, 8030470 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
            valueUpdatedCallback->execute(*this);
 803041c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8030420:	6803      	ldr	r3, [r0, #0]
 8030422:	4621      	mov	r1, r4
 8030424:	689b      	ldr	r3, [r3, #8]
}
 8030426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            valueUpdatedCallback->execute(*this);
 803042a:	4718      	bx	r3
    if (animationDuration > 0)
 803042c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8030430:	2b00      	cmp	r3, #0
 8030432:	dd08      	ble.n	8030446 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
        Application::getInstance()->unregisterTimerWidget(this);
 8030434:	f004 fc6a 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
     * @note If widget has been registered multiple times, an equal number of calls to unregister
     *       are required to stop widget from receiving tick events.
     */
    void unregisterTimerWidget(const Drawable* w)
    {
        timerWidgets.remove(w);
 8030438:	4621      	mov	r1, r4
 803043a:	3004      	adds	r0, #4
 803043c:	f004 fc8b 	bl	8034d56 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
        animationRunning = false;
 8030440:	2300      	movs	r3, #0
 8030442:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    animationStartValue = getValue();
 8030446:	6823      	ldr	r3, [r4, #0]
 8030448:	4620      	mov	r0, r4
 803044a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 803044e:	4798      	blx	r3
    animationStep = 0;
 8030450:	2300      	movs	r3, #0
 8030452:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
    animationEndValue = value;
 8030456:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
    animationDuration = duration;
 803045a:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
    Application::getInstance()->registerTimerWidget(this);
 803045e:	f004 fc55 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.add(w);
 8030462:	4621      	mov	r1, r4
 8030464:	3004      	adds	r0, #4
 8030466:	f004 fd1f 	bl	8034ea8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
    animationRunning = true;
 803046a:	2301      	movs	r3, #1
 803046c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
}
 8030470:	bd70      	pop	{r4, r5, r6, pc}

08030472 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
    value = MAX(value, rangeMin);
 8030472:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8030476:	4299      	cmp	r1, r3
 8030478:	bfb8      	it	lt
 803047a:	4619      	movlt	r1, r3
    value = MIN(value, rangeMax);
 803047c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8030480:	4299      	cmp	r1, r3
 8030482:	bfa8      	it	ge
 8030484:	4619      	movge	r1, r3
    if (value != currentValue)
 8030486:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 803048a:	428b      	cmp	r3, r1
{
 803048c:	b510      	push	{r4, lr}
 803048e:	4604      	mov	r4, r0
    if (value != currentValue)
 8030490:	d010      	beq.n	80304b4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
        currentValue = value;
 8030492:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
        if (valueSetCallback && valueSetCallback->isValid())
 8030496:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 803049a:	b158      	cbz	r0, 80304b4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 803049c:	6803      	ldr	r3, [r0, #0]
 803049e:	68db      	ldr	r3, [r3, #12]
 80304a0:	4798      	blx	r3
 80304a2:	b138      	cbz	r0, 80304b4 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
            valueSetCallback->execute(*this);
 80304a4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 80304a8:	6803      	ldr	r3, [r0, #0]
 80304aa:	4621      	mov	r1, r4
 80304ac:	689b      	ldr	r3, [r3, #8]
}
 80304ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            valueSetCallback->execute(*this);
 80304b2:	4718      	bx	r3
}
 80304b4:	bd10      	pop	{r4, pc}

080304b6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
{
 80304b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80304b8:	4605      	mov	r5, r0
    if (range == 0)
 80304ba:	460c      	mov	r4, r1
 80304bc:	b1a9      	cbz	r1, 80304ea <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
    const int32_t step = rangeStepsMin + muldiv(currentValue - rangeMin, rangeSteps - rangeStepsMin, rangeMax - rangeMin, remainder);
 80304be:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 80304c2:	f8b5 1090 	ldrh.w	r1, [r5, #144]	@ 0x90
 80304c6:	f8d5 708c 	ldr.w	r7, [r5, #140]	@ 0x8c
 80304ca:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 80304ce:	ab01      	add	r3, sp, #4
 80304d0:	1a12      	subs	r2, r2, r0
 80304d2:	1b89      	subs	r1, r1, r6
 80304d4:	1a38      	subs	r0, r7, r0
 80304d6:	f005 fea7 	bl	8036228 <_ZN8touchgfx6muldivElllRl>
    const int32_t prog = muldiv(step, range, rangeSteps, remainder);
 80304da:	4621      	mov	r1, r4
 80304dc:	f8b5 2090 	ldrh.w	r2, [r5, #144]	@ 0x90
 80304e0:	ab01      	add	r3, sp, #4
 80304e2:	4430      	add	r0, r6
 80304e4:	f005 fea0 	bl	8036228 <_ZN8touchgfx6muldivElllRl>
    return (uint16_t)prog;
 80304e8:	b284      	uxth	r4, r0
}
 80304ea:	4620      	mov	r0, r4
 80304ec:	b003      	add	sp, #12
 80304ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080304f0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
    if (!animationRunning)
 80304f0:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
{
 80304f4:	b570      	push	{r4, r5, r6, lr}
 80304f6:	4604      	mov	r4, r0
    if (!animationRunning)
 80304f8:	2b00      	cmp	r3, #0
 80304fa:	d035      	beq.n	8030568 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
    const int16_t delta = (int16_t)equation(animationStep, 0, animationEndValue - animationStartValue, animationDuration);
 80304fc:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
    animationStep++;
 8030500:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
    const int16_t delta = (int16_t)equation(animationStep, 0, animationEndValue - animationStartValue, animationDuration);
 8030504:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
    animationStep++;
 8030508:	3001      	adds	r0, #1
    const int16_t delta = (int16_t)equation(animationStep, 0, animationEndValue - animationStartValue, animationDuration);
 803050a:	1ad2      	subs	r2, r2, r3
 803050c:	b212      	sxth	r2, r2
 803050e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
    animationStep++;
 8030512:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
    const int16_t delta = (int16_t)equation(animationStep, 0, animationEndValue - animationStartValue, animationDuration);
 8030516:	2100      	movs	r1, #0
 8030518:	b280      	uxth	r0, r0
 803051a:	47a8      	blx	r5
    setValue(animationStartValue + delta);
 803051c:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8030520:	6823      	ldr	r3, [r4, #0]
 8030522:	4401      	add	r1, r0
 8030524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8030528:	4620      	mov	r0, r4
 803052a:	4798      	blx	r3
    if (animationStep >= animationDuration)
 803052c:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8030530:	429a      	cmp	r2, r3
 8030532:	db19      	blt.n	8030568 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
        animationDuration = 0;
 8030534:	2500      	movs	r5, #0
        animationStep = 0;
 8030536:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
        Application::getInstance()->unregisterTimerWidget(this);
 803053a:	f004 fbe7 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
        timerWidgets.remove(w);
 803053e:	4621      	mov	r1, r4
 8030540:	3004      	adds	r0, #4
 8030542:	f004 fc08 	bl	8034d56 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
        if (valueUpdatedCallback && valueUpdatedCallback->isValid())
 8030546:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
        animationRunning = false;
 803054a:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
        if (valueUpdatedCallback && valueUpdatedCallback->isValid())
 803054e:	b158      	cbz	r0, 8030568 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8030550:	6803      	ldr	r3, [r0, #0]
 8030552:	68db      	ldr	r3, [r3, #12]
 8030554:	4798      	blx	r3
 8030556:	b138      	cbz	r0, 8030568 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
            valueUpdatedCallback->execute(*this);
 8030558:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 803055c:	6803      	ldr	r3, [r0, #0]
 803055e:	4621      	mov	r1, r4
 8030560:	689b      	ldr	r3, [r3, #8]
}
 8030562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            valueUpdatedCallback->execute(*this);
 8030566:	4718      	bx	r3
}
 8030568:	bd70      	pop	{r4, r5, r6, pc}

0803056a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
{
 803056a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    progressIndicatorContainer.setPosition(x, y, width, height);
 803056e:	f100 0958 	add.w	r9, r0, #88	@ 0x58
{
 8030572:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8030576:	4604      	mov	r4, r0
 8030578:	461f      	mov	r7, r3
        setXY(x, y);
 803057a:	4648      	mov	r0, r9
 803057c:	460e      	mov	r6, r1
 803057e:	4615      	mov	r5, r2
 8030580:	f7f8 fdbe 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8030584:	4642      	mov	r2, r8
 8030586:	4639      	mov	r1, r7
 8030588:	4648      	mov	r0, r9
 803058a:	f7ff fe0f 	bl	80301ac <_ZN8touchgfx8Drawable14setWidthHeightEss>
    if (getWidth() < x + width)
 803058e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8030592:	19f3      	adds	r3, r6, r7
 8030594:	429a      	cmp	r2, r3
        rect.width = width;
 8030596:	bfb8      	it	lt
 8030598:	8123      	strhlt	r3, [r4, #8]
    if (getHeight() < y + height)
 803059a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 803059e:	eb05 0208 	add.w	r2, r5, r8
 80305a2:	4293      	cmp	r3, r2
        rect.height = height;
 80305a4:	bfb8      	it	lt
 80305a6:	8162      	strhlt	r2, [r4, #10]
}
 80305a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080305ac <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
{
 80305ac:	b510      	push	{r4, lr}
 80305ae:	4604      	mov	r4, r0
    background.setBitmap(bitmapBackground);
 80305b0:	302c      	adds	r0, #44	@ 0x2c
 80305b2:	f000 fc1e 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 80305b6:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 80305ba:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 80305be:	4620      	mov	r0, r4
 80305c0:	f7ff fdf4 	bl	80301ac <_ZN8touchgfx8Drawable14setWidthHeightEss>
}
 80305c4:	bd10      	pop	{r4, pc}
	...

080305c8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
AbstractProgressIndicator::AbstractProgressIndicator()
 80305c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80305ca:	4604      	mov	r4, r0
      valueSetCallback(0), valueUpdatedCallback(0)
 80305cc:	4626      	mov	r6, r4
          firstChild(0)
 80305ce:	2500      	movs	r5, #0
 80305d0:	f7f8 fc82 	bl	8028ed8 <_ZN8touchgfx8DrawableC1Ev>
 80305d4:	4b22      	ldr	r3, [pc, #136]	@ (8030660 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x98>)
 80305d6:	62a5      	str	r5, [r4, #40]	@ 0x28
 80305d8:	f846 3b2c 	str.w	r3, [r6], #44
        : Widget(), bitmap(bmp), alpha(255)
 80305dc:	2226      	movs	r2, #38	@ 0x26
 80305de:	4629      	mov	r1, r5
 80305e0:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 80305e4:	4630      	mov	r0, r6
 80305e6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80305ea:	f00c ff5b 	bl	803d4a4 <memset>
 80305ee:	4630      	mov	r0, r6
 80305f0:	f7f8 fc72 	bl	8028ed8 <_ZN8touchgfx8DrawableC1Ev>
 80305f4:	4b1b      	ldr	r3, [pc, #108]	@ (8030664 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 80305f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80305f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80305fc:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
        Image::setBitmap(bmp);
 8030600:	a901      	add	r1, sp, #4
        : Widget(), bitmap(bmp), alpha(255)
 8030602:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
        Image::setBitmap(bmp);
 8030606:	4630      	mov	r0, r6
 8030608:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 803060c:	f000 fbf1 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8030610:	4638      	mov	r0, r7
 8030612:	f7f8 fc61 	bl	8028ed8 <_ZN8touchgfx8DrawableC1Ev>
 8030616:	4b14      	ldr	r3, [pc, #80]	@ (8030668 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8030618:	65a3      	str	r3, [r4, #88]	@ 0x58
    : Container(), background(), progressIndicatorContainer(), rangeMin(0), rangeMax(100), currentValue(0), rangeSteps(100), rangeStepsMin(0),
 803061a:	2364      	movs	r3, #100	@ 0x64
 803061c:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 8030620:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      equation(&EasingEquations::linearEaseNone), animationRunning(false), animationStartValue(0), animationEndValue(0), animationDuration(0), animationStep(0),
 8030624:	4b11      	ldr	r3, [pc, #68]	@ (803066c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8030626:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    background.setXY(0, 0);
 803062a:	462a      	mov	r2, r5
 803062c:	4629      	mov	r1, r5
 803062e:	4630      	mov	r0, r6
    : Container(), background(), progressIndicatorContainer(), rangeMin(0), rangeMax(100), currentValue(0), rangeSteps(100), rangeStepsMin(0),
 8030630:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
      equation(&EasingEquations::linearEaseNone), animationRunning(false), animationStartValue(0), animationEndValue(0), animationDuration(0), animationStep(0),
 8030634:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 8030638:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
      valueSetCallback(0), valueUpdatedCallback(0)
 803063c:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
      equation(&EasingEquations::linearEaseNone), animationRunning(false), animationStartValue(0), animationEndValue(0), animationDuration(0), animationStep(0),
 8030640:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
    background.setXY(0, 0);
 8030644:	f7f8 fd5c 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
    AbstractProgressIndicator::add(background);
 8030648:	4631      	mov	r1, r6
 803064a:	4620      	mov	r0, r4
 803064c:	f7ff fb62 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    AbstractProgressIndicator::add(progressIndicatorContainer);
 8030650:	4620      	mov	r0, r4
 8030652:	4639      	mov	r1, r7
 8030654:	f7ff fb5e 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8030658:	4620      	mov	r0, r4
 803065a:	b003      	add	sp, #12
 803065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803065e:	bf00      	nop
 8030660:	08043358 	.word	0x08043358
 8030664:	0804365c 	.word	0x0804365c
 8030668:	080431d8 	.word	0x080431d8
 803066c:	08036875 	.word	0x08036875

08030670 <_ZN8touchgfx13ImageProgress15setAnchorAtZeroEb>:
}

void ImageProgress::setAnchorAtZero(bool anchorAtZero)
{
    fixedPosition = anchorAtZero;
    setValue(getValue());
 8030670:	6803      	ldr	r3, [r0, #0]
{
 8030672:	b570      	push	{r4, r5, r6, lr}
    setValue(getValue());
 8030674:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
    fixedPosition = anchorAtZero;
 8030678:	f880 1114 	strb.w	r1, [r0, #276]	@ 0x114
    setValue(getValue());
 803067c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
{
 8030680:	4604      	mov	r4, r0
    setValue(getValue());
 8030682:	4798      	blx	r3
 8030684:	462b      	mov	r3, r5
 8030686:	4601      	mov	r1, r0
 8030688:	4620      	mov	r0, r4
}
 803068a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setValue(getValue());
 803068e:	4718      	bx	r3

08030690 <_ZNK8touchgfx13ImageProgress15getAnchorAtZeroEv>:

bool ImageProgress::getAnchorAtZero() const
{
    return fixedPosition;
}
 8030690:	f890 0114 	ldrb.w	r0, [r0, #276]	@ 0x114
 8030694:	4770      	bx	lr

08030696 <_ZN8touchgfx13ImageProgressD1Ev>:
 * An image progress will show parts of an image as a progress indicator. The image can progress
 * from the left, the right, the bottom or the top of the given area, and can visually
 * be fixed with a larger and larger portion of the image showing, or it can be moved
 * into view.
 */
class ImageProgress : public AbstractDirectionProgress
 8030696:	4770      	bx	lr

08030698 <_ZN8touchgfx13ImageProgressD0Ev>:
 8030698:	b510      	push	{r4, lr}
 803069a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 803069e:	4604      	mov	r4, r0
 80306a0:	f00b ff23 	bl	803c4ea <_ZdlPvj>
 80306a4:	4620      	mov	r0, r4
 80306a6:	bd10      	pop	{r4, pc}

080306a8 <_ZN8touchgfx13ImageProgress9setBitmapEt>:

void ImageProgress::setBitmap(BitmapId bitmapId)
{
 80306a8:	b507      	push	{r0, r1, r2, lr}
    image.setBitmap(Bitmap(bitmapId));
 80306aa:	30e4      	adds	r0, #228	@ 0xe4
 80306ac:	f8ad 1004 	strh.w	r1, [sp, #4]
 80306b0:	a901      	add	r1, sp, #4
 80306b2:	f001 fb45 	bl	8031d40 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
}
 80306b6:	b003      	add	sp, #12
 80306b8:	f85d fb04 	ldr.w	pc, [sp], #4

080306bc <_ZN8touchgfx13ImageProgress8setAlphaEh>:
{
    return image.getBitmapId();
}

void ImageProgress::setAlpha(uint8_t newAlpha)
{
 80306bc:	b538      	push	{r3, r4, r5, lr}
 80306be:	4604      	mov	r4, r0
 80306c0:	460d      	mov	r5, r1
    AbstractDirectionProgress::setAlpha(newAlpha);
 80306c2:	f7ff fe52 	bl	803036a <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
        alpha = newAlpha;
 80306c6:	f884 510c 	strb.w	r5, [r4, #268]	@ 0x10c
    image.setAlpha(newAlpha);
}
 80306ca:	bd38      	pop	{r3, r4, r5, pc}

080306cc <_ZNK8touchgfx13ImageProgress9getBitmapEv>:
{
 80306cc:	b508      	push	{r3, lr}
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 80306ce:	4b06      	ldr	r3, [pc, #24]	@ (80306e8 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x1c>)
 80306d0:	f8b0 010a 	ldrh.w	r0, [r0, #266]	@ 0x10a
 80306d4:	681b      	ldr	r3, [r3, #0]
 80306d6:	b92b      	cbnz	r3, 80306e4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x18>
 80306d8:	4b04      	ldr	r3, [pc, #16]	@ (80306ec <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x20>)
 80306da:	4a05      	ldr	r2, [pc, #20]	@ (80306f0 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x24>)
 80306dc:	4805      	ldr	r0, [pc, #20]	@ (80306f4 <_ZNK8touchgfx13ImageProgress9getBitmapEv+0x28>)
 80306de:	2190      	movs	r1, #144	@ 0x90
 80306e0:	f00b ff22 	bl	803c528 <__assert_func>
}
 80306e4:	bd08      	pop	{r3, pc}
 80306e6:	bf00      	nop
 80306e8:	2000b968 	.word	0x2000b968
 80306ec:	080419f6 	.word	0x080419f6
 80306f0:	08041a32 	.word	0x08041a32
 80306f4:	08041a65 	.word	0x08041a65

080306f8 <_ZN8touchgfx13ImageProgress28setProgressIndicatorPositionEssss>:
{
 80306f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80306fc:	4616      	mov	r6, r2
 80306fe:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
    container.setPosition(0, 0, width, height);
 8030702:	f8cd 8000 	str.w	r8, [sp]
 8030706:	2200      	movs	r2, #0
{
 8030708:	4604      	mov	r4, r0
 803070a:	460d      	mov	r5, r1
    container.setPosition(0, 0, width, height);
 803070c:	30b8      	adds	r0, #184	@ 0xb8
 803070e:	4611      	mov	r1, r2
{
 8030710:	461f      	mov	r7, r3
    container.setPosition(0, 0, width, height);
 8030712:	f7f8 fbf3 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
    AbstractProgressIndicator::setProgressIndicatorPosition(x, y, width, height);
 8030716:	463b      	mov	r3, r7
 8030718:	4632      	mov	r2, r6
 803071a:	4629      	mov	r1, r5
 803071c:	4620      	mov	r0, r4
 803071e:	f8cd 8020 	str.w	r8, [sp, #32]
}
 8030722:	b002      	add	sp, #8
 8030724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    AbstractProgressIndicator::setProgressIndicatorPosition(x, y, width, height);
 8030728:	f7ff bf1f 	b.w	803056a <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0803072c <_ZN8touchgfx13ImageProgress8setValueEi>:

void ImageProgress::setValue(int value)
{
 803072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 803072e:	4604      	mov	r4, r0
 8030730:	b085      	sub	sp, #20
    AbstractDirectionProgress::setValue(value);
 8030732:	f7ff fe9e 	bl	8030472 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
    const uint16_t maxProgress = (progressDirection == RIGHT || progressDirection == LEFT) ? progressIndicatorContainer.getWidth() : progressIndicatorContainer.getHeight();
 8030736:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 803073a:	2b01      	cmp	r3, #1
 803073c:	bf94      	ite	ls
 803073e:	f8b4 1060 	ldrhls.w	r1, [r4, #96]	@ 0x60
 8030742:	f8b4 1062 	ldrhhi.w	r1, [r4, #98]	@ 0x62
    const int16_t progress = AbstractDirectionProgress::getProgress(maxProgress);
 8030746:	4620      	mov	r0, r4
 8030748:	f7ff feb5 	bl	80304b6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
    if (fixedPosition)
 803074c:	f894 3114 	ldrb.w	r3, [r4, #276]	@ 0x114
    const int16_t progress = AbstractDirectionProgress::getProgress(maxProgress);
 8030750:	4605      	mov	r5, r0
 8030752:	b206      	sxth	r6, r0
    if (fixedPosition)
 8030754:	2b00      	cmp	r3, #0
 8030756:	f000 80c8 	beq.w	80308ea <_ZN8touchgfx13ImageProgress8setValueEi+0x1be>
    {
        switch (progressDirection)
 803075a:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 803075e:	2b03      	cmp	r3, #3
 8030760:	d833      	bhi.n	80307ca <_ZN8touchgfx13ImageProgress8setValueEi+0x9e>
 8030762:	e8df f003 	tbb	[pc, r3]
 8030766:	3402      	.short	0x3402
 8030768:	8f64      	.short	0x8f64
        {
        case RIGHT:
            {
                const int16_t oldWidth = container.getWidth();
                container.setPosition(0, 0, progress, progressIndicatorContainer.getHeight());
 803076a:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
        return rect.width;
 803076e:	f9b4 50c0 	ldrsh.w	r5, [r4, #192]	@ 0xc0
 8030772:	9300      	str	r3, [sp, #0]
 8030774:	2200      	movs	r2, #0
 8030776:	4611      	mov	r1, r2
 8030778:	4633      	mov	r3, r6
 803077a:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 803077e:	f7f8 fbbd 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
                image.setPosition(0, 0, progress, progressIndicatorContainer.getHeight());
 8030782:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8030786:	9300      	str	r3, [sp, #0]
 8030788:	2200      	movs	r2, #0
 803078a:	4611      	mov	r1, r2
 803078c:	4633      	mov	r3, r6
 803078e:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8030792:	f7f8 fbb3 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8030796:	f9b4 30c0 	ldrsh.w	r3, [r4, #192]	@ 0xc0
        return rect.height;
 803079a:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
                const int16_t newWidth = container.getWidth();
                Rect r(MIN(oldWidth, newWidth), 0, abs(oldWidth - newWidth), container.getHeight());
 803079e:	42ab      	cmp	r3, r5
 80307a0:	4619      	mov	r1, r3
 80307a2:	bfa8      	it	ge
 80307a4:	4629      	movge	r1, r5
 80307a6:	1aed      	subs	r5, r5, r3
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 80307a8:	2d00      	cmp	r5, #0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80307aa:	f8ad 1008 	strh.w	r1, [sp, #8]
 80307ae:	bfb8      	it	lt
 80307b0:	426d      	neglt	r5, r5
 80307b2:	2100      	movs	r1, #0
 80307b4:	f8ad 100a 	strh.w	r1, [sp, #10]
 80307b8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80307bc:	f8ad 200e 	strh.w	r2, [sp, #14]
                const int16_t oldY = container.getY();
                container.setPosition(0, progressIndicatorContainer.getHeight() - progress, progressIndicatorContainer.getWidth(), progress);
                image.setPosition(0, -container.getY(), progressIndicatorContainer.getWidth(), progressIndicatorContainer.getHeight());
                const int16_t newY = container.getY();
                Rect r(0, MIN(oldY, newY), container.getWidth(), abs(oldY - newY));
                progressIndicatorContainer.invalidateRect(r);
 80307c0:	a902      	add	r1, sp, #8
 80307c2:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80307c6:	f005 fbb3 	bl	8035f30 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>
            image.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
            break;
        }
        container.invalidate();
    }
}
 80307ca:	b005      	add	sp, #20
 80307cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                container.setPosition(getWidth() - progress, 0, progress, progressIndicatorContainer.getHeight());
 80307ce:	8921      	ldrh	r1, [r4, #8]
 80307d0:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
        return rect.x;
 80307d4:	f9b4 70bc 	ldrsh.w	r7, [r4, #188]	@ 0xbc
 80307d8:	9300      	str	r3, [sp, #0]
 80307da:	1a09      	subs	r1, r1, r0
 80307dc:	4633      	mov	r3, r6
 80307de:	2200      	movs	r2, #0
 80307e0:	b209      	sxth	r1, r1
 80307e2:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 80307e6:	f7f8 fb89 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
                image.setPosition(-container.getX(), 0, progressIndicatorContainer.getWidth(), progressIndicatorContainer.getHeight());
 80307ea:	f8b4 10bc 	ldrh.w	r1, [r4, #188]	@ 0xbc
 80307ee:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 80307f2:	9300      	str	r3, [sp, #0]
 80307f4:	4249      	negs	r1, r1
 80307f6:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 80307fa:	2200      	movs	r2, #0
 80307fc:	b209      	sxth	r1, r1
 80307fe:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8030802:	f7f8 fb7b 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8030806:	f9b4 30bc 	ldrsh.w	r3, [r4, #188]	@ 0xbc
        return rect.height;
 803080a:	f9b4 20c2 	ldrsh.w	r2, [r4, #194]	@ 0xc2
                Rect r(MIN(oldX, newX), 0, abs(oldX - newX), container.getHeight());
 803080e:	42bb      	cmp	r3, r7
 8030810:	4619      	mov	r1, r3
 8030812:	bfa8      	it	ge
 8030814:	4639      	movge	r1, r7
 8030816:	1aff      	subs	r7, r7, r3
 8030818:	2f00      	cmp	r7, #0
 803081a:	f8ad 1008 	strh.w	r1, [sp, #8]
 803081e:	bfb8      	it	lt
 8030820:	427f      	neglt	r7, r7
 8030822:	2100      	movs	r1, #0
 8030824:	f8ad 100a 	strh.w	r1, [sp, #10]
 8030828:	f8ad 700c 	strh.w	r7, [sp, #12]
 803082c:	e7c6      	b.n	80307bc <_ZN8touchgfx13ImageProgress8setValueEi+0x90>
 803082e:	f9b4 50c2 	ldrsh.w	r5, [r4, #194]	@ 0xc2
                container.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
 8030832:	9600      	str	r6, [sp, #0]
 8030834:	2200      	movs	r2, #0
 8030836:	4611      	mov	r1, r2
 8030838:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 803083c:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8030840:	f7f8 fb5c 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
                image.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
 8030844:	2200      	movs	r2, #0
 8030846:	9600      	str	r6, [sp, #0]
 8030848:	4611      	mov	r1, r2
 803084a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 803084e:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8030852:	f7f8 fb53 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8030856:	f9b4 30c2 	ldrsh.w	r3, [r4, #194]	@ 0xc2
        return rect.width;
 803085a:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 803085e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8030862:	2100      	movs	r1, #0
                Rect r(0, MIN(oldHeight, newHeight), container.getWidth(), abs(oldHeight - newHeight));
 8030864:	429d      	cmp	r5, r3
 8030866:	f8ad 1008 	strh.w	r1, [sp, #8]
 803086a:	4629      	mov	r1, r5
 803086c:	eba5 0503 	sub.w	r5, r5, r3
 8030870:	bfa8      	it	ge
 8030872:	4619      	movge	r1, r3
 8030874:	2d00      	cmp	r5, #0
 8030876:	bfb8      	it	lt
 8030878:	426d      	neglt	r5, r5
 803087a:	f8ad 100a 	strh.w	r1, [sp, #10]
 803087e:	f8ad 500e 	strh.w	r5, [sp, #14]
                progressIndicatorContainer.invalidateRect(r);
 8030882:	e79d      	b.n	80307c0 <_ZN8touchgfx13ImageProgress8setValueEi+0x94>
                container.setPosition(0, progressIndicatorContainer.getHeight() - progress, progressIndicatorContainer.getWidth(), progress);
 8030884:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
        return rect.y;
 8030888:	f9b4 70be 	ldrsh.w	r7, [r4, #190]	@ 0xbe
 803088c:	9600      	str	r6, [sp, #0]
 803088e:	1a12      	subs	r2, r2, r0
 8030890:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 8030894:	b212      	sxth	r2, r2
 8030896:	2100      	movs	r1, #0
 8030898:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 803089c:	f7f8 fb2e 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
                image.setPosition(0, -container.getY(), progressIndicatorContainer.getWidth(), progressIndicatorContainer.getHeight());
 80308a0:	f8b4 20be 	ldrh.w	r2, [r4, #190]	@ 0xbe
 80308a4:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 80308a8:	9300      	str	r3, [sp, #0]
 80308aa:	4252      	negs	r2, r2
 80308ac:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 80308b0:	b212      	sxth	r2, r2
 80308b2:	2100      	movs	r1, #0
 80308b4:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 80308b8:	f7f8 fb20 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 80308bc:	f9b4 30be 	ldrsh.w	r3, [r4, #190]	@ 0xbe
        return rect.width;
 80308c0:	f9b4 20c0 	ldrsh.w	r2, [r4, #192]	@ 0xc0
 80308c4:	f8ad 200c 	strh.w	r2, [sp, #12]
                Rect r(0, MIN(oldY, newY), container.getWidth(), abs(oldY - newY));
 80308c8:	42bb      	cmp	r3, r7
 80308ca:	f04f 0100 	mov.w	r1, #0
 80308ce:	f8ad 1008 	strh.w	r1, [sp, #8]
 80308d2:	4619      	mov	r1, r3
 80308d4:	bfa8      	it	ge
 80308d6:	4639      	movge	r1, r7
 80308d8:	1aff      	subs	r7, r7, r3
 80308da:	2f00      	cmp	r7, #0
 80308dc:	bfb8      	it	lt
 80308de:	427f      	neglt	r7, r7
 80308e0:	f8ad 100a 	strh.w	r1, [sp, #10]
 80308e4:	f8ad 700e 	strh.w	r7, [sp, #14]
 80308e8:	e76a      	b.n	80307c0 <_ZN8touchgfx13ImageProgress8setValueEi+0x94>
        container.invalidate();
 80308ea:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 80308ee:	4638      	mov	r0, r7
 80308f0:	f005 facc 	bl	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
        switch (progressDirection)
 80308f4:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
 80308f8:	2b03      	cmp	r3, #3
 80308fa:	d818      	bhi.n	803092e <_ZN8touchgfx13ImageProgress8setValueEi+0x202>
 80308fc:	e8df f003 	tbb	[pc, r3]
 8030900:	41301d02 	.word	0x41301d02
            container.setPosition(0, 0, progress, getHeight());
 8030904:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8030908:	9300      	str	r3, [sp, #0]
 803090a:	2200      	movs	r2, #0
 803090c:	4611      	mov	r1, r2
 803090e:	4633      	mov	r3, r6
 8030910:	4638      	mov	r0, r7
 8030912:	f7f8 faf3 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
 8030916:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
            image.setPosition(progress - progressIndicatorContainer.getWidth(), 0, progressIndicatorContainer.getWidth(), getHeight());
 803091a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 803091e:	9200      	str	r2, [sp, #0]
 8030920:	1ae9      	subs	r1, r5, r3
 8030922:	2200      	movs	r2, #0
 8030924:	b209      	sxth	r1, r1
            image.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
 8030926:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 803092a:	f7f8 fae7 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        container.invalidate();
 803092e:	4638      	mov	r0, r7
}
 8030930:	b005      	add	sp, #20
 8030932:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        container.invalidate();
 8030936:	f005 baa9 	b.w	8035e8c <_ZNK8touchgfx8Drawable10invalidateEv>
            container.setPosition(progressIndicatorContainer.getWidth() - progress, 0, progress, progressIndicatorContainer.getHeight());
 803093a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 803093e:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8030942:	9300      	str	r3, [sp, #0]
 8030944:	1b49      	subs	r1, r1, r5
 8030946:	4633      	mov	r3, r6
 8030948:	2200      	movs	r2, #0
 803094a:	b209      	sxth	r1, r1
 803094c:	4638      	mov	r0, r7
 803094e:	f7f8 fad5 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
            image.setPosition(0, 0, progress, progressIndicatorContainer.getHeight());
 8030952:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
 8030956:	9300      	str	r3, [sp, #0]
 8030958:	4633      	mov	r3, r6
            image.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
 803095a:	2200      	movs	r2, #0
 803095c:	4611      	mov	r1, r2
 803095e:	e7e2      	b.n	8030926 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fa>
            container.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
 8030960:	2200      	movs	r2, #0
 8030962:	9600      	str	r6, [sp, #0]
 8030964:	4611      	mov	r1, r2
 8030966:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 803096a:	4638      	mov	r0, r7
 803096c:	f7f8 fac6 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
        return rect.height;
 8030970:	f9b4 3062 	ldrsh.w	r3, [r4, #98]	@ 0x62
            image.setPosition(0, progress - progressIndicatorContainer.getHeight(), progressIndicatorContainer.getWidth(), progressIndicatorContainer.getHeight());
 8030974:	9300      	str	r3, [sp, #0]
 8030976:	1aea      	subs	r2, r5, r3
 8030978:	b212      	sxth	r2, r2
 803097a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 803097e:	2100      	movs	r1, #0
 8030980:	e7d1      	b.n	8030926 <_ZN8touchgfx13ImageProgress8setValueEi+0x1fa>
            container.setPosition(0, progressIndicatorContainer.getHeight() - progress, progressIndicatorContainer.getWidth(), progress);
 8030982:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
 8030986:	9600      	str	r6, [sp, #0]
 8030988:	1b52      	subs	r2, r2, r5
 803098a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 803098e:	b212      	sxth	r2, r2
 8030990:	2100      	movs	r1, #0
 8030992:	4638      	mov	r0, r7
 8030994:	f7f8 fab2 	bl	8028efc <_ZN8touchgfx8Drawable11setPositionEssss>
            image.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
 8030998:	9600      	str	r6, [sp, #0]
 803099a:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	@ 0x60
 803099e:	e7dc      	b.n	803095a <_ZN8touchgfx13ImageProgress8setValueEi+0x22e>

080309a0 <_ZN8touchgfx13ImageProgressC1Ev>:
ImageProgress::ImageProgress()
 80309a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80309a2:	4604      	mov	r4, r0
    : AbstractDirectionProgress(), container(), image(), fixedPosition(true)
 80309a4:	4626      	mov	r6, r4
 80309a6:	f7ff fc9f 	bl	80302e8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 80309aa:	4b23      	ldr	r3, [pc, #140]	@ (8030a38 <_ZN8touchgfx13ImageProgressC1Ev+0x98>)
 80309ac:	f846 3bb8 	str.w	r3, [r6], #184
          touchable(false),
 80309b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80309b4:	4b21      	ldr	r3, [pc, #132]	@ (8030a3c <_ZN8touchgfx13ImageProgressC1Ev+0x9c>)
 80309b6:	f8a4 20dc 	strh.w	r2, [r4, #220]	@ 0xdc
        : x(0), y(0), width(0), height(0)
 80309ba:	2500      	movs	r5, #0
 80309bc:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    TiledImage(const Bitmap& bmp = Bitmap())
        : Image(bmp), xOffset(0), yOffset(0)
 80309c0:	f104 07e4 	add.w	r7, r4, #228	@ 0xe4
        : bitmapId(id)
 80309c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80309c8:	f8a4 2108 	strh.w	r2, [r4, #264]	@ 0x108
        : Widget(), bitmap(bmp), alpha(255)
 80309cc:	4a1c      	ldr	r2, [pc, #112]	@ (8030a40 <_ZN8touchgfx13ImageProgressC1Ev+0xa0>)
 80309ce:	f8c4 20e4 	str.w	r2, [r4, #228]	@ 0xe4
 80309d2:	f8a4 310a 	strh.w	r3, [r4, #266]	@ 0x10a
 80309d6:	f884 310c 	strb.w	r3, [r4, #268]	@ 0x10c
        Image::setBitmap(bmp);
 80309da:	a901      	add	r1, sp, #4
 80309dc:	4638      	mov	r0, r7
 80309de:	e9c4 552f 	strd	r5, r5, [r4, #188]	@ 0xbc
 80309e2:	e9c4 5531 	strd	r5, r5, [r4, #196]	@ 0xc4
          nextSibling(0),
 80309e6:	e9c4 5533 	strd	r5, r5, [r4, #204]	@ 0xcc
          cachedAbsX(0),
 80309ea:	e9c4 5535 	strd	r5, r5, [r4, #212]	@ 0xd4
 80309ee:	e9c4 553a 	strd	r5, r5, [r4, #232]	@ 0xe8
 80309f2:	e9c4 553c 	strd	r5, r5, [r4, #240]	@ 0xf0
          nextSibling(0),
 80309f6:	e9c4 553e 	strd	r5, r5, [r4, #248]	@ 0xf8
          cachedAbsX(0),
 80309fa:	e9c4 5540 	strd	r5, r5, [r4, #256]	@ 0x100
 80309fe:	f8c4 50e0 	str.w	r5, [r4, #224]	@ 0xe0
 8030a02:	f8ad 3004 	strh.w	r3, [sp, #4]
 8030a06:	f000 f9f4 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8030a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8030a44 <_ZN8touchgfx13ImageProgressC1Ev+0xa4>)
 8030a0c:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 8030a10:	2301      	movs	r3, #1
 8030a12:	f884 3114 	strb.w	r3, [r4, #276]	@ 0x114
    container.add(image);
 8030a16:	4639      	mov	r1, r7
 8030a18:	4630      	mov	r0, r6
 8030a1a:	f8a4 510e 	strh.w	r5, [r4, #270]	@ 0x10e
 8030a1e:	f8a4 5110 	strh.w	r5, [r4, #272]	@ 0x110
 8030a22:	f7ff f977 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    progressIndicatorContainer.add(container);
 8030a26:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8030a2a:	4631      	mov	r1, r6
 8030a2c:	f7ff f972 	bl	802fd14 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8030a30:	4620      	mov	r0, r4
 8030a32:	b003      	add	sp, #12
 8030a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8030a36:	bf00      	nop
 8030a38:	0804342c 	.word	0x0804342c
 8030a3c:	080431d8 	.word	0x080431d8
 8030a40:	0804365c 	.word	0x0804365c
 8030a44:	080437cc 	.word	0x080437cc

08030a48 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
    {
        return pressed;
    }
 8030a48:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8030a4c:	4770      	bx	lr

08030a4e <_ZN8touchgfx14AbstractButton13executeActionEv>:
    virtual void executeAction()
 8030a4e:	b510      	push	{r4, lr}
 8030a50:	4604      	mov	r4, r0
        if (action && action->isValid())
 8030a52:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8030a54:	b150      	cbz	r0, 8030a6c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8030a56:	6803      	ldr	r3, [r0, #0]
 8030a58:	68db      	ldr	r3, [r3, #12]
 8030a5a:	4798      	blx	r3
 8030a5c:	b130      	cbz	r0, 8030a6c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
            action->execute(*this);
 8030a5e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8030a60:	6803      	ldr	r3, [r0, #0]
 8030a62:	4621      	mov	r1, r4
 8030a64:	689b      	ldr	r3, [r3, #8]
    }
 8030a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8030a6a:	4718      	bx	r3
    }
 8030a6c:	bd10      	pop	{r4, pc}

08030a6e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
        return clickEventType;
 8030a6e:	790b      	ldrb	r3, [r1, #4]
namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
    const bool wasPressed = pressed;
    pressed = (event.getType() == ClickEvent::PRESSED);
 8030a70:	2b00      	cmp	r3, #0
 8030a72:	bf0c      	ite	eq
 8030a74:	2301      	moveq	r3, #1
 8030a76:	2300      	movne	r3, #0
{
 8030a78:	b570      	push	{r4, r5, r6, lr}
    const bool wasPressed = pressed;
 8030a7a:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
    pressed = (event.getType() == ClickEvent::PRESSED);
 8030a7e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
{
 8030a82:	4604      	mov	r4, r0
 8030a84:	460d      	mov	r5, r1
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 8030a86:	d109      	bne.n	8030a9c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8030a88:	b14e      	cbz	r6, 8030a9e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
    {
        // Pressed state changed, so invalidate
        invalidate();
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8030a8a:	792b      	ldrb	r3, [r5, #4]
 8030a8c:	2b01      	cmp	r3, #1
 8030a8e:	d10c      	bne.n	8030aaa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
    {
        // This is a click. Fire callback.
        executeAction();
 8030a90:	6823      	ldr	r3, [r4, #0]
 8030a92:	4620      	mov	r0, r4
 8030a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    }
}
 8030a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        executeAction();
 8030a9a:	4718      	bx	r3
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 8030a9c:	b12e      	cbz	r6, 8030aaa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
        invalidate();
 8030a9e:	6823      	ldr	r3, [r4, #0]
 8030aa0:	4620      	mov	r0, r4
 8030aa2:	695b      	ldr	r3, [r3, #20]
 8030aa4:	4798      	blx	r3
    if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8030aa6:	2e00      	cmp	r6, #0
 8030aa8:	d1ef      	bne.n	8030a8a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
}
 8030aaa:	bd70      	pop	{r4, r5, r6, pc}

08030aac <_ZNK8touchgfx3Box12getSolidRectEv>:
 8030aac:	2300      	movs	r3, #0
 8030aae:	8083      	strh	r3, [r0, #4]
 8030ab0:	80c3      	strh	r3, [r0, #6]
 8030ab2:	8003      	strh	r3, [r0, #0]
 8030ab4:	8043      	strh	r3, [r0, #2]
namespace touchgfx
{
Rect Box::getSolidRect() const
{
    Rect solidRect;
    if (alpha == 255)
 8030ab6:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8030aba:	2bff      	cmp	r3, #255	@ 0xff
    {
        solidRect.width = rect.width;
 8030abc:	bf01      	itttt	eq
 8030abe:	890b      	ldrheq	r3, [r1, #8]
 8030ac0:	8083      	strheq	r3, [r0, #4]
        solidRect.height = rect.height;
 8030ac2:	894b      	ldrheq	r3, [r1, #10]
 8030ac4:	80c3      	strheq	r3, [r0, #6]
    }
    return solidRect;
}
 8030ac6:	4770      	bx	lr

08030ac8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 8030ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8030aca:	4604      	mov	r4, r0
    Rect dirty = area;
 8030acc:	6808      	ldr	r0, [r1, #0]
 8030ace:	6849      	ldr	r1, [r1, #4]
 8030ad0:	466b      	mov	r3, sp
 8030ad2:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 8030ad4:	6823      	ldr	r3, [r4, #0]
 8030ad6:	4669      	mov	r1, sp
 8030ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030ada:	4620      	mov	r0, r4
 8030adc:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8030ade:	4b08      	ldr	r3, [pc, #32]	@ (8030b00 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8030ae0:	681b      	ldr	r3, [r3, #0]
 8030ae2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8030ae6:	b10a      	cbz	r2, 8030aec <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8030ae8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8030aea:	b900      	cbnz	r0, 8030aee <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
        return instance->lcdRef;
 8030aec:	6898      	ldr	r0, [r3, #8]
    HAL::lcd().fillRect(dirty, color, alpha);
 8030aee:	6803      	ldr	r3, [r0, #0]
 8030af0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8030af2:	6a1d      	ldr	r5, [r3, #32]
 8030af4:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8030af8:	4669      	mov	r1, sp
 8030afa:	47a8      	blx	r5
}
 8030afc:	b003      	add	sp, #12
 8030afe:	bd30      	pop	{r4, r5, pc}
 8030b00:	2000b8e0 	.word	0x2000b8e0

08030b04 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8030b04:	4770      	bx	lr

08030b06 <_ZN8touchgfx3BoxD0Ev>:
 8030b06:	b510      	push	{r4, lr}
 8030b08:	212c      	movs	r1, #44	@ 0x2c
 8030b0a:	4604      	mov	r4, r0
 8030b0c:	f00b fced 	bl	803c4ea <_ZdlPvj>
 8030b10:	4620      	mov	r0, r4
 8030b12:	bd10      	pop	{r4, pc}

08030b14 <_ZNK8touchgfx3Box17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        if (alpha > 0)
 8030b14:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8030b18:	b12a      	cbz	r2, 8030b26 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
        if (visible)
 8030b1a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8030b1e:	b112      	cbz	r2, 8030b26 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
            invalidate();
 8030b20:	6803      	ldr	r3, [r0, #0]
 8030b22:	695b      	ldr	r3, [r3, #20]
 8030b24:	4718      	bx	r3
        {
            Widget::invalidateContent();
        }
    }
 8030b26:	4770      	bx	lr

08030b28 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8030b28:	4770      	bx	lr

08030b2a <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8030b2a:	b510      	push	{r4, lr}
 8030b2c:	2134      	movs	r1, #52	@ 0x34
 8030b2e:	4604      	mov	r4, r0
 8030b30:	f00b fcdb 	bl	803c4ea <_ZdlPvj>
 8030b34:	4620      	mov	r0, r4
 8030b36:	bd10      	pop	{r4, pc}

08030b38 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
#include <touchgfx/widgets/BoxWithBorder.hpp>

namespace touchgfx
{
void BoxWithBorder::draw(const Rect& area) const
{
 8030b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030b3c:	4604      	mov	r4, r0
 8030b3e:	460e      	mov	r6, r1
    const Rect centerRect = Rect(borderSize, borderSize, getWidth() - (2 * borderSize), getHeight() - (2 * borderSize));
 8030b40:	8e01      	ldrh	r1, [r0, #48]	@ 0x30
 8030b42:	8922      	ldrh	r2, [r4, #8]
 8030b44:	8963      	ldrh	r3, [r4, #10]
 8030b46:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 8030b4a:	0049      	lsls	r1, r1, #1
 8030b4c:	b289      	uxth	r1, r1
 8030b4e:	1a52      	subs	r2, r2, r1
{
 8030b50:	b08e      	sub	sp, #56	@ 0x38
    const Rect centerRect = Rect(borderSize, borderSize, getWidth() - (2 * borderSize), getHeight() - (2 * borderSize));
 8030b52:	b212      	sxth	r2, r2
 8030b54:	1a5b      	subs	r3, r3, r1
 8030b56:	b21b      	sxth	r3, r3
        return width <= 0 || height <= 0;
 8030b58:	2a00      	cmp	r2, #0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8030b5a:	f8ad 0000 	strh.w	r0, [sp]
 8030b5e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8030b62:	f8ad 2004 	strh.w	r2, [sp, #4]
 8030b66:	f8ad 3006 	strh.w	r3, [sp, #6]
        return width <= 0 || height <= 0;
 8030b6a:	dd12      	ble.n	8030b92 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x5a>
 8030b6c:	2b00      	cmp	r3, #0
 8030b6e:	dd10      	ble.n	8030b92 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x5a>
        Rect r = *this;
 8030b70:	6830      	ldr	r0, [r6, #0]
 8030b72:	6871      	ldr	r1, [r6, #4]
 8030b74:	ab02      	add	r3, sp, #8
 8030b76:	c303      	stmia	r3!, {r0, r1}
        r &= other;
 8030b78:	4669      	mov	r1, sp
 8030b7a:	a802      	add	r0, sp, #8
 8030b7c:	f7ff fa6e 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
        HAL::lcd().fillRect(dirty, borderColor, alpha);
        return;
    }

    const Rect dirty = area & centerRect;
    Box::draw(dirty);
 8030b80:	4620      	mov	r0, r4
 8030b82:	a902      	add	r1, sp, #8
 8030b84:	f7ff ffa0 	bl	8030ac8 <_ZNK8touchgfx3Box4drawERKNS_4RectE>

    if (borderSize == 0)
 8030b88:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8030b8a:	b9a8      	cbnz	r0, 8030bb8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x80>
        {
            translateRectToAbsolute(borderDirty);
            HAL::lcd().fillRect(borderDirty, borderColor, alpha);
        }
    }
}
 8030b8c:	b00e      	add	sp, #56	@ 0x38
 8030b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        Rect dirty = area;
 8030b92:	6830      	ldr	r0, [r6, #0]
 8030b94:	6871      	ldr	r1, [r6, #4]
 8030b96:	ab06      	add	r3, sp, #24
 8030b98:	c303      	stmia	r3!, {r0, r1}
        translateRectToAbsolute(dirty);
 8030b9a:	6823      	ldr	r3, [r4, #0]
 8030b9c:	a906      	add	r1, sp, #24
 8030b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030ba0:	4620      	mov	r0, r4
 8030ba2:	4798      	blx	r3
        HAL::lcd().fillRect(dirty, borderColor, alpha);
 8030ba4:	f7f7 fa2a 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8030ba8:	6803      	ldr	r3, [r0, #0]
 8030baa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8030bac:	6a1d      	ldr	r5, [r3, #32]
 8030bae:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8030bb2:	a906      	add	r1, sp, #24
 8030bb4:	47a8      	blx	r5
        return;
 8030bb6:	e7e9      	b.n	8030b8c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x54>
        Rect(0, getHeight() - borderSize, getWidth(), borderSize),                            // lower
 8030bb8:	8963      	ldrh	r3, [r4, #10]
        return rect.width;
 8030bba:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8030bbe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8030bc2:	1a1f      	subs	r7, r3, r0
        Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                      // left
 8030bc4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    };
 8030bc8:	b202      	sxth	r2, r0
 8030bca:	2500      	movs	r5, #0
 8030bcc:	b21b      	sxth	r3, r3
 8030bce:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
        Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize)) // right
 8030bd2:	1a09      	subs	r1, r1, r0
 8030bd4:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8030bd8:	9506      	str	r5, [sp, #24]
 8030bda:	f8ad 201e 	strh.w	r2, [sp, #30]
 8030bde:	f8ad 5020 	strh.w	r5, [sp, #32]
 8030be2:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 8030be6:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8030bea:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8030bee:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8030bf2:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8030bf6:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8030bfa:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8030bfe:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8030c02:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
        Rect r = *this;
 8030c06:	af04      	add	r7, sp, #16
 8030c08:	ab06      	add	r3, sp, #24
 8030c0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8030c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8030c12:	e887 0003 	stmia.w	r7, {r0, r1}
        r &= other;
 8030c16:	4631      	mov	r1, r6
 8030c18:	4638      	mov	r0, r7
 8030c1a:	f7ff fa1f 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
        return width <= 0 || height <= 0;
 8030c1e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8030c22:	2b00      	cmp	r3, #0
 8030c24:	dd12      	ble.n	8030c4c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8030c26:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8030c2a:	2b00      	cmp	r3, #0
 8030c2c:	dd0e      	ble.n	8030c4c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
            translateRectToAbsolute(borderDirty);
 8030c2e:	6823      	ldr	r3, [r4, #0]
 8030c30:	4639      	mov	r1, r7
 8030c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030c34:	4620      	mov	r0, r4
 8030c36:	4798      	blx	r3
            HAL::lcd().fillRect(borderDirty, borderColor, alpha);
 8030c38:	f7f7 f9e0 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8030c3c:	6803      	ldr	r3, [r0, #0]
 8030c3e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8030c40:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8030c44:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8030c48:	4639      	mov	r1, r7
 8030c4a:	47c0      	blx	r8
    for (int i = 0; i < 4; i++)
 8030c4c:	3501      	adds	r5, #1
 8030c4e:	2d04      	cmp	r5, #4
 8030c50:	d1da      	bne.n	8030c08 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xd0>
 8030c52:	e79b      	b.n	8030b8c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x54>

08030c54 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8030c54:	4770      	bx	lr

08030c56 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
    }
}

void Button::setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
{
    up = bitmapReleased;
 8030c56:	880b      	ldrh	r3, [r1, #0]
{
 8030c58:	b570      	push	{r4, r5, r6, lr}
    up = bitmapReleased;
 8030c5a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    down = bitmapPressed;
 8030c5c:	4605      	mov	r5, r0
 8030c5e:	8813      	ldrh	r3, [r2, #0]
 8030c60:	f825 3f30 	strh.w	r3, [r5, #48]!
{
 8030c64:	4604      	mov	r4, r0
        setWidthHeight(bitmap.getWidth(), bitmap.getHeight());
 8030c66:	4628      	mov	r0, r5
 8030c68:	f007 fa6c 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8030c6c:	4606      	mov	r6, r0
 8030c6e:	4628      	mov	r0, r5
 8030c70:	f007 fa9c 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
        setWidth(width);
 8030c74:	6823      	ldr	r3, [r4, #0]
        setWidthHeight(bitmap.getWidth(), bitmap.getHeight());
 8030c76:	4605      	mov	r5, r0
        setWidth(width);
 8030c78:	4631      	mov	r1, r6
 8030c7a:	4620      	mov	r0, r4
 8030c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030c7e:	4798      	blx	r3
        setHeight(height);
 8030c80:	6823      	ldr	r3, [r4, #0]
 8030c82:	4629      	mov	r1, r5
 8030c84:	4620      	mov	r0, r4
 8030c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Button::setWidthHeight(down);
}
 8030c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8030c8c:	4718      	bx	r3

08030c8e <_ZN8touchgfx6ButtonD0Ev>:
 8030c8e:	b510      	push	{r4, lr}
 8030c90:	2134      	movs	r1, #52	@ 0x34
 8030c92:	4604      	mov	r4, r0
 8030c94:	f00b fc29 	bl	803c4ea <_ZdlPvj>
 8030c98:	4620      	mov	r0, r4
 8030c9a:	bd10      	pop	{r4, pc}

08030c9c <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 8030c9c:	b510      	push	{r4, lr}
    if (alpha < 255)
 8030c9e:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8030ca2:	2bff      	cmp	r3, #255	@ 0xff
{
 8030ca4:	4604      	mov	r4, r0
    if (alpha < 255)
 8030ca6:	d006      	beq.n	8030cb6 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
        : x(0), y(0), width(0), height(0)
 8030ca8:	2300      	movs	r3, #0
 8030caa:	8003      	strh	r3, [r0, #0]
 8030cac:	8043      	strh	r3, [r0, #2]
 8030cae:	8083      	strh	r3, [r0, #4]
 8030cb0:	80c3      	strh	r3, [r0, #6]
    {
        return Rect();
    }

    return (pressed ? down.getSolidRect() : up.getSolidRect());
}
 8030cb2:	4620      	mov	r0, r4
 8030cb4:	bd10      	pop	{r4, pc}
    return (pressed ? down.getSolidRect() : up.getSolidRect());
 8030cb6:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8030cba:	b11b      	cbz	r3, 8030cc4 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8030cbc:	3130      	adds	r1, #48	@ 0x30
 8030cbe:	f007 faa9 	bl	8038214 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8030cc2:	e7f6      	b.n	8030cb2 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8030cc4:	312e      	adds	r1, #46	@ 0x2e
 8030cc6:	e7fa      	b.n	8030cbe <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08030cc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
{
 8030cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    const Bitmap bmp(pressed ? down : up);
 8030ccc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 8030cd0:	b08a      	sub	sp, #40	@ 0x28
 8030cd2:	4604      	mov	r4, r0
 8030cd4:	4688      	mov	r8, r1
    const Bitmap bmp(pressed ? down : up);
 8030cd6:	b31b      	cbz	r3, 8030d20 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x58>
 8030cd8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8030cda:	f8ad 3014 	strh.w	r3, [sp, #20]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 8030cde:	a805      	add	r0, sp, #20
 8030ce0:	f007 fa30 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8030ce4:	4607      	mov	r7, r0
 8030ce6:	a805      	add	r0, sp, #20
 8030ce8:	f007 fa60 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
        return x + width;
 8030cec:	f9b8 6000 	ldrsh.w	r6, [r8]
 8030cf0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8030cf4:	4432      	add	r2, r6
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8030cf6:	2300      	movs	r3, #0
        return x + width;
 8030cf8:	b291      	uxth	r1, r2
 8030cfa:	b212      	sxth	r2, r2
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030cfc:	429a      	cmp	r2, r3
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8030cfe:	9306      	str	r3, [sp, #24]
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030d00:	dd01      	ble.n	8030d06 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x3e>
 8030d02:	42b7      	cmp	r7, r6
 8030d04:	dc0e      	bgt.n	8030d24 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x5c>
            width = 0;
 8030d06:	2300      	movs	r3, #0
 8030d08:	9307      	str	r3, [sp, #28]
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8030d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8030dc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 8030d0c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8030d10:	681b      	ldr	r3, [r3, #0]
 8030d12:	bb53      	cbnz	r3, 8030d6a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa2>
 8030d14:	4b2d      	ldr	r3, [pc, #180]	@ (8030dcc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 8030d16:	4a2e      	ldr	r2, [pc, #184]	@ (8030dd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8030d18:	482e      	ldr	r0, [pc, #184]	@ (8030dd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8030d1a:	2190      	movs	r1, #144	@ 0x90
 8030d1c:	f00b fc04 	bl	803c528 <__assert_func>
    const Bitmap bmp(pressed ? down : up);
 8030d20:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8030d22:	e7da      	b.n	8030cda <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x12>
        return y + height;
 8030d24:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8030d28:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8030d2c:	442b      	add	r3, r5
 8030d2e:	fa1f fc83 	uxth.w	ip, r3
 8030d32:	b21b      	sxth	r3, r3
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030d34:	2b00      	cmp	r3, #0
 8030d36:	dde6      	ble.n	8030d06 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x3e>
 8030d38:	42a8      	cmp	r0, r5
 8030d3a:	dde4      	ble.n	8030d06 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x3e>
            width = MIN(right(), other.right()) - newX;
 8030d3c:	4297      	cmp	r7, r2
        return x + width;
 8030d3e:	bfb8      	it	lt
 8030d40:	b2b9      	uxthlt	r1, r7
            height = MIN(bottom(), other.bottom()) - newY;
 8030d42:	4298      	cmp	r0, r3
            int16_t newX = MAX(x, other.x);
 8030d44:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
            int16_t newY = MAX(y, other.y);
 8030d48:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        return y + height;
 8030d4c:	bfb8      	it	lt
 8030d4e:	fa1f fc80 	uxthlt.w	ip, r0
            width = MIN(right(), other.right()) - newX;
 8030d52:	1b89      	subs	r1, r1, r6
            height = MIN(bottom(), other.bottom()) - newY;
 8030d54:	ebac 0c05 	sub.w	ip, ip, r5
            width = MIN(right(), other.right()) - newX;
 8030d58:	f8ad 101c 	strh.w	r1, [sp, #28]
            height = MIN(bottom(), other.bottom()) - newY;
 8030d5c:	f8ad c01e 	strh.w	ip, [sp, #30]
            x = newX;
 8030d60:	f8ad 6018 	strh.w	r6, [sp, #24]
            y = newY;
 8030d64:	f8ad 501a 	strh.w	r5, [sp, #26]
    }
 8030d68:	e7cf      	b.n	8030d0a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x42>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 8030d6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8030d6e:	429a      	cmp	r2, r3
 8030d70:	d026      	beq.n	8030dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf8>
        return width <= 0 || height <= 0;
 8030d72:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8030d76:	2b00      	cmp	r3, #0
 8030d78:	dd22      	ble.n	8030dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf8>
 8030d7a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8030d7e:	2b00      	cmp	r3, #0
 8030d80:	dd1e      	ble.n	8030dc0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xf8>
        : x(0), y(0), width(0), height(0)
 8030d82:	2300      	movs	r3, #0
 8030d84:	e9cd 3308 	strd	r3, r3, [sp, #32]
        translateRectToAbsolute(r);
 8030d88:	6823      	ldr	r3, [r4, #0]
 8030d8a:	a908      	add	r1, sp, #32
 8030d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8030d8e:	4620      	mov	r0, r4
 8030d90:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8030d92:	4b11      	ldr	r3, [pc, #68]	@ (8030dd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8030d94:	681b      	ldr	r3, [r3, #0]
 8030d96:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8030d9a:	b10a      	cbz	r2, 8030da0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xd8>
 8030d9c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8030d9e:	b900      	cbnz	r0, 8030da2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
        return instance->lcdRef;
 8030da0:	6898      	ldr	r0, [r3, #8]
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 8030da2:	6803      	ldr	r3, [r0, #0]
 8030da4:	2201      	movs	r2, #1
 8030da6:	9202      	str	r2, [sp, #8]
 8030da8:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
 8030dac:	9201      	str	r2, [sp, #4]
 8030dae:	aa06      	add	r2, sp, #24
 8030db0:	9200      	str	r2, [sp, #0]
 8030db2:	689c      	ldr	r4, [r3, #8]
 8030db4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8030db8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8030dbc:	a905      	add	r1, sp, #20
 8030dbe:	47a0      	blx	r4
}
 8030dc0:	b00a      	add	sp, #40	@ 0x28
 8030dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030dc6:	bf00      	nop
 8030dc8:	2000b968 	.word	0x2000b968
 8030dcc:	080419f6 	.word	0x080419f6
 8030dd0:	08041a32 	.word	0x08041a32
 8030dd4:	08041a65 	.word	0x08041a65
 8030dd8:	2000b8e0 	.word	0x2000b8e0

08030ddc <_ZNK8touchgfx6Button17invalidateContentEv>:
        return (pressed ? down : up);
    }

    virtual void invalidateContent() const
    {
        if (alpha > 0)
 8030ddc:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8030de0:	b12a      	cbz	r2, 8030dee <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
        if (visible)
 8030de2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8030de6:	b112      	cbz	r2, 8030dee <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
            invalidate();
 8030de8:	6803      	ldr	r3, [r0, #0]
 8030dea:	695b      	ldr	r3, [r3, #20]
 8030dec:	4718      	bx	r3
        {
            Widget::invalidateContent();
        }
    }
 8030dee:	4770      	bx	lr

08030df0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8030df0:	4770      	bx	lr

08030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
    bitmap = bmp;
 8030df2:	880b      	ldrh	r3, [r1, #0]
{
 8030df4:	b570      	push	{r4, r5, r6, lr}
 8030df6:	4604      	mov	r4, r0
    bitmap = bmp;
 8030df8:	84c3      	strh	r3, [r0, #38]	@ 0x26
        setWidthHeight(bitmap.getWidth(), bitmap.getHeight());
 8030dfa:	4608      	mov	r0, r1
{
 8030dfc:	460d      	mov	r5, r1
 8030dfe:	f007 f9a1 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8030e02:	4606      	mov	r6, r0
 8030e04:	4628      	mov	r0, r5
 8030e06:	f007 f9d1 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
        setWidth(width);
 8030e0a:	6823      	ldr	r3, [r4, #0]
        setWidthHeight(bitmap.getWidth(), bitmap.getHeight());
 8030e0c:	4605      	mov	r5, r0
        setWidth(width);
 8030e0e:	4631      	mov	r1, r6
 8030e10:	4620      	mov	r0, r4
 8030e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8030e14:	4798      	blx	r3
        setHeight(height);
 8030e16:	6823      	ldr	r3, [r4, #0]
 8030e18:	4629      	mov	r1, r5
 8030e1a:	4620      	mov	r0, r4
 8030e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    // When setting bitmap, adjust size of this widget to match.
    setWidthHeight(bmp);
}
 8030e1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8030e22:	4718      	bx	r3

08030e24 <_ZNK8touchgfx5Image12getSolidRectEv>:
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
    }
}

Rect Image::getSolidRect() const
{
 8030e24:	b510      	push	{r4, lr}
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 8030e26:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8030e2a:	2bff      	cmp	r3, #255	@ 0xff
{
 8030e2c:	4604      	mov	r4, r0
    if (alpha < 255)
 8030e2e:	d006      	beq.n	8030e3e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8030e30:	2300      	movs	r3, #0
 8030e32:	8003      	strh	r3, [r0, #0]
 8030e34:	8043      	strh	r3, [r0, #2]
 8030e36:	8083      	strh	r3, [r0, #4]
 8030e38:	80c3      	strh	r3, [r0, #6]
    {
        return Rect();
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
}
 8030e3a:	4620      	mov	r0, r4
 8030e3c:	bd10      	pop	{r4, pc}
    return bitmap.getSolidRect();
 8030e3e:	3126      	adds	r1, #38	@ 0x26
 8030e40:	f007 f9e8 	bl	8038214 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8030e44:	e7f9      	b.n	8030e3a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08030e46 <_ZN8touchgfx5ImageD0Ev>:
 8030e46:	b510      	push	{r4, lr}
 8030e48:	212c      	movs	r1, #44	@ 0x2c
 8030e4a:	4604      	mov	r4, r0
 8030e4c:	f00b fb4d 	bl	803c4ea <_ZdlPvj>
 8030e50:	4620      	mov	r0, r4
 8030e52:	bd10      	pop	{r4, pc}

08030e54 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
{
 8030e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    translateRectToAbsolute(meAbs); // To find our x and y coords in absolute.
 8030e58:	4604      	mov	r4, r0
{
 8030e5a:	b088      	sub	sp, #32
    translateRectToAbsolute(meAbs); // To find our x and y coords in absolute.
 8030e5c:	f854 3b26 	ldr.w	r3, [r4], #38
 8030e60:	f04f 0800 	mov.w	r8, #0
 8030e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8030e66:	460e      	mov	r6, r1
 8030e68:	e9cd 8804 	strd	r8, r8, [sp, #16]
    translateRectToAbsolute(meAbs); // To find our x and y coords in absolute.
 8030e6c:	a904      	add	r1, sp, #16
{
 8030e6e:	4605      	mov	r5, r0
    translateRectToAbsolute(meAbs); // To find our x and y coords in absolute.
 8030e70:	4798      	blx	r3
     *
     * @return a Rect describing the dimensions of this Bitmap.
     */
    Rect getRect() const
    {
        return Rect(0, 0, getWidth(), getHeight());
 8030e72:	4620      	mov	r0, r4
 8030e74:	f007 f966 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8030e78:	4607      	mov	r7, r0
 8030e7a:	4620      	mov	r0, r4
 8030e7c:	f007 f996 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
        Rect r = *this;
 8030e80:	f8ad 701c 	strh.w	r7, [sp, #28]
        r &= other;
 8030e84:	af06      	add	r7, sp, #24
        Rect r = *this;
 8030e86:	f8ad 001e 	strh.w	r0, [sp, #30]
        r &= other;
 8030e8a:	4631      	mov	r1, r6
 8030e8c:	4638      	mov	r0, r7
        Rect r = *this;
 8030e8e:	f8cd 8018 	str.w	r8, [sp, #24]
        r &= other;
 8030e92:	f7ff f8e3 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
        return width <= 0 || height <= 0;
 8030e96:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8030e9a:	4543      	cmp	r3, r8
 8030e9c:	dd19      	ble.n	8030ed2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7e>
 8030e9e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8030ea2:	4543      	cmp	r3, r8
 8030ea4:	dd15      	ble.n	8030ed2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7e>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8030ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8030ed8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x84>)
 8030ea8:	681b      	ldr	r3, [r3, #0]
 8030eaa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8030eae:	b10a      	cbz	r2, 8030eb4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x60>
 8030eb0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8030eb2:	b900      	cbnz	r0, 8030eb6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x62>
        return instance->lcdRef;
 8030eb4:	6898      	ldr	r0, [r3, #8]
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 8030eb6:	6803      	ldr	r3, [r0, #0]
 8030eb8:	2201      	movs	r2, #1
 8030eba:	9202      	str	r2, [sp, #8]
 8030ebc:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
 8030ec0:	e9cd 7200 	strd	r7, r2, [sp]
 8030ec4:	4621      	mov	r1, r4
 8030ec6:	689d      	ldr	r5, [r3, #8]
 8030ec8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8030ecc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8030ed0:	47a8      	blx	r5
}
 8030ed2:	b008      	add	sp, #32
 8030ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030ed8:	2000b8e0 	.word	0x2000b8e0

08030edc <_ZNK8touchgfx4Rect9intersectERKS0_>:
    bool intersect(const Rect& other) const
 8030edc:	b510      	push	{r4, lr}
        return x + width;
 8030ede:	888a      	ldrh	r2, [r1, #4]
 8030ee0:	f9b1 4000 	ldrsh.w	r4, [r1]
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030ee4:	f9b0 3000 	ldrsh.w	r3, [r0]
        return x + width;
 8030ee8:	4422      	add	r2, r4
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030eea:	b212      	sxth	r2, r2
 8030eec:	4293      	cmp	r3, r2
 8030eee:	da15      	bge.n	8030f1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
        return x + width;
 8030ef0:	8882      	ldrh	r2, [r0, #4]
 8030ef2:	4413      	add	r3, r2
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030ef4:	b21b      	sxth	r3, r3
 8030ef6:	429c      	cmp	r4, r3
 8030ef8:	da10      	bge.n	8030f1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
        return y + height;
 8030efa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8030efe:	88c9      	ldrh	r1, [r1, #6]
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030f00:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
        return y + height;
 8030f04:	4419      	add	r1, r3
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030f06:	b209      	sxth	r1, r1
 8030f08:	428a      	cmp	r2, r1
 8030f0a:	da07      	bge.n	8030f1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
        return y + height;
 8030f0c:	88c1      	ldrh	r1, [r0, #6]
 8030f0e:	440a      	add	r2, r1
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030f10:	b212      	sxth	r2, r2
 8030f12:	4293      	cmp	r3, r2
 8030f14:	bfac      	ite	ge
 8030f16:	2000      	movge	r0, #0
 8030f18:	2001      	movlt	r0, #1
    }
 8030f1a:	bd10      	pop	{r4, pc}
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8030f1c:	2000      	movs	r0, #0
 8030f1e:	e7fc      	b.n	8030f1a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08030f20 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
{
}

void ScalableImage::setScalingAlgorithm(ScalingAlgorithm algorithm)
{
    currentScalingAlgorithm = algorithm;
 8030f20:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
}
 8030f24:	4770      	bx	lr

08030f26 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:

ScalableImage::ScalingAlgorithm ScalableImage::getScalingAlgorithm()
{
    return currentScalingAlgorithm;
}
 8030f26:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8030f2a:	4770      	bx	lr

08030f2c <_ZN8touchgfx13ScalableImageD1Ev>:
 * algorithm used. The rendering algorithm can be changed dynamically. Please note that
 * scaling images is done at runtime and may require a lot of calculations.
 *
 * @note Note that this widget does not support 1 bit per pixel color depth.
 */
class ScalableImage : public Image
 8030f2c:	4770      	bx	lr

08030f2e <_ZN8touchgfx13ScalableImageD0Ev>:
 8030f2e:	b510      	push	{r4, lr}
 8030f30:	212c      	movs	r1, #44	@ 0x2c
 8030f32:	4604      	mov	r4, r0
 8030f34:	f00b fad9 	bl	803c4ea <_ZdlPvj>
 8030f38:	4620      	mov	r0, r4
 8030f3a:	bd10      	pop	{r4, pc}

08030f3c <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:

    drawQuad(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
}

Rect ScalableImage::getSolidRect() const
{
 8030f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    // If original image is completely solid the scaled image will also be
    // Return the unscaled solid rect limited to the widget
    // TextureMapper may not fill solid pixels in the whole widget due to antialiasing
    if (alpha == 255)
 8030f3e:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8030f42:	2bff      	cmp	r3, #255	@ 0xff
{
 8030f44:	b085      	sub	sp, #20
 8030f46:	4604      	mov	r4, r0
 8030f48:	460d      	mov	r5, r1
    if (alpha == 255)
 8030f4a:	d122      	bne.n	8030f92 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x56>
    {
        const Rect bmpSolid = bitmap.getSolidRect();
 8030f4c:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 8030f50:	4631      	mov	r1, r6
 8030f52:	4668      	mov	r0, sp
 8030f54:	f007 f95e 	bl	8038214 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
        if (bmpSolid.width == bitmap.getWidth() && bmpSolid.height == bitmap.getHeight())
 8030f58:	4630      	mov	r0, r6
 8030f5a:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8030f5e:	f007 f8f1 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8030f62:	4287      	cmp	r7, r0
 8030f64:	d115      	bne.n	8030f92 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x56>
 8030f66:	4630      	mov	r0, r6
 8030f68:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8030f6c:	f007 f91e 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8030f70:	4287      	cmp	r7, r0
 8030f72:	d10e      	bne.n	8030f92 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x56>
        return rect.width;
 8030f74:	68ab      	ldr	r3, [r5, #8]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8030f76:	2200      	movs	r2, #0
 8030f78:	e9cd 2302 	strd	r2, r3, [sp, #8]
        Rect r = *this;
 8030f7c:	466b      	mov	r3, sp
 8030f7e:	cb03      	ldmia	r3!, {r0, r1}
 8030f80:	6020      	str	r0, [r4, #0]
 8030f82:	6061      	str	r1, [r4, #4]
        r &= other;
 8030f84:	4620      	mov	r0, r4
 8030f86:	4619      	mov	r1, r3
 8030f88:	f7ff f868 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
        }
    }

    // Return empty rect otherwise
    return Rect();
}
 8030f8c:	4620      	mov	r0, r4
 8030f8e:	b005      	add	sp, #20
 8030f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        : x(0), y(0), width(0), height(0)
 8030f92:	2300      	movs	r3, #0
 8030f94:	8023      	strh	r3, [r4, #0]
 8030f96:	8063      	strh	r3, [r4, #2]
 8030f98:	80a3      	strh	r3, [r4, #4]
 8030f9a:	80e3      	strh	r3, [r4, #6]
    }
 8030f9c:	e7f6      	b.n	8030f8c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x50>
	...

08030fa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
        : x(0), y(0), width(0), height(0)
 8030fa0:	2300      	movs	r3, #0
ScalableImage::ScalableImage(const Bitmap& bmp /*= Bitmap() */)
 8030fa2:	b510      	push	{r4, lr}
 8030fa4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8030fa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
          cachedAbsX(0),
 8030fac:	e9c0 3307 	strd	r3, r3, [r0, #28]
          nextSibling(0),
 8030fb0:	e9c0 3305 	strd	r3, r3, [r0, #20]
          touchable(false),
 8030fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8030fb8:	8483      	strh	r3, [r0, #36]	@ 0x24
        : Widget(), bitmap(bmp), alpha(255)
 8030fba:	4b08      	ldr	r3, [pc, #32]	@ (8030fdc <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x3c>)
 8030fbc:	6003      	str	r3, [r0, #0]
 8030fbe:	880b      	ldrh	r3, [r1, #0]
 8030fc0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8030fc2:	23ff      	movs	r3, #255	@ 0xff
 8030fc4:	4604      	mov	r4, r0
 8030fc6:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
        Image::setBitmap(bmp);
 8030fca:	f7ff ff12 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
      currentScalingAlgorithm(BILINEAR_INTERPOLATION)
 8030fce:	4b04      	ldr	r3, [pc, #16]	@ (8030fe0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x40>)
 8030fd0:	6023      	str	r3, [r4, #0]
 8030fd2:	2301      	movs	r3, #1
 8030fd4:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
}
 8030fd8:	4620      	mov	r0, r4
 8030fda:	bd10      	pop	{r4, pc}
 8030fdc:	0804365c 	.word	0x0804365c
 8030fe0:	080436c8 	.word	0x080436c8

08030fe4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
    if (currentScalingAlgorithm == NEAREST_NEIGHBOR)
 8030fe4:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8030fe8:	3026      	adds	r0, #38	@ 0x26
 8030fea:	b90b      	cbnz	r3, 8030ff0 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xc>
        renderVariant = lookupNearestNeighborRenderVariant(bitmap);
 8030fec:	f005 b88e 	b.w	803610c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
        renderVariant = lookupBilinearRenderVariant(bitmap);
 8030ff0:	f005 b89c 	b.w	803612c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>

08030ff4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
{
 8030ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030ff8:	b0b3      	sub	sp, #204	@ 0xcc
 8030ffa:	4604      	mov	r4, r0
 8030ffc:	9207      	str	r2, [sp, #28]
        return rect.width;
 8030ffe:	6882      	ldr	r2, [r0, #8]
        r &= other;
 8031000:	ae11      	add	r6, sp, #68	@ 0x44
        Rect r = *this;
 8031002:	2000      	movs	r0, #0
 8031004:	e9cd 0211 	strd	r0, r2, [sp, #68]	@ 0x44
        r &= other;
 8031008:	4630      	mov	r0, r6
 803100a:	e9dd a93e 	ldrd	sl, r9, [sp, #248]	@ 0xf8
 803100e:	461d      	mov	r5, r3
 8031010:	e9dd 3b3c 	ldrd	r3, fp, [sp, #240]	@ 0xf0
 8031014:	f7ff f822 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
    Rect dirtyAreaAbsolute = dirtyArea;
 8031018:	e896 0003 	ldmia.w	r6, {r0, r1}
    translateRectToAbsolute(dirtyAreaAbsolute);
 803101c:	6822      	ldr	r2, [r4, #0]
    Rect dirtyAreaAbsolute = dirtyArea;
 803101e:	f10d 084c 	add.w	r8, sp, #76	@ 0x4c
    translateRectToAbsolute(dirtyAreaAbsolute);
 8031022:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    Rect dirtyAreaAbsolute = dirtyArea;
 8031024:	e888 0003 	stmia.w	r8, {r0, r1}
    translateRectToAbsolute(dirtyAreaAbsolute);
 8031028:	4641      	mov	r1, r8
 803102a:	4620      	mov	r0, r4
 803102c:	4790      	blx	r2
    Rect absoluteRect = getAbsoluteRect();
 803102e:	4621      	mov	r1, r4
 8031030:	a815      	add	r0, sp, #84	@ 0x54
 8031032:	f004 ffc7 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
        return rect;
 8031036:	1d27      	adds	r7, r4, #4
    DisplayTransformation::transformDisplayToFrameBuffer(absoluteRect);
 8031038:	a815      	add	r0, sp, #84	@ 0x54
 803103a:	f003 fd0d 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyArea, this->getRect());
 803103e:	4639      	mov	r1, r7
 8031040:	4630      	mov	r0, r6
 8031042:	f003 fd4d 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
    const uint16_t* textmap = (const uint16_t*)bitmap.getData();
 8031046:	f104 0626 	add.w	r6, r4, #38	@ 0x26
    DisplayTransformation::transformDisplayToFrameBuffer(dirtyAreaAbsolute);
 803104a:	4640      	mov	r0, r8
 803104c:	f003 fd04 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
    const uint16_t* textmap = (const uint16_t*)bitmap.getData();
 8031050:	4630      	mov	r0, r6
 8031052:	f007 f963 	bl	803831c <_ZNK8touchgfx6Bitmap7getDataEv>
    if (!textmap)
 8031056:	4680      	mov	r8, r0
 8031058:	2800      	cmp	r0, #0
 803105a:	f000 80ca 	beq.w	80311f2 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1fe>
    float x0 = triangleXs[0];
 803105e:	682a      	ldr	r2, [r5, #0]
 8031060:	9209      	str	r2, [sp, #36]	@ 0x24
    float x1 = triangleXs[1];
 8031062:	686a      	ldr	r2, [r5, #4]
    float y0 = triangleYs[0];
 8031064:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
    float x1 = triangleXs[1];
 8031066:	920a      	str	r2, [sp, #40]	@ 0x28
    float x2 = triangleXs[2];
 8031068:	68aa      	ldr	r2, [r5, #8]
 803106a:	920b      	str	r2, [sp, #44]	@ 0x2c
    float x3 = triangleXs[3];
 803106c:	68ea      	ldr	r2, [r5, #12]
 803106e:	920c      	str	r2, [sp, #48]	@ 0x30
    float y0 = triangleYs[0];
 8031070:	681a      	ldr	r2, [r3, #0]
 8031072:	920d      	str	r2, [sp, #52]	@ 0x34
    float y1 = triangleYs[1];
 8031074:	685a      	ldr	r2, [r3, #4]
 8031076:	920e      	str	r2, [sp, #56]	@ 0x38
    float y2 = triangleYs[2];
 8031078:	689a      	ldr	r2, [r3, #8]
 803107a:	920f      	str	r2, [sp, #60]	@ 0x3c
    float y3 = triangleYs[3];
 803107c:	68db      	ldr	r3, [r3, #12]
 803107e:	9310      	str	r3, [sp, #64]	@ 0x40
    DisplayTransformation::transformDisplayToFrameBuffer(x0, y0, this->getRect());
 8031080:	463a      	mov	r2, r7
 8031082:	a90d      	add	r1, sp, #52	@ 0x34
 8031084:	a809      	add	r0, sp, #36	@ 0x24
 8031086:	f003 fd0f 	bl	8034aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x1, y1, this->getRect());
 803108a:	463a      	mov	r2, r7
 803108c:	a90e      	add	r1, sp, #56	@ 0x38
 803108e:	a80a      	add	r0, sp, #40	@ 0x28
 8031090:	f003 fd0a 	bl	8034aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x2, y2, this->getRect());
 8031094:	463a      	mov	r2, r7
 8031096:	a90f      	add	r1, sp, #60	@ 0x3c
 8031098:	a80b      	add	r0, sp, #44	@ 0x2c
 803109a:	f003 fd05 	bl	8034aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
    DisplayTransformation::transformDisplayToFrameBuffer(x3, y3, this->getRect());
 803109e:	463a      	mov	r2, r7
 80310a0:	a910      	add	r1, sp, #64	@ 0x40
 80310a2:	a80c      	add	r0, sp, #48	@ 0x30
 80310a4:	f003 fd00 	bl	8034aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 *
 * @return The value as fixed28_4.
 */
FORCE_INLINE_FUNCTION fixed28_4 floatToFixed28_4(float value)
{
    return (fixed28_4)(value * 16);
 80310a8:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
    const Point3D point0 = { floatToFixed28_4(x0), floatToFixed28_4(y0), (float)(triangleZs[0]), (float)(triangleUs[0]), (float)(triangleVs[0]) };
 80310ac:	eddb 2a00 	vldr	s5, [fp]
    const Point3D point1 = { floatToFixed28_4(x1), floatToFixed28_4(y1), (float)(triangleZs[1]), (float)(triangleUs[1]), (float)(triangleVs[1]) };
 80310b0:	ed9b 4a01 	vldr	s8, [fp, #4]
    const Point3D point0 = { floatToFixed28_4(x0), floatToFixed28_4(y0), (float)(triangleZs[0]), (float)(triangleUs[0]), (float)(triangleVs[0]) };
 80310b4:	ed9a 3a00 	vldr	s6, [sl]
 80310b8:	edd9 3a00 	vldr	s7, [r9]
    const Point3D point1 = { floatToFixed28_4(x1), floatToFixed28_4(y1), (float)(triangleZs[1]), (float)(triangleUs[1]), (float)(triangleVs[1]) };
 80310bc:	edda 4a01 	vldr	s9, [sl, #4]
 80310c0:	ed99 5a01 	vldr	s10, [r9, #4]
    const Point3D point2 = { floatToFixed28_4(x2), floatToFixed28_4(y2), (float)(triangleZs[2]), (float)(triangleUs[2]), (float)(triangleVs[2]) };
 80310c4:	eddb 5a02 	vldr	s11, [fp, #8]
 80310c8:	ed9a 6a02 	vldr	s12, [sl, #8]
 80310cc:	edd9 6a02 	vldr	s13, [r9, #8]
    const Point3D point3 = { floatToFixed28_4(x3), floatToFixed28_4(y3), (float)(triangleZs[3]), (float)(triangleUs[3]), (float)(triangleVs[3]) };
 80310d0:	f8da e00c 	ldr.w	lr, [sl, #12]
 80310d4:	f8d9 c00c 	ldr.w	ip, [r9, #12]
    vertices[0] = point0;
 80310d8:	edcd 2a20 	vstr	s5, [sp, #128]	@ 0x80
 80310dc:	eeb0 7a67 	vmov.f32	s14, s15
 80310e0:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80310e4:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 80310e8:	ed8d 3a21 	vstr	s6, [sp, #132]	@ 0x84
 80310ec:	ee17 7a10 	vmov	r7, s14
 80310f0:	eeb0 7a67 	vmov.f32	s14, s15
 80310f4:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 80310f8:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 80310fc:	edcd 3a22 	vstr	s7, [sp, #136]	@ 0x88
 8031100:	ee17 5a10 	vmov	r5, s14
 8031104:	eeb0 7a67 	vmov.f32	s14, s15
 8031108:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 803110c:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
    vertices[1] = point1;
 8031110:	ed8d 4a25 	vstr	s8, [sp, #148]	@ 0x94
 8031114:	ee17 0a10 	vmov	r0, s14
 8031118:	eeb0 7a67 	vmov.f32	s14, s15
 803111c:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8031120:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 8031124:	edcd 4a26 	vstr	s9, [sp, #152]	@ 0x98
 8031128:	ee17 1a10 	vmov	r1, s14
 803112c:	eeb0 7a67 	vmov.f32	s14, s15
 8031130:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8031134:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8031138:	ed8d 5a27 	vstr	s10, [sp, #156]	@ 0x9c
 803113c:	ee17 2a10 	vmov	r2, s14
 8031140:	eeb0 7a67 	vmov.f32	s14, s15
 8031144:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
    vertices[2] = point2;
 8031148:	e9cd 1228 	strd	r1, r2, [sp, #160]	@ 0xa0
 803114c:	ee17 3a10 	vmov	r3, s14
 8031150:	ed9d 7a09 	vldr	s14, [sp, #36]	@ 0x24
 8031154:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
    const Point3D point3 = { floatToFixed28_4(x3), floatToFixed28_4(y3), (float)(triangleZs[3]), (float)(triangleUs[3]), (float)(triangleVs[3]) };
 8031158:	f8db b00c 	ldr.w	fp, [fp, #12]
    vertices[0] = point0;
 803115c:	971f      	str	r7, [sp, #124]	@ 0x7c
 803115e:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
    vertices[1] = point1;
 8031162:	e9cd 5023 	strd	r5, r0, [sp, #140]	@ 0x8c
 8031166:	ed8d 7a1e 	vstr	s14, [sp, #120]	@ 0x78
    vertices[2] = point2;
 803116a:	edcd 5a2a 	vstr	s11, [sp, #168]	@ 0xa8
    vertices[3] = point3;
 803116e:	932d      	str	r3, [sp, #180]	@ 0xb4
    const DrawingSurface dest = { fb, HAL::FRAME_BUFFER_WIDTH };
 8031170:	9b07      	ldr	r3, [sp, #28]
 8031172:	9317      	str	r3, [sp, #92]	@ 0x5c
 8031174:	4b20      	ldr	r3, [pc, #128]	@ (80311f8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x204>)
    vertices[2] = point2;
 8031176:	ed8d 6a2b 	vstr	s12, [sp, #172]	@ 0xac
    const DrawingSurface dest = { fb, HAL::FRAME_BUFFER_WIDTH };
 803117a:	881b      	ldrh	r3, [r3, #0]
    vertices[2] = point2;
 803117c:	edcd 6a2c 	vstr	s13, [sp, #176]	@ 0xb0
 8031180:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
    const TextureSurface src = { textmap, bitmap.getExtraData(), bitmap.getWidth(), bitmap.getHeight(), bitmap.getWidth() };
 8031184:	4630      	mov	r0, r6
 8031186:	e9cd 3818 	strd	r3, r8, [sp, #96]	@ 0x60
    vertices[3] = point3;
 803118a:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 803118e:	f8cd e0c0 	str.w	lr, [sp, #192]	@ 0xc0
 8031192:	f8cd c0c4 	str.w	ip, [sp, #196]	@ 0xc4
 8031196:	f8cd b0bc 	str.w	fp, [sp, #188]	@ 0xbc
    const TextureSurface src = { textmap, bitmap.getExtraData(), bitmap.getWidth(), bitmap.getHeight(), bitmap.getWidth() };
 803119a:	f007 f8ef 	bl	803837c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 803119e:	901a      	str	r0, [sp, #104]	@ 0x68
 80311a0:	4630      	mov	r0, r6
 80311a2:	f006 ffcf 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80311a6:	901b      	str	r0, [sp, #108]	@ 0x6c
 80311a8:	4630      	mov	r0, r6
 80311aa:	f006 ffff 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 80311ae:	901c      	str	r0, [sp, #112]	@ 0x70
 80311b0:	4630      	mov	r0, r6
 80311b2:	f006 ffc7 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80311b6:	4b11      	ldr	r3, [pc, #68]	@ (80311fc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x208>)
 80311b8:	901d      	str	r0, [sp, #116]	@ 0x74
 80311ba:	681b      	ldr	r3, [r3, #0]
 80311bc:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80311c0:	b10a      	cbz	r2, 80311c6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1d2>
 80311c2:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 80311c4:	b905      	cbnz	r5, 80311c8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1d4>
        return instance->lcdRef;
 80311c6:	689d      	ldr	r5, [r3, #8]
    HAL::lcd().drawTextureMapQuad(dest, vertices, src, absoluteRect, dirtyAreaAbsolute, lookupRenderVariant(), alpha, 0xFFFF);
 80311c8:	682b      	ldr	r3, [r5, #0]
 80311ca:	4620      	mov	r0, r4
 80311cc:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80311ce:	f7ff ff09 	bl	8030fe4 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 80311d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80311d6:	9304      	str	r3, [sp, #16]
 80311d8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80311dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80311e0:	ab13      	add	r3, sp, #76	@ 0x4c
 80311e2:	9301      	str	r3, [sp, #4]
 80311e4:	ab15      	add	r3, sp, #84	@ 0x54
 80311e6:	9300      	str	r3, [sp, #0]
 80311e8:	aa1e      	add	r2, sp, #120	@ 0x78
 80311ea:	ab19      	add	r3, sp, #100	@ 0x64
 80311ec:	a917      	add	r1, sp, #92	@ 0x5c
 80311ee:	4628      	mov	r0, r5
 80311f0:	47b0      	blx	r6
}
 80311f2:	b033      	add	sp, #204	@ 0xcc
 80311f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80311f8:	2000b8da 	.word	0x2000b8da
 80311fc:	2000b8e0 	.word	0x2000b8e0

08031200 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
{
 8031200:	b570      	push	{r4, r5, r6, lr}
 8031202:	ed2d 8b04 	vpush	{d8-d9}
    if (!alpha)
 8031206:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
{
 803120a:	b098      	sub	sp, #96	@ 0x60
 803120c:	4604      	mov	r4, r0
 803120e:	460d      	mov	r5, r1
    if (!alpha)
 8031210:	2b00      	cmp	r3, #0
 8031212:	d060      	beq.n	80312d6 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xd6>
    const float imageX1 = imageX0 + getWidth();
 8031214:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8031218:	ee09 3a10 	vmov	s18, r3
    const float imageY2 = imageY0 + getHeight();
 803121c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    const float right = (float)(bitmap.getWidth());
 8031220:	f100 0626 	add.w	r6, r0, #38	@ 0x26
    const float imageY2 = imageY0 + getHeight();
 8031224:	ee08 3a90 	vmov	s17, r3
    const float right = (float)(bitmap.getWidth());
 8031228:	4630      	mov	r0, r6
    triangleZs[0] = 100.f;
 803122a:	4b31      	ldr	r3, [pc, #196]	@ (80312f0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xf0>)
 803122c:	930c      	str	r3, [sp, #48]	@ 0x30
    triangleZs[1] = 100.f;
 803122e:	930d      	str	r3, [sp, #52]	@ 0x34
    triangleZs[2] = 100.f;
 8031230:	930e      	str	r3, [sp, #56]	@ 0x38
    triangleZs[3] = 100.f;
 8031232:	930f      	str	r3, [sp, #60]	@ 0x3c
    const float right = (float)(bitmap.getWidth());
 8031234:	f006 ff86 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8031238:	ee08 0a10 	vmov	s16, r0
    const float bottom = (float)(bitmap.getHeight());
 803123c:	4630      	mov	r0, r6
 803123e:	f006 ffb5 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
    if (HAL::DISPLAY_ROTATION == rotate90)
 8031242:	4b2c      	ldr	r3, [pc, #176]	@ (80312f4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xf4>)
 8031244:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80312f8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xf8>
 8031248:	781b      	ldrb	r3, [r3, #0]
    const float bottom = (float)(bitmap.getHeight());
 803124a:	ee07 0a10 	vmov	s14, r0
    if (HAL::DISPLAY_ROTATION == rotate90)
 803124e:	2b01      	cmp	r3, #1
    const float imageX1 = imageX0 + getWidth();
 8031250:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
    const float imageY2 = imageY0 + getHeight();
 8031254:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    const float right = (float)(bitmap.getWidth());
 8031258:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    const float bottom = (float)(bitmap.getHeight());
 803125c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    if (HAL::DISPLAY_ROTATION == rotate90)
 8031260:	d03d      	beq.n	80312de <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xde>
    float textureV3 = bottom;
 8031262:	eef0 6a47 	vmov.f32	s13, s14
    float textureV2 = bottom;
 8031266:	eeb0 6a47 	vmov.f32	s12, s14
    float textureU1 = right;
 803126a:	eeb0 5a48 	vmov.f32	s10, s16
    float textureU2 = right;
 803126e:	eeb0 7a48 	vmov.f32	s14, s16
    float textureV0 = 0.0f;
 8031272:	eef0 5a67 	vmov.f32	s11, s15
    float textureU3 = 0.0f;
 8031276:	eeb0 8a67 	vmov.f32	s16, s15
    drawQuad(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 803127a:	ab14      	add	r3, sp, #80	@ 0x50
 803127c:	9303      	str	r3, [sp, #12]
 803127e:	ab10      	add	r3, sp, #64	@ 0x40
 8031280:	9302      	str	r3, [sp, #8]
 8031282:	ab0c      	add	r3, sp, #48	@ 0x30
 8031284:	9301      	str	r3, [sp, #4]
 8031286:	ab08      	add	r3, sp, #32
 8031288:	9300      	str	r3, [sp, #0]
 803128a:	2200      	movs	r2, #0
 803128c:	ab04      	add	r3, sp, #16
 803128e:	4629      	mov	r1, r5
 8031290:	4620      	mov	r0, r4
    triangleXs[0] = imageX0;
 8031292:	edcd 7a04 	vstr	s15, [sp, #16]
    triangleXs[1] = imageX1;
 8031296:	ed8d 9a05 	vstr	s18, [sp, #20]
    triangleXs[2] = imageX2;
 803129a:	ed8d 9a06 	vstr	s18, [sp, #24]
    triangleXs[3] = imageX3;
 803129e:	edcd 7a07 	vstr	s15, [sp, #28]
    triangleYs[0] = imageY0;
 80312a2:	edcd 7a08 	vstr	s15, [sp, #32]
    triangleYs[1] = imageY1;
 80312a6:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
    triangleYs[2] = imageY2;
 80312aa:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
    triangleYs[3] = imageY3;
 80312ae:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
    triangleUs[0] = textureU0;
 80312b2:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
    triangleUs[1] = textureU1;
 80312b6:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
    triangleUs[2] = textureU2;
 80312ba:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
    triangleUs[3] = textureU3;
 80312be:	edcd 5a13 	vstr	s11, [sp, #76]	@ 0x4c
    triangleVs[0] = textureV0;
 80312c2:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
    triangleVs[1] = textureV1;
 80312c6:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
    triangleVs[2] = textureV2;
 80312ca:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
    triangleVs[3] = textureV3;
 80312ce:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
    drawQuad(invalidatedArea, fb, triangleXs, triangleYs, triangleZs, triangleUs, triangleVs);
 80312d2:	f7ff fe8f 	bl	8030ff4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
}
 80312d6:	b018      	add	sp, #96	@ 0x60
 80312d8:	ecbd 8b04 	vpop	{d8-d9}
 80312dc:	bd70      	pop	{r4, r5, r6, pc}
        textureV3 = right;
 80312de:	eef0 6a48 	vmov.f32	s13, s16
        textureU3 = bottom;
 80312e2:	eef0 5a47 	vmov.f32	s11, s14
        textureV2 = 0.0f;
 80312e6:	eeb0 6a67 	vmov.f32	s12, s15
        textureU1 = 0.0f;
 80312ea:	eeb0 5a67 	vmov.f32	s10, s15
 80312ee:	e7c4      	b.n	803127a <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x7a>
 80312f0:	42c80000 	.word	0x42c80000
 80312f4:	2000b8d8 	.word	0x2000b8d8
 80312f8:	00000000 	.word	0x00000000

080312fc <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
    }
 80312fc:	2000      	movs	r0, #0
 80312fe:	4770      	bx	lr

08031300 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8031300:	4770      	bx	lr
	...

08031304 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
        return typedTextId < numberOfTypedTexts;
 8031304:	4b16      	ldr	r3, [pc, #88]	@ (8031360 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8031306:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
    return LEFT;
}

int16_t TextArea::getTextHeight() const
{
    return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), getWildcard1(), getWildcard2()) : 0;
 8031308:	881b      	ldrh	r3, [r3, #0]
 803130a:	428b      	cmp	r3, r1
{
 803130c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031310:	4604      	mov	r4, r0
    return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), getWildcard1(), getWildcard2()) : 0;
 8031312:	d921      	bls.n	8031358 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x54>
 8031314:	6803      	ldr	r3, [r0, #0]
 8031316:	6f9f      	ldr	r7, [r3, #120]	@ 0x78
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031318:	4b12      	ldr	r3, [pc, #72]	@ (8031364 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x60>)
 803131a:	681b      	ldr	r3, [r3, #0]
 803131c:	b92b      	cbnz	r3, 803132a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x26>
 803131e:	4b12      	ldr	r3, [pc, #72]	@ (8031368 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x64>)
 8031320:	4a12      	ldr	r2, [pc, #72]	@ (803136c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x68>)
 8031322:	4813      	ldr	r0, [pc, #76]	@ (8031370 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x6c>)
 8031324:	2160      	movs	r1, #96	@ 0x60
 8031326:	f00b f8ff 	bl	803c528 <__assert_func>
        return texts->getText(typedTextId);
 803132a:	4b12      	ldr	r3, [pc, #72]	@ (8031374 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x70>)
 803132c:	6818      	ldr	r0, [r3, #0]
 803132e:	f7fb fdc1 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8031332:	6823      	ldr	r3, [r4, #0]
 8031334:	4605      	mov	r5, r0
 8031336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8031338:	4620      	mov	r0, r4
 803133a:	4798      	blx	r3
 803133c:	6823      	ldr	r3, [r4, #0]
 803133e:	4606      	mov	r6, r0
 8031340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8031344:	4620      	mov	r0, r4
 8031346:	4798      	blx	r3
 8031348:	4632      	mov	r2, r6
 803134a:	4603      	mov	r3, r0
 803134c:	4629      	mov	r1, r5
 803134e:	4620      	mov	r0, r4
 8031350:	46bc      	mov	ip, r7
}
 8031352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), getWildcard1(), getWildcard2()) : 0;
 8031356:	4760      	bx	ip
}
 8031358:	2000      	movs	r0, #0
 803135a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803135e:	bf00      	nop
 8031360:	2000b934 	.word	0x2000b934
 8031364:	2000b930 	.word	0x2000b930
 8031368:	08040d9d 	.word	0x08040d9d
 803136c:	08040e9a 	.word	0x08040e9a
 8031370:	08040e1a 	.word	0x08040e1a
 8031374:	2000b93c 	.word	0x2000b93c

08031378 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
        return typedTextId < numberOfTypedTexts;
 8031378:	4b1c      	ldr	r3, [pc, #112]	@ (80313ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)

uint16_t TextArea::getTextWidth() const
{
 803137a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), getWildcard1(), getWildcard2()) : 0;
 803137e:	881b      	ldrh	r3, [r3, #0]
 8031380:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8031382:	428b      	cmp	r3, r1
{
 8031384:	4604      	mov	r4, r0
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), getWildcard1(), getWildcard2()) : 0;
 8031386:	d92f      	bls.n	80313e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031388:	4b19      	ldr	r3, [pc, #100]	@ (80313f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 803138a:	681b      	ldr	r3, [r3, #0]
 803138c:	b92b      	cbnz	r3, 803139a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x22>
 803138e:	4b19      	ldr	r3, [pc, #100]	@ (80313f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8031390:	4a19      	ldr	r2, [pc, #100]	@ (80313f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8031392:	481a      	ldr	r0, [pc, #104]	@ (80313fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x84>)
 8031394:	216c      	movs	r1, #108	@ 0x6c
 8031396:	f00b f8c7 	bl	803c528 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 803139a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 803139e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80313a2:	4b17      	ldr	r3, [pc, #92]	@ (8031400 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x88>)
        return typedTexts[typedTextId].direction;
 80313a4:	7855      	ldrb	r5, [r2, #1]
        return fonts[typedTexts[typedTextId].fontIdx];
 80313a6:	681b      	ldr	r3, [r3, #0]
 80313a8:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
 80313ac:	f8d8 3000 	ldr.w	r3, [r8]
 80313b0:	f8d3 901c 	ldr.w	r9, [r3, #28]
        return texts->getText(typedTextId);
 80313b4:	4b13      	ldr	r3, [pc, #76]	@ (8031404 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x8c>)
 80313b6:	6818      	ldr	r0, [r3, #0]
 80313b8:	f7fb fd7c 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 80313bc:	6823      	ldr	r3, [r4, #0]
 80313be:	4606      	mov	r6, r0
 80313c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80313c2:	4620      	mov	r0, r4
 80313c4:	4798      	blx	r3
 80313c6:	6823      	ldr	r3, [r4, #0]
 80313c8:	4607      	mov	r7, r0
 80313ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80313ce:	4620      	mov	r0, r4
 80313d0:	4798      	blx	r3
        return typedTexts[typedTextId].direction;
 80313d2:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80313d6:	9000      	str	r0, [sp, #0]
 80313d8:	463b      	mov	r3, r7
 80313da:	4632      	mov	r2, r6
 80313dc:	4629      	mov	r1, r5
 80313de:	4640      	mov	r0, r8
 80313e0:	47c8      	blx	r9
}
 80313e2:	b003      	add	sp, #12
 80313e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), getWildcard1(), getWildcard2()) : 0;
 80313e8:	2000      	movs	r0, #0
 80313ea:	e7fa      	b.n	80313e2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6a>
 80313ec:	2000b934 	.word	0x2000b934
 80313f0:	2000b930 	.word	0x2000b930
 80313f4:	08040d9d 	.word	0x08040d9d
 80313f8:	08040ddf 	.word	0x08040ddf
 80313fc:	08040e1a 	.word	0x08040e1a
 8031400:	2000b938 	.word	0x2000b938
 8031404:	2000b93c 	.word	0x2000b93c

08031408 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
        }
    }
}

int16_t TextArea::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 8031408:	b40e      	push	{r1, r2, r3}
 803140a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return typedTextId < numberOfTypedTexts;
 803140e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8031510 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
    if (!typedText.hasValidId())
 8031412:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8031414:	f8b9 3000 	ldrh.w	r3, [r9]
 8031418:	4293      	cmp	r3, r2
{
 803141a:	b09c      	sub	sp, #112	@ 0x70
 803141c:	4604      	mov	r4, r0
    if (!typedText.hasValidId())
 803141e:	d806      	bhi.n	803142e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x26>
    {
        return 0;
 8031420:	2700      	movs	r7, #0

    const int16_t numLines = LCD::getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth() - indentation);

    va_end(pArg);
    return textHeight + linespace > 0 ? numLines * textHeight + (numLines - 1) * linespace : (numLines > 0 ? textHeight : 0);
}
 8031422:	4638      	mov	r0, r7
 8031424:	b01c      	add	sp, #112	@ 0x70
 8031426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803142a:	b003      	add	sp, #12
 803142c:	4770      	bx	lr
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 803142e:	f8df b0e4 	ldr.w	fp, [pc, #228]	@ 8031514 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x10c>
    va_start(pArg, format);
 8031432:	ab26      	add	r3, sp, #152	@ 0x98
 8031434:	9302      	str	r3, [sp, #8]
 8031436:	f8db 3000 	ldr.w	r3, [fp]
 803143a:	b92b      	cbnz	r3, 8031448 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x40>
 803143c:	4b2f      	ldr	r3, [pc, #188]	@ (80314fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 803143e:	4a30      	ldr	r2, [pc, #192]	@ (8031500 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8031440:	216c      	movs	r1, #108	@ 0x6c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031442:	4830      	ldr	r0, [pc, #192]	@ (8031504 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8031444:	f00b f870 	bl	803c528 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8031448:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8031518 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x110>
 803144c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8031450:	f8d8 3000 	ldr.w	r3, [r8]
 8031454:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    const int16_t textHeight = fontToDraw->getHeight();
 8031458:	6833      	ldr	r3, [r6, #0]
 803145a:	4630      	mov	r0, r6
 803145c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803145e:	4798      	blx	r3
 8031460:	4605      	mov	r5, r0
 8031462:	b207      	sxth	r7, r0
    TextProvider textProvider;
 8031464:	a803      	add	r0, sp, #12
 8031466:	f005 fa32 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg, fontToDraw->getGSUBTable(), fontToDraw->getContextualFormsTable());
 803146a:	6833      	ldr	r3, [r6, #0]
 803146c:	4630      	mov	r0, r6
 803146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8031470:	4798      	blx	r3
 8031472:	6833      	ldr	r3, [r6, #0]
 8031474:	4682      	mov	sl, r0
 8031476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8031478:	4630      	mov	r0, r6
 803147a:	4798      	blx	r3
 803147c:	9925      	ldr	r1, [sp, #148]	@ 0x94
 803147e:	9000      	str	r0, [sp, #0]
 8031480:	4653      	mov	r3, sl
 8031482:	9a02      	ldr	r2, [sp, #8]
 8031484:	a803      	add	r0, sp, #12
 8031486:	f005 fa7d 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 803148a:	f8db 3000 	ldr.w	r3, [fp]
    const int16_t numLines = LCD::getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth() - indentation);
 803148e:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8031492:	b91b      	cbnz	r3, 803149c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 8031494:	4b19      	ldr	r3, [pc, #100]	@ (80314fc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8031496:	4a1c      	ldr	r2, [pc, #112]	@ (8031508 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>)
 8031498:	2190      	movs	r1, #144	@ 0x90
 803149a:	e7d2      	b.n	8031442 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
        return typedTextId < numberOfTypedTexts;
 803149c:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 803149e:	f8b9 0000 	ldrh.w	r0, [r9]
 80314a2:	4290      	cmp	r0, r2
 80314a4:	d803      	bhi.n	80314ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xa6>
 80314a6:	4b19      	ldr	r3, [pc, #100]	@ (803150c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>)
 80314a8:	4a17      	ldr	r2, [pc, #92]	@ (8031508 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>)
 80314aa:	2191      	movs	r1, #145	@ 0x91
 80314ac:	e7c9      	b.n	8031442 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
        return typedTexts[typedTextId].direction;
 80314ae:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
        return fonts[typedTexts[typedTextId].fontIdx];
 80314b2:	f813 6012 	ldrb.w	r6, [r3, r2, lsl #1]
        return typedTexts[typedTextId].direction;
 80314b6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80314ba:	8923      	ldrh	r3, [r4, #8]
 80314bc:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
        return fonts[typedTexts[typedTextId].fontIdx];
 80314c0:	f8d8 0000 	ldr.w	r0, [r8]
 80314c4:	eba3 030c 	sub.w	r3, r3, ip
 80314c8:	b21b      	sxth	r3, r3
 80314ca:	9300      	str	r3, [sp, #0]
 80314cc:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 80314d0:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80314d4:	a803      	add	r0, sp, #12
 80314d6:	f002 ffc5 	bl	8034464 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
    return textHeight + linespace > 0 ? numLines * textHeight + (numLines - 1) * linespace : (numLines > 0 ? textHeight : 0);
 80314da:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 80314de:	18b9      	adds	r1, r7, r2
 80314e0:	2900      	cmp	r1, #0
    const int16_t numLines = LCD::getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth() - indentation);
 80314e2:	b203      	sxth	r3, r0
    return textHeight + linespace > 0 ? numLines * textHeight + (numLines - 1) * linespace : (numLines > 0 ? textHeight : 0);
 80314e4:	dd06      	ble.n	80314f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 80314e6:	3b01      	subs	r3, #1
 80314e8:	fb13 f302 	smulbb	r3, r3, r2
 80314ec:	fb15 3500 	smlabb	r5, r5, r0, r3
 80314f0:	b22f      	sxth	r7, r5
 80314f2:	e796      	b.n	8031422 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x1a>
 80314f4:	2b00      	cmp	r3, #0
 80314f6:	dc94      	bgt.n	8031422 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x1a>
 80314f8:	e792      	b.n	8031420 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x18>
 80314fa:	bf00      	nop
 80314fc:	08040d9d 	.word	0x08040d9d
 8031500:	08040ddf 	.word	0x08040ddf
 8031504:	08040e1a 	.word	0x08040e1a
 8031508:	08041aa4 	.word	0x08041aa4
 803150c:	08040e5c 	.word	0x08040e5c
 8031510:	2000b934 	.word	0x2000b934
 8031514:	2000b930 	.word	0x2000b930
 8031518:	2000b938 	.word	0x2000b938

0803151c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
    }
    invalidate();
}

TextArea::BoundingArea TextArea::calculateBoundingArea() const
{
 803151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return typedTextId < numberOfTypedTexts;
 8031520:	f8df a2fc 	ldr.w	sl, [pc, #764]	@ 8031820 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 8031524:	460c      	mov	r4, r1
    if (!typedText.hasValidId())
 8031526:	f8ba 3000 	ldrh.w	r3, [sl]
 803152a:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 803152c:	428b      	cmp	r3, r1
{
 803152e:	b0b9      	sub	sp, #228	@ 0xe4
 8031530:	4681      	mov	r9, r0
    if (!typedText.hasValidId())
 8031532:	d809      	bhi.n	8031548 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2c>
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8031534:	2300      	movs	r3, #0
 8031536:	f04f 32ff 	mov.w	r2, #4294967295
 803153a:	e9c0 3200 	strd	r3, r2, [r0]
              text(0)
 803153e:	6083      	str	r3, [r0, #8]
        boundingRect = Rect(boundingRect.y, getHeight() - boundingRect.right(), boundingRect.height, boundingRect.width);
        break;
    }

    return TextArea::BoundingArea(boundingRect, typedText.getText());
}
 8031540:	4648      	mov	r0, r9
 8031542:	b039      	add	sp, #228	@ 0xe4
 8031544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031548:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 8031814 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>
 803154c:	f8d8 3000 	ldr.w	r3, [r8]
 8031550:	b92b      	cbnz	r3, 803155e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x42>
 8031552:	4bab      	ldr	r3, [pc, #684]	@ (8031800 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e4>)
 8031554:	4aab      	ldr	r2, [pc, #684]	@ (8031804 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>)
 8031556:	216c      	movs	r1, #108	@ 0x6c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031558:	48ab      	ldr	r0, [pc, #684]	@ (8031808 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ec>)
 803155a:	f00a ffe5 	bl	803c528 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 803155e:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8031562:	4baa      	ldr	r3, [pc, #680]	@ (803180c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f0>)
 8031564:	681b      	ldr	r3, [r3, #0]
 8031566:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 803156a:	4ba9      	ldr	r3, [pc, #676]	@ (8031810 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 803156c:	6818      	ldr	r0, [r3, #0]
 803156e:	f7fb fca1 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
    const int16_t fontHeight = fontToDraw->getHeight();
 8031572:	682b      	ldr	r3, [r5, #0]
 8031574:	4607      	mov	r7, r0
 8031576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8031578:	4628      	mov	r0, r5
 803157a:	4798      	blx	r3
 803157c:	b203      	sxth	r3, r0
 803157e:	9303      	str	r3, [sp, #12]
    const int16_t lineHeight = fontHeight + linespace;
 8031580:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8031582:	4418      	add	r0, r3
    if (wideTextAction == WIDE_TEXT_NONE)
 8031584:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
    const int16_t lineHeight = fontHeight + linespace;
 8031588:	b286      	uxth	r6, r0
    if (wideTextAction == WIDE_TEXT_NONE)
 803158a:	2b00      	cmp	r3, #0
 803158c:	f040 8083 	bne.w	8031696 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x17a>
        TextProvider textProvider;
 8031590:	a806      	add	r0, sp, #24
 8031592:	f005 f99c 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
        textProvider.initialize(textToDraw, fontToDraw->getGSUBTable(), fontToDraw->getContextualFormsTable(), getWildcard1(), getWildcard2());
 8031596:	682b      	ldr	r3, [r5, #0]
 8031598:	4628      	mov	r0, r5
 803159a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 803159c:	4798      	blx	r3
 803159e:	682b      	ldr	r3, [r5, #0]
 80315a0:	4680      	mov	r8, r0
 80315a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80315a4:	4628      	mov	r0, r5
 80315a6:	4798      	blx	r3
 80315a8:	6823      	ldr	r3, [r4, #0]
 80315aa:	4683      	mov	fp, r0
 80315ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80315ae:	4620      	mov	r0, r4
 80315b0:	4798      	blx	r3
 80315b2:	6822      	ldr	r2, [r4, #0]
 80315b4:	9004      	str	r0, [sp, #16]
 80315b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80315ba:	4620      	mov	r0, r4
 80315bc:	4790      	blx	r2
 80315be:	9b04      	ldr	r3, [sp, #16]
 80315c0:	9001      	str	r0, [sp, #4]
 80315c2:	9300      	str	r3, [sp, #0]
 80315c4:	4642      	mov	r2, r8
 80315c6:	465b      	mov	r3, fp
 80315c8:	4639      	mov	r1, r7
 80315ca:	a806      	add	r0, sp, #24
 80315cc:	f005 f9ef 	bl	80369ae <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
        int16_t widgetRectHeight = (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180) ? getHeight() : getWidth();
 80315d0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80315d4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
{
 80315d8:	f04f 0800 	mov.w	r8, #0
        return rect.height;
 80315dc:	bf0c      	ite	eq
 80315de:	f9b4 b00a 	ldrsheq.w	fp, [r4, #10]
        return rect.width;
 80315e2:	f9b4 b008 	ldrshne.w	fp, [r4, #8]
 80315e6:	4647      	mov	r7, r8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80315e8:	4b8a      	ldr	r3, [pc, #552]	@ (8031814 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80315ea:	681b      	ldr	r3, [r3, #0]
 80315ec:	b91b      	cbnz	r3, 80315f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xda>
 80315ee:	4b84      	ldr	r3, [pc, #528]	@ (8031800 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e4>)
 80315f0:	4a89      	ldr	r2, [pc, #548]	@ (8031818 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 80315f2:	2190      	movs	r1, #144	@ 0x90
 80315f4:	e7b0      	b.n	8031558 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c>
        return typedTextId < numberOfTypedTexts;
 80315f6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80315f8:	f8ba 1000 	ldrh.w	r1, [sl]
 80315fc:	4291      	cmp	r1, r2
 80315fe:	d803      	bhi.n	8031608 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xec>
 8031600:	4b86      	ldr	r3, [pc, #536]	@ (803181c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8031602:	4a85      	ldr	r2, [pc, #532]	@ (8031818 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8031604:	2191      	movs	r1, #145	@ 0x91
 8031606:	e7a7      	b.n	8031558 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c>
        return typedTexts[typedTextId].direction;
 8031608:	eb03 0342 	add.w	r3, r3, r2, lsl #1
            const uint16_t lineWidth = LCD::stringWidth(textProvider, *(fontToDraw), 0x7FFF, typedText.getTextDirection());
 803160c:	4629      	mov	r1, r5
 803160e:	785b      	ldrb	r3, [r3, #1]
 8031610:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8031614:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8031618:	a806      	add	r0, sp, #24
 803161a:	f002 fc3e 	bl	8033e9a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
            width = MAX(width, lineWidth);
 803161e:	42b8      	cmp	r0, r7
 8031620:	bfb8      	it	lt
 8031622:	4638      	movlt	r0, r7
 8031624:	b207      	sxth	r7, r0
            numberOfLines++;
 8031626:	f108 0801 	add.w	r8, r8, #1
        } while (!textProvider.endOfString() && widgetRectHeight + fontToDraw->getPixelsAboveTop() > 0);
 803162a:	a806      	add	r0, sp, #24
            numberOfLines++;
 803162c:	fa1f f888 	uxth.w	r8, r8
        } while (!textProvider.endOfString() && widgetRectHeight + fontToDraw->getPixelsAboveTop() > 0);
 8031630:	f005 f974 	bl	803691c <_ZN8touchgfx12TextProvider11endOfStringEv>
 8031634:	b940      	cbnz	r0, 8031648 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x12c>
 8031636:	7a2a      	ldrb	r2, [r5, #8]
 8031638:	ebab 0306 	sub.w	r3, fp, r6
            widgetRectHeight -= lineHeight;
 803163c:	fa0f fb83 	sxth.w	fp, r3
        } while (!textProvider.endOfString() && widgetRectHeight + fontToDraw->getPixelsAboveTop() > 0);
 8031640:	fa02 f383 	sxtah	r3, r2, r3
 8031644:	2b00      	cmp	r3, #0
 8031646:	dccf      	bgt.n	80315e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xcc>
    int16_t height = (numberOfLines * lineHeight) - linespace;
 8031648:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 803164a:	fb16 f308 	smulbb	r3, r6, r8
 803164e:	1a9b      	subs	r3, r3, r2
        return pixelsBelowBottom;
 8031650:	7a6e      	ldrb	r6, [r5, #9]
    height = MAX(height, fontHeight) + fontToDraw->getPixelsBelowBottom();
 8031652:	9a03      	ldr	r2, [sp, #12]
 8031654:	b21b      	sxth	r3, r3
 8031656:	4293      	cmp	r3, r2
 8031658:	bfac      	ite	ge
 803165a:	18f6      	addge	r6, r6, r3
 803165c:	18b6      	addlt	r6, r6, r2
    const int16_t areaWidth = (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180) ? getWidth() : getHeight();
 803165e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8031662:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
    switch (getAlignment())
 8031666:	6823      	ldr	r3, [r4, #0]
 8031668:	bf08      	it	eq
 803166a:	f9b4 b008 	ldrsheq.w	fp, [r4, #8]
 803166e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        return rect.height;
 8031670:	bf18      	it	ne
 8031672:	f9b4 b00a 	ldrshne.w	fp, [r4, #10]
 8031676:	4620      	mov	r0, r4
 8031678:	4798      	blx	r3
 803167a:	2801      	cmp	r0, #1
    height = MAX(height, fontHeight) + fontToDraw->getPixelsBelowBottom();
 803167c:	fa1f f886 	uxth.w	r8, r6
        boundingRect.x = areaWidth - (boundingRect.width + indentation);
 8031680:	b2ba      	uxth	r2, r7
    height = MAX(height, fontHeight) + fontToDraw->getPixelsBelowBottom();
 8031682:	b236      	sxth	r6, r6
    switch (getAlignment())
 8031684:	f000 80ce 	beq.w	8031824 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8031688:	2802      	cmp	r0, #2
 803168a:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 803168e:	f000 80f1 	beq.w	8031874 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x358>
        boundingRect.x = areaWidth - (boundingRect.width + indentation);
 8031692:	b21b      	sxth	r3, r3
        break;
 8031694:	e0cc      	b.n	8031830 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
        TextProvider wideTextProvider;
 8031696:	a81f      	add	r0, sp, #124	@ 0x7c
 8031698:	f005 f919 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
        wideTextProvider.initialize(textToDraw, fontToDraw->getGSUBTable(), fontToDraw->getContextualFormsTable(), getWildcard1(), getWildcard2());
 803169c:	682b      	ldr	r3, [r5, #0]
 803169e:	4628      	mov	r0, r5
 80316a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80316a2:	4798      	blx	r3
 80316a4:	682b      	ldr	r3, [r5, #0]
 80316a6:	4683      	mov	fp, r0
 80316a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80316aa:	4628      	mov	r0, r5
 80316ac:	4798      	blx	r3
 80316ae:	6822      	ldr	r2, [r4, #0]
 80316b0:	9005      	str	r0, [sp, #20]
 80316b2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80316b4:	4620      	mov	r0, r4
 80316b6:	4790      	blx	r2
 80316b8:	6821      	ldr	r1, [r4, #0]
 80316ba:	9004      	str	r0, [sp, #16]
 80316bc:	f8d1 1080 	ldr.w	r1, [r1, #128]	@ 0x80
 80316c0:	4620      	mov	r0, r4
 80316c2:	4788      	blx	r1
 80316c4:	9a04      	ldr	r2, [sp, #16]
 80316c6:	9b05      	ldr	r3, [sp, #20]
 80316c8:	9001      	str	r0, [sp, #4]
 80316ca:	9200      	str	r2, [sp, #0]
 80316cc:	4639      	mov	r1, r7
 80316ce:	465a      	mov	r2, fp
 80316d0:	a81f      	add	r0, sp, #124	@ 0x7c
 80316d2:	f005 f96c 	bl	80369ae <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
        const int16_t widgetRectWidth = (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180) ? getWidth() : getHeight();
 80316d6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80316da:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80316de:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80316e2:	2900      	cmp	r1, #0
 80316e4:	f000 8089 	beq.w	80317fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2de>
 80316e8:	2902      	cmp	r1, #2
        return rect.width;
 80316ea:	469b      	mov	fp, r3
 80316ec:	f000 8085 	beq.w	80317fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2de>
        return rect.height;
 80316f0:	4613      	mov	r3, r2
        LCD::WideTextInternalStruct wtis(wideTextProvider, widgetRectWidth - indentation, widgetRectHeight, typedText.getTextDirection(), fontToDraw, linespace, wideTextAction);
 80316f2:	f894 2037 	ldrb.w	r2, [r4, #55]	@ 0x37
 80316f6:	1a9b      	subs	r3, r3, r2
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80316f8:	f8d8 2000 	ldr.w	r2, [r8]
 80316fc:	b29b      	uxth	r3, r3
 80316fe:	fa1f f08b 	uxth.w	r0, fp
 8031702:	2a00      	cmp	r2, #0
 8031704:	f43f af73 	beq.w	80315ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xd2>
        return typedTextId < numberOfTypedTexts;
 8031708:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 803170a:	f8ba 7000 	ldrh.w	r7, [sl]
 803170e:	428f      	cmp	r7, r1
 8031710:	f67f af76 	bls.w	8031600 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe4>
        return typedTexts[typedTextId].direction;
 8031714:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8031718:	f894 7039 	ldrb.w	r7, [r4, #57]	@ 0x39
 803171c:	7851      	ldrb	r1, [r2, #1]
 803171e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
         * @param      _font        The font.
         * @param      _linespace   The linespace.
         * @param      action       The action.
         */
        WideTextInternalStruct(TextProvider& textProvider, uint16_t width, uint16_t height, TextDirection direction, const Font* _font, int16_t _linespace, WideTextAction action)
            : currChar(0), tp(textProvider), textDirection(direction), wideTextAction(action), font(_font), areaWidth(width), areaHeight(height), linespace(_linespace), charsRead(0), widthUsed(0), charsReadAhead(0), widthAhead(0), widthWithoutWhiteSpaceAtEnd(0), ellipsisGlyphWidth(0), useEllipsis(false)
 8031722:	f88d 7021 	strb.w	r7, [sp, #33]	@ 0x21
 8031726:	2200      	movs	r2, #0
 8031728:	f3c1 0181 	ubfx	r1, r1, #2, #2
 803172c:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8031730:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8031734:	f8ad 2018 	strh.w	r2, [sp, #24]
 8031738:	f8cd e01c 	str.w	lr, [sp, #28]
 803173c:	f88d 1020 	strb.w	r1, [sp, #32]
 8031740:	9509      	str	r5, [sp, #36]	@ 0x24
 8031742:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8031746:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 803174a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 803174e:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8031752:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8031756:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
        {
            if (wideTextAction != WIDE_TEXT_NONE)
 803175a:	b357      	cbz	r7, 80317b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
            {
                Unicode::UnicodeChar ellipsisChar = font->getEllipsisChar();
 803175c:	682b      	ldr	r3, [r5, #0]
 803175e:	4628      	mov	r0, r5
 8031760:	695b      	ldr	r3, [r3, #20]
 8031762:	4798      	blx	r3
                if (ellipsisChar != 0)
 8031764:	4680      	mov	r8, r0
 8031766:	b320      	cbz	r0, 80317b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
                {
                    const GlyphNode* ellipsisGlyph = font->getGlyph(ellipsisChar);
 8031768:	9809      	ldr	r0, [sp, #36]	@ 0x24
 803176a:	6803      	ldr	r3, [r0, #0]
 803176c:	4641      	mov	r1, r8
 803176e:	68db      	ldr	r3, [r3, #12]
 8031770:	4798      	blx	r3
                    if (ellipsisGlyph != 0)
 8031772:	4607      	mov	r7, r0
 8031774:	b1e8      	cbz	r0, 80317b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
        return ((flags & GLYPH_DATA_ADVANCE_BIT8) << 1) | _advance;
 8031776:	7b43      	ldrb	r3, [r0, #13]
 8031778:	7a82      	ldrb	r2, [r0, #10]
 803177a:	005b      	lsls	r3, r3, #1
 803177c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8031780:	4313      	orrs	r3, r2
                    {
                        ellipsisGlyphWidth = ellipsisGlyph->advance();
 8031782:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
                        if (wideTextAction == WIDE_TEXT_CHARWRAP_DOUBLE_ELLIPSIS)
 8031786:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 803178a:	2b06      	cmp	r3, #6
 803178c:	d111      	bne.n	80317b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
                        {
                            ellipsisGlyphWidth += font->getKerning(ellipsisChar, ellipsisGlyph) + ellipsisGlyph->advance();
 803178e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8031790:	6803      	ldr	r3, [r0, #0]
 8031792:	463a      	mov	r2, r7
 8031794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8031796:	4641      	mov	r1, r8
 8031798:	4798      	blx	r3
 803179a:	7b7a      	ldrb	r2, [r7, #13]
 803179c:	7abb      	ldrb	r3, [r7, #10]
 803179e:	0052      	lsls	r2, r2, #1
 80317a0:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 80317a4:	4313      	orrs	r3, r2
 80317a6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 80317aa:	4403      	add	r3, r0
 80317ac:	4413      	add	r3, r2
 80317ae:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
        int16_t widgetRectHeight = (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180) ? getHeight() : getWidth();
 80317b2:	f04f 0800 	mov.w	r8, #0
 80317b6:	4647      	mov	r7, r8
            wtis.scanStringLengthForLine();
 80317b8:	a806      	add	r0, sp, #24
 80317ba:	f002 fd4f 	bl	803425c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
            width = MAX(width, lineWidth);
 80317be:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80317c2:	42bb      	cmp	r3, r7
 80317c4:	bfb8      	it	lt
 80317c6:	463b      	movlt	r3, r7
 80317c8:	b21f      	sxth	r7, r3
        } while (wtis.getCurrChar() != 0 && !wtis.ellipsisAtEndOfLine() && widgetRectHeight + fontToDraw->getPixelsAboveTop() > 0);
 80317ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
            numberOfLines++;
 80317ce:	f108 0801 	add.w	r8, r8, #1
 80317d2:	fa1f f888 	uxth.w	r8, r8
        } while (wtis.getCurrChar() != 0 && !wtis.ellipsisAtEndOfLine() && widgetRectHeight + fontToDraw->getPixelsAboveTop() > 0);
 80317d6:	2b00      	cmp	r3, #0
 80317d8:	f43f af36 	beq.w	8031648 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x12c>
 80317dc:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 80317e0:	2b00      	cmp	r3, #0
 80317e2:	f47f af31 	bne.w	8031648 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x12c>
 80317e6:	7a2a      	ldrb	r2, [r5, #8]
 80317e8:	ebab 0306 	sub.w	r3, fp, r6
            widgetRectHeight -= lineHeight;
 80317ec:	fa0f fb83 	sxth.w	fp, r3
        } while (wtis.getCurrChar() != 0 && !wtis.ellipsisAtEndOfLine() && widgetRectHeight + fontToDraw->getPixelsAboveTop() > 0);
 80317f0:	fa02 f383 	sxtah	r3, r2, r3
 80317f4:	2b00      	cmp	r3, #0
 80317f6:	dcdf      	bgt.n	80317b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x29c>
 80317f8:	e726      	b.n	8031648 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x12c>
        int16_t widgetRectHeight = (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180) ? getHeight() : getWidth();
 80317fa:	4693      	mov	fp, r2
 80317fc:	e779      	b.n	80316f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d6>
 80317fe:	bf00      	nop
 8031800:	08040d9d 	.word	0x08040d9d
 8031804:	08040ddf 	.word	0x08040ddf
 8031808:	08040e1a 	.word	0x08040e1a
 803180c:	2000b938 	.word	0x2000b938
 8031810:	2000b93c 	.word	0x2000b93c
 8031814:	2000b930 	.word	0x2000b930
 8031818:	08041aa4 	.word	0x08041aa4
 803181c:	08040e5c 	.word	0x08040e5c
 8031820:	2000b934 	.word	0x2000b934
        boundingRect.x = ((areaWidth - boundingRect.width) / 2);
 8031824:	ebab 0707 	sub.w	r7, fp, r7
 8031828:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 803182c:	f347 034f 	sbfx	r3, r7, #1, #16
    boundingRect.width += (maxPixelsLeft + maxPixelsRight);
 8031830:	7b28      	ldrb	r0, [r5, #12]
    boundingRect.x -= maxPixelsLeft;
 8031832:	b299      	uxth	r1, r3
 8031834:	7aeb      	ldrb	r3, [r5, #11]
    boundingRect.width += (maxPixelsLeft + maxPixelsRight);
 8031836:	4418      	add	r0, r3
 8031838:	1817      	adds	r7, r2, r0
    switch (rotation)
 803183a:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 803183e:	2a02      	cmp	r2, #2
    boundingRect.width += (maxPixelsLeft + maxPixelsRight);
 8031840:	b2b8      	uxth	r0, r7
 8031842:	b23f      	sxth	r7, r7
    switch (rotation)
 8031844:	d01a      	beq.n	803187c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x360>
 8031846:	2a03      	cmp	r2, #3
 8031848:	d023      	beq.n	8031892 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x376>
    boundingRect.x -= maxPixelsLeft;
 803184a:	1acb      	subs	r3, r1, r3
    switch (rotation)
 803184c:	2a01      	cmp	r2, #1
    boundingRect.x -= maxPixelsLeft;
 803184e:	fa0f fb83 	sxth.w	fp, r3
    switch (rotation)
 8031852:	d129      	bne.n	80318a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x38c>
        boundingRect = Rect(getWidth() - boundingRect.bottom(), boundingRect.x, boundingRect.height, boundingRect.width);
 8031854:	8923      	ldrh	r3, [r4, #8]
        break;
 8031856:	463a      	mov	r2, r7
        boundingRect = Rect(getWidth() - boundingRect.bottom(), boundingRect.x, boundingRect.height, boundingRect.width);
 8031858:	eba3 0308 	sub.w	r3, r3, r8
 803185c:	4637      	mov	r7, r6
 803185e:	465d      	mov	r5, fp
 8031860:	4616      	mov	r6, r2
 8031862:	fa0f fb83 	sxth.w	fp, r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031866:	4b1d      	ldr	r3, [pc, #116]	@ (80318dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c0>)
 8031868:	681b      	ldr	r3, [r3, #0]
 803186a:	b9fb      	cbnz	r3, 80318ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x390>
 803186c:	4b1c      	ldr	r3, [pc, #112]	@ (80318e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c4>)
 803186e:	4a1d      	ldr	r2, [pc, #116]	@ (80318e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c8>)
 8031870:	2160      	movs	r1, #96	@ 0x60
 8031872:	e671      	b.n	8031558 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c>
        boundingRect.x = areaWidth - (boundingRect.width + indentation);
 8031874:	4413      	add	r3, r2
 8031876:	ebab 0303 	sub.w	r3, fp, r3
 803187a:	e70a      	b.n	8031692 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x176>
        boundingRect = Rect(getWidth() - boundingRect.right(), getHeight() - boundingRect.bottom(), boundingRect.width, boundingRect.height);
 803187c:	8922      	ldrh	r2, [r4, #8]
 803187e:	8965      	ldrh	r5, [r4, #10]
 8031880:	441a      	add	r2, r3
 8031882:	1a12      	subs	r2, r2, r0
 8031884:	1a53      	subs	r3, r2, r1
 8031886:	eba5 0508 	sub.w	r5, r5, r8
 803188a:	fa0f fb83 	sxth.w	fp, r3
 803188e:	b22d      	sxth	r5, r5
        break;
 8031890:	e7e9      	b.n	8031866 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x34a>
        boundingRect = Rect(boundingRect.y, getHeight() - boundingRect.right(), boundingRect.height, boundingRect.width);
 8031892:	8962      	ldrh	r2, [r4, #10]
 8031894:	189d      	adds	r5, r3, r2
 8031896:	1a2d      	subs	r5, r5, r0
        break;
 8031898:	463b      	mov	r3, r7
        boundingRect = Rect(boundingRect.y, getHeight() - boundingRect.right(), boundingRect.height, boundingRect.width);
 803189a:	1a6d      	subs	r5, r5, r1
 803189c:	4637      	mov	r7, r6
 803189e:	b22d      	sxth	r5, r5
 80318a0:	461e      	mov	r6, r3
 80318a2:	f04f 0b00 	mov.w	fp, #0
        break;
 80318a6:	e7de      	b.n	8031866 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x34a>
    switch (rotation)
 80318a8:	2500      	movs	r5, #0
 80318aa:	e7dc      	b.n	8031866 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x34a>
        return typedTextId < numberOfTypedTexts;
 80318ac:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80318ae:	f8ba 3000 	ldrh.w	r3, [sl]
 80318b2:	428b      	cmp	r3, r1
 80318b4:	d803      	bhi.n	80318be <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3a2>
 80318b6:	4b0c      	ldr	r3, [pc, #48]	@ (80318e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3cc>)
 80318b8:	4a0a      	ldr	r2, [pc, #40]	@ (80318e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c8>)
 80318ba:	2161      	movs	r1, #97	@ 0x61
 80318bc:	e64c      	b.n	8031558 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3c>
        return texts->getText(typedTextId);
 80318be:	4b0b      	ldr	r3, [pc, #44]	@ (80318ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3d0>)
 80318c0:	6818      	ldr	r0, [r3, #0]
 80318c2:	f7fb faf7 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
            : rect(boundingRect), text(containedText)
 80318c6:	f8a9 b000 	strh.w	fp, [r9]
 80318ca:	f8a9 5002 	strh.w	r5, [r9, #2]
 80318ce:	f8a9 7004 	strh.w	r7, [r9, #4]
 80318d2:	f8a9 6006 	strh.w	r6, [r9, #6]
 80318d6:	f8c9 0008 	str.w	r0, [r9, #8]
        }
 80318da:	e631      	b.n	8031540 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x24>
 80318dc:	2000b930 	.word	0x2000b930
 80318e0:	08040d9d 	.word	0x08040d9d
 80318e4:	08040e9a 	.word	0x08040e9a
 80318e8:	08040e5c 	.word	0x08040e5c
 80318ec:	2000b93c 	.word	0x2000b93c

080318f0 <_ZN8touchgfx8TextAreaD0Ev>:
class TextArea : public Widget
 80318f0:	b510      	push	{r4, lr}
 80318f2:	2148      	movs	r1, #72	@ 0x48
 80318f4:	4604      	mov	r4, r0
 80318f6:	f00a fdf8 	bl	803c4ea <_ZdlPvj>
 80318fa:	4620      	mov	r0, r4
 80318fc:	bd10      	pop	{r4, pc}
	...

08031900 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
{
 8031900:	b508      	push	{r3, lr}
        return typedTextId < numberOfTypedTexts;
 8031902:	4b0b      	ldr	r3, [pc, #44]	@ (8031930 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x30>)
 8031904:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
    if (typedText.hasValidId())
 8031906:	881b      	ldrh	r3, [r3, #0]
 8031908:	4293      	cmp	r3, r2
 803190a:	d90e      	bls.n	803192a <_ZNK8touchgfx8TextArea12getAlignmentEv+0x2a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 803190c:	4b09      	ldr	r3, [pc, #36]	@ (8031934 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x34>)
 803190e:	681b      	ldr	r3, [r3, #0]
 8031910:	b92b      	cbnz	r3, 803191e <_ZNK8touchgfx8TextArea12getAlignmentEv+0x1e>
 8031912:	4b09      	ldr	r3, [pc, #36]	@ (8031938 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x38>)
 8031914:	4a09      	ldr	r2, [pc, #36]	@ (803193c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x3c>)
 8031916:	480a      	ldr	r0, [pc, #40]	@ (8031940 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x40>)
 8031918:	2184      	movs	r1, #132	@ 0x84
 803191a:	f00a fe05 	bl	803c528 <__assert_func>
        return typedTexts[typedTextId].alignment;
 803191e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8031922:	7858      	ldrb	r0, [r3, #1]
 8031924:	f000 0003 	and.w	r0, r0, #3
}
 8031928:	bd08      	pop	{r3, pc}
    return LEFT;
 803192a:	2000      	movs	r0, #0
 803192c:	e7fc      	b.n	8031928 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x28>
 803192e:	bf00      	nop
 8031930:	2000b934 	.word	0x2000b934
 8031934:	2000b930 	.word	0x2000b930
 8031938:	08040d9d 	.word	0x08040d9d
 803193c:	08041aea 	.word	0x08041aea
 8031940:	08040e1a 	.word	0x08040e1a

08031944 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
{
 8031944:	b513      	push	{r0, r1, r4, lr}
    if (alpha == 0 || !typedText.hasValidId() || rect.isEmpty())
 8031946:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
{
 803194a:	4604      	mov	r4, r0
    if (alpha == 0 || !typedText.hasValidId() || rect.isEmpty())
 803194c:	2b00      	cmp	r3, #0
 803194e:	d034      	beq.n	80319ba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x76>
        return typedTextId < numberOfTypedTexts;
 8031950:	4b1b      	ldr	r3, [pc, #108]	@ (80319c0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x7c>)
 8031952:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8031954:	881b      	ldrh	r3, [r3, #0]
 8031956:	428b      	cmp	r3, r1
 8031958:	d92f      	bls.n	80319ba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x76>
        return width <= 0 || height <= 0;
 803195a:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 803195e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8031962:	2a00      	cmp	r2, #0
 8031964:	dd29      	ble.n	80319ba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x76>
 8031966:	2b00      	cmp	r3, #0
 8031968:	dd27      	ble.n	80319ba <_ZNK8touchgfx8TextArea17invalidateContentEv+0x76>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 803196a:	4b16      	ldr	r3, [pc, #88]	@ (80319c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x80>)
 803196c:	681b      	ldr	r3, [r3, #0]
 803196e:	b92b      	cbnz	r3, 803197c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x38>
 8031970:	4b15      	ldr	r3, [pc, #84]	@ (80319c8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x84>)
 8031972:	4a16      	ldr	r2, [pc, #88]	@ (80319cc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x88>)
 8031974:	4816      	ldr	r0, [pc, #88]	@ (80319d0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x8c>)
 8031976:	2160      	movs	r1, #96	@ 0x60
 8031978:	f00a fdd6 	bl	803c528 <__assert_func>
        return texts->getText(typedTextId);
 803197c:	4b15      	ldr	r3, [pc, #84]	@ (80319d4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x90>)
 803197e:	6818      	ldr	r0, [r3, #0]
 8031980:	f7fb fa98 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
         *
         * @return True if valid otherwise false.
         */
        bool isValid(const Unicode::UnicodeChar* currentText) const
        {
            return (rect.height >= 0 && rect.width >= 0 && text == currentText);
 8031984:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8031988:	6822      	ldr	r2, [r4, #0]
 803198a:	2b00      	cmp	r3, #0
 803198c:	db06      	blt.n	803199c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x58>
 803198e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8031992:	2b00      	cmp	r3, #0
 8031994:	db02      	blt.n	803199c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x58>
 8031996:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8031998:	4298      	cmp	r0, r3
 803199a:	d005      	beq.n	80319a8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>
    invalidate();
 803199c:	6953      	ldr	r3, [r2, #20]
 803199e:	4620      	mov	r0, r4
}
 80319a0:	b002      	add	sp, #8
 80319a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    invalidate();
 80319a6:	4718      	bx	r3
            return rect;
 80319a8:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	@ 0x3c
 80319ac:	466b      	mov	r3, sp
 80319ae:	e883 0003 	stmia.w	r3, {r0, r1}
        invalidateRect(boundingRect);
 80319b2:	6912      	ldr	r2, [r2, #16]
 80319b4:	4619      	mov	r1, r3
 80319b6:	4620      	mov	r0, r4
 80319b8:	4790      	blx	r2
}
 80319ba:	b002      	add	sp, #8
 80319bc:	bd10      	pop	{r4, pc}
 80319be:	bf00      	nop
 80319c0:	2000b934 	.word	0x2000b934
 80319c4:	2000b930 	.word	0x2000b930
 80319c8:	08040d9d 	.word	0x08040d9d
 80319cc:	08040e9a 	.word	0x08040e9a
 80319d0:	08040e1a 	.word	0x08040e1a
 80319d4:	2000b93c 	.word	0x2000b93c

080319d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
{
 80319d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return typedTextId < numberOfTypedTexts;
 80319dc:	4d5b      	ldr	r5, [pc, #364]	@ (8031b4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x174>)
 80319de:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
    if (typedText.hasValidId())
 80319e0:	882b      	ldrh	r3, [r5, #0]
 80319e2:	4293      	cmp	r3, r2
{
 80319e4:	b08e      	sub	sp, #56	@ 0x38
 80319e6:	4604      	mov	r4, r0
    if (typedText.hasValidId())
 80319e8:	f240 80ad 	bls.w	8031b46 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16e>
        Rect rectToDraw = area;
 80319ec:	6808      	ldr	r0, [r1, #0]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80319ee:	4e58      	ldr	r6, [pc, #352]	@ (8031b50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x178>)
 80319f0:	6849      	ldr	r1, [r1, #4]
 80319f2:	ab05      	add	r3, sp, #20
 80319f4:	c303      	stmia	r3!, {r0, r1}
 80319f6:	6833      	ldr	r3, [r6, #0]
 80319f8:	b92b      	cbnz	r3, 8031a06 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80319fa:	4b56      	ldr	r3, [pc, #344]	@ (8031b54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x17c>)
 80319fc:	4a56      	ldr	r2, [pc, #344]	@ (8031b58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x180>)
 80319fe:	2160      	movs	r1, #96	@ 0x60
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031a00:	4856      	ldr	r0, [pc, #344]	@ (8031b5c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x184>)
 8031a02:	f00a fd91 	bl	803c528 <__assert_func>
        return texts->getText(typedTextId);
 8031a06:	f8df 916c 	ldr.w	r9, [pc, #364]	@ 8031b74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x19c>
 8031a0a:	4611      	mov	r1, r2
 8031a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8031a10:	f7fb fa50 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
            return (rect.height >= 0 && rect.width >= 0 && text == currentText);
 8031a14:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8031a18:	2b00      	cmp	r3, #0
 8031a1a:	db0f      	blt.n	8031a3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 8031a1c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8031a20:	2b00      	cmp	r3, #0
 8031a22:	db0b      	blt.n	8031a3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
 8031a24:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8031a26:	4298      	cmp	r0, r3
 8031a28:	d108      	bne.n	8031a3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x64>
            return rect;
 8031a2a:	e9d4 010f 	ldrd	r0, r1, [r4, #60]	@ 0x3c
 8031a2e:	ab09      	add	r3, sp, #36	@ 0x24
 8031a30:	e883 0003 	stmia.w	r3, {r0, r1}
            rectToDraw &= boundingArea.getRect();
 8031a34:	4619      	mov	r1, r3
 8031a36:	a805      	add	r0, sp, #20
 8031a38:	f7fe fb10 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8031a3c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8031a40:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8031a44:	2a00      	cmp	r2, #0
 8031a46:	dd7e      	ble.n	8031b46 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16e>
 8031a48:	2b00      	cmp	r3, #0
 8031a4a:	dd7c      	ble.n	8031b46 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16e>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031a4c:	6833      	ldr	r3, [r6, #0]
 8031a4e:	b91b      	cbnz	r3, 8031a58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x80>
 8031a50:	4b40      	ldr	r3, [pc, #256]	@ (8031b54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x17c>)
 8031a52:	4a43      	ldr	r2, [pc, #268]	@ (8031b60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x188>)
 8031a54:	216c      	movs	r1, #108	@ 0x6c
 8031a56:	e7d3      	b.n	8031a00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
        return typedTextId < numberOfTypedTexts;
 8031a58:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8031a5a:	8829      	ldrh	r1, [r5, #0]
 8031a5c:	4291      	cmp	r1, r2
 8031a5e:	d803      	bhi.n	8031a68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x90>
 8031a60:	4b40      	ldr	r3, [pc, #256]	@ (8031b64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x18c>)
 8031a62:	4a3f      	ldr	r2, [pc, #252]	@ (8031b60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x188>)
 8031a64:	216d      	movs	r1, #109	@ 0x6d
 8031a66:	e7cb      	b.n	8031a00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
        return fonts[typedTexts[typedTextId].fontIdx];
 8031a68:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8031a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8031b68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x190>)
 8031a6e:	681b      	ldr	r3, [r3, #0]
 8031a70:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
            if (fontToDraw != 0)
 8031a74:	2f00      	cmp	r7, #0
 8031a76:	d066      	beq.n	8031b46 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x16e>
                const LCD::StringVisuals visuals(fontToDraw, color, alpha, getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 8031a78:	6823      	ldr	r3, [r4, #0]
 8031a7a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8031a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8031a80:	4620      	mov	r0, r4
 8031a82:	4798      	blx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031a84:	6833      	ldr	r3, [r6, #0]
 8031a86:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8031a8a:	f894 c038 	ldrb.w	ip, [r4, #56]	@ 0x38
 8031a8e:	b91b      	cbnz	r3, 8031a98 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xc0>
 8031a90:	4b30      	ldr	r3, [pc, #192]	@ (8031b54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x17c>)
 8031a92:	4a36      	ldr	r2, [pc, #216]	@ (8031b6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x194>)
 8031a94:	2190      	movs	r1, #144	@ 0x90
 8031a96:	e7b3      	b.n	8031a00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
        return typedTextId < numberOfTypedTexts;
 8031a98:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8031a9a:	f8b5 e000 	ldrh.w	lr, [r5]
 8031a9e:	4596      	cmp	lr, r2
 8031aa0:	d803      	bhi.n	8031aaa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8031aa2:	4b30      	ldr	r3, [pc, #192]	@ (8031b64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x18c>)
 8031aa4:	4a31      	ldr	r2, [pc, #196]	@ (8031b6c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x194>)
 8031aa6:	2191      	movs	r1, #145	@ 0x91
 8031aa8:	e7aa      	b.n	8031a00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
        return typedTexts[typedTextId].direction;
 8031aaa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8031aae:	f894 a037 	ldrb.w	sl, [r4, #55]	@ 0x37
 8031ab2:	785b      	ldrb	r3, [r3, #1]
 8031ab4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            : font(svFont), alignment(svAlignment), textDirection(svTextDirection), rotation(svRotation), color(svColor), linespace(svLinespace), alpha(svAlpha), indentation(svIndentation), wideTextAction(svWideTextAction)
 8031ab6:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8031aba:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8031abe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8031ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8031b70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x198>)
 8031ac4:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8031ac8:	681b      	ldr	r3, [r3, #0]
 8031aca:	f88d a033 	strb.w	sl, [sp, #51]	@ 0x33
 8031ace:	920b      	str	r2, [sp, #44]	@ 0x2c
 8031ad0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8031ad4:	f894 e039 	ldrb.w	lr, [r4, #57]	@ 0x39
 8031ad8:	9709      	str	r7, [sp, #36]	@ 0x24
 8031ada:	f88d c02a 	strb.w	ip, [sp, #42]	@ 0x2a
 8031ade:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8031ae2:	f88d e034 	strb.w	lr, [sp, #52]	@ 0x34
 8031ae6:	b10a      	cbz	r2, 8031aec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x114>
 8031ae8:	6cdf      	ldr	r7, [r3, #76]	@ 0x4c
 8031aea:	b907      	cbnz	r7, 8031aee <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x116>
        return instance->lcdRef;
 8031aec:	689f      	ldr	r7, [r3, #8]
                HAL::lcd().drawString(getAbsoluteRect(), rectToDraw, visuals, typedText.getText(), getWildcard1(), getWildcard2());
 8031aee:	f10d 081c 	add.w	r8, sp, #28
 8031af2:	4621      	mov	r1, r4
 8031af4:	4640      	mov	r0, r8
 8031af6:	f004 fa65 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031afa:	6833      	ldr	r3, [r6, #0]
 8031afc:	2b00      	cmp	r3, #0
 8031afe:	f43f af7c 	beq.w	80319fa <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x22>
        return typedTextId < numberOfTypedTexts;
 8031b02:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8031b04:	882b      	ldrh	r3, [r5, #0]
 8031b06:	428b      	cmp	r3, r1
 8031b08:	d803      	bhi.n	8031b12 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x13a>
 8031b0a:	4b16      	ldr	r3, [pc, #88]	@ (8031b64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x18c>)
 8031b0c:	4a12      	ldr	r2, [pc, #72]	@ (8031b58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x180>)
 8031b0e:	2161      	movs	r1, #97	@ 0x61
 8031b10:	e776      	b.n	8031a00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x28>
        return texts->getText(typedTextId);
 8031b12:	f8d9 0000 	ldr.w	r0, [r9]
 8031b16:	f7fb f9cd 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8031b1a:	6823      	ldr	r3, [r4, #0]
 8031b1c:	4605      	mov	r5, r0
 8031b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8031b20:	4620      	mov	r0, r4
 8031b22:	4798      	blx	r3
 8031b24:	6823      	ldr	r3, [r4, #0]
 8031b26:	4606      	mov	r6, r0
 8031b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8031b2c:	4620      	mov	r0, r4
 8031b2e:	4798      	blx	r3
 8031b30:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8031b34:	ab09      	add	r3, sp, #36	@ 0x24
 8031b36:	9300      	str	r3, [sp, #0]
 8031b38:	9501      	str	r5, [sp, #4]
 8031b3a:	e898 0006 	ldmia.w	r8, {r1, r2}
 8031b3e:	ab05      	add	r3, sp, #20
 8031b40:	4638      	mov	r0, r7
 8031b42:	f7fb f969 	bl	802ce18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
}
 8031b46:	b00e      	add	sp, #56	@ 0x38
 8031b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8031b4c:	2000b934 	.word	0x2000b934
 8031b50:	2000b930 	.word	0x2000b930
 8031b54:	08040d9d 	.word	0x08040d9d
 8031b58:	08040e9a 	.word	0x08040e9a
 8031b5c:	08040e1a 	.word	0x08040e1a
 8031b60:	08040ddf 	.word	0x08040ddf
 8031b64:	08040e5c 	.word	0x08040e5c
 8031b68:	2000b938 	.word	0x2000b938
 8031b6c:	08041aa4 	.word	0x08041aa4
 8031b70:	2000b8e0 	.word	0x2000b8e0
 8031b74:	2000b93c 	.word	0x2000b93c

08031b78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
{
 8031b78:	b538      	push	{r3, r4, r5, lr}
    if (typedText.hasValidId())
 8031b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8031bb4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8031b7c:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8031b7e:	881b      	ldrh	r3, [r3, #0]
 8031b80:	429a      	cmp	r2, r3
{
 8031b82:	4604      	mov	r4, r0
    if (typedText.hasValidId())
 8031b84:	d214      	bcs.n	8031bb0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
        const uint16_t w = getTextWidth();
 8031b86:	6803      	ldr	r3, [r0, #0]
 8031b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8031b8a:	4798      	blx	r3
        const uint16_t h = getTextHeight();
 8031b8c:	6823      	ldr	r3, [r4, #0]
        const uint16_t w = getTextWidth();
 8031b8e:	4605      	mov	r5, r0
        const uint16_t h = getTextHeight();
 8031b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8031b92:	4620      	mov	r0, r4
 8031b94:	4798      	blx	r3
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 8031b96:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8031b9a:	b22d      	sxth	r5, r5
 8031b9c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
        const uint16_t h = getTextHeight();
 8031ba0:	4601      	mov	r1, r0
            setWidthHeight(w, h);
 8031ba2:	bf06      	itte	eq
 8031ba4:	4602      	moveq	r2, r0
 8031ba6:	4629      	moveq	r1, r5
            setWidthHeight(h, w);
 8031ba8:	462a      	movne	r2, r5
 8031baa:	4620      	mov	r0, r4
 8031bac:	f7fe fafe 	bl	80301ac <_ZN8touchgfx8Drawable14setWidthHeightEss>
}
 8031bb0:	bd38      	pop	{r3, r4, r5, pc}
 8031bb2:	bf00      	nop
 8031bb4:	2000b934 	.word	0x2000b934

08031bb8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
{
 8031bb8:	b530      	push	{r4, r5, lr}
class TypedText
 8031bba:	888b      	ldrh	r3, [r1, #4]
 8031bbc:	b085      	sub	sp, #20
 8031bbe:	8583      	strh	r3, [r0, #44]	@ 0x2c
    if (getWidth() == 0 && getHeight() == 0)
 8031bc0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
{
 8031bc4:	4604      	mov	r4, r0
    if (getWidth() == 0 && getHeight() == 0)
 8031bc6:	b923      	cbnz	r3, 8031bd2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8031bc8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8031bcc:	b90b      	cbnz	r3, 8031bd2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
        resizeToCurrentText();
 8031bce:	f7ff ffd3 	bl	8031b78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    boundingArea = calculateBoundingArea();
 8031bd2:	6823      	ldr	r3, [r4, #0]
 8031bd4:	466d      	mov	r5, sp
 8031bd6:	4621      	mov	r1, r4
 8031bd8:	4628      	mov	r0, r5
 8031bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8031bde:	4798      	blx	r3
 8031be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8031be4:	343c      	adds	r4, #60	@ 0x3c
 8031be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8031bea:	b005      	add	sp, #20
 8031bec:	bd30      	pop	{r4, r5, pc}
	...

08031bf0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
void TextAreaWithWildcardBase::draw(const Rect& area) const
{
 8031bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return typedTextId < numberOfTypedTexts;
 8031bf4:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8031cf4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x104>
 8031bf8:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
    if (typedText.hasValidId())
 8031bfa:	f8b8 3000 	ldrh.w	r3, [r8]
 8031bfe:	4293      	cmp	r3, r2
{
 8031c00:	b08d      	sub	sp, #52	@ 0x34
 8031c02:	4604      	mov	r4, r0
 8031c04:	460f      	mov	r7, r1
    if (typedText.hasValidId())
 8031c06:	d962      	bls.n	8031cce <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xde>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031c08:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8031cf8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x108>
 8031c0c:	f8d9 3000 	ldr.w	r3, [r9]
 8031c10:	b92b      	cbnz	r3, 8031c1e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x2e>
 8031c12:	4b30      	ldr	r3, [pc, #192]	@ (8031cd4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xe4>)
 8031c14:	4a30      	ldr	r2, [pc, #192]	@ (8031cd8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xe8>)
 8031c16:	216c      	movs	r1, #108	@ 0x6c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031c18:	4830      	ldr	r0, [pc, #192]	@ (8031cdc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xec>)
 8031c1a:	f00a fc85 	bl	803c528 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8031c1e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8031c22:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8031c26:	4b2e      	ldr	r3, [pc, #184]	@ (8031ce0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf0>)
 8031c28:	681b      	ldr	r3, [r3, #0]
 8031c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    {
        const Font* fontToDraw = typedText.getFont();
        if (fontToDraw != 0)
 8031c2e:	2b00      	cmp	r3, #0
 8031c30:	d04d      	beq.n	8031cce <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xde>
        return typedTexts[typedTextId].alignment;
 8031c32:	784a      	ldrb	r2, [r1, #1]
 8031c34:	9307      	str	r3, [sp, #28]
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8031c36:	4b2b      	ldr	r3, [pc, #172]	@ (8031ce4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf4>)
        {
            const LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 8031c38:	f890 6038 	ldrb.w	r6, [r0, #56]	@ 0x38
 8031c3c:	681b      	ldr	r3, [r3, #0]
 8031c3e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8031c40:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8031c44:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8031c46:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8031c4a:	f3c2 0c01 	ubfx	ip, r2, #0, #2
        return typedTexts[typedTextId].direction;
 8031c4e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8031c52:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8031c56:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8031c5a:	f88d c020 	strb.w	ip, [sp, #32]
 8031c5e:	e9cd 0109 	strd	r0, r1, [sp, #36]	@ 0x24
 8031c62:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8031c66:	b10a      	cbz	r2, 8031c6c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8031c68:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8031c6a:	b905      	cbnz	r5, 8031c6e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7e>
        return instance->lcdRef;
 8031c6c:	689d      	ldr	r5, [r3, #8]
            HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), getWildcard1(), getWildcard2());
 8031c6e:	ae05      	add	r6, sp, #20
 8031c70:	4621      	mov	r1, r4
 8031c72:	4630      	mov	r0, r6
 8031c74:	f004 f9a6 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8031c78:	f8d9 3000 	ldr.w	r3, [r9]
 8031c7c:	b91b      	cbnz	r3, 8031c86 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x96>
 8031c7e:	4b15      	ldr	r3, [pc, #84]	@ (8031cd4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xe4>)
 8031c80:	4a19      	ldr	r2, [pc, #100]	@ (8031ce8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf8>)
 8031c82:	2160      	movs	r1, #96	@ 0x60
 8031c84:	e7c8      	b.n	8031c18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x28>
        return typedTextId < numberOfTypedTexts;
 8031c86:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8031c88:	f8b8 3000 	ldrh.w	r3, [r8]
 8031c8c:	428b      	cmp	r3, r1
 8031c8e:	d803      	bhi.n	8031c98 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xa8>
 8031c90:	4b16      	ldr	r3, [pc, #88]	@ (8031cec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xfc>)
 8031c92:	4a15      	ldr	r2, [pc, #84]	@ (8031ce8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf8>)
 8031c94:	2161      	movs	r1, #97	@ 0x61
 8031c96:	e7bf      	b.n	8031c18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x28>
        return texts->getText(typedTextId);
 8031c98:	4b15      	ldr	r3, [pc, #84]	@ (8031cf0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x100>)
 8031c9a:	6818      	ldr	r0, [r3, #0]
 8031c9c:	f7fb f90a 	bl	802ceb4 <_ZNK8touchgfx5Texts7getTextEt>
 8031ca0:	6823      	ldr	r3, [r4, #0]
 8031ca2:	4680      	mov	r8, r0
 8031ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8031ca6:	4620      	mov	r0, r4
 8031ca8:	4798      	blx	r3
 8031caa:	6823      	ldr	r3, [r4, #0]
 8031cac:	4681      	mov	r9, r0
 8031cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8031cb2:	4620      	mov	r0, r4
 8031cb4:	4798      	blx	r3
 8031cb6:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8031cba:	ab07      	add	r3, sp, #28
 8031cbc:	9300      	str	r3, [sp, #0]
 8031cbe:	f8cd 8004 	str.w	r8, [sp, #4]
 8031cc2:	e896 0006 	ldmia.w	r6, {r1, r2}
 8031cc6:	463b      	mov	r3, r7
 8031cc8:	4628      	mov	r0, r5
 8031cca:	f7fb f8a5 	bl	802ce18 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
        }
    }
}
 8031cce:	b00d      	add	sp, #52	@ 0x34
 8031cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8031cd4:	08040d9d 	.word	0x08040d9d
 8031cd8:	08040ddf 	.word	0x08040ddf
 8031cdc:	08040e1a 	.word	0x08040e1a
 8031ce0:	2000b938 	.word	0x2000b938
 8031ce4:	2000b8e0 	.word	0x2000b8e0
 8031ce8:	08040e9a 	.word	0x08040e9a
 8031cec:	08040e5c 	.word	0x08040e5c
 8031cf0:	2000b93c 	.word	0x2000b93c
 8031cf4:	2000b934 	.word	0x2000b934
 8031cf8:	2000b930 	.word	0x2000b930

08031cfc <_ZN8touchgfx10TiledImage9setOffsetEss>:
    // Make sure the xOffset and yOffset are correct (in range)
    setOffset(xOffset, yOffset);
}

void TiledImage::setOffset(int16_t x, int16_t y)
{
 8031cfc:	b570      	push	{r4, r5, r6, lr}
    setXOffset(x);
 8031cfe:	6803      	ldr	r3, [r0, #0]
{
 8031d00:	4604      	mov	r4, r0
    setXOffset(x);
 8031d02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
{
 8031d04:	4615      	mov	r5, r2
    setXOffset(x);
 8031d06:	4798      	blx	r3
    setYOffset(y);
 8031d08:	6823      	ldr	r3, [r4, #0]
 8031d0a:	4629      	mov	r1, r5
 8031d0c:	4620      	mov	r0, r4
 8031d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
}
 8031d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setYOffset(y);
 8031d14:	4718      	bx	r3

08031d16 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
    }
}

void TiledImage::getOffset(int16_t& x, int16_t& y)
{
    x = getXOffset();
 8031d16:	6803      	ldr	r3, [r0, #0]
{
 8031d18:	b570      	push	{r4, r5, r6, lr}
    x = getXOffset();
 8031d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
{
 8031d1c:	4604      	mov	r4, r0
 8031d1e:	460e      	mov	r6, r1
 8031d20:	4615      	mov	r5, r2
    x = getXOffset();
 8031d22:	4798      	blx	r3
    y = getYOffset();
 8031d24:	6823      	ldr	r3, [r4, #0]
    x = getXOffset();
 8031d26:	8030      	strh	r0, [r6, #0]
    y = getYOffset();
 8031d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8031d2a:	4620      	mov	r0, r4
 8031d2c:	4798      	blx	r3
 8031d2e:	8028      	strh	r0, [r5, #0]
}
 8031d30:	bd70      	pop	{r4, r5, r6, pc}

08031d32 <_ZN8touchgfx10TiledImage10getXOffsetEv>:

int16_t TiledImage::getXOffset()
{
    return xOffset;
}
 8031d32:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
 8031d36:	4770      	bx	lr

08031d38 <_ZN8touchgfx10TiledImage10getYOffsetEv>:

int16_t TiledImage::getYOffset()
{
    return yOffset;
}
 8031d38:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 8031d3c:	4770      	bx	lr

08031d3e <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 8031d3e:	4770      	bx	lr

08031d40 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
{
 8031d40:	b510      	push	{r4, lr}
 8031d42:	4604      	mov	r4, r0
    Image::setBitmap(bmp);
 8031d44:	f7ff f855 	bl	8030df2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    setOffset(xOffset, yOffset);
 8031d48:	6823      	ldr	r3, [r4, #0]
 8031d4a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	@ 0x2c
 8031d4e:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	@ 0x2a
 8031d52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8031d54:	4620      	mov	r0, r4
}
 8031d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setOffset(xOffset, yOffset);
 8031d5a:	4718      	bx	r3

08031d5c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
{
 8031d5c:	b538      	push	{r3, r4, r5, lr}
    if (bitmap.getWidth() != 0)
 8031d5e:	f100 0526 	add.w	r5, r0, #38	@ 0x26
{
 8031d62:	4604      	mov	r4, r0
    xOffset = x;
 8031d64:	8541      	strh	r1, [r0, #42]	@ 0x2a
    if (bitmap.getWidth() != 0)
 8031d66:	4628      	mov	r0, r5
 8031d68:	f006 f9ec 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8031d6c:	b188      	cbz	r0, 8031d92 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
        xOffset %= bitmap.getWidth();
 8031d6e:	4628      	mov	r0, r5
 8031d70:	f006 f9e8 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8031d74:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	@ 0x2a
 8031d78:	fb93 f2f0 	sdiv	r2, r3, r0
 8031d7c:	fb02 3310 	mls	r3, r2, r0, r3
        if (xOffset < 0)
 8031d80:	2b00      	cmp	r3, #0
        xOffset %= bitmap.getWidth();
 8031d82:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (xOffset < 0)
 8031d84:	da05      	bge.n	8031d92 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
            xOffset += bitmap.getWidth();
 8031d86:	4628      	mov	r0, r5
 8031d88:	f006 f9dc 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8031d8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8031d8e:	4418      	add	r0, r3
 8031d90:	8560      	strh	r0, [r4, #42]	@ 0x2a
}
 8031d92:	bd38      	pop	{r3, r4, r5, pc}

08031d94 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
{
 8031d94:	b538      	push	{r3, r4, r5, lr}
    if (bitmap.getHeight() != 0)
 8031d96:	f100 0526 	add.w	r5, r0, #38	@ 0x26
{
 8031d9a:	4604      	mov	r4, r0
    yOffset = y;
 8031d9c:	8581      	strh	r1, [r0, #44]	@ 0x2c
    if (bitmap.getHeight() != 0)
 8031d9e:	4628      	mov	r0, r5
 8031da0:	f006 fa04 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8031da4:	b188      	cbz	r0, 8031dca <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
        yOffset %= bitmap.getHeight();
 8031da6:	4628      	mov	r0, r5
 8031da8:	f006 fa00 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8031dac:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8031db0:	fb93 f2f0 	sdiv	r2, r3, r0
 8031db4:	fb02 3310 	mls	r3, r2, r0, r3
        if (yOffset < 0)
 8031db8:	2b00      	cmp	r3, #0
        yOffset %= bitmap.getHeight();
 8031dba:	85a3      	strh	r3, [r4, #44]	@ 0x2c
        if (yOffset < 0)
 8031dbc:	da05      	bge.n	8031dca <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
            yOffset += bitmap.getHeight();
 8031dbe:	4628      	mov	r0, r5
 8031dc0:	f006 f9f4 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8031dc4:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 8031dc6:	4418      	add	r0, r3
 8031dc8:	85a0      	strh	r0, [r4, #44]	@ 0x2c
}
 8031dca:	bd38      	pop	{r3, r4, r5, pc}

08031dcc <_ZN8touchgfx10TiledImageD0Ev>:
 8031dcc:	b510      	push	{r4, lr}
 8031dce:	2130      	movs	r1, #48	@ 0x30
 8031dd0:	4604      	mov	r4, r0
 8031dd2:	f00a fb8a 	bl	803c4ea <_ZdlPvj>
 8031dd6:	4620      	mov	r0, r4
 8031dd8:	bd10      	pop	{r4, pc}
	...

08031ddc <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:

void TiledImage::draw(const Rect& invalidatedArea) const
{
 8031ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int16_t bitmapWidth = bitmap.getWidth();
 8031de0:	f100 0926 	add.w	r9, r0, #38	@ 0x26
{
 8031de4:	b091      	sub	sp, #68	@ 0x44
 8031de6:	4606      	mov	r6, r0
    const int16_t bitmapWidth = bitmap.getWidth();
 8031de8:	4648      	mov	r0, r9
{
 8031dea:	460d      	mov	r5, r1
    const int16_t bitmapWidth = bitmap.getWidth();
 8031dec:	f006 f9aa 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8031df0:	4680      	mov	r8, r0
    const int16_t bitmapHeight = bitmap.getHeight();
 8031df2:	4648      	mov	r0, r9
 8031df4:	f006 f9da 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8031df8:	4607      	mov	r7, r0

    if (bitmapWidth == 0 || bitmapHeight == 0)
 8031dfa:	f1b8 0f00 	cmp.w	r8, #0
 8031dfe:	d040      	beq.n	8031e82 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa6>
 8031e00:	2800      	cmp	r0, #0
 8031e02:	d03e      	beq.n	8031e82 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa6>
        : x(0), y(0), width(0), height(0)
 8031e04:	2300      	movs	r3, #0
 8031e06:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    {
        return;
    }

    Rect meAbs;
    translateRectToAbsolute(meAbs);
 8031e0a:	6833      	ldr	r3, [r6, #0]
 8031e0c:	a90c      	add	r1, sp, #48	@ 0x30
 8031e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8031e10:	4630      	mov	r0, r6
 8031e12:	4798      	blx	r3

    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 8031e14:	fa1f f188 	uxth.w	r1, r8
 8031e18:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	@ 0x2a
 8031e1c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8031e20:	9106      	str	r1, [sp, #24]
        return x + width;
 8031e22:	88a9      	ldrh	r1, [r5, #4]
 8031e24:	189c      	adds	r4, r3, r2
 8031e26:	440b      	add	r3, r1
    const int16_t maxX = (((invalidatedArea.right() + xOffset) - 1) / bitmapWidth) * bitmapWidth;
 8031e28:	fa02 f383 	sxtah	r3, r2, r3
 8031e2c:	3b01      	subs	r3, #1
 8031e2e:	fb93 f3f8 	sdiv	r3, r3, r8
 8031e32:	fb13 f008 	smulbb	r0, r3, r8
 8031e36:	b203      	sxth	r3, r0
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 8031e38:	f9b6 102c 	ldrsh.w	r1, [r6, #44]	@ 0x2c
    const int16_t maxX = (((invalidatedArea.right() + xOffset) - 1) / bitmapWidth) * bitmapWidth;
 8031e3c:	9308      	str	r3, [sp, #32]
    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 8031e3e:	fb94 f4f8 	sdiv	r4, r4, r8
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 8031e42:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 8031e46:	fb14 f408 	smulbb	r4, r4, r8
 8031e4a:	1aa4      	subs	r4, r4, r2
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 8031e4c:	b2ba      	uxth	r2, r7
 8031e4e:	9207      	str	r2, [sp, #28]
 8031e50:	185a      	adds	r2, r3, r1
 8031e52:	fb92 f2f7 	sdiv	r2, r2, r7
 8031e56:	fb12 f207 	smulbb	r2, r2, r7
 8031e5a:	1a52      	subs	r2, r2, r1
 8031e5c:	b212      	sxth	r2, r2
 8031e5e:	9209      	str	r2, [sp, #36]	@ 0x24
        return y + height;
 8031e60:	88ea      	ldrh	r2, [r5, #6]
 8031e62:	1898      	adds	r0, r3, r2
    const int16_t maxY = (((invalidatedArea.bottom() + yOffset) - 1) / bitmapHeight) * bitmapHeight;
 8031e64:	fa01 f080 	sxtah	r0, r1, r0
 8031e68:	3801      	subs	r0, #1
 8031e6a:	fb90 f0f7 	sdiv	r0, r0, r7
 8031e6e:	fb10 f007 	smulbb	r0, r0, r7
 8031e72:	b203      	sxth	r3, r0
    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 8031e74:	b2a4      	uxth	r4, r4
    const int16_t maxY = (((invalidatedArea.bottom() + yOffset) - 1) / bitmapHeight) * bitmapHeight;
 8031e76:	930a      	str	r3, [sp, #40]	@ 0x28
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 8031e78:	9b08      	ldr	r3, [sp, #32]
 8031e7a:	fa0f f884 	sxth.w	r8, r4
 8031e7e:	4598      	cmp	r8, r3
 8031e80:	dd6d      	ble.n	8031f5e <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x182>
            dirty.x -= x;
            dirty.y -= y;
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
        }
    }
}
 8031e82:	b011      	add	sp, #68	@ 0x44
 8031e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return x + width;
 8031e88:	f9b5 1000 	ldrsh.w	r1, [r5]
 8031e8c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
        return y + height;
 8031e90:	9b07      	ldr	r3, [sp, #28]
        return x + width;
 8031e92:	448c      	add	ip, r1
 8031e94:	fa0f fc8c 	sxth.w	ip, ip
        return y + height;
 8031e98:	fa13 f782 	uxtah	r7, r3, r2
 8031e9c:	b23b      	sxth	r3, r7
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8031e9e:	45e0      	cmp	r8, ip
 8031ea0:	fa1f fe82 	uxth.w	lr, r2
        return y + height;
 8031ea4:	9305      	str	r3, [sp, #20]
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8031ea6:	da01      	bge.n	8031eac <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xd0>
 8031ea8:	4559      	cmp	r1, fp
 8031eaa:	db33      	blt.n	8031f14 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x138>
            width = 0;
 8031eac:	e9cd aa0e 	strd	sl, sl, [sp, #56]	@ 0x38
            dirty.x -= x;
 8031eb0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8031eb4:	1b1b      	subs	r3, r3, r4
 8031eb6:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
            dirty.y -= y;
 8031eba:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8031ebe:	eba3 030e 	sub.w	r3, r3, lr
 8031ec2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8031ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8031f74 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x198>)
 8031ec8:	681b      	ldr	r3, [r3, #0]
 8031eca:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8031ece:	b10a      	cbz	r2, 8031ed4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xf8>
 8031ed0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8031ed2:	b900      	cbnz	r0, 8031ed6 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xfa>
        return instance->lcdRef;
 8031ed4:	6898      	ldr	r0, [r3, #8]
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
 8031ed6:	6801      	ldr	r1, [r0, #0]
 8031ed8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8031edc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8031ee0:	f04f 0c01 	mov.w	ip, #1
 8031ee4:	f8cd c008 	str.w	ip, [sp, #8]
 8031ee8:	f896 c028 	ldrb.w	ip, [r6, #40]	@ 0x28
 8031eec:	f8cd c004 	str.w	ip, [sp, #4]
 8031ef0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8031ef4:	f8cd c000 	str.w	ip, [sp]
 8031ef8:	6889      	ldr	r1, [r1, #8]
 8031efa:	4473      	add	r3, lr
 8031efc:	4422      	add	r2, r4
 8031efe:	460f      	mov	r7, r1
 8031f00:	b212      	sxth	r2, r2
 8031f02:	b21b      	sxth	r3, r3
 8031f04:	4649      	mov	r1, r9
 8031f06:	47b8      	blx	r7
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 8031f08:	9a05      	ldr	r2, [sp, #20]
 8031f0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8031f0c:	429a      	cmp	r2, r3
 8031f0e:	ddbb      	ble.n	8031e88 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xac>
 8031f10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8031f12:	e7b1      	b.n	8031e78 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x9c>
        return y + height;
 8031f14:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8031f18:	88e8      	ldrh	r0, [r5, #6]
 8031f1a:	4418      	add	r0, r3
 8031f1c:	b200      	sxth	r0, r0
        return !(x >= other.right() || right() <= other.x || y >= other.bottom() || bottom() <= other.y);
 8031f1e:	4282      	cmp	r2, r0
 8031f20:	dac4      	bge.n	8031eac <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xd0>
 8031f22:	9f05      	ldr	r7, [sp, #20]
 8031f24:	42bb      	cmp	r3, r7
 8031f26:	dac1      	bge.n	8031eac <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xd0>
            int16_t newX = MAX(x, other.x);
 8031f28:	4541      	cmp	r1, r8
 8031f2a:	bfb8      	it	lt
 8031f2c:	4641      	movlt	r1, r8
            int16_t newY = MAX(y, other.y);
 8031f2e:	429a      	cmp	r2, r3
 8031f30:	bfb8      	it	lt
 8031f32:	461a      	movlt	r2, r3
            width = MIN(right(), other.right()) - newX;
 8031f34:	45dc      	cmp	ip, fp
 8031f36:	bfd4      	ite	le
 8031f38:	ebc1 030c 	rsble	r3, r1, ip
 8031f3c:	ebc1 030b 	rsbgt	r3, r1, fp
 8031f40:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
            height = MIN(bottom(), other.bottom()) - newY;
 8031f44:	42b8      	cmp	r0, r7
 8031f46:	bfd4      	ite	le
 8031f48:	ebc2 0300 	rsble	r3, r2, r0
 8031f4c:	ebc2 0307 	rsbgt	r3, r2, r7
 8031f50:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
            x = newX;
 8031f54:	f8ad 1038 	strh.w	r1, [sp, #56]	@ 0x38
            y = newY;
 8031f58:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
    }
 8031f5c:	e7a8      	b.n	8031eb0 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xd4>
 8031f5e:	9b06      	ldr	r3, [sp, #24]
 8031f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8031f62:	4423      	add	r3, r4
 8031f64:	b299      	uxth	r1, r3
 8031f66:	910b      	str	r1, [sp, #44]	@ 0x2c
            x = 0;
 8031f68:	f04f 0a00 	mov.w	sl, #0
        return x + width;
 8031f6c:	fa0f fb83 	sxth.w	fp, r3
 8031f70:	e7cb      	b.n	8031f0a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x12e>
 8031f72:	bf00      	nop
 8031f74:	2000b8e0 	.word	0x2000b8e0

08031f78 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:

Rect TiledImage::getSolidRect() const
{
 8031f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (alpha < 255)
 8031f7c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8031f80:	2bff      	cmp	r3, #255	@ 0xff
{
 8031f82:	4606      	mov	r6, r0
 8031f84:	4689      	mov	r9, r1
    if (alpha < 255)
 8031f86:	d008      	beq.n	8031f9a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
        : x(0), y(0), width(0), height(0)
 8031f88:	2300      	movs	r3, #0
 8031f8a:	8003      	strh	r3, [r0, #0]
 8031f8c:	8043      	strh	r3, [r0, #2]
 8031f8e:	8083      	strh	r3, [r0, #4]
        {
            solidRect = solidRect2;
        }
    }
    return solidRect;
}
 8031f90:	4630      	mov	r0, r6
    return solidRect;
 8031f92:	80f3      	strh	r3, [r6, #6]
}
 8031f94:	b003      	add	sp, #12
 8031f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Rect solidRect = bitmap.getSolidRect();
 8031f9a:	f101 0b26 	add.w	fp, r1, #38	@ 0x26
 8031f9e:	4659      	mov	r1, fp
 8031fa0:	4668      	mov	r0, sp
 8031fa2:	f006 f937 	bl	8038214 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
    if (solidRect.width == bitmap.getWidth())
 8031fa6:	4658      	mov	r0, fp
    Rect solidRect = bitmap.getSolidRect();
 8031fa8:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8031fac:	f9bd 7000 	ldrsh.w	r7, [sp]
 8031fb0:	f9bd a002 	ldrsh.w	sl, [sp, #2]
 8031fb4:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
    if (solidRect.width == bitmap.getWidth())
 8031fb8:	f006 f8c4 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8031fbc:	4284      	cmp	r4, r0
 8031fbe:	d10d      	bne.n	8031fdc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
        return rect.width;
 8031fc0:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
    if (solidRect.height == bitmap.getHeight())
 8031fc4:	4658      	mov	r0, fp
 8031fc6:	f006 f8f1 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8031fca:	4580      	cmp	r8, r0
 8031fcc:	d129      	bne.n	8032022 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xaa>
        return rect.height;
 8031fce:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
    return solidRect;
 8031fd2:	8037      	strh	r7, [r6, #0]
 8031fd4:	f8a6 a002 	strh.w	sl, [r6, #2]
 8031fd8:	80b5      	strh	r5, [r6, #4]
 8031fda:	e7d9      	b.n	8031f90 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
        solidRect.x -= xOffset;
 8031fdc:	f8b9 302a 	ldrh.w	r3, [r9, #42]	@ 0x2a
        solidRect2.x += bitmap.getWidth();
 8031fe0:	4658      	mov	r0, fp
        solidRect.x -= xOffset;
 8031fe2:	1afb      	subs	r3, r7, r3
 8031fe4:	b29d      	uxth	r5, r3
 8031fe6:	b21f      	sxth	r7, r3
        solidRect2.x += bitmap.getWidth();
 8031fe8:	f006 f8ac 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8031fec:	182a      	adds	r2, r5, r0
        if (solidRect.x < 0)
 8031fee:	2f00      	cmp	r7, #0
        return x + width;
 8031ff0:	b2a3      	uxth	r3, r4
        solidRect2.x += bitmap.getWidth();
 8031ff2:	b292      	uxth	r2, r2
 8031ff4:	bfb8      	it	lt
 8031ff6:	18ed      	addlt	r5, r5, r3
        return rect.width;
 8031ff8:	f9b9 0008 	ldrsh.w	r0, [r9, #8]
 8031ffc:	4413      	add	r3, r2
            solidRect.width = MAX(right, 0);
 8031ffe:	bfb8      	it	lt
 8032000:	b22d      	sxthlt	r5, r5
 8032002:	b299      	uxth	r1, r3
        if (solidRect2.right() > getWidth())
 8032004:	b21b      	sxth	r3, r3
    Rect solidRect = bitmap.getSolidRect();
 8032006:	bfae      	itee	ge
 8032008:	4625      	movge	r5, r4
            solidRect.width = MAX(right, 0);
 803200a:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
            solidRect.x = 0;
 803200e:	2700      	movlt	r7, #0
        if (solidRect2.right() > getWidth())
 8032010:	4283      	cmp	r3, r0
            solidRect2.width = solidRect2.right() - getWidth();
 8032012:	bfc4      	itt	gt
 8032014:	1a0b      	subgt	r3, r1, r0
 8032016:	b21c      	sxthgt	r4, r3
        if (solidRect2.width > solidRect.width)
 8032018:	42ac      	cmp	r4, r5
        solidRect2.x += bitmap.getWidth();
 803201a:	bfc4      	itt	gt
 803201c:	b217      	sxthgt	r7, r2
            solidRect = solidRect2;
 803201e:	4625      	movgt	r5, r4
 8032020:	e7d0      	b.n	8031fc4 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
        solidRect.y -= yOffset;
 8032022:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
        solidRect2.y += bitmap.getHeight();
 8032026:	4658      	mov	r0, fp
        solidRect.y -= yOffset;
 8032028:	ebaa 0303 	sub.w	r3, sl, r3
 803202c:	fa0f fa83 	sxth.w	sl, r3
 8032030:	b29c      	uxth	r4, r3
        solidRect2.y += bitmap.getHeight();
 8032032:	f006 f8bb 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8032036:	1821      	adds	r1, r4, r0
        if (solidRect.y < 0)
 8032038:	f1ba 0f00 	cmp.w	sl, #0
        return y + height;
 803203c:	fa1f f288 	uxth.w	r2, r8
        solidRect2.y += bitmap.getHeight();
 8032040:	b289      	uxth	r1, r1
 8032042:	bfb8      	it	lt
 8032044:	1913      	addlt	r3, r2, r4
        return rect.height;
 8032046:	f9b9 400a 	ldrsh.w	r4, [r9, #10]
 803204a:	440a      	add	r2, r1
            solidRect.height = MAX(bottom, 0);
 803204c:	bfb8      	it	lt
 803204e:	b21b      	sxthlt	r3, r3
 8032050:	b290      	uxth	r0, r2
        if (solidRect2.bottom() > getHeight())
 8032052:	b212      	sxth	r2, r2
            solidRect.height = MAX(bottom, 0);
 8032054:	bfb6      	itet	lt
 8032056:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
            solidRect.y = 0;
 803205a:	4643      	movge	r3, r8
 803205c:	f04f 0a00 	movlt.w	sl, #0
        if (solidRect2.bottom() > getHeight())
 8032060:	42a2      	cmp	r2, r4
            solidRect2.height = solidRect2.bottom() - getHeight();
 8032062:	bfc4      	itt	gt
 8032064:	1b02      	subgt	r2, r0, r4
 8032066:	fa0f f882 	sxthgt.w	r8, r2
        if (solidRect2.height > solidRect.height)
 803206a:	4543      	cmp	r3, r8
        solidRect2.y += bitmap.getHeight();
 803206c:	bfbc      	itt	lt
 803206e:	fa0f fa81 	sxthlt.w	sl, r1
            solidRect = solidRect2;
 8032072:	4643      	movlt	r3, r8
 8032074:	e7ad      	b.n	8031fd2 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>
	...

08032078 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8032078:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 803207a:	490f      	ldr	r1, [pc, #60]	@ (80320b8 <MX_USB_DEVICE_Init+0x40>)
 803207c:	480f      	ldr	r0, [pc, #60]	@ (80320bc <MX_USB_DEVICE_Init+0x44>)
 803207e:	2200      	movs	r2, #0
 8032080:	f7ee fac8 	bl	8020614 <USBD_Init>
 8032084:	b108      	cbz	r0, 803208a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8032086:	f7e5 faa9 	bl	80175dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 803208a:	490d      	ldr	r1, [pc, #52]	@ (80320c0 <MX_USB_DEVICE_Init+0x48>)
 803208c:	480b      	ldr	r0, [pc, #44]	@ (80320bc <MX_USB_DEVICE_Init+0x44>)
 803208e:	f7ee fad4 	bl	802063a <USBD_RegisterClass>
 8032092:	b108      	cbz	r0, 8032098 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8032094:	f7e5 faa2 	bl	80175dc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8032098:	490a      	ldr	r1, [pc, #40]	@ (80320c4 <MX_USB_DEVICE_Init+0x4c>)
 803209a:	4808      	ldr	r0, [pc, #32]	@ (80320bc <MX_USB_DEVICE_Init+0x44>)
 803209c:	f7ed fdae 	bl	801fbfc <USBD_MSC_RegisterStorage>
 80320a0:	b108      	cbz	r0, 80320a6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80320a2:	f7e5 fa9b 	bl	80175dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80320a6:	4805      	ldr	r0, [pc, #20]	@ (80320bc <MX_USB_DEVICE_Init+0x44>)
 80320a8:	f7ee fae0 	bl	802066c <USBD_Start>
 80320ac:	b118      	cbz	r0, 80320b6 <MX_USB_DEVICE_Init+0x3e>
    Error_Handler();
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80320ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80320b2:	f7e5 ba93 	b.w	80175dc <Error_Handler>
}
 80320b6:	bd08      	pop	{r3, pc}
 80320b8:	20000780 	.word	0x20000780
 80320bc:	20009e9c 	.word	0x20009e9c
 80320c0:	20000478 	.word	0x20000478
 80320c4:	200007a0 	.word	0x200007a0

080320c8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80320c8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80320ca:	4801      	ldr	r0, [pc, #4]	@ (80320d0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80320cc:	800b      	strh	r3, [r1, #0]
}
 80320ce:	4770      	bx	lr
 80320d0:	2000076c 	.word	0x2000076c

080320d4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80320d4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80320d6:	4801      	ldr	r0, [pc, #4]	@ (80320dc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80320d8:	800b      	strh	r3, [r1, #0]
}
 80320da:	4770      	bx	lr
 80320dc:	2000075c 	.word	0x2000075c

080320e0 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80320e0:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80320e2:	4801      	ldr	r0, [pc, #4]	@ (80320e8 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 80320e4:	800b      	strh	r3, [r1, #0]
}
 80320e6:	4770      	bx	lr
 80320e8:	20000760 	.word	0x20000760

080320ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80320ec:	2300      	movs	r3, #0
 80320ee:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80320f0:	1c4d      	adds	r5, r1, #1
 80320f2:	461e      	mov	r6, r3
      pbuf[2 * idx] = (value >> 28) + '0';
 80320f4:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80320f6:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80320fa:	bf34      	ite	cc
 80320fc:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80320fe:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8032100:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8032104:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8032108:	3301      	adds	r3, #1
 803210a:	b2dc      	uxtb	r4, r3
 803210c:	42a2      	cmp	r2, r4
    value = value << 4;
 803210e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8032112:	d8ef      	bhi.n	80320f4 <IntToUnicode+0x8>
  }
}
 8032114:	bd70      	pop	{r4, r5, r6, pc}
	...

08032118 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8032118:	231a      	movs	r3, #26
{
 803211a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 803211c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 803211e:	4b0a      	ldr	r3, [pc, #40]	@ (8032148 <USBD_FS_SerialStrDescriptor+0x30>)
 8032120:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
  deviceserial0 += deviceserial2;
 8032124:	f8d3 2598 	ldr.w	r2, [r3, #1432]	@ 0x598
  if (deviceserial0 != 0)
 8032128:	1880      	adds	r0, r0, r2
 803212a:	d00a      	beq.n	8032142 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 803212c:	f8d3 4594 	ldr.w	r4, [r3, #1428]	@ 0x594
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8032130:	4906      	ldr	r1, [pc, #24]	@ (803214c <USBD_FS_SerialStrDescriptor+0x34>)
 8032132:	2208      	movs	r2, #8
 8032134:	f7ff ffda 	bl	80320ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8032138:	2204      	movs	r2, #4
 803213a:	3110      	adds	r1, #16
 803213c:	4620      	mov	r0, r4
 803213e:	f7ff ffd5 	bl	80320ec <IntToUnicode>
}
 8032142:	4803      	ldr	r0, [pc, #12]	@ (8032150 <USBD_FS_SerialStrDescriptor+0x38>)
 8032144:	bd10      	pop	{r4, pc}
 8032146:	bf00      	nop
 8032148:	1fff7000 	.word	0x1fff7000
 803214c:	20000742 	.word	0x20000742
 8032150:	20000740 	.word	0x20000740

08032154 <USBD_FS_ManufacturerStrDescriptor>:
{
 8032154:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8032156:	4c04      	ldr	r4, [pc, #16]	@ (8032168 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8032158:	4804      	ldr	r0, [pc, #16]	@ (803216c <USBD_FS_ManufacturerStrDescriptor+0x18>)
{
 803215a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 803215c:	4621      	mov	r1, r4
 803215e:	f7ee fe5f 	bl	8020e20 <USBD_GetString>
}
 8032162:	4620      	mov	r0, r4
 8032164:	bd10      	pop	{r4, pc}
 8032166:	bf00      	nop
 8032168:	2000a178 	.word	0x2000a178
 803216c:	08041b28 	.word	0x08041b28

08032170 <USBD_FS_ProductStrDescriptor>:
{
 8032170:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8032172:	4c04      	ldr	r4, [pc, #16]	@ (8032184 <USBD_FS_ProductStrDescriptor+0x14>)
 8032174:	4804      	ldr	r0, [pc, #16]	@ (8032188 <USBD_FS_ProductStrDescriptor+0x18>)
{
 8032176:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8032178:	4621      	mov	r1, r4
 803217a:	f7ee fe51 	bl	8020e20 <USBD_GetString>
}
 803217e:	4620      	mov	r0, r4
 8032180:	bd10      	pop	{r4, pc}
 8032182:	bf00      	nop
 8032184:	2000a178 	.word	0x2000a178
 8032188:	08041b3f 	.word	0x08041b3f

0803218c <USBD_FS_ConfigStrDescriptor>:
{
 803218c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 803218e:	4c04      	ldr	r4, [pc, #16]	@ (80321a0 <USBD_FS_ConfigStrDescriptor+0x14>)
 8032190:	4804      	ldr	r0, [pc, #16]	@ (80321a4 <USBD_FS_ConfigStrDescriptor+0x18>)
{
 8032192:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8032194:	4621      	mov	r1, r4
 8032196:	f7ee fe43 	bl	8020e20 <USBD_GetString>
}
 803219a:	4620      	mov	r0, r4
 803219c:	bd10      	pop	{r4, pc}
 803219e:	bf00      	nop
 80321a0:	2000a178 	.word	0x2000a178
 80321a4:	08041b50 	.word	0x08041b50

080321a8 <USBD_FS_InterfaceStrDescriptor>:
{
 80321a8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80321aa:	4c04      	ldr	r4, [pc, #16]	@ (80321bc <USBD_FS_InterfaceStrDescriptor+0x14>)
 80321ac:	4804      	ldr	r0, [pc, #16]	@ (80321c0 <USBD_FS_InterfaceStrDescriptor+0x18>)
{
 80321ae:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80321b0:	4621      	mov	r1, r4
 80321b2:	f7ee fe35 	bl	8020e20 <USBD_GetString>
}
 80321b6:	4620      	mov	r0, r4
 80321b8:	bd10      	pop	{r4, pc}
 80321ba:	bf00      	nop
 80321bc:	2000a178 	.word	0x2000a178
 80321c0:	08041b5b 	.word	0x08041b5b

080321c4 <STORAGE_Init_FS>:
  /* USER CODE BEGIN 2 */
	if(lun !=0 ){
		return USBD_FAIL;
	}
  // filesystem is initialized beforehand
  return (USBD_OK);
 80321c4:	2800      	cmp	r0, #0
  /* USER CODE END 2 */
}
 80321c6:	bf14      	ite	ne
 80321c8:	2003      	movne	r0, #3
 80321ca:	2000      	moveq	r0, #0
 80321cc:	4770      	bx	lr

080321ce <STORAGE_GetCapacity_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
  /* USER CODE BEGIN 3 */
  *block_num  = REAL_BLK_NBR -1;
 80321ce:	f240 234d 	movw	r3, #589	@ 0x24d
 80321d2:	600b      	str	r3, [r1, #0]
  *block_size = REAL_BLK_SIZ;
 80321d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80321d8:	8013      	strh	r3, [r2, #0]
  return (USBD_OK);
  /* USER CODE END 3 */
}
 80321da:	2000      	movs	r0, #0
 80321dc:	4770      	bx	lr

080321de <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS(void)
{
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */
}
 80321de:	2000      	movs	r0, #0
 80321e0:	4770      	bx	lr

080321e2 <STORAGE_IsWriteProtected_FS>:
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
 80321e2:	2800      	cmp	r0, #0
 80321e4:	bf14      	ite	ne
 80321e6:	2003      	movne	r0, #3
 80321e8:	2000      	moveq	r0, #0
 80321ea:	4770      	bx	lr

080321ec <STORAGE_IsReady_FS>:
int8_t STORAGE_IsReady_FS(uint8_t lun)
 80321ec:	2800      	cmp	r0, #0
 80321ee:	bf14      	ite	ne
 80321f0:	2003      	movne	r0, #3
 80321f2:	2000      	moveq	r0, #0
 80321f4:	4770      	bx	lr

080321f6 <_convertReturnCodes>:
  switch (fsCode){
 80321f6:	b120      	cbz	r0, 8032202 <_convertReturnCodes+0xc>
 80321f8:	3802      	subs	r0, #2
		usbResult = USBD_BUSY;
 80321fa:	2801      	cmp	r0, #1
 80321fc:	bf8c      	ite	hi
 80321fe:	2003      	movhi	r0, #3
 8032200:	2001      	movls	r0, #1
}
 8032202:	4770      	bx	lr

08032204 <STORAGE_Write_FS>:
{
 8032204:	b508      	push	{r3, lr}
	if(lun !=0 ){
 8032206:	b928      	cbnz	r0, 8032214 <STORAGE_Write_FS+0x10>
	int result = USER_write(lun, buf, blk_addr, blk_len);
 8032208:	f7ed fb95 	bl	801f936 <USER_write>
}
 803220c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return _convertReturnCodes(result);
 8032210:	f7ff bff1 	b.w	80321f6 <_convertReturnCodes>
}
 8032214:	2003      	movs	r0, #3
 8032216:	bd08      	pop	{r3, pc}

08032218 <STORAGE_Read_FS>:
{
 8032218:	b508      	push	{r3, lr}
	if(lun !=0 ){
 803221a:	b928      	cbnz	r0, 8032228 <STORAGE_Read_FS+0x10>
	int result = USER_read(lun, buf, blk_addr, blk_len);
 803221c:	f7ed fb7e 	bl	801f91c <USER_read>
}
 8032220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return _convertReturnCodes(result);
 8032224:	f7ff bfe7 	b.w	80321f6 <_convertReturnCodes>
}
 8032228:	2003      	movs	r0, #3
 803222a:	bd08      	pop	{r3, pc}

0803222c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 803222c:	b510      	push	{r4, lr}
 803222e:	4604      	mov	r4, r0
 8032230:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8032232:	2214      	movs	r2, #20
 8032234:	2100      	movs	r1, #0
 8032236:	a803      	add	r0, sp, #12
 8032238:	f00b f934 	bl	803d4a4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 803223c:	6823      	ldr	r3, [r4, #0]
 803223e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8032242:	d144      	bne.n	80322ce <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8032244:	4c24      	ldr	r4, [pc, #144]	@ (80322d8 <HAL_PCD_MspInit+0xac>)
 8032246:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8032248:	f043 0301 	orr.w	r3, r3, #1
 803224c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 803224e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8032250:	f003 0301 	and.w	r3, r3, #1
 8032254:	9300      	str	r3, [sp, #0]
 8032256:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8032258:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 803225a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 803225e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8032262:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8032264:	f7e7 feec 	bl	801a040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_ID_Pin|USB_D_N_Pin|USB_D_P_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8032268:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 803226c:	2302      	movs	r3, #2
 803226e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8032272:	2100      	movs	r1, #0
 8032274:	2303      	movs	r3, #3
 8032276:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803227a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 803227e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8032280:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8032282:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8032284:	f7e7 fedc 	bl	801a040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8032288:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 803228a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 803228e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8032290:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8032292:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8032296:	9301      	str	r3, [sp, #4]
 8032298:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 803229a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 803229c:	00d8      	lsls	r0, r3, #3
 803229e:	d418      	bmi.n	80322d2 <HAL_PCD_MspInit+0xa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80322a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80322a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80322a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80322a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80322aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80322ae:	9302      	str	r3, [sp, #8]
 80322b0:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 80322b2:	f7e9 fe11 	bl	801bed8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80322b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80322b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80322bc:	65a3      	str	r3, [r4, #88]	@ 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80322be:	2043      	movs	r0, #67	@ 0x43
 80322c0:	2200      	movs	r2, #0
 80322c2:	2105      	movs	r1, #5
 80322c4:	f7e7 fa8c 	bl	80197e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80322c8:	2043      	movs	r0, #67	@ 0x43
 80322ca:	f7e7 fabb 	bl	8019844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80322ce:	b008      	add	sp, #32
 80322d0:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 80322d2:	f7e9 fe01 	bl	801bed8 <HAL_PWREx_EnableVddUSB>
 80322d6:	e7f2      	b.n	80322be <HAL_PCD_MspInit+0x92>
 80322d8:	40021000 	.word	0x40021000

080322dc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80322dc:	f200 419c 	addw	r1, r0, #1180	@ 0x49c
 80322e0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80322e4:	f7ee b9d4 	b.w	8020690 <USBD_LL_SetupStage>

080322e8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80322e8:	2324      	movs	r3, #36	@ 0x24
 80322ea:	fb03 0301 	mla	r3, r3, r1, r0
 80322ee:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80322f2:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
 80322f6:	f7ee b9fb 	b.w	80206f0 <USBD_LL_DataOutStage>

080322fa <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80322fa:	2324      	movs	r3, #36	@ 0x24
 80322fc:	fb03 0301 	mla	r3, r3, r1, r0
 8032300:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 8032304:	6a1a      	ldr	r2, [r3, #32]
 8032306:	f7ee ba28 	b.w	802075a <USBD_LL_DataInStage>

0803230a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 803230a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 803230e:	f7ee bac2 	b.w	8020896 <USBD_LL_SOF>

08032312 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8032312:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8032314:	79c3      	ldrb	r3, [r0, #7]
 8032316:	2b02      	cmp	r3, #2
{
 8032318:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 803231a:	d001      	beq.n	8032320 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 803231c:	f7e5 f95e 	bl	80175dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8032320:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
 8032324:	2101      	movs	r1, #1
 8032326:	f7ee fa9a 	bl	802085e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 803232a:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 803232e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8032332:	f7ee ba65 	b.w	8020800 <USBD_LL_Reset>
	...

08032338 <HAL_PCD_SuspendCallback>:
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8032338:	6802      	ldr	r2, [r0, #0]
 803233a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
{
 803233e:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8032340:	f043 0301 	orr.w	r3, r3, #1
{
 8032344:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8032346:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 803234a:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 803234e:	f7ee fa89 	bl	8020864 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8032352:	7ae3      	ldrb	r3, [r4, #11]
 8032354:	b123      	cbz	r3, 8032360 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8032356:	4a03      	ldr	r2, [pc, #12]	@ (8032364 <HAL_PCD_SuspendCallback+0x2c>)
 8032358:	6913      	ldr	r3, [r2, #16]
 803235a:	f043 0306 	orr.w	r3, r3, #6
 803235e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8032360:	bd10      	pop	{r4, pc}
 8032362:	bf00      	nop
 8032364:	e000ed00 	.word	0xe000ed00

08032368 <HAL_PCD_ResumeCallback>:
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8032368:	6802      	ldr	r2, [r0, #0]
 803236a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
{
 803236e:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8032370:	f023 0301 	bic.w	r3, r3, #1
{
 8032374:	4604      	mov	r4, r0
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8032376:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00

  /* USER CODE BEGIN 3 */
  USB_trackResumeEvent();
 803237a:	f7e4 fc49 	bl	8016c10 <USB_trackResumeEvent>

  if (hpcd->Init.low_power_enable)
 803237e:	7ae3      	ldrb	r3, [r4, #11]
 8032380:	b133      	cbz	r3, 8032390 <HAL_PCD_ResumeCallback+0x28>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8032382:	4a06      	ldr	r2, [pc, #24]	@ (803239c <HAL_PCD_ResumeCallback+0x34>)
 8032384:	6913      	ldr	r3, [r2, #16]
 8032386:	f023 0306 	bic.w	r3, r3, #6
 803238a:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 803238c:	f7e4 fc8a 	bl	8016ca4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8032390:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
}
 8032394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8032398:	f7ee ba72 	b.w	8020880 <USBD_LL_Resume>
 803239c:	e000ed00 	.word	0xe000ed00

080323a0 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80323a0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80323a4:	f7ee ba97 	b.w	80208d6 <USBD_LL_IsoOUTIncomplete>

080323a8 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80323a8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80323ac:	f7ee ba80 	b.w	80208b0 <USBD_LL_IsoINIncomplete>

080323b0 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80323b0:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80323b4:	f7ee baa2 	b.w	80208fc <USBD_LL_DevConnected>

080323b8 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80323b8:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
 80323bc:	f7ee baa0 	b.w	8020900 <USBD_LL_DevDisconnected>

080323c0 <USBD_LL_Init>:
{
 80323c0:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 80323c2:	7802      	ldrb	r2, [r0, #0]
{
 80323c4:	4603      	mov	r3, r0
  if (pdev->id == DEVICE_FS) {
 80323c6:	bb12      	cbnz	r2, 803240e <USBD_LL_Init+0x4e>
  hpcd_USB_OTG_FS.pData = pdev;
 80323c8:	4812      	ldr	r0, [pc, #72]	@ (8032414 <USBD_LL_Init+0x54>)
 80323ca:	f8c0 34e0 	str.w	r3, [r0, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80323ce:	f8c3 02c8 	str.w	r0, [r3, #712]	@ 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80323d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80323d6:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80323d8:	2306      	movs	r3, #6
 80323da:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80323dc:	2302      	movs	r3, #2
 80323de:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80323e0:	7243      	strb	r3, [r0, #9]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80323e2:	4b0d      	ldr	r3, [pc, #52]	@ (8032418 <USBD_LL_Init+0x58>)
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80323e4:	8142      	strh	r2, [r0, #10]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80323e6:	60c3      	str	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80323e8:	f7e8 ff9e 	bl	801b328 <HAL_PCD_Init>
 80323ec:	b108      	cbz	r0, 80323f2 <USBD_LL_Init+0x32>
    Error_Handler( );
 80323ee:	f7e5 f8f5 	bl	80175dc <Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80323f2:	2180      	movs	r1, #128	@ 0x80
 80323f4:	4807      	ldr	r0, [pc, #28]	@ (8032414 <USBD_LL_Init+0x54>)
 80323f6:	f7e9 fc87 	bl	801bd08 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80323fa:	2240      	movs	r2, #64	@ 0x40
 80323fc:	2100      	movs	r1, #0
 80323fe:	4805      	ldr	r0, [pc, #20]	@ (8032414 <USBD_LL_Init+0x54>)
 8032400:	f7e9 fc63 	bl	801bcca <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8032404:	4803      	ldr	r0, [pc, #12]	@ (8032414 <USBD_LL_Init+0x54>)
 8032406:	2280      	movs	r2, #128	@ 0x80
 8032408:	2101      	movs	r1, #1
 803240a:	f7e9 fc5e 	bl	801bcca <HAL_PCDEx_SetTxFiFo>
}
 803240e:	2000      	movs	r0, #0
 8032410:	bd08      	pop	{r3, pc}
 8032412:	bf00      	nop
 8032414:	2000b3f0 	.word	0x2000b3f0
 8032418:	00010100 	.word	0x00010100

0803241c <USBD_LL_Start>:
{
 803241c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 803241e:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8032422:	f7e8 fff2 	bl	801b40a <HAL_PCD_Start>
  switch (hal_status) {
 8032426:	b118      	cbz	r0, 8032430 <USBD_LL_Start+0x14>
 8032428:	2802      	cmp	r0, #2
 803242a:	bf0c      	ite	eq
 803242c:	2001      	moveq	r0, #1
 803242e:	2003      	movne	r0, #3
}
 8032430:	bd08      	pop	{r3, pc}

08032432 <USBD_LL_OpenEP>:
{
 8032432:	b510      	push	{r4, lr}
 8032434:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8032436:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
{
 803243a:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 803243c:	4623      	mov	r3, r4
 803243e:	f7e9 f813 	bl	801b468 <HAL_PCD_EP_Open>
  switch (hal_status) {
 8032442:	b118      	cbz	r0, 803244c <USBD_LL_OpenEP+0x1a>
 8032444:	2802      	cmp	r0, #2
 8032446:	bf0c      	ite	eq
 8032448:	2001      	moveq	r0, #1
 803244a:	2003      	movne	r0, #3
}
 803244c:	bd10      	pop	{r4, pc}

0803244e <USBD_LL_CloseEP>:
{
 803244e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8032450:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8032454:	f7e9 f841 	bl	801b4da <HAL_PCD_EP_Close>
  switch (hal_status) {
 8032458:	b118      	cbz	r0, 8032462 <USBD_LL_CloseEP+0x14>
 803245a:	2802      	cmp	r0, #2
 803245c:	bf0c      	ite	eq
 803245e:	2001      	moveq	r0, #1
 8032460:	2003      	movne	r0, #3
}
 8032462:	bd08      	pop	{r3, pc}

08032464 <USBD_LL_FlushEP>:
{
 8032464:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8032466:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 803246a:	f7e9 fc15 	bl	801bc98 <HAL_PCD_EP_Flush>
  switch (hal_status) {
 803246e:	b118      	cbz	r0, 8032478 <USBD_LL_FlushEP+0x14>
 8032470:	2802      	cmp	r0, #2
 8032472:	bf0c      	ite	eq
 8032474:	2001      	moveq	r0, #1
 8032476:	2003      	movne	r0, #3
}
 8032478:	bd08      	pop	{r3, pc}

0803247a <USBD_LL_StallEP>:
{
 803247a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 803247c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8032480:	f7e9 f88b 	bl	801b59a <HAL_PCD_EP_SetStall>
  switch (hal_status) {
 8032484:	b118      	cbz	r0, 803248e <USBD_LL_StallEP+0x14>
 8032486:	2802      	cmp	r0, #2
 8032488:	bf0c      	ite	eq
 803248a:	2001      	moveq	r0, #1
 803248c:	2003      	movne	r0, #3
}
 803248e:	bd08      	pop	{r3, pc}

08032490 <USBD_LL_ClearStallEP>:
{
 8032490:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8032492:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8032496:	f7e9 f8b6 	bl	801b606 <HAL_PCD_EP_ClrStall>
  switch (hal_status) {
 803249a:	b118      	cbz	r0, 80324a4 <USBD_LL_ClearStallEP+0x14>
 803249c:	2802      	cmp	r0, #2
 803249e:	bf0c      	ite	eq
 80324a0:	2001      	moveq	r0, #1
 80324a2:	2003      	movne	r0, #3
}
 80324a4:	bd08      	pop	{r3, pc}

080324a6 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80324a6:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80324aa:	f8d0 32c8 	ldr.w	r3, [r0, #712]	@ 0x2c8
  if((ep_addr & 0x80) == 0x80)
 80324ae:	f04f 0224 	mov.w	r2, #36	@ 0x24
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80324b2:	bf1b      	ittet	ne
 80324b4:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 80324b8:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80324bc:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80324c0:	7d98      	ldrbne	r0, [r3, #22]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80324c2:	bf08      	it	eq
 80324c4:	f893 0256 	ldrbeq.w	r0, [r3, #598]	@ 0x256
}
 80324c8:	4770      	bx	lr

080324ca <USBD_LL_SetUSBAddress>:
{
 80324ca:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80324cc:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80324d0:	f7e8 ffb7 	bl	801b442 <HAL_PCD_SetAddress>
  switch (hal_status) {
 80324d4:	b118      	cbz	r0, 80324de <USBD_LL_SetUSBAddress+0x14>
 80324d6:	2802      	cmp	r0, #2
 80324d8:	bf0c      	ite	eq
 80324da:	2001      	moveq	r0, #1
 80324dc:	2003      	movne	r0, #3
}
 80324de:	bd08      	pop	{r3, pc}

080324e0 <USBD_LL_Transmit>:
{
 80324e0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80324e2:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80324e6:	f7e9 f844 	bl	801b572 <HAL_PCD_EP_Transmit>
  switch (hal_status) {
 80324ea:	b118      	cbz	r0, 80324f4 <USBD_LL_Transmit+0x14>
 80324ec:	2802      	cmp	r0, #2
 80324ee:	bf0c      	ite	eq
 80324f0:	2001      	moveq	r0, #1
 80324f2:	2003      	movne	r0, #3
}
 80324f4:	bd08      	pop	{r3, pc}

080324f6 <USBD_LL_PrepareReceive>:
{
 80324f6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80324f8:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 80324fc:	f7e9 f81b 	bl	801b536 <HAL_PCD_EP_Receive>
  switch (hal_status) {
 8032500:	b118      	cbz	r0, 803250a <USBD_LL_PrepareReceive+0x14>
 8032502:	2802      	cmp	r0, #2
 8032504:	bf0c      	ite	eq
 8032506:	2001      	moveq	r0, #1
 8032508:	2003      	movne	r0, #3
}
 803250a:	bd08      	pop	{r3, pc}

0803250c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 803250c:	f8d0 02c8 	ldr.w	r0, [r0, #712]	@ 0x2c8
 8032510:	f7e9 b827 	b.w	801b562 <HAL_PCD_EP_GetRxCount>

08032514 <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == GPIO_PIN_9)
 8032514:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8032518:	d102      	bne.n	8032520 <HAL_GPIO_EXTI_Callback+0xc>
     HAL_PCDEx_BCD_VBUSDetect(&hpcd_USB_OTG_FS);
 803251a:	4802      	ldr	r0, [pc, #8]	@ (8032524 <HAL_GPIO_EXTI_Callback+0x10>)
 803251c:	f7e9 bc1e 	b.w	801bd5c <HAL_PCDEx_BCD_VBUSDetect>
}
 8032520:	4770      	bx	lr
 8032522:	bf00      	nop
 8032524:	2000b3f0 	.word	0x2000b3f0

08032528 <HAL_PCDEx_LPM_Callback>:
{
 8032528:	b510      	push	{r4, lr}
 803252a:	4604      	mov	r4, r0
  switch (msg)
 803252c:	b111      	cbz	r1, 8032534 <HAL_PCDEx_LPM_Callback+0xc>
 803252e:	2901      	cmp	r1, #1
 8032530:	d016      	beq.n	8032560 <HAL_PCDEx_LPM_Callback+0x38>
}
 8032532:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8032534:	7ac3      	ldrb	r3, [r0, #11]
 8032536:	b133      	cbz	r3, 8032546 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8032538:	f7e4 fbb4 	bl	8016ca4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803253c:	4a12      	ldr	r2, [pc, #72]	@ (8032588 <HAL_PCDEx_LPM_Callback+0x60>)
 803253e:	6913      	ldr	r3, [r2, #16]
 8032540:	f023 0306 	bic.w	r3, r3, #6
 8032544:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8032546:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8032548:	f8d4 04e0 	ldr.w	r0, [r4, #1248]	@ 0x4e0
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 803254c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 8032550:	f023 0301 	bic.w	r3, r3, #1
}
 8032554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8032558:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Resume(hpcd->pData);
 803255c:	f7ee b990 	b.w	8020880 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8032560:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8032562:	f8d0 04e0 	ldr.w	r0, [r0, #1248]	@ 0x4e0
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8032566:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	@ 0xe00
 803256a:	f043 0301 	orr.w	r3, r3, #1
 803256e:	f8c2 3e00 	str.w	r3, [r2, #3584]	@ 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8032572:	f7ee f977 	bl	8020864 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8032576:	7ae3      	ldrb	r3, [r4, #11]
 8032578:	2b00      	cmp	r3, #0
 803257a:	d0da      	beq.n	8032532 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 803257c:	4a02      	ldr	r2, [pc, #8]	@ (8032588 <HAL_PCDEx_LPM_Callback+0x60>)
 803257e:	6913      	ldr	r3, [r2, #16]
 8032580:	f043 0306 	orr.w	r3, r3, #6
 8032584:	6113      	str	r3, [r2, #16]
}
 8032586:	e7d4      	b.n	8032532 <HAL_PCDEx_LPM_Callback+0xa>
 8032588:	e000ed00 	.word	0xe000ed00

0803258c <USBD_static_malloc>:
}
 803258c:	4800      	ldr	r0, [pc, #0]	@ (8032590 <USBD_static_malloc+0x4>)
 803258e:	4770      	bx	lr
 8032590:	2000a378 	.word	0x2000a378

08032594 <USBD_static_free>:
}
 8032594:	4770      	bx	lr

08032596 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8032596:	8880      	ldrh	r0, [r0, #4]
 8032598:	4770      	bx	lr

0803259a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 803259a:	b570      	push	{r4, r5, r6, lr}
 803259c:	6803      	ldr	r3, [r0, #0]
 803259e:	4605      	mov	r5, r0
 80325a0:	460c      	mov	r4, r1
 80325a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80325a4:	2100      	movs	r1, #0
 80325a6:	4798      	blx	r3
 80325a8:	682b      	ldr	r3, [r5, #0]
 80325aa:	4606      	mov	r6, r0
 80325ac:	6a1b      	ldr	r3, [r3, #32]
 80325ae:	4628      	mov	r0, r5
 80325b0:	4798      	blx	r3
 80325b2:	1ba4      	subs	r4, r4, r6
 80325b4:	b2a4      	uxth	r4, r4
 80325b6:	fbb4 f0f0 	udiv	r0, r4, r0
 80325ba:	bd70      	pop	{r4, r5, r6, pc}

080325bc <_ZN8touchgfx17AbstractPartition5clearEv>:
 80325bc:	2300      	movs	r3, #0
 80325be:	8083      	strh	r3, [r0, #4]
 80325c0:	4770      	bx	lr

080325c2 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80325c2:	b510      	push	{r4, lr}
 80325c4:	6803      	ldr	r3, [r0, #0]
 80325c6:	8881      	ldrh	r1, [r0, #4]
 80325c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80325ca:	4604      	mov	r4, r0
 80325cc:	4798      	blx	r3
 80325ce:	88a3      	ldrh	r3, [r4, #4]
 80325d0:	3301      	adds	r3, #1
 80325d2:	80a3      	strh	r3, [r4, #4]
 80325d4:	bd10      	pop	{r4, pc}

080325d6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80325d6:	6803      	ldr	r3, [r0, #0]
 80325d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80325da:	4718      	bx	r3

080325dc <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80325dc:	4770      	bx	lr
	...

080325e0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80325e0:	4a02      	ldr	r2, [pc, #8]	@ (80325ec <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80325e2:	6002      	str	r2, [r0, #0]
 80325e4:	2200      	movs	r2, #0
 80325e6:	8082      	strh	r2, [r0, #4]
 80325e8:	4770      	bx	lr
 80325ea:	bf00      	nop
 80325ec:	08043874 	.word	0x08043874

080325f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80325f0:	b513      	push	{r0, r1, r4, lr}
 80325f2:	6803      	ldr	r3, [r0, #0]
 80325f4:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80325f8:	2300      	movs	r3, #0
 80325fa:	e9cd 3300 	strd	r3, r3, [sp]
 80325fe:	466b      	mov	r3, sp
 8032600:	47a0      	blx	r4
 8032602:	b002      	add	sp, #8
 8032604:	bd10      	pop	{r4, pc}

08032606 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8032606:	2301      	movs	r3, #1
 8032608:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 803260c:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8032610:	4770      	bx	lr

08032612 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8032612:	2301      	movs	r3, #1
 8032614:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8032618:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 803261c:	4770      	bx	lr

0803261e <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 803261e:	6843      	ldr	r3, [r0, #4]
 8032620:	2201      	movs	r2, #1
 8032622:	725a      	strb	r2, [r3, #9]
 8032624:	6840      	ldr	r0, [r0, #4]
 8032626:	6803      	ldr	r3, [r0, #0]
 8032628:	691b      	ldr	r3, [r3, #16]
 803262a:	4718      	bx	r3

0803262c <_ZN8touchgfx3HAL8flushDMAEv>:
 803262c:	6840      	ldr	r0, [r0, #4]
 803262e:	6803      	ldr	r3, [r0, #0]
 8032630:	689b      	ldr	r3, [r3, #8]
 8032632:	4718      	bx	r3

08032634 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8032634:	b530      	push	{r4, r5, lr}
 8032636:	b08b      	sub	sp, #44	@ 0x2c
 8032638:	6804      	ldr	r4, [r0, #0]
 803263a:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 803263e:	9509      	str	r5, [sp, #36]	@ 0x24
 8032640:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8032644:	9508      	str	r5, [sp, #32]
 8032646:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 803264a:	9507      	str	r5, [sp, #28]
 803264c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 8032650:	9506      	str	r5, [sp, #24]
 8032652:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8032656:	9505      	str	r5, [sp, #20]
 8032658:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 803265c:	9504      	str	r5, [sp, #16]
 803265e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8032662:	9503      	str	r5, [sp, #12]
 8032664:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8032668:	9502      	str	r5, [sp, #8]
 803266a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 803266e:	e9cd 3500 	strd	r3, r5, [sp]
 8032672:	4613      	mov	r3, r2
 8032674:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8032676:	2200      	movs	r2, #0
 8032678:	47a0      	blx	r4
 803267a:	b00b      	add	sp, #44	@ 0x2c
 803267c:	bd30      	pop	{r4, r5, pc}
	...

08032680 <_ZN8touchgfx3HAL10beginFrameEv>:
 8032680:	4b04      	ldr	r3, [pc, #16]	@ (8032694 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8032682:	781b      	ldrb	r3, [r3, #0]
 8032684:	b123      	cbz	r3, 8032690 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8032686:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 803268a:	f080 0001 	eor.w	r0, r0, #1
 803268e:	4770      	bx	lr
 8032690:	2001      	movs	r0, #1
 8032692:	4770      	bx	lr
 8032694:	2000b8de 	.word	0x2000b8de

08032698 <_ZN8touchgfx3HAL8endFrameEv>:
 8032698:	b510      	push	{r4, lr}
 803269a:	4604      	mov	r4, r0
 803269c:	6840      	ldr	r0, [r0, #4]
 803269e:	6803      	ldr	r3, [r0, #0]
 80326a0:	689b      	ldr	r3, [r3, #8]
 80326a2:	4798      	blx	r3
 80326a4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80326a8:	b113      	cbz	r3, 80326b0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80326aa:	2301      	movs	r3, #1
 80326ac:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80326b0:	bd10      	pop	{r4, pc}

080326b2 <_ZN8touchgfx3HAL10initializeEv>:
 80326b2:	b510      	push	{r4, lr}
 80326b4:	4604      	mov	r4, r0
 80326b6:	f7f4 ff03 	bl	80274c0 <_ZN8touchgfx10OSWrappers10initializeEv>
 80326ba:	f7f4 fd70 	bl	802719e <_ZN8touchgfx4GPIO4initEv>
 80326be:	6860      	ldr	r0, [r4, #4]
 80326c0:	6803      	ldr	r3, [r0, #0]
 80326c2:	68db      	ldr	r3, [r3, #12]
 80326c4:	4798      	blx	r3
 80326c6:	68e0      	ldr	r0, [r4, #12]
 80326c8:	6803      	ldr	r3, [r0, #0]
 80326ca:	689b      	ldr	r3, [r3, #8]
 80326cc:	4798      	blx	r3
 80326ce:	6823      	ldr	r3, [r4, #0]
 80326d0:	4620      	mov	r0, r4
 80326d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80326d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80326d8:	4718      	bx	r3

080326da <_ZN8touchgfx3HAL9taskEntryEv>:
 80326da:	b508      	push	{r3, lr}
 80326dc:	6803      	ldr	r3, [r0, #0]
 80326de:	4604      	mov	r4, r0
 80326e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80326e4:	4798      	blx	r3
 80326e6:	6823      	ldr	r3, [r4, #0]
 80326e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80326ea:	4620      	mov	r0, r4
 80326ec:	4798      	blx	r3
 80326ee:	f7f4 ff33 	bl	8027558 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80326f2:	6823      	ldr	r3, [r4, #0]
 80326f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80326f6:	e7f8      	b.n	80326ea <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080326f8 <_ZN8touchgfx3HAL4tickEv>:
 80326f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80326fa:	6803      	ldr	r3, [r0, #0]
 80326fc:	4d5b      	ldr	r5, [pc, #364]	@ (803286c <_ZN8touchgfx3HAL4tickEv+0x174>)
 80326fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8032702:	4604      	mov	r4, r0
 8032704:	4798      	blx	r3
 8032706:	2800      	cmp	r0, #0
 8032708:	f000 8095 	beq.w	8032836 <_ZN8touchgfx3HAL4tickEv+0x13e>
 803270c:	2001      	movs	r0, #1
 803270e:	f7f4 fd47 	bl	80271a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8032712:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8032716:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 803271a:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 803271e:	2600      	movs	r6, #0
 8032720:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8032724:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8032728:	b133      	cbz	r3, 8032738 <_ZN8touchgfx3HAL4tickEv+0x40>
 803272a:	6823      	ldr	r3, [r4, #0]
 803272c:	4620      	mov	r0, r4
 803272e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8032732:	4798      	blx	r3
 8032734:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8032738:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 803273c:	6862      	ldr	r2, [r4, #4]
 803273e:	f083 0301 	eor.w	r3, r3, #1
 8032742:	7253      	strb	r3, [r2, #9]
 8032744:	2601      	movs	r6, #1
 8032746:	702e      	strb	r6, [r5, #0]
 8032748:	f002 fae0 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 803274c:	6803      	ldr	r3, [r0, #0]
 803274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8032750:	4798      	blx	r3
 8032752:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8032756:	b90b      	cbnz	r3, 803275c <_ZN8touchgfx3HAL4tickEv+0x64>
 8032758:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 803275c:	f002 fad6 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 8032760:	6803      	ldr	r3, [r0, #0]
 8032762:	695b      	ldr	r3, [r3, #20]
 8032764:	4798      	blx	r3
 8032766:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8032768:	6803      	ldr	r3, [r0, #0]
 803276a:	691b      	ldr	r3, [r3, #16]
 803276c:	4798      	blx	r3
 803276e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8032772:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8032776:	3b01      	subs	r3, #1
 8032778:	b2db      	uxtb	r3, r3
 803277a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 803277e:	b10a      	cbz	r2, 8032784 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8032780:	2b00      	cmp	r3, #0
 8032782:	d1eb      	bne.n	803275c <_ZN8touchgfx3HAL4tickEv+0x64>
 8032784:	4a3a      	ldr	r2, [pc, #232]	@ (8032870 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8032786:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 803278a:	7813      	ldrb	r3, [r2, #0]
 803278c:	3301      	adds	r3, #1
 803278e:	b25b      	sxtb	r3, r3
 8032790:	4299      	cmp	r1, r3
 8032792:	7013      	strb	r3, [r2, #0]
 8032794:	dc10      	bgt.n	80327b8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8032796:	68e0      	ldr	r0, [r4, #12]
 8032798:	2300      	movs	r3, #0
 803279a:	7013      	strb	r3, [r2, #0]
 803279c:	6803      	ldr	r3, [r0, #0]
 803279e:	aa03      	add	r2, sp, #12
 80327a0:	68db      	ldr	r3, [r3, #12]
 80327a2:	a902      	add	r1, sp, #8
 80327a4:	4798      	blx	r3
 80327a6:	6823      	ldr	r3, [r4, #0]
 80327a8:	2800      	cmp	r0, #0
 80327aa:	d050      	beq.n	803284e <_ZN8touchgfx3HAL4tickEv+0x156>
 80327ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80327b0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80327b4:	4620      	mov	r0, r4
 80327b6:	4798      	blx	r3
 80327b8:	6960      	ldr	r0, [r4, #20]
 80327ba:	2300      	movs	r3, #0
 80327bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80327c0:	b158      	cbz	r0, 80327da <_ZN8touchgfx3HAL4tickEv+0xe2>
 80327c2:	6803      	ldr	r3, [r0, #0]
 80327c4:	f10d 0107 	add.w	r1, sp, #7
 80327c8:	68db      	ldr	r3, [r3, #12]
 80327ca:	4798      	blx	r3
 80327cc:	b128      	cbz	r0, 80327da <_ZN8touchgfx3HAL4tickEv+0xe2>
 80327ce:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80327d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80327d4:	6803      	ldr	r3, [r0, #0]
 80327d6:	68db      	ldr	r3, [r3, #12]
 80327d8:	4798      	blx	r3
 80327da:	f104 001c 	add.w	r0, r4, #28
 80327de:	f009 fdcf 	bl	803c380 <_ZN8touchgfx8Gestures4tickEv>
 80327e2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80327e6:	b30b      	cbz	r3, 803282c <_ZN8touchgfx3HAL4tickEv+0x134>
 80327e8:	6920      	ldr	r0, [r4, #16]
 80327ea:	6803      	ldr	r3, [r0, #0]
 80327ec:	691b      	ldr	r3, [r3, #16]
 80327ee:	4798      	blx	r3
 80327f0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80327f2:	4606      	mov	r6, r0
 80327f4:	b903      	cbnz	r3, 80327f8 <_ZN8touchgfx3HAL4tickEv+0x100>
 80327f6:	6760      	str	r0, [r4, #116]	@ 0x74
 80327f8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80327fa:	4a1e      	ldr	r2, [pc, #120]	@ (8032874 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80327fc:	1af3      	subs	r3, r6, r3
 80327fe:	4293      	cmp	r3, r2
 8032800:	d914      	bls.n	803282c <_ZN8touchgfx3HAL4tickEv+0x134>
 8032802:	6920      	ldr	r0, [r4, #16]
 8032804:	6803      	ldr	r3, [r0, #0]
 8032806:	699b      	ldr	r3, [r3, #24]
 8032808:	4798      	blx	r3
 803280a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 803280c:	2264      	movs	r2, #100	@ 0x64
 803280e:	1af3      	subs	r3, r6, r3
 8032810:	fbb3 f3f2 	udiv	r3, r3, r2
 8032814:	fbb0 f0f3 	udiv	r0, r0, r3
 8032818:	2800      	cmp	r0, #0
 803281a:	dc1d      	bgt.n	8032858 <_ZN8touchgfx3HAL4tickEv+0x160>
 803281c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8032820:	6920      	ldr	r0, [r4, #16]
 8032822:	6803      	ldr	r3, [r0, #0]
 8032824:	2100      	movs	r1, #0
 8032826:	69db      	ldr	r3, [r3, #28]
 8032828:	4798      	blx	r3
 803282a:	6766      	str	r6, [r4, #116]	@ 0x74
 803282c:	f002 fa6e 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 8032830:	6803      	ldr	r3, [r0, #0]
 8032832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8032834:	4798      	blx	r3
 8032836:	6823      	ldr	r3, [r4, #0]
 8032838:	4620      	mov	r0, r4
 803283a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 803283e:	4798      	blx	r3
 8032840:	2001      	movs	r0, #1
 8032842:	f7f4 fcae 	bl	80271a2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8032846:	2300      	movs	r3, #0
 8032848:	702b      	strb	r3, [r5, #0]
 803284a:	b004      	add	sp, #16
 803284c:	bd70      	pop	{r4, r5, r6, pc}
 803284e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8032852:	4620      	mov	r0, r4
 8032854:	4798      	blx	r3
 8032856:	e7af      	b.n	80327b8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8032858:	2863      	cmp	r0, #99	@ 0x63
 803285a:	bfcb      	itete	gt
 803285c:	2300      	movgt	r3, #0
 803285e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8032862:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8032866:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 803286a:	e7d9      	b.n	8032820 <_ZN8touchgfx3HAL4tickEv+0x128>
 803286c:	2000b8e4 	.word	0x2000b8e4
 8032870:	2000b8e5 	.word	0x2000b8e5
 8032874:	05f5e100 	.word	0x05f5e100

08032878 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8032878:	b510      	push	{r4, lr}
 803287a:	4604      	mov	r4, r0
 803287c:	f7f4 fe50 	bl	8027520 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8032880:	6863      	ldr	r3, [r4, #4]
 8032882:	2200      	movs	r2, #0
 8032884:	729a      	strb	r2, [r3, #10]
 8032886:	bd10      	pop	{r4, pc}

08032888 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8032888:	65c1      	str	r1, [r0, #92]	@ 0x5c
 803288a:	301c      	adds	r0, #28
 803288c:	f009 bd76 	b.w	803c37c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08032890 <_ZN8touchgfx3HAL5touchEll>:
 8032890:	b530      	push	{r4, r5, lr}
 8032892:	b087      	sub	sp, #28
 8032894:	4604      	mov	r4, r0
 8032896:	a804      	add	r0, sp, #16
 8032898:	e9cd 1204 	strd	r1, r2, [sp, #16]
 803289c:	f002 f85c 	bl	8034958 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80328a0:	9b04      	ldr	r3, [sp, #16]
 80328a2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80328a6:	a906      	add	r1, sp, #24
 80328a8:	9b05      	ldr	r3, [sp, #20]
 80328aa:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80328ae:	a803      	add	r0, sp, #12
 80328b0:	f002 f8a4 	bl	80349fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80328b4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80328b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80328bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80328c0:	f104 001c 	add.w	r0, r4, #28
 80328c4:	b189      	cbz	r1, 80328ea <_ZN8touchgfx3HAL5touchEll+0x5a>
 80328c6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80328ca:	9300      	str	r3, [sp, #0]
 80328cc:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80328d0:	4613      	mov	r3, r2
 80328d2:	462a      	mov	r2, r5
 80328d4:	f009 fd62 	bl	803c39c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80328d8:	b128      	cbz	r0, 80328e6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80328da:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80328de:	6623      	str	r3, [r4, #96]	@ 0x60
 80328e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80328e4:	6663      	str	r3, [r4, #100]	@ 0x64
 80328e6:	b007      	add	sp, #28
 80328e8:	bd30      	pop	{r4, r5, pc}
 80328ea:	f009 fd97 	bl	803c41c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80328ee:	2301      	movs	r3, #1
 80328f0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80328f4:	e7f1      	b.n	80328da <_ZN8touchgfx3HAL5touchEll+0x4a>

080328f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80328f6:	b510      	push	{r4, lr}
 80328f8:	2b00      	cmp	r3, #0
 80328fa:	d046      	beq.n	803298a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80328fc:	ea81 0002 	eor.w	r0, r1, r2
 8032900:	07c4      	lsls	r4, r0, #31
 8032902:	d508      	bpl.n	8032916 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8032904:	440b      	add	r3, r1
 8032906:	3a01      	subs	r2, #1
 8032908:	428b      	cmp	r3, r1
 803290a:	d93e      	bls.n	803298a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 803290c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8032910:	f801 0b01 	strb.w	r0, [r1], #1
 8032914:	e7f8      	b.n	8032908 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8032916:	07d0      	lsls	r0, r2, #31
 8032918:	bf42      	ittt	mi
 803291a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 803291e:	f801 0b01 	strbmi.w	r0, [r1], #1
 8032922:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8032926:	2b01      	cmp	r3, #1
 8032928:	d911      	bls.n	803294e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 803292a:	ea81 0402 	eor.w	r4, r1, r2
 803292e:	07a4      	lsls	r4, r4, #30
 8032930:	4610      	mov	r0, r2
 8032932:	d022      	beq.n	803297a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8032934:	f023 0401 	bic.w	r4, r3, #1
 8032938:	440c      	add	r4, r1
 803293a:	428c      	cmp	r4, r1
 803293c:	4602      	mov	r2, r0
 803293e:	d904      	bls.n	803294a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8032940:	8812      	ldrh	r2, [r2, #0]
 8032942:	f821 2b02 	strh.w	r2, [r1], #2
 8032946:	3002      	adds	r0, #2
 8032948:	e7f7      	b.n	803293a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 803294a:	f003 0301 	and.w	r3, r3, #1
 803294e:	f023 0003 	bic.w	r0, r3, #3
 8032952:	4408      	add	r0, r1
 8032954:	4288      	cmp	r0, r1
 8032956:	4614      	mov	r4, r2
 8032958:	d904      	bls.n	8032964 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 803295a:	6824      	ldr	r4, [r4, #0]
 803295c:	f841 4b04 	str.w	r4, [r1], #4
 8032960:	3204      	adds	r2, #4
 8032962:	e7f7      	b.n	8032954 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8032964:	f003 0303 	and.w	r3, r3, #3
 8032968:	440b      	add	r3, r1
 803296a:	3a01      	subs	r2, #1
 803296c:	428b      	cmp	r3, r1
 803296e:	d90c      	bls.n	803298a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8032970:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8032974:	f801 0b01 	strb.w	r0, [r1], #1
 8032978:	e7f8      	b.n	803296c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 803297a:	0790      	lsls	r0, r2, #30
 803297c:	d0e7      	beq.n	803294e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 803297e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8032982:	f821 0b02 	strh.w	r0, [r1], #2
 8032986:	3b02      	subs	r3, #2
 8032988:	e7e1      	b.n	803294e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 803298a:	2001      	movs	r0, #1
 803298c:	bd10      	pop	{r4, pc}

0803298e <_ZN8touchgfx3HAL7noTouchEv>:
 803298e:	b510      	push	{r4, lr}
 8032990:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8032994:	4604      	mov	r4, r0
 8032996:	b153      	cbz	r3, 80329ae <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8032998:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 803299c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80329a0:	2101      	movs	r1, #1
 80329a2:	301c      	adds	r0, #28
 80329a4:	f009 fd3a 	bl	803c41c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80329a8:	2300      	movs	r3, #0
 80329aa:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80329ae:	bd10      	pop	{r4, pc}

080329b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80329b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80329b4:	b085      	sub	sp, #20
 80329b6:	ad04      	add	r5, sp, #16
 80329b8:	4604      	mov	r4, r0
 80329ba:	2000      	movs	r0, #0
 80329bc:	f845 0d04 	str.w	r0, [r5, #-4]!
 80329c0:	69a0      	ldr	r0, [r4, #24]
 80329c2:	6806      	ldr	r6, [r0, #0]
 80329c4:	9501      	str	r5, [sp, #4]
 80329c6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80329ca:	9500      	str	r5, [sp, #0]
 80329cc:	6835      	ldr	r5, [r6, #0]
 80329ce:	4699      	mov	r9, r3
 80329d0:	460f      	mov	r7, r1
 80329d2:	4690      	mov	r8, r2
 80329d4:	47a8      	blx	r5
 80329d6:	4d10      	ldr	r5, [pc, #64]	@ (8032a18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80329d8:	4606      	mov	r6, r0
 80329da:	f8a5 9000 	strh.w	r9, [r5]
 80329de:	f7f5 fb0d 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 80329e2:	6803      	ldr	r3, [r0, #0]
 80329e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80329e6:	4798      	blx	r3
 80329e8:	b128      	cbz	r0, 80329f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80329ea:	2801      	cmp	r0, #1
 80329ec:	d00b      	beq.n	8032a06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80329ee:	4630      	mov	r0, r6
 80329f0:	b005      	add	sp, #20
 80329f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80329f6:	882b      	ldrh	r3, [r5, #0]
 80329f8:	fb08 7203 	mla	r2, r8, r3, r7
 80329fc:	9b03      	ldr	r3, [sp, #12]
 80329fe:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8032a02:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8032a04:	e7f3      	b.n	80329ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8032a06:	882a      	ldrh	r2, [r5, #0]
 8032a08:	9b03      	ldr	r3, [sp, #12]
 8032a0a:	fb08 7202 	mla	r2, r8, r2, r7
 8032a0e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8032a12:	1a9a      	subs	r2, r3, r2
 8032a14:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8032a16:	e7ea      	b.n	80329ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8032a18:	2000b8da 	.word	0x2000b8da

08032a1c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8032a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8032a1e:	b08b      	sub	sp, #44	@ 0x2c
 8032a20:	4617      	mov	r7, r2
 8032a22:	4604      	mov	r4, r0
 8032a24:	460e      	mov	r6, r1
 8032a26:	461d      	mov	r5, r3
 8032a28:	f7f5 fae8 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8032a2c:	6803      	ldr	r3, [r0, #0]
 8032a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032a30:	4798      	blx	r3
 8032a32:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8032a36:	9007      	str	r0, [sp, #28]
 8032a38:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8032a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8032a74 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8032a3e:	6822      	ldr	r2, [r4, #0]
 8032a40:	881b      	ldrh	r3, [r3, #0]
 8032a42:	9306      	str	r3, [sp, #24]
 8032a44:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8032a48:	9305      	str	r3, [sp, #20]
 8032a4a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8032a4e:	9304      	str	r3, [sp, #16]
 8032a50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8032a54:	9303      	str	r3, [sp, #12]
 8032a56:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8032a5a:	9302      	str	r3, [sp, #8]
 8032a5c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8032a60:	e9cd 5300 	strd	r5, r3, [sp]
 8032a64:	4631      	mov	r1, r6
 8032a66:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8032a68:	463b      	mov	r3, r7
 8032a6a:	2200      	movs	r2, #0
 8032a6c:	4620      	mov	r0, r4
 8032a6e:	47a8      	blx	r5
 8032a70:	b00b      	add	sp, #44	@ 0x2c
 8032a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8032a74:	2000b8da 	.word	0x2000b8da

08032a78 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8032a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8032a7c:	4698      	mov	r8, r3
 8032a7e:	6803      	ldr	r3, [r0, #0]
 8032a80:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8032a82:	4b15      	ldr	r3, [pc, #84]	@ (8032ad8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8032a84:	b08b      	sub	sp, #44	@ 0x2c
 8032a86:	4617      	mov	r7, r2
 8032a88:	f8b3 9000 	ldrh.w	r9, [r3]
 8032a8c:	460e      	mov	r6, r1
 8032a8e:	4604      	mov	r4, r0
 8032a90:	f7f5 fab4 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8032a94:	6803      	ldr	r3, [r0, #0]
 8032a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032a98:	4798      	blx	r3
 8032a9a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8032a9e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8032aa2:	2302      	movs	r3, #2
 8032aa4:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8032aa8:	2301      	movs	r3, #1
 8032aaa:	9305      	str	r3, [sp, #20]
 8032aac:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8032ab0:	9304      	str	r3, [sp, #16]
 8032ab2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8032ab6:	9303      	str	r3, [sp, #12]
 8032ab8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8032abc:	9302      	str	r3, [sp, #8]
 8032abe:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8032ac2:	2200      	movs	r2, #0
 8032ac4:	e9cd 8300 	strd	r8, r3, [sp]
 8032ac8:	4631      	mov	r1, r6
 8032aca:	463b      	mov	r3, r7
 8032acc:	4620      	mov	r0, r4
 8032ace:	47a8      	blx	r5
 8032ad0:	b00b      	add	sp, #44	@ 0x2c
 8032ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8032ad6:	bf00      	nop
 8032ad8:	2000b8da 	.word	0x2000b8da

08032adc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8032adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8032ae0:	4698      	mov	r8, r3
 8032ae2:	6803      	ldr	r3, [r0, #0]
 8032ae4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8032ae6:	4b11      	ldr	r3, [pc, #68]	@ (8032b2c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8032ae8:	b087      	sub	sp, #28
 8032aea:	f8b3 9000 	ldrh.w	r9, [r3]
 8032aee:	460e      	mov	r6, r1
 8032af0:	4617      	mov	r7, r2
 8032af2:	4604      	mov	r4, r0
 8032af4:	f7f5 fa82 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8032af8:	6803      	ldr	r3, [r0, #0]
 8032afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032afc:	4798      	blx	r3
 8032afe:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8032b02:	f8cd 900c 	str.w	r9, [sp, #12]
 8032b06:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8032b0a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8032b0e:	9302      	str	r3, [sp, #8]
 8032b10:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8032b14:	9301      	str	r3, [sp, #4]
 8032b16:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8032b1a:	9300      	str	r3, [sp, #0]
 8032b1c:	463a      	mov	r2, r7
 8032b1e:	4643      	mov	r3, r8
 8032b20:	4631      	mov	r1, r6
 8032b22:	4620      	mov	r0, r4
 8032b24:	47a8      	blx	r5
 8032b26:	b007      	add	sp, #28
 8032b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8032b2c:	2000b8da 	.word	0x2000b8da

08032b30 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8032b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032b34:	4604      	mov	r4, r0
 8032b36:	b08f      	sub	sp, #60	@ 0x3c
 8032b38:	4610      	mov	r0, r2
 8032b3a:	460d      	mov	r5, r1
 8032b3c:	4691      	mov	r9, r2
 8032b3e:	461e      	mov	r6, r3
 8032b40:	f005 f9bc 	bl	8037ebc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8032b44:	2800      	cmp	r0, #0
 8032b46:	f000 809d 	beq.w	8032c84 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8032b4a:	6823      	ldr	r3, [r4, #0]
 8032b4c:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8032ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8032b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8032b52:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8032cec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8032b56:	4f61      	ldr	r7, [pc, #388]	@ (8032cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8032b58:	4620      	mov	r0, r4
 8032b5a:	4798      	blx	r3
 8032b5c:	6823      	ldr	r3, [r4, #0]
 8032b5e:	4620      	mov	r0, r4
 8032b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032b62:	4798      	blx	r3
 8032b64:	f8bb 3000 	ldrh.w	r3, [fp]
 8032b68:	9301      	str	r3, [sp, #4]
 8032b6a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8032b6e:	f8ba 3000 	ldrh.w	r3, [sl]
 8032b72:	9302      	str	r3, [sp, #8]
 8032b74:	883b      	ldrh	r3, [r7, #0]
 8032b76:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8032b7a:	9303      	str	r3, [sp, #12]
 8032b7c:	4b58      	ldr	r3, [pc, #352]	@ (8032ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8032b7e:	9305      	str	r3, [sp, #20]
 8032b80:	881a      	ldrh	r2, [r3, #0]
 8032b82:	9204      	str	r2, [sp, #16]
 8032b84:	4640      	mov	r0, r8
 8032b86:	f005 fadd 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8032b8a:	8038      	strh	r0, [r7, #0]
 8032b8c:	4640      	mov	r0, r8
 8032b8e:	f005 fb0d 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8032b92:	9b05      	ldr	r3, [sp, #20]
 8032b94:	b280      	uxth	r0, r0
 8032b96:	8018      	strh	r0, [r3, #0]
 8032b98:	4b52      	ldr	r3, [pc, #328]	@ (8032ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8032b9a:	781b      	ldrb	r3, [r3, #0]
 8032b9c:	2b00      	cmp	r3, #0
 8032b9e:	d174      	bne.n	8032c8a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8032ba0:	883b      	ldrh	r3, [r7, #0]
 8032ba2:	f8ab 3000 	strh.w	r3, [fp]
 8032ba6:	f8aa 0000 	strh.w	r0, [sl]
 8032baa:	4648      	mov	r0, r9
 8032bac:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8032bb0:	f005 f984 	bl	8037ebc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8032bb4:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8032bb8:	2200      	movs	r2, #0
 8032bba:	4611      	mov	r1, r2
 8032bbc:	4628      	mov	r0, r5
 8032bbe:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8032bc2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8032bc6:	f7f6 fa9b 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8032bca:	2301      	movs	r3, #1
 8032bcc:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8032bd0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8032bd4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8032bd8:	2b00      	cmp	r3, #0
 8032bda:	dd5c      	ble.n	8032c96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8032bdc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8032be0:	2b00      	cmp	r3, #0
 8032be2:	dd58      	ble.n	8032c96 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8032be4:	462a      	mov	r2, r5
 8032be6:	ab0a      	add	r3, sp, #40	@ 0x28
 8032be8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8032bec:	6851      	ldr	r1, [r2, #4]
 8032bee:	c303      	stmia	r3!, {r0, r1}
 8032bf0:	4631      	mov	r1, r6
 8032bf2:	a80a      	add	r0, sp, #40	@ 0x28
 8032bf4:	f7fd fa32 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8032bf8:	4b38      	ldr	r3, [pc, #224]	@ (8032cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8032bfa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8032bfe:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8032c02:	2100      	movs	r1, #0
 8032c04:	aa0a      	add	r2, sp, #40	@ 0x28
 8032c06:	4b36      	ldr	r3, [pc, #216]	@ (8032ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8032c08:	910c      	str	r1, [sp, #48]	@ 0x30
 8032c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8032c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8032c12:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8032c16:	ab08      	add	r3, sp, #32
 8032c18:	e883 0003 	stmia.w	r3, {r0, r1}
 8032c1c:	4618      	mov	r0, r3
 8032c1e:	a90c      	add	r1, sp, #48	@ 0x30
 8032c20:	f7fd fa1c 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8032c24:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8032c26:	2b00      	cmp	r3, #0
 8032c28:	d13c      	bne.n	8032ca4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8032c2a:	2000      	movs	r0, #0
 8032c2c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8032c30:	2600      	movs	r6, #0
 8032c32:	682a      	ldr	r2, [r5, #0]
 8032c34:	696b      	ldr	r3, [r5, #20]
 8032c36:	616e      	str	r6, [r5, #20]
 8032c38:	9305      	str	r3, [sp, #20]
 8032c3a:	6892      	ldr	r2, [r2, #8]
 8032c3c:	a908      	add	r1, sp, #32
 8032c3e:	4628      	mov	r0, r5
 8032c40:	4790      	blx	r2
 8032c42:	9b05      	ldr	r3, [sp, #20]
 8032c44:	616b      	str	r3, [r5, #20]
 8032c46:	4652      	mov	r2, sl
 8032c48:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8032c4c:	4649      	mov	r1, r9
 8032c4e:	4628      	mov	r0, r5
 8032c50:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8032c54:	f7f6 fa54 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8032c58:	4b23      	ldr	r3, [pc, #140]	@ (8032ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8032c5a:	9a01      	ldr	r2, [sp, #4]
 8032c5c:	801a      	strh	r2, [r3, #0]
 8032c5e:	4b23      	ldr	r3, [pc, #140]	@ (8032cec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8032c60:	9a02      	ldr	r2, [sp, #8]
 8032c62:	801a      	strh	r2, [r3, #0]
 8032c64:	4b1d      	ldr	r3, [pc, #116]	@ (8032cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8032c66:	9a03      	ldr	r2, [sp, #12]
 8032c68:	801a      	strh	r2, [r3, #0]
 8032c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8032ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8032c6c:	9a04      	ldr	r2, [sp, #16]
 8032c6e:	801a      	strh	r2, [r3, #0]
 8032c70:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8032c74:	6823      	ldr	r3, [r4, #0]
 8032c76:	4620      	mov	r0, r4
 8032c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8032c7a:	4798      	blx	r3
 8032c7c:	6823      	ldr	r3, [r4, #0]
 8032c7e:	4620      	mov	r0, r4
 8032c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032c82:	4798      	blx	r3
 8032c84:	b00f      	add	sp, #60	@ 0x3c
 8032c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032c8a:	883b      	ldrh	r3, [r7, #0]
 8032c8c:	f8ab 0000 	strh.w	r0, [fp]
 8032c90:	f8aa 3000 	strh.w	r3, [sl]
 8032c94:	e789      	b.n	8032baa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8032c96:	462a      	mov	r2, r5
 8032c98:	ab0a      	add	r3, sp, #40	@ 0x28
 8032c9a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8032c9e:	6851      	ldr	r1, [r2, #4]
 8032ca0:	c303      	stmia	r3!, {r0, r1}
 8032ca2:	e7a9      	b.n	8032bf8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8032ca4:	a807      	add	r0, sp, #28
 8032ca6:	f005 fbbd 	bl	8038424 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8032caa:	4606      	mov	r6, r0
 8032cac:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8032cae:	6803      	ldr	r3, [r0, #0]
 8032cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032cb2:	4798      	blx	r3
 8032cb4:	4286      	cmp	r6, r0
 8032cb6:	d1b8      	bne.n	8032c2a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8032cb8:	f7f5 f9a0 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8032cbc:	6803      	ldr	r3, [r0, #0]
 8032cbe:	4606      	mov	r6, r0
 8032cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8032cc2:	9305      	str	r3, [sp, #20]
 8032cc4:	a807      	add	r0, sp, #28
 8032cc6:	f005 fbad 	bl	8038424 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8032cca:	9b05      	ldr	r3, [sp, #20]
 8032ccc:	4601      	mov	r1, r0
 8032cce:	4630      	mov	r0, r6
 8032cd0:	4798      	blx	r3
 8032cd2:	f080 0001 	eor.w	r0, r0, #1
 8032cd6:	b2c0      	uxtb	r0, r0
 8032cd8:	e7a8      	b.n	8032c2c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8032cda:	bf00      	nop
 8032cdc:	2000b8d4 	.word	0x2000b8d4
 8032ce0:	2000b8d6 	.word	0x2000b8d6
 8032ce4:	2000b8d8 	.word	0x2000b8d8
 8032ce8:	2000b8da 	.word	0x2000b8da
 8032cec:	2000b8dc 	.word	0x2000b8dc

08032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8032cf0:	b510      	push	{r4, lr}
 8032cf2:	4b07      	ldr	r3, [pc, #28]	@ (8032d10 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8032cf4:	781b      	ldrb	r3, [r3, #0]
 8032cf6:	4604      	mov	r4, r0
 8032cf8:	b13b      	cbz	r3, 8032d0a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8032cfa:	6803      	ldr	r3, [r0, #0]
 8032cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8032cfe:	4798      	blx	r3
 8032d00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8032d02:	4283      	cmp	r3, r0
 8032d04:	d101      	bne.n	8032d0a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8032d06:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8032d08:	bd10      	pop	{r4, pc}
 8032d0a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8032d0c:	e7fc      	b.n	8032d08 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8032d0e:	bf00      	nop
 8032d10:	2000b8de 	.word	0x2000b8de

08032d14 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8032d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032d18:	b08a      	sub	sp, #40	@ 0x28
 8032d1a:	461d      	mov	r5, r3
 8032d1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8032d20:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8032d24:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8032d28:	f8ad 3018 	strh.w	r3, [sp, #24]
 8032d2c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8032d30:	f8ad 301a 	strh.w	r3, [sp, #26]
 8032d34:	2400      	movs	r4, #0
 8032d36:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8032d3a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8032d3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8032d42:	4690      	mov	r8, r2
 8032d44:	4607      	mov	r7, r0
 8032d46:	9404      	str	r4, [sp, #16]
 8032d48:	f88d 4020 	strb.w	r4, [sp, #32]
 8032d4c:	f7ff ffd0 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8032d50:	fb06 8505 	mla	r5, r6, r5, r8
 8032d54:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8032d58:	6878      	ldr	r0, [r7, #4]
 8032d5a:	9505      	str	r5, [sp, #20]
 8032d5c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8032d60:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8032d64:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8032d68:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8032d6c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8032d70:	6803      	ldr	r3, [r0, #0]
 8032d72:	a901      	add	r1, sp, #4
 8032d74:	685b      	ldr	r3, [r3, #4]
 8032d76:	4798      	blx	r3
 8032d78:	b00a      	add	sp, #40	@ 0x28
 8032d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08032d7e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8032d7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8032d82:	b08b      	sub	sp, #44	@ 0x2c
 8032d84:	2400      	movs	r4, #0
 8032d86:	461d      	mov	r5, r3
 8032d88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8032d8c:	4688      	mov	r8, r1
 8032d8e:	4691      	mov	r9, r2
 8032d90:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8032d94:	9404      	str	r4, [sp, #16]
 8032d96:	4607      	mov	r7, r0
 8032d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8032d9c:	f7ff ffa8 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8032da0:	fb06 9505 	mla	r5, r6, r5, r9
 8032da4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8032da8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8032dac:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8032db0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8032db4:	6878      	ldr	r0, [r7, #4]
 8032db6:	9505      	str	r5, [sp, #20]
 8032db8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8032dbc:	f8ad 401c 	strh.w	r4, [sp, #28]
 8032dc0:	f8ad 601e 	strh.w	r6, [sp, #30]
 8032dc4:	f8cd 8010 	str.w	r8, [sp, #16]
 8032dc8:	f8ad 4020 	strh.w	r4, [sp, #32]
 8032dcc:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8032dd0:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8032dd4:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8032dd8:	6803      	ldr	r3, [r0, #0]
 8032dda:	a901      	add	r1, sp, #4
 8032ddc:	685b      	ldr	r3, [r3, #4]
 8032dde:	4798      	blx	r3
 8032de0:	b00b      	add	sp, #44	@ 0x2c
 8032de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08032de8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8032de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032dec:	b08a      	sub	sp, #40	@ 0x28
 8032dee:	4698      	mov	r8, r3
 8032df0:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8032df4:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8032df8:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8032dfc:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8032e00:	2300      	movs	r3, #0
 8032e02:	2d0b      	cmp	r5, #11
 8032e04:	4606      	mov	r6, r0
 8032e06:	9304      	str	r3, [sp, #16]
 8032e08:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8032e0c:	d138      	bne.n	8032e80 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8032e0e:	2380      	movs	r3, #128	@ 0x80
 8032e10:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8032e14:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8032e18:	f8ad 3018 	strh.w	r3, [sp, #24]
 8032e1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8032e20:	f8ad 301a 	strh.w	r3, [sp, #26]
 8032e24:	f88d 0020 	strb.w	r0, [sp, #32]
 8032e28:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8032e2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8032e30:	4630      	mov	r0, r6
 8032e32:	9203      	str	r2, [sp, #12]
 8032e34:	f7ff ff5c 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8032e38:	2c0b      	cmp	r4, #11
 8032e3a:	bf98      	it	ls
 8032e3c:	4b1b      	ldrls	r3, [pc, #108]	@ (8032eac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8032e3e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8032e42:	bf98      	it	ls
 8032e44:	5d19      	ldrbls	r1, [r3, r4]
 8032e46:	f8ad 701e 	strh.w	r7, [sp, #30]
 8032e4a:	bf88      	it	hi
 8032e4c:	2100      	movhi	r1, #0
 8032e4e:	fb02 8307 	mla	r3, r2, r7, r8
 8032e52:	10c9      	asrs	r1, r1, #3
 8032e54:	fb01 0003 	mla	r0, r1, r3, r0
 8032e58:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8032e5c:	9005      	str	r0, [sp, #20]
 8032e5e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8032e62:	6870      	ldr	r0, [r6, #4]
 8032e64:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8032e68:	2300      	movs	r3, #0
 8032e6a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8032e6e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8032e72:	6803      	ldr	r3, [r0, #0]
 8032e74:	a901      	add	r1, sp, #4
 8032e76:	685b      	ldr	r3, [r3, #4]
 8032e78:	4798      	blx	r3
 8032e7a:	b00a      	add	sp, #40	@ 0x28
 8032e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032e80:	2d02      	cmp	r5, #2
 8032e82:	d109      	bne.n	8032e98 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8032e84:	28ff      	cmp	r0, #255	@ 0xff
 8032e86:	d105      	bne.n	8032e94 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8032e88:	f1bc 0f00 	cmp.w	ip, #0
 8032e8c:	bf14      	ite	ne
 8032e8e:	2340      	movne	r3, #64	@ 0x40
 8032e90:	2320      	moveq	r3, #32
 8032e92:	e7bd      	b.n	8032e10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8032e94:	2340      	movs	r3, #64	@ 0x40
 8032e96:	e7bb      	b.n	8032e10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8032e98:	28ff      	cmp	r0, #255	@ 0xff
 8032e9a:	d105      	bne.n	8032ea8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8032e9c:	f1bc 0f00 	cmp.w	ip, #0
 8032ea0:	bf14      	ite	ne
 8032ea2:	2304      	movne	r3, #4
 8032ea4:	2301      	moveq	r3, #1
 8032ea6:	e7b3      	b.n	8032e10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8032ea8:	2304      	movs	r3, #4
 8032eaa:	e7b1      	b.n	8032e10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8032eac:	080438a0 	.word	0x080438a0

08032eb0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8032eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8032eb4:	b08b      	sub	sp, #44	@ 0x2c
 8032eb6:	461d      	mov	r5, r3
 8032eb8:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8032ebc:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8032ec0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8032ec4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8032ec8:	bf14      	ite	ne
 8032eca:	2308      	movne	r3, #8
 8032ecc:	2302      	moveq	r3, #2
 8032ece:	2400      	movs	r4, #0
 8032ed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8032ed4:	4688      	mov	r8, r1
 8032ed6:	4693      	mov	fp, r2
 8032ed8:	9404      	str	r4, [sp, #16]
 8032eda:	4607      	mov	r7, r0
 8032edc:	f7ff ff08 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8032ee0:	2e0b      	cmp	r6, #11
 8032ee2:	bf98      	it	ls
 8032ee4:	4b15      	ldrls	r3, [pc, #84]	@ (8032f3c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8032ee6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8032eea:	bf98      	it	ls
 8032eec:	5d9c      	ldrbls	r4, [r3, r6]
 8032eee:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8032ef2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8032ef6:	fb05 b50a 	mla	r5, r5, sl, fp
 8032efa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8032efe:	f8ad 301a 	strh.w	r3, [sp, #26]
 8032f02:	10e4      	asrs	r4, r4, #3
 8032f04:	fb04 0405 	mla	r4, r4, r5, r0
 8032f08:	2300      	movs	r3, #0
 8032f0a:	6878      	ldr	r0, [r7, #4]
 8032f0c:	9405      	str	r4, [sp, #20]
 8032f0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8032f12:	f8ad a01e 	strh.w	sl, [sp, #30]
 8032f16:	f8cd 8010 	str.w	r8, [sp, #16]
 8032f1a:	f88d 9020 	strb.w	r9, [sp, #32]
 8032f1e:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8032f22:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8032f26:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8032f2a:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8032f2e:	6803      	ldr	r3, [r0, #0]
 8032f30:	a901      	add	r1, sp, #4
 8032f32:	685b      	ldr	r3, [r3, #4]
 8032f34:	4798      	blx	r3
 8032f36:	b00b      	add	sp, #44	@ 0x2c
 8032f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8032f3c:	080438a0 	.word	0x080438a0

08032f40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8032f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8032f44:	461e      	mov	r6, r3
 8032f46:	4b0a      	ldr	r3, [pc, #40]	@ (8032f70 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8032f48:	460f      	mov	r7, r1
 8032f4a:	881d      	ldrh	r5, [r3, #0]
 8032f4c:	4690      	mov	r8, r2
 8032f4e:	f7f5 f855 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8032f52:	6803      	ldr	r3, [r0, #0]
 8032f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032f56:	4798      	blx	r3
 8032f58:	280b      	cmp	r0, #11
 8032f5a:	bf9a      	itte	ls
 8032f5c:	4b05      	ldrls	r3, [pc, #20]	@ (8032f74 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8032f5e:	5c1c      	ldrbls	r4, [r3, r0]
 8032f60:	2400      	movhi	r4, #0
 8032f62:	fb08 7005 	mla	r0, r8, r5, r7
 8032f66:	10e4      	asrs	r4, r4, #3
 8032f68:	fb04 6000 	mla	r0, r4, r0, r6
 8032f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8032f70:	2000b8da 	.word	0x2000b8da
 8032f74:	080438a0 	.word	0x080438a0

08032f78 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8032f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8032f7a:	b08b      	sub	sp, #44	@ 0x2c
 8032f7c:	461f      	mov	r7, r3
 8032f7e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8032f82:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8032f86:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8032f8a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8032f8e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8032f92:	f8ad 301a 	strh.w	r3, [sp, #26]
 8032f96:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8032f9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8032f9e:	2500      	movs	r5, #0
 8032fa0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8032fa4:	f88d 3020 	strb.w	r3, [sp, #32]
 8032fa8:	4604      	mov	r4, r0
 8032faa:	4616      	mov	r6, r2
 8032fac:	9504      	str	r5, [sp, #16]
 8032fae:	f7ff fe9f 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8032fb2:	463a      	mov	r2, r7
 8032fb4:	4631      	mov	r1, r6
 8032fb6:	4603      	mov	r3, r0
 8032fb8:	4620      	mov	r0, r4
 8032fba:	f7ff ffc1 	bl	8032f40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8032fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8032ff8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8032fc0:	9005      	str	r0, [sp, #20]
 8032fc2:	881b      	ldrh	r3, [r3, #0]
 8032fc4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8032fc8:	f7f5 f818 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8032fcc:	6803      	ldr	r3, [r0, #0]
 8032fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8032fd0:	4798      	blx	r3
 8032fd2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8032fd4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8032fd8:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8032fdc:	9304      	str	r3, [sp, #16]
 8032fde:	6860      	ldr	r0, [r4, #4]
 8032fe0:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8032fe4:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8032fe8:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8032fec:	6803      	ldr	r3, [r0, #0]
 8032fee:	a901      	add	r1, sp, #4
 8032ff0:	685b      	ldr	r3, [r3, #4]
 8032ff2:	4798      	blx	r3
 8032ff4:	b00b      	add	sp, #44	@ 0x2c
 8032ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8032ff8:	2000b8da 	.word	0x2000b8da

08032ffc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8032ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8032ffe:	b08d      	sub	sp, #52	@ 0x34
 8033000:	466b      	mov	r3, sp
 8033002:	e883 0006 	stmia.w	r3, {r1, r2}
 8033006:	2300      	movs	r3, #0
 8033008:	9306      	str	r3, [sp, #24]
 803300a:	6803      	ldr	r3, [r0, #0]
 803300c:	f8bd 6000 	ldrh.w	r6, [sp]
 8033010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8033012:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8033016:	2501      	movs	r5, #1
 8033018:	9503      	str	r5, [sp, #12]
 803301a:	4604      	mov	r4, r0
 803301c:	4798      	blx	r3
 803301e:	463a      	mov	r2, r7
 8033020:	4631      	mov	r1, r6
 8033022:	4603      	mov	r3, r0
 8033024:	4620      	mov	r0, r4
 8033026:	f7ff ff8b 	bl	8032f40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 803302a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 803302c:	9307      	str	r3, [sp, #28]
 803302e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8033032:	f8ad 3020 	strh.w	r3, [sp, #32]
 8033036:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 803303a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 803303e:	4b0f      	ldr	r3, [pc, #60]	@ (803307c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8033040:	9004      	str	r0, [sp, #16]
 8033042:	881b      	ldrh	r3, [r3, #0]
 8033044:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8033048:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 803304c:	f7f4 ffd6 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8033050:	6803      	ldr	r3, [r0, #0]
 8033052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8033054:	4798      	blx	r3
 8033056:	23ff      	movs	r3, #255	@ 0xff
 8033058:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 803305c:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8033060:	6860      	ldr	r0, [r4, #4]
 8033062:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8033066:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 803306a:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 803306e:	6803      	ldr	r3, [r0, #0]
 8033070:	a903      	add	r1, sp, #12
 8033072:	685b      	ldr	r3, [r3, #4]
 8033074:	4798      	blx	r3
 8033076:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8033078:	b00d      	add	sp, #52	@ 0x34
 803307a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803307c:	2000b8da 	.word	0x2000b8da

08033080 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8033080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8033084:	b08c      	sub	sp, #48	@ 0x30
 8033086:	461e      	mov	r6, r3
 8033088:	466d      	mov	r5, sp
 803308a:	2300      	movs	r3, #0
 803308c:	e885 0006 	stmia.w	r5, {r1, r2}
 8033090:	9306      	str	r3, [sp, #24]
 8033092:	6803      	ldr	r3, [r0, #0]
 8033094:	f8bd 7000 	ldrh.w	r7, [sp]
 8033098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803309a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 803309e:	2501      	movs	r5, #1
 80330a0:	9503      	str	r5, [sp, #12]
 80330a2:	4604      	mov	r4, r0
 80330a4:	4798      	blx	r3
 80330a6:	4642      	mov	r2, r8
 80330a8:	4639      	mov	r1, r7
 80330aa:	4603      	mov	r3, r0
 80330ac:	4620      	mov	r0, r4
 80330ae:	f7ff ff47 	bl	8032f40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80330b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80330b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80330ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80330be:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80330c2:	4b11      	ldr	r3, [pc, #68]	@ (8033108 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80330c4:	9004      	str	r0, [sp, #16]
 80330c6:	881b      	ldrh	r3, [r3, #0]
 80330c8:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80330cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80330ce:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80330d2:	9607      	str	r6, [sp, #28]
 80330d4:	f7f4 ff92 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 80330d8:	6803      	ldr	r3, [r0, #0]
 80330da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80330dc:	4798      	blx	r3
 80330de:	23ff      	movs	r3, #255	@ 0xff
 80330e0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80330e4:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80330e8:	6860      	ldr	r0, [r4, #4]
 80330ea:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80330ee:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80330f2:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80330f6:	6803      	ldr	r3, [r0, #0]
 80330f8:	a903      	add	r1, sp, #12
 80330fa:	685b      	ldr	r3, [r3, #4]
 80330fc:	4798      	blx	r3
 80330fe:	4630      	mov	r0, r6
 8033100:	b00c      	add	sp, #48	@ 0x30
 8033102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8033106:	bf00      	nop
 8033108:	2000b8da 	.word	0x2000b8da

0803310c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 803310c:	b5f0      	push	{r4, r5, r6, r7, lr}
 803310e:	b085      	sub	sp, #20
 8033110:	ac02      	add	r4, sp, #8
 8033112:	e884 0006 	stmia.w	r4, {r1, r2}
 8033116:	4605      	mov	r5, r0
 8033118:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 803311c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8033120:	f7ff fde6 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8033124:	463a      	mov	r2, r7
 8033126:	4603      	mov	r3, r0
 8033128:	4631      	mov	r1, r6
 803312a:	4628      	mov	r0, r5
 803312c:	f7ff ff08 	bl	8032f40 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8033130:	4a05      	ldr	r2, [pc, #20]	@ (8033148 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8033132:	682b      	ldr	r3, [r5, #0]
 8033134:	8812      	ldrh	r2, [r2, #0]
 8033136:	9200      	str	r2, [sp, #0]
 8033138:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 803313a:	e894 0006 	ldmia.w	r4, {r1, r2}
 803313e:	4603      	mov	r3, r0
 8033140:	4628      	mov	r0, r5
 8033142:	47b0      	blx	r6
 8033144:	b005      	add	sp, #20
 8033146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8033148:	2000b8da 	.word	0x2000b8da

0803314c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 803314c:	b570      	push	{r4, r5, r6, lr}
 803314e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8033152:	4604      	mov	r4, r0
 8033154:	b19b      	cbz	r3, 803317e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8033156:	2002      	movs	r0, #2
 8033158:	f7f4 f824 	bl	80271a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 803315c:	2300      	movs	r3, #0
 803315e:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8033162:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8033166:	6823      	ldr	r3, [r4, #0]
 8033168:	4620      	mov	r0, r4
 803316a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 803316e:	f7ff fdbf 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8033172:	462b      	mov	r3, r5
 8033174:	4601      	mov	r1, r0
 8033176:	4620      	mov	r0, r4
 8033178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 803317c:	4718      	bx	r3
 803317e:	bd70      	pop	{r4, r5, r6, pc}

08033180 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8033180:	b538      	push	{r3, r4, r5, lr}
 8033182:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8033186:	428b      	cmp	r3, r1
 8033188:	4604      	mov	r4, r0
 803318a:	460d      	mov	r5, r1
 803318c:	d006      	beq.n	803319c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 803318e:	6803      	ldr	r3, [r0, #0]
 8033190:	b929      	cbnz	r1, 803319e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8033192:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8033196:	4798      	blx	r3
 8033198:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 803319c:	bd38      	pop	{r3, r4, r5, pc}
 803319e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80331a2:	e7f8      	b.n	8033196 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080331a4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80331a4:	b510      	push	{r4, lr}
 80331a6:	4b0d      	ldr	r3, [pc, #52]	@ (80331dc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80331a8:	781b      	ldrb	r3, [r3, #0]
 80331aa:	4604      	mov	r4, r0
 80331ac:	b95b      	cbnz	r3, 80331c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80331ae:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80331b2:	2b02      	cmp	r3, #2
 80331b4:	d007      	beq.n	80331c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80331b6:	6840      	ldr	r0, [r0, #4]
 80331b8:	f000 f912 	bl	80333e0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80331bc:	b118      	cbz	r0, 80331c6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80331be:	6862      	ldr	r2, [r4, #4]
 80331c0:	7a53      	ldrb	r3, [r2, #9]
 80331c2:	2b00      	cmp	r3, #0
 80331c4:	d0fc      	beq.n	80331c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80331c6:	f7f4 f9a3 	bl	8027510 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80331ca:	4620      	mov	r0, r4
 80331cc:	2100      	movs	r1, #0
 80331ce:	f7ff ffd7 	bl	8033180 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80331d2:	4620      	mov	r0, r4
 80331d4:	f7ff fd8c 	bl	8032cf0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80331d8:	bd10      	pop	{r4, pc}
 80331da:	bf00      	nop
 80331dc:	2000b8de 	.word	0x2000b8de

080331e0 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80331e0:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80331e4:	1a13      	subs	r3, r2, r0
 80331e6:	4258      	negs	r0, r3
 80331e8:	4158      	adcs	r0, r3
 80331ea:	4770      	bx	lr

080331ec <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80331ec:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80331f0:	1a9b      	subs	r3, r3, r2
 80331f2:	2b00      	cmp	r3, #0
 80331f4:	bfdc      	itt	le
 80331f6:	6882      	ldrle	r2, [r0, #8]
 80331f8:	189b      	addle	r3, r3, r2
 80331fa:	2b01      	cmp	r3, #1
 80331fc:	bfcc      	ite	gt
 80331fe:	2000      	movgt	r0, #0
 8033200:	2001      	movle	r0, #1
 8033202:	4770      	bx	lr

08033204 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8033204:	6902      	ldr	r2, [r0, #16]
 8033206:	6843      	ldr	r3, [r0, #4]
 8033208:	2024      	movs	r0, #36	@ 0x24
 803320a:	fb00 3002 	mla	r0, r0, r2, r3
 803320e:	4770      	bx	lr

08033210 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8033210:	6803      	ldr	r3, [r0, #0]
 8033212:	691b      	ldr	r3, [r3, #16]
 8033214:	4718      	bx	r3

08033216 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8033216:	b570      	push	{r4, r5, r6, lr}
 8033218:	2301      	movs	r3, #1
 803321a:	7203      	strb	r3, [r0, #8]
 803321c:	4604      	mov	r4, r0
 803321e:	6840      	ldr	r0, [r0, #4]
 8033220:	6803      	ldr	r3, [r0, #0]
 8033222:	699b      	ldr	r3, [r3, #24]
 8033224:	4798      	blx	r3
 8033226:	6803      	ldr	r3, [r0, #0]
 8033228:	2b40      	cmp	r3, #64	@ 0x40
 803322a:	4605      	mov	r5, r0
 803322c:	d00c      	beq.n	8033248 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 803322e:	d810      	bhi.n	8033252 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8033230:	2b04      	cmp	r3, #4
 8033232:	d01d      	beq.n	8033270 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8033234:	d804      	bhi.n	8033240 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8033236:	2b01      	cmp	r3, #1
 8033238:	d006      	beq.n	8033248 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 803323a:	2b02      	cmp	r3, #2
 803323c:	d02c      	beq.n	8033298 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 803323e:	bd70      	pop	{r4, r5, r6, pc}
 8033240:	2b08      	cmp	r3, #8
 8033242:	d01d      	beq.n	8033280 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8033244:	2b20      	cmp	r3, #32
 8033246:	d1fa      	bne.n	803323e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8033248:	6823      	ldr	r3, [r4, #0]
 803324a:	4620      	mov	r0, r4
 803324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 803324e:	4798      	blx	r3
 8033250:	e013      	b.n	803327a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8033252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8033256:	d0f7      	beq.n	8033248 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8033258:	d804      	bhi.n	8033264 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 803325a:	2b80      	cmp	r3, #128	@ 0x80
 803325c:	d0f4      	beq.n	8033248 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 803325e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8033262:	e7f0      	b.n	8033246 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8033264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8033268:	d0ee      	beq.n	8033248 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 803326a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 803326e:	e7e5      	b.n	803323c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8033270:	6823      	ldr	r3, [r4, #0]
 8033272:	7f01      	ldrb	r1, [r0, #28]
 8033274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8033276:	4620      	mov	r0, r4
 8033278:	4798      	blx	r3
 803327a:	6823      	ldr	r3, [r4, #0]
 803327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803327e:	e006      	b.n	803328e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8033280:	6823      	ldr	r3, [r4, #0]
 8033282:	7f01      	ldrb	r1, [r0, #28]
 8033284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8033286:	4620      	mov	r0, r4
 8033288:	4798      	blx	r3
 803328a:	6823      	ldr	r3, [r4, #0]
 803328c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 803328e:	4629      	mov	r1, r5
 8033290:	4620      	mov	r0, r4
 8033292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8033296:	4718      	bx	r3
 8033298:	6823      	ldr	r3, [r4, #0]
 803329a:	4620      	mov	r0, r4
 803329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 803329e:	4798      	blx	r3
 80332a0:	e7f3      	b.n	803328a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080332a2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80332a2:	4770      	bx	lr

080332a4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80332a4:	4770      	bx	lr

080332a6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80332a6:	4770      	bx	lr

080332a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80332a8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80332ac:	1ad2      	subs	r2, r2, r3
 80332ae:	2a00      	cmp	r2, #0
 80332b0:	b510      	push	{r4, lr}
 80332b2:	bfdc      	itt	le
 80332b4:	6884      	ldrle	r4, [r0, #8]
 80332b6:	1912      	addle	r2, r2, r4
 80332b8:	2a01      	cmp	r2, #1
 80332ba:	dd16      	ble.n	80332ea <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80332bc:	6842      	ldr	r2, [r0, #4]
 80332be:	2424      	movs	r4, #36	@ 0x24
 80332c0:	fb04 2303 	mla	r3, r4, r3, r2
 80332c4:	f101 0220 	add.w	r2, r1, #32
 80332c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80332cc:	f843 4b04 	str.w	r4, [r3], #4
 80332d0:	4291      	cmp	r1, r2
 80332d2:	d1f9      	bne.n	80332c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80332d4:	780a      	ldrb	r2, [r1, #0]
 80332d6:	701a      	strb	r2, [r3, #0]
 80332d8:	68c3      	ldr	r3, [r0, #12]
 80332da:	6882      	ldr	r2, [r0, #8]
 80332dc:	f3bf 8f5b 	dmb	ish
 80332e0:	3301      	adds	r3, #1
 80332e2:	429a      	cmp	r2, r3
 80332e4:	bfd8      	it	le
 80332e6:	1a9b      	suble	r3, r3, r2
 80332e8:	60c3      	str	r3, [r0, #12]
 80332ea:	bd10      	pop	{r4, pc}

080332ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80332ec:	6903      	ldr	r3, [r0, #16]
 80332ee:	6882      	ldr	r2, [r0, #8]
 80332f0:	f3bf 8f5b 	dmb	ish
 80332f4:	3301      	adds	r3, #1
 80332f6:	429a      	cmp	r2, r3
 80332f8:	bfd8      	it	le
 80332fa:	1a9b      	suble	r3, r3, r2
 80332fc:	6103      	str	r3, [r0, #16]
 80332fe:	4770      	bx	lr

08033300 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8033300:	b570      	push	{r4, r5, r6, lr}
 8033302:	4604      	mov	r4, r0
 8033304:	460e      	mov	r6, r1
 8033306:	6860      	ldr	r0, [r4, #4]
 8033308:	6803      	ldr	r3, [r0, #0]
 803330a:	685b      	ldr	r3, [r3, #4]
 803330c:	4798      	blx	r3
 803330e:	2800      	cmp	r0, #0
 8033310:	d1f9      	bne.n	8033306 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8033312:	4d0d      	ldr	r5, [pc, #52]	@ (8033348 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8033314:	6828      	ldr	r0, [r5, #0]
 8033316:	6803      	ldr	r3, [r0, #0]
 8033318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 803331a:	4798      	blx	r3
 803331c:	f7f4 f906 	bl	802752c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8033320:	6828      	ldr	r0, [r5, #0]
 8033322:	2101      	movs	r1, #1
 8033324:	f7ff ff2c 	bl	8033180 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8033328:	6860      	ldr	r0, [r4, #4]
 803332a:	6803      	ldr	r3, [r0, #0]
 803332c:	4631      	mov	r1, r6
 803332e:	689b      	ldr	r3, [r3, #8]
 8033330:	4798      	blx	r3
 8033332:	6823      	ldr	r3, [r4, #0]
 8033334:	4620      	mov	r0, r4
 8033336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8033338:	4798      	blx	r3
 803333a:	6828      	ldr	r0, [r5, #0]
 803333c:	6803      	ldr	r3, [r0, #0]
 803333e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8033342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8033344:	4718      	bx	r3
 8033346:	bf00      	nop
 8033348:	2000b8e0 	.word	0x2000b8e0

0803334c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 803334c:	b508      	push	{r3, lr}
 803334e:	f7f4 f8df 	bl	8027510 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8033352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8033356:	f7f4 b8e3 	b.w	8027520 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0803335a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 803335a:	b510      	push	{r4, lr}
 803335c:	2114      	movs	r1, #20
 803335e:	4604      	mov	r4, r0
 8033360:	f009 f8c3 	bl	803c4ea <_ZdlPvj>
 8033364:	4620      	mov	r0, r4
 8033366:	bd10      	pop	{r4, pc}

08033368 <_ZN8touchgfx13DMA_Interface5startEv>:
 8033368:	b510      	push	{r4, lr}
 803336a:	4604      	mov	r4, r0
 803336c:	6840      	ldr	r0, [r0, #4]
 803336e:	6803      	ldr	r3, [r0, #0]
 8033370:	681b      	ldr	r3, [r3, #0]
 8033372:	4798      	blx	r3
 8033374:	b948      	cbnz	r0, 803338a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8033376:	7a63      	ldrb	r3, [r4, #9]
 8033378:	b13b      	cbz	r3, 803338a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 803337a:	7a23      	ldrb	r3, [r4, #8]
 803337c:	b92b      	cbnz	r3, 803338a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 803337e:	6823      	ldr	r3, [r4, #0]
 8033380:	4620      	mov	r0, r4
 8033382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8033384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8033388:	4718      	bx	r3
 803338a:	bd10      	pop	{r4, pc}

0803338c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 803338c:	b570      	push	{r4, r5, r6, lr}
 803338e:	4604      	mov	r4, r0
 8033390:	6840      	ldr	r0, [r0, #4]
 8033392:	6803      	ldr	r3, [r0, #0]
 8033394:	681b      	ldr	r3, [r3, #0]
 8033396:	4798      	blx	r3
 8033398:	4605      	mov	r5, r0
 803339a:	b930      	cbnz	r0, 80333aa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 803339c:	7a23      	ldrb	r3, [r4, #8]
 803339e:	b123      	cbz	r3, 80333aa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80333a0:	6860      	ldr	r0, [r4, #4]
 80333a2:	6803      	ldr	r3, [r0, #0]
 80333a4:	695b      	ldr	r3, [r3, #20]
 80333a6:	4798      	blx	r3
 80333a8:	7225      	strb	r5, [r4, #8]
 80333aa:	6860      	ldr	r0, [r4, #4]
 80333ac:	6803      	ldr	r3, [r0, #0]
 80333ae:	681b      	ldr	r3, [r3, #0]
 80333b0:	4798      	blx	r3
 80333b2:	b928      	cbnz	r0, 80333c0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80333b4:	6823      	ldr	r3, [r4, #0]
 80333b6:	4620      	mov	r0, r4
 80333b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80333ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80333be:	4718      	bx	r3
 80333c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80333c4:	f7f4 b8ba 	b.w	802753c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080333c8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80333c8:	b510      	push	{r4, lr}
 80333ca:	4c04      	ldr	r4, [pc, #16]	@ (80333dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80333cc:	6082      	str	r2, [r0, #8]
 80333ce:	2200      	movs	r2, #0
 80333d0:	e9c0 4100 	strd	r4, r1, [r0]
 80333d4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80333d8:	bd10      	pop	{r4, pc}
 80333da:	bf00      	nop
 80333dc:	080438b4 	.word	0x080438b4

080333e0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80333e0:	6840      	ldr	r0, [r0, #4]
 80333e2:	6803      	ldr	r3, [r0, #0]
 80333e4:	681b      	ldr	r3, [r3, #0]
 80333e6:	4718      	bx	r3

080333e8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80333e8:	b510      	push	{r4, lr}
 80333ea:	6803      	ldr	r3, [r0, #0]
 80333ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80333ee:	460c      	mov	r4, r1
 80333f0:	4798      	blx	r3
 80333f2:	1b03      	subs	r3, r0, r4
 80333f4:	4258      	negs	r0, r3
 80333f6:	4158      	adcs	r0, r3
 80333f8:	bd10      	pop	{r4, pc}
	...

080333fc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80333fc:	4b01      	ldr	r3, [pc, #4]	@ (8033404 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80333fe:	6019      	str	r1, [r3, #0]
 8033400:	4770      	bx	lr
 8033402:	bf00      	nop
 8033404:	2000b8e8 	.word	0x2000b8e8

08033408 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8033408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803340c:	4696      	mov	lr, r2
 803340e:	4605      	mov	r5, r0
 8033410:	4614      	mov	r4, r2
 8033412:	460e      	mov	r6, r1
 8033414:	461f      	mov	r7, r3
 8033416:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 803341a:	b097      	sub	sp, #92	@ 0x5c
 803341c:	f10d 0c1c 	add.w	ip, sp, #28
 8033420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8033424:	f8de 3000 	ldr.w	r3, [lr]
 8033428:	f8cc 3000 	str.w	r3, [ip]
 803342c:	f104 0e14 	add.w	lr, r4, #20
 8033430:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8033434:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8033438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 803343c:	f8de 3000 	ldr.w	r3, [lr]
 8033440:	f8cc 3000 	str.w	r3, [ip]
 8033444:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8033448:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 803344c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8033450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8033454:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8033458:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 803345c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8033460:	f8de 3000 	ldr.w	r3, [lr]
 8033464:	f8cc 3000 	str.w	r3, [ip]
 8033468:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 803346a:	682b      	ldr	r3, [r5, #0]
 803346c:	9201      	str	r2, [sp, #4]
 803346e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8033472:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8033474:	9200      	str	r2, [sp, #0]
 8033476:	f8cd 8008 	str.w	r8, [sp, #8]
 803347a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 803347e:	aa07      	add	r2, sp, #28
 8033480:	463b      	mov	r3, r7
 8033482:	4631      	mov	r1, r6
 8033484:	4628      	mov	r0, r5
 8033486:	47d8      	blx	fp
 8033488:	46a6      	mov	lr, r4
 803348a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 803348e:	f10d 0c1c 	add.w	ip, sp, #28
 8033492:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8033496:	f8de 3000 	ldr.w	r3, [lr]
 803349a:	f8cc 3000 	str.w	r3, [ip]
 803349e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80334a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80334a6:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80334aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80334ae:	343c      	adds	r4, #60	@ 0x3c
 80334b0:	f8de 3000 	ldr.w	r3, [lr]
 80334b4:	f8cc 3000 	str.w	r3, [ip]
 80334b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80334ba:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80334be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80334c2:	6823      	ldr	r3, [r4, #0]
 80334c4:	f8cc 3000 	str.w	r3, [ip]
 80334c8:	682b      	ldr	r3, [r5, #0]
 80334ca:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80334ce:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80334d0:	9201      	str	r2, [sp, #4]
 80334d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80334d4:	9200      	str	r2, [sp, #0]
 80334d6:	f8cd 8008 	str.w	r8, [sp, #8]
 80334da:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80334dc:	aa07      	add	r2, sp, #28
 80334de:	463b      	mov	r3, r7
 80334e0:	4631      	mov	r1, r6
 80334e2:	4628      	mov	r0, r5
 80334e4:	47a0      	blx	r4
 80334e6:	b017      	add	sp, #92	@ 0x5c
 80334e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080334ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80334ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80334f0:	b08d      	sub	sp, #52	@ 0x34
 80334f2:	4688      	mov	r8, r1
 80334f4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80334f6:	f8d3 c000 	ldr.w	ip, [r3]
 80334fa:	680f      	ldr	r7, [r1, #0]
 80334fc:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8033500:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8033504:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8033508:	edd3 6a07 	vldr	s13, [r3, #28]
 803350c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 803350e:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8033512:	f9b1 9000 	ldrsh.w	r9, [r1]
 8033516:	f9ba 1000 	ldrsh.w	r1, [sl]
 803351a:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 803351e:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8033522:	eba7 070c 	sub.w	r7, r7, ip
 8033526:	42bc      	cmp	r4, r7
 8033528:	bfa8      	it	ge
 803352a:	463c      	movge	r4, r7
 803352c:	ee07 4a90 	vmov	s15, r4
 8033530:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8033534:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8033538:	ee25 4a04 	vmul.f32	s8, s10, s8
 803353c:	ee65 4a24 	vmul.f32	s9, s10, s9
 8033540:	ee25 5a27 	vmul.f32	s10, s10, s15
 8033544:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8033548:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 803354c:	eb09 0e0c 	add.w	lr, r9, ip
 8033550:	4571      	cmp	r1, lr
 8033552:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8033556:	ee32 1a05 	vadd.f32	s2, s4, s10
 803355a:	ee36 0a84 	vadd.f32	s0, s13, s8
 803355e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8033562:	ee22 2a07 	vmul.f32	s4, s4, s14
 8033566:	f340 808d 	ble.w	8033684 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 803356a:	eba1 060e 	sub.w	r6, r1, lr
 803356e:	fb96 f5f4 	sdiv	r5, r6, r4
 8033572:	ee07 5a10 	vmov	s14, r5
 8033576:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 803357a:	2d00      	cmp	r5, #0
 803357c:	fb04 6615 	mls	r6, r4, r5, r6
 8033580:	eea7 0a04 	vfma.f32	s0, s14, s8
 8033584:	eee7 0a24 	vfma.f32	s1, s14, s9
 8033588:	eea7 1a05 	vfma.f32	s2, s14, s10
 803358c:	dd13      	ble.n	80335b6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 803358e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8033592:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8033596:	eef5 6a40 	vcmp.f32	s13, #0.0
 803359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803359e:	bf18      	it	ne
 80335a0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80335a4:	ee31 2a45 	vsub.f32	s4, s2, s10
 80335a8:	bf08      	it	eq
 80335aa:	eeb0 7a67 	vmoveq.f32	s14, s15
 80335ae:	ee61 1a87 	vmul.f32	s3, s3, s14
 80335b2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80335b6:	fb05 f204 	mul.w	r2, r5, r4
 80335ba:	1abf      	subs	r7, r7, r2
 80335bc:	4494      	add	ip, r2
 80335be:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80335c2:	4411      	add	r1, r2
 80335c4:	eb09 020c 	add.w	r2, r9, ip
 80335c8:	443a      	add	r2, r7
 80335ca:	b209      	sxth	r1, r1
 80335cc:	428a      	cmp	r2, r1
 80335ce:	bfc4      	itt	gt
 80335d0:	eba1 0209 	subgt.w	r2, r1, r9
 80335d4:	eba2 070c 	subgt.w	r7, r2, ip
 80335d8:	2f00      	cmp	r7, #0
 80335da:	dd50      	ble.n	803367e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 80335dc:	fb97 f1f4 	sdiv	r1, r7, r4
 80335e0:	fb04 7211 	mls	r2, r4, r1, r7
 80335e4:	b90a      	cbnz	r2, 80335ea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 80335e6:	3901      	subs	r1, #1
 80335e8:	4622      	mov	r2, r4
 80335ea:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80335ee:	6840      	ldr	r0, [r0, #4]
 80335f0:	900b      	str	r0, [sp, #44]	@ 0x2c
 80335f2:	f8d0 a000 	ldr.w	sl, [r0]
 80335f6:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80335f8:	9008      	str	r0, [sp, #32]
 80335fa:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80335fe:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8033600:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8033604:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8033608:	695b      	ldr	r3, [r3, #20]
 803360a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 803360c:	445b      	add	r3, fp
 803360e:	eef0 6a42 	vmov.f32	s13, s4
 8033612:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8033616:	ee21 3a23 	vmul.f32	s6, s2, s7
 803361a:	ee72 7ae1 	vsub.f32	s15, s5, s3
 803361e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8033622:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8033626:	9307      	str	r3, [sp, #28]
 8033628:	ee17 7a90 	vmov	r7, s15
 803362c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8033630:	eeb0 7a61 	vmov.f32	s14, s3
 8033634:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8033638:	ee16 3a90 	vmov	r3, s13
 803363c:	fb97 f7f4 	sdiv	r7, r7, r4
 8033640:	ee17 ca90 	vmov	ip, s15
 8033644:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8033648:	fb9c fcf4 	sdiv	ip, ip, r4
 803364c:	fb0c 3306 	mla	r3, ip, r6, r3
 8033650:	9302      	str	r3, [sp, #8]
 8033652:	ee17 3a10 	vmov	r3, s14
 8033656:	44b6      	add	lr, r6
 8033658:	fb04 e505 	mla	r5, r4, r5, lr
 803365c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8033660:	fb07 3706 	mla	r7, r7, r6, r3
 8033664:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8033668:	e9cd 4700 	strd	r4, r7, [sp]
 803366c:	2900      	cmp	r1, #0
 803366e:	bfcc      	ite	gt
 8033670:	46a1      	movgt	r9, r4
 8033672:	4691      	movle	r9, r2
 8033674:	eba9 0306 	sub.w	r3, r9, r6
 8033678:	f8da 4008 	ldr.w	r4, [sl, #8]
 803367c:	47a0      	blx	r4
 803367e:	b00d      	add	sp, #52	@ 0x34
 8033680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033684:	2500      	movs	r5, #0
 8033686:	462e      	mov	r6, r5
 8033688:	e799      	b.n	80335be <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0803368c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 803368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033690:	b0db      	sub	sp, #364	@ 0x16c
 8033692:	461d      	mov	r5, r3
 8033694:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8033698:	930a      	str	r3, [sp, #40]	@ 0x28
 803369a:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 803369e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80336a0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80336a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80336a6:	6803      	ldr	r3, [r0, #0]
 80336a8:	910f      	str	r1, [sp, #60]	@ 0x3c
 80336aa:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80336ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80336ae:	4614      	mov	r4, r2
 80336b0:	4629      	mov	r1, r5
 80336b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80336b6:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80336ba:	47b8      	blx	r7
 80336bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80336be:	6058      	str	r0, [r3, #4]
 80336c0:	2800      	cmp	r0, #0
 80336c2:	f000 83a1 	beq.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80336c6:	682b      	ldr	r3, [r5, #0]
 80336c8:	9314      	str	r3, [sp, #80]	@ 0x50
 80336ca:	686b      	ldr	r3, [r5, #4]
 80336cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80336ce:	4bc4      	ldr	r3, [pc, #784]	@ (80339e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80336d0:	ed94 7a02 	vldr	s14, [r4, #8]
 80336d4:	7819      	ldrb	r1, [r3, #0]
 80336d6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80336da:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80336de:	2900      	cmp	r1, #0
 80336e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80336e4:	bf16      	itet	ne
 80336e6:	4619      	movne	r1, r3
 80336e8:	4611      	moveq	r1, r2
 80336ea:	4613      	movne	r3, r2
 80336ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80336f0:	9116      	str	r1, [sp, #88]	@ 0x58
 80336f2:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 80336f6:	f240 8387 	bls.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80336fa:	ed94 7a07 	vldr	s14, [r4, #28]
 80336fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8033702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033706:	f240 837f 	bls.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 803370a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 803370e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8033712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8033716:	f240 8377 	bls.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 803371a:	6822      	ldr	r2, [r4, #0]
 803371c:	4bb1      	ldr	r3, [pc, #708]	@ (80339e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 803371e:	429a      	cmp	r2, r3
 8033720:	f2c0 8372 	blt.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8033724:	49b0      	ldr	r1, [pc, #704]	@ (80339e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8033726:	6963      	ldr	r3, [r4, #20]
 8033728:	428a      	cmp	r2, r1
 803372a:	f300 836d 	bgt.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 803372e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8033732:	48ae      	ldr	r0, [pc, #696]	@ (80339ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8033734:	33ff      	adds	r3, #255	@ 0xff
 8033736:	4283      	cmp	r3, r0
 8033738:	f200 8366 	bhi.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 803373c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 803373e:	4dac      	ldr	r5, [pc, #688]	@ (80339f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8033740:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8033744:	33ff      	adds	r3, #255	@ 0xff
 8033746:	42ab      	cmp	r3, r5
 8033748:	f200 835e 	bhi.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 803374c:	6862      	ldr	r2, [r4, #4]
 803374e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8033752:	33ff      	adds	r3, #255	@ 0xff
 8033754:	4283      	cmp	r3, r0
 8033756:	f200 8357 	bhi.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 803375a:	69a1      	ldr	r1, [r4, #24]
 803375c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8033760:	33ff      	adds	r3, #255	@ 0xff
 8033762:	4283      	cmp	r3, r0
 8033764:	f200 8350 	bhi.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8033768:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 803376a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 803376e:	30ff      	adds	r0, #255	@ 0xff
 8033770:	42a8      	cmp	r0, r5
 8033772:	f200 8349 	bhi.w	8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8033776:	428a      	cmp	r2, r1
 8033778:	f280 8110 	bge.w	803399c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 803377c:	429a      	cmp	r2, r3
 803377e:	f300 8119 	bgt.w	80339b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8033782:	4299      	cmp	r1, r3
 8033784:	f280 811d 	bge.w	80339c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8033788:	2502      	movs	r5, #2
 803378a:	2701      	movs	r7, #1
 803378c:	46a9      	mov	r9, r5
 803378e:	46b8      	mov	r8, r7
 8033790:	f04f 0a00 	mov.w	sl, #0
 8033794:	4621      	mov	r1, r4
 8033796:	a849      	add	r0, sp, #292	@ 0x124
 8033798:	f003 fde0 	bl	803735c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 803379c:	4622      	mov	r2, r4
 803379e:	4653      	mov	r3, sl
 80337a0:	a949      	add	r1, sp, #292	@ 0x124
 80337a2:	f8cd 9000 	str.w	r9, [sp]
 80337a6:	a819      	add	r0, sp, #100	@ 0x64
 80337a8:	f003 ff08 	bl	80375bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80337ac:	4622      	mov	r2, r4
 80337ae:	4653      	mov	r3, sl
 80337b0:	a949      	add	r1, sp, #292	@ 0x124
 80337b2:	f8cd 8000 	str.w	r8, [sp]
 80337b6:	a829      	add	r0, sp, #164	@ 0xa4
 80337b8:	f003 ff00 	bl	80375bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80337bc:	4643      	mov	r3, r8
 80337be:	4622      	mov	r2, r4
 80337c0:	a949      	add	r1, sp, #292	@ 0x124
 80337c2:	f8cd 9000 	str.w	r9, [sp]
 80337c6:	a839      	add	r0, sp, #228	@ 0xe4
 80337c8:	f003 fef8 	bl	80375bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80337cc:	42af      	cmp	r7, r5
 80337ce:	bfb5      	itete	lt
 80337d0:	2300      	movlt	r3, #0
 80337d2:	2301      	movge	r3, #1
 80337d4:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80337d6:	930e      	strge	r3, [sp, #56]	@ 0x38
 80337d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80337da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80337de:	af12      	add	r7, sp, #72	@ 0x48
 80337e0:	bfb9      	ittee	lt
 80337e2:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80337e4:	ac19      	addlt	r4, sp, #100	@ 0x64
 80337e6:	ad19      	addge	r5, sp, #100	@ 0x64
 80337e8:	ac29      	addge	r4, sp, #164	@ 0xa4
 80337ea:	e887 0003 	stmia.w	r7, {r0, r1}
 80337ee:	b928      	cbnz	r0, 80337fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80337f0:	4b80      	ldr	r3, [pc, #512]	@ (80339f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80337f2:	6818      	ldr	r0, [r3, #0]
 80337f4:	6803      	ldr	r3, [r0, #0]
 80337f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80337f8:	4798      	blx	r3
 80337fa:	6038      	str	r0, [r7, #0]
 80337fc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80337fe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8033802:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8033806:	930c      	str	r3, [sp, #48]	@ 0x30
 8033808:	990c      	ldr	r1, [sp, #48]	@ 0x30
 803380a:	6963      	ldr	r3, [r4, #20]
 803380c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 803380e:	440b      	add	r3, r1
 8033810:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8033814:	4408      	add	r0, r1
 8033816:	b200      	sxth	r0, r0
 8033818:	4283      	cmp	r3, r0
 803381a:	900d      	str	r0, [sp, #52]	@ 0x34
 803381c:	f280 80dd 	bge.w	80339da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8033820:	428b      	cmp	r3, r1
 8033822:	da08      	bge.n	8033836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8033824:	2a00      	cmp	r2, #0
 8033826:	dd06      	ble.n	8033836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8033828:	1acb      	subs	r3, r1, r3
 803382a:	429a      	cmp	r2, r3
 803382c:	f2c0 80e4 	blt.w	80339f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8033830:	2b00      	cmp	r3, #0
 8033832:	f300 80e2 	bgt.w	80339fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8033836:	6967      	ldr	r7, [r4, #20]
 8033838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803383a:	443b      	add	r3, r7
 803383c:	461f      	mov	r7, r3
 803383e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033840:	1bdf      	subs	r7, r3, r7
 8033842:	4297      	cmp	r7, r2
 8033844:	bfa8      	it	ge
 8033846:	4617      	movge	r7, r2
 8033848:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 803384c:	2f00      	cmp	r7, #0
 803384e:	f340 8166 	ble.w	8033b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8033852:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8033854:	6829      	ldr	r1, [r5, #0]
 8033856:	f9b3 2000 	ldrsh.w	r2, [r3]
 803385a:	f9bb 3000 	ldrsh.w	r3, [fp]
 803385e:	6820      	ldr	r0, [r4, #0]
 8033860:	4411      	add	r1, r2
 8033862:	4299      	cmp	r1, r3
 8033864:	dd1a      	ble.n	803389c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8033866:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 803386a:	440b      	add	r3, r1
 803386c:	4402      	add	r2, r0
 803386e:	b21b      	sxth	r3, r3
 8033870:	429a      	cmp	r2, r3
 8033872:	dc13      	bgt.n	803389c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8033874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033876:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8033878:	681b      	ldr	r3, [r3, #0]
 803387a:	9206      	str	r2, [sp, #24]
 803387c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 803387e:	9205      	str	r2, [sp, #20]
 8033880:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8033882:	9500      	str	r5, [sp, #0]
 8033884:	e9cd b203 	strd	fp, r2, [sp, #12]
 8033888:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 803388a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 803388c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8033890:	a912      	add	r1, sp, #72	@ 0x48
 8033892:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8033896:	aa49      	add	r2, sp, #292	@ 0x124
 8033898:	4623      	mov	r3, r4
 803389a:	47c8      	blx	r9
 803389c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80338a0:	441a      	add	r2, r3
 80338a2:	6963      	ldr	r3, [r4, #20]
 80338a4:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80338a8:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80338ac:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80338b0:	68a1      	ldr	r1, [r4, #8]
 80338b2:	ed94 6a08 	vldr	s12, [r4, #32]
 80338b6:	6022      	str	r2, [r4, #0]
 80338b8:	3301      	adds	r3, #1
 80338ba:	6163      	str	r3, [r4, #20]
 80338bc:	69a3      	ldr	r3, [r4, #24]
 80338be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80338c2:	3b01      	subs	r3, #1
 80338c4:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80338c8:	61a3      	str	r3, [r4, #24]
 80338ca:	6923      	ldr	r3, [r4, #16]
 80338cc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80338d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80338d4:	edd4 6a07 	vldr	s13, [r4, #28]
 80338d8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80338dc:	440b      	add	r3, r1
 80338de:	68e1      	ldr	r1, [r4, #12]
 80338e0:	6123      	str	r3, [r4, #16]
 80338e2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80338e6:	428b      	cmp	r3, r1
 80338e8:	edc4 6a07 	vstr	s13, [r4, #28]
 80338ec:	db15      	blt.n	803391a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80338ee:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80338f2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80338f6:	3201      	adds	r2, #1
 80338f8:	edc4 6a07 	vstr	s13, [r4, #28]
 80338fc:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8033900:	6022      	str	r2, [r4, #0]
 8033902:	ee36 7a87 	vadd.f32	s14, s13, s14
 8033906:	1a5b      	subs	r3, r3, r1
 8033908:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 803390c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8033910:	6123      	str	r3, [r4, #16]
 8033912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8033916:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 803391a:	e9d5 2300 	ldrd	r2, r3, [r5]
 803391e:	441a      	add	r2, r3
 8033920:	696b      	ldr	r3, [r5, #20]
 8033922:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8033926:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 803392a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 803392e:	68a9      	ldr	r1, [r5, #8]
 8033930:	ed95 6a08 	vldr	s12, [r5, #32]
 8033934:	602a      	str	r2, [r5, #0]
 8033936:	3301      	adds	r3, #1
 8033938:	616b      	str	r3, [r5, #20]
 803393a:	69ab      	ldr	r3, [r5, #24]
 803393c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8033940:	3b01      	subs	r3, #1
 8033942:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8033946:	61ab      	str	r3, [r5, #24]
 8033948:	692b      	ldr	r3, [r5, #16]
 803394a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 803394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8033952:	edd5 6a07 	vldr	s13, [r5, #28]
 8033956:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 803395a:	440b      	add	r3, r1
 803395c:	68e9      	ldr	r1, [r5, #12]
 803395e:	612b      	str	r3, [r5, #16]
 8033960:	ee76 6a86 	vadd.f32	s13, s13, s12
 8033964:	428b      	cmp	r3, r1
 8033966:	edc5 6a07 	vstr	s13, [r5, #28]
 803396a:	db15      	blt.n	8033998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 803396c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8033970:	ee76 6a26 	vadd.f32	s13, s12, s13
 8033974:	3201      	adds	r2, #1
 8033976:	edc5 6a07 	vstr	s13, [r5, #28]
 803397a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 803397e:	602a      	str	r2, [r5, #0]
 8033980:	ee36 7a87 	vadd.f32	s14, s13, s14
 8033984:	1a5b      	subs	r3, r3, r1
 8033986:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 803398a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 803398e:	612b      	str	r3, [r5, #16]
 8033990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8033994:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8033998:	3f01      	subs	r7, #1
 803399a:	e757      	b.n	803384c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 803399c:	4299      	cmp	r1, r3
 803399e:	dc13      	bgt.n	80339c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80339a0:	429a      	cmp	r2, r3
 80339a2:	da14      	bge.n	80339ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80339a4:	2502      	movs	r5, #2
 80339a6:	2703      	movs	r7, #3
 80339a8:	46a9      	mov	r9, r5
 80339aa:	f04f 0800 	mov.w	r8, #0
 80339ae:	f04f 0a01 	mov.w	sl, #1
 80339b2:	e6ef      	b.n	8033794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80339b4:	2501      	movs	r5, #1
 80339b6:	2700      	movs	r7, #0
 80339b8:	46a9      	mov	r9, r5
 80339ba:	46b8      	mov	r8, r7
 80339bc:	f04f 0a02 	mov.w	sl, #2
 80339c0:	e6e8      	b.n	8033794 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80339c2:	2501      	movs	r5, #1
 80339c4:	2702      	movs	r7, #2
 80339c6:	e6e1      	b.n	803378c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80339c8:	2500      	movs	r5, #0
 80339ca:	2701      	movs	r7, #1
 80339cc:	e7f4      	b.n	80339b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80339ce:	2702      	movs	r7, #2
 80339d0:	2503      	movs	r5, #3
 80339d2:	f04f 0900 	mov.w	r9, #0
 80339d6:	46b8      	mov	r8, r7
 80339d8:	e7e9      	b.n	80339ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80339da:	4613      	mov	r3, r2
 80339dc:	e728      	b.n	8033830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80339de:	bf00      	nop
 80339e0:	2000b8d8 	.word	0x2000b8d8
 80339e4:	fffd8f01 	.word	0xfffd8f01
 80339e8:	00027100 	.word	0x00027100
 80339ec:	0004e1ff 	.word	0x0004e1ff
 80339f0:	0004e1fe 	.word	0x0004e1fe
 80339f4:	2000b8e0 	.word	0x2000b8e0
 80339f8:	4613      	mov	r3, r2
 80339fa:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80339fc:	9111      	str	r1, [sp, #68]	@ 0x44
 80339fe:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8033a02:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8033a06:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8033a08:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8033a0c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8033a10:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8033a14:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8033a18:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8033a1c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8033a20:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8033a24:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8033a28:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8033a2c:	469e      	mov	lr, r3
 8033a2e:	469c      	mov	ip, r3
 8033a30:	f04f 0900 	mov.w	r9, #0
 8033a34:	f1bc 0f00 	cmp.w	ip, #0
 8033a38:	d147      	bne.n	8033aca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8033a3a:	eb03 0c07 	add.w	ip, r3, r7
 8033a3e:	1ad7      	subs	r7, r2, r3
 8033a40:	f1b9 0f00 	cmp.w	r9, #0
 8033a44:	d009      	beq.n	8033a5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8033a46:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8033a4a:	9029      	str	r0, [sp, #164]	@ 0xa4
 8033a4c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8033a50:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8033a54:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8033a58:	912d      	str	r1, [sp, #180]	@ 0xb4
 8033a5a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8033a5c:	9111      	str	r1, [sp, #68]	@ 0x44
 8033a5e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8033a62:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8033a66:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8033a6a:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8033a6e:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8033a72:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8033a76:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8033a7a:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8033a7e:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8033a82:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8033a86:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8033a8a:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8033a8e:	f04f 0800 	mov.w	r8, #0
 8033a92:	f1be 0f00 	cmp.w	lr, #0
 8033a96:	d031      	beq.n	8033afc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8033a98:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8033a9a:	4431      	add	r1, r6
 8033a9c:	4549      	cmp	r1, r9
 8033a9e:	4450      	add	r0, sl
 8033aa0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8033aa4:	ee37 7a04 	vadd.f32	s14, s14, s8
 8033aa8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8033aac:	db08      	blt.n	8033ac0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8033aae:	ee77 7a85 	vadd.f32	s15, s15, s10
 8033ab2:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8033ab6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8033aba:	3001      	adds	r0, #1
 8033abc:	eba1 0109 	sub.w	r1, r1, r9
 8033ac0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8033ac4:	f04f 0801 	mov.w	r8, #1
 8033ac8:	e7e3      	b.n	8033a92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8033aca:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8033acc:	4431      	add	r1, r6
 8033ace:	4541      	cmp	r1, r8
 8033ad0:	4450      	add	r0, sl
 8033ad2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8033ad6:	ee77 7a84 	vadd.f32	s15, s15, s8
 8033ada:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8033ade:	db08      	blt.n	8033af2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8033ae0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8033ae4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8033ae8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8033aec:	3001      	adds	r0, #1
 8033aee:	eba1 0108 	sub.w	r1, r1, r8
 8033af2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8033af6:	f04f 0901 	mov.w	r9, #1
 8033afa:	e79b      	b.n	8033a34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8033afc:	449c      	add	ip, r3
 8033afe:	1aff      	subs	r7, r7, r3
 8033b00:	f1b8 0f00 	cmp.w	r8, #0
 8033b04:	d009      	beq.n	8033b1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8033b06:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8033b0a:	9019      	str	r0, [sp, #100]	@ 0x64
 8033b0c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8033b10:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8033b14:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8033b18:	911d      	str	r1, [sp, #116]	@ 0x74
 8033b1a:	1ad2      	subs	r2, r2, r3
 8033b1c:	e68b      	b.n	8033836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8033b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033b20:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8033b22:	2b00      	cmp	r3, #0
 8033b24:	f000 80d1 	beq.w	8033cca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8033b28:	ad19      	add	r5, sp, #100	@ 0x64
 8033b2a:	ac39      	add	r4, sp, #228	@ 0xe4
 8033b2c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8033b2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8033b32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8033b36:	930c      	str	r3, [sp, #48]	@ 0x30
 8033b38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8033b3a:	6963      	ldr	r3, [r4, #20]
 8033b3c:	440b      	add	r3, r1
 8033b3e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8033b42:	4408      	add	r0, r1
 8033b44:	b200      	sxth	r0, r0
 8033b46:	4283      	cmp	r3, r0
 8033b48:	900d      	str	r0, [sp, #52]	@ 0x34
 8033b4a:	f280 80c1 	bge.w	8033cd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8033b4e:	428b      	cmp	r3, r1
 8033b50:	da08      	bge.n	8033b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8033b52:	2a00      	cmp	r2, #0
 8033b54:	dd06      	ble.n	8033b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8033b56:	1acb      	subs	r3, r1, r3
 8033b58:	429a      	cmp	r2, r3
 8033b5a:	f2c0 80bb 	blt.w	8033cd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8033b5e:	2b00      	cmp	r3, #0
 8033b60:	f300 80b9 	bgt.w	8033cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8033b64:	6967      	ldr	r7, [r4, #20]
 8033b66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8033b68:	443b      	add	r3, r7
 8033b6a:	461f      	mov	r7, r3
 8033b6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033b6e:	1bdf      	subs	r7, r3, r7
 8033b70:	4297      	cmp	r7, r2
 8033b72:	bfa8      	it	ge
 8033b74:	4617      	movge	r7, r2
 8033b76:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8033b7a:	2f00      	cmp	r7, #0
 8033b7c:	f340 813c 	ble.w	8033df8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8033b80:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8033b82:	6829      	ldr	r1, [r5, #0]
 8033b84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8033b88:	f9bb 3000 	ldrsh.w	r3, [fp]
 8033b8c:	6820      	ldr	r0, [r4, #0]
 8033b8e:	4411      	add	r1, r2
 8033b90:	4299      	cmp	r1, r3
 8033b92:	dd1a      	ble.n	8033bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8033b94:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8033b98:	440b      	add	r3, r1
 8033b9a:	4402      	add	r2, r0
 8033b9c:	b21b      	sxth	r3, r3
 8033b9e:	429a      	cmp	r2, r3
 8033ba0:	dc13      	bgt.n	8033bca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8033ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8033ba4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8033ba6:	681b      	ldr	r3, [r3, #0]
 8033ba8:	9206      	str	r2, [sp, #24]
 8033baa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8033bac:	9205      	str	r2, [sp, #20]
 8033bae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8033bb0:	9500      	str	r5, [sp, #0]
 8033bb2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8033bb6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8033bb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8033bba:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8033bbe:	a912      	add	r1, sp, #72	@ 0x48
 8033bc0:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8033bc4:	aa49      	add	r2, sp, #292	@ 0x124
 8033bc6:	4623      	mov	r3, r4
 8033bc8:	47c8      	blx	r9
 8033bca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8033bce:	441a      	add	r2, r3
 8033bd0:	6963      	ldr	r3, [r4, #20]
 8033bd2:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8033bd6:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8033bda:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8033bde:	68a1      	ldr	r1, [r4, #8]
 8033be0:	ed94 6a08 	vldr	s12, [r4, #32]
 8033be4:	6022      	str	r2, [r4, #0]
 8033be6:	3301      	adds	r3, #1
 8033be8:	6163      	str	r3, [r4, #20]
 8033bea:	69a3      	ldr	r3, [r4, #24]
 8033bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8033bf0:	3b01      	subs	r3, #1
 8033bf2:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8033bf6:	61a3      	str	r3, [r4, #24]
 8033bf8:	6923      	ldr	r3, [r4, #16]
 8033bfa:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8033bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8033c02:	edd4 6a07 	vldr	s13, [r4, #28]
 8033c06:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8033c0a:	440b      	add	r3, r1
 8033c0c:	68e1      	ldr	r1, [r4, #12]
 8033c0e:	6123      	str	r3, [r4, #16]
 8033c10:	ee76 6a86 	vadd.f32	s13, s13, s12
 8033c14:	428b      	cmp	r3, r1
 8033c16:	edc4 6a07 	vstr	s13, [r4, #28]
 8033c1a:	db15      	blt.n	8033c48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8033c1c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8033c20:	ee76 6a26 	vadd.f32	s13, s12, s13
 8033c24:	3201      	adds	r2, #1
 8033c26:	edc4 6a07 	vstr	s13, [r4, #28]
 8033c2a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8033c2e:	6022      	str	r2, [r4, #0]
 8033c30:	ee36 7a87 	vadd.f32	s14, s13, s14
 8033c34:	1a5b      	subs	r3, r3, r1
 8033c36:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8033c3a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8033c3e:	6123      	str	r3, [r4, #16]
 8033c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8033c44:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8033c48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8033c4c:	441a      	add	r2, r3
 8033c4e:	696b      	ldr	r3, [r5, #20]
 8033c50:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8033c54:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8033c58:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8033c5c:	68a9      	ldr	r1, [r5, #8]
 8033c5e:	ed95 6a08 	vldr	s12, [r5, #32]
 8033c62:	602a      	str	r2, [r5, #0]
 8033c64:	3301      	adds	r3, #1
 8033c66:	616b      	str	r3, [r5, #20]
 8033c68:	69ab      	ldr	r3, [r5, #24]
 8033c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8033c6e:	3b01      	subs	r3, #1
 8033c70:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8033c74:	61ab      	str	r3, [r5, #24]
 8033c76:	692b      	ldr	r3, [r5, #16]
 8033c78:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8033c7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8033c80:	edd5 6a07 	vldr	s13, [r5, #28]
 8033c84:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8033c88:	440b      	add	r3, r1
 8033c8a:	68e9      	ldr	r1, [r5, #12]
 8033c8c:	612b      	str	r3, [r5, #16]
 8033c8e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8033c92:	428b      	cmp	r3, r1
 8033c94:	edc5 6a07 	vstr	s13, [r5, #28]
 8033c98:	db15      	blt.n	8033cc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8033c9a:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8033c9e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8033ca2:	3201      	adds	r2, #1
 8033ca4:	edc5 6a07 	vstr	s13, [r5, #28]
 8033ca8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8033cac:	602a      	str	r2, [r5, #0]
 8033cae:	ee36 7a87 	vadd.f32	s14, s13, s14
 8033cb2:	1a5b      	subs	r3, r3, r1
 8033cb4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8033cb8:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8033cbc:	612b      	str	r3, [r5, #16]
 8033cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8033cc2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8033cc6:	3f01      	subs	r7, #1
 8033cc8:	e757      	b.n	8033b7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8033cca:	ad39      	add	r5, sp, #228	@ 0xe4
 8033ccc:	ac19      	add	r4, sp, #100	@ 0x64
 8033cce:	e72d      	b.n	8033b2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8033cd0:	4613      	mov	r3, r2
 8033cd2:	e744      	b.n	8033b5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8033cd4:	4613      	mov	r3, r2
 8033cd6:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8033cda:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8033cdc:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8033ce0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8033ce4:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8033ce8:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8033cec:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8033cf0:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8033cf4:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8033cf8:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8033cfa:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8033cfe:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8033d02:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8033d06:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8033d0a:	960e      	str	r6, [sp, #56]	@ 0x38
 8033d0c:	469e      	mov	lr, r3
 8033d0e:	461f      	mov	r7, r3
 8033d10:	f04f 0900 	mov.w	r9, #0
 8033d14:	2f00      	cmp	r7, #0
 8033d16:	d146      	bne.n	8033da6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8033d18:	449c      	add	ip, r3
 8033d1a:	1ad7      	subs	r7, r2, r3
 8033d1c:	f1b9 0f00 	cmp.w	r9, #0
 8033d20:	d009      	beq.n	8033d36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8033d22:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8033d26:	9039      	str	r0, [sp, #228]	@ 0xe4
 8033d28:	913d      	str	r1, [sp, #244]	@ 0xf4
 8033d2a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8033d2e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8033d32:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8033d36:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8033d38:	910e      	str	r1, [sp, #56]	@ 0x38
 8033d3a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8033d3e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8033d42:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8033d46:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8033d4a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8033d4e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8033d52:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8033d56:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8033d5a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8033d5e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8033d62:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8033d66:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8033d6a:	f04f 0800 	mov.w	r8, #0
 8033d6e:	f1be 0f00 	cmp.w	lr, #0
 8033d72:	d030      	beq.n	8033dd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8033d74:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8033d76:	4431      	add	r1, r6
 8033d78:	4549      	cmp	r1, r9
 8033d7a:	4450      	add	r0, sl
 8033d7c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8033d80:	ee37 7a04 	vadd.f32	s14, s14, s8
 8033d84:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8033d88:	db08      	blt.n	8033d9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8033d8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8033d8e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8033d92:	ee37 7a06 	vadd.f32	s14, s14, s12
 8033d96:	3001      	adds	r0, #1
 8033d98:	eba1 0109 	sub.w	r1, r1, r9
 8033d9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8033da0:	f04f 0801 	mov.w	r8, #1
 8033da4:	e7e3      	b.n	8033d6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8033da6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8033da8:	4431      	add	r1, r6
 8033daa:	4541      	cmp	r1, r8
 8033dac:	4450      	add	r0, sl
 8033dae:	ee37 7a24 	vadd.f32	s14, s14, s9
 8033db2:	ee77 7a84 	vadd.f32	s15, s15, s8
 8033db6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8033dba:	db08      	blt.n	8033dce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8033dbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8033dc0:	ee37 7a25 	vadd.f32	s14, s14, s11
 8033dc4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8033dc8:	3001      	adds	r0, #1
 8033dca:	eba1 0108 	sub.w	r1, r1, r8
 8033dce:	3f01      	subs	r7, #1
 8033dd0:	f04f 0901 	mov.w	r9, #1
 8033dd4:	e79e      	b.n	8033d14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8033dd6:	449c      	add	ip, r3
 8033dd8:	1aff      	subs	r7, r7, r3
 8033dda:	f1b8 0f00 	cmp.w	r8, #0
 8033dde:	d009      	beq.n	8033df4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8033de0:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8033de4:	9019      	str	r0, [sp, #100]	@ 0x64
 8033de6:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8033dea:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8033dee:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8033df2:	911d      	str	r1, [sp, #116]	@ 0x74
 8033df4:	1ad2      	subs	r2, r2, r3
 8033df6:	e6b5      	b.n	8033b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8033df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8033dfa:	681b      	ldr	r3, [r3, #0]
 8033dfc:	b923      	cbnz	r3, 8033e08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8033dfe:	4b04      	ldr	r3, [pc, #16]	@ (8033e10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8033e00:	6818      	ldr	r0, [r3, #0]
 8033e02:	6803      	ldr	r3, [r0, #0]
 8033e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8033e06:	4798      	blx	r3
 8033e08:	b05b      	add	sp, #364	@ 0x16c
 8033e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8033e0e:	bf00      	nop
 8033e10:	2000b8e0 	.word	0x2000b8e0

08033e14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8033e14:	b570      	push	{r4, r5, r6, lr}
 8033e16:	4604      	mov	r4, r0
 8033e18:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8033e1c:	9805      	ldr	r0, [sp, #20]
 8033e1e:	6061      	str	r1, [r4, #4]
 8033e20:	2500      	movs	r5, #0
 8033e22:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8033e26:	8263      	strh	r3, [r4, #18]
 8033e28:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8033e2c:	8025      	strh	r5, [r4, #0]
 8033e2e:	7221      	strb	r1, [r4, #8]
 8033e30:	7266      	strb	r6, [r4, #9]
 8033e32:	60e0      	str	r0, [r4, #12]
 8033e34:	8222      	strh	r2, [r4, #16]
 8033e36:	82a3      	strh	r3, [r4, #20]
 8033e38:	82e5      	strh	r5, [r4, #22]
 8033e3a:	8325      	strh	r5, [r4, #24]
 8033e3c:	8365      	strh	r5, [r4, #26]
 8033e3e:	83a5      	strh	r5, [r4, #28]
 8033e40:	83e5      	strh	r5, [r4, #30]
 8033e42:	8425      	strh	r5, [r4, #32]
 8033e44:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8033e48:	b32e      	cbz	r6, 8033e96 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8033e4a:	6803      	ldr	r3, [r0, #0]
 8033e4c:	695b      	ldr	r3, [r3, #20]
 8033e4e:	4798      	blx	r3
 8033e50:	4606      	mov	r6, r0
 8033e52:	b300      	cbz	r0, 8033e96 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8033e54:	68e0      	ldr	r0, [r4, #12]
 8033e56:	6803      	ldr	r3, [r0, #0]
 8033e58:	4631      	mov	r1, r6
 8033e5a:	68db      	ldr	r3, [r3, #12]
 8033e5c:	4798      	blx	r3
 8033e5e:	4605      	mov	r5, r0
 8033e60:	b1c8      	cbz	r0, 8033e96 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8033e62:	7b43      	ldrb	r3, [r0, #13]
 8033e64:	7a82      	ldrb	r2, [r0, #10]
 8033e66:	005b      	lsls	r3, r3, #1
 8033e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8033e6c:	4313      	orrs	r3, r2
 8033e6e:	8423      	strh	r3, [r4, #32]
 8033e70:	7a63      	ldrb	r3, [r4, #9]
 8033e72:	2b06      	cmp	r3, #6
 8033e74:	d10f      	bne.n	8033e96 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8033e76:	68e0      	ldr	r0, [r4, #12]
 8033e78:	6803      	ldr	r3, [r0, #0]
 8033e7a:	462a      	mov	r2, r5
 8033e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8033e7e:	4631      	mov	r1, r6
 8033e80:	4798      	blx	r3
 8033e82:	7b6b      	ldrb	r3, [r5, #13]
 8033e84:	005b      	lsls	r3, r3, #1
 8033e86:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8033e8a:	7aab      	ldrb	r3, [r5, #10]
 8033e8c:	4313      	orrs	r3, r2
 8033e8e:	4418      	add	r0, r3
 8033e90:	8c23      	ldrh	r3, [r4, #32]
 8033e92:	4418      	add	r0, r3
 8033e94:	8420      	strh	r0, [r4, #32]
 8033e96:	4620      	mov	r0, r4
 8033e98:	bd70      	pop	{r4, r5, r6, pc}

08033e9a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8033e9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033e9e:	2400      	movs	r4, #0
 8033ea0:	b085      	sub	sp, #20
 8033ea2:	4681      	mov	r9, r0
 8033ea4:	4688      	mov	r8, r1
 8033ea6:	4692      	mov	sl, r2
 8033ea8:	469b      	mov	fp, r3
 8033eaa:	4627      	mov	r7, r4
 8033eac:	4625      	mov	r5, r4
 8033eae:	4626      	mov	r6, r4
 8033eb0:	4554      	cmp	r4, sl
 8033eb2:	da2a      	bge.n	8033f0a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8033eb4:	2300      	movs	r3, #0
 8033eb6:	9303      	str	r3, [sp, #12]
 8033eb8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8033ebc:	429d      	cmp	r5, r3
 8033ebe:	d004      	beq.n	8033eca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8033ec0:	f242 030b 	movw	r3, #8203	@ 0x200b
 8033ec4:	429d      	cmp	r5, r3
 8033ec6:	bf18      	it	ne
 8033ec8:	462f      	movne	r7, r5
 8033eca:	ab03      	add	r3, sp, #12
 8033ecc:	4642      	mov	r2, r8
 8033ece:	4659      	mov	r1, fp
 8033ed0:	4648      	mov	r0, r9
 8033ed2:	f003 f859 	bl	8036f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8033ed6:	4605      	mov	r5, r0
 8033ed8:	b1b8      	cbz	r0, 8033f0a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8033eda:	280a      	cmp	r0, #10
 8033edc:	d015      	beq.n	8033f0a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8033ede:	9a03      	ldr	r2, [sp, #12]
 8033ee0:	b18a      	cbz	r2, 8033f06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8033ee2:	7b50      	ldrb	r0, [r2, #13]
 8033ee4:	7a93      	ldrb	r3, [r2, #10]
 8033ee6:	8895      	ldrh	r5, [r2, #4]
 8033ee8:	0040      	lsls	r0, r0, #1
 8033eea:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8033eee:	4303      	orrs	r3, r0
 8033ef0:	9301      	str	r3, [sp, #4]
 8033ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8033ef6:	4639      	mov	r1, r7
 8033ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8033efa:	4640      	mov	r0, r8
 8033efc:	4798      	blx	r3
 8033efe:	9b01      	ldr	r3, [sp, #4]
 8033f00:	4418      	add	r0, r3
 8033f02:	4406      	add	r6, r0
 8033f04:	b2b6      	uxth	r6, r6
 8033f06:	3401      	adds	r4, #1
 8033f08:	e7d2      	b.n	8033eb0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8033f0a:	4630      	mov	r0, r6
 8033f0c:	b005      	add	sp, #20
 8033f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08033f12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8033f12:	2a02      	cmp	r2, #2
 8033f14:	b530      	push	{r4, r5, lr}
 8033f16:	d011      	beq.n	8033f3c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8033f18:	2a03      	cmp	r2, #3
 8033f1a:	d01c      	beq.n	8033f56 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8033f1c:	2a01      	cmp	r2, #1
 8033f1e:	d10c      	bne.n	8033f3a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8033f20:	888b      	ldrh	r3, [r1, #4]
 8033f22:	8801      	ldrh	r1, [r0, #0]
 8033f24:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8033f28:	8844      	ldrh	r4, [r0, #2]
 8033f2a:	8004      	strh	r4, [r0, #0]
 8033f2c:	1a5b      	subs	r3, r3, r1
 8033f2e:	1a9b      	subs	r3, r3, r2
 8033f30:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8033f34:	8043      	strh	r3, [r0, #2]
 8033f36:	8081      	strh	r1, [r0, #4]
 8033f38:	80c2      	strh	r2, [r0, #6]
 8033f3a:	bd30      	pop	{r4, r5, pc}
 8033f3c:	88cb      	ldrh	r3, [r1, #6]
 8033f3e:	8842      	ldrh	r2, [r0, #2]
 8033f40:	1a9b      	subs	r3, r3, r2
 8033f42:	88c2      	ldrh	r2, [r0, #6]
 8033f44:	1a9b      	subs	r3, r3, r2
 8033f46:	888a      	ldrh	r2, [r1, #4]
 8033f48:	8801      	ldrh	r1, [r0, #0]
 8033f4a:	8043      	strh	r3, [r0, #2]
 8033f4c:	1a52      	subs	r2, r2, r1
 8033f4e:	8881      	ldrh	r1, [r0, #4]
 8033f50:	1a52      	subs	r2, r2, r1
 8033f52:	8002      	strh	r2, [r0, #0]
 8033f54:	e7f1      	b.n	8033f3a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8033f56:	88cb      	ldrh	r3, [r1, #6]
 8033f58:	8841      	ldrh	r1, [r0, #2]
 8033f5a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8033f5e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8033f62:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8033f66:	8045      	strh	r5, [r0, #2]
 8033f68:	1a5b      	subs	r3, r3, r1
 8033f6a:	1a9b      	subs	r3, r3, r2
 8033f6c:	8003      	strh	r3, [r0, #0]
 8033f6e:	8082      	strh	r2, [r0, #4]
 8033f70:	80c4      	strh	r4, [r0, #6]
 8033f72:	e7e2      	b.n	8033f3a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08033f74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8033f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8033f78:	b09f      	sub	sp, #124	@ 0x7c
 8033f7a:	9116      	str	r1, [sp, #88]	@ 0x58
 8033f7c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8033f7e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8033f80:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8033f82:	8809      	ldrh	r1, [r1, #0]
 8033f84:	889b      	ldrh	r3, [r3, #4]
 8033f86:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 8033f8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8033f8c:	440b      	add	r3, r1
 8033f8e:	b21b      	sxth	r3, r3
 8033f90:	9310      	str	r3, [sp, #64]	@ 0x40
 8033f92:	f8d8 3000 	ldr.w	r3, [r8]
 8033f96:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
 8033f9a:	7b19      	ldrb	r1, [r3, #12]
 8033f9c:	7adb      	ldrb	r3, [r3, #11]
 8033f9e:	9011      	str	r0, [sp, #68]	@ 0x44
 8033fa0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8033fa4:	9114      	str	r1, [sp, #80]	@ 0x50
 8033fa6:	9315      	str	r3, [sp, #84]	@ 0x54
 8033fa8:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8033fac:	2a00      	cmp	r2, #0
 8033fae:	d06a      	beq.n	8034086 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8033fb0:	f898 3010 	ldrb.w	r3, [r8, #16]
 8033fb4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8033fb6:	2b06      	cmp	r3, #6
 8033fb8:	bf14      	ite	ne
 8033fba:	2301      	movne	r3, #1
 8033fbc:	2302      	moveq	r3, #2
 8033fbe:	4413      	add	r3, r2
 8033fc0:	f04f 0900 	mov.w	r9, #0
 8033fc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8033fc6:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8033fca:	464c      	mov	r4, r9
 8033fcc:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8033fd0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 8033fd4:	4293      	cmp	r3, r2
 8033fd6:	f280 808f 	bge.w	80340f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8033fda:	2300      	movs	r3, #0
 8033fdc:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8033fe0:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8033fe4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8033fe8:	429c      	cmp	r4, r3
 8033fea:	d006      	beq.n	8033ffa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8033fec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8033fee:	f242 020b 	movw	r2, #8203	@ 0x200b
 8033ff2:	4294      	cmp	r4, r2
 8033ff4:	bf18      	it	ne
 8033ff6:	4623      	movne	r3, r4
 8033ff8:	930d      	str	r3, [sp, #52]	@ 0x34
 8033ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8033ffc:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8033ffe:	f8d8 2000 	ldr.w	r2, [r8]
 8034002:	428b      	cmp	r3, r1
 8034004:	db41      	blt.n	803408a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8034006:	6813      	ldr	r3, [r2, #0]
 8034008:	4610      	mov	r0, r2
 803400a:	695b      	ldr	r3, [r3, #20]
 803400c:	4798      	blx	r3
 803400e:	4604      	mov	r4, r0
 8034010:	f8d8 0000 	ldr.w	r0, [r8]
 8034014:	6803      	ldr	r3, [r0, #0]
 8034016:	aa1d      	add	r2, sp, #116	@ 0x74
 8034018:	689d      	ldr	r5, [r3, #8]
 803401a:	4621      	mov	r1, r4
 803401c:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8034020:	47a8      	blx	r5
 8034022:	901c      	str	r0, [sp, #112]	@ 0x70
 8034024:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8034028:	429c      	cmp	r4, r3
 803402a:	f000 80eb 	beq.w	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 803402e:	f242 030b 	movw	r3, #8203	@ 0x200b
 8034032:	429c      	cmp	r4, r3
 8034034:	f000 80e6 	beq.w	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8034038:	2c00      	cmp	r4, #0
 803403a:	f000 80f8 	beq.w	803422e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 803403e:	2c0a      	cmp	r4, #10
 8034040:	d060      	beq.n	8034104 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8034042:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8034044:	b36a      	cbz	r2, 80340a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8034046:	8894      	ldrh	r4, [r2, #4]
 8034048:	f1bb 0f00 	cmp.w	fp, #0
 803404c:	d03b      	beq.n	80340c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 803404e:	f892 900d 	ldrb.w	r9, [r2, #13]
 8034052:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8034056:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 803405a:	f892 900a 	ldrb.w	r9, [r2, #10]
 803405e:	f1bb 0f01 	cmp.w	fp, #1
 8034062:	ea49 0903 	orr.w	r9, r9, r3
 8034066:	d134      	bne.n	80340d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8034068:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803406a:	eba6 0609 	sub.w	r6, r6, r9
 803406e:	2b00      	cmp	r3, #0
 8034070:	d14f      	bne.n	8034112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8034072:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8034074:	eb09 0306 	add.w	r3, r9, r6
 8034078:	4413      	add	r3, r2
 803407a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 803407c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8034080:	4293      	cmp	r3, r2
 8034082:	da51      	bge.n	8034128 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8034084:	e038      	b.n	80340f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8034086:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8034088:	e79a      	b.n	8033fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 803408a:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 803408e:	9301      	str	r3, [sp, #4]
 8034090:	ab1d      	add	r3, sp, #116	@ 0x74
 8034092:	9300      	str	r3, [sp, #0]
 8034094:	4659      	mov	r1, fp
 8034096:	ab1c      	add	r3, sp, #112	@ 0x70
 8034098:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 803409a:	f002 ffbe 	bl	803701a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 803409e:	4604      	mov	r4, r0
 80340a0:	e7c0      	b.n	8034024 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80340a2:	f8d8 0000 	ldr.w	r0, [r8]
 80340a6:	6803      	ldr	r3, [r0, #0]
 80340a8:	691b      	ldr	r3, [r3, #16]
 80340aa:	4798      	blx	r3
 80340ac:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80340b0:	4298      	cmp	r0, r3
 80340b2:	f000 80a7 	beq.w	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80340b6:	f242 030b 	movw	r3, #8203	@ 0x200b
 80340ba:	4298      	cmp	r0, r3
 80340bc:	f000 80a2 	beq.w	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80340c0:	f1bb 0f00 	cmp.w	fp, #0
 80340c4:	d100      	bne.n	80340c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80340c6:	444e      	add	r6, r9
 80340c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80340ca:	2a00      	cmp	r2, #0
 80340cc:	d1bf      	bne.n	803404e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80340ce:	4691      	mov	r9, r2
 80340d0:	e098      	b.n	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80340d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80340d4:	2b00      	cmp	r3, #0
 80340d6:	f000 80ac 	beq.w	8034232 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2be>
 80340da:	f1bb 0f00 	cmp.w	fp, #0
 80340de:	d118      	bne.n	8034112 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80340e0:	f8d8 0000 	ldr.w	r0, [r8]
 80340e4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80340e6:	6803      	ldr	r3, [r0, #0]
 80340e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80340ea:	4798      	blx	r3
 80340ec:	4406      	add	r6, r0
 80340ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80340f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80340f2:	1af3      	subs	r3, r6, r3
 80340f4:	4293      	cmp	r3, r2
 80340f6:	dd17      	ble.n	8034128 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80340f8:	2c00      	cmp	r4, #0
 80340fa:	f000 8098 	beq.w	803422e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 80340fe:	2c0a      	cmp	r4, #10
 8034100:	f040 8086 	bne.w	8034210 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8034104:	240a      	movs	r4, #10
 8034106:	fab4 f084 	clz	r0, r4
 803410a:	0940      	lsrs	r0, r0, #5
 803410c:	b01f      	add	sp, #124	@ 0x7c
 803410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034112:	f8d8 0000 	ldr.w	r0, [r8]
 8034116:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8034118:	6803      	ldr	r3, [r0, #0]
 803411a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803411c:	4798      	blx	r3
 803411e:	f1bb 0f01 	cmp.w	fp, #1
 8034122:	eba6 0600 	sub.w	r6, r6, r0
 8034126:	d0a4      	beq.n	8034072 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8034128:	981c      	ldr	r0, [sp, #112]	@ 0x70
 803412a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 803412c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8034130:	f9b3 7000 	ldrsh.w	r7, [r3]
 8034134:	7b43      	ldrb	r3, [r0, #13]
 8034136:	015b      	lsls	r3, r3, #5
 8034138:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 803413c:	7983      	ldrb	r3, [r0, #6]
 803413e:	4431      	add	r1, r6
 8034140:	4313      	orrs	r3, r2
 8034142:	440b      	add	r3, r1
 8034144:	42bb      	cmp	r3, r7
 8034146:	db5d      	blt.n	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8034148:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803414a:	4299      	cmp	r1, r3
 803414c:	da5a      	bge.n	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 803414e:	f8d8 0000 	ldr.w	r0, [r8]
 8034152:	6803      	ldr	r3, [r0, #0]
 8034154:	42b7      	cmp	r7, r6
 8034156:	bfc8      	it	gt
 8034158:	1bbf      	subgt	r7, r7, r6
 803415a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803415c:	bfcc      	ite	gt
 803415e:	b2bf      	uxthgt	r7, r7
 8034160:	2700      	movle	r7, #0
 8034162:	4798      	blx	r3
 8034164:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8034166:	7b5a      	ldrb	r2, [r3, #13]
 8034168:	00d1      	lsls	r1, r2, #3
 803416a:	f401 7580 	and.w	r5, r1, #256	@ 0x100
 803416e:	7a19      	ldrb	r1, [r3, #8]
 8034170:	4329      	orrs	r1, r5
 8034172:	0655      	lsls	r5, r2, #25
 8034174:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8034176:	bf44      	itt	mi
 8034178:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 803417c:	b209      	sxthmi	r1, r1
 803417e:	1945      	adds	r5, r0, r5
 8034180:	1a6d      	subs	r5, r5, r1
 8034182:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8034184:	b2ad      	uxth	r5, r5
 8034186:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 803418a:	fa0f fa85 	sxth.w	sl, r5
 803418e:	4551      	cmp	r1, sl
 8034190:	dd3c      	ble.n	803420c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8034192:	0112      	lsls	r2, r2, #4
 8034194:	79d8      	ldrb	r0, [r3, #7]
 8034196:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 803419a:	4302      	orrs	r2, r0
 803419c:	4492      	add	sl, r2
 803419e:	4551      	cmp	r1, sl
 80341a0:	dc30      	bgt.n	8034204 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80341a2:	1b4d      	subs	r5, r1, r5
 80341a4:	b22d      	sxth	r5, r5
 80341a6:	468a      	mov	sl, r1
 80341a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80341aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80341ac:	f8d8 0000 	ldr.w	r0, [r8]
 80341b0:	681a      	ldr	r2, [r3, #0]
 80341b2:	6801      	ldr	r1, [r0, #0]
 80341b4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80341b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80341b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80341ba:	9218      	str	r2, [sp, #96]	@ 0x60
 80341bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80341be:	4788      	blx	r1
 80341c0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80341c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80341c6:	f898 100e 	ldrb.w	r1, [r8, #14]
 80341ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80341cc:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 80341d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80341d2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80341d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80341d8:	9305      	str	r3, [sp, #20]
 80341da:	b2ad      	uxth	r5, r5
 80341dc:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80341e0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80341e4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80341e6:	9304      	str	r3, [sp, #16]
 80341e8:	4437      	add	r7, r6
 80341ea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80341ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80341ee:	9206      	str	r2, [sp, #24]
 80341f0:	b23f      	sxth	r7, r7
 80341f2:	f8cd a004 	str.w	sl, [sp, #4]
 80341f6:	9700      	str	r7, [sp, #0]
 80341f8:	681a      	ldr	r2, [r3, #0]
 80341fa:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80341fc:	685b      	ldr	r3, [r3, #4]
 80341fe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8034200:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8034202:	47a8      	blx	r5
 8034204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8034206:	3301      	adds	r3, #1
 8034208:	930e      	str	r3, [sp, #56]	@ 0x38
 803420a:	e6e1      	b.n	8033fd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 803420c:	2500      	movs	r5, #0
 803420e:	e7cb      	b.n	80341a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8034210:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8034212:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8034214:	3501      	adds	r5, #1
 8034216:	429d      	cmp	r5, r3
 8034218:	f6bf af75 	bge.w	8034106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 803421c:	4659      	mov	r1, fp
 803421e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8034220:	f7f8 fdb6 	bl	802cd90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8034224:	4604      	mov	r4, r0
 8034226:	b110      	cbz	r0, 803422e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 8034228:	280a      	cmp	r0, #10
 803422a:	d1f2      	bne.n	8034212 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 803422c:	e76a      	b.n	8034104 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 803422e:	2400      	movs	r4, #0
 8034230:	e769      	b.n	8034106 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8034232:	f1bb 0f00 	cmp.w	fp, #0
 8034236:	f43f af5a 	beq.w	80340ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 803423a:	e775      	b.n	8034128 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0803423c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 803423c:	b530      	push	{r4, r5, lr}
 803423e:	8ac4      	ldrh	r4, [r0, #22]
 8034240:	8b45      	ldrh	r5, [r0, #26]
 8034242:	8343      	strh	r3, [r0, #26]
 8034244:	442c      	add	r4, r5
 8034246:	1ae4      	subs	r4, r4, r3
 8034248:	82c4      	strh	r4, [r0, #22]
 803424a:	8b83      	ldrh	r3, [r0, #28]
 803424c:	8b04      	ldrh	r4, [r0, #24]
 803424e:	4422      	add	r2, r4
 8034250:	440c      	add	r4, r1
 8034252:	1a59      	subs	r1, r3, r1
 8034254:	83c2      	strh	r2, [r0, #30]
 8034256:	8304      	strh	r4, [r0, #24]
 8034258:	8381      	strh	r1, [r0, #28]
 803425a:	bd30      	pop	{r4, r5, pc}

0803425c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 803425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034260:	4604      	mov	r4, r0
 8034262:	8a47      	ldrh	r7, [r0, #18]
 8034264:	68c0      	ldr	r0, [r0, #12]
 8034266:	6803      	ldr	r3, [r0, #0]
 8034268:	b085      	sub	sp, #20
 803426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803426c:	4798      	blx	r3
 803426e:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8034272:	7a63      	ldrb	r3, [r4, #9]
 8034274:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8034278:	42b7      	cmp	r7, r6
 803427a:	f103 33ff 	add.w	r3, r3, #4294967295
 803427e:	bfac      	ite	ge
 8034280:	f04f 0900 	movge.w	r9, #0
 8034284:	f04f 0901 	movlt.w	r9, #1
 8034288:	2b05      	cmp	r3, #5
 803428a:	d804      	bhi.n	8034296 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 803428c:	e8df f003 	tbb	[pc, r3]
 8034290:	470e0854 	.word	0x470e0854
 8034294:	4c4c      	.short	0x4c4c
 8034296:	2500      	movs	r5, #0
 8034298:	46a9      	mov	r9, r5
 803429a:	462e      	mov	r6, r5
 803429c:	462f      	mov	r7, r5
 803429e:	e00d      	b.n	80342bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80342a0:	42b7      	cmp	r7, r6
 80342a2:	bfb4      	ite	lt
 80342a4:	2600      	movlt	r6, #0
 80342a6:	2601      	movge	r6, #1
 80342a8:	2500      	movs	r5, #0
 80342aa:	e7f7      	b.n	803429c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 80342ac:	42b7      	cmp	r7, r6
 80342ae:	464d      	mov	r5, r9
 80342b0:	f04f 0900 	mov.w	r9, #0
 80342b4:	bfb4      	ite	lt
 80342b6:	2600      	movlt	r6, #0
 80342b8:	2601      	movge	r6, #1
 80342ba:	464f      	mov	r7, r9
 80342bc:	f04f 0800 	mov.w	r8, #0
 80342c0:	f8a4 8016 	strh.w	r8, [r4, #22]
 80342c4:	f8a4 8018 	strh.w	r8, [r4, #24]
 80342c8:	f8cd 8004 	str.w	r8, [sp, #4]
 80342cc:	2300      	movs	r3, #0
 80342ce:	9303      	str	r3, [sp, #12]
 80342d0:	8823      	ldrh	r3, [r4, #0]
 80342d2:	2b20      	cmp	r3, #32
 80342d4:	d034      	beq.n	8034340 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 80342d6:	f242 010b 	movw	r1, #8203	@ 0x200b
 80342da:	1a5a      	subs	r2, r3, r1
 80342dc:	f1d2 0a00 	rsbs	sl, r2, #0
 80342e0:	eb4a 0a02 	adc.w	sl, sl, r2
 80342e4:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80342e8:	4293      	cmp	r3, r2
 80342ea:	d009      	beq.n	8034300 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 80342ec:	428b      	cmp	r3, r1
 80342ee:	9a01      	ldr	r2, [sp, #4]
 80342f0:	bf18      	it	ne
 80342f2:	461a      	movne	r2, r3
 80342f4:	9201      	str	r2, [sp, #4]
 80342f6:	bf0c      	ite	eq
 80342f8:	f04f 0a01 	moveq.w	sl, #1
 80342fc:	f04f 0a00 	movne.w	sl, #0
 8034300:	ab03      	add	r3, sp, #12
 8034302:	68e2      	ldr	r2, [r4, #12]
 8034304:	7a21      	ldrb	r1, [r4, #8]
 8034306:	6860      	ldr	r0, [r4, #4]
 8034308:	f002 fe3e 	bl	8036f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 803430c:	8020      	strh	r0, [r4, #0]
 803430e:	b9d8      	cbnz	r0, 8034348 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 8034310:	8ba2      	ldrh	r2, [r4, #28]
 8034312:	2300      	movs	r3, #0
 8034314:	4611      	mov	r1, r2
 8034316:	4620      	mov	r0, r4
 8034318:	f7ff ff90 	bl	803423c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 803431c:	e06e      	b.n	80343fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 803431e:	2500      	movs	r5, #0
 8034320:	46a9      	mov	r9, r5
 8034322:	462e      	mov	r6, r5
 8034324:	2701      	movs	r7, #1
 8034326:	e7c9      	b.n	80342bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8034328:	42b7      	cmp	r7, r6
 803432a:	f04f 0500 	mov.w	r5, #0
 803432e:	bfb4      	ite	lt
 8034330:	2700      	movlt	r7, #0
 8034332:	2701      	movge	r7, #1
 8034334:	462e      	mov	r6, r5
 8034336:	e7c1      	b.n	80342bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8034338:	2500      	movs	r5, #0
 803433a:	46a9      	mov	r9, r5
 803433c:	2601      	movs	r6, #1
 803433e:	e7ad      	b.n	803429c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8034340:	9301      	str	r3, [sp, #4]
 8034342:	f04f 0a01 	mov.w	sl, #1
 8034346:	e7db      	b.n	8034300 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 8034348:	8b63      	ldrh	r3, [r4, #26]
 803434a:	280a      	cmp	r0, #10
 803434c:	f103 0301 	add.w	r3, r3, #1
 8034350:	8363      	strh	r3, [r4, #26]
 8034352:	d0dd      	beq.n	8034310 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 8034354:	9a03      	ldr	r2, [sp, #12]
 8034356:	bb62      	cbnz	r2, 80343b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 8034358:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 803435c:	4298      	cmp	r0, r3
 803435e:	d003      	beq.n	8034368 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 8034360:	f242 030b 	movw	r3, #8203	@ 0x200b
 8034364:	4298      	cmp	r0, r3
 8034366:	d1b1      	bne.n	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8034368:	8823      	ldrh	r3, [r4, #0]
 803436a:	8ba1      	ldrh	r1, [r4, #28]
 803436c:	2b20      	cmp	r3, #32
 803436e:	d003      	beq.n	8034378 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 8034370:	f242 000b 	movw	r0, #8203	@ 0x200b
 8034374:	4283      	cmp	r3, r0
 8034376:	d131      	bne.n	80343dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 8034378:	f1ba 0f00 	cmp.w	sl, #0
 803437c:	bf0a      	itet	eq
 803437e:	4688      	moveq	r8, r1
 8034380:	4650      	movne	r0, sl
 8034382:	2001      	moveq	r0, #1
 8034384:	440a      	add	r2, r1
 8034386:	8b23      	ldrh	r3, [r4, #24]
 8034388:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 803438c:	b292      	uxth	r2, r2
 803438e:	83a2      	strh	r2, [r4, #28]
 8034390:	4413      	add	r3, r2
 8034392:	f1b9 0f00 	cmp.w	r9, #0
 8034396:	d102      	bne.n	803439e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 8034398:	2d00      	cmp	r5, #0
 803439a:	d042      	beq.n	8034422 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 803439c:	b300      	cbz	r0, 80343e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 803439e:	8c21      	ldrh	r1, [r4, #32]
 80343a0:	4419      	add	r1, r3
 80343a2:	458c      	cmp	ip, r1
 80343a4:	da37      	bge.n	8034416 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 80343a6:	8ae1      	ldrh	r1, [r4, #22]
 80343a8:	2900      	cmp	r1, #0
 80343aa:	d034      	beq.n	8034416 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 80343ac:	4563      	cmp	r3, ip
 80343ae:	dd8d      	ble.n	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80343b0:	e01d      	b.n	80343ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 80343b2:	8893      	ldrh	r3, [r2, #4]
 80343b4:	8023      	strh	r3, [r4, #0]
 80343b6:	f892 b00d 	ldrb.w	fp, [r2, #13]
 80343ba:	9901      	ldr	r1, [sp, #4]
 80343bc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 80343c0:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 80343c4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 80343c8:	ea4b 0b00 	orr.w	fp, fp, r0
 80343cc:	68e0      	ldr	r0, [r4, #12]
 80343ce:	6803      	ldr	r3, [r0, #0]
 80343d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80343d2:	4798      	blx	r3
 80343d4:	eb0b 0200 	add.w	r2, fp, r0
 80343d8:	b292      	uxth	r2, r2
 80343da:	e7c5      	b.n	8034368 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 80343dc:	2000      	movs	r0, #0
 80343de:	e7d1      	b.n	8034384 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 80343e0:	4563      	cmp	r3, ip
 80343e2:	f77f af73 	ble.w	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80343e6:	8ae3      	ldrh	r3, [r4, #22]
 80343e8:	2b00      	cmp	r3, #0
 80343ea:	f43f af6f 	beq.w	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80343ee:	2301      	movs	r3, #1
 80343f0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 80343f4:	8c22      	ldrh	r2, [r4, #32]
 80343f6:	8be3      	ldrh	r3, [r4, #30]
 80343f8:	4413      	add	r3, r2
 80343fa:	83e3      	strh	r3, [r4, #30]
 80343fc:	68e0      	ldr	r0, [r4, #12]
 80343fe:	6803      	ldr	r3, [r0, #0]
 8034400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8034402:	4798      	blx	r3
 8034404:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8034408:	4418      	add	r0, r3
 803440a:	8a63      	ldrh	r3, [r4, #18]
 803440c:	1a18      	subs	r0, r3, r0
 803440e:	8260      	strh	r0, [r4, #18]
 8034410:	b005      	add	sp, #20
 8034412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034416:	2300      	movs	r3, #0
 8034418:	4611      	mov	r1, r2
 803441a:	4620      	mov	r0, r4
 803441c:	f7ff ff0e 	bl	803423c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8034420:	e754      	b.n	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8034422:	4563      	cmp	r3, ip
 8034424:	dd14      	ble.n	8034450 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 8034426:	b117      	cbz	r7, 803442e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 8034428:	2301      	movs	r3, #1
 803442a:	460a      	mov	r2, r1
 803442c:	e772      	b.n	8034314 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 803442e:	2e00      	cmp	r6, #0
 8034430:	f43f af4c 	beq.w	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8034434:	2800      	cmp	r0, #0
 8034436:	f47f af49 	bne.w	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 803443a:	f1ba 0f00 	cmp.w	sl, #0
 803443e:	d002      	beq.n	8034446 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 8034440:	2301      	movs	r3, #1
 8034442:	4642      	mov	r2, r8
 8034444:	e767      	b.n	8034316 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 8034446:	8ae3      	ldrh	r3, [r4, #22]
 8034448:	2b00      	cmp	r3, #0
 803444a:	f43f af3f 	beq.w	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 803444e:	e7d5      	b.n	80343fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 8034450:	2800      	cmp	r0, #0
 8034452:	f47f af3b 	bne.w	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8034456:	f1ba 0f00 	cmp.w	sl, #0
 803445a:	f43f af37 	beq.w	80342cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 803445e:	2301      	movs	r3, #1
 8034460:	4642      	mov	r2, r8
 8034462:	e7da      	b.n	803441a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

08034464 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8034464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034466:	4605      	mov	r5, r0
 8034468:	b08f      	sub	sp, #60	@ 0x3c
 803446a:	4617      	mov	r7, r2
 803446c:	461c      	mov	r4, r3
 803446e:	460e      	mov	r6, r1
 8034470:	b1d1      	cbz	r1, 80344a8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8034472:	681b      	ldr	r3, [r3, #0]
 8034474:	4620      	mov	r0, r4
 8034476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8034478:	4798      	blx	r3
 803447a:	4240      	negs	r0, r0
 803447c:	b200      	sxth	r0, r0
 803447e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8034482:	9603      	str	r6, [sp, #12]
 8034484:	9700      	str	r7, [sp, #0]
 8034486:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 803448a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 803448e:	4629      	mov	r1, r5
 8034490:	a805      	add	r0, sp, #20
 8034492:	f7ff fcbf 	bl	8033e14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8034496:	2401      	movs	r4, #1
 8034498:	a805      	add	r0, sp, #20
 803449a:	f7ff fedf 	bl	803425c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 803449e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80344a2:	b163      	cbz	r3, 80344be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80344a4:	3401      	adds	r4, #1
 80344a6:	e7f7      	b.n	8034498 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80344a8:	f002 fe3c 	bl	8037124 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80344ac:	2401      	movs	r4, #1
 80344ae:	280a      	cmp	r0, #10
 80344b0:	4628      	mov	r0, r5
 80344b2:	bf08      	it	eq
 80344b4:	3401      	addeq	r4, #1
 80344b6:	f002 fe35 	bl	8037124 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80344ba:	2800      	cmp	r0, #0
 80344bc:	d1f7      	bne.n	80344ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 80344be:	b2a0      	uxth	r0, r4
 80344c0:	b00f      	add	sp, #60	@ 0x3c
 80344c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080344c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80344c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80344c8:	b0e3      	sub	sp, #396	@ 0x18c
 80344ca:	461c      	mov	r4, r3
 80344cc:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 80344ce:	4683      	mov	fp, r0
 80344d0:	4688      	mov	r8, r1
 80344d2:	2b00      	cmp	r3, #0
 80344d4:	f000 8112 	beq.w	80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80344d8:	6823      	ldr	r3, [r4, #0]
 80344da:	2b00      	cmp	r3, #0
 80344dc:	f000 810e 	beq.w	80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80344e0:	7ba3      	ldrb	r3, [r4, #14]
 80344e2:	2b00      	cmp	r3, #0
 80344e4:	f000 810a 	beq.w	80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80344e8:	6810      	ldr	r0, [r2, #0]
 80344ea:	6851      	ldr	r1, [r2, #4]
 80344ec:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80344f0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 80344f4:	ad0a      	add	r5, sp, #40	@ 0x28
 80344f6:	462b      	mov	r3, r5
 80344f8:	c303      	stmia	r3!, {r0, r1}
 80344fa:	2100      	movs	r1, #0
 80344fc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8034500:	910c      	str	r1, [sp, #48]	@ 0x30
 8034502:	79a2      	ldrb	r2, [r4, #6]
 8034504:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8034508:	a90c      	add	r1, sp, #48	@ 0x30
 803450a:	4628      	mov	r0, r5
 803450c:	f7ff fd01 	bl	8033f12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8034510:	a90c      	add	r1, sp, #48	@ 0x30
 8034512:	4608      	mov	r0, r1
 8034514:	79a2      	ldrb	r2, [r4, #6]
 8034516:	f7ff fcfc 	bl	8033f12 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 803451a:	a817      	add	r0, sp, #92	@ 0x5c
 803451c:	f002 f9d7 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
 8034520:	6820      	ldr	r0, [r4, #0]
 8034522:	6803      	ldr	r3, [r0, #0]
 8034524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8034526:	4798      	blx	r3
 8034528:	4606      	mov	r6, r0
 803452a:	6820      	ldr	r0, [r4, #0]
 803452c:	6803      	ldr	r3, [r0, #0]
 803452e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8034530:	4798      	blx	r3
 8034532:	4633      	mov	r3, r6
 8034534:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 8034536:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8034538:	9000      	str	r0, [sp, #0]
 803453a:	a817      	add	r0, sp, #92	@ 0x5c
 803453c:	f002 fa22 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8034540:	6820      	ldr	r0, [r4, #0]
 8034542:	f894 a004 	ldrb.w	sl, [r4, #4]
 8034546:	6803      	ldr	r3, [r0, #0]
 8034548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803454a:	4798      	blx	r3
 803454c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8034550:	6823      	ldr	r3, [r4, #0]
 8034552:	4607      	mov	r7, r0
 8034554:	4406      	add	r6, r0
 8034556:	a830      	add	r0, sp, #192	@ 0xc0
 8034558:	f893 9009 	ldrb.w	r9, [r3, #9]
 803455c:	f002 f9b7 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
 8034560:	7c23      	ldrb	r3, [r4, #16]
 8034562:	b17b      	cbz	r3, 8034584 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8034564:	6820      	ldr	r0, [r4, #0]
 8034566:	6803      	ldr	r3, [r0, #0]
 8034568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 803456a:	4798      	blx	r3
 803456c:	9009      	str	r0, [sp, #36]	@ 0x24
 803456e:	6820      	ldr	r0, [r4, #0]
 8034570:	6802      	ldr	r2, [r0, #0]
 8034572:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8034574:	4790      	blx	r2
 8034576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8034578:	9000      	str	r0, [sp, #0]
 803457a:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 803457c:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 803457e:	a830      	add	r0, sp, #192	@ 0xc0
 8034580:	f002 fa00 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8034584:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8034588:	7be2      	ldrb	r2, [r4, #15]
 803458a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 803458e:	1a8a      	subs	r2, r1, r2
 8034590:	7c21      	ldrb	r1, [r4, #16]
 8034592:	9103      	str	r1, [sp, #12]
 8034594:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8034598:	9102      	str	r1, [sp, #8]
 803459a:	6821      	ldr	r1, [r4, #0]
 803459c:	9101      	str	r1, [sp, #4]
 803459e:	7961      	ldrb	r1, [r4, #5]
 80345a0:	9100      	str	r1, [sp, #0]
 80345a2:	b292      	uxth	r2, r2
 80345a4:	a930      	add	r1, sp, #192	@ 0xc0
 80345a6:	a80e      	add	r0, sp, #56	@ 0x38
 80345a8:	f7ff fc34 	bl	8033e14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80345ac:	2e00      	cmp	r6, #0
 80345ae:	dc5b      	bgt.n	8034668 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80345b0:	af17      	add	r7, sp, #92	@ 0x5c
 80345b2:	f04f 0900 	mov.w	r9, #0
 80345b6:	7c23      	ldrb	r3, [r4, #16]
 80345b8:	2b00      	cmp	r3, #0
 80345ba:	f000 80b1 	beq.w	8034720 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 80345be:	a80e      	add	r0, sp, #56	@ 0x38
 80345c0:	f7ff fe4c 	bl	803425c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80345c4:	f1ba 0f00 	cmp.w	sl, #0
 80345c8:	f000 80a5 	beq.w	8034716 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80345cc:	7c23      	ldrb	r3, [r4, #16]
 80345ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80345d0:	2264      	movs	r2, #100	@ 0x64
 80345d2:	4639      	mov	r1, r7
 80345d4:	a849      	add	r0, sp, #292	@ 0x124
 80345d6:	f009 f925 	bl	803d824 <memcpy>
 80345da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80345dc:	2b00      	cmp	r3, #0
 80345de:	f000 80a7 	beq.w	8034730 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 80345e2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 80345e6:	7922      	ldrb	r2, [r4, #4]
 80345e8:	2a01      	cmp	r2, #1
 80345ea:	f040 808a 	bne.w	8034702 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 80345ee:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 80345f2:	1ac0      	subs	r0, r0, r3
 80345f4:	2302      	movs	r3, #2
 80345f6:	fb90 f0f3 	sdiv	r0, r0, r3
 80345fa:	b200      	sxth	r0, r0
 80345fc:	7c23      	ldrb	r3, [r4, #16]
 80345fe:	2b00      	cmp	r3, #0
 8034600:	f000 808b 	beq.w	803471a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8034604:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8034608:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 803460c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8034610:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8034614:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8034618:	4410      	add	r0, r2
 803461a:	b200      	sxth	r0, r0
 803461c:	9000      	str	r0, [sp, #0]
 803461e:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8034622:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8034626:	4642      	mov	r2, r8
 8034628:	2100      	movs	r1, #0
 803462a:	4658      	mov	r0, fp
 803462c:	f7ff fca2 	bl	8033f74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8034630:	2800      	cmp	r0, #0
 8034632:	d163      	bne.n	80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8034634:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8034638:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 803463c:	b2b2      	uxth	r2, r6
 803463e:	4413      	add	r3, r2
 8034640:	1a8a      	subs	r2, r1, r2
 8034642:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8034646:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 803464a:	b21b      	sxth	r3, r3
 803464c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8034650:	2a00      	cmp	r2, #0
 8034652:	d153      	bne.n	80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8034654:	6822      	ldr	r2, [r4, #0]
 8034656:	8869      	ldrh	r1, [r5, #2]
 8034658:	7a12      	ldrb	r2, [r2, #8]
 803465a:	1a9b      	subs	r3, r3, r2
 803465c:	88ea      	ldrh	r2, [r5, #6]
 803465e:	440a      	add	r2, r1
 8034660:	b212      	sxth	r2, r2
 8034662:	4293      	cmp	r3, r2
 8034664:	dda7      	ble.n	80345b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8034666:	e049      	b.n	80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8034668:	7c23      	ldrb	r3, [r4, #16]
 803466a:	444f      	add	r7, r9
 803466c:	b1c3      	cbz	r3, 80346a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 803466e:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8034672:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8034676:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 803467a:	443b      	add	r3, r7
 803467c:	4293      	cmp	r3, r2
 803467e:	da97      	bge.n	80345b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8034680:	a80e      	add	r0, sp, #56	@ 0x38
 8034682:	f7ff fdeb 	bl	803425c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8034686:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 803468a:	3b01      	subs	r3, #1
 803468c:	b29b      	uxth	r3, r3
 803468e:	454b      	cmp	r3, r9
 8034690:	9309      	str	r3, [sp, #36]	@ 0x24
 8034692:	d021      	beq.n	80346d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8034694:	7961      	ldrb	r1, [r4, #5]
 8034696:	a817      	add	r0, sp, #92	@ 0x5c
 8034698:	f7f8 fb7a 	bl	802cd90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 803469c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803469e:	e7f4      	b.n	803468a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80346a0:	fa1f f986 	uxth.w	r9, r6
 80346a4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80346a8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80346ac:	443b      	add	r3, r7
 80346ae:	4293      	cmp	r3, r2
 80346b0:	f6bf af7e 	bge.w	80345b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80346b4:	a817      	add	r0, sp, #92	@ 0x5c
 80346b6:	f002 fd35 	bl	8037124 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80346ba:	b1f8      	cbz	r0, 80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80346bc:	280a      	cmp	r0, #10
 80346be:	d1f1      	bne.n	80346a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80346c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80346c4:	444b      	add	r3, r9
 80346c6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80346ca:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80346ce:	eba3 0309 	sub.w	r3, r3, r9
 80346d2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80346d6:	e7e5      	b.n	80346a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80346d8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80346dc:	b2b3      	uxth	r3, r6
 80346de:	441a      	add	r2, r3
 80346e0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80346e4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 80346e8:	1ad3      	subs	r3, r2, r3
 80346ea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80346ee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80346f2:	b11b      	cbz	r3, 80346fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80346f4:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 80346f8:	2b00      	cmp	r3, #0
 80346fa:	d0ba      	beq.n	8034672 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80346fc:	b063      	add	sp, #396	@ 0x18c
 80346fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034702:	2a02      	cmp	r2, #2
 8034704:	d105      	bne.n	8034712 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8034706:	7be2      	ldrb	r2, [r4, #15]
 8034708:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 803470c:	1a80      	subs	r0, r0, r2
 803470e:	1ac0      	subs	r0, r0, r3
 8034710:	e773      	b.n	80345fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8034712:	2000      	movs	r0, #0
 8034714:	e772      	b.n	80345fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8034716:	7be0      	ldrb	r0, [r4, #15]
 8034718:	e770      	b.n	80345fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 803471a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 803471e:	e773      	b.n	8034608 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8034720:	f1ba 0f00 	cmp.w	sl, #0
 8034724:	d0f7      	beq.n	8034716 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8034726:	2264      	movs	r2, #100	@ 0x64
 8034728:	4639      	mov	r1, r7
 803472a:	a849      	add	r0, sp, #292	@ 0x124
 803472c:	f009 f87a 	bl	803d824 <memcpy>
 8034730:	2300      	movs	r3, #0
 8034732:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8034736:	6821      	ldr	r1, [r4, #0]
 8034738:	a849      	add	r0, sp, #292	@ 0x124
 803473a:	f7ff fbae 	bl	8033e9a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 803473e:	b203      	sxth	r3, r0
 8034740:	e751      	b.n	80345e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08034742 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8034742:	2b03      	cmp	r3, #3
 8034744:	d818      	bhi.n	8034778 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8034746:	e8df f003 	tbb	[pc, r3]
 803474a:	0602      	.short	0x0602
 803474c:	130d      	.short	0x130d
 803474e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8034752:	1850      	adds	r0, r2, r1
 8034754:	4770      	bx	lr
 8034756:	8803      	ldrh	r3, [r0, #0]
 8034758:	8880      	ldrh	r0, [r0, #4]
 803475a:	4418      	add	r0, r3
 803475c:	b200      	sxth	r0, r0
 803475e:	1a80      	subs	r0, r0, r2
 8034760:	3801      	subs	r0, #1
 8034762:	4770      	bx	lr
 8034764:	8803      	ldrh	r3, [r0, #0]
 8034766:	8880      	ldrh	r0, [r0, #4]
 8034768:	4418      	add	r0, r3
 803476a:	b200      	sxth	r0, r0
 803476c:	1a40      	subs	r0, r0, r1
 803476e:	e7f7      	b.n	8034760 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8034770:	f9b0 0000 	ldrsh.w	r0, [r0]
 8034774:	4410      	add	r0, r2
 8034776:	4770      	bx	lr
 8034778:	2000      	movs	r0, #0
 803477a:	4770      	bx	lr

0803477c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 803477c:	2b03      	cmp	r3, #3
 803477e:	d817      	bhi.n	80347b0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8034780:	e8df f003 	tbb	[pc, r3]
 8034784:	10090602 	.word	0x10090602
 8034788:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 803478c:	1850      	adds	r0, r2, r1
 803478e:	4770      	bx	lr
 8034790:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8034794:	e7fa      	b.n	803478c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8034796:	8843      	ldrh	r3, [r0, #2]
 8034798:	88c0      	ldrh	r0, [r0, #6]
 803479a:	4418      	add	r0, r3
 803479c:	b200      	sxth	r0, r0
 803479e:	1a80      	subs	r0, r0, r2
 80347a0:	3801      	subs	r0, #1
 80347a2:	4770      	bx	lr
 80347a4:	8843      	ldrh	r3, [r0, #2]
 80347a6:	88c0      	ldrh	r0, [r0, #6]
 80347a8:	4418      	add	r0, r3
 80347aa:	b200      	sxth	r0, r0
 80347ac:	1a40      	subs	r0, r0, r1
 80347ae:	e7f7      	b.n	80347a0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80347b0:	2000      	movs	r0, #0
 80347b2:	4770      	bx	lr

080347b4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80347b4:	4b01      	ldr	r3, [pc, #4]	@ (80347bc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80347b6:	2200      	movs	r2, #0
 80347b8:	601a      	str	r2, [r3, #0]
 80347ba:	4770      	bx	lr
 80347bc:	2000b8e8 	.word	0x2000b8e8

080347c0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80347c0:	4603      	mov	r3, r0
 80347c2:	b1c8      	cbz	r0, 80347f8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80347c4:	0c02      	lsrs	r2, r0, #16
 80347c6:	0412      	lsls	r2, r2, #16
 80347c8:	b9a2      	cbnz	r2, 80347f4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80347ca:	0403      	lsls	r3, r0, #16
 80347cc:	2010      	movs	r0, #16
 80347ce:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 80347d2:	bf04      	itt	eq
 80347d4:	021b      	lsleq	r3, r3, #8
 80347d6:	3008      	addeq	r0, #8
 80347d8:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 80347dc:	bf04      	itt	eq
 80347de:	011b      	lsleq	r3, r3, #4
 80347e0:	3004      	addeq	r0, #4
 80347e2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 80347e6:	bf04      	itt	eq
 80347e8:	009b      	lsleq	r3, r3, #2
 80347ea:	3002      	addeq	r0, #2
 80347ec:	2b00      	cmp	r3, #0
 80347ee:	db04      	blt.n	80347fa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80347f0:	3001      	adds	r0, #1
 80347f2:	4770      	bx	lr
 80347f4:	2000      	movs	r0, #0
 80347f6:	e7ea      	b.n	80347ce <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80347f8:	2020      	movs	r0, #32
 80347fa:	4770      	bx	lr

080347fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80347fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034800:	b087      	sub	sp, #28
 8034802:	460d      	mov	r5, r1
 8034804:	4616      	mov	r6, r2
 8034806:	4698      	mov	r8, r3
 8034808:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 803480c:	4601      	mov	r1, r0
 803480e:	b120      	cbz	r0, 803481a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8034810:	b11a      	cbz	r2, 803481a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8034812:	2d1f      	cmp	r5, #31
 8034814:	d801      	bhi.n	803481a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8034816:	2b1f      	cmp	r3, #31
 8034818:	d904      	bls.n	8034824 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 803481a:	2000      	movs	r0, #0
 803481c:	6038      	str	r0, [r7, #0]
 803481e:	b007      	add	sp, #28
 8034820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8034824:	b97d      	cbnz	r5, 8034846 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8034826:	b143      	cbz	r3, 803483a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8034828:	4602      	mov	r2, r0
 803482a:	e9cd 4700 	strd	r4, r7, [sp]
 803482e:	462b      	mov	r3, r5
 8034830:	4641      	mov	r1, r8
 8034832:	4630      	mov	r0, r6
 8034834:	f7ff ffe2 	bl	80347fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8034838:	e7f1      	b.n	803481e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 803483a:	f04f 33ff 	mov.w	r3, #4294967295
 803483e:	603b      	str	r3, [r7, #0]
 8034840:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8034844:	e7eb      	b.n	803481e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8034846:	fa32 fa05 	lsrs.w	sl, r2, r5
 803484a:	d106      	bne.n	803485a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 803484c:	4346      	muls	r6, r0
 803484e:	fbb6 f0f4 	udiv	r0, r6, r4
 8034852:	fb04 6610 	mls	r6, r4, r0, r6
 8034856:	603e      	str	r6, [r7, #0]
 8034858:	e7e1      	b.n	803481e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 803485a:	2201      	movs	r2, #1
 803485c:	40aa      	lsls	r2, r5
 803485e:	3a01      	subs	r2, #1
 8034860:	4016      	ands	r6, r2
 8034862:	fa00 fb05 	lsl.w	fp, r0, r5
 8034866:	4630      	mov	r0, r6
 8034868:	fbbb f9f4 	udiv	r9, fp, r4
 803486c:	fb0a f309 	mul.w	r3, sl, r9
 8034870:	9303      	str	r3, [sp, #12]
 8034872:	f7ff ffa5 	bl	80347c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8034876:	462b      	mov	r3, r5
 8034878:	460a      	mov	r2, r1
 803487a:	e9cd 4700 	strd	r4, r7, [sp]
 803487e:	4601      	mov	r1, r0
 8034880:	4630      	mov	r0, r6
 8034882:	f7ff ffbb 	bl	80347fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8034886:	fb04 b919 	mls	r9, r4, r9, fp
 803488a:	4606      	mov	r6, r0
 803488c:	4648      	mov	r0, r9
 803488e:	eb05 0108 	add.w	r1, r5, r8
 8034892:	f7ff ff95 	bl	80347c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8034896:	ab05      	add	r3, sp, #20
 8034898:	e9cd 4300 	strd	r4, r3, [sp]
 803489c:	464a      	mov	r2, r9
 803489e:	4603      	mov	r3, r0
 80348a0:	4650      	mov	r0, sl
 80348a2:	f7ff ffab 	bl	80347fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80348a6:	6839      	ldr	r1, [r7, #0]
 80348a8:	9a05      	ldr	r2, [sp, #20]
 80348aa:	9b03      	ldr	r3, [sp, #12]
 80348ac:	4411      	add	r1, r2
 80348ae:	fbb1 f2f4 	udiv	r2, r1, r4
 80348b2:	18d3      	adds	r3, r2, r3
 80348b4:	441e      	add	r6, r3
 80348b6:	fb04 1412 	mls	r4, r4, r2, r1
 80348ba:	4430      	add	r0, r6
 80348bc:	603c      	str	r4, [r7, #0]
 80348be:	e7ae      	b.n	803481e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

080348c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80348c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80348c4:	b085      	sub	sp, #20
 80348c6:	f1b0 0900 	subs.w	r9, r0, #0
 80348ca:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80348cc:	461d      	mov	r5, r3
 80348ce:	bfbf      	itttt	lt
 80348d0:	6823      	ldrlt	r3, [r4, #0]
 80348d2:	425b      	neglt	r3, r3
 80348d4:	f1c9 0900 	rsblt	r9, r9, #0
 80348d8:	6023      	strlt	r3, [r4, #0]
 80348da:	bfb4      	ite	lt
 80348dc:	f04f 36ff 	movlt.w	r6, #4294967295
 80348e0:	2601      	movge	r6, #1
 80348e2:	2a00      	cmp	r2, #0
 80348e4:	4617      	mov	r7, r2
 80348e6:	da04      	bge.n	80348f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80348e8:	6823      	ldr	r3, [r4, #0]
 80348ea:	425b      	negs	r3, r3
 80348ec:	4257      	negs	r7, r2
 80348ee:	4276      	negs	r6, r6
 80348f0:	6023      	str	r3, [r4, #0]
 80348f2:	2d00      	cmp	r5, #0
 80348f4:	4638      	mov	r0, r7
 80348f6:	bfba      	itte	lt
 80348f8:	426d      	neglt	r5, r5
 80348fa:	f04f 38ff 	movlt.w	r8, #4294967295
 80348fe:	f04f 0801 	movge.w	r8, #1
 8034902:	f7ff ff5d 	bl	80347c0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8034906:	ab03      	add	r3, sp, #12
 8034908:	e9cd 5300 	strd	r5, r3, [sp]
 803490c:	463a      	mov	r2, r7
 803490e:	4603      	mov	r3, r0
 8034910:	4648      	mov	r0, r9
 8034912:	f7ff ff73 	bl	80347fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8034916:	6823      	ldr	r3, [r4, #0]
 8034918:	9a03      	ldr	r2, [sp, #12]
 803491a:	4546      	cmp	r6, r8
 803491c:	441a      	add	r2, r3
 803491e:	fb92 f3f5 	sdiv	r3, r2, r5
 8034922:	4418      	add	r0, r3
 8034924:	bf18      	it	ne
 8034926:	4240      	negne	r0, r0
 8034928:	fb05 2313 	mls	r3, r5, r3, r2
 803492c:	1c72      	adds	r2, r6, #1
 803492e:	6023      	str	r3, [r4, #0]
 8034930:	d105      	bne.n	803493e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8034932:	2b00      	cmp	r3, #0
 8034934:	f1c3 0200 	rsb	r2, r3, #0
 8034938:	db0b      	blt.n	8034952 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 803493a:	6022      	str	r2, [r4, #0]
 803493c:	e006      	b.n	803494c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 803493e:	2e01      	cmp	r6, #1
 8034940:	d104      	bne.n	803494c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8034942:	2b00      	cmp	r3, #0
 8034944:	da02      	bge.n	803494c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8034946:	442b      	add	r3, r5
 8034948:	3801      	subs	r0, #1
 803494a:	6023      	str	r3, [r4, #0]
 803494c:	b005      	add	sp, #20
 803494e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8034952:	3801      	subs	r0, #1
 8034954:	1b52      	subs	r2, r2, r5
 8034956:	e7f0      	b.n	803493a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08034958 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8034958:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 803495c:	4c1c      	ldr	r4, [pc, #112]	@ (80349d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 803495e:	6807      	ldr	r7, [r0, #0]
 8034960:	69a3      	ldr	r3, [r4, #24]
 8034962:	4605      	mov	r5, r0
 8034964:	b92b      	cbnz	r3, 8034972 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8034966:	6840      	ldr	r0, [r0, #4]
 8034968:	e9c5 7000 	strd	r7, r0, [r5]
 803496c:	b004      	add	sp, #16
 803496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8034972:	68a2      	ldr	r2, [r4, #8]
 8034974:	6820      	ldr	r0, [r4, #0]
 8034976:	ae04      	add	r6, sp, #16
 8034978:	f04f 0802 	mov.w	r8, #2
 803497c:	fb93 f1f8 	sdiv	r1, r3, r8
 8034980:	440a      	add	r2, r1
 8034982:	f846 2d04 	str.w	r2, [r6, #-4]!
 8034986:	69e1      	ldr	r1, [r4, #28]
 8034988:	9600      	str	r6, [sp, #0]
 803498a:	463a      	mov	r2, r7
 803498c:	f7ff ff98 	bl	80348c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8034990:	69a3      	ldr	r3, [r4, #24]
 8034992:	686a      	ldr	r2, [r5, #4]
 8034994:	6a21      	ldr	r1, [r4, #32]
 8034996:	9600      	str	r6, [sp, #0]
 8034998:	4607      	mov	r7, r0
 803499a:	6860      	ldr	r0, [r4, #4]
 803499c:	f7ff ff90 	bl	80348c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80349a0:	6962      	ldr	r2, [r4, #20]
 80349a2:	69a3      	ldr	r3, [r4, #24]
 80349a4:	fb93 f8f8 	sdiv	r8, r3, r8
 80349a8:	4442      	add	r2, r8
 80349aa:	9203      	str	r2, [sp, #12]
 80349ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80349ae:	682a      	ldr	r2, [r5, #0]
 80349b0:	9600      	str	r6, [sp, #0]
 80349b2:	4407      	add	r7, r0
 80349b4:	68e0      	ldr	r0, [r4, #12]
 80349b6:	f7ff ff83 	bl	80348c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80349ba:	9600      	str	r6, [sp, #0]
 80349bc:	4680      	mov	r8, r0
 80349be:	69a3      	ldr	r3, [r4, #24]
 80349c0:	686a      	ldr	r2, [r5, #4]
 80349c2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80349c4:	6920      	ldr	r0, [r4, #16]
 80349c6:	f7ff ff7b 	bl	80348c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80349ca:	4440      	add	r0, r8
 80349cc:	e7cc      	b.n	8034968 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80349ce:	bf00      	nop
 80349d0:	2000b8ec 	.word	0x2000b8ec

080349d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80349d4:	4b07      	ldr	r3, [pc, #28]	@ (80349f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80349d6:	781b      	ldrb	r3, [r3, #0]
 80349d8:	2b01      	cmp	r3, #1
 80349da:	d109      	bne.n	80349f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80349dc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80349e0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80349e4:	8003      	strh	r3, [r0, #0]
 80349e6:	4b04      	ldr	r3, [pc, #16]	@ (80349f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80349e8:	881b      	ldrh	r3, [r3, #0]
 80349ea:	3b01      	subs	r3, #1
 80349ec:	1a9b      	subs	r3, r3, r2
 80349ee:	800b      	strh	r3, [r1, #0]
 80349f0:	4770      	bx	lr
 80349f2:	bf00      	nop
 80349f4:	2000b8d8 	.word	0x2000b8d8
 80349f8:	2000b8d4 	.word	0x2000b8d4

080349fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80349fc:	b510      	push	{r4, lr}
 80349fe:	4b07      	ldr	r3, [pc, #28]	@ (8034a1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8034a00:	781b      	ldrb	r3, [r3, #0]
 8034a02:	2b01      	cmp	r3, #1
 8034a04:	d108      	bne.n	8034a18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8034a06:	4b06      	ldr	r3, [pc, #24]	@ (8034a20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8034a08:	880c      	ldrh	r4, [r1, #0]
 8034a0a:	881b      	ldrh	r3, [r3, #0]
 8034a0c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8034a10:	3b01      	subs	r3, #1
 8034a12:	1b1b      	subs	r3, r3, r4
 8034a14:	8003      	strh	r3, [r0, #0]
 8034a16:	800a      	strh	r2, [r1, #0]
 8034a18:	bd10      	pop	{r4, pc}
 8034a1a:	bf00      	nop
 8034a1c:	2000b8d8 	.word	0x2000b8d8
 8034a20:	2000b8d4 	.word	0x2000b8d4

08034a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8034a24:	b510      	push	{r4, lr}
 8034a26:	4b0a      	ldr	r3, [pc, #40]	@ (8034a50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8034a28:	781b      	ldrb	r3, [r3, #0]
 8034a2a:	2b01      	cmp	r3, #1
 8034a2c:	d10e      	bne.n	8034a4c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8034a2e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8034a32:	8843      	ldrh	r3, [r0, #2]
 8034a34:	f9b0 4000 	ldrsh.w	r4, [r0]
 8034a38:	8044      	strh	r4, [r0, #2]
 8034a3a:	18ca      	adds	r2, r1, r3
 8034a3c:	4b05      	ldr	r3, [pc, #20]	@ (8034a54 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8034a3e:	881b      	ldrh	r3, [r3, #0]
 8034a40:	1a9b      	subs	r3, r3, r2
 8034a42:	8003      	strh	r3, [r0, #0]
 8034a44:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8034a48:	80c3      	strh	r3, [r0, #6]
 8034a4a:	8081      	strh	r1, [r0, #4]
 8034a4c:	bd10      	pop	{r4, pc}
 8034a4e:	bf00      	nop
 8034a50:	2000b8d8 	.word	0x2000b8d8
 8034a54:	2000b8d4 	.word	0x2000b8d4

08034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8034a58:	4b08      	ldr	r3, [pc, #32]	@ (8034a7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8034a5a:	781b      	ldrb	r3, [r3, #0]
 8034a5c:	2b01      	cmp	r3, #1
 8034a5e:	d10c      	bne.n	8034a7a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8034a60:	8803      	ldrh	r3, [r0, #0]
 8034a62:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8034a66:	8842      	ldrh	r2, [r0, #2]
 8034a68:	8002      	strh	r2, [r0, #0]
 8034a6a:	185a      	adds	r2, r3, r1
 8034a6c:	4b04      	ldr	r3, [pc, #16]	@ (8034a80 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8034a6e:	881b      	ldrh	r3, [r3, #0]
 8034a70:	1a9b      	subs	r3, r3, r2
 8034a72:	8043      	strh	r3, [r0, #2]
 8034a74:	88c3      	ldrh	r3, [r0, #6]
 8034a76:	8083      	strh	r3, [r0, #4]
 8034a78:	80c1      	strh	r1, [r0, #6]
 8034a7a:	4770      	bx	lr
 8034a7c:	2000b8d8 	.word	0x2000b8d8
 8034a80:	2000b8d4 	.word	0x2000b8d4

08034a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8034a84:	b510      	push	{r4, lr}
 8034a86:	4b07      	ldr	r3, [pc, #28]	@ (8034aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8034a88:	781b      	ldrb	r3, [r3, #0]
 8034a8a:	2b01      	cmp	r3, #1
 8034a8c:	d108      	bne.n	8034aa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8034a8e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8034a92:	f9b0 4000 	ldrsh.w	r4, [r0]
 8034a96:	8003      	strh	r3, [r0, #0]
 8034a98:	8893      	ldrh	r3, [r2, #4]
 8034a9a:	3b01      	subs	r3, #1
 8034a9c:	1b1b      	subs	r3, r3, r4
 8034a9e:	800b      	strh	r3, [r1, #0]
 8034aa0:	bd10      	pop	{r4, pc}
 8034aa2:	bf00      	nop
 8034aa4:	2000b8d8 	.word	0x2000b8d8

08034aa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8034aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8034ad8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8034aaa:	781b      	ldrb	r3, [r3, #0]
 8034aac:	2b01      	cmp	r3, #1
 8034aae:	d111      	bne.n	8034ad4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8034ab0:	680b      	ldr	r3, [r1, #0]
 8034ab2:	ed90 7a00 	vldr	s14, [r0]
 8034ab6:	6003      	str	r3, [r0, #0]
 8034ab8:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8034abc:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8034adc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8034ac0:	ee07 3a90 	vmov	s15, r3
 8034ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8034ac8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8034acc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8034ad0:	edc1 7a00 	vstr	s15, [r1]
 8034ad4:	4770      	bx	lr
 8034ad6:	bf00      	nop
 8034ad8:	2000b8d8 	.word	0x2000b8d8
 8034adc:	38d1b717 	.word	0x38d1b717

08034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8034ae0:	b510      	push	{r4, lr}
 8034ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8034b0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8034ae4:	781b      	ldrb	r3, [r3, #0]
 8034ae6:	2b01      	cmp	r3, #1
 8034ae8:	460a      	mov	r2, r1
 8034aea:	d10d      	bne.n	8034b08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8034aec:	8881      	ldrh	r1, [r0, #4]
 8034aee:	8803      	ldrh	r3, [r0, #0]
 8034af0:	440b      	add	r3, r1
 8034af2:	4601      	mov	r1, r0
 8034af4:	3b01      	subs	r3, #1
 8034af6:	f821 3b02 	strh.w	r3, [r1], #2
 8034afa:	f7ff ffc3 	bl	8034a84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8034afe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8034b02:	88c2      	ldrh	r2, [r0, #6]
 8034b04:	8082      	strh	r2, [r0, #4]
 8034b06:	80c3      	strh	r3, [r0, #6]
 8034b08:	bd10      	pop	{r4, pc}
 8034b0a:	bf00      	nop
 8034b0c:	2000b8d8 	.word	0x2000b8d8

08034b10 <_ZN8touchgfx11Application13requestRedrawEv>:
 8034b10:	4b06      	ldr	r3, [pc, #24]	@ (8034b2c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8034b12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8034b16:	4b06      	ldr	r3, [pc, #24]	@ (8034b30 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8034b18:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8034b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8034b20:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8034b24:	2100      	movs	r1, #0
 8034b26:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8034b2a:	4770      	bx	lr
 8034b2c:	2000b8d4 	.word	0x2000b8d4
 8034b30:	2000b8d6 	.word	0x2000b8d6

08034b34 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8034b34:	4b03      	ldr	r3, [pc, #12]	@ (8034b44 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8034b36:	6818      	ldr	r0, [r3, #0]
 8034b38:	b110      	cbz	r0, 8034b40 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8034b3a:	6803      	ldr	r3, [r0, #0]
 8034b3c:	699b      	ldr	r3, [r3, #24]
 8034b3e:	4718      	bx	r3
 8034b40:	4770      	bx	lr
 8034b42:	bf00      	nop
 8034b44:	2000b91c 	.word	0x2000b91c

08034b48 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8034b48:	4770      	bx	lr
	...

08034b4c <_ZN8touchgfx11Application4drawEv>:
 8034b4c:	b507      	push	{r0, r1, r2, lr}
 8034b4e:	4b09      	ldr	r3, [pc, #36]	@ (8034b74 <_ZN8touchgfx11Application4drawEv+0x28>)
 8034b50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8034b54:	4b08      	ldr	r3, [pc, #32]	@ (8034b78 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8034b56:	f8ad 2004 	strh.w	r2, [sp, #4]
 8034b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8034b5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8034b62:	6803      	ldr	r3, [r0, #0]
 8034b64:	2100      	movs	r1, #0
 8034b66:	9100      	str	r1, [sp, #0]
 8034b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8034b6a:	4669      	mov	r1, sp
 8034b6c:	4798      	blx	r3
 8034b6e:	b003      	add	sp, #12
 8034b70:	f85d fb04 	ldr.w	pc, [sp], #4
 8034b74:	2000b8d4 	.word	0x2000b8d4
 8034b78:	2000b8d6 	.word	0x2000b8d6

08034b7c <_ZN8touchgfx11Application10invalidateEv>:
 8034b7c:	4b09      	ldr	r3, [pc, #36]	@ (8034ba4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8034b7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8034b82:	4b09      	ldr	r3, [pc, #36]	@ (8034ba8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8034b84:	b082      	sub	sp, #8
 8034b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8034b8a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8034b8e:	2100      	movs	r1, #0
 8034b90:	f8ad 3006 	strh.w	r3, [sp, #6]
 8034b94:	9100      	str	r1, [sp, #0]
 8034b96:	6803      	ldr	r3, [r0, #0]
 8034b98:	aa02      	add	r2, sp, #8
 8034b9a:	e912 0006 	ldmdb	r2, {r1, r2}
 8034b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8034ba0:	b002      	add	sp, #8
 8034ba2:	4718      	bx	r3
 8034ba4:	2000b8d4 	.word	0x2000b8d4
 8034ba8:	2000b8d6 	.word	0x2000b8d6

08034bac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8034bac:	4b03      	ldr	r3, [pc, #12]	@ (8034bbc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8034bae:	6818      	ldr	r0, [r3, #0]
 8034bb0:	b110      	cbz	r0, 8034bb8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8034bb2:	6803      	ldr	r3, [r0, #0]
 8034bb4:	69db      	ldr	r3, [r3, #28]
 8034bb6:	4718      	bx	r3
 8034bb8:	4770      	bx	lr
 8034bba:	bf00      	nop
 8034bbc:	2000b91c 	.word	0x2000b91c

08034bc0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8034bc0:	4b03      	ldr	r3, [pc, #12]	@ (8034bd0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8034bc2:	6818      	ldr	r0, [r3, #0]
 8034bc4:	b110      	cbz	r0, 8034bcc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8034bc6:	6803      	ldr	r3, [r0, #0]
 8034bc8:	6a1b      	ldr	r3, [r3, #32]
 8034bca:	4718      	bx	r3
 8034bcc:	4770      	bx	lr
 8034bce:	bf00      	nop
 8034bd0:	2000b91c 	.word	0x2000b91c

08034bd4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8034bd4:	2300      	movs	r3, #0
 8034bd6:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8034bda:	4770      	bx	lr

08034bdc <_ZN8touchgfx11Application14handleKeyEventEh>:
 8034bdc:	4b03      	ldr	r3, [pc, #12]	@ (8034bec <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8034bde:	6818      	ldr	r0, [r3, #0]
 8034be0:	b110      	cbz	r0, 8034be8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8034be2:	6803      	ldr	r3, [r0, #0]
 8034be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8034be6:	4718      	bx	r3
 8034be8:	4770      	bx	lr
 8034bea:	bf00      	nop
 8034bec:	2000b91c 	.word	0x2000b91c

08034bf0 <_ZN8touchgfx11ApplicationD1Ev>:
 8034bf0:	4770      	bx	lr

08034bf2 <_ZN8touchgfx11ApplicationD0Ev>:
 8034bf2:	b510      	push	{r4, lr}
 8034bf4:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8034bf8:	4604      	mov	r4, r0
 8034bfa:	f007 fc76 	bl	803c4ea <_ZdlPvj>
 8034bfe:	4620      	mov	r0, r4
 8034c00:	bd10      	pop	{r4, pc}

08034c02 <_ZN8touchgfx4Rect10restrictToEss>:
 8034c02:	f9b0 3000 	ldrsh.w	r3, [r0]
 8034c06:	2b00      	cmp	r3, #0
 8034c08:	b510      	push	{r4, lr}
 8034c0a:	da04      	bge.n	8034c16 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8034c0c:	8884      	ldrh	r4, [r0, #4]
 8034c0e:	4423      	add	r3, r4
 8034c10:	8083      	strh	r3, [r0, #4]
 8034c12:	2300      	movs	r3, #0
 8034c14:	8003      	strh	r3, [r0, #0]
 8034c16:	f9b0 4000 	ldrsh.w	r4, [r0]
 8034c1a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8034c1e:	1b09      	subs	r1, r1, r4
 8034c20:	428b      	cmp	r3, r1
 8034c22:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8034c26:	bfc8      	it	gt
 8034c28:	8081      	strhgt	r1, [r0, #4]
 8034c2a:	2b00      	cmp	r3, #0
 8034c2c:	da04      	bge.n	8034c38 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8034c2e:	88c1      	ldrh	r1, [r0, #6]
 8034c30:	440b      	add	r3, r1
 8034c32:	80c3      	strh	r3, [r0, #6]
 8034c34:	2300      	movs	r3, #0
 8034c36:	8043      	strh	r3, [r0, #2]
 8034c38:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8034c3c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8034c40:	1a52      	subs	r2, r2, r1
 8034c42:	4293      	cmp	r3, r2
 8034c44:	bfc8      	it	gt
 8034c46:	80c2      	strhgt	r2, [r0, #6]
 8034c48:	bd10      	pop	{r4, pc}
	...

08034c4c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8034c4c:	b510      	push	{r4, lr}
 8034c4e:	4b10      	ldr	r3, [pc, #64]	@ (8034c90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8034c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8034c54:	4b0f      	ldr	r3, [pc, #60]	@ (8034c94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8034c56:	460c      	mov	r4, r1
 8034c58:	4620      	mov	r0, r4
 8034c5a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8034c5e:	f7ff ffd0 	bl	8034c02 <_ZN8touchgfx4Rect10restrictToEss>
 8034c62:	4b0d      	ldr	r3, [pc, #52]	@ (8034c98 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8034c64:	6818      	ldr	r0, [r3, #0]
 8034c66:	b190      	cbz	r0, 8034c8e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8034c68:	6803      	ldr	r3, [r0, #0]
 8034c6a:	4621      	mov	r1, r4
 8034c6c:	689b      	ldr	r3, [r3, #8]
 8034c6e:	4798      	blx	r3
 8034c70:	4b0a      	ldr	r3, [pc, #40]	@ (8034c9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8034c72:	6818      	ldr	r0, [r3, #0]
 8034c74:	b118      	cbz	r0, 8034c7e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8034c76:	6803      	ldr	r3, [r0, #0]
 8034c78:	4621      	mov	r1, r4
 8034c7a:	689b      	ldr	r3, [r3, #8]
 8034c7c:	4798      	blx	r3
 8034c7e:	4b08      	ldr	r3, [pc, #32]	@ (8034ca0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8034c80:	6818      	ldr	r0, [r3, #0]
 8034c82:	6803      	ldr	r3, [r0, #0]
 8034c84:	4621      	mov	r1, r4
 8034c86:	69db      	ldr	r3, [r3, #28]
 8034c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8034c8c:	4718      	bx	r3
 8034c8e:	bd10      	pop	{r4, pc}
 8034c90:	2000b8d6 	.word	0x2000b8d6
 8034c94:	2000b8d4 	.word	0x2000b8d4
 8034c98:	2000b91c 	.word	0x2000b91c
 8034c9c:	2000b918 	.word	0x2000b918
 8034ca0:	2000b8e0 	.word	0x2000b8e0

08034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8034ca4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8034ca8:	2b00      	cmp	r3, #0
 8034caa:	dd06      	ble.n	8034cba <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8034cac:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8034cb0:	2800      	cmp	r0, #0
 8034cb2:	bfcc      	ite	gt
 8034cb4:	2000      	movgt	r0, #0
 8034cb6:	2001      	movle	r0, #1
 8034cb8:	4770      	bx	lr
 8034cba:	2001      	movs	r0, #1
 8034cbc:	4770      	bx	lr

08034cbe <_ZNK8touchgfx4Rect8includesERKS0_>:
 8034cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034cc0:	4606      	mov	r6, r0
 8034cc2:	4608      	mov	r0, r1
 8034cc4:	460f      	mov	r7, r1
 8034cc6:	f7ff ffed 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8034cca:	b9e8      	cbnz	r0, 8034d08 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8034ccc:	f9b7 5000 	ldrsh.w	r5, [r7]
 8034cd0:	f9b6 4000 	ldrsh.w	r4, [r6]
 8034cd4:	42a5      	cmp	r5, r4
 8034cd6:	db17      	blt.n	8034d08 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8034cd8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8034cdc:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8034ce0:	429a      	cmp	r2, r3
 8034ce2:	db11      	blt.n	8034d08 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8034ce4:	88b9      	ldrh	r1, [r7, #4]
 8034ce6:	440d      	add	r5, r1
 8034ce8:	88b1      	ldrh	r1, [r6, #4]
 8034cea:	440c      	add	r4, r1
 8034cec:	b22d      	sxth	r5, r5
 8034cee:	b224      	sxth	r4, r4
 8034cf0:	42a5      	cmp	r5, r4
 8034cf2:	dc09      	bgt.n	8034d08 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8034cf4:	88f8      	ldrh	r0, [r7, #6]
 8034cf6:	4410      	add	r0, r2
 8034cf8:	88f2      	ldrh	r2, [r6, #6]
 8034cfa:	4413      	add	r3, r2
 8034cfc:	b200      	sxth	r0, r0
 8034cfe:	b21b      	sxth	r3, r3
 8034d00:	4298      	cmp	r0, r3
 8034d02:	bfcc      	ite	gt
 8034d04:	2000      	movgt	r0, #0
 8034d06:	2001      	movle	r0, #1
 8034d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08034d0c <_ZN8touchgfx11Application11getInstanceEv>:
 8034d0c:	4b01      	ldr	r3, [pc, #4]	@ (8034d14 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8034d0e:	6818      	ldr	r0, [r3, #0]
 8034d10:	4770      	bx	lr
 8034d12:	bf00      	nop
 8034d14:	2000b92c 	.word	0x2000b92c

08034d18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8034d18:	b510      	push	{r4, lr}
 8034d1a:	2300      	movs	r3, #0
 8034d1c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8034d20:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8034d24:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8034d28:	4604      	mov	r4, r0
 8034d2a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8034d2e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8034d32:	429a      	cmp	r2, r3
 8034d34:	d90e      	bls.n	8034d54 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8034d36:	18e2      	adds	r2, r4, r3
 8034d38:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8034d3c:	b122      	cbz	r2, 8034d48 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8034d3e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8034d42:	6803      	ldr	r3, [r0, #0]
 8034d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8034d46:	4798      	blx	r3
 8034d48:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8034d4c:	3301      	adds	r3, #1
 8034d4e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8034d52:	e7ea      	b.n	8034d2a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8034d54:	bd10      	pop	{r4, pc}

08034d56 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8034d56:	b530      	push	{r4, r5, lr}
 8034d58:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 8034d5c:	2200      	movs	r2, #0
 8034d5e:	b293      	uxth	r3, r2
 8034d60:	429d      	cmp	r5, r3
 8034d62:	d90e      	bls.n	8034d82 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8034d64:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8034d68:	428b      	cmp	r3, r1
 8034d6a:	d10b      	bne.n	8034d84 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8034d6c:	1884      	adds	r4, r0, r2
 8034d6e:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 8034d72:	b13b      	cbz	r3, 8034d84 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8034d74:	3b01      	subs	r3, #1
 8034d76:	b2db      	uxtb	r3, r3
 8034d78:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8034d7c:	b90b      	cbnz	r3, 8034d82 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8034d7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8034d82:	bd30      	pop	{r4, r5, pc}
 8034d84:	3201      	adds	r2, #1
 8034d86:	e7ea      	b.n	8034d5e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8034d88:	2300      	movs	r3, #0
 8034d8a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8034d8e:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8034d92:	30a4      	adds	r0, #164	@ 0xa4
 8034d94:	f802 3b01 	strb.w	r3, [r2], #1
 8034d98:	4282      	cmp	r2, r0
 8034d9a:	d1fb      	bne.n	8034d94 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8034d9c:	4770      	bx	lr
	...

08034da0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8034da0:	b570      	push	{r4, r5, r6, lr}
 8034da2:	4c0b      	ldr	r4, [pc, #44]	@ (8034dd0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8034da4:	4605      	mov	r5, r0
 8034da6:	6820      	ldr	r0, [r4, #0]
 8034da8:	460e      	mov	r6, r1
 8034daa:	b110      	cbz	r0, 8034db2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8034dac:	6803      	ldr	r3, [r0, #0]
 8034dae:	695b      	ldr	r3, [r3, #20]
 8034db0:	4798      	blx	r3
 8034db2:	1d28      	adds	r0, r5, #4
 8034db4:	f7ff ffe8 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8034db8:	6026      	str	r6, [r4, #0]
 8034dba:	6833      	ldr	r3, [r6, #0]
 8034dbc:	4630      	mov	r0, r6
 8034dbe:	68db      	ldr	r3, [r3, #12]
 8034dc0:	4798      	blx	r3
 8034dc2:	682b      	ldr	r3, [r5, #0]
 8034dc4:	4628      	mov	r0, r5
 8034dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8034dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8034dcc:	4718      	bx	r3
 8034dce:	bf00      	nop
 8034dd0:	2000b91c 	.word	0x2000b91c

08034dd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8034dd4:	2300      	movs	r3, #0
 8034dd6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8034dda:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8034dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8034de0:	461a      	mov	r2, r3
 8034de2:	461c      	mov	r4, r3
 8034de4:	461d      	mov	r5, r3
 8034de6:	459c      	cmp	ip, r3
 8034de8:	dd1a      	ble.n	8034e20 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8034dea:	18c6      	adds	r6, r0, r3
 8034dec:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8034df0:	b16e      	cbz	r6, 8034e0e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8034df2:	429a      	cmp	r2, r3
 8034df4:	d008      	beq.n	8034e08 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8034df6:	fa1f fe82 	uxth.w	lr, r2
 8034dfa:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8034dfe:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8034e02:	1887      	adds	r7, r0, r2
 8034e04:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8034e08:	3201      	adds	r2, #1
 8034e0a:	3301      	adds	r3, #1
 8034e0c:	e7eb      	b.n	8034de6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8034e0e:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8034e12:	4299      	cmp	r1, r3
 8034e14:	bfa8      	it	ge
 8034e16:	3501      	addge	r5, #1
 8034e18:	429e      	cmp	r6, r3
 8034e1a:	bfc8      	it	gt
 8034e1c:	3401      	addgt	r4, #1
 8034e1e:	e7f4      	b.n	8034e0a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8034e20:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8034e24:	1b49      	subs	r1, r1, r5
 8034e26:	1b1b      	subs	r3, r3, r4
 8034e28:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8034e2c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8034e30:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8034e34:	4293      	cmp	r3, r2
 8034e36:	dd03      	ble.n	8034e40 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8034e38:	3b01      	subs	r3, #1
 8034e3a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8034e3e:	e7f7      	b.n	8034e30 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8034e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08034e44 <_ZN8touchgfx11Application15handleTickEventEv>:
 8034e44:	b570      	push	{r4, r5, r6, lr}
 8034e46:	4d16      	ldr	r5, [pc, #88]	@ (8034ea0 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8034e48:	4604      	mov	r4, r0
 8034e4a:	6828      	ldr	r0, [r5, #0]
 8034e4c:	b140      	cbz	r0, 8034e60 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8034e4e:	7a03      	ldrb	r3, [r0, #8]
 8034e50:	b933      	cbnz	r3, 8034e60 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8034e52:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8034e56:	6803      	ldr	r3, [r0, #0]
 8034e58:	689b      	ldr	r3, [r3, #8]
 8034e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8034e5e:	4718      	bx	r3
 8034e60:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8034e64:	4e0f      	ldr	r6, [pc, #60]	@ (8034ea4 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8034e66:	b973      	cbnz	r3, 8034e86 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8034e68:	b168      	cbz	r0, 8034e86 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8034e6a:	7a03      	ldrb	r3, [r0, #8]
 8034e6c:	b15b      	cbz	r3, 8034e86 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8034e6e:	6830      	ldr	r0, [r6, #0]
 8034e70:	b110      	cbz	r0, 8034e78 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8034e72:	6803      	ldr	r3, [r0, #0]
 8034e74:	691b      	ldr	r3, [r3, #16]
 8034e76:	4798      	blx	r3
 8034e78:	6828      	ldr	r0, [r5, #0]
 8034e7a:	6803      	ldr	r3, [r0, #0]
 8034e7c:	68db      	ldr	r3, [r3, #12]
 8034e7e:	4798      	blx	r3
 8034e80:	2301      	movs	r3, #1
 8034e82:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8034e86:	3404      	adds	r4, #4
 8034e88:	4620      	mov	r0, r4
 8034e8a:	f7ff ff45 	bl	8034d18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8034e8e:	4620      	mov	r0, r4
 8034e90:	f7ff ffa0 	bl	8034dd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8034e94:	6830      	ldr	r0, [r6, #0]
 8034e96:	b110      	cbz	r0, 8034e9e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8034e98:	6803      	ldr	r3, [r0, #0]
 8034e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8034e9c:	e7dd      	b.n	8034e5a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8034e9e:	bd70      	pop	{r4, r5, r6, pc}
 8034ea0:	2000b920 	.word	0x2000b920
 8034ea4:	2000b91c 	.word	0x2000b91c

08034ea8 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8034ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034eaa:	2300      	movs	r3, #0
 8034eac:	4604      	mov	r4, r0
 8034eae:	460d      	mov	r5, r1
 8034eb0:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 8034eb4:	4618      	mov	r0, r3
 8034eb6:	b29a      	uxth	r2, r3
 8034eb8:	4291      	cmp	r1, r2
 8034eba:	d911      	bls.n	8034ee0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x38>
 8034ebc:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8034ec0:	18e6      	adds	r6, r4, r3
 8034ec2:	42af      	cmp	r7, r5
 8034ec4:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8034ec8:	d105      	bne.n	8034ed6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8034eca:	2aff      	cmp	r2, #255	@ 0xff
 8034ecc:	d002      	beq.n	8034ed4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8034ece:	3201      	adds	r2, #1
 8034ed0:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 8034ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8034ed6:	2a00      	cmp	r2, #0
 8034ed8:	bf08      	it	eq
 8034eda:	2001      	moveq	r0, #1
 8034edc:	3301      	adds	r3, #1
 8034ede:	e7ea      	b.n	8034eb6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 8034ee0:	b120      	cbz	r0, 8034eec <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8034ee2:	2920      	cmp	r1, #32
 8034ee4:	d102      	bne.n	8034eec <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x44>
 8034ee6:	4620      	mov	r0, r4
 8034ee8:	f7ff ff74 	bl	8034dd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8034eec:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 8034ef0:	2b1f      	cmp	r3, #31
 8034ef2:	d8ef      	bhi.n	8034ed4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8034ef4:	18e2      	adds	r2, r4, r3
 8034ef6:	2101      	movs	r1, #1
 8034ef8:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8034efc:	185a      	adds	r2, r3, r1
 8034efe:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 8034f02:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8034f06:	e7e5      	b.n	8034ed4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08034f08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8034f08:	4603      	mov	r3, r0
 8034f0a:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8034f0e:	2200      	movs	r2, #0
 8034f10:	801a      	strh	r2, [r3, #0]
 8034f12:	805a      	strh	r2, [r3, #2]
 8034f14:	809a      	strh	r2, [r3, #4]
 8034f16:	80da      	strh	r2, [r3, #6]
 8034f18:	3308      	adds	r3, #8
 8034f1a:	428b      	cmp	r3, r1
 8034f1c:	d1f8      	bne.n	8034f10 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8034f1e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8034f22:	4770      	bx	lr

08034f24 <_ZN8touchgfx11ApplicationC1Ev>:
 8034f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8034f26:	4606      	mov	r6, r0
 8034f28:	4b1c      	ldr	r3, [pc, #112]	@ (8034f9c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8034f2a:	f846 3b04 	str.w	r3, [r6], #4
 8034f2e:	4604      	mov	r4, r0
 8034f30:	2500      	movs	r5, #0
 8034f32:	22a8      	movs	r2, #168	@ 0xa8
 8034f34:	2100      	movs	r1, #0
 8034f36:	4630      	mov	r0, r6
 8034f38:	f008 fab4 	bl	803d4a4 <memset>
 8034f3c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8034f40:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8034f44:	f7ff ffe0 	bl	8034f08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8034f48:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8034f4c:	f7ff ffdc 	bl	8034f08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8034f50:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8034f54:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8034f58:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8034f5c:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8034f60:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8034f64:	490e      	ldr	r1, [pc, #56]	@ (8034fa0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8034f66:	480f      	ldr	r0, [pc, #60]	@ (8034fa4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8034f68:	4f0f      	ldr	r7, [pc, #60]	@ (8034fa8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8034f6a:	f007 f9b5 	bl	803c2d8 <CRC_Lock>
 8034f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8034fac <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8034f70:	b158      	cbz	r0, 8034f8a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8034f72:	801d      	strh	r5, [r3, #0]
 8034f74:	4a0e      	ldr	r2, [pc, #56]	@ (8034fb0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8034f76:	2300      	movs	r3, #0
 8034f78:	6013      	str	r3, [r2, #0]
 8034f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8034fb4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8034f7c:	603b      	str	r3, [r7, #0]
 8034f7e:	4630      	mov	r0, r6
 8034f80:	6013      	str	r3, [r2, #0]
 8034f82:	f7ff ff01 	bl	8034d88 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8034f86:	4620      	mov	r0, r4
 8034f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8034f8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8034f8e:	2002      	movs	r0, #2
 8034f90:	801a      	strh	r2, [r3, #0]
 8034f92:	6038      	str	r0, [r7, #0]
 8034f94:	f001 faf4 	bl	8036580 <_ZN8touchgfx6Screen4drawEv>
 8034f98:	e7ec      	b.n	8034f74 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8034f9a:	bf00      	nop
 8034f9c:	080438d8 	.word	0x080438d8
 8034fa0:	b5e8b5cd 	.word	0xb5e8b5cd
 8034fa4:	f407a5c2 	.word	0xf407a5c2
 8034fa8:	2000b91c 	.word	0x2000b91c
 8034fac:	200007c0 	.word	0x200007c0
 8034fb0:	2000b92c 	.word	0x2000b92c
 8034fb4:	2000b920 	.word	0x2000b920

08034fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8034fb8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8034fbc:	3b01      	subs	r3, #1
 8034fbe:	b29b      	uxth	r3, r3
 8034fc0:	428b      	cmp	r3, r1
 8034fc2:	b510      	push	{r4, lr}
 8034fc4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8034fc8:	d908      	bls.n	8034fdc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8034fca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8034fce:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8034fd2:	681a      	ldr	r2, [r3, #0]
 8034fd4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8034fd8:	685a      	ldr	r2, [r3, #4]
 8034fda:	6062      	str	r2, [r4, #4]
 8034fdc:	bd10      	pop	{r4, pc}
	...

08034fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8034fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8034fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8035224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8034fe6:	b08f      	sub	sp, #60	@ 0x3c
 8034fe8:	ac0a      	add	r4, sp, #40	@ 0x28
 8034fea:	e884 0006 	stmia.w	r4, {r1, r2}
 8034fee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8034ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8035228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8034ff4:	4683      	mov	fp, r0
 8034ff6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8034ffa:	4620      	mov	r0, r4
 8034ffc:	f7ff fe01 	bl	8034c02 <_ZN8touchgfx4Rect10restrictToEss>
 8035000:	4620      	mov	r0, r4
 8035002:	f7ff fe4f 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8035006:	2800      	cmp	r0, #0
 8035008:	d16a      	bne.n	80350e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 803500a:	9403      	str	r4, [sp, #12]
 803500c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8035010:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8035014:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8035018:	35a4      	adds	r5, #164	@ 0xa4
 803501a:	9301      	str	r3, [sp, #4]
 803501c:	b15c      	cbz	r4, 8035036 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 803501e:	4629      	mov	r1, r5
 8035020:	9803      	ldr	r0, [sp, #12]
 8035022:	f7ff fe4c 	bl	8034cbe <_ZNK8touchgfx4Rect8includesERKS0_>
 8035026:	3c01      	subs	r4, #1
 8035028:	b118      	cbz	r0, 8035032 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 803502a:	b2a1      	uxth	r1, r4
 803502c:	9801      	ldr	r0, [sp, #4]
 803502e:	f7ff ffc3 	bl	8034fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8035032:	3d08      	subs	r5, #8
 8035034:	e7f2      	b.n	803501c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8035036:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 803503a:	f8cd a010 	str.w	sl, [sp, #16]
 803503e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8035042:	9302      	str	r3, [sp, #8]
 8035044:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8035048:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 803504c:	9306      	str	r3, [sp, #24]
 803504e:	445c      	add	r4, fp
 8035050:	2500      	movs	r5, #0
 8035052:	4626      	mov	r6, r4
 8035054:	f8cd a014 	str.w	sl, [sp, #20]
 8035058:	462f      	mov	r7, r5
 803505a:	9b05      	ldr	r3, [sp, #20]
 803505c:	2b00      	cmp	r3, #0
 803505e:	d073      	beq.n	8035148 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8035060:	9903      	ldr	r1, [sp, #12]
 8035062:	4630      	mov	r0, r6
 8035064:	f7fb ff3a 	bl	8030edc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8035068:	b350      	cbz	r0, 80350c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 803506a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 803506e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8035072:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8035076:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 803507a:	45e6      	cmp	lr, ip
 803507c:	db33      	blt.n	80350e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 803507e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8035082:	88b3      	ldrh	r3, [r6, #4]
 8035084:	4472      	add	r2, lr
 8035086:	4463      	add	r3, ip
 8035088:	b212      	sxth	r2, r2
 803508a:	b21b      	sxth	r3, r3
 803508c:	429a      	cmp	r2, r3
 803508e:	dc2a      	bgt.n	80350e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8035090:	88f3      	ldrh	r3, [r6, #6]
 8035092:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8035096:	fa1f f289 	uxth.w	r2, r9
 803509a:	4413      	add	r3, r2
 803509c:	b29b      	uxth	r3, r3
 803509e:	45c8      	cmp	r8, r9
 80350a0:	fa1f fc88 	uxth.w	ip, r8
 80350a4:	fa0f fe83 	sxth.w	lr, r3
 80350a8:	db0f      	blt.n	80350ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80350aa:	eba3 030c 	sub.w	r3, r3, ip
 80350ae:	1ac9      	subs	r1, r1, r3
 80350b0:	b209      	sxth	r1, r1
 80350b2:	2900      	cmp	r1, #0
 80350b4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80350b8:	dd12      	ble.n	80350e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80350ba:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 80350be:	4605      	mov	r5, r0
 80350c0:	9b05      	ldr	r3, [sp, #20]
 80350c2:	3b01      	subs	r3, #1
 80350c4:	9305      	str	r3, [sp, #20]
 80350c6:	3e08      	subs	r6, #8
 80350c8:	e7c7      	b.n	803505a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80350ca:	4461      	add	r1, ip
 80350cc:	b209      	sxth	r1, r1
 80350ce:	4571      	cmp	r1, lr
 80350d0:	dc38      	bgt.n	8035144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80350d2:	eba2 020c 	sub.w	r2, r2, ip
 80350d6:	b212      	sxth	r2, r2
 80350d8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 80350dc:	2a00      	cmp	r2, #0
 80350de:	dcee      	bgt.n	80350be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80350e0:	b00f      	add	sp, #60	@ 0x3c
 80350e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80350e6:	45c8      	cmp	r8, r9
 80350e8:	db2c      	blt.n	8035144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80350ea:	88f3      	ldrh	r3, [r6, #6]
 80350ec:	4499      	add	r9, r3
 80350ee:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 80350f2:	4498      	add	r8, r3
 80350f4:	fa0f f989 	sxth.w	r9, r9
 80350f8:	fa0f f888 	sxth.w	r8, r8
 80350fc:	45c1      	cmp	r9, r8
 80350fe:	db21      	blt.n	8035144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8035100:	88b3      	ldrh	r3, [r6, #4]
 8035102:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8035106:	fa1f f28c 	uxth.w	r2, ip
 803510a:	4413      	add	r3, r2
 803510c:	b29b      	uxth	r3, r3
 803510e:	45e6      	cmp	lr, ip
 8035110:	fa1f f88e 	uxth.w	r8, lr
 8035114:	fa0f f983 	sxth.w	r9, r3
 8035118:	db0a      	blt.n	8035130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 803511a:	eba3 0308 	sub.w	r3, r3, r8
 803511e:	1ac9      	subs	r1, r1, r3
 8035120:	b209      	sxth	r1, r1
 8035122:	2900      	cmp	r1, #0
 8035124:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8035128:	ddda      	ble.n	80350e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 803512a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 803512e:	e7c6      	b.n	80350be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8035130:	4441      	add	r1, r8
 8035132:	b209      	sxth	r1, r1
 8035134:	4549      	cmp	r1, r9
 8035136:	dc05      	bgt.n	8035144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8035138:	eba2 0208 	sub.w	r2, r2, r8
 803513c:	b212      	sxth	r2, r2
 803513e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8035142:	e7cb      	b.n	80350dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8035144:	4607      	mov	r7, r0
 8035146:	e7bb      	b.n	80350c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8035148:	2d00      	cmp	r5, #0
 803514a:	d181      	bne.n	8035050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 803514c:	2f00      	cmp	r7, #0
 803514e:	f000 81dd 	beq.w	803550c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8035152:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8035156:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 803515a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 803515e:	b2b3      	uxth	r3, r6
 8035160:	9305      	str	r3, [sp, #20]
 8035162:	9a05      	ldr	r2, [sp, #20]
 8035164:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8035168:	4413      	add	r3, r2
 803516a:	b2ba      	uxth	r2, r7
 803516c:	4492      	add	sl, r2
 803516e:	b29b      	uxth	r3, r3
 8035170:	fa1f fa8a 	uxth.w	sl, sl
 8035174:	fa0f f883 	sxth.w	r8, r3
 8035178:	fa0f f98a 	sxth.w	r9, sl
 803517c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8035180:	9b04      	ldr	r3, [sp, #16]
 8035182:	2b00      	cmp	r3, #0
 8035184:	d052      	beq.n	803522c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8035186:	9903      	ldr	r1, [sp, #12]
 8035188:	4620      	mov	r0, r4
 803518a:	f7fb fea7 	bl	8030edc <_ZNK8touchgfx4Rect9intersectERKS0_>
 803518e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8035192:	b1c0      	cbz	r0, 80351c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8035194:	f9b4 e000 	ldrsh.w	lr, [r4]
 8035198:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 803519c:	4576      	cmp	r6, lr
 803519e:	dc22      	bgt.n	80351e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80351a0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80351a4:	44f4      	add	ip, lr
 80351a6:	fa0f fc8c 	sxth.w	ip, ip
 80351aa:	45e0      	cmp	r8, ip
 80351ac:	db1b      	blt.n	80351e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80351ae:	428f      	cmp	r7, r1
 80351b0:	fa1f fc81 	uxth.w	ip, r1
 80351b4:	88e1      	ldrh	r1, [r4, #6]
 80351b6:	dc0d      	bgt.n	80351d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80351b8:	ebaa 0c0c 	sub.w	ip, sl, ip
 80351bc:	eba1 010c 	sub.w	r1, r1, ip
 80351c0:	f8a4 9002 	strh.w	r9, [r4, #2]
 80351c4:	80e1      	strh	r1, [r4, #6]
 80351c6:	4628      	mov	r0, r5
 80351c8:	9904      	ldr	r1, [sp, #16]
 80351ca:	3901      	subs	r1, #1
 80351cc:	9104      	str	r1, [sp, #16]
 80351ce:	3c08      	subs	r4, #8
 80351d0:	4605      	mov	r5, r0
 80351d2:	e7d3      	b.n	803517c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 80351d4:	4461      	add	r1, ip
 80351d6:	b209      	sxth	r1, r1
 80351d8:	4549      	cmp	r1, r9
 80351da:	dcf5      	bgt.n	80351c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80351dc:	eba2 0c0c 	sub.w	ip, r2, ip
 80351e0:	f8a4 c006 	strh.w	ip, [r4, #6]
 80351e4:	e7ef      	b.n	80351c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80351e6:	428f      	cmp	r7, r1
 80351e8:	dcee      	bgt.n	80351c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80351ea:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80351ee:	4461      	add	r1, ip
 80351f0:	b209      	sxth	r1, r1
 80351f2:	4589      	cmp	r9, r1
 80351f4:	dbe8      	blt.n	80351c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80351f6:	4576      	cmp	r6, lr
 80351f8:	fa1f fc8e 	uxth.w	ip, lr
 80351fc:	88a1      	ldrh	r1, [r4, #4]
 80351fe:	dc07      	bgt.n	8035210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8035200:	eba3 0c0c 	sub.w	ip, r3, ip
 8035204:	eba1 010c 	sub.w	r1, r1, ip
 8035208:	f8a4 8000 	strh.w	r8, [r4]
 803520c:	80a1      	strh	r1, [r4, #4]
 803520e:	e7da      	b.n	80351c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8035210:	4461      	add	r1, ip
 8035212:	b209      	sxth	r1, r1
 8035214:	4588      	cmp	r8, r1
 8035216:	dbd7      	blt.n	80351c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8035218:	9905      	ldr	r1, [sp, #20]
 803521a:	eba1 0c0c 	sub.w	ip, r1, ip
 803521e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8035222:	e7d0      	b.n	80351c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8035224:	2000b8d6 	.word	0x2000b8d6
 8035228:	2000b8d4 	.word	0x2000b8d4
 803522c:	2d00      	cmp	r5, #0
 803522e:	f000 816d 	beq.w	803550c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8035232:	9b06      	ldr	r3, [sp, #24]
 8035234:	445b      	add	r3, fp
 8035236:	461c      	mov	r4, r3
 8035238:	9b02      	ldr	r3, [sp, #8]
 803523a:	3301      	adds	r3, #1
 803523c:	f000 8166 	beq.w	803550c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8035240:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8035244:	4629      	mov	r1, r5
 8035246:	9803      	ldr	r0, [sp, #12]
 8035248:	f7ff fd39 	bl	8034cbe <_ZNK8touchgfx4Rect8includesERKS0_>
 803524c:	b120      	cbz	r0, 8035258 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 803524e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8035252:	9801      	ldr	r0, [sp, #4]
 8035254:	f7ff feb0 	bl	8034fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8035258:	9903      	ldr	r1, [sp, #12]
 803525a:	4628      	mov	r0, r5
 803525c:	f7fb fe3e 	bl	8030edc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8035260:	2800      	cmp	r0, #0
 8035262:	f000 809c 	beq.w	803539e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8035266:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 803526a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 803526e:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8035272:	9309      	str	r3, [sp, #36]	@ 0x24
 8035274:	fa1f f189 	uxth.w	r1, r9
 8035278:	eb01 0c03 	add.w	ip, r1, r3
 803527c:	fa1f fa8c 	uxth.w	sl, ip
 8035280:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8035284:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8035288:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 803528c:	b283      	uxth	r3, r0
 803528e:	eb03 050c 	add.w	r5, r3, ip
 8035292:	b2ad      	uxth	r5, r5
 8035294:	9505      	str	r5, [sp, #20]
 8035296:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 803529a:	9504      	str	r5, [sp, #16]
 803529c:	4548      	cmp	r0, r9
 803529e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 80352a2:	f340 8099 	ble.w	80353d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80352a6:	1a5b      	subs	r3, r3, r1
 80352a8:	b29b      	uxth	r3, r3
 80352aa:	4596      	cmp	lr, r2
 80352ac:	fa0f f08a 	sxth.w	r0, sl
 80352b0:	b21e      	sxth	r6, r3
 80352b2:	dd2e      	ble.n	8035312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80352b4:	9f02      	ldr	r7, [sp, #8]
 80352b6:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 80352ba:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80352be:	9f04      	ldr	r7, [sp, #16]
 80352c0:	1a3f      	subs	r7, r7, r0
 80352c2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 80352c6:	fa1f fe8e 	uxth.w	lr, lr
 80352ca:	b292      	uxth	r2, r2
 80352cc:	ebae 0102 	sub.w	r1, lr, r2
 80352d0:	44a6      	add	lr, r4
 80352d2:	4402      	add	r2, r0
 80352d4:	b289      	uxth	r1, r1
 80352d6:	fa0f fe8e 	sxth.w	lr, lr
 80352da:	b212      	sxth	r2, r2
 80352dc:	b20d      	sxth	r5, r1
 80352de:	ebae 0202 	sub.w	r2, lr, r2
 80352e2:	436f      	muls	r7, r5
 80352e4:	4372      	muls	r2, r6
 80352e6:	4297      	cmp	r7, r2
 80352e8:	db09      	blt.n	80352fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80352ea:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 80352ee:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 80352f2:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80352f6:	449c      	add	ip, r3
 80352f8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80352fc:	e686      	b.n	803500c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80352fe:	4421      	add	r1, r4
 8035300:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8035304:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8035308:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 803530c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8035310:	e67c      	b.n	803500c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8035312:	9f04      	ldr	r7, [sp, #16]
 8035314:	42b8      	cmp	r0, r7
 8035316:	da27      	bge.n	8035368 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8035318:	9902      	ldr	r1, [sp, #8]
 803531a:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 803531e:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8035322:	eb05 010e 	add.w	r1, r5, lr
 8035326:	fa1f f881 	uxth.w	r8, r1
 803532a:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 803532e:	4411      	add	r1, r2
 8035330:	eba1 0108 	sub.w	r1, r1, r8
 8035334:	b289      	uxth	r1, r1
 8035336:	fa0f f988 	sxth.w	r9, r8
 803533a:	eba2 020e 	sub.w	r2, r2, lr
 803533e:	fa0f f881 	sxth.w	r8, r1
 8035342:	1a3f      	subs	r7, r7, r0
 8035344:	4372      	muls	r2, r6
 8035346:	fb08 f707 	mul.w	r7, r8, r7
 803534a:	42ba      	cmp	r2, r7
 803534c:	dc06      	bgt.n	803535c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 803534e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8035352:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8035356:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 803535a:	e7ca      	b.n	80352f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 803535c:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8035360:	4429      	add	r1, r5
 8035362:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8035366:	e651      	b.n	803500c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8035368:	9805      	ldr	r0, [sp, #20]
 803536a:	ebaa 0000 	sub.w	r0, sl, r0
 803536e:	b280      	uxth	r0, r0
 8035370:	2d06      	cmp	r5, #6
 8035372:	fa0f fe80 	sxth.w	lr, r0
 8035376:	d817      	bhi.n	80353a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8035378:	9b04      	ldr	r3, [sp, #16]
 803537a:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 803537e:	1c6b      	adds	r3, r5, #1
 8035380:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8035384:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8035388:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 803538c:	9b01      	ldr	r3, [sp, #4]
 803538e:	9801      	ldr	r0, [sp, #4]
 8035390:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8035394:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8035398:	805a      	strh	r2, [r3, #2]
 803539a:	809e      	strh	r6, [r3, #4]
 803539c:	80d9      	strh	r1, [r3, #6]
 803539e:	9b02      	ldr	r3, [sp, #8]
 80353a0:	3b01      	subs	r3, #1
 80353a2:	9302      	str	r3, [sp, #8]
 80353a4:	3c08      	subs	r4, #8
 80353a6:	e747      	b.n	8035238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80353a8:	9a02      	ldr	r2, [sp, #8]
 80353aa:	45b6      	cmp	lr, r6
 80353ac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80353b0:	db0d      	blt.n	80353ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80353b2:	449c      	add	ip, r3
 80353b4:	fa1f fc8c 	uxth.w	ip, ip
 80353b8:	445a      	add	r2, fp
 80353ba:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80353be:	448c      	add	ip, r1
 80353c0:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80353c4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 80353c8:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 80353cc:	e61e      	b.n	803500c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80353ce:	445a      	add	r2, fp
 80353d0:	4484      	add	ip, r0
 80353d2:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 80353d6:	e78f      	b.n	80352f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80353d8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 80353dc:	fa1f f18e 	uxth.w	r1, lr
 80353e0:	eb01 0806 	add.w	r8, r1, r6
 80353e4:	b293      	uxth	r3, r2
 80353e6:	fa1f f888 	uxth.w	r8, r8
 80353ea:	9306      	str	r3, [sp, #24]
 80353ec:	fa0f f388 	sxth.w	r3, r8
 80353f0:	9307      	str	r3, [sp, #28]
 80353f2:	9f06      	ldr	r7, [sp, #24]
 80353f4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80353f8:	443b      	add	r3, r7
 80353fa:	b29b      	uxth	r3, r3
 80353fc:	4596      	cmp	lr, r2
 80353fe:	9308      	str	r3, [sp, #32]
 8035400:	da24      	bge.n	803544c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8035402:	9905      	ldr	r1, [sp, #20]
 8035404:	eba3 0308 	sub.w	r3, r3, r8
 8035408:	ebaa 0401 	sub.w	r4, sl, r1
 803540c:	b2a4      	uxth	r4, r4
 803540e:	b29b      	uxth	r3, r3
 8035410:	b225      	sxth	r5, r4
 8035412:	b219      	sxth	r1, r3
 8035414:	eba2 020e 	sub.w	r2, r2, lr
 8035418:	eba9 0000 	sub.w	r0, r9, r0
 803541c:	436a      	muls	r2, r5
 803541e:	4348      	muls	r0, r1
 8035420:	4282      	cmp	r2, r0
 8035422:	9a02      	ldr	r2, [sp, #8]
 8035424:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8035428:	445a      	add	r2, fp
 803542a:	dc06      	bgt.n	803543a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 803542c:	9b07      	ldr	r3, [sp, #28]
 803542e:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8035432:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8035436:	44a4      	add	ip, r4
 8035438:	e75e      	b.n	80352f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 803543a:	9904      	ldr	r1, [sp, #16]
 803543c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8035440:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8035444:	4433      	add	r3, r6
 8035446:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 803544a:	e5df      	b.n	803500c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 803544c:	9f06      	ldr	r7, [sp, #24]
 803544e:	9b04      	ldr	r3, [sp, #16]
 8035450:	1bc9      	subs	r1, r1, r7
 8035452:	fa0f f78a 	sxth.w	r7, sl
 8035456:	b289      	uxth	r1, r1
 8035458:	429f      	cmp	r7, r3
 803545a:	fa0f fe81 	sxth.w	lr, r1
 803545e:	dd23      	ble.n	80354a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8035460:	9a05      	ldr	r2, [sp, #20]
 8035462:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8035466:	9d07      	ldr	r5, [sp, #28]
 8035468:	ebaa 0202 	sub.w	r2, sl, r2
 803546c:	b292      	uxth	r2, r2
 803546e:	eba5 0a03 	sub.w	sl, r5, r3
 8035472:	b214      	sxth	r4, r2
 8035474:	eba9 0000 	sub.w	r0, r9, r0
 8035478:	9b02      	ldr	r3, [sp, #8]
 803547a:	fb0e f000 	mul.w	r0, lr, r0
 803547e:	fb04 fa0a 	mul.w	sl, r4, sl
 8035482:	00db      	lsls	r3, r3, #3
 8035484:	4550      	cmp	r0, sl
 8035486:	445b      	add	r3, fp
 8035488:	db03      	blt.n	8035492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 803548a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 803548e:	4494      	add	ip, r2
 8035490:	e732      	b.n	80352f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8035492:	9a04      	ldr	r2, [sp, #16]
 8035494:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8035498:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 803549c:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80354a0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80354a4:	4431      	add	r1, r6
 80354a6:	e75c      	b.n	8035362 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80354a8:	9b08      	ldr	r3, [sp, #32]
 80354aa:	eba3 0308 	sub.w	r3, r3, r8
 80354ae:	b29b      	uxth	r3, r3
 80354b0:	2d06      	cmp	r5, #6
 80354b2:	b218      	sxth	r0, r3
 80354b4:	d813      	bhi.n	80354de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80354b6:	9b07      	ldr	r3, [sp, #28]
 80354b8:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80354bc:	1c6b      	adds	r3, r5, #1
 80354be:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80354c2:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80354c6:	9b01      	ldr	r3, [sp, #4]
 80354c8:	9901      	ldr	r1, [sp, #4]
 80354ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80354ce:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80354d2:	805a      	strh	r2, [r3, #2]
 80354d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80354d6:	809a      	strh	r2, [r3, #4]
 80354d8:	f8a3 e006 	strh.w	lr, [r3, #6]
 80354dc:	e75f      	b.n	803539e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80354de:	9c02      	ldr	r4, [sp, #8]
 80354e0:	4570      	cmp	r0, lr
 80354e2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80354e6:	db0d      	blt.n	8035504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80354e8:	4431      	add	r1, r6
 80354ea:	9b06      	ldr	r3, [sp, #24]
 80354ec:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80354f0:	b289      	uxth	r1, r1
 80354f2:	445c      	add	r4, fp
 80354f4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80354f8:	4419      	add	r1, r3
 80354fa:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 80354fe:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8035502:	e583      	b.n	803500c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8035504:	445c      	add	r4, fp
 8035506:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 803550a:	e79b      	b.n	8035444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 803550c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8035510:	1e65      	subs	r5, r4, #1
 8035512:	b2ad      	uxth	r5, r5
 8035514:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8035518:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 803551c:	42b5      	cmp	r5, r6
 803551e:	d044      	beq.n	80355aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8035520:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8035524:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8035528:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 803552c:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8035530:	4282      	cmp	r2, r0
 8035532:	d11f      	bne.n	8035574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8035534:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8035538:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 803553c:	459c      	cmp	ip, r3
 803553e:	d119      	bne.n	8035574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8035540:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8035544:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8035548:	19d8      	adds	r0, r3, r7
 803554a:	b200      	sxth	r0, r0
 803554c:	4288      	cmp	r0, r1
 803554e:	d109      	bne.n	8035564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8035550:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8035554:	4413      	add	r3, r2
 8035556:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 803555a:	4629      	mov	r1, r5
 803555c:	9801      	ldr	r0, [sp, #4]
 803555e:	f7ff fd2b 	bl	8034fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8035562:	e003      	b.n	803556c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8035564:	4411      	add	r1, r2
 8035566:	b209      	sxth	r1, r1
 8035568:	42b9      	cmp	r1, r7
 803556a:	d0f3      	beq.n	8035554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 803556c:	3d01      	subs	r5, #1
 803556e:	b2ad      	uxth	r5, r5
 8035570:	3c08      	subs	r4, #8
 8035572:	e7d3      	b.n	803551c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8035574:	42b9      	cmp	r1, r7
 8035576:	d1f9      	bne.n	803556c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8035578:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 803557c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8035580:	4299      	cmp	r1, r3
 8035582:	d1f3      	bne.n	803556c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8035584:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8035588:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 803558c:	181f      	adds	r7, r3, r0
 803558e:	b23f      	sxth	r7, r7
 8035590:	42ba      	cmp	r2, r7
 8035592:	d105      	bne.n	80355a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8035594:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8035598:	440b      	add	r3, r1
 803559a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 803559e:	e7dc      	b.n	803555a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80355a0:	440a      	add	r2, r1
 80355a2:	b212      	sxth	r2, r2
 80355a4:	4290      	cmp	r0, r2
 80355a6:	d1e1      	bne.n	803556c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80355a8:	e7f6      	b.n	8035598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80355aa:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80355ae:	2e07      	cmp	r6, #7
 80355b0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80355b4:	d812      	bhi.n	80355dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80355b6:	1c75      	adds	r5, r6, #1
 80355b8:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80355bc:	9d01      	ldr	r5, [sp, #4]
 80355be:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80355c2:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80355c6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80355ca:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80355ce:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80355d2:	442c      	add	r4, r5
 80355d4:	8061      	strh	r1, [r4, #2]
 80355d6:	80a2      	strh	r2, [r4, #4]
 80355d8:	80e3      	strh	r3, [r4, #6]
 80355da:	e581      	b.n	80350e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80355dc:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80355e0:	3e01      	subs	r6, #1
 80355e2:	445c      	add	r4, fp
 80355e4:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 80355e8:	f04f 37ff 	mov.w	r7, #4294967295
 80355ec:	2500      	movs	r5, #0
 80355ee:	9305      	str	r3, [sp, #20]
 80355f0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80355f4:	9302      	str	r3, [sp, #8]
 80355f6:	1e72      	subs	r2, r6, #1
 80355f8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80355fc:	9304      	str	r3, [sp, #16]
 80355fe:	4691      	mov	r9, r2
 8035600:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8035604:	f1b9 3fff 	cmp.w	r9, #4294967295
 8035608:	bf14      	ite	ne
 803560a:	9905      	ldrne	r1, [sp, #20]
 803560c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8035610:	6818      	ldr	r0, [r3, #0]
 8035612:	9207      	str	r2, [sp, #28]
 8035614:	bf18      	it	ne
 8035616:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 803561a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 803561e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8035622:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8035626:	9306      	str	r3, [sp, #24]
 8035628:	fb18 f801 	smulbb	r8, r8, r1
 803562c:	6859      	ldr	r1, [r3, #4]
 803562e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8035632:	4671      	mov	r1, lr
 8035634:	a80c      	add	r0, sp, #48	@ 0x30
 8035636:	f7fa fdd9 	bl	80301ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 803563a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 803563e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8035642:	9b04      	ldr	r3, [sp, #16]
 8035644:	9a02      	ldr	r2, [sp, #8]
 8035646:	fb10 f001 	smulbb	r0, r0, r1
 803564a:	fb02 8803 	mla	r8, r2, r3, r8
 803564e:	eba0 0108 	sub.w	r1, r0, r8
 8035652:	f04f 0c08 	mov.w	ip, #8
 8035656:	fb90 f0fc 	sdiv	r0, r0, ip
 803565a:	4288      	cmp	r0, r1
 803565c:	dc20      	bgt.n	80356a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 803565e:	4551      	cmp	r1, sl
 8035660:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8035664:	da03      	bge.n	803566e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 8035666:	b1d9      	cbz	r1, 80356a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 8035668:	468a      	mov	sl, r1
 803566a:	464f      	mov	r7, r9
 803566c:	4635      	mov	r5, r6
 803566e:	f109 39ff 	add.w	r9, r9, #4294967295
 8035672:	f119 0f02 	cmn.w	r9, #2
 8035676:	d1c5      	bne.n	8035604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8035678:	4616      	mov	r6, r2
 803567a:	3201      	adds	r2, #1
 803567c:	f1a4 0408 	sub.w	r4, r4, #8
 8035680:	d1b6      	bne.n	80355f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8035682:	9b01      	ldr	r3, [sp, #4]
 8035684:	b2ac      	uxth	r4, r5
 8035686:	00ed      	lsls	r5, r5, #3
 8035688:	1958      	adds	r0, r3, r5
 803568a:	1c7b      	adds	r3, r7, #1
 803568c:	d10b      	bne.n	80356a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 803568e:	4601      	mov	r1, r0
 8035690:	9803      	ldr	r0, [sp, #12]
 8035692:	f7fa fdab 	bl	80301ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8035696:	4621      	mov	r1, r4
 8035698:	9801      	ldr	r0, [sp, #4]
 803569a:	f7ff fc8d 	bl	8034fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 803569e:	e4b5      	b.n	803500c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80356a0:	464f      	mov	r7, r9
 80356a2:	4635      	mov	r5, r6
 80356a4:	e7ed      	b.n	8035682 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 80356a6:	9b01      	ldr	r3, [sp, #4]
 80356a8:	00ff      	lsls	r7, r7, #3
 80356aa:	19d9      	adds	r1, r3, r7
 80356ac:	f7fa fd9e 	bl	80301ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80356b0:	9b03      	ldr	r3, [sp, #12]
 80356b2:	cb03      	ldmia	r3!, {r0, r1}
 80356b4:	445f      	add	r7, fp
 80356b6:	445d      	add	r5, fp
 80356b8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 80356bc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80356c0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80356c4:	9b03      	ldr	r3, [sp, #12]
 80356c6:	6869      	ldr	r1, [r5, #4]
 80356c8:	c303      	stmia	r3!, {r0, r1}
 80356ca:	e7e4      	b.n	8035696 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

080356cc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80356cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80356d0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 80356d4:	b09b      	sub	sp, #108	@ 0x6c
 80356d6:	4604      	mov	r4, r0
 80356d8:	4630      	mov	r0, r6
 80356da:	f7ff fae3 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80356de:	4605      	mov	r5, r0
 80356e0:	b948      	cbnz	r0, 80356f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80356e2:	6823      	ldr	r3, [r4, #0]
 80356e4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80356e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80356ea:	4620      	mov	r0, r4
 80356ec:	4798      	blx	r3
 80356ee:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 80356f2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 80356f6:	4bc6      	ldr	r3, [pc, #792]	@ (8035a10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 80356f8:	681b      	ldr	r3, [r3, #0]
 80356fa:	2b00      	cmp	r3, #0
 80356fc:	d03f      	beq.n	803577e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80356fe:	4dc5      	ldr	r5, [pc, #788]	@ (8035a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8035700:	4628      	mov	r0, r5
 8035702:	f7ff facf 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8035706:	4606      	mov	r6, r0
 8035708:	2800      	cmp	r0, #0
 803570a:	d138      	bne.n	803577e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 803570c:	4628      	mov	r0, r5
 803570e:	f7ff f989 	bl	8034a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8035712:	6823      	ldr	r3, [r4, #0]
 8035714:	6829      	ldr	r1, [r5, #0]
 8035716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8035718:	686a      	ldr	r2, [r5, #4]
 803571a:	4620      	mov	r0, r4
 803571c:	4798      	blx	r3
 803571e:	802e      	strh	r6, [r5, #0]
 8035720:	806e      	strh	r6, [r5, #2]
 8035722:	80ae      	strh	r6, [r5, #4]
 8035724:	80ee      	strh	r6, [r5, #6]
 8035726:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 803572a:	4dbb      	ldr	r5, [pc, #748]	@ (8035a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 803572c:	4640      	mov	r0, r8
 803572e:	f7ff fbeb 	bl	8034f08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8035732:	882e      	ldrh	r6, [r5, #0]
 8035734:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8035738:	4633      	mov	r3, r6
 803573a:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 803573e:	42bb      	cmp	r3, r7
 8035740:	d224      	bcs.n	803578c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8035742:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8035746:	2907      	cmp	r1, #7
 8035748:	d816      	bhi.n	8035778 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 803574a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 803574e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8035752:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8035756:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 803575a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 803575e:	1c4a      	adds	r2, r1, #1
 8035760:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8035764:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8035768:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 803576c:	f8a2 a002 	strh.w	sl, [r2, #2]
 8035770:	f8a2 e004 	strh.w	lr, [r2, #4]
 8035774:	f8a2 c006 	strh.w	ip, [r2, #6]
 8035778:	3301      	adds	r3, #1
 803577a:	b29b      	uxth	r3, r3
 803577c:	e7df      	b.n	803573e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 803577e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8035782:	2b00      	cmp	r3, #0
 8035784:	d1cf      	bne.n	8035726 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8035786:	b01b      	add	sp, #108	@ 0x6c
 8035788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803578c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8035790:	42b3      	cmp	r3, r6
 8035792:	d90c      	bls.n	80357ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8035794:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8035798:	6822      	ldr	r2, [r4, #0]
 803579a:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 803579e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80357a0:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80357a4:	4620      	mov	r0, r4
 80357a6:	3601      	adds	r6, #1
 80357a8:	47b8      	blx	r7
 80357aa:	b2b6      	uxth	r6, r6
 80357ac:	e7ee      	b.n	803578c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80357ae:	4a9b      	ldr	r2, [pc, #620]	@ (8035a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80357b0:	6813      	ldr	r3, [r2, #0]
 80357b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80357b6:	2b01      	cmp	r3, #1
 80357b8:	4691      	mov	r9, r2
 80357ba:	f040 80e2 	bne.w	8035982 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80357be:	8829      	ldrh	r1, [r5, #0]
 80357c0:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80357c4:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80357c8:	33ae      	adds	r3, #174	@ 0xae
 80357ca:	2600      	movs	r6, #0
 80357cc:	428f      	cmp	r7, r1
 80357ce:	f103 0308 	add.w	r3, r3, #8
 80357d2:	dd0a      	ble.n	80357ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80357d4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80357d8:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80357dc:	4402      	add	r2, r0
 80357de:	b212      	sxth	r2, r2
 80357e0:	4296      	cmp	r6, r2
 80357e2:	bfb8      	it	lt
 80357e4:	4616      	movlt	r6, r2
 80357e6:	3101      	adds	r1, #1
 80357e8:	e7f0      	b.n	80357cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80357ea:	4b8d      	ldr	r3, [pc, #564]	@ (8035a20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80357ec:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 8035a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 80357f0:	881b      	ldrh	r3, [r3, #0]
 80357f2:	2b0f      	cmp	r3, #15
 80357f4:	bf88      	it	hi
 80357f6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80357fa:	f04f 0300 	mov.w	r3, #0
 80357fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8035802:	bf98      	it	ls
 8035804:	f04f 0b01 	movls.w	fp, #1
 8035808:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 803580c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8035810:	4b82      	ldr	r3, [pc, #520]	@ (8035a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8035812:	4438      	add	r0, r7
 8035814:	b207      	sxth	r7, r0
 8035816:	6818      	ldr	r0, [r3, #0]
 8035818:	42b7      	cmp	r7, r6
 803581a:	6803      	ldr	r3, [r0, #0]
 803581c:	f280 8083 	bge.w	8035926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8035820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8035824:	4798      	blx	r3
 8035826:	eb07 030b 	add.w	r3, r7, fp
 803582a:	4298      	cmp	r0, r3
 803582c:	da07      	bge.n	803583e <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 803582e:	42b0      	cmp	r0, r6
 8035830:	da05      	bge.n	803583e <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 8035832:	4287      	cmp	r7, r0
 8035834:	dd6c      	ble.n	8035910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8035836:	2f00      	cmp	r7, #0
 8035838:	dd6a      	ble.n	8035910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 803583a:	4630      	mov	r0, r6
 803583c:	e004      	b.n	8035848 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 803583e:	4287      	cmp	r7, r0
 8035840:	dcfb      	bgt.n	803583a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8035842:	42b0      	cmp	r0, r6
 8035844:	bfa8      	it	ge
 8035846:	4630      	movge	r0, r6
 8035848:	4b76      	ldr	r3, [pc, #472]	@ (8035a24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 803584a:	f8ad 7016 	strh.w	r7, [sp, #22]
 803584e:	1bc0      	subs	r0, r0, r7
 8035850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8035854:	882f      	ldrh	r7, [r5, #0]
 8035856:	f8ad 3018 	strh.w	r3, [sp, #24]
 803585a:	2200      	movs	r2, #0
 803585c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8035860:	f8ad 001a 	strh.w	r0, [sp, #26]
 8035864:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8035868:	42bb      	cmp	r3, r7
 803586a:	d9cd      	bls.n	8035808 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 803586c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8035870:	ab07      	add	r3, sp, #28
 8035872:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8035876:	6851      	ldr	r1, [r2, #4]
 8035878:	c303      	stmia	r3!, {r0, r1}
 803587a:	a905      	add	r1, sp, #20
 803587c:	a807      	add	r0, sp, #28
 803587e:	f7fb fb2d 	bl	8030edc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8035882:	2800      	cmp	r0, #0
 8035884:	d04c      	beq.n	8035920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 8035886:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 803588a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 803588e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8035892:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8035896:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 803589a:	9302      	str	r3, [sp, #8]
 803589c:	4686      	mov	lr, r0
 803589e:	4290      	cmp	r0, r2
 80358a0:	4450      	add	r0, sl
 80358a2:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80358a6:	bfb8      	it	lt
 80358a8:	4696      	movlt	lr, r2
 80358aa:	4452      	add	r2, sl
 80358ac:	4299      	cmp	r1, r3
 80358ae:	b280      	uxth	r0, r0
 80358b0:	b292      	uxth	r2, r2
 80358b2:	468c      	mov	ip, r1
 80358b4:	fa0f fa82 	sxth.w	sl, r2
 80358b8:	bfb8      	it	lt
 80358ba:	469c      	movlt	ip, r3
 80358bc:	b203      	sxth	r3, r0
 80358be:	4553      	cmp	r3, sl
 80358c0:	bfb8      	it	lt
 80358c2:	4602      	movlt	r2, r0
 80358c4:	eba2 020e 	sub.w	r2, r2, lr
 80358c8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80358cc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 80358d0:	9b02      	ldr	r3, [sp, #8]
 80358d2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80358d6:	4411      	add	r1, r2
 80358d8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80358dc:	f8ad c01e 	strh.w	ip, [sp, #30]
 80358e0:	4413      	add	r3, r2
 80358e2:	b289      	uxth	r1, r1
 80358e4:	b29b      	uxth	r3, r3
 80358e6:	b208      	sxth	r0, r1
 80358e8:	b21a      	sxth	r2, r3
 80358ea:	4290      	cmp	r0, r2
 80358ec:	bfb8      	it	lt
 80358ee:	460b      	movlt	r3, r1
 80358f0:	eba3 030c 	sub.w	r3, r3, ip
 80358f4:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80358f8:	a807      	add	r0, sp, #28
 80358fa:	f7ff f9d3 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80358fe:	b920      	cbnz	r0, 803590a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8035900:	6823      	ldr	r3, [r4, #0]
 8035902:	a907      	add	r1, sp, #28
 8035904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8035906:	4620      	mov	r0, r4
 8035908:	4798      	blx	r3
 803590a:	3701      	adds	r7, #1
 803590c:	b2bf      	uxth	r7, r7
 803590e:	e7a9      	b.n	8035864 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 8035910:	f8d9 0000 	ldr.w	r0, [r9]
 8035914:	6803      	ldr	r3, [r0, #0]
 8035916:	2101      	movs	r1, #1
 8035918:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 803591c:	4798      	blx	r3
 803591e:	e773      	b.n	8035808 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 8035920:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8035924:	e7e8      	b.n	80358f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 8035926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8035928:	4798      	blx	r3
 803592a:	4b3f      	ldr	r3, [pc, #252]	@ (8035a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 803592c:	781b      	ldrb	r3, [r3, #0]
 803592e:	2b00      	cmp	r3, #0
 8035930:	f43f af29 	beq.w	8035786 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8035934:	2300      	movs	r3, #0
 8035936:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 803593a:	882b      	ldrh	r3, [r5, #0]
 803593c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8035940:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8035944:	42ab      	cmp	r3, r5
 8035946:	f4bf af1e 	bcs.w	8035786 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 803594a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 803594e:	2907      	cmp	r1, #7
 8035950:	d814      	bhi.n	803597c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8035952:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8035956:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 803595a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 803595e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8035962:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8035966:	1c4a      	adds	r2, r1, #1
 8035968:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 803596c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8035970:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8035974:	f8a2 c002 	strh.w	ip, [r2, #2]
 8035978:	8097      	strh	r7, [r2, #4]
 803597a:	80d6      	strh	r6, [r2, #6]
 803597c:	3301      	adds	r3, #1
 803597e:	b29b      	uxth	r3, r3
 8035980:	e7e0      	b.n	8035944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 8035982:	2b02      	cmp	r3, #2
 8035984:	f040 8133 	bne.w	8035bee <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 8035988:	4b28      	ldr	r3, [pc, #160]	@ (8035a2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 803598a:	781b      	ldrb	r3, [r3, #0]
 803598c:	2b01      	cmp	r3, #1
 803598e:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8035992:	f000 8098 	beq.w	8035ac6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8035996:	882a      	ldrh	r2, [r5, #0]
 8035998:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 803599c:	3201      	adds	r2, #1
 803599e:	b292      	uxth	r2, r2
 80359a0:	2900      	cmp	r1, #0
 80359a2:	d0c2      	beq.n	803592a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80359a4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80359a8:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80359ac:	441e      	add	r6, r3
 80359ae:	b236      	sxth	r6, r6
 80359b0:	4694      	mov	ip, r2
 80359b2:	f04f 0900 	mov.w	r9, #0
 80359b6:	fa1f f38c 	uxth.w	r3, ip
 80359ba:	4299      	cmp	r1, r3
 80359bc:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80359c0:	f240 80bf 	bls.w	8035b42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 80359c4:	4427      	add	r7, r4
 80359c6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80359ca:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80359ce:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 80359d2:	4283      	cmp	r3, r0
 80359d4:	f340 80a1 	ble.w	8035b1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 80359d8:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 80359dc:	4406      	add	r6, r0
 80359de:	b236      	sxth	r6, r6
 80359e0:	429e      	cmp	r6, r3
 80359e2:	bfa8      	it	ge
 80359e4:	461e      	movge	r6, r3
 80359e6:	46e1      	mov	r9, ip
 80359e8:	f10c 0c01 	add.w	ip, ip, #1
 80359ec:	e7e3      	b.n	80359b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 80359ee:	d10a      	bne.n	8035a06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 80359f0:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 80359f4:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 80359f8:	4562      	cmp	r2, ip
 80359fa:	bfb8      	it	lt
 80359fc:	4662      	movlt	r2, ip
 80359fe:	4288      	cmp	r0, r1
 8035a00:	bfb8      	it	lt
 8035a02:	461f      	movlt	r7, r3
 8035a04:	e087      	b.n	8035b16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 8035a06:	428a      	cmp	r2, r1
 8035a08:	bfb8      	it	lt
 8035a0a:	460a      	movlt	r2, r1
 8035a0c:	e083      	b.n	8035b16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 8035a0e:	bf00      	nop
 8035a10:	2000b918 	.word	0x2000b918
 8035a14:	2000b924 	.word	0x2000b924
 8035a18:	200007c0 	.word	0x200007c0
 8035a1c:	2000b8e0 	.word	0x2000b8e0
 8035a20:	2000b8d6 	.word	0x2000b8d6
 8035a24:	2000b8d4 	.word	0x2000b8d4
 8035a28:	2000b8de 	.word	0x2000b8de
 8035a2c:	2000b8d8 	.word	0x2000b8d8
 8035a30:	19a1      	adds	r1, r4, r6
 8035a32:	ab07      	add	r3, sp, #28
 8035a34:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8035a38:	6849      	ldr	r1, [r1, #4]
 8035a3a:	c303      	stmia	r3!, {r0, r1}
 8035a3c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8035a40:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8035a44:	2b13      	cmp	r3, #19
 8035a46:	bfd8      	it	le
 8035a48:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8035a4c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8035a50:	440b      	add	r3, r1
 8035a52:	1a9b      	subs	r3, r3, r2
 8035a54:	a807      	add	r0, sp, #28
 8035a56:	f8ad 3020 	strh.w	r3, [sp, #32]
 8035a5a:	f7fe fffd 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8035a5e:	a807      	add	r0, sp, #28
 8035a60:	f7ff f920 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8035a64:	bb78      	cbnz	r0, 8035ac6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8035a66:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8035a6a:	f8d9 0000 	ldr.w	r0, [r9]
 8035a6e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8035a72:	f8d0 e000 	ldr.w	lr, [r0]
 8035a76:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8035a7a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8035a7e:	f1bc 0f14 	cmp.w	ip, #20
 8035a82:	bfa8      	it	ge
 8035a84:	f04f 0c14 	movge.w	ip, #20
 8035a88:	fa1f fc8c 	uxth.w	ip, ip
 8035a8c:	f8cd c000 	str.w	ip, [sp]
 8035a90:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8035a94:	47d8      	blx	fp
 8035a96:	4683      	mov	fp, r0
 8035a98:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8035a9c:	a807      	add	r0, sp, #28
 8035a9e:	f7fe ffc1 	bl	8034a24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8035aa2:	6823      	ldr	r3, [r4, #0]
 8035aa4:	4426      	add	r6, r4
 8035aa6:	4620      	mov	r0, r4
 8035aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8035aaa:	a907      	add	r1, sp, #28
 8035aac:	4798      	blx	r3
 8035aae:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8035ab2:	eba0 000b 	sub.w	r0, r0, fp
 8035ab6:	b200      	sxth	r0, r0
 8035ab8:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8035abc:	b918      	cbnz	r0, 8035ac6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 8035abe:	b2b9      	uxth	r1, r7
 8035ac0:	4650      	mov	r0, sl
 8035ac2:	f7ff fa79 	bl	8034fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8035ac6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8035aca:	f1bb 0f00 	cmp.w	fp, #0
 8035ace:	f43f af2c 	beq.w	803592a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8035ad2:	882b      	ldrh	r3, [r5, #0]
 8035ad4:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8035ad8:	3301      	adds	r3, #1
 8035ada:	b29b      	uxth	r3, r3
 8035adc:	2700      	movs	r7, #0
 8035ade:	b299      	uxth	r1, r3
 8035ae0:	458b      	cmp	fp, r1
 8035ae2:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 8035ae6:	d9a3      	bls.n	8035a30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 8035ae8:	4426      	add	r6, r4
 8035aea:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8035aee:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8035af2:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8035af6:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8035afa:	4408      	add	r0, r1
 8035afc:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8035b00:	4461      	add	r1, ip
 8035b02:	b200      	sxth	r0, r0
 8035b04:	b209      	sxth	r1, r1
 8035b06:	4288      	cmp	r0, r1
 8035b08:	f6bf af71 	bge.w	80359ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8035b0c:	4584      	cmp	ip, r0
 8035b0e:	4662      	mov	r2, ip
 8035b10:	461f      	mov	r7, r3
 8035b12:	bfb8      	it	lt
 8035b14:	4602      	movlt	r2, r0
 8035b16:	3301      	adds	r3, #1
 8035b18:	e7e1      	b.n	8035ade <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 8035b1a:	d10e      	bne.n	8035b3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 8035b1c:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8035b20:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8035b24:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8035b28:	4473      	add	r3, lr
 8035b2a:	b21b      	sxth	r3, r3
 8035b2c:	429e      	cmp	r6, r3
 8035b2e:	bfa8      	it	ge
 8035b30:	461e      	movge	r6, r3
 8035b32:	4287      	cmp	r7, r0
 8035b34:	bfb8      	it	lt
 8035b36:	46e1      	movlt	r9, ip
 8035b38:	e756      	b.n	80359e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8035b3a:	4286      	cmp	r6, r0
 8035b3c:	bfa8      	it	ge
 8035b3e:	4606      	movge	r6, r0
 8035b40:	e752      	b.n	80359e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8035b42:	eb0a 0007 	add.w	r0, sl, r7
 8035b46:	4427      	add	r7, r4
 8035b48:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8035b4c:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 8035b50:	f1bb 0f13 	cmp.w	fp, #19
 8035b54:	bfde      	ittt	le
 8035b56:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8035b5a:	445e      	addle	r6, fp
 8035b5c:	b236      	sxthle	r6, r6
 8035b5e:	f7ff f8a1 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8035b62:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8035b66:	2800      	cmp	r0, #0
 8035b68:	f47f af1a 	bne.w	80359a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 8035b6c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8035b70:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8035b74:	482a      	ldr	r0, [pc, #168]	@ (8035c20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 8035b76:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8035b7a:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8035b7e:	6800      	ldr	r0, [r0, #0]
 8035b80:	f8ad 101c 	strh.w	r1, [sp, #28]
 8035b84:	1ab6      	subs	r6, r6, r2
 8035b86:	2e14      	cmp	r6, #20
 8035b88:	f8ad 201e 	strh.w	r2, [sp, #30]
 8035b8c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8035b90:	bfa8      	it	ge
 8035b92:	2614      	movge	r6, #20
 8035b94:	f8d0 c000 	ldr.w	ip, [r0]
 8035b98:	b2b6      	uxth	r6, r6
 8035b9a:	fa1f fb8b 	uxth.w	fp, fp
 8035b9e:	455e      	cmp	r6, fp
 8035ba0:	bf94      	ite	ls
 8035ba2:	9600      	strls	r6, [sp, #0]
 8035ba4:	f8cd b000 	strhi.w	fp, [sp]
 8035ba8:	b292      	uxth	r2, r2
 8035baa:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8035bae:	b29b      	uxth	r3, r3
 8035bb0:	b289      	uxth	r1, r1
 8035bb2:	47b0      	blx	r6
 8035bb4:	6823      	ldr	r3, [r4, #0]
 8035bb6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8035bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8035bbc:	a907      	add	r1, sp, #28
 8035bbe:	4620      	mov	r0, r4
 8035bc0:	4798      	blx	r3
 8035bc2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8035bc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8035bca:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8035bce:	1a5b      	subs	r3, r3, r1
 8035bd0:	440a      	add	r2, r1
 8035bd2:	b21b      	sxth	r3, r3
 8035bd4:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8035bd8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8035bdc:	2b00      	cmp	r3, #0
 8035bde:	f47f aeda 	bne.w	8035996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8035be2:	fa1f f189 	uxth.w	r1, r9
 8035be6:	4650      	mov	r0, sl
 8035be8:	f7ff f9e6 	bl	8034fb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8035bec:	e6d3      	b.n	8035996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8035bee:	882e      	ldrh	r6, [r5, #0]
 8035bf0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8035bf4:	42b3      	cmp	r3, r6
 8035bf6:	f67f ae98 	bls.w	803592a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8035bfa:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8035bfe:	ab07      	add	r3, sp, #28
 8035c00:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8035c04:	6851      	ldr	r1, [r2, #4]
 8035c06:	c303      	stmia	r3!, {r0, r1}
 8035c08:	a807      	add	r0, sp, #28
 8035c0a:	f7ff f84b 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8035c0e:	b920      	cbnz	r0, 8035c1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 8035c10:	6823      	ldr	r3, [r4, #0]
 8035c12:	a907      	add	r1, sp, #28
 8035c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8035c16:	4620      	mov	r0, r4
 8035c18:	4798      	blx	r3
 8035c1a:	3601      	adds	r6, #1
 8035c1c:	b2b6      	uxth	r6, r6
 8035c1e:	e7e7      	b.n	8035bf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 8035c20:	2000b8e0 	.word	0x2000b8e0

08035c24 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8035c24:	4b03      	ldr	r3, [pc, #12]	@ (8035c34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8035c26:	2200      	movs	r2, #0
 8035c28:	801a      	strh	r2, [r3, #0]
 8035c2a:	805a      	strh	r2, [r3, #2]
 8035c2c:	809a      	strh	r2, [r3, #4]
 8035c2e:	80da      	strh	r2, [r3, #6]
 8035c30:	4770      	bx	lr
 8035c32:	bf00      	nop
 8035c34:	2000b924 	.word	0x2000b924

08035c38 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8035c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035c3c:	4606      	mov	r6, r0
 8035c3e:	b09d      	sub	sp, #116	@ 0x74
 8035c40:	a803      	add	r0, sp, #12
 8035c42:	4614      	mov	r4, r2
 8035c44:	468a      	mov	sl, r1
 8035c46:	461d      	mov	r5, r3
 8035c48:	f000 fe41 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
 8035c4c:	6833      	ldr	r3, [r6, #0]
 8035c4e:	4630      	mov	r0, r6
 8035c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8035c52:	4798      	blx	r3
 8035c54:	6833      	ldr	r3, [r6, #0]
 8035c56:	4607      	mov	r7, r0
 8035c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8035c5a:	4630      	mov	r0, r6
 8035c5c:	4798      	blx	r3
 8035c5e:	462a      	mov	r2, r5
 8035c60:	9000      	str	r0, [sp, #0]
 8035c62:	4621      	mov	r1, r4
 8035c64:	463b      	mov	r3, r7
 8035c66:	a803      	add	r0, sp, #12
 8035c68:	f000 fe8c 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8035c6c:	2500      	movs	r5, #0
 8035c6e:	462c      	mov	r4, r5
 8035c70:	46a9      	mov	r9, r5
 8035c72:	46a8      	mov	r8, r5
 8035c74:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8035c78:	2300      	movs	r3, #0
 8035c7a:	9302      	str	r3, [sp, #8]
 8035c7c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8035c80:	429c      	cmp	r4, r3
 8035c82:	d002      	beq.n	8035c8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8035c84:	455c      	cmp	r4, fp
 8035c86:	bf18      	it	ne
 8035c88:	4625      	movne	r5, r4
 8035c8a:	ab02      	add	r3, sp, #8
 8035c8c:	4632      	mov	r2, r6
 8035c8e:	4651      	mov	r1, sl
 8035c90:	a803      	add	r0, sp, #12
 8035c92:	f001 f979 	bl	8036f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8035c96:	4604      	mov	r4, r0
 8035c98:	b108      	cbz	r0, 8035c9e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8035c9a:	280a      	cmp	r0, #10
 8035c9c:	d10a      	bne.n	8035cb4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8035c9e:	45c1      	cmp	r9, r8
 8035ca0:	bf38      	it	cc
 8035ca2:	46c1      	movcc	r9, r8
 8035ca4:	f04f 0800 	mov.w	r8, #0
 8035ca8:	2c00      	cmp	r4, #0
 8035caa:	d1e5      	bne.n	8035c78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8035cac:	4648      	mov	r0, r9
 8035cae:	b01d      	add	sp, #116	@ 0x74
 8035cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035cb4:	9a02      	ldr	r2, [sp, #8]
 8035cb6:	2a00      	cmp	r2, #0
 8035cb8:	d0de      	beq.n	8035c78 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8035cba:	7b57      	ldrb	r7, [r2, #13]
 8035cbc:	6833      	ldr	r3, [r6, #0]
 8035cbe:	8894      	ldrh	r4, [r2, #4]
 8035cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8035cc2:	007f      	lsls	r7, r7, #1
 8035cc4:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8035cc8:	7a97      	ldrb	r7, [r2, #10]
 8035cca:	4629      	mov	r1, r5
 8035ccc:	4307      	orrs	r7, r0
 8035cce:	4630      	mov	r0, r6
 8035cd0:	4798      	blx	r3
 8035cd2:	4438      	add	r0, r7
 8035cd4:	4480      	add	r8, r0
 8035cd6:	fa1f f888 	uxth.w	r8, r8
 8035cda:	e7e5      	b.n	8035ca8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08035cdc <_ZNK8touchgfx4Font12getCharWidthEt>:
 8035cdc:	b508      	push	{r3, lr}
 8035cde:	6803      	ldr	r3, [r0, #0]
 8035ce0:	68db      	ldr	r3, [r3, #12]
 8035ce2:	4798      	blx	r3
 8035ce4:	b128      	cbz	r0, 8035cf2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8035ce6:	7b43      	ldrb	r3, [r0, #13]
 8035ce8:	7a80      	ldrb	r0, [r0, #10]
 8035cea:	005b      	lsls	r3, r3, #1
 8035cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8035cf0:	4318      	orrs	r0, r3
 8035cf2:	bd08      	pop	{r3, pc}

08035cf4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8035cf4:	b40e      	push	{r1, r2, r3}
 8035cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035cf8:	b09e      	sub	sp, #120	@ 0x78
 8035cfa:	ab23      	add	r3, sp, #140	@ 0x8c
 8035cfc:	4605      	mov	r5, r0
 8035cfe:	f853 4b04 	ldr.w	r4, [r3], #4
 8035d02:	9303      	str	r3, [sp, #12]
 8035d04:	a805      	add	r0, sp, #20
 8035d06:	f000 fde2 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
 8035d0a:	682b      	ldr	r3, [r5, #0]
 8035d0c:	4628      	mov	r0, r5
 8035d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8035d10:	4798      	blx	r3
 8035d12:	682b      	ldr	r3, [r5, #0]
 8035d14:	4606      	mov	r6, r0
 8035d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8035d18:	4628      	mov	r0, r5
 8035d1a:	4798      	blx	r3
 8035d1c:	4633      	mov	r3, r6
 8035d1e:	ae1e      	add	r6, sp, #120	@ 0x78
 8035d20:	4621      	mov	r1, r4
 8035d22:	9000      	str	r0, [sp, #0]
 8035d24:	9a03      	ldr	r2, [sp, #12]
 8035d26:	2400      	movs	r4, #0
 8035d28:	a805      	add	r0, sp, #20
 8035d2a:	f000 fe2b 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8035d2e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8035d32:	462a      	mov	r2, r5
 8035d34:	4633      	mov	r3, r6
 8035d36:	4621      	mov	r1, r4
 8035d38:	a805      	add	r0, sp, #20
 8035d3a:	f001 f925 	bl	8036f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8035d3e:	b1f0      	cbz	r0, 8035d7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 8035d40:	280a      	cmp	r0, #10
 8035d42:	d018      	beq.n	8035d76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8035d44:	9f04      	ldr	r7, [sp, #16]
 8035d46:	b1b7      	cbz	r7, 8035d76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8035d48:	7b78      	ldrb	r0, [r7, #13]
 8035d4a:	7a3b      	ldrb	r3, [r7, #8]
 8035d4c:	88ea      	ldrh	r2, [r5, #6]
 8035d4e:	00c1      	lsls	r1, r0, #3
 8035d50:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8035d54:	4319      	orrs	r1, r3
 8035d56:	0643      	lsls	r3, r0, #25
 8035d58:	bf44      	itt	mi
 8035d5a:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8035d5e:	b219      	sxthmi	r1, r3
 8035d60:	0100      	lsls	r0, r0, #4
 8035d62:	79fb      	ldrb	r3, [r7, #7]
 8035d64:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8035d68:	4303      	orrs	r3, r0
 8035d6a:	4413      	add	r3, r2
 8035d6c:	1a5b      	subs	r3, r3, r1
 8035d6e:	b21b      	sxth	r3, r3
 8035d70:	429c      	cmp	r4, r3
 8035d72:	bfb8      	it	lt
 8035d74:	461c      	movlt	r4, r3
 8035d76:	4633      	mov	r3, r6
 8035d78:	462a      	mov	r2, r5
 8035d7a:	2100      	movs	r1, #0
 8035d7c:	e7dc      	b.n	8035d38 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8035d7e:	b2a0      	uxth	r0, r4
 8035d80:	b01e      	add	sp, #120	@ 0x78
 8035d82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8035d86:	b003      	add	sp, #12
 8035d88:	4770      	bx	lr

08035d8a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8035d8a:	7a43      	ldrb	r3, [r0, #9]
 8035d8c:	8880      	ldrh	r0, [r0, #4]
 8035d8e:	4418      	add	r0, r3
 8035d90:	b280      	uxth	r0, r0
 8035d92:	4770      	bx	lr

08035d94 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8035d94:	6803      	ldr	r3, [r0, #0]
 8035d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8035d98:	4718      	bx	r3

08035d9a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8035d9a:	b40e      	push	{r1, r2, r3}
 8035d9c:	b570      	push	{r4, r5, r6, lr}
 8035d9e:	b09d      	sub	sp, #116	@ 0x74
 8035da0:	ab21      	add	r3, sp, #132	@ 0x84
 8035da2:	4604      	mov	r4, r0
 8035da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8035da8:	9302      	str	r3, [sp, #8]
 8035daa:	a803      	add	r0, sp, #12
 8035dac:	f000 fd8f 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
 8035db0:	6823      	ldr	r3, [r4, #0]
 8035db2:	4620      	mov	r0, r4
 8035db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8035db6:	4798      	blx	r3
 8035db8:	6823      	ldr	r3, [r4, #0]
 8035dba:	4606      	mov	r6, r0
 8035dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8035dbe:	4620      	mov	r0, r4
 8035dc0:	4798      	blx	r3
 8035dc2:	4633      	mov	r3, r6
 8035dc4:	9000      	str	r0, [sp, #0]
 8035dc6:	9a02      	ldr	r2, [sp, #8]
 8035dc8:	4629      	mov	r1, r5
 8035dca:	a803      	add	r0, sp, #12
 8035dcc:	f000 fdda 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8035dd0:	a803      	add	r0, sp, #12
 8035dd2:	f001 f9a7 	bl	8037124 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8035dd6:	2401      	movs	r4, #1
 8035dd8:	b2a3      	uxth	r3, r4
 8035dda:	b140      	cbz	r0, 8035dee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 8035ddc:	280a      	cmp	r0, #10
 8035dde:	bf08      	it	eq
 8035de0:	3301      	addeq	r3, #1
 8035de2:	a803      	add	r0, sp, #12
 8035de4:	bf08      	it	eq
 8035de6:	b21c      	sxtheq	r4, r3
 8035de8:	f001 f99c 	bl	8037124 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8035dec:	e7f4      	b.n	8035dd8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8035dee:	4618      	mov	r0, r3
 8035df0:	b01d      	add	sp, #116	@ 0x74
 8035df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8035df6:	b003      	add	sp, #12
 8035df8:	4770      	bx	lr

08035dfa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8035dfa:	b40e      	push	{r1, r2, r3}
 8035dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8035dfe:	b09e      	sub	sp, #120	@ 0x78
 8035e00:	ab23      	add	r3, sp, #140	@ 0x8c
 8035e02:	4604      	mov	r4, r0
 8035e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8035e08:	9303      	str	r3, [sp, #12]
 8035e0a:	a805      	add	r0, sp, #20
 8035e0c:	f000 fd5f 	bl	80368ce <_ZN8touchgfx12TextProviderC1Ev>
 8035e10:	6823      	ldr	r3, [r4, #0]
 8035e12:	4620      	mov	r0, r4
 8035e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8035e16:	4798      	blx	r3
 8035e18:	6823      	ldr	r3, [r4, #0]
 8035e1a:	4606      	mov	r6, r0
 8035e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8035e1e:	4620      	mov	r0, r4
 8035e20:	4798      	blx	r3
 8035e22:	4633      	mov	r3, r6
 8035e24:	4629      	mov	r1, r5
 8035e26:	9000      	str	r0, [sp, #0]
 8035e28:	9a03      	ldr	r2, [sp, #12]
 8035e2a:	a805      	add	r0, sp, #20
 8035e2c:	ad1e      	add	r5, sp, #120	@ 0x78
 8035e2e:	f000 fda9 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8035e32:	2100      	movs	r1, #0
 8035e34:	f845 1d68 	str.w	r1, [r5, #-104]!
 8035e38:	4622      	mov	r2, r4
 8035e3a:	462b      	mov	r3, r5
 8035e3c:	a805      	add	r0, sp, #20
 8035e3e:	f001 f8a3 	bl	8036f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8035e42:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8035e46:	b1d8      	cbz	r0, 8035e80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8035e48:	280a      	cmp	r0, #10
 8035e4a:	d012      	beq.n	8035e72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8035e4c:	9804      	ldr	r0, [sp, #16]
 8035e4e:	b180      	cbz	r0, 8035e72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8035e50:	7b47      	ldrb	r7, [r0, #13]
 8035e52:	88e2      	ldrh	r2, [r4, #6]
 8035e54:	00fb      	lsls	r3, r7, #3
 8035e56:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8035e5a:	7a03      	ldrb	r3, [r0, #8]
 8035e5c:	430b      	orrs	r3, r1
 8035e5e:	0679      	lsls	r1, r7, #25
 8035e60:	bf44      	itt	mi
 8035e62:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8035e66:	b21b      	sxthmi	r3, r3
 8035e68:	1ad3      	subs	r3, r2, r3
 8035e6a:	b21b      	sxth	r3, r3
 8035e6c:	429e      	cmp	r6, r3
 8035e6e:	bfa8      	it	ge
 8035e70:	461e      	movge	r6, r3
 8035e72:	462b      	mov	r3, r5
 8035e74:	4622      	mov	r2, r4
 8035e76:	2100      	movs	r1, #0
 8035e78:	a805      	add	r0, sp, #20
 8035e7a:	f001 f885 	bl	8036f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8035e7e:	e7e2      	b.n	8035e46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8035e80:	4630      	mov	r0, r6
 8035e82:	b01e      	add	sp, #120	@ 0x78
 8035e84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8035e88:	b003      	add	sp, #12
 8035e8a:	4770      	bx	lr

08035e8c <_ZNK8touchgfx8Drawable10invalidateEv>:
 8035e8c:	b513      	push	{r0, r1, r4, lr}
 8035e8e:	6803      	ldr	r3, [r0, #0]
 8035e90:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8035e94:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8035e98:	f8ad 1004 	strh.w	r1, [sp, #4]
 8035e9c:	2400      	movs	r4, #0
 8035e9e:	9400      	str	r4, [sp, #0]
 8035ea0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8035ea4:	691b      	ldr	r3, [r3, #16]
 8035ea6:	4669      	mov	r1, sp
 8035ea8:	4798      	blx	r3
 8035eaa:	b002      	add	sp, #8
 8035eac:	bd10      	pop	{r4, pc}

08035eae <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8035eae:	b538      	push	{r3, r4, r5, lr}
 8035eb0:	680b      	ldr	r3, [r1, #0]
 8035eb2:	460c      	mov	r4, r1
 8035eb4:	68db      	ldr	r3, [r3, #12]
 8035eb6:	4605      	mov	r5, r0
 8035eb8:	4798      	blx	r3
 8035eba:	6823      	ldr	r3, [r4, #0]
 8035ebc:	4620      	mov	r0, r4
 8035ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035ec0:	4629      	mov	r1, r5
 8035ec2:	4798      	blx	r3
 8035ec4:	4628      	mov	r0, r5
 8035ec6:	bd38      	pop	{r3, r4, r5, pc}

08035ec8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8035ec8:	b410      	push	{r4}
 8035eca:	880a      	ldrh	r2, [r1, #0]
 8035ecc:	8884      	ldrh	r4, [r0, #4]
 8035ece:	4422      	add	r2, r4
 8035ed0:	800a      	strh	r2, [r1, #0]
 8035ed2:	88c4      	ldrh	r4, [r0, #6]
 8035ed4:	884a      	ldrh	r2, [r1, #2]
 8035ed6:	4422      	add	r2, r4
 8035ed8:	804a      	strh	r2, [r1, #2]
 8035eda:	6940      	ldr	r0, [r0, #20]
 8035edc:	b120      	cbz	r0, 8035ee8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8035ede:	6803      	ldr	r3, [r0, #0]
 8035ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8035ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035ee6:	4718      	bx	r3
 8035ee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8035eec:	4770      	bx	lr

08035eee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8035eee:	b570      	push	{r4, r5, r6, lr}
 8035ef0:	8882      	ldrh	r2, [r0, #4]
 8035ef2:	880b      	ldrh	r3, [r1, #0]
 8035ef4:	4413      	add	r3, r2
 8035ef6:	800b      	strh	r3, [r1, #0]
 8035ef8:	88c2      	ldrh	r2, [r0, #6]
 8035efa:	884b      	ldrh	r3, [r1, #2]
 8035efc:	460c      	mov	r4, r1
 8035efe:	4413      	add	r3, r2
 8035f00:	804b      	strh	r3, [r1, #2]
 8035f02:	4605      	mov	r5, r0
 8035f04:	1d01      	adds	r1, r0, #4
 8035f06:	4620      	mov	r0, r4
 8035f08:	f7fa f8a8 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8035f0c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8035f10:	2b00      	cmp	r3, #0
 8035f12:	dd0b      	ble.n	8035f2c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8035f14:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8035f18:	2b00      	cmp	r3, #0
 8035f1a:	dd07      	ble.n	8035f2c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8035f1c:	6968      	ldr	r0, [r5, #20]
 8035f1e:	b128      	cbz	r0, 8035f2c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8035f20:	6803      	ldr	r3, [r0, #0]
 8035f22:	4621      	mov	r1, r4
 8035f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8035f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8035f2a:	4718      	bx	r3
 8035f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08035f30 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8035f30:	b570      	push	{r4, r5, r6, lr}
 8035f32:	8882      	ldrh	r2, [r0, #4]
 8035f34:	880b      	ldrh	r3, [r1, #0]
 8035f36:	4413      	add	r3, r2
 8035f38:	800b      	strh	r3, [r1, #0]
 8035f3a:	88c2      	ldrh	r2, [r0, #6]
 8035f3c:	884b      	ldrh	r3, [r1, #2]
 8035f3e:	460c      	mov	r4, r1
 8035f40:	4413      	add	r3, r2
 8035f42:	804b      	strh	r3, [r1, #2]
 8035f44:	4605      	mov	r5, r0
 8035f46:	1d01      	adds	r1, r0, #4
 8035f48:	4620      	mov	r0, r4
 8035f4a:	f7fa f887 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8035f4e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8035f52:	2b00      	cmp	r3, #0
 8035f54:	dd19      	ble.n	8035f8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8035f56:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8035f5a:	2b00      	cmp	r3, #0
 8035f5c:	dd15      	ble.n	8035f8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8035f5e:	6968      	ldr	r0, [r5, #20]
 8035f60:	b128      	cbz	r0, 8035f6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8035f62:	6803      	ldr	r3, [r0, #0]
 8035f64:	4621      	mov	r1, r4
 8035f66:	691b      	ldr	r3, [r3, #16]
 8035f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8035f6c:	4718      	bx	r3
 8035f6e:	4b07      	ldr	r3, [pc, #28]	@ (8035f8c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8035f70:	681b      	ldr	r3, [r3, #0]
 8035f72:	3304      	adds	r3, #4
 8035f74:	429d      	cmp	r5, r3
 8035f76:	d108      	bne.n	8035f8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8035f78:	f7fe fec8 	bl	8034d0c <_ZN8touchgfx11Application11getInstanceEv>
 8035f7c:	6803      	ldr	r3, [r0, #0]
 8035f7e:	6821      	ldr	r1, [r4, #0]
 8035f80:	6862      	ldr	r2, [r4, #4]
 8035f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8035f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8035f88:	4718      	bx	r3
 8035f8a:	bd70      	pop	{r4, r5, r6, pc}
 8035f8c:	2000b91c 	.word	0x2000b91c

08035f90 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8035f90:	b570      	push	{r4, r5, r6, lr}
 8035f92:	4604      	mov	r4, r0
 8035f94:	4616      	mov	r6, r2
 8035f96:	460d      	mov	r5, r1
 8035f98:	b901      	cbnz	r1, 8035f9c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8035f9a:	b192      	cbz	r2, 8035fc2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8035f9c:	6823      	ldr	r3, [r4, #0]
 8035f9e:	4620      	mov	r0, r4
 8035fa0:	699b      	ldr	r3, [r3, #24]
 8035fa2:	4798      	blx	r3
 8035fa4:	88e2      	ldrh	r2, [r4, #6]
 8035fa6:	88a1      	ldrh	r1, [r4, #4]
 8035fa8:	4432      	add	r2, r6
 8035faa:	4429      	add	r1, r5
 8035fac:	4620      	mov	r0, r4
 8035fae:	b212      	sxth	r2, r2
 8035fb0:	b209      	sxth	r1, r1
 8035fb2:	f7f3 f8a5 	bl	8029100 <_ZN8touchgfx8Drawable5setXYEss>
 8035fb6:	6823      	ldr	r3, [r4, #0]
 8035fb8:	4620      	mov	r0, r4
 8035fba:	699b      	ldr	r3, [r3, #24]
 8035fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8035fc0:	4718      	bx	r3
 8035fc2:	bd70      	pop	{r4, r5, r6, pc}

08035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8035fc4:	b510      	push	{r4, lr}
 8035fc6:	4604      	mov	r4, r0
 8035fc8:	4608      	mov	r0, r1
 8035fca:	2300      	movs	r3, #0
 8035fcc:	8023      	strh	r3, [r4, #0]
 8035fce:	8063      	strh	r3, [r4, #2]
 8035fd0:	6803      	ldr	r3, [r0, #0]
 8035fd2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8035fd6:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8035fda:	80a1      	strh	r1, [r4, #4]
 8035fdc:	80e2      	strh	r2, [r4, #6]
 8035fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8035fe0:	4621      	mov	r1, r4
 8035fe2:	4798      	blx	r3
 8035fe4:	4620      	mov	r0, r4
 8035fe6:	bd10      	pop	{r4, pc}

08035fe8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8035fe8:	b530      	push	{r4, r5, lr}
 8035fea:	8083      	strh	r3, [r0, #4]
 8035fec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8035ff0:	80c3      	strh	r3, [r0, #6]
 8035ff2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8035ff6:	7203      	strb	r3, [r0, #8]
 8035ff8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8035ffc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8036000:	7243      	strb	r3, [r0, #9]
 8036002:	7a83      	ldrb	r3, [r0, #10]
 8036004:	6141      	str	r1, [r0, #20]
 8036006:	f365 0306 	bfi	r3, r5, #0, #7
 803600a:	f89d 501c 	ldrb.w	r5, [sp, #28]
 803600e:	8302      	strh	r2, [r0, #24]
 8036010:	f365 13c7 	bfi	r3, r5, #7, #1
 8036014:	7283      	strb	r3, [r0, #10]
 8036016:	f89d 3020 	ldrb.w	r3, [sp, #32]
 803601a:	72c3      	strb	r3, [r0, #11]
 803601c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8036020:	7303      	strb	r3, [r0, #12]
 8036022:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8036026:	81c3      	strh	r3, [r0, #14]
 8036028:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 803602c:	8203      	strh	r3, [r0, #16]
 803602e:	4b01      	ldr	r3, [pc, #4]	@ (8036034 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8036030:	6003      	str	r3, [r0, #0]
 8036032:	bd30      	pop	{r4, r5, pc}
 8036034:	08043994 	.word	0x08043994

08036038 <_ZNK8touchgfx9ConstFont4findEt>:
 8036038:	b5f0      	push	{r4, r5, r6, r7, lr}
 803603a:	6944      	ldr	r4, [r0, #20]
 803603c:	b3bc      	cbz	r4, 80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 803603e:	88a3      	ldrh	r3, [r4, #4]
 8036040:	8b02      	ldrh	r2, [r0, #24]
 8036042:	1acb      	subs	r3, r1, r3
 8036044:	f102 32ff 	add.w	r2, r2, #4294967295
 8036048:	d431      	bmi.n	80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 803604a:	4293      	cmp	r3, r2
 803604c:	dd0c      	ble.n	8036068 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 803604e:	230e      	movs	r3, #14
 8036050:	fb03 4302 	mla	r3, r3, r2, r4
 8036054:	889b      	ldrh	r3, [r3, #4]
 8036056:	1a5b      	subs	r3, r3, r1
 8036058:	1ad3      	subs	r3, r2, r3
 803605a:	429a      	cmp	r2, r3
 803605c:	db27      	blt.n	80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 803605e:	2b00      	cmp	r3, #0
 8036060:	bfbc      	itt	lt
 8036062:	2302      	movlt	r3, #2
 8036064:	fb92 f3f3 	sdivlt	r3, r2, r3
 8036068:	2500      	movs	r5, #0
 803606a:	260e      	movs	r6, #14
 803606c:	4295      	cmp	r5, r2
 803606e:	dc1e      	bgt.n	80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8036070:	fb06 4003 	mla	r0, r6, r3, r4
 8036074:	8887      	ldrh	r7, [r0, #4]
 8036076:	42b9      	cmp	r1, r7
 8036078:	d01a      	beq.n	80360b0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 803607a:	d20d      	bcs.n	8036098 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 803607c:	1e5a      	subs	r2, r3, #1
 803607e:	4295      	cmp	r5, r2
 8036080:	dc15      	bgt.n	80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8036082:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8036086:	1a5b      	subs	r3, r3, r1
 8036088:	1ad3      	subs	r3, r2, r3
 803608a:	429a      	cmp	r2, r3
 803608c:	db0f      	blt.n	80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 803608e:	429d      	cmp	r5, r3
 8036090:	ddec      	ble.n	803606c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8036092:	1953      	adds	r3, r2, r5
 8036094:	105b      	asrs	r3, r3, #1
 8036096:	e7e9      	b.n	803606c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8036098:	1c5d      	adds	r5, r3, #1
 803609a:	42aa      	cmp	r2, r5
 803609c:	db07      	blt.n	80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 803609e:	8a43      	ldrh	r3, [r0, #18]
 80360a0:	1acb      	subs	r3, r1, r3
 80360a2:	442b      	add	r3, r5
 80360a4:	429d      	cmp	r5, r3
 80360a6:	dc02      	bgt.n	80360ae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80360a8:	429a      	cmp	r2, r3
 80360aa:	dadf      	bge.n	803606c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80360ac:	e7f1      	b.n	8036092 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80360ae:	2000      	movs	r0, #0
 80360b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080360b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80360b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80360b4:	4604      	mov	r4, r0
 80360b6:	4617      	mov	r7, r2
 80360b8:	461e      	mov	r6, r3
 80360ba:	b911      	cbnz	r1, 80360c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80360bc:	2500      	movs	r5, #0
 80360be:	4628      	mov	r0, r5
 80360c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80360c2:	290a      	cmp	r1, #10
 80360c4:	d0fa      	beq.n	80360bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80360c6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 80360ca:	4291      	cmp	r1, r2
 80360cc:	d0f6      	beq.n	80360bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80360ce:	f242 020b 	movw	r2, #8203	@ 0x200b
 80360d2:	4291      	cmp	r1, r2
 80360d4:	d0f2      	beq.n	80360bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80360d6:	f7ff ffaf 	bl	8036038 <_ZNK8touchgfx9ConstFont4findEt>
 80360da:	4605      	mov	r5, r0
 80360dc:	b950      	cbnz	r0, 80360f4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80360de:	6823      	ldr	r3, [r4, #0]
 80360e0:	4620      	mov	r0, r4
 80360e2:	691b      	ldr	r3, [r3, #16]
 80360e4:	4798      	blx	r3
 80360e6:	4601      	mov	r1, r0
 80360e8:	4620      	mov	r0, r4
 80360ea:	f7ff ffa5 	bl	8036038 <_ZNK8touchgfx9ConstFont4findEt>
 80360ee:	4605      	mov	r5, r0
 80360f0:	2800      	cmp	r0, #0
 80360f2:	d0e3      	beq.n	80360bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80360f4:	6823      	ldr	r3, [r4, #0]
 80360f6:	4629      	mov	r1, r5
 80360f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80360fa:	4620      	mov	r0, r4
 80360fc:	4798      	blx	r3
 80360fe:	6038      	str	r0, [r7, #0]
 8036100:	6823      	ldr	r3, [r4, #0]
 8036102:	4620      	mov	r0, r4
 8036104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8036106:	4798      	blx	r3
 8036108:	7030      	strb	r0, [r6, #0]
 803610a:	e7d8      	b.n	80360be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0803610c <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 803610c:	b538      	push	{r3, r4, r5, lr}
 803610e:	4605      	mov	r5, r0
 8036110:	f002 f988 	bl	8038424 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8036114:	4604      	mov	r4, r0
 8036116:	4628      	mov	r0, r5
 8036118:	f002 f8c8 	bl	80382ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 803611c:	2800      	cmp	r0, #0
 803611e:	bf14      	ite	ne
 8036120:	2002      	movne	r0, #2
 8036122:	2000      	moveq	r0, #0
 8036124:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8036128:	b280      	uxth	r0, r0
 803612a:	bd38      	pop	{r3, r4, r5, pc}

0803612c <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 803612c:	b538      	push	{r3, r4, r5, lr}
 803612e:	4605      	mov	r5, r0
 8036130:	f002 f978 	bl	8038424 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8036134:	4604      	mov	r4, r0
 8036136:	4628      	mov	r0, r5
 8036138:	f002 f8b8 	bl	80382ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 803613c:	2800      	cmp	r0, #0
 803613e:	bf14      	ite	ne
 8036140:	2002      	movne	r0, #2
 8036142:	2000      	moveq	r0, #0
 8036144:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8036148:	f040 0001 	orr.w	r0, r0, #1
 803614c:	b280      	uxth	r0, r0
 803614e:	bd38      	pop	{r3, r4, r5, pc}

08036150 <_ZN8touchgfx4clzuEm>:
 8036150:	4603      	mov	r3, r0
 8036152:	b1c8      	cbz	r0, 8036188 <_ZN8touchgfx4clzuEm+0x38>
 8036154:	0c02      	lsrs	r2, r0, #16
 8036156:	0412      	lsls	r2, r2, #16
 8036158:	b9a2      	cbnz	r2, 8036184 <_ZN8touchgfx4clzuEm+0x34>
 803615a:	0403      	lsls	r3, r0, #16
 803615c:	2010      	movs	r0, #16
 803615e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8036162:	bf04      	itt	eq
 8036164:	021b      	lsleq	r3, r3, #8
 8036166:	3008      	addeq	r0, #8
 8036168:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 803616c:	bf04      	itt	eq
 803616e:	011b      	lsleq	r3, r3, #4
 8036170:	3004      	addeq	r0, #4
 8036172:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8036176:	bf04      	itt	eq
 8036178:	009b      	lsleq	r3, r3, #2
 803617a:	3002      	addeq	r0, #2
 803617c:	2b00      	cmp	r3, #0
 803617e:	db04      	blt.n	803618a <_ZN8touchgfx4clzuEm+0x3a>
 8036180:	3001      	adds	r0, #1
 8036182:	4770      	bx	lr
 8036184:	2000      	movs	r0, #0
 8036186:	e7ea      	b.n	803615e <_ZN8touchgfx4clzuEm+0xe>
 8036188:	2020      	movs	r0, #32
 803618a:	4770      	bx	lr

0803618c <_ZN8touchgfx7muldivuEmmmRm>:
 803618c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8036190:	460f      	mov	r7, r1
 8036192:	4615      	mov	r5, r2
 8036194:	461e      	mov	r6, r3
 8036196:	4601      	mov	r1, r0
 8036198:	b100      	cbz	r0, 803619c <_ZN8touchgfx7muldivuEmmmRm+0x10>
 803619a:	b927      	cbnz	r7, 80361a6 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 803619c:	2000      	movs	r0, #0
 803619e:	6030      	str	r0, [r6, #0]
 80361a0:	b002      	add	sp, #8
 80361a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80361a6:	f7ff ffd3 	bl	8036150 <_ZN8touchgfx4clzuEm>
 80361aa:	b980      	cbnz	r0, 80361ce <_ZN8touchgfx7muldivuEmmmRm+0x42>
 80361ac:	4638      	mov	r0, r7
 80361ae:	f7ff ffcf 	bl	8036150 <_ZN8touchgfx4clzuEm>
 80361b2:	2800      	cmp	r0, #0
 80361b4:	dd05      	ble.n	80361c2 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 80361b6:	4633      	mov	r3, r6
 80361b8:	462a      	mov	r2, r5
 80361ba:	4638      	mov	r0, r7
 80361bc:	f7ff ffe6 	bl	803618c <_ZN8touchgfx7muldivuEmmmRm>
 80361c0:	e7ee      	b.n	80361a0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80361c2:	f04f 33ff 	mov.w	r3, #4294967295
 80361c6:	6033      	str	r3, [r6, #0]
 80361c8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80361cc:	e7e8      	b.n	80361a0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80361ce:	fa37 f800 	lsrs.w	r8, r7, r0
 80361d2:	fb07 f301 	mul.w	r3, r7, r1
 80361d6:	d105      	bne.n	80361e4 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 80361d8:	fbb3 f0f5 	udiv	r0, r3, r5
 80361dc:	fb05 3510 	mls	r5, r5, r0, r3
 80361e0:	6035      	str	r5, [r6, #0]
 80361e2:	e7dd      	b.n	80361a0 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 80361e4:	2301      	movs	r3, #1
 80361e6:	fa01 fa00 	lsl.w	sl, r1, r0
 80361ea:	fa03 f000 	lsl.w	r0, r3, r0
 80361ee:	3801      	subs	r0, #1
 80361f0:	462a      	mov	r2, r5
 80361f2:	4633      	mov	r3, r6
 80361f4:	4038      	ands	r0, r7
 80361f6:	f7ff ffc9 	bl	803618c <_ZN8touchgfx7muldivuEmmmRm>
 80361fa:	fbba f9f5 	udiv	r9, sl, r5
 80361fe:	462a      	mov	r2, r5
 8036200:	4607      	mov	r7, r0
 8036202:	ab01      	add	r3, sp, #4
 8036204:	fb05 a119 	mls	r1, r5, r9, sl
 8036208:	4640      	mov	r0, r8
 803620a:	f7ff ffbf 	bl	803618c <_ZN8touchgfx7muldivuEmmmRm>
 803620e:	9b01      	ldr	r3, [sp, #4]
 8036210:	6832      	ldr	r2, [r6, #0]
 8036212:	fb08 f409 	mul.w	r4, r8, r9
 8036216:	441a      	add	r2, r3
 8036218:	fbb2 f3f5 	udiv	r3, r2, r5
 803621c:	441c      	add	r4, r3
 803621e:	443c      	add	r4, r7
 8036220:	4420      	add	r0, r4
 8036222:	fb05 2513 	mls	r5, r5, r3, r2
 8036226:	e7db      	b.n	80361e0 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08036228 <_ZN8touchgfx6muldivElllRl>:
 8036228:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803622a:	2800      	cmp	r0, #0
 803622c:	bfba      	itte	lt
 803622e:	4240      	neglt	r0, r0
 8036230:	f04f 34ff 	movlt.w	r4, #4294967295
 8036234:	2401      	movge	r4, #1
 8036236:	2900      	cmp	r1, #0
 8036238:	bfbc      	itt	lt
 803623a:	4249      	neglt	r1, r1
 803623c:	4264      	neglt	r4, r4
 803623e:	2a00      	cmp	r2, #0
 8036240:	bfb6      	itet	lt
 8036242:	4265      	neglt	r5, r4
 8036244:	4625      	movge	r5, r4
 8036246:	4252      	neglt	r2, r2
 8036248:	4288      	cmp	r0, r1
 803624a:	461e      	mov	r6, r3
 803624c:	bfc2      	ittt	gt
 803624e:	4603      	movgt	r3, r0
 8036250:	4608      	movgt	r0, r1
 8036252:	4619      	movgt	r1, r3
 8036254:	ab01      	add	r3, sp, #4
 8036256:	f7ff ff99 	bl	803618c <_ZN8touchgfx7muldivuEmmmRm>
 803625a:	9b01      	ldr	r3, [sp, #4]
 803625c:	4368      	muls	r0, r5
 803625e:	435c      	muls	r4, r3
 8036260:	6034      	str	r4, [r6, #0]
 8036262:	b002      	add	sp, #8
 8036264:	bd70      	pop	{r4, r5, r6, pc}

08036266 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8036266:	2002      	movs	r0, #2
 8036268:	4770      	bx	lr

0803626a <_ZN8touchgfx6ScreenD1Ev>:
 803626a:	4770      	bx	lr

0803626c <_ZN8touchgfx12GestureEventD1Ev>:
 803626c:	4770      	bx	lr

0803626e <_ZN8touchgfx12GestureEventD0Ev>:
 803626e:	b510      	push	{r4, lr}
 8036270:	210c      	movs	r1, #12
 8036272:	4604      	mov	r4, r0
 8036274:	f006 f939 	bl	803c4ea <_ZdlPvj>
 8036278:	4620      	mov	r0, r4
 803627a:	bd10      	pop	{r4, pc}

0803627c <_ZN8touchgfx6ScreenD0Ev>:
 803627c:	b510      	push	{r4, lr}
 803627e:	213c      	movs	r1, #60	@ 0x3c
 8036280:	4604      	mov	r4, r0
 8036282:	f006 f932 	bl	803c4ea <_ZdlPvj>
 8036286:	4620      	mov	r0, r4
 8036288:	bd10      	pop	{r4, pc}
	...

0803628c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 803628c:	b530      	push	{r4, r5, lr}
 803628e:	460d      	mov	r5, r1
 8036290:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8036292:	b087      	sub	sp, #28
 8036294:	4604      	mov	r4, r0
 8036296:	b301      	cbz	r1, 80362da <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8036298:	a801      	add	r0, sp, #4
 803629a:	f7ff fe93 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 803629e:	892a      	ldrh	r2, [r5, #8]
 80362a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80362a4:	7928      	ldrb	r0, [r5, #4]
 80362a6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80362aa:	f88d 0010 	strb.w	r0, [sp, #16]
 80362ae:	1ad2      	subs	r2, r2, r3
 80362b0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80362b2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80362b4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80362b8:	441a      	add	r2, r3
 80362ba:	896b      	ldrh	r3, [r5, #10]
 80362bc:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80362c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80362c4:	1b5b      	subs	r3, r3, r5
 80362c6:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 80362c8:	442b      	add	r3, r5
 80362ca:	4d05      	ldr	r5, [pc, #20]	@ (80362e0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80362cc:	9503      	str	r5, [sp, #12]
 80362ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80362d2:	6803      	ldr	r3, [r0, #0]
 80362d4:	a903      	add	r1, sp, #12
 80362d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80362d8:	4798      	blx	r3
 80362da:	b007      	add	sp, #28
 80362dc:	bd30      	pop	{r4, r5, pc}
 80362de:	bf00      	nop
 80362e0:	080439f4 	.word	0x080439f4

080362e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80362e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80362e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80362ea:	b08a      	sub	sp, #40	@ 0x28
 80362ec:	4604      	mov	r4, r0
 80362ee:	460d      	mov	r5, r1
 80362f0:	b113      	cbz	r3, 80362f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80362f2:	790b      	ldrb	r3, [r1, #4]
 80362f4:	2b00      	cmp	r3, #0
 80362f6:	d044      	beq.n	8036382 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80362f8:	f104 0804 	add.w	r8, r4, #4
 80362fc:	4641      	mov	r1, r8
 80362fe:	a803      	add	r0, sp, #12
 8036300:	f7ff fe60 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8036304:	792b      	ldrb	r3, [r5, #4]
 8036306:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 803630a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 803630e:	b983      	cbnz	r3, 8036332 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8036310:	892a      	ldrh	r2, [r5, #8]
 8036312:	88e9      	ldrh	r1, [r5, #6]
 8036314:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8036318:	1b92      	subs	r2, r2, r6
 803631a:	1bc9      	subs	r1, r1, r7
 803631c:	9301      	str	r3, [sp, #4]
 803631e:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8036322:	9300      	str	r3, [sp, #0]
 8036324:	b212      	sxth	r2, r2
 8036326:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 803632a:	b209      	sxth	r1, r1
 803632c:	4640      	mov	r0, r8
 803632e:	f7f9 fdb9 	bl	802fea4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8036332:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8036334:	b329      	cbz	r1, 8036382 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8036336:	a805      	add	r0, sp, #20
 8036338:	f7ff fe44 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 803633c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8036340:	792b      	ldrb	r3, [r5, #4]
 8036342:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8036344:	f88d 3020 	strb.w	r3, [sp, #32]
 8036348:	1abf      	subs	r7, r7, r2
 803634a:	88ea      	ldrh	r2, [r5, #6]
 803634c:	4417      	add	r7, r2
 803634e:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8036350:	4417      	add	r7, r2
 8036352:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8036356:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 803635a:	1ab6      	subs	r6, r6, r2
 803635c:	892a      	ldrh	r2, [r5, #8]
 803635e:	4416      	add	r6, r2
 8036360:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8036362:	4416      	add	r6, r2
 8036364:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8036368:	4a07      	ldr	r2, [pc, #28]	@ (8036388 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 803636a:	9207      	str	r2, [sp, #28]
 803636c:	2600      	movs	r6, #0
 803636e:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8036372:	6803      	ldr	r3, [r0, #0]
 8036374:	a907      	add	r1, sp, #28
 8036376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8036378:	4798      	blx	r3
 803637a:	792b      	ldrb	r3, [r5, #4]
 803637c:	b10b      	cbz	r3, 8036382 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 803637e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8036382:	b00a      	add	sp, #40	@ 0x28
 8036384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8036388:	08041d58 	.word	0x08041d58

0803638c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 803638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036390:	460c      	mov	r4, r1
 8036392:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8036394:	b088      	sub	sp, #32
 8036396:	4605      	mov	r5, r0
 8036398:	2900      	cmp	r1, #0
 803639a:	d06d      	beq.n	8036478 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 803639c:	4668      	mov	r0, sp
 803639e:	f7ff fe11 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80363a2:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80363a4:	88e3      	ldrh	r3, [r4, #6]
 80363a6:	f9bd 8000 	ldrsh.w	r8, [sp]
 80363aa:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80363ae:	440b      	add	r3, r1
 80363b0:	b21b      	sxth	r3, r3
 80363b2:	4543      	cmp	r3, r8
 80363b4:	db31      	blt.n	803641a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80363b6:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80363ba:	44c4      	add	ip, r8
 80363bc:	fa0f fc8c 	sxth.w	ip, ip
 80363c0:	4563      	cmp	r3, ip
 80363c2:	da2a      	bge.n	803641a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80363c4:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80363c6:	8926      	ldrh	r6, [r4, #8]
 80363c8:	4416      	add	r6, r2
 80363ca:	b236      	sxth	r6, r6
 80363cc:	42be      	cmp	r6, r7
 80363ce:	db24      	blt.n	803641a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80363d0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80363d4:	4438      	add	r0, r7
 80363d6:	b200      	sxth	r0, r0
 80363d8:	4286      	cmp	r6, r0
 80363da:	da1e      	bge.n	803641a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80363dc:	8963      	ldrh	r3, [r4, #10]
 80363de:	4419      	add	r1, r3
 80363e0:	b209      	sxth	r1, r1
 80363e2:	4541      	cmp	r1, r8
 80363e4:	db08      	blt.n	80363f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80363e6:	4561      	cmp	r1, ip
 80363e8:	da06      	bge.n	80363f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80363ea:	89a3      	ldrh	r3, [r4, #12]
 80363ec:	441a      	add	r2, r3
 80363ee:	b212      	sxth	r2, r2
 80363f0:	42ba      	cmp	r2, r7
 80363f2:	db01      	blt.n	80363f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80363f4:	4282      	cmp	r2, r0
 80363f6:	db10      	blt.n	803641a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80363f8:	4b21      	ldr	r3, [pc, #132]	@ (8036480 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80363fa:	9304      	str	r3, [sp, #16]
 80363fc:	2302      	movs	r3, #2
 80363fe:	f88d 3014 	strb.w	r3, [sp, #20]
 8036402:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8036404:	2300      	movs	r3, #0
 8036406:	f8ad 3016 	strh.w	r3, [sp, #22]
 803640a:	f8ad 3018 	strh.w	r3, [sp, #24]
 803640e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8036412:	6803      	ldr	r3, [r0, #0]
 8036414:	a904      	add	r1, sp, #16
 8036416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8036418:	4798      	blx	r3
 803641a:	1d29      	adds	r1, r5, #4
 803641c:	a802      	add	r0, sp, #8
 803641e:	f7ff fdd1 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8036422:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8036426:	88e0      	ldrh	r0, [r4, #6]
 8036428:	7921      	ldrb	r1, [r4, #4]
 803642a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 803642e:	8922      	ldrh	r2, [r4, #8]
 8036430:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8036432:	f88d 1014 	strb.w	r1, [sp, #20]
 8036436:	eba3 0808 	sub.w	r8, r3, r8
 803643a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 803643e:	1bdf      	subs	r7, r3, r7
 8036440:	b2bb      	uxth	r3, r7
 8036442:	fa1f f888 	uxth.w	r8, r8
 8036446:	8967      	ldrh	r7, [r4, #10]
 8036448:	89a4      	ldrh	r4, [r4, #12]
 803644a:	4440      	add	r0, r8
 803644c:	4460      	add	r0, ip
 803644e:	441a      	add	r2, r3
 8036450:	44b8      	add	r8, r7
 8036452:	4423      	add	r3, r4
 8036454:	f8ad 0016 	strh.w	r0, [sp, #22]
 8036458:	4433      	add	r3, r6
 803645a:	4432      	add	r2, r6
 803645c:	44e0      	add	r8, ip
 803645e:	4c09      	ldr	r4, [pc, #36]	@ (8036484 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8036460:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8036462:	9404      	str	r4, [sp, #16]
 8036464:	f8ad 2018 	strh.w	r2, [sp, #24]
 8036468:	f8ad 801a 	strh.w	r8, [sp, #26]
 803646c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8036470:	6803      	ldr	r3, [r0, #0]
 8036472:	a904      	add	r1, sp, #16
 8036474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8036476:	4798      	blx	r3
 8036478:	b008      	add	sp, #32
 803647a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803647e:	bf00      	nop
 8036480:	08041d58 	.word	0x08041d58
 8036484:	08043268 	.word	0x08043268

08036488 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8036488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803648a:	4604      	mov	r4, r0
 803648c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8036490:	3201      	adds	r2, #1
 8036492:	d112      	bne.n	80364ba <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8036494:	6803      	ldr	r3, [r0, #0]
 8036496:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 803649a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 803649e:	f8ad 1004 	strh.w	r1, [sp, #4]
 80364a2:	2500      	movs	r5, #0
 80364a4:	9500      	str	r5, [sp, #0]
 80364a6:	466d      	mov	r5, sp
 80364a8:	4629      	mov	r1, r5
 80364aa:	f8ad 2006 	strh.w	r2, [sp, #6]
 80364ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80364b0:	4798      	blx	r3
 80364b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80364b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80364ba:	4620      	mov	r0, r4
 80364bc:	b003      	add	sp, #12
 80364be:	bd30      	pop	{r4, r5, pc}

080364c0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80364c0:	b513      	push	{r0, r1, r4, lr}
 80364c2:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80364c6:	3301      	adds	r3, #1
 80364c8:	4604      	mov	r4, r0
 80364ca:	d109      	bne.n	80364e0 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80364cc:	4601      	mov	r1, r0
 80364ce:	4668      	mov	r0, sp
 80364d0:	f7ff fd78 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80364d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80364d8:	8423      	strh	r3, [r4, #32]
 80364da:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80364de:	8463      	strh	r3, [r4, #34]	@ 0x22
 80364e0:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80364e4:	b002      	add	sp, #8
 80364e6:	bd10      	pop	{r4, pc}

080364e8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80364e8:	b513      	push	{r0, r1, r4, lr}
 80364ea:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80364ee:	3301      	adds	r3, #1
 80364f0:	4604      	mov	r4, r0
 80364f2:	d109      	bne.n	8036508 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80364f4:	4601      	mov	r1, r0
 80364f6:	4668      	mov	r0, sp
 80364f8:	f7ff fd64 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80364fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8036500:	8423      	strh	r3, [r4, #32]
 8036502:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8036506:	8463      	strh	r3, [r4, #34]	@ 0x22
 8036508:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 803650c:	b002      	add	sp, #8
 803650e:	bd10      	pop	{r4, pc}

08036510 <_ZN8touchgfx6ScreenC1Ev>:
 8036510:	b570      	push	{r4, r5, r6, lr}
 8036512:	4605      	mov	r5, r0
 8036514:	4b16      	ldr	r3, [pc, #88]	@ (8036570 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8036516:	f845 3b04 	str.w	r3, [r5], #4
 803651a:	2300      	movs	r3, #0
 803651c:	8103      	strh	r3, [r0, #8]
 803651e:	8143      	strh	r3, [r0, #10]
 8036520:	8183      	strh	r3, [r0, #12]
 8036522:	81c3      	strh	r3, [r0, #14]
 8036524:	8203      	strh	r3, [r0, #16]
 8036526:	8243      	strh	r3, [r0, #18]
 8036528:	8283      	strh	r3, [r0, #20]
 803652a:	82c3      	strh	r3, [r0, #22]
 803652c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8036530:	6203      	str	r3, [r0, #32]
 8036532:	8483      	strh	r3, [r0, #36]	@ 0x24
 8036534:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8036536:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 803653a:	4a0e      	ldr	r2, [pc, #56]	@ (8036574 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 803653c:	6343      	str	r3, [r0, #52]	@ 0x34
 803653e:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8036542:	4b0d      	ldr	r3, [pc, #52]	@ (8036578 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8036544:	6042      	str	r2, [r0, #4]
 8036546:	f9b3 6000 	ldrsh.w	r6, [r3]
 803654a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 803654c:	4a0b      	ldr	r2, [pc, #44]	@ (803657c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 803654e:	4604      	mov	r4, r0
 8036550:	2101      	movs	r1, #1
 8036552:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8036556:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 803655a:	f9b2 1000 	ldrsh.w	r1, [r2]
 803655e:	4628      	mov	r0, r5
 8036560:	4798      	blx	r3
 8036562:	6863      	ldr	r3, [r4, #4]
 8036564:	4628      	mov	r0, r5
 8036566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8036568:	4631      	mov	r1, r6
 803656a:	4798      	blx	r3
 803656c:	4620      	mov	r0, r4
 803656e:	bd70      	pop	{r4, r5, r6, pc}
 8036570:	08043a08 	.word	0x08043a08
 8036574:	080431d8 	.word	0x080431d8
 8036578:	2000b8d6 	.word	0x2000b8d6
 803657c:	2000b8d4 	.word	0x2000b8d4

08036580 <_ZN8touchgfx6Screen4drawEv>:
 8036580:	b507      	push	{r0, r1, r2, lr}
 8036582:	4b09      	ldr	r3, [pc, #36]	@ (80365a8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8036584:	f9b3 2000 	ldrsh.w	r2, [r3]
 8036588:	4b08      	ldr	r3, [pc, #32]	@ (80365ac <_ZN8touchgfx6Screen4drawEv+0x2c>)
 803658a:	f8ad 2004 	strh.w	r2, [sp, #4]
 803658e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8036592:	f8ad 3006 	strh.w	r3, [sp, #6]
 8036596:	6803      	ldr	r3, [r0, #0]
 8036598:	2100      	movs	r1, #0
 803659a:	9100      	str	r1, [sp, #0]
 803659c:	689b      	ldr	r3, [r3, #8]
 803659e:	4669      	mov	r1, sp
 80365a0:	4798      	blx	r3
 80365a2:	b003      	add	sp, #12
 80365a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80365a8:	2000b8d4 	.word	0x2000b8d4
 80365ac:	2000b8d6 	.word	0x2000b8d6

080365b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80365b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80365b4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80365b8:	2b00      	cmp	r3, #0
 80365ba:	b089      	sub	sp, #36	@ 0x24
 80365bc:	4680      	mov	r8, r0
 80365be:	460c      	mov	r4, r1
 80365c0:	4615      	mov	r5, r2
 80365c2:	dd0e      	ble.n	80365e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80365c4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80365c8:	2b00      	cmp	r3, #0
 80365ca:	dd0a      	ble.n	80365e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80365cc:	4628      	mov	r0, r5
 80365ce:	f7ff ff5b 	bl	8036488 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80365d2:	4621      	mov	r1, r4
 80365d4:	f7fa fc82 	bl	8030edc <_ZNK8touchgfx4Rect9intersectERKS0_>
 80365d8:	69eb      	ldr	r3, [r5, #28]
 80365da:	b928      	cbnz	r0, 80365e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80365dc:	461d      	mov	r5, r3
 80365de:	2b00      	cmp	r3, #0
 80365e0:	d1f4      	bne.n	80365cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80365e2:	b009      	add	sp, #36	@ 0x24
 80365e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80365e8:	ae04      	add	r6, sp, #16
 80365ea:	2b00      	cmp	r3, #0
 80365ec:	f000 80b5 	beq.w	803675a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80365f0:	682b      	ldr	r3, [r5, #0]
 80365f2:	4629      	mov	r1, r5
 80365f4:	68db      	ldr	r3, [r3, #12]
 80365f6:	a802      	add	r0, sp, #8
 80365f8:	4798      	blx	r3
 80365fa:	4628      	mov	r0, r5
 80365fc:	f7ff ff60 	bl	80364c0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8036600:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8036604:	4407      	add	r7, r0
 8036606:	4628      	mov	r0, r5
 8036608:	f7ff ff6e 	bl	80364e8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 803660c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8036610:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8036614:	f8ad 2014 	strh.w	r2, [sp, #20]
 8036618:	4418      	add	r0, r3
 803661a:	4621      	mov	r1, r4
 803661c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8036620:	f8ad 0012 	strh.w	r0, [sp, #18]
 8036624:	b23f      	sxth	r7, r7
 8036626:	4630      	mov	r0, r6
 8036628:	f8ad 3016 	strh.w	r3, [sp, #22]
 803662c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8036630:	f7f9 fd14 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8036634:	4628      	mov	r0, r5
 8036636:	f7ff ff27 	bl	8036488 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 803663a:	4602      	mov	r2, r0
 803663c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8036640:	ab06      	add	r3, sp, #24
 8036642:	e883 0003 	stmia.w	r3, {r0, r1}
 8036646:	4611      	mov	r1, r2
 8036648:	4618      	mov	r0, r3
 803664a:	f7f9 fd07 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 803664e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8036652:	f9b4 1000 	ldrsh.w	r1, [r4]
 8036656:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 803665a:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 803665e:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8036662:	4299      	cmp	r1, r3
 8036664:	d10b      	bne.n	803667e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8036666:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 803666a:	4552      	cmp	r2, sl
 803666c:	d107      	bne.n	803667e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 803666e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8036672:	455a      	cmp	r2, fp
 8036674:	d103      	bne.n	803667e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8036676:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 803667a:	454a      	cmp	r2, r9
 803667c:	d06d      	beq.n	803675a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 803667e:	f1bb 0f00 	cmp.w	fp, #0
 8036682:	dd65      	ble.n	8036750 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8036684:	f1b9 0f00 	cmp.w	r9, #0
 8036688:	dd62      	ble.n	8036750 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 803668a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 803668e:	fa1f f08a 	uxth.w	r0, sl
 8036692:	4552      	cmp	r2, sl
 8036694:	9000      	str	r0, [sp, #0]
 8036696:	da12      	bge.n	80366be <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8036698:	9301      	str	r3, [sp, #4]
 803669a:	9b00      	ldr	r3, [sp, #0]
 803669c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80366a0:	f8ad 2012 	strh.w	r2, [sp, #18]
 80366a4:	1a9a      	subs	r2, r3, r2
 80366a6:	f8ad 1010 	strh.w	r1, [sp, #16]
 80366aa:	f8ad 0014 	strh.w	r0, [sp, #20]
 80366ae:	f8ad 2016 	strh.w	r2, [sp, #22]
 80366b2:	69ea      	ldr	r2, [r5, #28]
 80366b4:	4631      	mov	r1, r6
 80366b6:	4640      	mov	r0, r8
 80366b8:	f7ff ff7a 	bl	80365b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80366bc:	9b01      	ldr	r3, [sp, #4]
 80366be:	f9b4 2000 	ldrsh.w	r2, [r4]
 80366c2:	429a      	cmp	r2, r3
 80366c4:	b29f      	uxth	r7, r3
 80366c6:	da0d      	bge.n	80366e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80366c8:	f8ad 2010 	strh.w	r2, [sp, #16]
 80366cc:	1aba      	subs	r2, r7, r2
 80366ce:	f8ad a012 	strh.w	sl, [sp, #18]
 80366d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80366d6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80366da:	69ea      	ldr	r2, [r5, #28]
 80366dc:	4631      	mov	r1, r6
 80366de:	4640      	mov	r0, r8
 80366e0:	f7ff ff66 	bl	80365b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80366e4:	8822      	ldrh	r2, [r4, #0]
 80366e6:	88a3      	ldrh	r3, [r4, #4]
 80366e8:	445f      	add	r7, fp
 80366ea:	4413      	add	r3, r2
 80366ec:	b29b      	uxth	r3, r3
 80366ee:	b2bf      	uxth	r7, r7
 80366f0:	b23a      	sxth	r2, r7
 80366f2:	b219      	sxth	r1, r3
 80366f4:	4291      	cmp	r1, r2
 80366f6:	dd0d      	ble.n	8036714 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80366f8:	1bdb      	subs	r3, r3, r7
 80366fa:	f8ad 2010 	strh.w	r2, [sp, #16]
 80366fe:	f8ad a012 	strh.w	sl, [sp, #18]
 8036702:	f8ad 3014 	strh.w	r3, [sp, #20]
 8036706:	f8ad 9016 	strh.w	r9, [sp, #22]
 803670a:	69ea      	ldr	r2, [r5, #28]
 803670c:	4631      	mov	r1, r6
 803670e:	4640      	mov	r0, r8
 8036710:	f7ff ff4e 	bl	80365b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8036714:	88e2      	ldrh	r2, [r4, #6]
 8036716:	8863      	ldrh	r3, [r4, #2]
 8036718:	4413      	add	r3, r2
 803671a:	9a00      	ldr	r2, [sp, #0]
 803671c:	444a      	add	r2, r9
 803671e:	b29b      	uxth	r3, r3
 8036720:	fa1f f982 	uxth.w	r9, r2
 8036724:	fa0f f289 	sxth.w	r2, r9
 8036728:	b219      	sxth	r1, r3
 803672a:	428a      	cmp	r2, r1
 803672c:	da15      	bge.n	803675a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 803672e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8036732:	f9b4 0000 	ldrsh.w	r0, [r4]
 8036736:	f8ad 1014 	strh.w	r1, [sp, #20]
 803673a:	eba3 0309 	sub.w	r3, r3, r9
 803673e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8036742:	f8ad 2012 	strh.w	r2, [sp, #18]
 8036746:	f8ad 3016 	strh.w	r3, [sp, #22]
 803674a:	69ea      	ldr	r2, [r5, #28]
 803674c:	4631      	mov	r1, r6
 803674e:	e001      	b.n	8036754 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8036750:	69ea      	ldr	r2, [r5, #28]
 8036752:	4621      	mov	r1, r4
 8036754:	4640      	mov	r0, r8
 8036756:	f7ff ff2b 	bl	80365b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 803675a:	4628      	mov	r0, r5
 803675c:	f7ff fe94 	bl	8036488 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8036760:	6861      	ldr	r1, [r4, #4]
 8036762:	4602      	mov	r2, r0
 8036764:	6820      	ldr	r0, [r4, #0]
 8036766:	4633      	mov	r3, r6
 8036768:	c303      	stmia	r3!, {r0, r1}
 803676a:	4611      	mov	r1, r2
 803676c:	4630      	mov	r0, r6
 803676e:	f7f9 fc75 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8036772:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8036776:	2b00      	cmp	r3, #0
 8036778:	f77f af33 	ble.w	80365e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 803677c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8036780:	2b00      	cmp	r3, #0
 8036782:	f77f af2e 	ble.w	80365e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8036786:	4628      	mov	r0, r5
 8036788:	f7ff fe9a 	bl	80364c0 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 803678c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8036790:	1a18      	subs	r0, r3, r0
 8036792:	f8ad 0010 	strh.w	r0, [sp, #16]
 8036796:	4628      	mov	r0, r5
 8036798:	f7ff fea6 	bl	80364e8 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 803679c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80367a0:	1a18      	subs	r0, r3, r0
 80367a2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80367a6:	682b      	ldr	r3, [r5, #0]
 80367a8:	4631      	mov	r1, r6
 80367aa:	689b      	ldr	r3, [r3, #8]
 80367ac:	4628      	mov	r0, r5
 80367ae:	4798      	blx	r3
 80367b0:	e717      	b.n	80365e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080367b2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80367b2:	b570      	push	{r4, r5, r6, lr}
 80367b4:	460c      	mov	r4, r1
 80367b6:	b086      	sub	sp, #24
 80367b8:	1d06      	adds	r6, r0, #4
 80367ba:	2300      	movs	r3, #0
 80367bc:	4631      	mov	r1, r6
 80367be:	4605      	mov	r5, r0
 80367c0:	a802      	add	r0, sp, #8
 80367c2:	9301      	str	r3, [sp, #4]
 80367c4:	f7ff fbfe 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80367c8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80367cc:	8822      	ldrh	r2, [r4, #0]
 80367ce:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80367d2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80367d6:	f8ad 0014 	strh.w	r0, [sp, #20]
 80367da:	1ad2      	subs	r2, r2, r3
 80367dc:	8863      	ldrh	r3, [r4, #2]
 80367de:	f8ad 2010 	strh.w	r2, [sp, #16]
 80367e2:	1a5b      	subs	r3, r3, r1
 80367e4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80367e8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80367ec:	aa01      	add	r2, sp, #4
 80367ee:	a904      	add	r1, sp, #16
 80367f0:	4630      	mov	r0, r6
 80367f2:	f8ad 3012 	strh.w	r3, [sp, #18]
 80367f6:	f7f9 fca8 	bl	803014a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80367fa:	9a01      	ldr	r2, [sp, #4]
 80367fc:	b11a      	cbz	r2, 8036806 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80367fe:	4621      	mov	r1, r4
 8036800:	4628      	mov	r0, r5
 8036802:	f7ff fed5 	bl	80365b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8036806:	b006      	add	sp, #24
 8036808:	bd70      	pop	{r4, r5, r6, pc}

0803680a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 803680a:	b530      	push	{r4, r5, lr}
 803680c:	4602      	mov	r2, r0
 803680e:	4604      	mov	r4, r0
 8036810:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8036814:	b085      	sub	sp, #20
 8036816:	460d      	mov	r5, r1
 8036818:	6851      	ldr	r1, [r2, #4]
 803681a:	466b      	mov	r3, sp
 803681c:	c303      	stmia	r3!, {r0, r1}
 803681e:	4629      	mov	r1, r5
 8036820:	4668      	mov	r0, sp
 8036822:	f7f9 fc1b 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 8036826:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 803682a:	b12b      	cbz	r3, 8036838 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 803682c:	4669      	mov	r1, sp
 803682e:	4620      	mov	r0, r4
 8036830:	f7ff ffbf 	bl	80367b2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8036834:	b005      	add	sp, #20
 8036836:	bd30      	pop	{r4, r5, pc}
 8036838:	3404      	adds	r4, #4
 803683a:	4621      	mov	r1, r4
 803683c:	a802      	add	r0, sp, #8
 803683e:	f7ff fbc1 	bl	8035fc4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8036842:	f8bd 3000 	ldrh.w	r3, [sp]
 8036846:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 803684a:	1a9b      	subs	r3, r3, r2
 803684c:	f8ad 3000 	strh.w	r3, [sp]
 8036850:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8036854:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8036858:	4669      	mov	r1, sp
 803685a:	1a9b      	subs	r3, r3, r2
 803685c:	4620      	mov	r0, r4
 803685e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8036862:	f7f9 fc35 	bl	80300d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8036866:	e7e5      	b.n	8036834 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08036868 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8036868:	680a      	ldr	r2, [r1, #0]
 803686a:	460b      	mov	r3, r1
 803686c:	6992      	ldr	r2, [r2, #24]
 803686e:	1d01      	adds	r1, r0, #4
 8036870:	4618      	mov	r0, r3
 8036872:	4710      	bx	r2

08036874 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8036874:	4298      	cmp	r0, r3
 8036876:	d200      	bcs.n	803687a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8036878:	b913      	cbnz	r3, 8036880 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 803687a:	440a      	add	r2, r1
 803687c:	b210      	sxth	r0, r2
 803687e:	4770      	bx	lr
 8036880:	ee07 2a90 	vmov	s15, r2
 8036884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8036888:	ee07 0a90 	vmov	s15, r0
 803688c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8036890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8036894:	ee07 3a10 	vmov	s14, r3
 8036898:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 803689c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80368a0:	ee07 1a90 	vmov	s15, r1
 80368a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80368a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80368ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80368b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80368b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80368b8:	bfcc      	ite	gt
 80368ba:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80368be:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80368c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80368c6:	ee17 3a90 	vmov	r3, s15
 80368ca:	b218      	sxth	r0, r3
 80368cc:	4770      	bx	lr

080368ce <_ZN8touchgfx12TextProviderC1Ev>:
 80368ce:	b538      	push	{r3, r4, r5, lr}
 80368d0:	2500      	movs	r5, #0
 80368d2:	2302      	movs	r3, #2
 80368d4:	4604      	mov	r4, r0
 80368d6:	e9c0 5500 	strd	r5, r5, [r0]
 80368da:	7403      	strb	r3, [r0, #16]
 80368dc:	6145      	str	r5, [r0, #20]
 80368de:	7605      	strb	r5, [r0, #24]
 80368e0:	83c5      	strh	r5, [r0, #30]
 80368e2:	8405      	strh	r5, [r0, #32]
 80368e4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80368e6:	8705      	strh	r5, [r0, #56]	@ 0x38
 80368e8:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80368ea:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80368ee:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80368f2:	220e      	movs	r2, #14
 80368f4:	4629      	mov	r1, r5
 80368f6:	304c      	adds	r0, #76	@ 0x4c
 80368f8:	f006 fdd4 	bl	803d4a4 <memset>
 80368fc:	2301      	movs	r3, #1
 80368fe:	4620      	mov	r0, r4
 8036900:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8036904:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8036908:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 803690c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8036910:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8036914:	f7f6 fa7e 	bl	802ce14 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8036918:	4620      	mov	r0, r4
 803691a:	bd38      	pop	{r3, r4, r5, pc}

0803691c <_ZN8touchgfx12TextProvider11endOfStringEv>:
 803691c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 803691e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8036922:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8036924:	fab0 f080 	clz	r0, r0
 8036928:	0940      	lsrs	r0, r0, #5
 803692a:	4770      	bx	lr

0803692c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 803692c:	b530      	push	{r4, r5, lr}
 803692e:	2500      	movs	r5, #0
 8036930:	2401      	movs	r4, #1
 8036932:	6843      	ldr	r3, [r0, #4]
 8036934:	b913      	cbnz	r3, 803693c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8036936:	6803      	ldr	r3, [r0, #0]
 8036938:	b313      	cbz	r3, 8036980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 803693a:	6043      	str	r3, [r0, #4]
 803693c:	7e03      	ldrb	r3, [r0, #24]
 803693e:	b143      	cbz	r3, 8036952 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8036940:	6943      	ldr	r3, [r0, #20]
 8036942:	b12b      	cbz	r3, 8036950 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8036944:	881a      	ldrh	r2, [r3, #0]
 8036946:	b11a      	cbz	r2, 8036950 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8036948:	1c9a      	adds	r2, r3, #2
 803694a:	6142      	str	r2, [r0, #20]
 803694c:	8818      	ldrh	r0, [r3, #0]
 803694e:	bd30      	pop	{r4, r5, pc}
 8036950:	7605      	strb	r5, [r0, #24]
 8036952:	6843      	ldr	r3, [r0, #4]
 8036954:	8819      	ldrh	r1, [r3, #0]
 8036956:	b199      	cbz	r1, 8036980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8036958:	1c9a      	adds	r2, r3, #2
 803695a:	2902      	cmp	r1, #2
 803695c:	6042      	str	r2, [r0, #4]
 803695e:	d1f5      	bne.n	803694c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8036960:	7c03      	ldrb	r3, [r0, #16]
 8036962:	2b01      	cmp	r3, #1
 8036964:	d8e5      	bhi.n	8036932 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8036966:	1c5a      	adds	r2, r3, #1
 8036968:	3302      	adds	r3, #2
 803696a:	7402      	strb	r2, [r0, #16]
 803696c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8036970:	6143      	str	r3, [r0, #20]
 8036972:	2b00      	cmp	r3, #0
 8036974:	d0dd      	beq.n	8036932 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8036976:	881b      	ldrh	r3, [r3, #0]
 8036978:	2b00      	cmp	r3, #0
 803697a:	d0da      	beq.n	8036932 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 803697c:	7604      	strb	r4, [r0, #24]
 803697e:	e7d8      	b.n	8036932 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8036980:	2000      	movs	r0, #0
 8036982:	e7e4      	b.n	803694e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8036984:	b430      	push	{r4, r5}
 8036986:	6001      	str	r1, [r0, #0]
 8036988:	2100      	movs	r1, #0
 803698a:	6041      	str	r1, [r0, #4]
 803698c:	6815      	ldr	r5, [r2, #0]
 803698e:	6085      	str	r5, [r0, #8]
 8036990:	6852      	ldr	r2, [r2, #4]
 8036992:	6443      	str	r3, [r0, #68]	@ 0x44
 8036994:	9b02      	ldr	r3, [sp, #8]
 8036996:	60c2      	str	r2, [r0, #12]
 8036998:	7401      	strb	r1, [r0, #16]
 803699a:	6141      	str	r1, [r0, #20]
 803699c:	7601      	strb	r1, [r0, #24]
 803699e:	8701      	strh	r1, [r0, #56]	@ 0x38
 80369a0:	8401      	strh	r1, [r0, #32]
 80369a2:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80369a6:	6483      	str	r3, [r0, #72]	@ 0x48
 80369a8:	bc30      	pop	{r4, r5}
 80369aa:	f7f6 ba33 	b.w	802ce14 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080369ae <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80369ae:	b408      	push	{r3}
 80369b0:	b510      	push	{r4, lr}
 80369b2:	b085      	sub	sp, #20
 80369b4:	ac07      	add	r4, sp, #28
 80369b6:	f854 3b04 	ldr.w	r3, [r4], #4
 80369ba:	9300      	str	r3, [sp, #0]
 80369bc:	4613      	mov	r3, r2
 80369be:	4622      	mov	r2, r4
 80369c0:	9403      	str	r4, [sp, #12]
 80369c2:	f7ff ffdf 	bl	8036984 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80369c6:	b005      	add	sp, #20
 80369c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80369cc:	b001      	add	sp, #4
 80369ce:	4770      	bx	lr

080369d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80369d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80369d2:	4605      	mov	r5, r0
 80369d4:	4608      	mov	r0, r1
 80369d6:	b1e9      	cbz	r1, 8036a14 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80369d8:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80369dc:	460b      	mov	r3, r1
 80369de:	f101 0708 	add.w	r7, r1, #8
 80369e2:	4622      	mov	r2, r4
 80369e4:	6818      	ldr	r0, [r3, #0]
 80369e6:	6859      	ldr	r1, [r3, #4]
 80369e8:	4626      	mov	r6, r4
 80369ea:	c603      	stmia	r6!, {r0, r1}
 80369ec:	3308      	adds	r3, #8
 80369ee:	42bb      	cmp	r3, r7
 80369f0:	4634      	mov	r4, r6
 80369f2:	d1f7      	bne.n	80369e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80369f4:	6818      	ldr	r0, [r3, #0]
 80369f6:	6030      	str	r0, [r6, #0]
 80369f8:	889b      	ldrh	r3, [r3, #4]
 80369fa:	80b3      	strh	r3, [r6, #4]
 80369fc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8036a00:	015b      	lsls	r3, r3, #5
 8036a02:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8036a06:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8036a0a:	430b      	orrs	r3, r1
 8036a0c:	425b      	negs	r3, r3
 8036a0e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8036a12:	4610      	mov	r0, r2
 8036a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08036a16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8036a16:	b538      	push	{r3, r4, r5, lr}
 8036a18:	460c      	mov	r4, r1
 8036a1a:	6811      	ldr	r1, [r2, #0]
 8036a1c:	4610      	mov	r0, r2
 8036a1e:	68cd      	ldr	r5, [r1, #12]
 8036a20:	4619      	mov	r1, r3
 8036a22:	47a8      	blx	r5
 8036a24:	2800      	cmp	r0, #0
 8036a26:	bf08      	it	eq
 8036a28:	4620      	moveq	r0, r4
 8036a2a:	bd38      	pop	{r3, r4, r5, pc}

08036a2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8036a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8036a2e:	4604      	mov	r4, r0
 8036a30:	4615      	mov	r5, r2
 8036a32:	4608      	mov	r0, r1
 8036a34:	b93a      	cbnz	r2, 8036a46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8036a36:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8036a3a:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8036a3e:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8036a42:	4628      	mov	r0, r5
 8036a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8036a46:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8036a4a:	8893      	ldrh	r3, [r2, #4]
 8036a4c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8036a50:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8036a54:	79ee      	ldrb	r6, [r5, #7]
 8036a56:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 8036a5a:	4316      	orrs	r6, r2
 8036a5c:	19da      	adds	r2, r3, r7
 8036a5e:	b291      	uxth	r1, r2
 8036a60:	291d      	cmp	r1, #29
 8036a62:	b2b7      	uxth	r7, r6
 8036a64:	d87a      	bhi.n	8036b5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8036a66:	2201      	movs	r2, #1
 8036a68:	408a      	lsls	r2, r1
 8036a6a:	4975      	ldr	r1, [pc, #468]	@ (8036c40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8036a6c:	420a      	tst	r2, r1
 8036a6e:	ea4f 06e6 	mov.w	r6, r6, asr #3
 8036a72:	d12d      	bne.n	8036ad0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8036a74:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8036a78:	d070      	beq.n	8036b5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 8036a7a:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8036a7e:	462b      	mov	r3, r5
 8036a80:	f105 0e08 	add.w	lr, r5, #8
 8036a84:	4615      	mov	r5, r2
 8036a86:	6818      	ldr	r0, [r3, #0]
 8036a88:	6859      	ldr	r1, [r3, #4]
 8036a8a:	4694      	mov	ip, r2
 8036a8c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8036a90:	3308      	adds	r3, #8
 8036a92:	4573      	cmp	r3, lr
 8036a94:	4662      	mov	r2, ip
 8036a96:	d1f6      	bne.n	8036a86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8036a98:	6818      	ldr	r0, [r3, #0]
 8036a9a:	f8cc 0000 	str.w	r0, [ip]
 8036a9e:	889b      	ldrh	r3, [r3, #4]
 8036aa0:	f8ac 3004 	strh.w	r3, [ip, #4]
 8036aa4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8036aa8:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8036aac:	b2b3      	uxth	r3, r6
 8036aae:	1aca      	subs	r2, r1, r3
 8036ab0:	b292      	uxth	r2, r2
 8036ab2:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8036ab6:	10d2      	asrs	r2, r2, #3
 8036ab8:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8036abc:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8036ac0:	4302      	orrs	r2, r0
 8036ac2:	1bcf      	subs	r7, r1, r7
 8036ac4:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8036ac8:	1afb      	subs	r3, r7, r3
 8036aca:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8036ace:	e7b8      	b.n	8036a42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8036ad0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8036ad2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8036ad6:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8036ad8:	f640 6333 	movw	r3, #3635	@ 0xe33
 8036adc:	4299      	cmp	r1, r3
 8036ade:	d110      	bne.n	8036b02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8036ae0:	6803      	ldr	r3, [r0, #0]
 8036ae2:	68db      	ldr	r3, [r3, #12]
 8036ae4:	4798      	blx	r3
 8036ae6:	7b41      	ldrb	r1, [r0, #13]
 8036ae8:	00cb      	lsls	r3, r1, #3
 8036aea:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8036aee:	7a03      	ldrb	r3, [r0, #8]
 8036af0:	0648      	lsls	r0, r1, #25
 8036af2:	ea43 0302 	orr.w	r3, r3, r2
 8036af6:	bf44      	itt	mi
 8036af8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036afc:	b21b      	sxthmi	r3, r3
 8036afe:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8036b02:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8036b06:	443b      	add	r3, r7
 8036b08:	4433      	add	r3, r6
 8036b0a:	b29b      	uxth	r3, r3
 8036b0c:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8036b10:	462a      	mov	r2, r5
 8036b12:	f105 0c08 	add.w	ip, r5, #8
 8036b16:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8036b1a:	4635      	mov	r5, r6
 8036b1c:	6810      	ldr	r0, [r2, #0]
 8036b1e:	6851      	ldr	r1, [r2, #4]
 8036b20:	4637      	mov	r7, r6
 8036b22:	c703      	stmia	r7!, {r0, r1}
 8036b24:	3208      	adds	r2, #8
 8036b26:	4562      	cmp	r2, ip
 8036b28:	463e      	mov	r6, r7
 8036b2a:	d1f7      	bne.n	8036b1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8036b2c:	6810      	ldr	r0, [r2, #0]
 8036b2e:	6038      	str	r0, [r7, #0]
 8036b30:	8892      	ldrh	r2, [r2, #4]
 8036b32:	80ba      	strh	r2, [r7, #4]
 8036b34:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8036b38:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8036b3c:	10db      	asrs	r3, r3, #3
 8036b3e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8036b42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8036b46:	4313      	orrs	r3, r2
 8036b48:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8036b4c:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8036b50:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8036b54:	1a9b      	subs	r3, r3, r2
 8036b56:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8036b5a:	e772      	b.n	8036a42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8036b5c:	f023 0204 	bic.w	r2, r3, #4
 8036b60:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8036b64:	428a      	cmp	r2, r1
 8036b66:	d003      	beq.n	8036b70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8036b68:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8036b6c:	4293      	cmp	r3, r2
 8036b6e:	d120      	bne.n	8036bb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 8036b70:	3b01      	subs	r3, #1
 8036b72:	4602      	mov	r2, r0
 8036b74:	b29b      	uxth	r3, r3
 8036b76:	4629      	mov	r1, r5
 8036b78:	4620      	mov	r0, r4
 8036b7a:	f7ff ff4c 	bl	8036a16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8036b7e:	7b41      	ldrb	r1, [r0, #13]
 8036b80:	00cb      	lsls	r3, r1, #3
 8036b82:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8036b86:	7a03      	ldrb	r3, [r0, #8]
 8036b88:	0649      	lsls	r1, r1, #25
 8036b8a:	ea43 0302 	orr.w	r3, r3, r2
 8036b8e:	bf44      	itt	mi
 8036b90:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036b94:	b21b      	sxthmi	r3, r3
 8036b96:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8036b9a:	7b6b      	ldrb	r3, [r5, #13]
 8036b9c:	7aaa      	ldrb	r2, [r5, #10]
 8036b9e:	005b      	lsls	r3, r3, #1
 8036ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8036ba4:	4313      	orrs	r3, r2
 8036ba6:	115a      	asrs	r2, r3, #5
 8036ba8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8036bac:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8036bb0:	e036      	b.n	8036c20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8036bb2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8036bb6:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8036bba:	7a2a      	ldrb	r2, [r5, #8]
 8036bbc:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8036bc0:	ea42 0201 	orr.w	r2, r2, r1
 8036bc4:	bf1c      	itt	ne
 8036bc6:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 8036bca:	b212      	sxthne	r2, r2
 8036bcc:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8036bd0:	f640 6109 	movw	r1, #3593	@ 0xe09
 8036bd4:	f023 0210 	bic.w	r2, r3, #16
 8036bd8:	428a      	cmp	r2, r1
 8036bda:	d003      	beq.n	8036be4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 8036bdc:	f640 6213 	movw	r2, #3603	@ 0xe13
 8036be0:	4293      	cmp	r3, r2
 8036be2:	d12a      	bne.n	8036c3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8036be4:	7b6e      	ldrb	r6, [r5, #13]
 8036be6:	0076      	lsls	r6, r6, #1
 8036be8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8036bec:	7aae      	ldrb	r6, [r5, #10]
 8036bee:	4316      	orrs	r6, r2
 8036bf0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8036bf4:	4293      	cmp	r3, r2
 8036bf6:	bf18      	it	ne
 8036bf8:	f103 33ff 	addne.w	r3, r3, #4294967295
 8036bfc:	4602      	mov	r2, r0
 8036bfe:	bf14      	ite	ne
 8036c00:	b29b      	uxthne	r3, r3
 8036c02:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8036c06:	4629      	mov	r1, r5
 8036c08:	4620      	mov	r0, r4
 8036c0a:	f7ff ff04 	bl	8036a16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8036c0e:	7b43      	ldrb	r3, [r0, #13]
 8036c10:	7a82      	ldrb	r2, [r0, #10]
 8036c12:	005b      	lsls	r3, r3, #1
 8036c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8036c18:	4313      	orrs	r3, r2
 8036c1a:	1af6      	subs	r6, r6, r3
 8036c1c:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8036c20:	7b69      	ldrb	r1, [r5, #13]
 8036c22:	00cb      	lsls	r3, r1, #3
 8036c24:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8036c28:	7a2b      	ldrb	r3, [r5, #8]
 8036c2a:	4313      	orrs	r3, r2
 8036c2c:	064a      	lsls	r2, r1, #25
 8036c2e:	bf44      	itt	mi
 8036c30:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036c34:	b21b      	sxthmi	r3, r3
 8036c36:	1bdb      	subs	r3, r3, r7
 8036c38:	e747      	b.n	8036aca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8036c3a:	2300      	movs	r3, #0
 8036c3c:	e7b6      	b.n	8036bac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 8036c3e:	bf00      	nop
 8036c40:	3fc00079 	.word	0x3fc00079

08036c44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8036c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8036c48:	4604      	mov	r4, r0
 8036c4a:	b942      	cbnz	r2, 8036c5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8036c4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8036c50:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8036c54:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8036c58:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8036c5c:	e047      	b.n	8036cee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8036c5e:	7b51      	ldrb	r1, [r2, #13]
 8036c60:	8893      	ldrh	r3, [r2, #4]
 8036c62:	010d      	lsls	r5, r1, #4
 8036c64:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8036c68:	79d5      	ldrb	r5, [r2, #7]
 8036c6a:	4305      	orrs	r5, r0
 8036c6c:	2d04      	cmp	r5, #4
 8036c6e:	bfcc      	ite	gt
 8036c70:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8036c74:	f04f 0e01 	movle.w	lr, #1
 8036c78:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8036c7c:	f200 80ab 	bhi.w	8036dd6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8036c80:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8036c84:	4283      	cmp	r3, r0
 8036c86:	d216      	bcs.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036c88:	f240 605b 	movw	r0, #1627	@ 0x65b
 8036c8c:	4283      	cmp	r3, r0
 8036c8e:	d859      	bhi.n	8036d44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8036c90:	f240 6057 	movw	r0, #1623	@ 0x657
 8036c94:	4283      	cmp	r3, r0
 8036c96:	d20e      	bcs.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036c98:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8036c9c:	d24a      	bcs.n	8036d34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8036c9e:	f240 604e 	movw	r0, #1614	@ 0x64e
 8036ca2:	4283      	cmp	r3, r0
 8036ca4:	d207      	bcs.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036ca6:	f240 601a 	movw	r0, #1562	@ 0x61a
 8036caa:	4283      	cmp	r3, r0
 8036cac:	d02a      	beq.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036cae:	d821      	bhi.n	8036cf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8036cb0:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8036cb4:	d35b      	bcc.n	8036d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8036cb6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8036cba:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8036cbe:	f040 80d0 	bne.w	8036e62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8036cc2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8036cc6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8036cca:	f040 80ca 	bne.w	8036e62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8036cce:	00cb      	lsls	r3, r1, #3
 8036cd0:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8036cd4:	7a13      	ldrb	r3, [r2, #8]
 8036cd6:	0649      	lsls	r1, r1, #25
 8036cd8:	ea43 0300 	orr.w	r3, r3, r0
 8036cdc:	bf44      	itt	mi
 8036cde:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036ce2:	b21b      	sxthmi	r3, r3
 8036ce4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8036ce8:	1b5d      	subs	r5, r3, r5
 8036cea:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8036cee:	4610      	mov	r0, r2
 8036cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8036cf4:	f240 604b 	movw	r0, #1611	@ 0x64b
 8036cf8:	4283      	cmp	r3, r0
 8036cfa:	d338      	bcc.n	8036d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8036cfc:	f240 604c 	movw	r0, #1612	@ 0x64c
 8036d00:	4283      	cmp	r3, r0
 8036d02:	d9d8      	bls.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036d04:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8036d08:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8036d0c:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8036d10:	f040 80f2 	bne.w	8036ef8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8036d14:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8036d18:	f040 80ee 	bne.w	8036ef8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8036d1c:	00cb      	lsls	r3, r1, #3
 8036d1e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8036d22:	7a13      	ldrb	r3, [r2, #8]
 8036d24:	064e      	lsls	r6, r1, #25
 8036d26:	ea43 0300 	orr.w	r3, r3, r0
 8036d2a:	bf44      	itt	mi
 8036d2c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036d30:	b21b      	sxthmi	r3, r3
 8036d32:	e7d9      	b.n	8036ce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8036d34:	f240 6054 	movw	r0, #1620	@ 0x654
 8036d38:	4283      	cmp	r3, r0
 8036d3a:	d8e3      	bhi.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036d3c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8036d40:	d9e0      	bls.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036d42:	e7b8      	b.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036d44:	f240 6074 	movw	r0, #1652	@ 0x674
 8036d48:	4283      	cmp	r3, r0
 8036d4a:	d0b4      	beq.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036d4c:	d82d      	bhi.n	8036daa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8036d4e:	f240 605e 	movw	r0, #1630	@ 0x65e
 8036d52:	4283      	cmp	r3, r0
 8036d54:	d804      	bhi.n	8036d60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8036d56:	f240 605d 	movw	r0, #1629	@ 0x65d
 8036d5a:	4283      	cmp	r3, r0
 8036d5c:	d3d2      	bcc.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036d5e:	e7aa      	b.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036d60:	f240 605f 	movw	r0, #1631	@ 0x65f
 8036d64:	4283      	cmp	r3, r0
 8036d66:	d0cd      	beq.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036d68:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8036d6c:	d0a3      	beq.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036d6e:	00cb      	lsls	r3, r1, #3
 8036d70:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8036d74:	7a13      	ldrb	r3, [r2, #8]
 8036d76:	0649      	lsls	r1, r1, #25
 8036d78:	ea43 0300 	orr.w	r3, r3, r0
 8036d7c:	bf44      	itt	mi
 8036d7e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036d82:	b21b      	sxthmi	r3, r3
 8036d84:	1b5d      	subs	r5, r3, r5
 8036d86:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8036d8a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8036d8e:	7b53      	ldrb	r3, [r2, #13]
 8036d90:	015b      	lsls	r3, r3, #5
 8036d92:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8036d96:	7993      	ldrb	r3, [r2, #6]
 8036d98:	430b      	orrs	r3, r1
 8036d9a:	005b      	lsls	r3, r3, #1
 8036d9c:	2105      	movs	r1, #5
 8036d9e:	fb93 f3f1 	sdiv	r3, r3, r1
 8036da2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8036da6:	440b      	add	r3, r1
 8036da8:	e756      	b.n	8036c58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8036daa:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8036dae:	4283      	cmp	r3, r0
 8036db0:	d809      	bhi.n	8036dc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8036db2:	f240 60df 	movw	r0, #1759	@ 0x6df
 8036db6:	4283      	cmp	r3, r0
 8036db8:	f4bf af7d 	bcs.w	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036dbc:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8036dc0:	2b05      	cmp	r3, #5
 8036dc2:	d8d4      	bhi.n	8036d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8036dc4:	e777      	b.n	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036dc6:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8036dca:	4283      	cmp	r3, r0
 8036dcc:	d09a      	beq.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036dce:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8036dd2:	4283      	cmp	r3, r0
 8036dd4:	e7ca      	b.n	8036d6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8036dd6:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8036dda:	d22b      	bcs.n	8036e34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8036ddc:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8036de0:	4283      	cmp	r3, r0
 8036de2:	d28f      	bcs.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036de4:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8036de8:	4283      	cmp	r3, r0
 8036dea:	d816      	bhi.n	8036e1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8036dec:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8036df0:	4283      	cmp	r3, r0
 8036df2:	f4bf af60 	bcs.w	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036df6:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8036dfa:	4283      	cmp	r3, r0
 8036dfc:	d80a      	bhi.n	8036e14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8036dfe:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8036e02:	4283      	cmp	r3, r0
 8036e04:	f4bf af57 	bcs.w	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036e08:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8036e0c:	4283      	cmp	r3, r0
 8036e0e:	f43f af79 	beq.w	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036e12:	e7ac      	b.n	8036d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8036e14:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8036e18:	e7f8      	b.n	8036e0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8036e1a:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8036e1e:	4283      	cmp	r3, r0
 8036e20:	d802      	bhi.n	8036e28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8036e22:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8036e26:	e798      	b.n	8036d5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8036e28:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8036e2c:	4283      	cmp	r3, r0
 8036e2e:	f47f af42 	bne.w	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036e32:	e767      	b.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036e34:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8036e38:	4283      	cmp	r3, r0
 8036e3a:	f43f af63 	beq.w	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036e3e:	d802      	bhi.n	8036e46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8036e40:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8036e44:	e7f2      	b.n	8036e2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8036e46:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8036e4a:	4283      	cmp	r3, r0
 8036e4c:	d805      	bhi.n	8036e5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8036e4e:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8036e52:	4283      	cmp	r3, r0
 8036e54:	f4ff af2f 	bcc.w	8036cb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8036e58:	e754      	b.n	8036d04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8036e5a:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8036e5e:	4283      	cmp	r3, r0
 8036e60:	e7af      	b.n	8036dc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8036e62:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8036e66:	4617      	mov	r7, r2
 8036e68:	f102 0808 	add.w	r8, r2, #8
 8036e6c:	4666      	mov	r6, ip
 8036e6e:	6838      	ldr	r0, [r7, #0]
 8036e70:	6879      	ldr	r1, [r7, #4]
 8036e72:	46e6      	mov	lr, ip
 8036e74:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8036e78:	3708      	adds	r7, #8
 8036e7a:	4547      	cmp	r7, r8
 8036e7c:	46f4      	mov	ip, lr
 8036e7e:	d1f6      	bne.n	8036e6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8036e80:	6838      	ldr	r0, [r7, #0]
 8036e82:	f8ce 0000 	str.w	r0, [lr]
 8036e86:	88b9      	ldrh	r1, [r7, #4]
 8036e88:	f8ae 1004 	strh.w	r1, [lr, #4]
 8036e8c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8036e90:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8036e94:	d009      	beq.n	8036eaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 8036e96:	7b51      	ldrb	r1, [r2, #13]
 8036e98:	7992      	ldrb	r2, [r2, #6]
 8036e9a:	0149      	lsls	r1, r1, #5
 8036e9c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8036ea0:	4311      	orrs	r1, r2
 8036ea2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8036ea6:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8036eaa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8036eae:	b2ad      	uxth	r5, r5
 8036eb0:	d00d      	beq.n	8036ece <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 8036eb2:	442b      	add	r3, r5
 8036eb4:	b29b      	uxth	r3, r3
 8036eb6:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8036eba:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8036ebe:	10db      	asrs	r3, r3, #3
 8036ec0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8036ec4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8036ec8:	4313      	orrs	r3, r2
 8036eca:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8036ece:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8036ed2:	00cb      	lsls	r3, r1, #3
 8036ed4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8036ed8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8036edc:	064f      	lsls	r7, r1, #25
 8036ede:	ea43 0302 	orr.w	r3, r3, r2
 8036ee2:	bf44      	itt	mi
 8036ee4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036ee8:	b21b      	sxthmi	r3, r3
 8036eea:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8036eee:	1b5b      	subs	r3, r3, r5
 8036ef0:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8036ef4:	4632      	mov	r2, r6
 8036ef6:	e6fa      	b.n	8036cee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8036ef8:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8036efc:	4617      	mov	r7, r2
 8036efe:	f102 0908 	add.w	r9, r2, #8
 8036f02:	4666      	mov	r6, ip
 8036f04:	6838      	ldr	r0, [r7, #0]
 8036f06:	6879      	ldr	r1, [r7, #4]
 8036f08:	46e0      	mov	r8, ip
 8036f0a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8036f0e:	3708      	adds	r7, #8
 8036f10:	454f      	cmp	r7, r9
 8036f12:	46c4      	mov	ip, r8
 8036f14:	d1f6      	bne.n	8036f04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8036f16:	6838      	ldr	r0, [r7, #0]
 8036f18:	f8c8 0000 	str.w	r0, [r8]
 8036f1c:	88b9      	ldrh	r1, [r7, #4]
 8036f1e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8036f22:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8036f26:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8036f2a:	d009      	beq.n	8036f40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8036f2c:	7b51      	ldrb	r1, [r2, #13]
 8036f2e:	7992      	ldrb	r2, [r2, #6]
 8036f30:	0149      	lsls	r1, r1, #5
 8036f32:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8036f36:	4311      	orrs	r1, r2
 8036f38:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8036f3c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8036f40:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8036f44:	d00e      	beq.n	8036f64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8036f46:	eba3 030e 	sub.w	r3, r3, lr
 8036f4a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8036f4e:	b29b      	uxth	r3, r3
 8036f50:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8036f54:	10db      	asrs	r3, r3, #3
 8036f56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8036f5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8036f5e:	4313      	orrs	r3, r2
 8036f60:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8036f64:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8036f68:	00cb      	lsls	r3, r1, #3
 8036f6a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8036f6e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8036f72:	0648      	lsls	r0, r1, #25
 8036f74:	ea43 0302 	orr.w	r3, r3, r2
 8036f78:	bf44      	itt	mi
 8036f7a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8036f7e:	b21b      	sxthmi	r3, r3
 8036f80:	1b5d      	subs	r5, r3, r5
 8036f82:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8036f86:	e7b5      	b.n	8036ef4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08036f88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8036f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8036f8c:	461e      	mov	r6, r3
 8036f8e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8036f90:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8036f94:	4604      	mov	r4, r0
 8036f96:	4617      	mov	r7, r2
 8036f98:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8036f9c:	f7f5 fef8 	bl	802cd90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8036fa0:	4605      	mov	r5, r0
 8036fa2:	b918      	cbnz	r0, 8036fac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8036fa4:	6030      	str	r0, [r6, #0]
 8036fa6:	4628      	mov	r0, r5
 8036fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8036fac:	683b      	ldr	r3, [r7, #0]
 8036fae:	4601      	mov	r1, r0
 8036fb0:	68db      	ldr	r3, [r3, #12]
 8036fb2:	4638      	mov	r0, r7
 8036fb4:	4798      	blx	r3
 8036fb6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8036fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8036fbe:	4602      	mov	r2, r0
 8036fc0:	6030      	str	r0, [r6, #0]
 8036fc2:	d213      	bcs.n	8036fec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8036fc4:	4643      	mov	r3, r8
 8036fc6:	4639      	mov	r1, r7
 8036fc8:	4620      	mov	r0, r4
 8036fca:	f7ff fe3b 	bl	8036c44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8036fce:	6030      	str	r0, [r6, #0]
 8036fd0:	6833      	ldr	r3, [r6, #0]
 8036fd2:	b143      	cbz	r3, 8036fe6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8036fd4:	7b5a      	ldrb	r2, [r3, #13]
 8036fd6:	7a9b      	ldrb	r3, [r3, #10]
 8036fd8:	0052      	lsls	r2, r2, #1
 8036fda:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8036fde:	4313      	orrs	r3, r2
 8036fe0:	bf0c      	ite	eq
 8036fe2:	2301      	moveq	r3, #1
 8036fe4:	2300      	movne	r3, #0
 8036fe6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8036fea:	e7dc      	b.n	8036fa6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8036fec:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8036ff0:	b29b      	uxth	r3, r3
 8036ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8036ff4:	d804      	bhi.n	8037000 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8036ff6:	4639      	mov	r1, r7
 8036ff8:	4620      	mov	r0, r4
 8036ffa:	f7ff fd17 	bl	8036a2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8036ffe:	e7e6      	b.n	8036fce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8037000:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8037004:	2b00      	cmp	r3, #0
 8037006:	d0e3      	beq.n	8036fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8037008:	f640 1302 	movw	r3, #2306	@ 0x902
 803700c:	429d      	cmp	r5, r3
 803700e:	d1df      	bne.n	8036fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8037010:	4601      	mov	r1, r0
 8037012:	4620      	mov	r0, r4
 8037014:	f7ff fcdc 	bl	80369d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8037018:	e7d9      	b.n	8036fce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0803701a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 803701a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803701e:	461e      	mov	r6, r3
 8037020:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8037022:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8037026:	4604      	mov	r4, r0
 8037028:	4617      	mov	r7, r2
 803702a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 803702e:	f7f5 feaf 	bl	802cd90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8037032:	4605      	mov	r5, r0
 8037034:	b918      	cbnz	r0, 803703e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8037036:	6030      	str	r0, [r6, #0]
 8037038:	4628      	mov	r0, r5
 803703a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803703e:	683b      	ldr	r3, [r7, #0]
 8037040:	4601      	mov	r1, r0
 8037042:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8037046:	4638      	mov	r0, r7
 8037048:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 803704c:	47c8      	blx	r9
 803704e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8037052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8037056:	4602      	mov	r2, r0
 8037058:	6030      	str	r0, [r6, #0]
 803705a:	d213      	bcs.n	8037084 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 803705c:	4643      	mov	r3, r8
 803705e:	4639      	mov	r1, r7
 8037060:	4620      	mov	r0, r4
 8037062:	f7ff fdef 	bl	8036c44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8037066:	6030      	str	r0, [r6, #0]
 8037068:	6833      	ldr	r3, [r6, #0]
 803706a:	b143      	cbz	r3, 803707e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 803706c:	7b5a      	ldrb	r2, [r3, #13]
 803706e:	7a9b      	ldrb	r3, [r3, #10]
 8037070:	0052      	lsls	r2, r2, #1
 8037072:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8037076:	4313      	orrs	r3, r2
 8037078:	bf0c      	ite	eq
 803707a:	2301      	moveq	r3, #1
 803707c:	2300      	movne	r3, #0
 803707e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8037082:	e7d9      	b.n	8037038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8037084:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8037088:	b29b      	uxth	r3, r3
 803708a:	2b7f      	cmp	r3, #127	@ 0x7f
 803708c:	d804      	bhi.n	8037098 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 803708e:	4639      	mov	r1, r7
 8037090:	4620      	mov	r0, r4
 8037092:	f7ff fccb 	bl	8036a2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8037096:	e7e6      	b.n	8037066 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8037098:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 803709c:	2b00      	cmp	r3, #0
 803709e:	d0e3      	beq.n	8037068 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80370a0:	f640 1302 	movw	r3, #2306	@ 0x902
 80370a4:	429d      	cmp	r5, r3
 80370a6:	d1df      	bne.n	8037068 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80370a8:	4601      	mov	r1, r0
 80370aa:	4620      	mov	r0, r4
 80370ac:	f7ff fc90 	bl	80369d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80370b0:	e7d9      	b.n	8037066 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080370b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80370b2:	b510      	push	{r4, lr}
 80370b4:	4604      	mov	r4, r0
 80370b6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 80370ba:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80370bc:	b1f1      	cbz	r1, 80370fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 80370be:	2b0a      	cmp	r3, #10
 80370c0:	d02f      	beq.n	8037122 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 80370c2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80370c4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80370c8:	3901      	subs	r1, #1
 80370ca:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 80370cc:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80370d0:	1c51      	adds	r1, r2, #1
 80370d2:	b289      	uxth	r1, r1
 80370d4:	2901      	cmp	r1, #1
 80370d6:	bf84      	itt	hi
 80370d8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80370dc:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80370de:	f103 0201 	add.w	r2, r3, #1
 80370e2:	8722      	strh	r2, [r4, #56]	@ 0x38
 80370e4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80370e6:	bf98      	it	ls
 80370e8:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80370ea:	4413      	add	r3, r2
 80370ec:	b29b      	uxth	r3, r3
 80370ee:	2b09      	cmp	r3, #9
 80370f0:	bf88      	it	hi
 80370f2:	3b0a      	subhi	r3, #10
 80370f4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80370f8:	8458      	strh	r0, [r3, #34]	@ 0x22
 80370fa:	e7dc      	b.n	80370b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80370fc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80370fe:	2b0a      	cmp	r3, #10
 8037100:	d00f      	beq.n	8037122 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8037102:	4620      	mov	r0, r4
 8037104:	f7ff fc12 	bl	803692c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8037108:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 803710a:	1c5a      	adds	r2, r3, #1
 803710c:	8722      	strh	r2, [r4, #56]	@ 0x38
 803710e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8037110:	4413      	add	r3, r2
 8037112:	b29b      	uxth	r3, r3
 8037114:	2b09      	cmp	r3, #9
 8037116:	bf88      	it	hi
 8037118:	3b0a      	subhi	r3, #10
 803711a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 803711e:	8458      	strh	r0, [r3, #34]	@ 0x22
 8037120:	e7ec      	b.n	80370fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8037122:	bd10      	pop	{r4, pc}

08037124 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8037124:	b538      	push	{r3, r4, r5, lr}
 8037126:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8037128:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 803712c:	4604      	mov	r4, r0
 803712e:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8037130:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8037132:	3a01      	subs	r2, #1
 8037134:	8702      	strh	r2, [r0, #56]	@ 0x38
 8037136:	1c5a      	adds	r2, r3, #1
 8037138:	b292      	uxth	r2, r2
 803713a:	2a09      	cmp	r2, #9
 803713c:	bf86      	itte	hi
 803713e:	3b09      	subhi	r3, #9
 8037140:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8037142:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8037144:	f7ff ffb5 	bl	80370b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8037148:	8c23      	ldrh	r3, [r4, #32]
 803714a:	2b01      	cmp	r3, #1
 803714c:	bf9c      	itt	ls
 803714e:	3301      	addls	r3, #1
 8037150:	8423      	strhls	r3, [r4, #32]
 8037152:	8be3      	ldrh	r3, [r4, #30]
 8037154:	b90b      	cbnz	r3, 803715a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8037156:	2302      	movs	r3, #2
 8037158:	83e3      	strh	r3, [r4, #30]
 803715a:	8be3      	ldrh	r3, [r4, #30]
 803715c:	3b01      	subs	r3, #1
 803715e:	b29b      	uxth	r3, r3
 8037160:	83e3      	strh	r3, [r4, #30]
 8037162:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8037166:	4628      	mov	r0, r5
 8037168:	8365      	strh	r5, [r4, #26]
 803716a:	bd38      	pop	{r3, r4, r5, pc}

0803716c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 803716c:	428a      	cmp	r2, r1
 803716e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037172:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8037174:	d931      	bls.n	80371da <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 8037176:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8037178:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 803717c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8037180:	19ee      	adds	r6, r5, r7
 8037182:	1a54      	subs	r4, r2, r1
 8037184:	3e01      	subs	r6, #1
 8037186:	fa1f fe84 	uxth.w	lr, r4
 803718a:	b2b4      	uxth	r4, r6
 803718c:	eba4 090e 	sub.w	r9, r4, lr
 8037190:	fa1f f989 	uxth.w	r9, r9
 8037194:	2c09      	cmp	r4, #9
 8037196:	4626      	mov	r6, r4
 8037198:	bf88      	it	hi
 803719a:	f1a4 060a 	subhi.w	r6, r4, #10
 803719e:	f1bc 0f00 	cmp.w	ip, #0
 80371a2:	bf08      	it	eq
 80371a4:	f04f 0c02 	moveq.w	ip, #2
 80371a8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80371ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 80371b0:	fa1f fc8c 	uxth.w	ip, ip
 80371b4:	3c01      	subs	r4, #1
 80371b6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 80371ba:	b2a4      	uxth	r4, r4
 80371bc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80371c0:	454c      	cmp	r4, r9
 80371c2:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 80371c6:	d1e5      	bne.n	8037194 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80371c8:	eba5 050e 	sub.w	r5, r5, lr
 80371cc:	eb0e 0408 	add.w	r4, lr, r8
 80371d0:	8705      	strh	r5, [r0, #56]	@ 0x38
 80371d2:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80371d6:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80371da:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80371dc:	1a64      	subs	r4, r4, r1
 80371de:	4439      	add	r1, r7
 80371e0:	b289      	uxth	r1, r1
 80371e2:	2909      	cmp	r1, #9
 80371e4:	bf88      	it	hi
 80371e6:	390a      	subhi	r1, #10
 80371e8:	8704      	strh	r4, [r0, #56]	@ 0x38
 80371ea:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80371ec:	250a      	movs	r5, #10
 80371ee:	b18a      	cbz	r2, 8037214 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 80371f0:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80371f2:	3a01      	subs	r2, #1
 80371f4:	b292      	uxth	r2, r2
 80371f6:	3101      	adds	r1, #1
 80371f8:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80371fc:	8701      	strh	r1, [r0, #56]	@ 0x38
 80371fe:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8037200:	b901      	cbnz	r1, 8037204 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8037202:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8037204:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8037206:	3901      	subs	r1, #1
 8037208:	b289      	uxth	r1, r1
 803720a:	86c1      	strh	r1, [r0, #54]	@ 0x36
 803720c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8037210:	844c      	strh	r4, [r1, #34]	@ 0x22
 8037212:	e7ec      	b.n	80371ee <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8037214:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8037218:	f7ff bf4b 	b.w	80370b2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0803721c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 803721c:	b570      	push	{r4, r5, r6, lr}
 803721e:	2500      	movs	r5, #0
 8037220:	4295      	cmp	r5, r2
 8037222:	d011      	beq.n	8037248 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8037224:	8bc4      	ldrh	r4, [r0, #30]
 8037226:	f831 6b02 	ldrh.w	r6, [r1], #2
 803722a:	4414      	add	r4, r2
 803722c:	3c01      	subs	r4, #1
 803722e:	1b64      	subs	r4, r4, r5
 8037230:	b2a4      	uxth	r4, r4
 8037232:	2c01      	cmp	r4, #1
 8037234:	bf88      	it	hi
 8037236:	3c02      	subhi	r4, #2
 8037238:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 803723c:	8b64      	ldrh	r4, [r4, #26]
 803723e:	42b4      	cmp	r4, r6
 8037240:	d117      	bne.n	8037272 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8037242:	3501      	adds	r5, #1
 8037244:	b2ad      	uxth	r5, r5
 8037246:	e7eb      	b.n	8037220 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8037248:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 803724c:	2400      	movs	r4, #0
 803724e:	4413      	add	r3, r2
 8037250:	b2a2      	uxth	r2, r4
 8037252:	429a      	cmp	r2, r3
 8037254:	da0f      	bge.n	8037276 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8037256:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8037258:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 803725c:	4432      	add	r2, r6
 803725e:	b292      	uxth	r2, r2
 8037260:	2a09      	cmp	r2, #9
 8037262:	bf88      	it	hi
 8037264:	3a0a      	subhi	r2, #10
 8037266:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 803726a:	3401      	adds	r4, #1
 803726c:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 803726e:	42aa      	cmp	r2, r5
 8037270:	d0ee      	beq.n	8037250 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8037272:	2000      	movs	r0, #0
 8037274:	bd70      	pop	{r4, r5, r6, pc}
 8037276:	2001      	movs	r0, #1
 8037278:	e7fc      	b.n	8037274 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0803727a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 803727a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803727e:	4605      	mov	r5, r0
 8037280:	4616      	mov	r6, r2
 8037282:	1c8c      	adds	r4, r1, #2
 8037284:	8809      	ldrh	r1, [r1, #0]
 8037286:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 803728a:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 803728e:	42b3      	cmp	r3, r6
 8037290:	d124      	bne.n	80372dc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8037292:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8037296:	f3c1 1803 	ubfx	r8, r1, #4, #4
 803729a:	f001 070f 	and.w	r7, r1, #15
 803729e:	f8cd 8000 	str.w	r8, [sp]
 80372a2:	464b      	mov	r3, r9
 80372a4:	4652      	mov	r2, sl
 80372a6:	4621      	mov	r1, r4
 80372a8:	4628      	mov	r0, r5
 80372aa:	f7ff ffb7 	bl	803721c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80372ae:	4683      	mov	fp, r0
 80372b0:	b168      	cbz	r0, 80372ce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80372b2:	eb0a 0109 	add.w	r1, sl, r9
 80372b6:	4441      	add	r1, r8
 80372b8:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80372bc:	463a      	mov	r2, r7
 80372be:	4649      	mov	r1, r9
 80372c0:	4628      	mov	r0, r5
 80372c2:	f7ff ff53 	bl	803716c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80372c6:	4658      	mov	r0, fp
 80372c8:	b003      	add	sp, #12
 80372ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80372ce:	eb07 010a 	add.w	r1, r7, sl
 80372d2:	4449      	add	r1, r9
 80372d4:	4441      	add	r1, r8
 80372d6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80372da:	e7d2      	b.n	8037282 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80372dc:	f04f 0b00 	mov.w	fp, #0
 80372e0:	e7f1      	b.n	80372c6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080372e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80372e2:	b570      	push	{r4, r5, r6, lr}
 80372e4:	8810      	ldrh	r0, [r2, #0]
 80372e6:	4298      	cmp	r0, r3
 80372e8:	d817      	bhi.n	803731a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80372ea:	1e48      	subs	r0, r1, #1
 80372ec:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80372f0:	4298      	cmp	r0, r3
 80372f2:	d312      	bcc.n	803731a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80372f4:	2400      	movs	r4, #0
 80372f6:	428c      	cmp	r4, r1
 80372f8:	d20f      	bcs.n	803731a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80372fa:	1860      	adds	r0, r4, r1
 80372fc:	1040      	asrs	r0, r0, #1
 80372fe:	0085      	lsls	r5, r0, #2
 8037300:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8037304:	42b3      	cmp	r3, r6
 8037306:	d902      	bls.n	803730e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8037308:	3001      	adds	r0, #1
 803730a:	b284      	uxth	r4, r0
 803730c:	e7f3      	b.n	80372f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 803730e:	d201      	bcs.n	8037314 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8037310:	b281      	uxth	r1, r0
 8037312:	e7f0      	b.n	80372f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8037314:	442a      	add	r2, r5
 8037316:	8850      	ldrh	r0, [r2, #2]
 8037318:	bd70      	pop	{r4, r5, r6, pc}
 803731a:	2000      	movs	r0, #0
 803731c:	e7fc      	b.n	8037318 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0803731e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 803731e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8037322:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8037324:	886f      	ldrh	r7, [r5, #2]
 8037326:	4604      	mov	r4, r0
 8037328:	087f      	lsrs	r7, r7, #1
 803732a:	260b      	movs	r6, #11
 803732c:	3e01      	subs	r6, #1
 803732e:	d013      	beq.n	8037358 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8037330:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8037332:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8037336:	462a      	mov	r2, r5
 8037338:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 803733c:	4639      	mov	r1, r7
 803733e:	4643      	mov	r3, r8
 8037340:	4620      	mov	r0, r4
 8037342:	f7ff ffce 	bl	80372e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8037346:	b138      	cbz	r0, 8037358 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8037348:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 803734c:	4642      	mov	r2, r8
 803734e:	4620      	mov	r0, r4
 8037350:	f7ff ff93 	bl	803727a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8037354:	2800      	cmp	r0, #0
 8037356:	d1e9      	bne.n	803732c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8037358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0803735c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 803735c:	b570      	push	{r4, r5, r6, lr}
 803735e:	694a      	ldr	r2, [r1, #20]
 8037360:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8037362:	684b      	ldr	r3, [r1, #4]
 8037364:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8037366:	1b54      	subs	r4, r2, r5
 8037368:	f000 8106 	beq.w	8037578 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 803736c:	1b9b      	subs	r3, r3, r6
 803736e:	d003      	beq.n	8037378 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8037370:	4363      	muls	r3, r4
 8037372:	2210      	movs	r2, #16
 8037374:	fb93 f3f2 	sdiv	r3, r3, r2
 8037378:	680c      	ldr	r4, [r1, #0]
 803737a:	698a      	ldr	r2, [r1, #24]
 803737c:	1b65      	subs	r5, r4, r5
 803737e:	f000 80fd 	beq.w	803757c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8037382:	1b92      	subs	r2, r2, r6
 8037384:	d003      	beq.n	803738e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8037386:	436a      	muls	r2, r5
 8037388:	2410      	movs	r4, #16
 803738a:	fb92 f2f4 	sdiv	r2, r2, r4
 803738e:	1a9b      	subs	r3, r3, r2
 8037390:	ee07 3a90 	vmov	s15, r3
 8037394:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 80375b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8037398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 803739c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80373a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80373a4:	460a      	mov	r2, r1
 80373a6:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80373aa:	4603      	mov	r3, r0
 80373ac:	f100 040c 	add.w	r4, r0, #12
 80373b0:	eeb1 6a43 	vneg.f32	s12, s6
 80373b4:	edd2 7a02 	vldr	s15, [r2, #8]
 80373b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80373bc:	3214      	adds	r2, #20
 80373be:	ece3 6a01 	vstmia	r3!, {s13}
 80373c2:	ed52 7a02 	vldr	s15, [r2, #-8]
 80373c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80373ca:	429c      	cmp	r4, r3
 80373cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80373d0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80373d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80373d8:	edc3 7a05 	vstr	s15, [r3, #20]
 80373dc:	d1ea      	bne.n	80373b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80373de:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80373e0:	698b      	ldr	r3, [r1, #24]
 80373e2:	edd0 4a02 	vldr	s9, [r0, #8]
 80373e6:	edd0 3a00 	vldr	s7, [r0]
 80373ea:	edd0 6a01 	vldr	s13, [r0, #4]
 80373ee:	ed90 5a05 	vldr	s10, [r0, #20]
 80373f2:	ed90 2a03 	vldr	s4, [r0, #12]
 80373f6:	edd0 5a04 	vldr	s11, [r0, #16]
 80373fa:	ed90 1a07 	vldr	s2, [r0, #28]
 80373fe:	edd0 2a06 	vldr	s5, [r0, #24]
 8037402:	1a9b      	subs	r3, r3, r2
 8037404:	ee07 3a90 	vmov	s15, r3
 8037408:	684b      	ldr	r3, [r1, #4]
 803740a:	1a9b      	subs	r3, r3, r2
 803740c:	ee07 3a10 	vmov	s14, r3
 8037410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8037414:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8037418:	ee67 7a84 	vmul.f32	s15, s15, s8
 803741c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8037420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8037424:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8037428:	ee27 7a04 	vmul.f32	s14, s14, s8
 803742c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8037430:	eee6 7a87 	vfma.f32	s15, s13, s14
 8037434:	ee32 5a45 	vsub.f32	s10, s4, s10
 8037438:	ee67 7a83 	vmul.f32	s15, s15, s6
 803743c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8037440:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8037442:	694a      	ldr	r2, [r1, #20]
 8037444:	1b13      	subs	r3, r2, r4
 8037446:	ee07 3a10 	vmov	s14, r3
 803744a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 803744e:	680b      	ldr	r3, [r1, #0]
 8037450:	ee27 7a04 	vmul.f32	s14, s14, s8
 8037454:	1b1b      	subs	r3, r3, r4
 8037456:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 803745a:	ee07 3a10 	vmov	s14, r3
 803745e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8037462:	ee27 7a04 	vmul.f32	s14, s14, s8
 8037466:	eee6 4a87 	vfma.f32	s9, s13, s14
 803746a:	ee64 4a86 	vmul.f32	s9, s9, s12
 803746e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8037472:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8037474:	698b      	ldr	r3, [r1, #24]
 8037476:	1a9b      	subs	r3, r3, r2
 8037478:	ee06 3a90 	vmov	s13, r3
 803747c:	684b      	ldr	r3, [r1, #4]
 803747e:	1a9b      	subs	r3, r3, r2
 8037480:	ee07 3a10 	vmov	s14, r3
 8037484:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8037488:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 803748c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8037490:	ee27 7a04 	vmul.f32	s14, s14, s8
 8037494:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8037498:	eee5 6a87 	vfma.f32	s13, s11, s14
 803749c:	ee66 6a83 	vmul.f32	s13, s13, s6
 80374a0:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 80374a4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80374a6:	694a      	ldr	r2, [r1, #20]
 80374a8:	1b13      	subs	r3, r2, r4
 80374aa:	ee07 3a10 	vmov	s14, r3
 80374ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80374b2:	680b      	ldr	r3, [r1, #0]
 80374b4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80374b8:	1b1b      	subs	r3, r3, r4
 80374ba:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80374be:	ee07 3a10 	vmov	s14, r3
 80374c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80374c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80374ca:	eea5 5a87 	vfma.f32	s10, s11, s14
 80374ce:	edd0 5a08 	vldr	s11, [r0, #32]
 80374d2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80374d6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80374da:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80374de:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80374e0:	698b      	ldr	r3, [r1, #24]
 80374e2:	1a9b      	subs	r3, r3, r2
 80374e4:	ee07 3a10 	vmov	s14, r3
 80374e8:	684b      	ldr	r3, [r1, #4]
 80374ea:	1a9b      	subs	r3, r3, r2
 80374ec:	ee01 3a90 	vmov	s3, r3
 80374f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80374f4:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80374f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80374fc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8037500:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8037504:	ee61 1a84 	vmul.f32	s3, s3, s8
 8037508:	eea1 7a21 	vfma.f32	s14, s2, s3
 803750c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8037510:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8037514:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8037516:	694a      	ldr	r2, [r1, #20]
 8037518:	1b13      	subs	r3, r2, r4
 803751a:	ee03 3a10 	vmov	s6, r3
 803751e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8037522:	680b      	ldr	r3, [r1, #0]
 8037524:	ee23 3a04 	vmul.f32	s6, s6, s8
 8037528:	1b1b      	subs	r3, r3, r4
 803752a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 803752e:	ee03 3a10 	vmov	s6, r3
 8037532:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8037536:	ee23 4a04 	vmul.f32	s8, s6, s8
 803753a:	eee1 5a04 	vfma.f32	s11, s2, s8
 803753e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8037542:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8037546:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 803754a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 803754e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8037552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8037556:	dd13      	ble.n	8037580 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8037558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 803755c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8037560:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8037562:	eee3 7a87 	vfma.f32	s15, s7, s14
 8037566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 803756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 803756e:	dd15      	ble.n	803759c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8037570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8037574:	6403      	str	r3, [r0, #64]	@ 0x40
 8037576:	bd70      	pop	{r4, r5, r6, pc}
 8037578:	4623      	mov	r3, r4
 803757a:	e6fd      	b.n	8037378 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 803757c:	462a      	mov	r2, r5
 803757e:	e706      	b.n	803738e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8037580:	d502      	bpl.n	8037588 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8037582:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8037586:	e7e9      	b.n	803755c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8037588:	ee22 2a64 	vnmul.f32	s4, s4, s9
 803758c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8037590:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8037594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8037598:	dade      	bge.n	8037558 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 803759a:	e7f2      	b.n	8037582 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 803759c:	d502      	bpl.n	80375a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 803759e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80375a2:	e7e7      	b.n	8037574 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80375a4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80375a8:	eee3 4a86 	vfma.f32	s9, s7, s12
 80375ac:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80375b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80375b4:	dadc      	bge.n	8037570 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80375b6:	e7f2      	b.n	803759e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80375b8:	3d800000 	.word	0x3d800000

080375bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80375bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80375c0:	2714      	movs	r7, #20
 80375c2:	435f      	muls	r7, r3
 80375c4:	eb02 0c07 	add.w	ip, r2, r7
 80375c8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80375cc:	f115 0e0f 	adds.w	lr, r5, #15
 80375d0:	f100 80a2 	bmi.w	8037718 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80375d4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80375d8:	9c08      	ldr	r4, [sp, #32]
 80375da:	f8c0 e014 	str.w	lr, [r0, #20]
 80375de:	2614      	movs	r6, #20
 80375e0:	4366      	muls	r6, r4
 80375e2:	eb02 0806 	add.w	r8, r2, r6
 80375e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80375ea:	f115 040f 	adds.w	r4, r5, #15
 80375ee:	f100 809f 	bmi.w	8037730 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80375f2:	1124      	asrs	r4, r4, #4
 80375f4:	eba4 040e 	sub.w	r4, r4, lr
 80375f8:	6184      	str	r4, [r0, #24]
 80375fa:	2c00      	cmp	r4, #0
 80375fc:	f000 808a 	beq.w	8037714 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8037600:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8037604:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8037608:	5995      	ldr	r5, [r2, r6]
 803760a:	eba4 0809 	sub.w	r8, r4, r9
 803760e:	59d4      	ldr	r4, [r2, r7]
 8037610:	eba5 0a04 	sub.w	sl, r5, r4
 8037614:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8037618:	fb0e fe05 	mul.w	lr, lr, r5
 803761c:	fb0a ee19 	mls	lr, sl, r9, lr
 8037620:	fb08 e404 	mla	r4, r8, r4, lr
 8037624:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8037628:	3c01      	subs	r4, #1
 803762a:	19a4      	adds	r4, r4, r6
 803762c:	f100 808c 	bmi.w	8037748 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8037630:	fb94 fef6 	sdiv	lr, r4, r6
 8037634:	f8c0 e000 	str.w	lr, [r0]
 8037638:	fb06 441e 	mls	r4, r6, lr, r4
 803763c:	6104      	str	r4, [r0, #16]
 803763e:	2d00      	cmp	r5, #0
 8037640:	f2c0 8095 	blt.w	803776e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8037644:	fb95 f4f6 	sdiv	r4, r5, r6
 8037648:	6044      	str	r4, [r0, #4]
 803764a:	fb06 5514 	mls	r5, r6, r4, r5
 803764e:	6085      	str	r5, [r0, #8]
 8037650:	60c6      	str	r6, [r0, #12]
 8037652:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8037656:	6945      	ldr	r5, [r0, #20]
 8037658:	59d2      	ldr	r2, [r2, r7]
 803765a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8037790 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 803765e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8037662:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8037666:	ee07 4a10 	vmov	s14, r4
 803766a:	6804      	ldr	r4, [r0, #0]
 803766c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8037670:	ee07 2a90 	vmov	s15, r2
 8037674:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8037678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 803767c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8037680:	ee27 7a26 	vmul.f32	s14, s14, s13
 8037684:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8037688:	edd3 6a00 	vldr	s13, [r3]
 803768c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8037690:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8037694:	eee6 6a27 	vfma.f32	s13, s12, s15
 8037698:	edc0 6a07 	vstr	s13, [r0, #28]
 803769c:	edd0 6a01 	vldr	s13, [r0, #4]
 80376a0:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80376a4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 80376a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80376ac:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80376b0:	ed80 6a08 	vstr	s12, [r0, #32]
 80376b4:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80376b6:	6242      	str	r2, [r0, #36]	@ 0x24
 80376b8:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 80376bc:	ed93 6a03 	vldr	s12, [r3, #12]
 80376c0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80376c4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80376c8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80376cc:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80376d0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80376d4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80376d8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80376dc:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80376e0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80376e2:	6302      	str	r2, [r0, #48]	@ 0x30
 80376e4:	ed93 6a06 	vldr	s12, [r3, #24]
 80376e8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80376ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80376f0:	eeb0 7a46 	vmov.f32	s14, s12
 80376f4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80376f8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80376fc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8037700:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8037704:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8037708:	eee6 7a87 	vfma.f32	s15, s13, s14
 803770c:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8037710:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8037712:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8037714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8037718:	f1c5 0501 	rsb	r5, r5, #1
 803771c:	f015 050f 	ands.w	r5, r5, #15
 8037720:	bf18      	it	ne
 8037722:	2501      	movne	r5, #1
 8037724:	2410      	movs	r4, #16
 8037726:	fb9e fef4 	sdiv	lr, lr, r4
 803772a:	ebae 0e05 	sub.w	lr, lr, r5
 803772e:	e753      	b.n	80375d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8037730:	f1c5 0501 	rsb	r5, r5, #1
 8037734:	f015 050f 	ands.w	r5, r5, #15
 8037738:	bf18      	it	ne
 803773a:	2501      	movne	r5, #1
 803773c:	f04f 0910 	mov.w	r9, #16
 8037740:	fb94 f4f9 	sdiv	r4, r4, r9
 8037744:	1b64      	subs	r4, r4, r5
 8037746:	e755      	b.n	80375f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8037748:	4264      	negs	r4, r4
 803774a:	fb94 fef6 	sdiv	lr, r4, r6
 803774e:	f1ce 0800 	rsb	r8, lr, #0
 8037752:	fb06 441e 	mls	r4, r6, lr, r4
 8037756:	f8c0 8000 	str.w	r8, [r0]
 803775a:	6104      	str	r4, [r0, #16]
 803775c:	2c00      	cmp	r4, #0
 803775e:	f43f af6e 	beq.w	803763e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8037762:	ea6f 0e0e 	mvn.w	lr, lr
 8037766:	f8c0 e000 	str.w	lr, [r0]
 803776a:	1b34      	subs	r4, r6, r4
 803776c:	e766      	b.n	803763c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 803776e:	426d      	negs	r5, r5
 8037770:	fb95 f4f6 	sdiv	r4, r5, r6
 8037774:	f1c4 0e00 	rsb	lr, r4, #0
 8037778:	fb06 5514 	mls	r5, r6, r4, r5
 803777c:	f8c0 e004 	str.w	lr, [r0, #4]
 8037780:	6085      	str	r5, [r0, #8]
 8037782:	2d00      	cmp	r5, #0
 8037784:	f43f af64 	beq.w	8037650 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8037788:	43e4      	mvns	r4, r4
 803778a:	6044      	str	r4, [r0, #4]
 803778c:	1b75      	subs	r5, r6, r5
 803778e:	e75e      	b.n	803764e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8037790:	3d800000 	.word	0x3d800000

08037794 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8037794:	4602      	mov	r2, r0
 8037796:	b148      	cbz	r0, 80377ac <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8037798:	2300      	movs	r3, #0
 803779a:	b298      	uxth	r0, r3
 803779c:	3301      	adds	r3, #1
 803779e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 80377a2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 80377a6:	2900      	cmp	r1, #0
 80377a8:	d1f7      	bne.n	803779a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 80377aa:	4770      	bx	lr
 80377ac:	4770      	bx	lr

080377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 80377ae:	b530      	push	{r4, r5, lr}
 80377b0:	4604      	mov	r4, r0
 80377b2:	b159      	cbz	r1, 80377cc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 80377b4:	b148      	cbz	r0, 80377ca <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80377b6:	2300      	movs	r3, #0
 80377b8:	b298      	uxth	r0, r3
 80377ba:	4282      	cmp	r2, r0
 80377bc:	d905      	bls.n	80377ca <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 80377be:	5ccd      	ldrb	r5, [r1, r3]
 80377c0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 80377c4:	3301      	adds	r3, #1
 80377c6:	2d00      	cmp	r5, #0
 80377c8:	d1f6      	bne.n	80377b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 80377ca:	bd30      	pop	{r4, r5, pc}
 80377cc:	4608      	mov	r0, r1
 80377ce:	e7fc      	b.n	80377ca <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

080377d0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 80377d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80377d2:	b08b      	sub	sp, #44	@ 0x2c
 80377d4:	468c      	mov	ip, r1
 80377d6:	2100      	movs	r1, #0
 80377d8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80377dc:	4604      	mov	r4, r0
 80377de:	261f      	movs	r6, #31
 80377e0:	af01      	add	r7, sp, #4
 80377e2:	fb94 fef3 	sdiv	lr, r4, r3
 80377e6:	fb03 441e 	mls	r4, r3, lr, r4
 80377ea:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80377ee:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80377f2:	b2ec      	uxtb	r4, r5
 80377f4:	2d09      	cmp	r5, #9
 80377f6:	bfd4      	ite	le
 80377f8:	3430      	addle	r4, #48	@ 0x30
 80377fa:	3457      	addgt	r4, #87	@ 0x57
 80377fc:	b2e4      	uxtb	r4, r4
 80377fe:	55bc      	strb	r4, [r7, r6]
 8037800:	4674      	mov	r4, lr
 8037802:	1e71      	subs	r1, r6, #1
 8037804:	b974      	cbnz	r4, 8037824 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 8037806:	2800      	cmp	r0, #0
 8037808:	da05      	bge.n	8037816 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 803780a:	ab0a      	add	r3, sp, #40	@ 0x28
 803780c:	4419      	add	r1, r3
 803780e:	232d      	movs	r3, #45	@ 0x2d
 8037810:	f801 3c24 	strb.w	r3, [r1, #-36]
 8037814:	1eb1      	subs	r1, r6, #2
 8037816:	3101      	adds	r1, #1
 8037818:	4439      	add	r1, r7
 803781a:	4660      	mov	r0, ip
 803781c:	f7ff ffc7 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8037820:	b00b      	add	sp, #44	@ 0x2c
 8037822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8037824:	460e      	mov	r6, r1
 8037826:	e7dc      	b.n	80377e2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

08037828 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8037828:	b5f0      	push	{r4, r5, r6, r7, lr}
 803782a:	b08b      	sub	sp, #44	@ 0x2c
 803782c:	468c      	mov	ip, r1
 803782e:	2100      	movs	r1, #0
 8037830:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8037834:	ae01      	add	r6, sp, #4
 8037836:	211f      	movs	r1, #31
 8037838:	fbb0 f7f3 	udiv	r7, r0, r3
 803783c:	fb03 0517 	mls	r5, r3, r7, r0
 8037840:	b2ec      	uxtb	r4, r5
 8037842:	2d09      	cmp	r5, #9
 8037844:	bfd4      	ite	le
 8037846:	3430      	addle	r4, #48	@ 0x30
 8037848:	3457      	addgt	r4, #87	@ 0x57
 803784a:	b2e4      	uxtb	r4, r4
 803784c:	558c      	strb	r4, [r1, r6]
 803784e:	4638      	mov	r0, r7
 8037850:	1e4c      	subs	r4, r1, #1
 8037852:	b92f      	cbnz	r7, 8037860 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8037854:	4431      	add	r1, r6
 8037856:	4660      	mov	r0, ip
 8037858:	f7ff ffa9 	bl	80377ae <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 803785c:	b00b      	add	sp, #44	@ 0x2c
 803785e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8037860:	4621      	mov	r1, r4
 8037862:	e7e9      	b.n	8037838 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08037864 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8037864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037868:	4691      	mov	r9, r2
 803786a:	b085      	sub	sp, #20
 803786c:	6802      	ldr	r2, [r0, #0]
 803786e:	9201      	str	r2, [sp, #4]
 8037870:	4688      	mov	r8, r1
 8037872:	4683      	mov	fp, r0
 8037874:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8037878:	9103      	str	r1, [sp, #12]
 803787a:	4610      	mov	r0, r2
 803787c:	461c      	mov	r4, r3
 803787e:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8037882:	9302      	str	r3, [sp, #8]
 8037884:	f7ff ff86 	bl	8037794 <_ZN8touchgfx7Unicode6strlenEPKt>
 8037888:	f1b8 0f00 	cmp.w	r8, #0
 803788c:	bf0c      	ite	eq
 803788e:	4684      	moveq	ip, r0
 8037890:	f100 0c01 	addne.w	ip, r0, #1
 8037894:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8037898:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 803789c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 803789e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80378a0:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 80378a4:	9903      	ldr	r1, [sp, #12]
 80378a6:	fa1f fc8c 	uxth.w	ip, ip
 80378aa:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80378ae:	d041      	beq.n	8037934 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80378b0:	d834      	bhi.n	803791c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 80378b2:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 80378b6:	d059      	beq.n	803796c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 80378b8:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 80378bc:	d03a      	beq.n	8037934 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 80378be:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 80378c2:	d034      	beq.n	803792e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80378c4:	2400      	movs	r4, #0
 80378c6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 80378ca:	3a01      	subs	r2, #1
 80378cc:	b169      	cbz	r1, 80378ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80378ce:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80378d0:	458c      	cmp	ip, r1
 80378d2:	da09      	bge.n	80378e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80378d4:	eba1 010c 	sub.w	r1, r1, ip
 80378d8:	b289      	uxth	r1, r1
 80378da:	b933      	cbnz	r3, 80378ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80378dc:	2e00      	cmp	r6, #0
 80378de:	d051      	beq.n	8037984 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80378e0:	2800      	cmp	r0, #0
 80378e2:	d04f      	beq.n	8037984 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 80378e4:	440c      	add	r4, r1
 80378e6:	b2a4      	uxth	r4, r4
 80378e8:	2100      	movs	r1, #0
 80378ea:	682b      	ldr	r3, [r5, #0]
 80378ec:	4293      	cmp	r3, r2
 80378ee:	da07      	bge.n	8037900 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80378f0:	f1b8 0f00 	cmp.w	r8, #0
 80378f4:	d004      	beq.n	8037900 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 80378f6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 80378fa:	682b      	ldr	r3, [r5, #0]
 80378fc:	3301      	adds	r3, #1
 80378fe:	602b      	str	r3, [r5, #0]
 8037900:	2730      	movs	r7, #48	@ 0x30
 8037902:	2c00      	cmp	r4, #0
 8037904:	d04e      	beq.n	80379a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8037906:	682e      	ldr	r6, [r5, #0]
 8037908:	3c01      	subs	r4, #1
 803790a:	42b2      	cmp	r2, r6
 803790c:	b2a4      	uxth	r4, r4
 803790e:	dd49      	ble.n	80379a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8037910:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8037914:	682b      	ldr	r3, [r5, #0]
 8037916:	3301      	adds	r3, #1
 8037918:	602b      	str	r3, [r5, #0]
 803791a:	e7f2      	b.n	8037902 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 803791c:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8037920:	d01d      	beq.n	803795e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8037922:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 8037926:	d002      	beq.n	803792e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8037928:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 803792c:	e7c9      	b.n	80378c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 803792e:	4684      	mov	ip, r0
 8037930:	f04f 0800 	mov.w	r8, #0
 8037934:	2c00      	cmp	r4, #0
 8037936:	d0c6      	beq.n	80378c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8037938:	b947      	cbnz	r7, 803794c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 803793a:	2801      	cmp	r0, #1
 803793c:	d106      	bne.n	803794c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 803793e:	8814      	ldrh	r4, [r2, #0]
 8037940:	2c30      	cmp	r4, #48	@ 0x30
 8037942:	bf02      	ittt	eq
 8037944:	3202      	addeq	r2, #2
 8037946:	f8cb 2000 	streq.w	r2, [fp]
 803794a:	4638      	moveq	r0, r7
 803794c:	45bc      	cmp	ip, r7
 803794e:	da14      	bge.n	803797a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8037950:	b2bf      	uxth	r7, r7
 8037952:	eba7 040c 	sub.w	r4, r7, ip
 8037956:	b2a4      	uxth	r4, r4
 8037958:	46bc      	mov	ip, r7
 803795a:	2600      	movs	r6, #0
 803795c:	e7b3      	b.n	80378c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 803795e:	4684      	mov	ip, r0
 8037960:	b16c      	cbz	r4, 803797e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8037962:	42b8      	cmp	r0, r7
 8037964:	dd00      	ble.n	8037968 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8037966:	b2b8      	uxth	r0, r7
 8037968:	2400      	movs	r4, #0
 803796a:	e003      	b.n	8037974 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 803796c:	f04f 0c01 	mov.w	ip, #1
 8037970:	2400      	movs	r4, #0
 8037972:	4660      	mov	r0, ip
 8037974:	4626      	mov	r6, r4
 8037976:	46a0      	mov	r8, r4
 8037978:	e7a5      	b.n	80378c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 803797a:	2400      	movs	r4, #0
 803797c:	e7ed      	b.n	803795a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 803797e:	4626      	mov	r6, r4
 8037980:	46a0      	mov	r8, r4
 8037982:	e7a0      	b.n	80378c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8037984:	2900      	cmp	r1, #0
 8037986:	d0b0      	beq.n	80378ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8037988:	2720      	movs	r7, #32
 803798a:	682e      	ldr	r6, [r5, #0]
 803798c:	2900      	cmp	r1, #0
 803798e:	d0ac      	beq.n	80378ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8037990:	3901      	subs	r1, #1
 8037992:	4296      	cmp	r6, r2
 8037994:	b289      	uxth	r1, r1
 8037996:	daa7      	bge.n	80378e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8037998:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 803799c:	682b      	ldr	r3, [r5, #0]
 803799e:	3301      	adds	r3, #1
 80379a0:	602b      	str	r3, [r5, #0]
 80379a2:	e7f2      	b.n	803798a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80379a4:	b188      	cbz	r0, 80379ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80379a6:	682b      	ldr	r3, [r5, #0]
 80379a8:	3801      	subs	r0, #1
 80379aa:	429a      	cmp	r2, r3
 80379ac:	b280      	uxth	r0, r0
 80379ae:	dd0c      	ble.n	80379ca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80379b0:	f8db 3000 	ldr.w	r3, [fp]
 80379b4:	1c9c      	adds	r4, r3, #2
 80379b6:	f8cb 4000 	str.w	r4, [fp]
 80379ba:	881c      	ldrh	r4, [r3, #0]
 80379bc:	682b      	ldr	r3, [r5, #0]
 80379be:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80379c2:	682b      	ldr	r3, [r5, #0]
 80379c4:	3301      	adds	r3, #1
 80379c6:	602b      	str	r3, [r5, #0]
 80379c8:	e7ec      	b.n	80379a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80379ca:	2620      	movs	r6, #32
 80379cc:	b151      	cbz	r1, 80379e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80379ce:	6828      	ldr	r0, [r5, #0]
 80379d0:	3901      	subs	r1, #1
 80379d2:	4282      	cmp	r2, r0
 80379d4:	b289      	uxth	r1, r1
 80379d6:	dd05      	ble.n	80379e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80379d8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 80379dc:	682b      	ldr	r3, [r5, #0]
 80379de:	3301      	adds	r3, #1
 80379e0:	602b      	str	r3, [r5, #0]
 80379e2:	e7f3      	b.n	80379cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 80379e4:	b005      	add	sp, #20
 80379e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080379ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 80379ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80379ee:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 80379f2:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 80379f6:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 80379fa:	2400      	movs	r4, #0
 80379fc:	8014      	strh	r4, [r2, #0]
 80379fe:	701c      	strb	r4, [r3, #0]
 8037a00:	f888 4000 	strb.w	r4, [r8]
 8037a04:	f88c 4000 	strb.w	r4, [ip]
 8037a08:	f88e 4000 	strb.w	r4, [lr]
 8037a0c:	703c      	strb	r4, [r7, #0]
 8037a0e:	6804      	ldr	r4, [r0, #0]
 8037a10:	b1a4      	cbz	r4, 8037a3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8037a12:	8824      	ldrh	r4, [r4, #0]
 8037a14:	f04f 0901 	mov.w	r9, #1
 8037a18:	b314      	cbz	r4, 8037a60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8037a1a:	2c2b      	cmp	r4, #43	@ 0x2b
 8037a1c:	d001      	beq.n	8037a22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8037a1e:	2c20      	cmp	r4, #32
 8037a20:	d110      	bne.n	8037a44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8037a22:	8014      	strh	r4, [r2, #0]
 8037a24:	6804      	ldr	r4, [r0, #0]
 8037a26:	b10c      	cbz	r4, 8037a2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8037a28:	3402      	adds	r4, #2
 8037a2a:	6004      	str	r4, [r0, #0]
 8037a2c:	680c      	ldr	r4, [r1, #0]
 8037a2e:	b10c      	cbz	r4, 8037a34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8037a30:	3401      	adds	r4, #1
 8037a32:	600c      	str	r4, [r1, #0]
 8037a34:	6804      	ldr	r4, [r0, #0]
 8037a36:	b17c      	cbz	r4, 8037a58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8037a38:	8824      	ldrh	r4, [r4, #0]
 8037a3a:	e7ed      	b.n	8037a18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8037a3c:	680c      	ldr	r4, [r1, #0]
 8037a3e:	b17c      	cbz	r4, 8037a60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8037a40:	7824      	ldrb	r4, [r4, #0]
 8037a42:	e7e7      	b.n	8037a14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8037a44:	2c2d      	cmp	r4, #45	@ 0x2d
 8037a46:	d102      	bne.n	8037a4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8037a48:	f883 9000 	strb.w	r9, [r3]
 8037a4c:	e7ea      	b.n	8037a24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8037a4e:	2c23      	cmp	r4, #35	@ 0x23
 8037a50:	d107      	bne.n	8037a62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8037a52:	f888 9000 	strb.w	r9, [r8]
 8037a56:	e7e5      	b.n	8037a24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8037a58:	680c      	ldr	r4, [r1, #0]
 8037a5a:	b10c      	cbz	r4, 8037a60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8037a5c:	7824      	ldrb	r4, [r4, #0]
 8037a5e:	e7db      	b.n	8037a18 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8037a60:	2400      	movs	r4, #0
 8037a62:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8037a66:	2b09      	cmp	r3, #9
 8037a68:	d901      	bls.n	8037a6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8037a6a:	2c2a      	cmp	r4, #42	@ 0x2a
 8037a6c:	d122      	bne.n	8037ab4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8037a6e:	2301      	movs	r3, #1
 8037a70:	2c30      	cmp	r4, #48	@ 0x30
 8037a72:	f88e 3000 	strb.w	r3, [lr]
 8037a76:	d10d      	bne.n	8037a94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8037a78:	f88c 3000 	strb.w	r3, [ip]
 8037a7c:	6803      	ldr	r3, [r0, #0]
 8037a7e:	b10b      	cbz	r3, 8037a84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8037a80:	3302      	adds	r3, #2
 8037a82:	6003      	str	r3, [r0, #0]
 8037a84:	680b      	ldr	r3, [r1, #0]
 8037a86:	b10b      	cbz	r3, 8037a8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8037a88:	3301      	adds	r3, #1
 8037a8a:	600b      	str	r3, [r1, #0]
 8037a8c:	6803      	ldr	r3, [r0, #0]
 8037a8e:	2b00      	cmp	r3, #0
 8037a90:	d02f      	beq.n	8037af2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8037a92:	881c      	ldrh	r4, [r3, #0]
 8037a94:	2c2a      	cmp	r4, #42	@ 0x2a
 8037a96:	d135      	bne.n	8037b04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8037a98:	f04f 33ff 	mov.w	r3, #4294967295
 8037a9c:	6033      	str	r3, [r6, #0]
 8037a9e:	6803      	ldr	r3, [r0, #0]
 8037aa0:	b10b      	cbz	r3, 8037aa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8037aa2:	3302      	adds	r3, #2
 8037aa4:	6003      	str	r3, [r0, #0]
 8037aa6:	680b      	ldr	r3, [r1, #0]
 8037aa8:	b10b      	cbz	r3, 8037aae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8037aaa:	3301      	adds	r3, #1
 8037aac:	600b      	str	r3, [r1, #0]
 8037aae:	6803      	ldr	r3, [r0, #0]
 8037ab0:	b31b      	cbz	r3, 8037afa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8037ab2:	881c      	ldrh	r4, [r3, #0]
 8037ab4:	2c2e      	cmp	r4, #46	@ 0x2e
 8037ab6:	d11a      	bne.n	8037aee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8037ab8:	2301      	movs	r3, #1
 8037aba:	703b      	strb	r3, [r7, #0]
 8037abc:	6803      	ldr	r3, [r0, #0]
 8037abe:	b10b      	cbz	r3, 8037ac4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8037ac0:	3302      	adds	r3, #2
 8037ac2:	6003      	str	r3, [r0, #0]
 8037ac4:	680b      	ldr	r3, [r1, #0]
 8037ac6:	b10b      	cbz	r3, 8037acc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8037ac8:	3301      	adds	r3, #1
 8037aca:	600b      	str	r3, [r1, #0]
 8037acc:	6803      	ldr	r3, [r0, #0]
 8037ace:	2b00      	cmp	r3, #0
 8037ad0:	d036      	beq.n	8037b40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8037ad2:	881b      	ldrh	r3, [r3, #0]
 8037ad4:	2b2a      	cmp	r3, #42	@ 0x2a
 8037ad6:	d137      	bne.n	8037b48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8037ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8037adc:	602b      	str	r3, [r5, #0]
 8037ade:	6803      	ldr	r3, [r0, #0]
 8037ae0:	b10b      	cbz	r3, 8037ae6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8037ae2:	3302      	adds	r3, #2
 8037ae4:	6003      	str	r3, [r0, #0]
 8037ae6:	680b      	ldr	r3, [r1, #0]
 8037ae8:	b10b      	cbz	r3, 8037aee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8037aea:	3301      	adds	r3, #1
 8037aec:	600b      	str	r3, [r1, #0]
 8037aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8037af2:	680c      	ldr	r4, [r1, #0]
 8037af4:	b134      	cbz	r4, 8037b04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8037af6:	7824      	ldrb	r4, [r4, #0]
 8037af8:	e7cc      	b.n	8037a94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8037afa:	680b      	ldr	r3, [r1, #0]
 8037afc:	2b00      	cmp	r3, #0
 8037afe:	d0f6      	beq.n	8037aee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8037b00:	781c      	ldrb	r4, [r3, #0]
 8037b02:	e7d7      	b.n	8037ab4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8037b04:	2300      	movs	r3, #0
 8037b06:	6033      	str	r3, [r6, #0]
 8037b08:	220a      	movs	r2, #10
 8037b0a:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8037b0e:	fa1f f38c 	uxth.w	r3, ip
 8037b12:	2b09      	cmp	r3, #9
 8037b14:	d8ce      	bhi.n	8037ab4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8037b16:	6833      	ldr	r3, [r6, #0]
 8037b18:	fb02 c303 	mla	r3, r2, r3, ip
 8037b1c:	6033      	str	r3, [r6, #0]
 8037b1e:	6803      	ldr	r3, [r0, #0]
 8037b20:	b10b      	cbz	r3, 8037b26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8037b22:	3302      	adds	r3, #2
 8037b24:	6003      	str	r3, [r0, #0]
 8037b26:	680b      	ldr	r3, [r1, #0]
 8037b28:	b10b      	cbz	r3, 8037b2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8037b2a:	3301      	adds	r3, #1
 8037b2c:	600b      	str	r3, [r1, #0]
 8037b2e:	6803      	ldr	r3, [r0, #0]
 8037b30:	b10b      	cbz	r3, 8037b36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8037b32:	881c      	ldrh	r4, [r3, #0]
 8037b34:	e7e9      	b.n	8037b0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8037b36:	680c      	ldr	r4, [r1, #0]
 8037b38:	2c00      	cmp	r4, #0
 8037b3a:	d0e6      	beq.n	8037b0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8037b3c:	7824      	ldrb	r4, [r4, #0]
 8037b3e:	e7e4      	b.n	8037b0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8037b40:	680b      	ldr	r3, [r1, #0]
 8037b42:	b10b      	cbz	r3, 8037b48 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8037b44:	781b      	ldrb	r3, [r3, #0]
 8037b46:	e7c5      	b.n	8037ad4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8037b48:	2200      	movs	r2, #0
 8037b4a:	602a      	str	r2, [r5, #0]
 8037b4c:	240a      	movs	r4, #10
 8037b4e:	3b30      	subs	r3, #48	@ 0x30
 8037b50:	b29e      	uxth	r6, r3
 8037b52:	2e09      	cmp	r6, #9
 8037b54:	682a      	ldr	r2, [r5, #0]
 8037b56:	d813      	bhi.n	8037b80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8037b58:	fb04 3302 	mla	r3, r4, r2, r3
 8037b5c:	602b      	str	r3, [r5, #0]
 8037b5e:	6803      	ldr	r3, [r0, #0]
 8037b60:	b10b      	cbz	r3, 8037b66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8037b62:	3302      	adds	r3, #2
 8037b64:	6003      	str	r3, [r0, #0]
 8037b66:	680b      	ldr	r3, [r1, #0]
 8037b68:	b10b      	cbz	r3, 8037b6e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8037b6a:	3301      	adds	r3, #1
 8037b6c:	600b      	str	r3, [r1, #0]
 8037b6e:	6803      	ldr	r3, [r0, #0]
 8037b70:	b10b      	cbz	r3, 8037b76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8037b72:	881b      	ldrh	r3, [r3, #0]
 8037b74:	e7eb      	b.n	8037b4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8037b76:	680b      	ldr	r3, [r1, #0]
 8037b78:	2b00      	cmp	r3, #0
 8037b7a:	d0e8      	beq.n	8037b4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8037b7c:	781b      	ldrb	r3, [r3, #0]
 8037b7e:	e7e6      	b.n	8037b4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8037b80:	2a06      	cmp	r2, #6
 8037b82:	bfa8      	it	ge
 8037b84:	2206      	movge	r2, #6
 8037b86:	602a      	str	r2, [r5, #0]
 8037b88:	e7b1      	b.n	8037aee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08037b8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8037b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8037b8e:	b0a3      	sub	sp, #140	@ 0x8c
 8037b90:	2600      	movs	r6, #0
 8037b92:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8037b96:	4607      	mov	r7, r0
 8037b98:	4688      	mov	r8, r1
 8037b9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8037b9e:	4631      	mov	r1, r6
 8037ba0:	2242      	movs	r2, #66	@ 0x42
 8037ba2:	4648      	mov	r0, r9
 8037ba4:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8037ba6:	960d      	str	r6, [sp, #52]	@ 0x34
 8037ba8:	f005 fc7c 	bl	803d4a4 <memset>
 8037bac:	b15f      	cbz	r7, 8037bc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8037bae:	f108 3aff 	add.w	sl, r8, #4294967295
 8037bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8037bb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8037bb6:	b152      	cbz	r2, 8037bce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8037bb8:	8812      	ldrh	r2, [r2, #0]
 8037bba:	b10a      	cbz	r2, 8037bc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8037bbc:	459a      	cmp	sl, r3
 8037bbe:	dc2e      	bgt.n	8037c1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8037bc0:	2200      	movs	r2, #0
 8037bc2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8037bc6:	4638      	mov	r0, r7
 8037bc8:	b023      	add	sp, #140	@ 0x8c
 8037bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8037bce:	9a08      	ldr	r2, [sp, #32]
 8037bd0:	2a00      	cmp	r2, #0
 8037bd2:	d0f5      	beq.n	8037bc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8037bd4:	7812      	ldrb	r2, [r2, #0]
 8037bd6:	e7f0      	b.n	8037bba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8037bd8:	2d00      	cmp	r5, #0
 8037bda:	d0ea      	beq.n	8037bb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8037bdc:	782a      	ldrb	r2, [r5, #0]
 8037bde:	b142      	cbz	r2, 8037bf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8037be0:	2a25      	cmp	r2, #37	@ 0x25
 8037be2:	d001      	beq.n	8037be8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8037be4:	459a      	cmp	sl, r3
 8037be6:	dc08      	bgt.n	8037bfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8037be8:	f1bb 0f00 	cmp.w	fp, #0
 8037bec:	d121      	bne.n	8037c32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8037bee:	2d00      	cmp	r5, #0
 8037bf0:	d0df      	beq.n	8037bb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8037bf2:	782a      	ldrb	r2, [r5, #0]
 8037bf4:	f04f 0b00 	mov.w	fp, #0
 8037bf8:	e01d      	b.n	8037c36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8037bfa:	f1bb 0f00 	cmp.w	fp, #0
 8037bfe:	d078      	beq.n	8037cf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8037c00:	f8bb 2000 	ldrh.w	r2, [fp]
 8037c04:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8037c08:	f1bb 0f00 	cmp.w	fp, #0
 8037c0c:	d002      	beq.n	8037c14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8037c0e:	f10b 0202 	add.w	r2, fp, #2
 8037c12:	9209      	str	r2, [sp, #36]	@ 0x24
 8037c14:	b10d      	cbz	r5, 8037c1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8037c16:	3501      	adds	r5, #1
 8037c18:	9508      	str	r5, [sp, #32]
 8037c1a:	3301      	adds	r3, #1
 8037c1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8037c1e:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8037c22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8037c24:	f1bb 0f00 	cmp.w	fp, #0
 8037c28:	d0d6      	beq.n	8037bd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8037c2a:	f8bb 2000 	ldrh.w	r2, [fp]
 8037c2e:	2a00      	cmp	r2, #0
 8037c30:	d1d6      	bne.n	8037be0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8037c32:	f8bb 2000 	ldrh.w	r2, [fp]
 8037c36:	2a00      	cmp	r2, #0
 8037c38:	d0bb      	beq.n	8037bb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8037c3a:	459a      	cmp	sl, r3
 8037c3c:	ddb9      	ble.n	8037bb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8037c3e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 8037c42:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8037c46:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8037c4a:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8037c4e:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 8037c52:	960e      	str	r6, [sp, #56]	@ 0x38
 8037c54:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8037c58:	960f      	str	r6, [sp, #60]	@ 0x3c
 8037c5a:	f1bb 0f00 	cmp.w	fp, #0
 8037c5e:	d002      	beq.n	8037c66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8037c60:	f10b 0302 	add.w	r3, fp, #2
 8037c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8037c66:	b10d      	cbz	r5, 8037c6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8037c68:	1c6b      	adds	r3, r5, #1
 8037c6a:	9308      	str	r3, [sp, #32]
 8037c6c:	ab0f      	add	r3, sp, #60	@ 0x3c
 8037c6e:	9305      	str	r3, [sp, #20]
 8037c70:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 8037c74:	9304      	str	r3, [sp, #16]
 8037c76:	ab0e      	add	r3, sp, #56	@ 0x38
 8037c78:	9303      	str	r3, [sp, #12]
 8037c7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8037c7c:	9302      	str	r3, [sp, #8]
 8037c7e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8037c82:	9301      	str	r3, [sp, #4]
 8037c84:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 8037c88:	9300      	str	r3, [sp, #0]
 8037c8a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8037c8e:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 8037c92:	a908      	add	r1, sp, #32
 8037c94:	a809      	add	r0, sp, #36	@ 0x24
 8037c96:	f7ff fea8 	bl	80379ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8037c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8037c9c:	2b00      	cmp	r3, #0
 8037c9e:	bfbe      	ittt	lt
 8037ca0:	6823      	ldrlt	r3, [r4, #0]
 8037ca2:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8037ca6:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8037ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8037caa:	bfb8      	it	lt
 8037cac:	3404      	addlt	r4, #4
 8037cae:	2b00      	cmp	r3, #0
 8037cb0:	bfb8      	it	lt
 8037cb2:	6823      	ldrlt	r3, [r4, #0]
 8037cb4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8037cb8:	bfbe      	ittt	lt
 8037cba:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8037cbe:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8037cc0:	3404      	addlt	r4, #4
 8037cc2:	b1d9      	cbz	r1, 8037cfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 8037cc4:	880b      	ldrh	r3, [r1, #0]
 8037cc6:	2b69      	cmp	r3, #105	@ 0x69
 8037cc8:	d01f      	beq.n	8037d0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8037cca:	d82f      	bhi.n	8037d2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8037ccc:	2b58      	cmp	r3, #88	@ 0x58
 8037cce:	d01c      	beq.n	8037d0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8037cd0:	d818      	bhi.n	8037d04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 8037cd2:	2b25      	cmp	r3, #37	@ 0x25
 8037cd4:	d034      	beq.n	8037d40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 8037cd6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8037cda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8037cdc:	f1bb 0f00 	cmp.w	fp, #0
 8037ce0:	f000 80b8 	beq.w	8037e54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 8037ce4:	f8bb 5000 	ldrh.w	r5, [fp]
 8037ce8:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8037cec:	3301      	adds	r3, #1
 8037cee:	930d      	str	r3, [sp, #52]	@ 0x34
 8037cf0:	e029      	b.n	8037d46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8037cf2:	b10d      	cbz	r5, 8037cf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 8037cf4:	782a      	ldrb	r2, [r5, #0]
 8037cf6:	e785      	b.n	8037c04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8037cf8:	462a      	mov	r2, r5
 8037cfa:	e783      	b.n	8037c04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8037cfc:	2a00      	cmp	r2, #0
 8037cfe:	d0ea      	beq.n	8037cd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8037d00:	7813      	ldrb	r3, [r2, #0]
 8037d02:	e7e0      	b.n	8037cc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 8037d04:	3b63      	subs	r3, #99	@ 0x63
 8037d06:	2b01      	cmp	r3, #1
 8037d08:	d8e5      	bhi.n	8037cd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8037d0a:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8037d0e:	b329      	cbz	r1, 8037d5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8037d10:	880b      	ldrh	r3, [r1, #0]
 8037d12:	2b69      	cmp	r3, #105	@ 0x69
 8037d14:	d063      	beq.n	8037dde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8037d16:	d825      	bhi.n	8037d64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8037d18:	2b63      	cmp	r3, #99	@ 0x63
 8037d1a:	d038      	beq.n	8037d8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8037d1c:	2b64      	cmp	r3, #100	@ 0x64
 8037d1e:	d05e      	beq.n	8037dde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8037d20:	2b58      	cmp	r3, #88	@ 0x58
 8037d22:	d07b      	beq.n	8037e1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 8037d24:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8037d28:	4625      	mov	r5, r4
 8037d2a:	e036      	b.n	8037d9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8037d2c:	2b73      	cmp	r3, #115	@ 0x73
 8037d2e:	d0ec      	beq.n	8037d0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8037d30:	d802      	bhi.n	8037d38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 8037d32:	2b6f      	cmp	r3, #111	@ 0x6f
 8037d34:	d1cf      	bne.n	8037cd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8037d36:	e7e8      	b.n	8037d0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8037d38:	2b75      	cmp	r3, #117	@ 0x75
 8037d3a:	d0e6      	beq.n	8037d0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8037d3c:	2b78      	cmp	r3, #120	@ 0x78
 8037d3e:	e7f9      	b.n	8037d34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8037d40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8037d42:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8037d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037d48:	b10b      	cbz	r3, 8037d4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8037d4a:	3302      	adds	r3, #2
 8037d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8037d4e:	9b08      	ldr	r3, [sp, #32]
 8037d50:	2b00      	cmp	r3, #0
 8037d52:	f43f af2e 	beq.w	8037bb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8037d56:	3301      	adds	r3, #1
 8037d58:	9308      	str	r3, [sp, #32]
 8037d5a:	e72a      	b.n	8037bb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8037d5c:	2a00      	cmp	r2, #0
 8037d5e:	d0e1      	beq.n	8037d24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8037d60:	7813      	ldrb	r3, [r2, #0]
 8037d62:	e7d6      	b.n	8037d12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 8037d64:	2b73      	cmp	r3, #115	@ 0x73
 8037d66:	d036      	beq.n	8037dd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 8037d68:	d807      	bhi.n	8037d7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 8037d6a:	2b6f      	cmp	r3, #111	@ 0x6f
 8037d6c:	d1da      	bne.n	8037d24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8037d6e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8037d70:	1d25      	adds	r5, r4, #4
 8037d72:	eba8 0202 	sub.w	r2, r8, r2
 8037d76:	2308      	movs	r3, #8
 8037d78:	e04a      	b.n	8037e10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8037d7a:	2b75      	cmp	r3, #117	@ 0x75
 8037d7c:	d043      	beq.n	8037e06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 8037d7e:	2b78      	cmp	r3, #120	@ 0x78
 8037d80:	d1d0      	bne.n	8037d24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8037d82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8037d84:	1d25      	adds	r5, r4, #4
 8037d86:	eba8 0202 	sub.w	r2, r8, r2
 8037d8a:	2310      	movs	r3, #16
 8037d8c:	e040      	b.n	8037e10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 8037d8e:	6823      	ldr	r3, [r4, #0]
 8037d90:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8037d94:	1d25      	adds	r5, r4, #4
 8037d96:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8037d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8037d9c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8037da0:	2b00      	cmp	r3, #0
 8037da2:	d052      	beq.n	8037e4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 8037da4:	881a      	ldrh	r2, [r3, #0]
 8037da6:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8037daa:	a80d      	add	r0, sp, #52	@ 0x34
 8037dac:	9005      	str	r0, [sp, #20]
 8037dae:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 8037db2:	9004      	str	r0, [sp, #16]
 8037db4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8037db6:	9003      	str	r0, [sp, #12]
 8037db8:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8037dbc:	9002      	str	r0, [sp, #8]
 8037dbe:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8037dc0:	9001      	str	r0, [sp, #4]
 8037dc2:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 8037dc6:	9000      	str	r0, [sp, #0]
 8037dc8:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8037dcc:	a810      	add	r0, sp, #64	@ 0x40
 8037dce:	f7ff fd49 	bl	8037864 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 8037dd2:	462c      	mov	r4, r5
 8037dd4:	e7b7      	b.n	8037d46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 8037dd6:	6823      	ldr	r3, [r4, #0]
 8037dd8:	1d25      	adds	r5, r4, #4
 8037dda:	9310      	str	r3, [sp, #64]	@ 0x40
 8037ddc:	e7dd      	b.n	8037d9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8037dde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8037de0:	6820      	ldr	r0, [r4, #0]
 8037de2:	eba8 0202 	sub.w	r2, r8, r2
 8037de6:	230a      	movs	r3, #10
 8037de8:	b292      	uxth	r2, r2
 8037dea:	4649      	mov	r1, r9
 8037dec:	f7ff fcf0 	bl	80377d0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8037df0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8037df4:	2b2d      	cmp	r3, #45	@ 0x2d
 8037df6:	f104 0504 	add.w	r5, r4, #4
 8037dfa:	d1ce      	bne.n	8037d9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8037dfc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8037e00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8037e02:	3302      	adds	r3, #2
 8037e04:	e7e9      	b.n	8037dda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 8037e06:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8037e08:	1d25      	adds	r5, r4, #4
 8037e0a:	eba8 0202 	sub.w	r2, r8, r2
 8037e0e:	230a      	movs	r3, #10
 8037e10:	b292      	uxth	r2, r2
 8037e12:	4649      	mov	r1, r9
 8037e14:	6820      	ldr	r0, [r4, #0]
 8037e16:	f7ff fd07 	bl	8037828 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8037e1a:	e7be      	b.n	8037d9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8037e1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8037e1e:	6820      	ldr	r0, [r4, #0]
 8037e20:	eba8 0202 	sub.w	r2, r8, r2
 8037e24:	b292      	uxth	r2, r2
 8037e26:	2310      	movs	r3, #16
 8037e28:	4649      	mov	r1, r9
 8037e2a:	f7ff fcfd 	bl	8037828 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8037e2e:	1d25      	adds	r5, r4, #4
 8037e30:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 8037e34:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8037e38:	2b00      	cmp	r3, #0
 8037e3a:	d0ae      	beq.n	8037d9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8037e3c:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8037e40:	2919      	cmp	r1, #25
 8037e42:	d8f7      	bhi.n	8037e34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8037e44:	3b20      	subs	r3, #32
 8037e46:	8013      	strh	r3, [r2, #0]
 8037e48:	e7f4      	b.n	8037e34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8037e4a:	9a08      	ldr	r2, [sp, #32]
 8037e4c:	2a00      	cmp	r2, #0
 8037e4e:	d0aa      	beq.n	8037da6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8037e50:	7812      	ldrb	r2, [r2, #0]
 8037e52:	e7a8      	b.n	8037da6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8037e54:	2d00      	cmp	r5, #0
 8037e56:	f43f af47 	beq.w	8037ce8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8037e5a:	782d      	ldrb	r5, [r5, #0]
 8037e5c:	e744      	b.n	8037ce8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08037e5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8037e5e:	b507      	push	{r0, r1, r2, lr}
 8037e60:	9300      	str	r3, [sp, #0]
 8037e62:	4613      	mov	r3, r2
 8037e64:	2200      	movs	r2, #0
 8037e66:	f7ff fe90 	bl	8037b8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 8037e6a:	b003      	add	sp, #12
 8037e6c:	f85d fb04 	ldr.w	pc, [sp], #4

08037e70 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8037e70:	b40c      	push	{r2, r3}
 8037e72:	b507      	push	{r0, r1, r2, lr}
 8037e74:	ab04      	add	r3, sp, #16
 8037e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8037e7a:	9301      	str	r3, [sp, #4]
 8037e7c:	f7ff ffef 	bl	8037e5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8037e80:	b003      	add	sp, #12
 8037e82:	f85d eb04 	ldr.w	lr, [sp], #4
 8037e86:	b002      	add	sp, #8
 8037e88:	4770      	bx	lr
	...

08037e8c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8037e8c:	4b01      	ldr	r3, [pc, #4]	@ (8037e94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8037e8e:	6018      	str	r0, [r3, #0]
 8037e90:	4770      	bx	lr
 8037e92:	bf00      	nop
 8037e94:	2000b940 	.word	0x2000b940

08037e98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8037e98:	4b06      	ldr	r3, [pc, #24]	@ (8037eb4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8037e9a:	881a      	ldrh	r2, [r3, #0]
 8037e9c:	4282      	cmp	r2, r0
 8037e9e:	d807      	bhi.n	8037eb0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8037ea0:	4b05      	ldr	r3, [pc, #20]	@ (8037eb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8037ea2:	881b      	ldrh	r3, [r3, #0]
 8037ea4:	4413      	add	r3, r2
 8037ea6:	4298      	cmp	r0, r3
 8037ea8:	bfac      	ite	ge
 8037eaa:	2000      	movge	r0, #0
 8037eac:	2001      	movlt	r0, #1
 8037eae:	4770      	bx	lr
 8037eb0:	2000      	movs	r0, #0
 8037eb2:	4770      	bx	lr
 8037eb4:	2000b960 	.word	0x2000b960
 8037eb8:	2000b964 	.word	0x2000b964

08037ebc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8037ebc:	b508      	push	{r3, lr}
 8037ebe:	4601      	mov	r1, r0
 8037ec0:	f7ff ffea 	bl	8037e98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8037ec4:	b118      	cbz	r0, 8037ece <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8037ec6:	4b02      	ldr	r3, [pc, #8]	@ (8037ed0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8037ec8:	681b      	ldr	r3, [r3, #0]
 8037eca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8037ece:	bd08      	pop	{r3, pc}
 8037ed0:	2000b944 	.word	0x2000b944

08037ed4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8037ed4:	b538      	push	{r3, r4, r5, lr}
 8037ed6:	4604      	mov	r4, r0
 8037ed8:	f7ff ffde 	bl	8037e98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8037edc:	b188      	cbz	r0, 8037f02 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8037ede:	4b09      	ldr	r3, [pc, #36]	@ (8037f04 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8037ee0:	881a      	ldrh	r2, [r3, #0]
 8037ee2:	4b09      	ldr	r3, [pc, #36]	@ (8037f08 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8037ee4:	1aa4      	subs	r4, r4, r2
 8037ee6:	681d      	ldr	r5, [r3, #0]
 8037ee8:	220e      	movs	r2, #14
 8037eea:	4362      	muls	r2, r4
 8037eec:	18ac      	adds	r4, r5, r2
 8037eee:	7b23      	ldrb	r3, [r4, #12]
 8037ef0:	f013 0320 	ands.w	r3, r3, #32
 8037ef4:	bf1f      	itttt	ne
 8037ef6:	680b      	ldrne	r3, [r1, #0]
 8037ef8:	50ab      	strne	r3, [r5, r2]
 8037efa:	684b      	ldrne	r3, [r1, #4]
 8037efc:	6063      	strne	r3, [r4, #4]
 8037efe:	bf08      	it	eq
 8037f00:	4618      	moveq	r0, r3
 8037f02:	bd38      	pop	{r3, r4, r5, pc}
 8037f04:	2000b960 	.word	0x2000b960
 8037f08:	2000b948 	.word	0x2000b948

08037f0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8037f0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8037f10:	4606      	mov	r6, r0
 8037f12:	460c      	mov	r4, r1
 8037f14:	f7ff ffc0 	bl	8037e98 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8037f18:	b918      	cbnz	r0, 8037f22 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8037f1a:	2000      	movs	r0, #0
 8037f1c:	b002      	add	sp, #8
 8037f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8037f22:	4608      	mov	r0, r1
 8037f24:	f7fc febe 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8037f28:	2800      	cmp	r0, #0
 8037f2a:	d1f6      	bne.n	8037f1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8037f2c:	4b3f      	ldr	r3, [pc, #252]	@ (803802c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8037f2e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8038030 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8037f32:	881d      	ldrh	r5, [r3, #0]
 8037f34:	f8d9 a000 	ldr.w	sl, [r9]
 8037f38:	1b73      	subs	r3, r6, r5
 8037f3a:	250e      	movs	r5, #14
 8037f3c:	435d      	muls	r5, r3
 8037f3e:	eb0a 0705 	add.w	r7, sl, r5
 8037f42:	46c8      	mov	r8, r9
 8037f44:	7b3b      	ldrb	r3, [r7, #12]
 8037f46:	f013 0f20 	tst.w	r3, #32
 8037f4a:	d0e6      	beq.n	8037f1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8037f4c:	4621      	mov	r1, r4
 8037f4e:	4638      	mov	r0, r7
 8037f50:	f7fc feb5 	bl	8034cbe <_ZNK8touchgfx4Rect8includesERKS0_>
 8037f54:	2800      	cmp	r0, #0
 8037f56:	d1e1      	bne.n	8037f1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8037f58:	4639      	mov	r1, r7
 8037f5a:	4620      	mov	r0, r4
 8037f5c:	f7fc feaf 	bl	8034cbe <_ZNK8touchgfx4Rect8includesERKS0_>
 8037f60:	b108      	cbz	r0, 8037f66 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8037f62:	4621      	mov	r1, r4
 8037f64:	e020      	b.n	8037fa8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8037f66:	f9b4 2000 	ldrsh.w	r2, [r4]
 8037f6a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8037f6e:	429a      	cmp	r2, r3
 8037f70:	d11e      	bne.n	8037fb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8037f72:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8037f76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8037f7a:	429a      	cmp	r2, r3
 8037f7c:	d118      	bne.n	8037fb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8037f7e:	6820      	ldr	r0, [r4, #0]
 8037f80:	6861      	ldr	r1, [r4, #4]
 8037f82:	466b      	mov	r3, sp
 8037f84:	c303      	stmia	r3!, {r0, r1}
 8037f86:	4639      	mov	r1, r7
 8037f88:	4668      	mov	r0, sp
 8037f8a:	f7f8 f92f 	bl	80301ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8037f8e:	f8d9 3000 	ldr.w	r3, [r9]
 8037f92:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8037f96:	442b      	add	r3, r5
 8037f98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8037f9c:	4413      	add	r3, r2
 8037f9e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8037fa2:	4293      	cmp	r3, r2
 8037fa4:	dc04      	bgt.n	8037fb0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8037fa6:	4669      	mov	r1, sp
 8037fa8:	4630      	mov	r0, r6
 8037faa:	f7ff ff93 	bl	8037ed4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8037fae:	e7b5      	b.n	8037f1c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8037fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8037fb4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8037fb8:	442b      	add	r3, r5
 8037fba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8037fbe:	4291      	cmp	r1, r2
 8037fc0:	d119      	bne.n	8037ff6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8037fc2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8037fc6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8037fca:	4291      	cmp	r1, r2
 8037fcc:	d113      	bne.n	8037ff6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8037fce:	6820      	ldr	r0, [r4, #0]
 8037fd0:	6861      	ldr	r1, [r4, #4]
 8037fd2:	466a      	mov	r2, sp
 8037fd4:	c203      	stmia	r2!, {r0, r1}
 8037fd6:	4619      	mov	r1, r3
 8037fd8:	4668      	mov	r0, sp
 8037fda:	f7f8 f907 	bl	80301ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8037fde:	f8d8 3000 	ldr.w	r3, [r8]
 8037fe2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8037fe6:	442b      	add	r3, r5
 8037fe8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8037fec:	4413      	add	r3, r2
 8037fee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8037ff2:	4293      	cmp	r3, r2
 8037ff4:	ddd7      	ble.n	8037fa6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8037ff6:	4620      	mov	r0, r4
 8037ff8:	f7fc fe54 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8037ffc:	b990      	cbnz	r0, 8038024 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8037ffe:	88a7      	ldrh	r7, [r4, #4]
 8038000:	88e3      	ldrh	r3, [r4, #6]
 8038002:	fb17 f703 	smulbb	r7, r7, r3
 8038006:	f8d8 3000 	ldr.w	r3, [r8]
 803800a:	441d      	add	r5, r3
 803800c:	4628      	mov	r0, r5
 803800e:	f7fc fe49 	bl	8034ca4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8038012:	b948      	cbnz	r0, 8038028 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8038014:	88ab      	ldrh	r3, [r5, #4]
 8038016:	88ea      	ldrh	r2, [r5, #6]
 8038018:	fb13 f302 	smulbb	r3, r3, r2
 803801c:	42bb      	cmp	r3, r7
 803801e:	f6bf af7c 	bge.w	8037f1a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8038022:	e79e      	b.n	8037f62 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8038024:	2700      	movs	r7, #0
 8038026:	e7ee      	b.n	8038006 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8038028:	2300      	movs	r3, #0
 803802a:	e7f7      	b.n	803801c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 803802c:	2000b960 	.word	0x2000b960
 8038030:	2000b948 	.word	0x2000b948

08038034 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8038034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8038036:	4c24      	ldr	r4, [pc, #144]	@ (80380c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8038038:	6823      	ldr	r3, [r4, #0]
 803803a:	2b00      	cmp	r3, #0
 803803c:	d042      	beq.n	80380c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 803803e:	4a23      	ldr	r2, [pc, #140]	@ (80380cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8038040:	4d23      	ldr	r5, [pc, #140]	@ (80380d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8038042:	8811      	ldrh	r1, [r2, #0]
 8038044:	f8b5 c000 	ldrh.w	ip, [r5]
 8038048:	4822      	ldr	r0, [pc, #136]	@ (80380d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 803804a:	4461      	add	r1, ip
 803804c:	1c4a      	adds	r2, r1, #1
 803804e:	f022 0201 	bic.w	r2, r2, #1
 8038052:	008f      	lsls	r7, r1, #2
 8038054:	0412      	lsls	r2, r2, #16
 8038056:	19de      	adds	r6, r3, r7
 8038058:	0c12      	lsrs	r2, r2, #16
 803805a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 803805e:	6006      	str	r6, [r0, #0]
 8038060:	4e1d      	ldr	r6, [pc, #116]	@ (80380d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8038062:	19da      	adds	r2, r3, r7
 8038064:	6032      	str	r2, [r6, #0]
 8038066:	220e      	movs	r2, #14
 8038068:	fb02 f20c 	mul.w	r2, r2, ip
 803806c:	3203      	adds	r2, #3
 803806e:	f022 0203 	bic.w	r2, r2, #3
 8038072:	443a      	add	r2, r7
 8038074:	4f19      	ldr	r7, [pc, #100]	@ (80380dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8038076:	4413      	add	r3, r2
 8038078:	603b      	str	r3, [r7, #0]
 803807a:	4f19      	ldr	r7, [pc, #100]	@ (80380e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 803807c:	2300      	movs	r3, #0
 803807e:	803b      	strh	r3, [r7, #0]
 8038080:	4f18      	ldr	r7, [pc, #96]	@ (80380e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8038082:	683f      	ldr	r7, [r7, #0]
 8038084:	1aba      	subs	r2, r7, r2
 8038086:	4f18      	ldr	r7, [pc, #96]	@ (80380e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8038088:	603a      	str	r2, [r7, #0]
 803808a:	4a18      	ldr	r2, [pc, #96]	@ (80380ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 803808c:	469c      	mov	ip, r3
 803808e:	8013      	strh	r3, [r2, #0]
 8038090:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8038094:	428b      	cmp	r3, r1
 8038096:	d10d      	bne.n	80380b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8038098:	882d      	ldrh	r5, [r5, #0]
 803809a:	6830      	ldr	r0, [r6, #0]
 803809c:	2300      	movs	r3, #0
 803809e:	240e      	movs	r4, #14
 80380a0:	429d      	cmp	r5, r3
 80380a2:	d90f      	bls.n	80380c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80380a4:	fb04 0203 	mla	r2, r4, r3, r0
 80380a8:	3301      	adds	r3, #1
 80380aa:	7b11      	ldrb	r1, [r2, #12]
 80380ac:	f36f 1145 	bfc	r1, #5, #1
 80380b0:	7311      	strb	r1, [r2, #12]
 80380b2:	e7f5      	b.n	80380a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80380b4:	6822      	ldr	r2, [r4, #0]
 80380b6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80380ba:	6802      	ldr	r2, [r0, #0]
 80380bc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80380c0:	3301      	adds	r3, #1
 80380c2:	e7e7      	b.n	8038094 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80380c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80380c6:	bf00      	nop
 80380c8:	2000b944 	.word	0x2000b944
 80380cc:	2000b960 	.word	0x2000b960
 80380d0:	2000b964 	.word	0x2000b964
 80380d4:	2000b958 	.word	0x2000b958
 80380d8:	2000b948 	.word	0x2000b948
 80380dc:	2000b950 	.word	0x2000b950
 80380e0:	2000b962 	.word	0x2000b962
 80380e4:	2000b94c 	.word	0x2000b94c
 80380e8:	2000b95c 	.word	0x2000b95c
 80380ec:	2000b954 	.word	0x2000b954

080380f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80380f0:	4b06      	ldr	r3, [pc, #24]	@ (803810c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80380f2:	681b      	ldr	r3, [r3, #0]
 80380f4:	b943      	cbnz	r3, 8038108 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80380f6:	b139      	cbz	r1, 8038108 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80380f8:	4b05      	ldr	r3, [pc, #20]	@ (8038110 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80380fa:	801a      	strh	r2, [r3, #0]
 80380fc:	4b05      	ldr	r3, [pc, #20]	@ (8038114 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80380fe:	6019      	str	r1, [r3, #0]
 8038100:	4b05      	ldr	r3, [pc, #20]	@ (8038118 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8038102:	6018      	str	r0, [r3, #0]
 8038104:	f7ff bf96 	b.w	8038034 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8038108:	4770      	bx	lr
 803810a:	bf00      	nop
 803810c:	2000b950 	.word	0x2000b950
 8038110:	2000b964 	.word	0x2000b964
 8038114:	2000b94c 	.word	0x2000b94c
 8038118:	2000b944 	.word	0x2000b944

0803811c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 803811c:	b470      	push	{r4, r5, r6}
 803811e:	4c07      	ldr	r4, [pc, #28]	@ (803813c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8038120:	6826      	ldr	r6, [r4, #0]
 8038122:	4605      	mov	r5, r0
 8038124:	4610      	mov	r0, r2
 8038126:	9a03      	ldr	r2, [sp, #12]
 8038128:	b936      	cbnz	r6, 8038138 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 803812a:	6025      	str	r5, [r4, #0]
 803812c:	4c04      	ldr	r4, [pc, #16]	@ (8038140 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 803812e:	8021      	strh	r1, [r4, #0]
 8038130:	bc70      	pop	{r4, r5, r6}
 8038132:	4619      	mov	r1, r3
 8038134:	f7ff bfdc 	b.w	80380f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8038138:	bc70      	pop	{r4, r5, r6}
 803813a:	4770      	bx	lr
 803813c:	2000b968 	.word	0x2000b968
 8038140:	2000b960 	.word	0x2000b960

08038144 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8038144:	4a12      	ldr	r2, [pc, #72]	@ (8038190 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8038146:	8803      	ldrh	r3, [r0, #0]
 8038148:	8812      	ldrh	r2, [r2, #0]
 803814a:	4293      	cmp	r3, r2
 803814c:	d207      	bcs.n	803815e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 803814e:	4a11      	ldr	r2, [pc, #68]	@ (8038194 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8038150:	6812      	ldr	r2, [r2, #0]
 8038152:	2114      	movs	r1, #20
 8038154:	fb01 2303 	mla	r3, r1, r3, r2
 8038158:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 803815c:	4770      	bx	lr
 803815e:	490e      	ldr	r1, [pc, #56]	@ (8038198 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8038160:	8809      	ldrh	r1, [r1, #0]
 8038162:	4411      	add	r1, r2
 8038164:	428b      	cmp	r3, r1
 8038166:	da04      	bge.n	8038172 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8038168:	1a9b      	subs	r3, r3, r2
 803816a:	4a0c      	ldr	r2, [pc, #48]	@ (803819c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 803816c:	210e      	movs	r1, #14
 803816e:	6812      	ldr	r2, [r2, #0]
 8038170:	e7f0      	b.n	8038154 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8038172:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8038176:	4293      	cmp	r3, r2
 8038178:	d108      	bne.n	803818c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 803817a:	4b09      	ldr	r3, [pc, #36]	@ (80381a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 803817c:	781b      	ldrb	r3, [r3, #0]
 803817e:	b91b      	cbnz	r3, 8038188 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8038180:	4b08      	ldr	r3, [pc, #32]	@ (80381a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8038182:	f9b3 0000 	ldrsh.w	r0, [r3]
 8038186:	4770      	bx	lr
 8038188:	4b07      	ldr	r3, [pc, #28]	@ (80381a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 803818a:	e7fa      	b.n	8038182 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 803818c:	2000      	movs	r0, #0
 803818e:	4770      	bx	lr
 8038190:	2000b960 	.word	0x2000b960
 8038194:	2000b968 	.word	0x2000b968
 8038198:	2000b964 	.word	0x2000b964
 803819c:	2000b948 	.word	0x2000b948
 80381a0:	2000b8d8 	.word	0x2000b8d8
 80381a4:	2000b8da 	.word	0x2000b8da
 80381a8:	2000b8dc 	.word	0x2000b8dc

080381ac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80381ac:	4a12      	ldr	r2, [pc, #72]	@ (80381f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80381ae:	8803      	ldrh	r3, [r0, #0]
 80381b0:	8812      	ldrh	r2, [r2, #0]
 80381b2:	4293      	cmp	r3, r2
 80381b4:	d207      	bcs.n	80381c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80381b6:	4a11      	ldr	r2, [pc, #68]	@ (80381fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80381b8:	6812      	ldr	r2, [r2, #0]
 80381ba:	2114      	movs	r1, #20
 80381bc:	fb01 2303 	mla	r3, r1, r3, r2
 80381c0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80381c4:	4770      	bx	lr
 80381c6:	490e      	ldr	r1, [pc, #56]	@ (8038200 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80381c8:	8809      	ldrh	r1, [r1, #0]
 80381ca:	4411      	add	r1, r2
 80381cc:	428b      	cmp	r3, r1
 80381ce:	da04      	bge.n	80381da <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80381d0:	1a9b      	subs	r3, r3, r2
 80381d2:	4a0c      	ldr	r2, [pc, #48]	@ (8038204 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80381d4:	210e      	movs	r1, #14
 80381d6:	6812      	ldr	r2, [r2, #0]
 80381d8:	e7f0      	b.n	80381bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80381da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80381de:	4293      	cmp	r3, r2
 80381e0:	d108      	bne.n	80381f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80381e2:	4b09      	ldr	r3, [pc, #36]	@ (8038208 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80381e4:	781b      	ldrb	r3, [r3, #0]
 80381e6:	b91b      	cbnz	r3, 80381f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80381e8:	4b08      	ldr	r3, [pc, #32]	@ (803820c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80381ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80381ee:	4770      	bx	lr
 80381f0:	4b07      	ldr	r3, [pc, #28]	@ (8038210 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80381f2:	e7fa      	b.n	80381ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80381f4:	2000      	movs	r0, #0
 80381f6:	4770      	bx	lr
 80381f8:	2000b960 	.word	0x2000b960
 80381fc:	2000b968 	.word	0x2000b968
 8038200:	2000b964 	.word	0x2000b964
 8038204:	2000b948 	.word	0x2000b948
 8038208:	2000b8d8 	.word	0x2000b8d8
 803820c:	2000b8dc 	.word	0x2000b8dc
 8038210:	2000b8da 	.word	0x2000b8da

08038214 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8038214:	b510      	push	{r4, lr}
 8038216:	4a1f      	ldr	r2, [pc, #124]	@ (8038294 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8038218:	880b      	ldrh	r3, [r1, #0]
 803821a:	8812      	ldrh	r2, [r2, #0]
 803821c:	4293      	cmp	r3, r2
 803821e:	d213      	bcs.n	8038248 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8038220:	4a1d      	ldr	r2, [pc, #116]	@ (8038298 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8038222:	6812      	ldr	r2, [r2, #0]
 8038224:	2114      	movs	r1, #20
 8038226:	fb01 2303 	mla	r3, r1, r3, r2
 803822a:	8a1a      	ldrh	r2, [r3, #16]
 803822c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8038230:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8038234:	8a5b      	ldrh	r3, [r3, #18]
 8038236:	8004      	strh	r4, [r0, #0]
 8038238:	f3c2 020c 	ubfx	r2, r2, #0, #13
 803823c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8038240:	8041      	strh	r1, [r0, #2]
 8038242:	8082      	strh	r2, [r0, #4]
 8038244:	80c3      	strh	r3, [r0, #6]
 8038246:	e00e      	b.n	8038266 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8038248:	4914      	ldr	r1, [pc, #80]	@ (803829c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 803824a:	8809      	ldrh	r1, [r1, #0]
 803824c:	4411      	add	r1, r2
 803824e:	428b      	cmp	r3, r1
 8038250:	da0a      	bge.n	8038268 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8038252:	1a9b      	subs	r3, r3, r2
 8038254:	4a12      	ldr	r2, [pc, #72]	@ (80382a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8038256:	6812      	ldr	r2, [r2, #0]
 8038258:	210e      	movs	r1, #14
 803825a:	fb01 2303 	mla	r3, r1, r3, r2
 803825e:	681a      	ldr	r2, [r3, #0]
 8038260:	6002      	str	r2, [r0, #0]
 8038262:	685a      	ldr	r2, [r3, #4]
 8038264:	6042      	str	r2, [r0, #4]
 8038266:	bd10      	pop	{r4, pc}
 8038268:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 803826c:	4293      	cmp	r3, r2
 803826e:	d10b      	bne.n	8038288 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8038270:	4b0c      	ldr	r3, [pc, #48]	@ (80382a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8038272:	f9b3 1000 	ldrsh.w	r1, [r3]
 8038276:	4b0c      	ldr	r3, [pc, #48]	@ (80382a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8038278:	8081      	strh	r1, [r0, #4]
 803827a:	f9b3 2000 	ldrsh.w	r2, [r3]
 803827e:	80c2      	strh	r2, [r0, #6]
 8038280:	2300      	movs	r3, #0
 8038282:	8003      	strh	r3, [r0, #0]
 8038284:	8043      	strh	r3, [r0, #2]
 8038286:	e7ee      	b.n	8038266 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8038288:	2300      	movs	r3, #0
 803828a:	8003      	strh	r3, [r0, #0]
 803828c:	8043      	strh	r3, [r0, #2]
 803828e:	8083      	strh	r3, [r0, #4]
 8038290:	e7d8      	b.n	8038244 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8038292:	bf00      	nop
 8038294:	2000b960 	.word	0x2000b960
 8038298:	2000b968 	.word	0x2000b968
 803829c:	2000b964 	.word	0x2000b964
 80382a0:	2000b948 	.word	0x2000b948
 80382a4:	2000b8d4 	.word	0x2000b8d4
 80382a8:	2000b8d6 	.word	0x2000b8d6

080382ac <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80382ac:	4a17      	ldr	r2, [pc, #92]	@ (803830c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80382ae:	8803      	ldrh	r3, [r0, #0]
 80382b0:	8812      	ldrh	r2, [r2, #0]
 80382b2:	4293      	cmp	r3, r2
 80382b4:	d213      	bcs.n	80382de <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80382b6:	4a16      	ldr	r2, [pc, #88]	@ (8038310 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80382b8:	6812      	ldr	r2, [r2, #0]
 80382ba:	2114      	movs	r1, #20
 80382bc:	fb01 2303 	mla	r3, r1, r3, r2
 80382c0:	8a1a      	ldrh	r2, [r3, #16]
 80382c2:	8919      	ldrh	r1, [r3, #8]
 80382c4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80382c8:	428a      	cmp	r2, r1
 80382ca:	db1d      	blt.n	8038308 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80382cc:	8a58      	ldrh	r0, [r3, #18]
 80382ce:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80382d2:	895b      	ldrh	r3, [r3, #10]
 80382d4:	4298      	cmp	r0, r3
 80382d6:	bfac      	ite	ge
 80382d8:	2000      	movge	r0, #0
 80382da:	2001      	movlt	r0, #1
 80382dc:	4770      	bx	lr
 80382de:	490d      	ldr	r1, [pc, #52]	@ (8038314 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80382e0:	8809      	ldrh	r1, [r1, #0]
 80382e2:	4411      	add	r1, r2
 80382e4:	428b      	cmp	r3, r1
 80382e6:	da0d      	bge.n	8038304 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80382e8:	1a9b      	subs	r3, r3, r2
 80382ea:	4a0b      	ldr	r2, [pc, #44]	@ (8038318 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80382ec:	6812      	ldr	r2, [r2, #0]
 80382ee:	210e      	movs	r1, #14
 80382f0:	fb01 2303 	mla	r3, r1, r3, r2
 80382f4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80382f8:	891a      	ldrh	r2, [r3, #8]
 80382fa:	4291      	cmp	r1, r2
 80382fc:	db04      	blt.n	8038308 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80382fe:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8038302:	e7e6      	b.n	80382d2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8038304:	2000      	movs	r0, #0
 8038306:	4770      	bx	lr
 8038308:	2001      	movs	r0, #1
 803830a:	4770      	bx	lr
 803830c:	2000b960 	.word	0x2000b960
 8038310:	2000b968 	.word	0x2000b968
 8038314:	2000b964 	.word	0x2000b964
 8038318:	2000b948 	.word	0x2000b948

0803831c <_ZNK8touchgfx6Bitmap7getDataEv>:
 803831c:	4a12      	ldr	r2, [pc, #72]	@ (8038368 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 803831e:	8803      	ldrh	r3, [r0, #0]
 8038320:	8811      	ldrh	r1, [r2, #0]
 8038322:	428b      	cmp	r3, r1
 8038324:	d20b      	bcs.n	803833e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8038326:	4a11      	ldr	r2, [pc, #68]	@ (803836c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8038328:	6812      	ldr	r2, [r2, #0]
 803832a:	b112      	cbz	r2, 8038332 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 803832c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8038330:	b9c0      	cbnz	r0, 8038364 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8038332:	4a0f      	ldr	r2, [pc, #60]	@ (8038370 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8038334:	6811      	ldr	r1, [r2, #0]
 8038336:	2214      	movs	r2, #20
 8038338:	4353      	muls	r3, r2
 803833a:	58c8      	ldr	r0, [r1, r3]
 803833c:	4770      	bx	lr
 803833e:	4a0d      	ldr	r2, [pc, #52]	@ (8038374 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8038340:	8812      	ldrh	r2, [r2, #0]
 8038342:	440a      	add	r2, r1
 8038344:	4293      	cmp	r3, r2
 8038346:	da04      	bge.n	8038352 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8038348:	4a08      	ldr	r2, [pc, #32]	@ (803836c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 803834a:	6812      	ldr	r2, [r2, #0]
 803834c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8038350:	4770      	bx	lr
 8038352:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8038356:	4293      	cmp	r3, r2
 8038358:	d103      	bne.n	8038362 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 803835a:	4b07      	ldr	r3, [pc, #28]	@ (8038378 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 803835c:	681b      	ldr	r3, [r3, #0]
 803835e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8038360:	4770      	bx	lr
 8038362:	2000      	movs	r0, #0
 8038364:	4770      	bx	lr
 8038366:	bf00      	nop
 8038368:	2000b960 	.word	0x2000b960
 803836c:	2000b944 	.word	0x2000b944
 8038370:	2000b968 	.word	0x2000b968
 8038374:	2000b964 	.word	0x2000b964
 8038378:	2000b8e0 	.word	0x2000b8e0

0803837c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 803837c:	4b24      	ldr	r3, [pc, #144]	@ (8038410 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 803837e:	8802      	ldrh	r2, [r0, #0]
 8038380:	8818      	ldrh	r0, [r3, #0]
 8038382:	4282      	cmp	r2, r0
 8038384:	d221      	bcs.n	80383ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8038386:	4b23      	ldr	r3, [pc, #140]	@ (8038414 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8038388:	6819      	ldr	r1, [r3, #0]
 803838a:	2314      	movs	r3, #20
 803838c:	fb03 1302 	mla	r3, r3, r2, r1
 8038390:	6858      	ldr	r0, [r3, #4]
 8038392:	2800      	cmp	r0, #0
 8038394:	d03a      	beq.n	803840c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8038396:	4920      	ldr	r1, [pc, #128]	@ (8038418 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8038398:	6809      	ldr	r1, [r1, #0]
 803839a:	2900      	cmp	r1, #0
 803839c:	d036      	beq.n	803840c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 803839e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80383a2:	2900      	cmp	r1, #0
 80383a4:	d032      	beq.n	803840c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80383a6:	891a      	ldrh	r2, [r3, #8]
 80383a8:	8958      	ldrh	r0, [r3, #10]
 80383aa:	4350      	muls	r0, r2
 80383ac:	7c5a      	ldrb	r2, [r3, #17]
 80383ae:	7cdb      	ldrb	r3, [r3, #19]
 80383b0:	0952      	lsrs	r2, r2, #5
 80383b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80383b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80383ba:	2b0b      	cmp	r3, #11
 80383bc:	bf18      	it	ne
 80383be:	0040      	lslne	r0, r0, #1
 80383c0:	3003      	adds	r0, #3
 80383c2:	f020 0003 	bic.w	r0, r0, #3
 80383c6:	4408      	add	r0, r1
 80383c8:	4770      	bx	lr
 80383ca:	4b14      	ldr	r3, [pc, #80]	@ (803841c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80383cc:	881b      	ldrh	r3, [r3, #0]
 80383ce:	4403      	add	r3, r0
 80383d0:	429a      	cmp	r2, r3
 80383d2:	da1a      	bge.n	803840a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80383d4:	4b12      	ldr	r3, [pc, #72]	@ (8038420 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80383d6:	681b      	ldr	r3, [r3, #0]
 80383d8:	1a10      	subs	r0, r2, r0
 80383da:	210e      	movs	r1, #14
 80383dc:	fb01 3000 	mla	r0, r1, r0, r3
 80383e0:	7b03      	ldrb	r3, [r0, #12]
 80383e2:	f003 031f 	and.w	r3, r3, #31
 80383e6:	2b0b      	cmp	r3, #11
 80383e8:	d10b      	bne.n	8038402 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80383ea:	8903      	ldrh	r3, [r0, #8]
 80383ec:	8940      	ldrh	r0, [r0, #10]
 80383ee:	4358      	muls	r0, r3
 80383f0:	4b09      	ldr	r3, [pc, #36]	@ (8038418 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80383f2:	6819      	ldr	r1, [r3, #0]
 80383f4:	3003      	adds	r0, #3
 80383f6:	f020 0303 	bic.w	r3, r0, #3
 80383fa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80383fe:	4418      	add	r0, r3
 8038400:	4770      	bx	lr
 8038402:	2b0d      	cmp	r3, #13
 8038404:	d101      	bne.n	803840a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8038406:	300d      	adds	r0, #13
 8038408:	4770      	bx	lr
 803840a:	2000      	movs	r0, #0
 803840c:	4770      	bx	lr
 803840e:	bf00      	nop
 8038410:	2000b960 	.word	0x2000b960
 8038414:	2000b968 	.word	0x2000b968
 8038418:	2000b944 	.word	0x2000b944
 803841c:	2000b964 	.word	0x2000b964
 8038420:	2000b948 	.word	0x2000b948

08038424 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8038424:	b510      	push	{r4, lr}
 8038426:	4a17      	ldr	r2, [pc, #92]	@ (8038484 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8038428:	8803      	ldrh	r3, [r0, #0]
 803842a:	8812      	ldrh	r2, [r2, #0]
 803842c:	4293      	cmp	r3, r2
 803842e:	d20c      	bcs.n	803844a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8038430:	4a15      	ldr	r2, [pc, #84]	@ (8038488 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8038432:	6812      	ldr	r2, [r2, #0]
 8038434:	2114      	movs	r1, #20
 8038436:	fb01 2303 	mla	r3, r1, r3, r2
 803843a:	7c58      	ldrb	r0, [r3, #17]
 803843c:	0942      	lsrs	r2, r0, #5
 803843e:	7cd8      	ldrb	r0, [r3, #19]
 8038440:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8038444:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8038448:	bd10      	pop	{r4, pc}
 803844a:	4910      	ldr	r1, [pc, #64]	@ (803848c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 803844c:	8809      	ldrh	r1, [r1, #0]
 803844e:	4411      	add	r1, r2
 8038450:	428b      	cmp	r3, r1
 8038452:	da09      	bge.n	8038468 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8038454:	1a9b      	subs	r3, r3, r2
 8038456:	4a0e      	ldr	r2, [pc, #56]	@ (8038490 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8038458:	6812      	ldr	r2, [r2, #0]
 803845a:	210e      	movs	r1, #14
 803845c:	fb01 2303 	mla	r3, r1, r3, r2
 8038460:	7b18      	ldrb	r0, [r3, #12]
 8038462:	f000 001f 	and.w	r0, r0, #31
 8038466:	e7ef      	b.n	8038448 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8038468:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 803846c:	4293      	cmp	r3, r2
 803846e:	d106      	bne.n	803847e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8038470:	f7ef fdc4 	bl	8027ffc <_ZN8touchgfx3HAL3lcdEv>
 8038474:	6803      	ldr	r3, [r0, #0]
 8038476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803847a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803847c:	4718      	bx	r3
 803847e:	2000      	movs	r0, #0
 8038480:	e7e2      	b.n	8038448 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8038482:	bf00      	nop
 8038484:	2000b960 	.word	0x2000b960
 8038488:	2000b968 	.word	0x2000b968
 803848c:	2000b964 	.word	0x2000b964
 8038490:	2000b948 	.word	0x2000b948

08038494 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8038494:	2018      	movs	r0, #24
 8038496:	4770      	bx	lr

08038498 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8038498:	2001      	movs	r0, #1
 803849a:	4770      	bx	lr

0803849c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 803849c:	4b02      	ldr	r3, [pc, #8]	@ (80384a8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 803849e:	8818      	ldrh	r0, [r3, #0]
 80384a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80384a4:	b280      	uxth	r0, r0
 80384a6:	4770      	bx	lr
 80384a8:	2000b8da 	.word	0x2000b8da

080384ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80384ac:	2bff      	cmp	r3, #255	@ 0xff
 80384ae:	d040      	beq.n	8038532 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80384b0:	2a2c      	cmp	r2, #44	@ 0x2c
 80384b2:	d02a      	beq.n	803850a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 80384b4:	d80f      	bhi.n	80384d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80384b6:	2a08      	cmp	r2, #8
 80384b8:	d037      	beq.n	803852a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80384ba:	d805      	bhi.n	80384c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80384bc:	2a04      	cmp	r2, #4
 80384be:	d032      	beq.n	8038526 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 80384c0:	2a05      	cmp	r2, #5
 80384c2:	d02e      	beq.n	8038522 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80384c4:	2000      	movs	r0, #0
 80384c6:	4770      	bx	lr
 80384c8:	2a0a      	cmp	r2, #10
 80384ca:	d02e      	beq.n	803852a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80384cc:	d301      	bcc.n	80384d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80384ce:	2a0b      	cmp	r2, #11
 80384d0:	d1f8      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80384d2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80384d4:	4770      	bx	lr
 80384d6:	2a30      	cmp	r2, #48	@ 0x30
 80384d8:	d029      	beq.n	803852e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80384da:	d808      	bhi.n	80384ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80384dc:	2a2e      	cmp	r2, #46	@ 0x2e
 80384de:	684b      	ldr	r3, [r1, #4]
 80384e0:	d01a      	beq.n	8038518 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 80384e2:	d90b      	bls.n	80384fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80384e4:	781b      	ldrb	r3, [r3, #0]
 80384e6:	2b00      	cmp	r3, #0
 80384e8:	d1ec      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80384ea:	6a00      	ldr	r0, [r0, #32]
 80384ec:	4770      	bx	lr
 80384ee:	2a32      	cmp	r2, #50	@ 0x32
 80384f0:	d01d      	beq.n	803852e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80384f2:	d301      	bcc.n	80384f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 80384f4:	2a33      	cmp	r2, #51	@ 0x33
 80384f6:	d1e5      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80384f8:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80384fa:	4770      	bx	lr
 80384fc:	781b      	ldrb	r3, [r3, #0]
 80384fe:	2b00      	cmp	r3, #0
 8038500:	d0f3      	beq.n	80384ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8038502:	2b01      	cmp	r3, #1
 8038504:	d1de      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8038506:	6900      	ldr	r0, [r0, #16]
 8038508:	4770      	bx	lr
 803850a:	684b      	ldr	r3, [r1, #4]
 803850c:	781b      	ldrb	r3, [r3, #0]
 803850e:	b133      	cbz	r3, 803851e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8038510:	2b01      	cmp	r3, #1
 8038512:	d1d7      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8038514:	6880      	ldr	r0, [r0, #8]
 8038516:	4770      	bx	lr
 8038518:	781b      	ldrb	r3, [r3, #0]
 803851a:	2b00      	cmp	r3, #0
 803851c:	d1d2      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 803851e:	6980      	ldr	r0, [r0, #24]
 8038520:	4770      	bx	lr
 8038522:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8038524:	4770      	bx	lr
 8038526:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8038528:	4770      	bx	lr
 803852a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 803852c:	4770      	bx	lr
 803852e:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8038530:	4770      	bx	lr
 8038532:	2a2c      	cmp	r2, #44	@ 0x2c
 8038534:	d02a      	beq.n	803858c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8038536:	d80f      	bhi.n	8038558 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8038538:	2a08      	cmp	r2, #8
 803853a:	d035      	beq.n	80385a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 803853c:	d805      	bhi.n	803854a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 803853e:	2a04      	cmp	r2, #4
 8038540:	d030      	beq.n	80385a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8038542:	2a05      	cmp	r2, #5
 8038544:	d1be      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8038546:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8038548:	4770      	bx	lr
 803854a:	2a0a      	cmp	r2, #10
 803854c:	d02c      	beq.n	80385a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 803854e:	d301      	bcc.n	8038554 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8038550:	2a0b      	cmp	r2, #11
 8038552:	d1b7      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8038554:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8038556:	4770      	bx	lr
 8038558:	2a30      	cmp	r2, #48	@ 0x30
 803855a:	d027      	beq.n	80385ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 803855c:	d808      	bhi.n	8038570 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 803855e:	2a2e      	cmp	r2, #46	@ 0x2e
 8038560:	684b      	ldr	r3, [r1, #4]
 8038562:	d01a      	beq.n	803859a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8038564:	d90b      	bls.n	803857e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8038566:	781b      	ldrb	r3, [r3, #0]
 8038568:	2b00      	cmp	r3, #0
 803856a:	d1ab      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 803856c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 803856e:	4770      	bx	lr
 8038570:	2a32      	cmp	r2, #50	@ 0x32
 8038572:	d01b      	beq.n	80385ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8038574:	d301      	bcc.n	803857a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8038576:	2a33      	cmp	r2, #51	@ 0x33
 8038578:	d1a4      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 803857a:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 803857c:	4770      	bx	lr
 803857e:	781b      	ldrb	r3, [r3, #0]
 8038580:	2b00      	cmp	r3, #0
 8038582:	d0f3      	beq.n	803856c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8038584:	2b01      	cmp	r3, #1
 8038586:	d19d      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8038588:	6940      	ldr	r0, [r0, #20]
 803858a:	4770      	bx	lr
 803858c:	684b      	ldr	r3, [r1, #4]
 803858e:	781b      	ldrb	r3, [r3, #0]
 8038590:	b133      	cbz	r3, 80385a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8038592:	2b01      	cmp	r3, #1
 8038594:	d196      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8038596:	68c0      	ldr	r0, [r0, #12]
 8038598:	4770      	bx	lr
 803859a:	781b      	ldrb	r3, [r3, #0]
 803859c:	2b00      	cmp	r3, #0
 803859e:	d191      	bne.n	80384c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80385a0:	69c0      	ldr	r0, [r0, #28]
 80385a2:	4770      	bx	lr
 80385a4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80385a6:	4770      	bx	lr
 80385a8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80385aa:	4770      	bx	lr
 80385ac:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80385ae:	4770      	bx	lr

080385b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80385b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80385b4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80385b6:	9201      	str	r2, [sp, #4]
 80385b8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80385bc:	6870      	ldr	r0, [r6, #4]
 80385be:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80385c2:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80385c6:	fb00 2404 	mla	r4, r0, r4, r2
 80385ca:	6832      	ldr	r2, [r6, #0]
 80385cc:	f8dc 8000 	ldr.w	r8, [ip]
 80385d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80385d4:	fa1f fe85 	uxth.w	lr, r5
 80385d8:	43ed      	mvns	r5, r5
 80385da:	4414      	add	r4, r2
 80385dc:	b2ed      	uxtb	r5, r5
 80385de:	2900      	cmp	r1, #0
 80385e0:	dc03      	bgt.n	80385ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80385e2:	9a01      	ldr	r2, [sp, #4]
 80385e4:	2a00      	cmp	r2, #0
 80385e6:	f340 810d 	ble.w	8038804 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80385ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80385ec:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80385f0:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80385f4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80385f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80385fa:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80385fe:	2b00      	cmp	r3, #0
 8038600:	dd0e      	ble.n	8038620 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8038602:	1406      	asrs	r6, r0, #16
 8038604:	d405      	bmi.n	8038612 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8038606:	4556      	cmp	r6, sl
 8038608:	da03      	bge.n	8038612 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 803860a:	1416      	asrs	r6, r2, #16
 803860c:	d401      	bmi.n	8038612 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 803860e:	454e      	cmp	r6, r9
 8038610:	db07      	blt.n	8038622 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8038612:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8038614:	4430      	add	r0, r6
 8038616:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8038618:	3b01      	subs	r3, #1
 803861a:	4432      	add	r2, r6
 803861c:	3403      	adds	r4, #3
 803861e:	e7ee      	b.n	80385fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8038620:	d060      	beq.n	80386e4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8038622:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8038624:	1e5e      	subs	r6, r3, #1
 8038626:	fb07 0706 	mla	r7, r7, r6, r0
 803862a:	143f      	asrs	r7, r7, #16
 803862c:	d451      	bmi.n	80386d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 803862e:	4557      	cmp	r7, sl
 8038630:	da4f      	bge.n	80386d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8038632:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8038634:	fb07 2606 	mla	r6, r7, r6, r2
 8038638:	1436      	asrs	r6, r6, #16
 803863a:	d44a      	bmi.n	80386d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 803863c:	454e      	cmp	r6, r9
 803863e:	da48      	bge.n	80386d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8038640:	1ce6      	adds	r6, r4, #3
 8038642:	4699      	mov	r9, r3
 8038644:	f1b9 0f00 	cmp.w	r9, #0
 8038648:	f106 0603 	add.w	r6, r6, #3
 803864c:	dd45      	ble.n	80386da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 803864e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8038652:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8038656:	1417      	asrs	r7, r2, #16
 8038658:	fb0b a707 	mla	r7, fp, r7, sl
 803865c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8038660:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8038664:	eb08 0a07 	add.w	sl, r8, r7
 8038668:	f818 7007 	ldrb.w	r7, [r8, r7]
 803866c:	fb1b fb05 	smulbb	fp, fp, r5
 8038670:	fb07 b70e 	mla	r7, r7, lr, fp
 8038674:	b2bf      	uxth	r7, r7
 8038676:	f107 0b01 	add.w	fp, r7, #1
 803867a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 803867e:	123f      	asrs	r7, r7, #8
 8038680:	f806 7c06 	strb.w	r7, [r6, #-6]
 8038684:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8038688:	f89a 7001 	ldrb.w	r7, [sl, #1]
 803868c:	fb1b fb05 	smulbb	fp, fp, r5
 8038690:	fb07 b70e 	mla	r7, r7, lr, fp
 8038694:	b2bf      	uxth	r7, r7
 8038696:	f107 0b01 	add.w	fp, r7, #1
 803869a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 803869e:	123f      	asrs	r7, r7, #8
 80386a0:	f806 7c05 	strb.w	r7, [r6, #-5]
 80386a4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80386a8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80386ac:	fb1a fa05 	smulbb	sl, sl, r5
 80386b0:	fb07 a70e 	mla	r7, r7, lr, sl
 80386b4:	b2bf      	uxth	r7, r7
 80386b6:	f107 0a01 	add.w	sl, r7, #1
 80386ba:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80386be:	123f      	asrs	r7, r7, #8
 80386c0:	f806 7c04 	strb.w	r7, [r6, #-4]
 80386c4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80386c6:	4438      	add	r0, r7
 80386c8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80386ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80386ce:	443a      	add	r2, r7
 80386d0:	e7b8      	b.n	8038644 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80386d2:	2700      	movs	r7, #0
 80386d4:	1bde      	subs	r6, r3, r7
 80386d6:	2e00      	cmp	r6, #0
 80386d8:	dc3f      	bgt.n	803875a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80386da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80386de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80386e2:	441c      	add	r4, r3
 80386e4:	2900      	cmp	r1, #0
 80386e6:	f340 808d 	ble.w	8038804 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80386ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80386ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80386f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80386f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80386f8:	3901      	subs	r1, #1
 80386fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80386fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8038702:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8038706:	eef0 6a62 	vmov.f32	s13, s5
 803870a:	ee61 7a27 	vmul.f32	s15, s2, s15
 803870e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8038712:	ee77 2a62 	vsub.f32	s5, s14, s5
 8038716:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 803871a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 803871e:	eef0 6a43 	vmov.f32	s13, s6
 8038722:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8038726:	ee12 2a90 	vmov	r2, s5
 803872a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 803872e:	fb92 f3f3 	sdiv	r3, r2, r3
 8038732:	ee13 2a10 	vmov	r2, s6
 8038736:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803873a:	930f      	str	r3, [sp, #60]	@ 0x3c
 803873c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803873e:	fb92 f3f3 	sdiv	r3, r2, r3
 8038742:	9a01      	ldr	r2, [sp, #4]
 8038744:	9310      	str	r3, [sp, #64]	@ 0x40
 8038746:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 803874a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803874c:	eeb0 3a67 	vmov.f32	s6, s15
 8038750:	bf08      	it	eq
 8038752:	4613      	moveq	r3, r2
 8038754:	eef0 2a47 	vmov.f32	s5, s14
 8038758:	e741      	b.n	80385de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 803875a:	ea5f 4920 	movs.w	r9, r0, asr #16
 803875e:	d44b      	bmi.n	80387f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8038760:	f8dc b008 	ldr.w	fp, [ip, #8]
 8038764:	45cb      	cmp	fp, r9
 8038766:	dd47      	ble.n	80387f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8038768:	ea5f 4a22 	movs.w	sl, r2, asr #16
 803876c:	d444      	bmi.n	80387f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 803876e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8038772:	4556      	cmp	r6, sl
 8038774:	dd40      	ble.n	80387f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8038776:	fa0f f68b 	sxth.w	r6, fp
 803877a:	fb0a 9906 	mla	r9, sl, r6, r9
 803877e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8038782:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8038786:	f814 b006 	ldrb.w	fp, [r4, r6]
 803878a:	eb08 0a09 	add.w	sl, r8, r9
 803878e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8038792:	fb1b fb05 	smulbb	fp, fp, r5
 8038796:	fb09 b90e 	mla	r9, r9, lr, fp
 803879a:	fa1f f989 	uxth.w	r9, r9
 803879e:	f109 0b01 	add.w	fp, r9, #1
 80387a2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80387a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80387aa:	f804 9006 	strb.w	r9, [r4, r6]
 80387ae:	4426      	add	r6, r4
 80387b0:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80387b4:	f896 b001 	ldrb.w	fp, [r6, #1]
 80387b8:	fb1b fb05 	smulbb	fp, fp, r5
 80387bc:	fb09 b90e 	mla	r9, r9, lr, fp
 80387c0:	fa1f f989 	uxth.w	r9, r9
 80387c4:	f109 0b01 	add.w	fp, r9, #1
 80387c8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80387cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80387d0:	f886 9001 	strb.w	r9, [r6, #1]
 80387d4:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80387d8:	f896 a002 	ldrb.w	sl, [r6, #2]
 80387dc:	fb1a fa05 	smulbb	sl, sl, r5
 80387e0:	fb09 a90e 	mla	r9, r9, lr, sl
 80387e4:	fa1f f989 	uxth.w	r9, r9
 80387e8:	f109 0a01 	add.w	sl, r9, #1
 80387ec:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80387f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80387f4:	f886 9002 	strb.w	r9, [r6, #2]
 80387f8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80387fa:	4430      	add	r0, r6
 80387fc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80387fe:	3701      	adds	r7, #1
 8038800:	4432      	add	r2, r6
 8038802:	e767      	b.n	80386d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8038804:	b003      	add	sp, #12
 8038806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803880a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 803880a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803880e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8038810:	9201      	str	r2, [sp, #4]
 8038812:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8038816:	6868      	ldr	r0, [r5, #4]
 8038818:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 803881a:	fb00 2404 	mla	r4, r0, r4, r2
 803881e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8038822:	682a      	ldr	r2, [r5, #0]
 8038824:	f8d7 8000 	ldr.w	r8, [r7]
 8038828:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 803882c:	4414      	add	r4, r2
 803882e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8038832:	2900      	cmp	r1, #0
 8038834:	dc03      	bgt.n	803883e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8038836:	9a01      	ldr	r2, [sp, #4]
 8038838:	2a00      	cmp	r2, #0
 803883a:	f340 80af 	ble.w	803899c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 803883e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8038840:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8038844:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8038848:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 803884c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803884e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8038852:	2b00      	cmp	r3, #0
 8038854:	dd0c      	ble.n	8038870 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8038856:	1405      	asrs	r5, r0, #16
 8038858:	d405      	bmi.n	8038866 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 803885a:	4555      	cmp	r5, sl
 803885c:	da03      	bge.n	8038866 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 803885e:	1415      	asrs	r5, r2, #16
 8038860:	d401      	bmi.n	8038866 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8038862:	454d      	cmp	r5, r9
 8038864:	db05      	blt.n	8038872 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8038866:	4470      	add	r0, lr
 8038868:	4462      	add	r2, ip
 803886a:	3b01      	subs	r3, #1
 803886c:	3403      	adds	r4, #3
 803886e:	e7f0      	b.n	8038852 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8038870:	d038      	beq.n	80388e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8038872:	1e5d      	subs	r5, r3, #1
 8038874:	fb0e 0605 	mla	r6, lr, r5, r0
 8038878:	1436      	asrs	r6, r6, #16
 803887a:	d42a      	bmi.n	80388d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 803887c:	4556      	cmp	r6, sl
 803887e:	da28      	bge.n	80388d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8038880:	fb0c 2505 	mla	r5, ip, r5, r2
 8038884:	142d      	asrs	r5, r5, #16
 8038886:	d424      	bmi.n	80388d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8038888:	454d      	cmp	r5, r9
 803888a:	da22      	bge.n	80388d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 803888c:	1ce6      	adds	r6, r4, #3
 803888e:	4699      	mov	r9, r3
 8038890:	f1b9 0f00 	cmp.w	r9, #0
 8038894:	f106 0603 	add.w	r6, r6, #3
 8038898:	dd1f      	ble.n	80388da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 803889a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 803889e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80388a2:	1415      	asrs	r5, r2, #16
 80388a4:	fb0b a505 	mla	r5, fp, r5, sl
 80388a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80388ac:	eb08 0a05 	add.w	sl, r8, r5
 80388b0:	f818 5005 	ldrb.w	r5, [r8, r5]
 80388b4:	f806 5c06 	strb.w	r5, [r6, #-6]
 80388b8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80388bc:	f806 5c05 	strb.w	r5, [r6, #-5]
 80388c0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80388c4:	f806 5c04 	strb.w	r5, [r6, #-4]
 80388c8:	4470      	add	r0, lr
 80388ca:	4462      	add	r2, ip
 80388cc:	f109 39ff 	add.w	r9, r9, #4294967295
 80388d0:	e7de      	b.n	8038890 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80388d2:	2600      	movs	r6, #0
 80388d4:	1b9d      	subs	r5, r3, r6
 80388d6:	2d00      	cmp	r5, #0
 80388d8:	dc38      	bgt.n	803894c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80388da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80388de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80388e2:	441c      	add	r4, r3
 80388e4:	2900      	cmp	r1, #0
 80388e6:	dd59      	ble.n	803899c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80388e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80388ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80388f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80388f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80388f6:	3901      	subs	r1, #1
 80388f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80388fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8038900:	eeb0 6a62 	vmov.f32	s12, s5
 8038904:	ee61 7a27 	vmul.f32	s15, s2, s15
 8038908:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 803890c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8038910:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8038914:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8038918:	eeb0 6a43 	vmov.f32	s12, s6
 803891c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8038920:	ee12 2a90 	vmov	r2, s5
 8038924:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8038928:	fb92 fef3 	sdiv	lr, r2, r3
 803892c:	ee13 2a10 	vmov	r2, s6
 8038930:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8038934:	fb92 fcf3 	sdiv	ip, r2, r3
 8038938:	9a01      	ldr	r2, [sp, #4]
 803893a:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 803893e:	bf08      	it	eq
 8038940:	4613      	moveq	r3, r2
 8038942:	eeb0 3a67 	vmov.f32	s6, s15
 8038946:	eef0 2a47 	vmov.f32	s5, s14
 803894a:	e772      	b.n	8038832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 803894c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8038950:	d420      	bmi.n	8038994 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8038952:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8038956:	45cb      	cmp	fp, r9
 8038958:	dd1c      	ble.n	8038994 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 803895a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 803895e:	d419      	bmi.n	8038994 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8038960:	68fd      	ldr	r5, [r7, #12]
 8038962:	4555      	cmp	r5, sl
 8038964:	dd16      	ble.n	8038994 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8038966:	fa0f f58b 	sxth.w	r5, fp
 803896a:	fb0a 9505 	mla	r5, sl, r5, r9
 803896e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8038972:	eb08 0b05 	add.w	fp, r8, r5
 8038976:	f818 9005 	ldrb.w	r9, [r8, r5]
 803897a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 803897e:	f804 9005 	strb.w	r9, [r4, r5]
 8038982:	4425      	add	r5, r4
 8038984:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8038988:	f885 9001 	strb.w	r9, [r5, #1]
 803898c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8038990:	f885 9002 	strb.w	r9, [r5, #2]
 8038994:	4470      	add	r0, lr
 8038996:	4462      	add	r2, ip
 8038998:	3601      	adds	r6, #1
 803899a:	e79b      	b.n	80388d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 803899c:	b003      	add	sp, #12
 803899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080389a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80389a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80389a6:	b085      	sub	sp, #20
 80389a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80389ac:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80389ae:	9202      	str	r2, [sp, #8]
 80389b0:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80389b4:	9203      	str	r2, [sp, #12]
 80389b6:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 80389ba:	6860      	ldr	r0, [r4, #4]
 80389bc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80389c0:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80389c4:	fb00 2505 	mla	r5, r0, r5, r2
 80389c8:	6822      	ldr	r2, [r4, #0]
 80389ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80389ce:	4415      	add	r5, r2
 80389d0:	f8dc 2000 	ldr.w	r2, [ip]
 80389d4:	9201      	str	r2, [sp, #4]
 80389d6:	2900      	cmp	r1, #0
 80389d8:	dc03      	bgt.n	80389e2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80389da:	9a02      	ldr	r2, [sp, #8]
 80389dc:	2a00      	cmp	r2, #0
 80389de:	f340 8122 	ble.w	8038c26 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80389e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80389e4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80389e8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80389ec:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80389f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80389f2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80389f6:	2b00      	cmp	r3, #0
 80389f8:	dd0d      	ble.n	8038a16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80389fa:	1422      	asrs	r2, r4, #16
 80389fc:	d405      	bmi.n	8038a0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80389fe:	4542      	cmp	r2, r8
 8038a00:	da03      	bge.n	8038a0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8038a02:	1402      	asrs	r2, r0, #16
 8038a04:	d401      	bmi.n	8038a0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8038a06:	42ba      	cmp	r2, r7
 8038a08:	db06      	blt.n	8038a18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8038a0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8038a0c:	4474      	add	r4, lr
 8038a0e:	4410      	add	r0, r2
 8038a10:	3b01      	subs	r3, #1
 8038a12:	3503      	adds	r5, #3
 8038a14:	e7ef      	b.n	80389f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8038a16:	d072      	beq.n	8038afe <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8038a18:	1e5a      	subs	r2, r3, #1
 8038a1a:	fb0e 4602 	mla	r6, lr, r2, r4
 8038a1e:	1436      	asrs	r6, r6, #16
 8038a20:	d462      	bmi.n	8038ae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8038a22:	4546      	cmp	r6, r8
 8038a24:	da60      	bge.n	8038ae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8038a26:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8038a28:	fb06 0202 	mla	r2, r6, r2, r0
 8038a2c:	1412      	asrs	r2, r2, #16
 8038a2e:	d45b      	bmi.n	8038ae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8038a30:	42ba      	cmp	r2, r7
 8038a32:	da59      	bge.n	8038ae8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8038a34:	1cef      	adds	r7, r5, #3
 8038a36:	4699      	mov	r9, r3
 8038a38:	f1b9 0f00 	cmp.w	r9, #0
 8038a3c:	dd5a      	ble.n	8038af4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8038a3e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8038a42:	1426      	asrs	r6, r4, #16
 8038a44:	1402      	asrs	r2, r0, #16
 8038a46:	fb08 6202 	mla	r2, r8, r2, r6
 8038a4a:	9e01      	ldr	r6, [sp, #4]
 8038a4c:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8038a50:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8038a54:	d041      	beq.n	8038ada <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8038a56:	9a03      	ldr	r2, [sp, #12]
 8038a58:	fb02 f808 	mul.w	r8, r2, r8
 8038a5c:	f108 0201 	add.w	r2, r8, #1
 8038a60:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8038a64:	1212      	asrs	r2, r2, #8
 8038a66:	fa1f fa82 	uxth.w	sl, r2
 8038a6a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8038a6e:	fa5f fb86 	uxtb.w	fp, r6
 8038a72:	43d2      	mvns	r2, r2
 8038a74:	b2d2      	uxtb	r2, r2
 8038a76:	fb1b fb0a 	smulbb	fp, fp, sl
 8038a7a:	fb08 b802 	mla	r8, r8, r2, fp
 8038a7e:	fa1f f888 	uxth.w	r8, r8
 8038a82:	f108 0b01 	add.w	fp, r8, #1
 8038a86:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8038a8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8038a8e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8038a92:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8038a96:	fb1b fb0a 	smulbb	fp, fp, sl
 8038a9a:	f807 8c03 	strb.w	r8, [r7, #-3]
 8038a9e:	fb16 fa0a 	smulbb	sl, r6, sl
 8038aa2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8038aa6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8038aaa:	fb08 b802 	mla	r8, r8, r2, fp
 8038aae:	fb06 aa02 	mla	sl, r6, r2, sl
 8038ab2:	fa1f f888 	uxth.w	r8, r8
 8038ab6:	fa1f fa8a 	uxth.w	sl, sl
 8038aba:	f108 0b01 	add.w	fp, r8, #1
 8038abe:	f10a 0601 	add.w	r6, sl, #1
 8038ac2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8038ac6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8038aca:	ea4f 2828 	mov.w	r8, r8, asr #8
 8038ace:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8038ad2:	f807 8c02 	strb.w	r8, [r7, #-2]
 8038ad6:	f807 ac01 	strb.w	sl, [r7, #-1]
 8038ada:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8038adc:	4474      	add	r4, lr
 8038ade:	4410      	add	r0, r2
 8038ae0:	3703      	adds	r7, #3
 8038ae2:	f109 39ff 	add.w	r9, r9, #4294967295
 8038ae6:	e7a7      	b.n	8038a38 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8038ae8:	f04f 0800 	mov.w	r8, #0
 8038aec:	eba3 0208 	sub.w	r2, r3, r8
 8038af0:	2a00      	cmp	r2, #0
 8038af2:	dc3b      	bgt.n	8038b6c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8038af4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8038af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8038afc:	441d      	add	r5, r3
 8038afe:	2900      	cmp	r1, #0
 8038b00:	f340 8091 	ble.w	8038c26 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8038b04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8038b08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8038b0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8038b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8038b12:	3901      	subs	r1, #1
 8038b14:	ee31 1a05 	vadd.f32	s2, s2, s10
 8038b18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8038b1c:	eeb0 6a62 	vmov.f32	s12, s5
 8038b20:	ee61 7a27 	vmul.f32	s15, s2, s15
 8038b24:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8038b28:	ee77 2a62 	vsub.f32	s5, s14, s5
 8038b2c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8038b30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8038b34:	eeb0 6a43 	vmov.f32	s12, s6
 8038b38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8038b3c:	ee12 2a90 	vmov	r2, s5
 8038b40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8038b44:	fb92 fef3 	sdiv	lr, r2, r3
 8038b48:	ee13 2a10 	vmov	r2, s6
 8038b4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8038b50:	fb92 f3f3 	sdiv	r3, r2, r3
 8038b54:	9a02      	ldr	r2, [sp, #8]
 8038b56:	9312      	str	r3, [sp, #72]	@ 0x48
 8038b58:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8038b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8038b5e:	eeb0 3a67 	vmov.f32	s6, s15
 8038b62:	bf08      	it	eq
 8038b64:	4613      	moveq	r3, r2
 8038b66:	eef0 2a47 	vmov.f32	s5, s14
 8038b6a:	e734      	b.n	80389d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8038b6c:	1427      	asrs	r7, r4, #16
 8038b6e:	d454      	bmi.n	8038c1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8038b70:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8038b74:	42be      	cmp	r6, r7
 8038b76:	dd50      	ble.n	8038c1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8038b78:	ea5f 4920 	movs.w	r9, r0, asr #16
 8038b7c:	d44d      	bmi.n	8038c1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8038b7e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8038b82:	454a      	cmp	r2, r9
 8038b84:	dd49      	ble.n	8038c1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8038b86:	b236      	sxth	r6, r6
 8038b88:	9a01      	ldr	r2, [sp, #4]
 8038b8a:	fb09 7606 	mla	r6, r9, r6, r7
 8038b8e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8038b92:	0e3a      	lsrs	r2, r7, #24
 8038b94:	d041      	beq.n	8038c1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8038b96:	9e03      	ldr	r6, [sp, #12]
 8038b98:	4372      	muls	r2, r6
 8038b9a:	1c56      	adds	r6, r2, #1
 8038b9c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8038ba0:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8038ba4:	1212      	asrs	r2, r2, #8
 8038ba6:	f815 9006 	ldrb.w	r9, [r5, r6]
 8038baa:	fa1f fa82 	uxth.w	sl, r2
 8038bae:	fa5f fb87 	uxtb.w	fp, r7
 8038bb2:	43d2      	mvns	r2, r2
 8038bb4:	b2d2      	uxtb	r2, r2
 8038bb6:	fb1b fb0a 	smulbb	fp, fp, sl
 8038bba:	fb09 b902 	mla	r9, r9, r2, fp
 8038bbe:	fa1f f989 	uxth.w	r9, r9
 8038bc2:	f109 0b01 	add.w	fp, r9, #1
 8038bc6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8038bca:	ea4f 2929 	mov.w	r9, r9, asr #8
 8038bce:	f805 9006 	strb.w	r9, [r5, r6]
 8038bd2:	442e      	add	r6, r5
 8038bd4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8038bd8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8038bdc:	fb1b fb0a 	smulbb	fp, fp, sl
 8038be0:	f896 9001 	ldrb.w	r9, [r6, #1]
 8038be4:	fb17 fa0a 	smulbb	sl, r7, sl
 8038be8:	78b7      	ldrb	r7, [r6, #2]
 8038bea:	fb09 b902 	mla	r9, r9, r2, fp
 8038bee:	fb07 aa02 	mla	sl, r7, r2, sl
 8038bf2:	fa1f f989 	uxth.w	r9, r9
 8038bf6:	fa1f fa8a 	uxth.w	sl, sl
 8038bfa:	f109 0b01 	add.w	fp, r9, #1
 8038bfe:	f10a 0701 	add.w	r7, sl, #1
 8038c02:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8038c06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8038c0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8038c0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8038c12:	f886 9001 	strb.w	r9, [r6, #1]
 8038c16:	f886 a002 	strb.w	sl, [r6, #2]
 8038c1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8038c1c:	4474      	add	r4, lr
 8038c1e:	4410      	add	r0, r2
 8038c20:	f108 0801 	add.w	r8, r8, #1
 8038c24:	e762      	b.n	8038aec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8038c26:	b005      	add	sp, #20
 8038c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08038c2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8038c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8038c30:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8038c32:	9201      	str	r2, [sp, #4]
 8038c34:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8038c38:	6860      	ldr	r0, [r4, #4]
 8038c3a:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8038c3e:	fb00 2505 	mla	r5, r0, r5, r2
 8038c42:	6822      	ldr	r2, [r4, #0]
 8038c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8038c48:	4415      	add	r5, r2
 8038c4a:	f8dc 2000 	ldr.w	r2, [ip]
 8038c4e:	9200      	str	r2, [sp, #0]
 8038c50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8038c54:	2900      	cmp	r1, #0
 8038c56:	dc03      	bgt.n	8038c60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8038c58:	9a01      	ldr	r2, [sp, #4]
 8038c5a:	2a00      	cmp	r2, #0
 8038c5c:	f340 812b 	ble.w	8038eb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8038c60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8038c62:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8038c66:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8038c6a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8038c6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8038c70:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8038c74:	2b00      	cmp	r3, #0
 8038c76:	dd0e      	ble.n	8038c96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8038c78:	1422      	asrs	r2, r4, #16
 8038c7a:	d405      	bmi.n	8038c88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8038c7c:	4572      	cmp	r2, lr
 8038c7e:	da03      	bge.n	8038c88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8038c80:	1402      	asrs	r2, r0, #16
 8038c82:	d401      	bmi.n	8038c88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8038c84:	42ba      	cmp	r2, r7
 8038c86:	db07      	blt.n	8038c98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8038c88:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8038c8a:	4414      	add	r4, r2
 8038c8c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8038c8e:	3b01      	subs	r3, #1
 8038c90:	4410      	add	r0, r2
 8038c92:	3503      	adds	r5, #3
 8038c94:	e7ee      	b.n	8038c74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8038c96:	d06f      	beq.n	8038d78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8038c98:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8038c9a:	1e5a      	subs	r2, r3, #1
 8038c9c:	fb06 4602 	mla	r6, r6, r2, r4
 8038ca0:	1436      	asrs	r6, r6, #16
 8038ca2:	d45e      	bmi.n	8038d62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8038ca4:	4576      	cmp	r6, lr
 8038ca6:	da5c      	bge.n	8038d62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8038ca8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8038caa:	fb06 0202 	mla	r2, r6, r2, r0
 8038cae:	1412      	asrs	r2, r2, #16
 8038cb0:	d457      	bmi.n	8038d62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8038cb2:	42ba      	cmp	r2, r7
 8038cb4:	da55      	bge.n	8038d62 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8038cb6:	1cee      	adds	r6, r5, #3
 8038cb8:	469a      	mov	sl, r3
 8038cba:	f1ba 0f00 	cmp.w	sl, #0
 8038cbe:	dd56      	ble.n	8038d6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8038cc0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8038cc4:	1427      	asrs	r7, r4, #16
 8038cc6:	1402      	asrs	r2, r0, #16
 8038cc8:	fb0e 7202 	mla	r2, lr, r2, r7
 8038ccc:	9f00      	ldr	r7, [sp, #0]
 8038cce:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8038cd2:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8038cd6:	d03c      	beq.n	8038d52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8038cd8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8038cdc:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8038ce0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8038ce4:	fa5f f28e 	uxtb.w	r2, lr
 8038ce8:	b2ff      	uxtb	r7, r7
 8038cea:	f000 80dd 	beq.w	8038ea8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8038cee:	fa1f f882 	uxth.w	r8, r2
 8038cf2:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8038cf6:	43d2      	mvns	r2, r2
 8038cf8:	b2d2      	uxtb	r2, r2
 8038cfa:	fb17 f708 	smulbb	r7, r7, r8
 8038cfe:	fb0e 7702 	mla	r7, lr, r2, r7
 8038d02:	b2bf      	uxth	r7, r7
 8038d04:	f107 0e01 	add.w	lr, r7, #1
 8038d08:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8038d0c:	123f      	asrs	r7, r7, #8
 8038d0e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8038d12:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8038d16:	fb19 f908 	smulbb	r9, r9, r8
 8038d1a:	fb07 9902 	mla	r9, r7, r2, r9
 8038d1e:	fa1f f989 	uxth.w	r9, r9
 8038d22:	f109 0701 	add.w	r7, r9, #1
 8038d26:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8038d2a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8038d2e:	fb1b f808 	smulbb	r8, fp, r8
 8038d32:	fb07 8802 	mla	r8, r7, r2, r8
 8038d36:	fa1f f888 	uxth.w	r8, r8
 8038d3a:	f108 0201 	add.w	r2, r8, #1
 8038d3e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8038d42:	ea4f 2929 	mov.w	r9, r9, asr #8
 8038d46:	ea4f 2828 	mov.w	r8, r8, asr #8
 8038d4a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8038d4e:	f806 8c01 	strb.w	r8, [r6, #-1]
 8038d52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8038d54:	4414      	add	r4, r2
 8038d56:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8038d58:	3603      	adds	r6, #3
 8038d5a:	4410      	add	r0, r2
 8038d5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8038d60:	e7ab      	b.n	8038cba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8038d62:	f04f 0e00 	mov.w	lr, #0
 8038d66:	eba3 020e 	sub.w	r2, r3, lr
 8038d6a:	2a00      	cmp	r2, #0
 8038d6c:	dc3d      	bgt.n	8038dea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8038d6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8038d72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8038d76:	441d      	add	r5, r3
 8038d78:	2900      	cmp	r1, #0
 8038d7a:	f340 809c 	ble.w	8038eb6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8038d7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8038d82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8038d86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8038d8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8038d8c:	3901      	subs	r1, #1
 8038d8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8038d92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8038d96:	eeb0 6a62 	vmov.f32	s12, s5
 8038d9a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8038d9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8038da2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8038da6:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8038daa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8038dae:	eeb0 6a43 	vmov.f32	s12, s6
 8038db2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8038db6:	ee12 2a90 	vmov	r2, s5
 8038dba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8038dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8038dc2:	ee13 2a10 	vmov	r2, s6
 8038dc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8038dca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8038dcc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8038dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8038dd2:	9a01      	ldr	r2, [sp, #4]
 8038dd4:	9310      	str	r3, [sp, #64]	@ 0x40
 8038dd6:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8038dda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8038ddc:	eeb0 3a67 	vmov.f32	s6, s15
 8038de0:	bf08      	it	eq
 8038de2:	4613      	moveq	r3, r2
 8038de4:	eef0 2a47 	vmov.f32	s5, s14
 8038de8:	e734      	b.n	8038c54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8038dea:	1427      	asrs	r7, r4, #16
 8038dec:	d44d      	bmi.n	8038e8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8038dee:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8038df2:	42be      	cmp	r6, r7
 8038df4:	dd49      	ble.n	8038e8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8038df6:	ea5f 4820 	movs.w	r8, r0, asr #16
 8038dfa:	d446      	bmi.n	8038e8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8038dfc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8038e00:	4542      	cmp	r2, r8
 8038e02:	dd42      	ble.n	8038e8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8038e04:	b236      	sxth	r6, r6
 8038e06:	9a00      	ldr	r2, [sp, #0]
 8038e08:	fb08 7606 	mla	r6, r8, r6, r7
 8038e0c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8038e10:	0e3a      	lsrs	r2, r7, #24
 8038e12:	d03a      	beq.n	8038e8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8038e14:	2aff      	cmp	r2, #255	@ 0xff
 8038e16:	b2d6      	uxtb	r6, r2
 8038e18:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8038e1c:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8038e20:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8038e24:	b2ff      	uxtb	r7, r7
 8038e26:	d037      	beq.n	8038e98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8038e28:	4472      	add	r2, lr
 8038e2a:	fa1f f986 	uxth.w	r9, r6
 8038e2e:	f815 8002 	ldrb.w	r8, [r5, r2]
 8038e32:	43f6      	mvns	r6, r6
 8038e34:	b2f6      	uxtb	r6, r6
 8038e36:	fb17 f709 	smulbb	r7, r7, r9
 8038e3a:	fb08 7706 	mla	r7, r8, r6, r7
 8038e3e:	b2bf      	uxth	r7, r7
 8038e40:	f107 0801 	add.w	r8, r7, #1
 8038e44:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8038e48:	123f      	asrs	r7, r7, #8
 8038e4a:	54af      	strb	r7, [r5, r2]
 8038e4c:	442a      	add	r2, r5
 8038e4e:	fb1a fa09 	smulbb	sl, sl, r9
 8038e52:	7857      	ldrb	r7, [r2, #1]
 8038e54:	fb07 aa06 	mla	sl, r7, r6, sl
 8038e58:	fa1f fa8a 	uxth.w	sl, sl
 8038e5c:	f10a 0701 	add.w	r7, sl, #1
 8038e60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8038e64:	7897      	ldrb	r7, [r2, #2]
 8038e66:	fb1b f909 	smulbb	r9, fp, r9
 8038e6a:	fb07 9906 	mla	r9, r7, r6, r9
 8038e6e:	fa1f f989 	uxth.w	r9, r9
 8038e72:	f109 0601 	add.w	r6, r9, #1
 8038e76:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8038e7a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8038e7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8038e82:	f882 a001 	strb.w	sl, [r2, #1]
 8038e86:	f882 9002 	strb.w	r9, [r2, #2]
 8038e8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8038e8c:	4414      	add	r4, r2
 8038e8e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8038e90:	f10e 0e01 	add.w	lr, lr, #1
 8038e94:	4410      	add	r0, r2
 8038e96:	e766      	b.n	8038d66 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8038e98:	4472      	add	r2, lr
 8038e9a:	54af      	strb	r7, [r5, r2]
 8038e9c:	442a      	add	r2, r5
 8038e9e:	f882 a001 	strb.w	sl, [r2, #1]
 8038ea2:	f882 b002 	strb.w	fp, [r2, #2]
 8038ea6:	e7f0      	b.n	8038e8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8038ea8:	f806 7c03 	strb.w	r7, [r6, #-3]
 8038eac:	f806 9c02 	strb.w	r9, [r6, #-2]
 8038eb0:	f806 bc01 	strb.w	fp, [r6, #-1]
 8038eb4:	e74d      	b.n	8038d52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8038eb6:	b003      	add	sp, #12
 8038eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08038ebc <_ZN8touchgfx8LCD24bppD1Ev>:
 8038ebc:	4770      	bx	lr

08038ebe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8038ebe:	4770      	bx	lr

08038ec0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8038ec0:	4770      	bx	lr

08038ec2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8038ec2:	4770      	bx	lr

08038ec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8038ec4:	4770      	bx	lr

08038ec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8038ec6:	4770      	bx	lr

08038ec8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8038ec8:	4770      	bx	lr

08038eca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8038eca:	4770      	bx	lr

08038ecc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8038ecc:	4770      	bx	lr
	...

08038ed0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8038ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8038ed2:	4606      	mov	r6, r0
 8038ed4:	b087      	sub	sp, #28
 8038ed6:	4615      	mov	r5, r2
 8038ed8:	461f      	mov	r7, r3
 8038eda:	b353      	cbz	r3, 8038f32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8038edc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8038ee0:	2b00      	cmp	r3, #0
 8038ee2:	dd26      	ble.n	8038f32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8038ee4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8038ee8:	2b00      	cmp	r3, #0
 8038eea:	dd22      	ble.n	8038f32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8038eec:	6808      	ldr	r0, [r1, #0]
 8038eee:	6849      	ldr	r1, [r1, #4]
 8038ef0:	4c1b      	ldr	r4, [pc, #108]	@ (8038f60 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8038ef2:	aa04      	add	r2, sp, #16
 8038ef4:	c203      	stmia	r2!, {r0, r1}
 8038ef6:	a804      	add	r0, sp, #16
 8038ef8:	f7fb fdae 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8038efc:	6820      	ldr	r0, [r4, #0]
 8038efe:	6803      	ldr	r3, [r0, #0]
 8038f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8038f02:	4798      	blx	r3
 8038f04:	2fff      	cmp	r7, #255	@ 0xff
 8038f06:	d016      	beq.n	8038f36 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8038f08:	f010 0f08 	tst.w	r0, #8
 8038f0c:	6820      	ldr	r0, [r4, #0]
 8038f0e:	d015      	beq.n	8038f3c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8038f10:	2400      	movs	r4, #0
 8038f12:	6801      	ldr	r1, [r0, #0]
 8038f14:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8038f18:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8038f1c:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8038f20:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8038f24:	9401      	str	r4, [sp, #4]
 8038f26:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8038f2a:	9400      	str	r4, [sp, #0]
 8038f2c:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8038f2e:	4629      	mov	r1, r5
 8038f30:	47a0      	blx	r4
 8038f32:	b007      	add	sp, #28
 8038f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8038f36:	f010 0f02 	tst.w	r0, #2
 8038f3a:	e7e7      	b.n	8038f0c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8038f3c:	6803      	ldr	r3, [r0, #0]
 8038f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8038f40:	4798      	blx	r3
 8038f42:	4b08      	ldr	r3, [pc, #32]	@ (8038f64 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8038f44:	881a      	ldrh	r2, [r3, #0]
 8038f46:	6833      	ldr	r3, [r6, #0]
 8038f48:	e9cd 5700 	strd	r5, r7, [sp]
 8038f4c:	4601      	mov	r1, r0
 8038f4e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8038f50:	4630      	mov	r0, r6
 8038f52:	ab04      	add	r3, sp, #16
 8038f54:	47a8      	blx	r5
 8038f56:	6820      	ldr	r0, [r4, #0]
 8038f58:	6803      	ldr	r3, [r0, #0]
 8038f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8038f5c:	4798      	blx	r3
 8038f5e:	e7e8      	b.n	8038f32 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8038f60:	2000b8e0 	.word	0x2000b8e0
 8038f64:	2000b8da 	.word	0x2000b8da

08038f68 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8038f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8038f6c:	b08b      	sub	sp, #44	@ 0x2c
 8038f6e:	460d      	mov	r5, r1
 8038f70:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8038f74:	4616      	mov	r6, r2
 8038f76:	f1b8 0f00 	cmp.w	r8, #0
 8038f7a:	d047      	beq.n	803900c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8038f7c:	6810      	ldr	r0, [r2, #0]
 8038f7e:	6851      	ldr	r1, [r2, #4]
 8038f80:	4f50      	ldr	r7, [pc, #320]	@ (80390c4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x15c>)
 8038f82:	ac06      	add	r4, sp, #24
 8038f84:	c403      	stmia	r4!, {r0, r1}
 8038f86:	6818      	ldr	r0, [r3, #0]
 8038f88:	6859      	ldr	r1, [r3, #4]
 8038f8a:	ac08      	add	r4, sp, #32
 8038f8c:	c403      	stmia	r4!, {r0, r1}
 8038f8e:	a806      	add	r0, sp, #24
 8038f90:	f7fb fd62 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8038f94:	4631      	mov	r1, r6
 8038f96:	a808      	add	r0, sp, #32
 8038f98:	f7fb fda2 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8038f9c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8038fa0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8038fa4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8038fa8:	6838      	ldr	r0, [r7, #0]
 8038faa:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8038fae:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8038fb2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8038fb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8038fba:	440d      	add	r5, r1
 8038fbc:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8038fc0:	440a      	add	r2, r1
 8038fc2:	f8ad 2020 	strh.w	r2, [sp, #32]
 8038fc6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8038fca:	4413      	add	r3, r2
 8038fcc:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8038fd0:	6803      	ldr	r3, [r0, #0]
 8038fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8038fd4:	4798      	blx	r3
 8038fd6:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8038fda:	d01a      	beq.n	8039012 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8038fdc:	f010 0f04 	tst.w	r0, #4
 8038fe0:	6838      	ldr	r0, [r7, #0]
 8038fe2:	d019      	beq.n	8039018 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8038fe4:	2100      	movs	r1, #0
 8038fe6:	6807      	ldr	r7, [r0, #0]
 8038fe8:	f8cd 800c 	str.w	r8, [sp, #12]
 8038fec:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8038ff0:	b2a4      	uxth	r4, r4
 8038ff2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8038ff6:	9102      	str	r1, [sp, #8]
 8038ff8:	b2b6      	uxth	r6, r6
 8038ffa:	9401      	str	r4, [sp, #4]
 8038ffc:	9600      	str	r6, [sp, #0]
 8038ffe:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8039002:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8039006:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8039008:	4629      	mov	r1, r5
 803900a:	47a0      	blx	r4
 803900c:	b00b      	add	sp, #44	@ 0x2c
 803900e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8039012:	f010 0f01 	tst.w	r0, #1
 8039016:	e7e3      	b.n	8038fe0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8039018:	6803      	ldr	r3, [r0, #0]
 803901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803901c:	4798      	blx	r3
 803901e:	4a2a      	ldr	r2, [pc, #168]	@ (80390c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8039020:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8039024:	8813      	ldrh	r3, [r2, #0]
 8039026:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 803902a:	fb03 c101 	mla	r1, r3, r1, ip
 803902e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8039032:	435c      	muls	r4, r3
 8039034:	4408      	add	r0, r1
 8039036:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 803903a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 803903e:	4404      	add	r4, r0
 8039040:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8039044:	d02e      	beq.n	80390a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13c>
 8039046:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 803904a:	1b9b      	subs	r3, r3, r6
 803904c:	1b96      	subs	r6, r2, r6
 803904e:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8039052:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8039056:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 803905a:	42a0      	cmp	r0, r4
 803905c:	d22d      	bcs.n	80390ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x152>
 803905e:	eb00 0e01 	add.w	lr, r0, r1
 8039062:	4570      	cmp	r0, lr
 8039064:	d210      	bcs.n	8039088 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x120>
 8039066:	f890 9000 	ldrb.w	r9, [r0]
 803906a:	f815 2b01 	ldrb.w	r2, [r5], #1
 803906e:	fb19 f90c 	smulbb	r9, r9, ip
 8039072:	fb02 9208 	mla	r2, r2, r8, r9
 8039076:	b292      	uxth	r2, r2
 8039078:	f102 0901 	add.w	r9, r2, #1
 803907c:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8039080:	1212      	asrs	r2, r2, #8
 8039082:	f800 2b01 	strb.w	r2, [r0], #1
 8039086:	e7ec      	b.n	8039062 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8039088:	4418      	add	r0, r3
 803908a:	4435      	add	r5, r6
 803908c:	e7e5      	b.n	803905a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf2>
 803908e:	8813      	ldrh	r3, [r2, #0]
 8039090:	1b9b      	subs	r3, r3, r6
 8039092:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8039096:	4418      	add	r0, r3
 8039098:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 803909c:	1b9b      	subs	r3, r3, r6
 803909e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80390a2:	441d      	add	r5, r3
 80390a4:	42a0      	cmp	r0, r4
 80390a6:	d208      	bcs.n	80390ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x152>
 80390a8:	eb00 0c01 	add.w	ip, r0, r1
 80390ac:	4560      	cmp	r0, ip
 80390ae:	d2ee      	bcs.n	803908e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 80390b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80390b4:	f800 3b01 	strb.w	r3, [r0], #1
 80390b8:	e7f8      	b.n	80390ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x144>
 80390ba:	6838      	ldr	r0, [r7, #0]
 80390bc:	6803      	ldr	r3, [r0, #0]
 80390be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80390c0:	4798      	blx	r3
 80390c2:	e7a3      	b.n	803900c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80390c4:	2000b8e0 	.word	0x2000b8e0
 80390c8:	2000b8da 	.word	0x2000b8da

080390cc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80390cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80390ce:	b085      	sub	sp, #20
 80390d0:	2300      	movs	r3, #0
 80390d2:	9300      	str	r3, [sp, #0]
 80390d4:	4b41      	ldr	r3, [pc, #260]	@ (80391dc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 80390d6:	781b      	ldrb	r3, [r3, #0]
 80390d8:	2b00      	cmp	r3, #0
 80390da:	d136      	bne.n	803914a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80390dc:	4a40      	ldr	r2, [pc, #256]	@ (80391e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80390de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80390e2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80390e6:	2b00      	cmp	r3, #0
 80390e8:	d131      	bne.n	803914e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80390ea:	4b3e      	ldr	r3, [pc, #248]	@ (80391e4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80390ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80390f0:	6808      	ldr	r0, [r1, #0]
 80390f2:	6849      	ldr	r1, [r1, #4]
 80390f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80390f8:	ac02      	add	r4, sp, #8
 80390fa:	ab02      	add	r3, sp, #8
 80390fc:	c303      	stmia	r3!, {r0, r1}
 80390fe:	4669      	mov	r1, sp
 8039100:	4620      	mov	r0, r4
 8039102:	f7fb fced 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8039106:	4668      	mov	r0, sp
 8039108:	f7fb fca6 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 803910c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8039110:	f8bd 2000 	ldrh.w	r2, [sp]
 8039114:	4d34      	ldr	r5, [pc, #208]	@ (80391e8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8039116:	4413      	add	r3, r2
 8039118:	f8ad 3008 	strh.w	r3, [sp, #8]
 803911c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8039120:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8039124:	6828      	ldr	r0, [r5, #0]
 8039126:	4413      	add	r3, r2
 8039128:	f8ad 300a 	strh.w	r3, [sp, #10]
 803912c:	6803      	ldr	r3, [r0, #0]
 803912e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8039130:	4798      	blx	r3
 8039132:	f010 0f01 	tst.w	r0, #1
 8039136:	462e      	mov	r6, r5
 8039138:	d00b      	beq.n	8039152 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 803913a:	6828      	ldr	r0, [r5, #0]
 803913c:	6803      	ldr	r3, [r0, #0]
 803913e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8039142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8039144:	4798      	blx	r3
 8039146:	b005      	add	sp, #20
 8039148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803914a:	4a26      	ldr	r2, [pc, #152]	@ (80391e4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 803914c:	e7c7      	b.n	80390de <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 803914e:	4b24      	ldr	r3, [pc, #144]	@ (80391e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8039150:	e7cc      	b.n	80390ec <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8039152:	6830      	ldr	r0, [r6, #0]
 8039154:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8039158:	6803      	ldr	r3, [r0, #0]
 803915a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 803915e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8039160:	4798      	blx	r3
 8039162:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8039166:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 803916a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 803916e:	fb14 3402 	smlabb	r4, r4, r2, r3
 8039172:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8039176:	4404      	add	r4, r0
 8039178:	6830      	ldr	r0, [r6, #0]
 803917a:	6803      	ldr	r3, [r0, #0]
 803917c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803917e:	4798      	blx	r3
 8039180:	4917      	ldr	r1, [pc, #92]	@ (80391e0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8039182:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8039186:	880b      	ldrh	r3, [r1, #0]
 8039188:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 803918c:	fb03 c202 	mla	r2, r3, r2, ip
 8039190:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8039194:	437b      	muls	r3, r7
 8039196:	4410      	add	r0, r2
 8039198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 803919c:	18c2      	adds	r2, r0, r3
 803919e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80391a2:	4290      	cmp	r0, r2
 80391a4:	d214      	bcs.n	80391d0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80391a6:	eb00 0c07 	add.w	ip, r0, r7
 80391aa:	4560      	cmp	r0, ip
 80391ac:	d204      	bcs.n	80391b8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80391ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 80391b2:	f800 3b01 	strb.w	r3, [r0], #1
 80391b6:	e7f8      	b.n	80391aa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80391b8:	880b      	ldrh	r3, [r1, #0]
 80391ba:	1b5b      	subs	r3, r3, r5
 80391bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80391c0:	4418      	add	r0, r3
 80391c2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80391c6:	1b5b      	subs	r3, r3, r5
 80391c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80391cc:	441c      	add	r4, r3
 80391ce:	e7e8      	b.n	80391a2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 80391d0:	6830      	ldr	r0, [r6, #0]
 80391d2:	6803      	ldr	r3, [r0, #0]
 80391d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80391d6:	4798      	blx	r3
 80391d8:	e7b5      	b.n	8039146 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80391da:	bf00      	nop
 80391dc:	2000b8d8 	.word	0x2000b8d8
 80391e0:	2000b8da 	.word	0x2000b8da
 80391e4:	2000b8dc 	.word	0x2000b8dc
 80391e8:	2000b8e0 	.word	0x2000b8e0

080391ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80391ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80391f0:	b089      	sub	sp, #36	@ 0x24
 80391f2:	ac08      	add	r4, sp, #32
 80391f4:	4607      	mov	r7, r0
 80391f6:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80391fa:	4620      	mov	r0, r4
 80391fc:	4689      	mov	r9, r1
 80391fe:	4692      	mov	sl, r2
 8039200:	461e      	mov	r6, r3
 8039202:	f7ff f88b 	bl	803831c <_ZNK8touchgfx6Bitmap7getDataEv>
 8039206:	683b      	ldr	r3, [r7, #0]
 8039208:	4605      	mov	r5, r0
 803920a:	4620      	mov	r0, r4
 803920c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8039210:	f7fe ff98 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8039214:	4683      	mov	fp, r0
 8039216:	4620      	mov	r0, r4
 8039218:	f7fe ffc8 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 803921c:	4653      	mov	r3, sl
 803921e:	e9cd b001 	strd	fp, r0, [sp, #4]
 8039222:	464a      	mov	r2, r9
 8039224:	4639      	mov	r1, r7
 8039226:	a806      	add	r0, sp, #24
 8039228:	9500      	str	r5, [sp, #0]
 803922a:	47c0      	blx	r8
 803922c:	a906      	add	r1, sp, #24
 803922e:	4630      	mov	r0, r6
 8039230:	f7fe fe6c 	bl	8037f0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8039234:	4628      	mov	r0, r5
 8039236:	b009      	add	sp, #36	@ 0x24
 8039238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803923c <_ZN8touchgfx8LCD24bppD0Ev>:
 803923c:	b510      	push	{r4, lr}
 803923e:	2164      	movs	r1, #100	@ 0x64
 8039240:	4604      	mov	r4, r0
 8039242:	f003 f952 	bl	803c4ea <_ZdlPvj>
 8039246:	4620      	mov	r0, r4
 8039248:	bd10      	pop	{r4, pc}

0803924a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 803924a:	b510      	push	{r4, lr}
 803924c:	2104      	movs	r1, #4
 803924e:	4604      	mov	r4, r0
 8039250:	f003 f94b 	bl	803c4ea <_ZdlPvj>
 8039254:	4620      	mov	r0, r4
 8039256:	bd10      	pop	{r4, pc}

08039258 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8039258:	b510      	push	{r4, lr}
 803925a:	2104      	movs	r1, #4
 803925c:	4604      	mov	r4, r0
 803925e:	f003 f944 	bl	803c4ea <_ZdlPvj>
 8039262:	4620      	mov	r0, r4
 8039264:	bd10      	pop	{r4, pc}

08039266 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8039266:	b510      	push	{r4, lr}
 8039268:	2104      	movs	r1, #4
 803926a:	4604      	mov	r4, r0
 803926c:	f003 f93d 	bl	803c4ea <_ZdlPvj>
 8039270:	4620      	mov	r0, r4
 8039272:	bd10      	pop	{r4, pc}

08039274 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8039274:	b510      	push	{r4, lr}
 8039276:	2104      	movs	r1, #4
 8039278:	4604      	mov	r4, r0
 803927a:	f003 f936 	bl	803c4ea <_ZdlPvj>
 803927e:	4620      	mov	r0, r4
 8039280:	bd10      	pop	{r4, pc}

08039282 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8039282:	b510      	push	{r4, lr}
 8039284:	2104      	movs	r1, #4
 8039286:	4604      	mov	r4, r0
 8039288:	f003 f92f 	bl	803c4ea <_ZdlPvj>
 803928c:	4620      	mov	r0, r4
 803928e:	bd10      	pop	{r4, pc}

08039290 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8039290:	b510      	push	{r4, lr}
 8039292:	2104      	movs	r1, #4
 8039294:	4604      	mov	r4, r0
 8039296:	f003 f928 	bl	803c4ea <_ZdlPvj>
 803929a:	4620      	mov	r0, r4
 803929c:	bd10      	pop	{r4, pc}

0803929e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 803929e:	b510      	push	{r4, lr}
 80392a0:	2104      	movs	r1, #4
 80392a2:	4604      	mov	r4, r0
 80392a4:	f003 f921 	bl	803c4ea <_ZdlPvj>
 80392a8:	4620      	mov	r0, r4
 80392aa:	bd10      	pop	{r4, pc}

080392ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80392ac:	b510      	push	{r4, lr}
 80392ae:	2104      	movs	r1, #4
 80392b0:	4604      	mov	r4, r0
 80392b2:	f003 f91a 	bl	803c4ea <_ZdlPvj>
 80392b6:	4620      	mov	r0, r4
 80392b8:	bd10      	pop	{r4, pc}

080392ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80392ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80392be:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80392c2:	9c06      	ldr	r4, [sp, #24]
 80392c4:	2800      	cmp	r0, #0
 80392c6:	d06c      	beq.n	80393a2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 80392c8:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80392cc:	2d00      	cmp	r5, #0
 80392ce:	dd68      	ble.n	80393a2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 80392d0:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80392d4:	f1bc 0f00 	cmp.w	ip, #0
 80392d8:	dd63      	ble.n	80393a2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 80392da:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80392de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80392e2:	fb02 3306 	mla	r3, r2, r6, r3
 80392e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80392ea:	4419      	add	r1, r3
 80392ec:	fb02 f30c 	mul.w	r3, r2, ip
 80392f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80392f4:	1b52      	subs	r2, r2, r5
 80392f6:	28ff      	cmp	r0, #255	@ 0xff
 80392f8:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80392fc:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8039300:	440b      	add	r3, r1
 8039302:	b2e4      	uxtb	r4, r4
 8039304:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8039308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803930c:	d03e      	beq.n	803938c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 803930e:	fa1f fc80 	uxth.w	ip, r0
 8039312:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8039316:	fb06 f60c 	mul.w	r6, r6, ip
 803931a:	fb07 f70c 	mul.w	r7, r7, ip
 803931e:	fb04 f40c 	mul.w	r4, r4, ip
 8039322:	b280      	uxth	r0, r0
 8039324:	4299      	cmp	r1, r3
 8039326:	d23c      	bcs.n	80393a2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 8039328:	eb01 0c05 	add.w	ip, r1, r5
 803932c:	458c      	cmp	ip, r1
 803932e:	f101 0e03 	add.w	lr, r1, #3
 8039332:	d928      	bls.n	8039386 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xcc>
 8039334:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8039338:	fb11 f100 	smulbb	r1, r1, r0
 803933c:	4421      	add	r1, r4
 803933e:	b289      	uxth	r1, r1
 8039340:	f101 0801 	add.w	r8, r1, #1
 8039344:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8039348:	1209      	asrs	r1, r1, #8
 803934a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 803934e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8039352:	fb11 f100 	smulbb	r1, r1, r0
 8039356:	4439      	add	r1, r7
 8039358:	b289      	uxth	r1, r1
 803935a:	f101 0801 	add.w	r8, r1, #1
 803935e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8039362:	1209      	asrs	r1, r1, #8
 8039364:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8039368:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 803936c:	fb11 f100 	smulbb	r1, r1, r0
 8039370:	4431      	add	r1, r6
 8039372:	b289      	uxth	r1, r1
 8039374:	f101 0801 	add.w	r8, r1, #1
 8039378:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 803937c:	1209      	asrs	r1, r1, #8
 803937e:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8039382:	4671      	mov	r1, lr
 8039384:	e7d2      	b.n	803932c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x72>
 8039386:	4411      	add	r1, r2
 8039388:	e7cc      	b.n	8039324 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6a>
 803938a:	4411      	add	r1, r2
 803938c:	4299      	cmp	r1, r3
 803938e:	d208      	bcs.n	80393a2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe8>
 8039390:	1948      	adds	r0, r1, r5
 8039392:	4281      	cmp	r1, r0
 8039394:	d2f9      	bcs.n	803938a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd0>
 8039396:	700c      	strb	r4, [r1, #0]
 8039398:	704f      	strb	r7, [r1, #1]
 803939a:	3103      	adds	r1, #3
 803939c:	f801 6c01 	strb.w	r6, [r1, #-1]
 80393a0:	e7f7      	b.n	8039392 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd8>
 80393a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080393a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80393a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80393ac:	b093      	sub	sp, #76	@ 0x4c
 80393ae:	4699      	mov	r9, r3
 80393b0:	4617      	mov	r7, r2
 80393b2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 80393b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80393ba:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 80393be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80393c2:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80393c6:	4604      	mov	r4, r0
 80393c8:	460d      	mov	r5, r1
 80393ca:	a80c      	add	r0, sp, #48	@ 0x30
 80393cc:	4649      	mov	r1, r9
 80393ce:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80393d2:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 80393d6:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 80393da:	f7f6 fe3f 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 80393de:	4639      	mov	r1, r7
 80393e0:	a80c      	add	r0, sp, #48	@ 0x30
 80393e2:	f7f6 fe3b 	bl	803005c <_ZN8touchgfx4RectaNERKS0_>
 80393e6:	4b77      	ldr	r3, [pc, #476]	@ (80395c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80393e8:	8818      	ldrh	r0, [r3, #0]
 80393ea:	4b77      	ldr	r3, [pc, #476]	@ (80395c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80393ec:	8819      	ldrh	r1, [r3, #0]
 80393ee:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80393f2:	2b00      	cmp	r3, #0
 80393f4:	b202      	sxth	r2, r0
 80393f6:	b20f      	sxth	r7, r1
 80393f8:	da07      	bge.n	803940a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 80393fa:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 80393fe:	4463      	add	r3, ip
 8039400:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8039404:	2300      	movs	r3, #0
 8039406:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 803940a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 803940e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8039412:	1ad2      	subs	r2, r2, r3
 8039414:	4594      	cmp	ip, r2
 8039416:	bfc4      	itt	gt
 8039418:	1ac2      	subgt	r2, r0, r3
 803941a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 803941e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8039422:	2a00      	cmp	r2, #0
 8039424:	da07      	bge.n	8039436 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8039426:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 803942a:	4462      	add	r2, ip
 803942c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8039430:	2200      	movs	r2, #0
 8039432:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8039436:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 803943a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 803943e:	1abf      	subs	r7, r7, r2
 8039440:	45bc      	cmp	ip, r7
 8039442:	f8df c18c 	ldr.w	ip, [pc, #396]	@ 80395d0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>
 8039446:	f89c c000 	ldrb.w	ip, [ip]
 803944a:	bfc4      	itt	gt
 803944c:	1a8f      	subgt	r7, r1, r2
 803944e:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8039452:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8039456:	f1bc 0f00 	cmp.w	ip, #0
 803945a:	d176      	bne.n	803954a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a2>
 803945c:	4287      	cmp	r7, r0
 803945e:	bf14      	ite	ne
 8039460:	2100      	movne	r1, #0
 8039462:	2101      	moveq	r1, #1
 8039464:	2f00      	cmp	r7, #0
 8039466:	9107      	str	r1, [sp, #28]
 8039468:	dd73      	ble.n	8039552 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1aa>
 803946a:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 803946e:	9104      	str	r1, [sp, #16]
 8039470:	2900      	cmp	r1, #0
 8039472:	dd6e      	ble.n	8039552 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1aa>
 8039474:	f8b9 1000 	ldrh.w	r1, [r9]
 8039478:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 803947c:	1a5b      	subs	r3, r3, r1
 803947e:	b21b      	sxth	r3, r3
 8039480:	9305      	str	r3, [sp, #20]
 8039482:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8039486:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 803948a:	1ad2      	subs	r2, r2, r3
 803948c:	b213      	sxth	r3, r2
 803948e:	9306      	str	r3, [sp, #24]
 8039490:	9b05      	ldr	r3, [sp, #20]
 8039492:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8039496:	9b06      	ldr	r3, [sp, #24]
 8039498:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 803949c:	9b04      	ldr	r3, [sp, #16]
 803949e:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 80394a2:	a910      	add	r1, sp, #64	@ 0x40
 80394a4:	2300      	movs	r3, #0
 80394a6:	a80e      	add	r0, sp, #56	@ 0x38
 80394a8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80394ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80394ae:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 80394b2:	f7fb fb15 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80394b6:	4640      	mov	r0, r8
 80394b8:	f7fb face 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80394bc:	a810      	add	r0, sp, #64	@ 0x40
 80394be:	f7fb facb 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80394c2:	4b42      	ldr	r3, [pc, #264]	@ (80395cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 80394c4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80394c8:	881b      	ldrh	r3, [r3, #0]
 80394ca:	9308      	str	r3, [sp, #32]
 80394cc:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80394d0:	b21b      	sxth	r3, r3
 80394d2:	9303      	str	r3, [sp, #12]
 80394d4:	682b      	ldr	r3, [r5, #0]
 80394d6:	f8df a0fc 	ldr.w	sl, [pc, #252]	@ 80395d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80394da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80394dc:	4628      	mov	r0, r5
 80394de:	4798      	blx	r3
 80394e0:	9a03      	ldr	r2, [sp, #12]
 80394e2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80394e6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80394ea:	fb13 f302 	smulbb	r3, r3, r2
 80394ee:	2203      	movs	r2, #3
 80394f0:	fb15 3302 	smlabb	r3, r5, r2, r3
 80394f4:	4681      	mov	r9, r0
 80394f6:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 80394f8:	f8da 0000 	ldr.w	r0, [sl]
 80394fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80394fe:	441d      	add	r5, r3
 8039500:	6803      	ldr	r3, [r0, #0]
 8039502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8039504:	4798      	blx	r3
 8039506:	9009      	str	r0, [sp, #36]	@ 0x24
 8039508:	f8da 0000 	ldr.w	r0, [sl]
 803950c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8039510:	6803      	ldr	r3, [r0, #0]
 8039512:	910a      	str	r1, [sp, #40]	@ 0x28
 8039514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8039516:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 803951a:	4798      	blx	r3
 803951c:	f010 0f01 	tst.w	r0, #1
 8039520:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8039524:	d01e      	beq.n	8039564 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1bc>
 8039526:	f8da 0000 	ldr.w	r0, [sl]
 803952a:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 803952e:	6803      	ldr	r3, [r0, #0]
 8039530:	9200      	str	r2, [sp, #0]
 8039532:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8039534:	e898 0006 	ldmia.w	r8, {r1, r2}
 8039538:	462b      	mov	r3, r5
 803953a:	47b0      	blx	r6
 803953c:	9b05      	ldr	r3, [sp, #20]
 803953e:	8023      	strh	r3, [r4, #0]
 8039540:	9b06      	ldr	r3, [sp, #24]
 8039542:	8063      	strh	r3, [r4, #2]
 8039544:	80a7      	strh	r7, [r4, #4]
 8039546:	9b04      	ldr	r3, [sp, #16]
 8039548:	e007      	b.n	803955a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b2>
 803954a:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 803954e:	4288      	cmp	r0, r1
 8039550:	e785      	b.n	803945e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8039552:	2300      	movs	r3, #0
 8039554:	8023      	strh	r3, [r4, #0]
 8039556:	8063      	strh	r3, [r4, #2]
 8039558:	80a3      	strh	r3, [r4, #4]
 803955a:	4620      	mov	r0, r4
 803955c:	80e3      	strh	r3, [r4, #6]
 803955e:	b013      	add	sp, #76	@ 0x4c
 8039560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039564:	fb09 f606 	mul.w	r6, r9, r6
 8039568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803956a:	fb11 6602 	smlabb	r6, r1, r2, r6
 803956e:	9a07      	ldr	r2, [sp, #28]
 8039570:	4433      	add	r3, r6
 8039572:	461e      	mov	r6, r3
 8039574:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8039578:	b16a      	cbz	r2, 8039596 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ee>
 803957a:	9a08      	ldr	r2, [sp, #32]
 803957c:	4593      	cmp	fp, r2
 803957e:	d10a      	bne.n	8039596 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ee>
 8039580:	f8da 0000 	ldr.w	r0, [sl]
 8039584:	6802      	ldr	r2, [r0, #0]
 8039586:	fb09 f303 	mul.w	r3, r9, r3
 803958a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 803958e:	4629      	mov	r1, r5
 8039590:	4632      	mov	r2, r6
 8039592:	47d0      	blx	sl
 8039594:	e7d2      	b.n	803953c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x194>
 8039596:	9a03      	ldr	r2, [sp, #12]
 8039598:	f8df b038 	ldr.w	fp, [pc, #56]	@ 80395d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 803959c:	fb02 5803 	mla	r8, r2, r3, r5
 80395a0:	4545      	cmp	r5, r8
 80395a2:	d2cb      	bcs.n	803953c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x194>
 80395a4:	f8db 0000 	ldr.w	r0, [fp]
 80395a8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80395ac:	6802      	ldr	r2, [r0, #0]
 80395ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80395b2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80395b6:	4629      	mov	r1, r5
 80395b8:	4632      	mov	r2, r6
 80395ba:	47d0      	blx	sl
 80395bc:	9b03      	ldr	r3, [sp, #12]
 80395be:	444e      	add	r6, r9
 80395c0:	441d      	add	r5, r3
 80395c2:	e7ed      	b.n	80395a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f8>
 80395c4:	2000b8d4 	.word	0x2000b8d4
 80395c8:	2000b8d6 	.word	0x2000b8d6
 80395cc:	2000b8da 	.word	0x2000b8da
 80395d0:	2000b8d8 	.word	0x2000b8d8
 80395d4:	2000b8e0 	.word	0x2000b8e0

080395d8 <_ZN8touchgfx8LCD24bppC1Ev>:
 80395d8:	2200      	movs	r2, #0
 80395da:	490d      	ldr	r1, [pc, #52]	@ (8039610 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 80395dc:	6042      	str	r2, [r0, #4]
 80395de:	6001      	str	r1, [r0, #0]
 80395e0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80395e4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80395e8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80395ec:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80395f0:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 80395f4:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 80395f8:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 80395fc:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8039600:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 8039604:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 8039608:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 803960c:	6602      	str	r2, [r0, #96]	@ 0x60
 803960e:	4770      	bx	lr
 8039610:	08043adc 	.word	0x08043adc

08039614 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8039614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039618:	4607      	mov	r7, r0
 803961a:	b091      	sub	sp, #68	@ 0x44
 803961c:	6810      	ldr	r0, [r2, #0]
 803961e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8039622:	4d66      	ldr	r5, [pc, #408]	@ (80397bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8039624:	f8df a198 	ldr.w	sl, [pc, #408]	@ 80397c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8039628:	4688      	mov	r8, r1
 803962a:	6851      	ldr	r1, [r2, #4]
 803962c:	ac0c      	add	r4, sp, #48	@ 0x30
 803962e:	c403      	stmia	r4!, {r0, r1}
 8039630:	6818      	ldr	r0, [r3, #0]
 8039632:	6859      	ldr	r1, [r3, #4]
 8039634:	ac0e      	add	r4, sp, #56	@ 0x38
 8039636:	4616      	mov	r6, r2
 8039638:	c403      	stmia	r4!, {r0, r1}
 803963a:	a80c      	add	r0, sp, #48	@ 0x30
 803963c:	f7fb fa0c 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8039640:	4631      	mov	r1, r6
 8039642:	a80e      	add	r0, sp, #56	@ 0x38
 8039644:	f7fb fa4c 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8039648:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 803964c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8039650:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8039654:	6828      	ldr	r0, [r5, #0]
 8039656:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 803965a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 803965e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8039662:	440f      	add	r7, r1
 8039664:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8039668:	440a      	add	r2, r1
 803966a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 803966e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8039672:	4413      	add	r3, r2
 8039674:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8039678:	6803      	ldr	r3, [r0, #0]
 803967a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803967c:	4798      	blx	r3
 803967e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8039682:	6828      	ldr	r0, [r5, #0]
 8039684:	d01f      	beq.n	80396c6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8039686:	2201      	movs	r2, #1
 8039688:	2500      	movs	r5, #0
 803968a:	6801      	ldr	r1, [r0, #0]
 803968c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8039690:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8039694:	250b      	movs	r5, #11
 8039696:	9507      	str	r5, [sp, #28]
 8039698:	f8ba 5000 	ldrh.w	r5, [sl]
 803969c:	f8cd 9010 	str.w	r9, [sp, #16]
 80396a0:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80396a4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80396a8:	9203      	str	r2, [sp, #12]
 80396aa:	b2a4      	uxth	r4, r4
 80396ac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80396b0:	9200      	str	r2, [sp, #0]
 80396b2:	b2b6      	uxth	r6, r6
 80396b4:	9602      	str	r6, [sp, #8]
 80396b6:	9401      	str	r4, [sp, #4]
 80396b8:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80396ba:	4642      	mov	r2, r8
 80396bc:	4639      	mov	r1, r7
 80396be:	47a0      	blx	r4
 80396c0:	b011      	add	sp, #68	@ 0x44
 80396c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80396c6:	6803      	ldr	r3, [r0, #0]
 80396c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80396ca:	4798      	blx	r3
 80396cc:	f8ba 5000 	ldrh.w	r5, [sl]
 80396d0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80396d4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80396d8:	fb05 2303 	mla	r3, r5, r3, r2
 80396dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80396e0:	4418      	add	r0, r3
 80396e2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80396e6:	436e      	muls	r6, r5
 80396e8:	1b1b      	subs	r3, r3, r4
 80396ea:	1b2d      	subs	r5, r5, r4
 80396ec:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80396f0:	1982      	adds	r2, r0, r6
 80396f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80396f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80396f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80396fc:	f04f 0e04 	mov.w	lr, #4
 8039700:	4290      	cmp	r0, r2
 8039702:	d254      	bcs.n	80397ae <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8039704:	eb00 0a04 	add.w	sl, r0, r4
 8039708:	4550      	cmp	r0, sl
 803970a:	d24c      	bcs.n	80397a6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 803970c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8039710:	fb1e e101 	smlabb	r1, lr, r1, lr
 8039714:	eb08 0c01 	add.w	ip, r8, r1
 8039718:	f89c 3003 	ldrb.w	r3, [ip, #3]
 803971c:	b173      	cbz	r3, 803973c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 803971e:	2bff      	cmp	r3, #255	@ 0xff
 8039720:	f818 b001 	ldrb.w	fp, [r8, r1]
 8039724:	d10c      	bne.n	8039740 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8039726:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 803972a:	d109      	bne.n	8039740 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 803972c:	f880 b000 	strb.w	fp, [r0]
 8039730:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8039734:	7043      	strb	r3, [r0, #1]
 8039736:	f89c 3002 	ldrb.w	r3, [ip, #2]
 803973a:	7083      	strb	r3, [r0, #2]
 803973c:	3003      	adds	r0, #3
 803973e:	e7e3      	b.n	8039708 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8039740:	fb09 f103 	mul.w	r1, r9, r3
 8039744:	1c4b      	adds	r3, r1, #1
 8039746:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 803974a:	121b      	asrs	r3, r3, #8
 803974c:	b29e      	uxth	r6, r3
 803974e:	7801      	ldrb	r1, [r0, #0]
 8039750:	43db      	mvns	r3, r3
 8039752:	b2db      	uxtb	r3, r3
 8039754:	fb1b fb06 	smulbb	fp, fp, r6
 8039758:	fb01 b103 	mla	r1, r1, r3, fp
 803975c:	b289      	uxth	r1, r1
 803975e:	f101 0b01 	add.w	fp, r1, #1
 8039762:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8039766:	1209      	asrs	r1, r1, #8
 8039768:	7001      	strb	r1, [r0, #0]
 803976a:	f890 b001 	ldrb.w	fp, [r0, #1]
 803976e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8039772:	fb1b fb03 	smulbb	fp, fp, r3
 8039776:	fb01 b106 	mla	r1, r1, r6, fp
 803977a:	b289      	uxth	r1, r1
 803977c:	f101 0b01 	add.w	fp, r1, #1
 8039780:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8039784:	1209      	asrs	r1, r1, #8
 8039786:	7041      	strb	r1, [r0, #1]
 8039788:	f89c 1002 	ldrb.w	r1, [ip, #2]
 803978c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8039790:	fb1c f303 	smulbb	r3, ip, r3
 8039794:	fb01 3606 	mla	r6, r1, r6, r3
 8039798:	b2b6      	uxth	r6, r6
 803979a:	1c73      	adds	r3, r6, #1
 803979c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80397a0:	1236      	asrs	r6, r6, #8
 80397a2:	7086      	strb	r6, [r0, #2]
 80397a4:	e7ca      	b.n	803973c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80397a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80397a8:	4428      	add	r0, r5
 80397aa:	441f      	add	r7, r3
 80397ac:	e7a8      	b.n	8039700 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80397ae:	4b03      	ldr	r3, [pc, #12]	@ (80397bc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80397b0:	6818      	ldr	r0, [r3, #0]
 80397b2:	6803      	ldr	r3, [r0, #0]
 80397b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80397b6:	4798      	blx	r3
 80397b8:	e782      	b.n	80396c0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80397ba:	bf00      	nop
 80397bc:	2000b8e0 	.word	0x2000b8e0
 80397c0:	2000b8da 	.word	0x2000b8da

080397c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80397c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80397c8:	4680      	mov	r8, r0
 80397ca:	b091      	sub	sp, #68	@ 0x44
 80397cc:	6810      	ldr	r0, [r2, #0]
 80397ce:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 80397d2:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 8039974 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80397d6:	f8df a1a0 	ldr.w	sl, [pc, #416]	@ 8039978 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80397da:	460e      	mov	r6, r1
 80397dc:	6851      	ldr	r1, [r2, #4]
 80397de:	ad0c      	add	r5, sp, #48	@ 0x30
 80397e0:	c503      	stmia	r5!, {r0, r1}
 80397e2:	6818      	ldr	r0, [r3, #0]
 80397e4:	6859      	ldr	r1, [r3, #4]
 80397e6:	ad0e      	add	r5, sp, #56	@ 0x38
 80397e8:	4614      	mov	r4, r2
 80397ea:	c503      	stmia	r5!, {r0, r1}
 80397ec:	a80c      	add	r0, sp, #48	@ 0x30
 80397ee:	f7fb f933 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80397f2:	4621      	mov	r1, r4
 80397f4:	a80e      	add	r0, sp, #56	@ 0x38
 80397f6:	f7fb f973 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80397fa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80397fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8039802:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8039806:	f8d9 0000 	ldr.w	r0, [r9]
 803980a:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 803980e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8039812:	eb08 0401 	add.w	r4, r8, r1
 8039816:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 803981a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 803981e:	440a      	add	r2, r1
 8039820:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8039824:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8039828:	4413      	add	r3, r2
 803982a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 803982e:	6803      	ldr	r3, [r0, #0]
 8039830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8039832:	4798      	blx	r3
 8039834:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8039838:	f8d9 0000 	ldr.w	r0, [r9]
 803983c:	d022      	beq.n	8039884 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 803983e:	2200      	movs	r2, #0
 8039840:	f04f 0c01 	mov.w	ip, #1
 8039844:	6801      	ldr	r1, [r0, #0]
 8039846:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 803984a:	e9cd c208 	strd	ip, r2, [sp, #32]
 803984e:	f04f 0c0b 	mov.w	ip, #11
 8039852:	f8cd c01c 	str.w	ip, [sp, #28]
 8039856:	f8ba c000 	ldrh.w	ip, [sl]
 803985a:	9704      	str	r7, [sp, #16]
 803985c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8039860:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8039864:	9203      	str	r2, [sp, #12]
 8039866:	fa1f f288 	uxth.w	r2, r8
 803986a:	b2ad      	uxth	r5, r5
 803986c:	9201      	str	r2, [sp, #4]
 803986e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8039872:	9200      	str	r2, [sp, #0]
 8039874:	9502      	str	r5, [sp, #8]
 8039876:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8039878:	4632      	mov	r2, r6
 803987a:	4621      	mov	r1, r4
 803987c:	47a8      	blx	r5
 803987e:	b011      	add	sp, #68	@ 0x44
 8039880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039884:	6803      	ldr	r3, [r0, #0]
 8039886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8039888:	4798      	blx	r3
 803988a:	f8ba 2000 	ldrh.w	r2, [sl]
 803988e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8039892:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8039896:	4355      	muls	r5, r2
 8039898:	fb02 1303 	mla	r3, r2, r3, r1
 803989c:	eba2 0208 	sub.w	r2, r2, r8
 80398a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80398a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80398a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80398ac:	4418      	add	r0, r3
 80398ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80398b0:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 80398b4:	1943      	adds	r3, r0, r5
 80398b6:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 80398ba:	eba2 0208 	sub.w	r2, r2, r8
 80398be:	f04f 0e03 	mov.w	lr, #3
 80398c2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80398c6:	fa1f fc87 	uxth.w	ip, r7
 80398ca:	b2ad      	uxth	r5, r5
 80398cc:	4298      	cmp	r0, r3
 80398ce:	d24a      	bcs.n	8039966 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80398d0:	eb00 0908 	add.w	r9, r0, r8
 80398d4:	4621      	mov	r1, r4
 80398d6:	4548      	cmp	r0, r9
 80398d8:	460c      	mov	r4, r1
 80398da:	d240      	bcs.n	803995e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80398dc:	7824      	ldrb	r4, [r4, #0]
 80398de:	f04f 0a04 	mov.w	sl, #4
 80398e2:	fb1e a404 	smlabb	r4, lr, r4, sl
 80398e6:	2fff      	cmp	r7, #255	@ 0xff
 80398e8:	f101 0101 	add.w	r1, r1, #1
 80398ec:	eb06 0a04 	add.w	sl, r6, r4
 80398f0:	f816 b004 	ldrb.w	fp, [r6, r4]
 80398f4:	d02b      	beq.n	803994e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80398f6:	7804      	ldrb	r4, [r0, #0]
 80398f8:	fb14 f405 	smulbb	r4, r4, r5
 80398fc:	fb0b 440c 	mla	r4, fp, ip, r4
 8039900:	b2a4      	uxth	r4, r4
 8039902:	f104 0b01 	add.w	fp, r4, #1
 8039906:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 803990a:	1224      	asrs	r4, r4, #8
 803990c:	7004      	strb	r4, [r0, #0]
 803990e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8039912:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8039916:	fb1b fb05 	smulbb	fp, fp, r5
 803991a:	fb04 b40c 	mla	r4, r4, ip, fp
 803991e:	b2a4      	uxth	r4, r4
 8039920:	f104 0b01 	add.w	fp, r4, #1
 8039924:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8039928:	1224      	asrs	r4, r4, #8
 803992a:	7044      	strb	r4, [r0, #1]
 803992c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8039930:	f890 a002 	ldrb.w	sl, [r0, #2]
 8039934:	fb1a fa05 	smulbb	sl, sl, r5
 8039938:	fb04 a40c 	mla	r4, r4, ip, sl
 803993c:	b2a4      	uxth	r4, r4
 803993e:	f104 0a01 	add.w	sl, r4, #1
 8039942:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8039946:	1224      	asrs	r4, r4, #8
 8039948:	7084      	strb	r4, [r0, #2]
 803994a:	3003      	adds	r0, #3
 803994c:	e7c3      	b.n	80398d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 803994e:	f880 b000 	strb.w	fp, [r0]
 8039952:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8039956:	7044      	strb	r4, [r0, #1]
 8039958:	f89a 4002 	ldrb.w	r4, [sl, #2]
 803995c:	e7f4      	b.n	8039948 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 803995e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8039960:	4420      	add	r0, r4
 8039962:	188c      	adds	r4, r1, r2
 8039964:	e7b2      	b.n	80398cc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8039966:	4b03      	ldr	r3, [pc, #12]	@ (8039974 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8039968:	6818      	ldr	r0, [r3, #0]
 803996a:	6803      	ldr	r3, [r0, #0]
 803996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803996e:	4798      	blx	r3
 8039970:	e785      	b.n	803987e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8039972:	bf00      	nop
 8039974:	2000b8e0 	.word	0x2000b8e0
 8039978:	2000b8da 	.word	0x2000b8da

0803997c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 803997c:	b4f0      	push	{r4, r5, r6, r7}
 803997e:	460c      	mov	r4, r1
 8039980:	4611      	mov	r1, r2
 8039982:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8039986:	780f      	ldrb	r7, [r1, #0]
 8039988:	784e      	ldrb	r6, [r1, #1]
 803998a:	461a      	mov	r2, r3
 803998c:	9b04      	ldr	r3, [sp, #16]
 803998e:	b11f      	cbz	r7, 8039998 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8039990:	2f01      	cmp	r7, #1
 8039992:	d01d      	beq.n	80399d0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8039994:	bcf0      	pop	{r4, r5, r6, r7}
 8039996:	4770      	bx	lr
 8039998:	2e03      	cmp	r6, #3
 803999a:	d8fb      	bhi.n	8039994 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 803999c:	e8df f006 	tbb	[pc, r6]
 80399a0:	16140702 	.word	0x16140702
 80399a4:	9504      	str	r5, [sp, #16]
 80399a6:	4620      	mov	r0, r4
 80399a8:	bcf0      	pop	{r4, r5, r6, r7}
 80399aa:	f7ff be33 	b.w	8039614 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80399ae:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80399b0:	2800      	cmp	r0, #0
 80399b2:	d0ef      	beq.n	8039994 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80399b4:	6806      	ldr	r6, [r0, #0]
 80399b6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80399ba:	68f5      	ldr	r5, [r6, #12]
 80399bc:	4613      	mov	r3, r2
 80399be:	46ac      	mov	ip, r5
 80399c0:	460a      	mov	r2, r1
 80399c2:	4621      	mov	r1, r4
 80399c4:	bcf0      	pop	{r4, r5, r6, r7}
 80399c6:	4760      	bx	ip
 80399c8:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80399ca:	e7f1      	b.n	80399b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80399cc:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80399ce:	e7ef      	b.n	80399b0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80399d0:	2e03      	cmp	r6, #3
 80399d2:	d8df      	bhi.n	8039994 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80399d4:	e8df f006 	tbb	[pc, r6]
 80399d8:	110f0702 	.word	0x110f0702
 80399dc:	9504      	str	r5, [sp, #16]
 80399de:	4620      	mov	r0, r4
 80399e0:	bcf0      	pop	{r4, r5, r6, r7}
 80399e2:	f7ff beef 	b.w	80397c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80399e6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80399e8:	2800      	cmp	r0, #0
 80399ea:	d0d3      	beq.n	8039994 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80399ec:	6806      	ldr	r6, [r0, #0]
 80399ee:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80399f2:	68b5      	ldr	r5, [r6, #8]
 80399f4:	e7e2      	b.n	80399bc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80399f6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80399f8:	e7f6      	b.n	80399e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 80399fa:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 80399fc:	e7f4      	b.n	80399e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08039a00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8039a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8039a04:	4605      	mov	r5, r0
 8039a06:	b08f      	sub	sp, #60	@ 0x3c
 8039a08:	460c      	mov	r4, r1
 8039a0a:	461f      	mov	r7, r3
 8039a0c:	2b00      	cmp	r3, #0
 8039a0e:	d052      	beq.n	8039ab6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8039a10:	6808      	ldr	r0, [r1, #0]
 8039a12:	6849      	ldr	r1, [r1, #4]
 8039a14:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8039bdc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1dc>
 8039a18:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8039be0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8039a1c:	ab0a      	add	r3, sp, #40	@ 0x28
 8039a1e:	c303      	stmia	r3!, {r0, r1}
 8039a20:	6810      	ldr	r0, [r2, #0]
 8039a22:	6851      	ldr	r1, [r2, #4]
 8039a24:	ab0c      	add	r3, sp, #48	@ 0x30
 8039a26:	c303      	stmia	r3!, {r0, r1}
 8039a28:	a80a      	add	r0, sp, #40	@ 0x28
 8039a2a:	f7fb f815 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8039a2e:	4621      	mov	r1, r4
 8039a30:	a80c      	add	r0, sp, #48	@ 0x30
 8039a32:	f7fb f855 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8039a36:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8039a3a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8039a3e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8039a42:	f8d8 0000 	ldr.w	r0, [r8]
 8039a46:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8039a4a:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8039a4e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8039a52:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8039a56:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8039a5a:	440a      	add	r2, r1
 8039a5c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8039a60:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8039a64:	4413      	add	r3, r2
 8039a66:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8039a6a:	6803      	ldr	r3, [r0, #0]
 8039a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8039a6e:	4798      	blx	r3
 8039a70:	2fff      	cmp	r7, #255	@ 0xff
 8039a72:	d023      	beq.n	8039abc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8039a74:	f010 0f04 	tst.w	r0, #4
 8039a78:	f8d8 0000 	ldr.w	r0, [r8]
 8039a7c:	d021      	beq.n	8039ac2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8039a7e:	2100      	movs	r1, #0
 8039a80:	f04f 0e01 	mov.w	lr, #1
 8039a84:	f8d0 c000 	ldr.w	ip, [r0]
 8039a88:	9106      	str	r1, [sp, #24]
 8039a8a:	e9cd e107 	strd	lr, r1, [sp, #28]
 8039a8e:	f8b9 e000 	ldrh.w	lr, [r9]
 8039a92:	9703      	str	r7, [sp, #12]
 8039a94:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8039a98:	b2a4      	uxth	r4, r4
 8039a9a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8039a9e:	9102      	str	r1, [sp, #8]
 8039aa0:	b2b6      	uxth	r6, r6
 8039aa2:	9401      	str	r4, [sp, #4]
 8039aa4:	9600      	str	r6, [sp, #0]
 8039aa6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8039aaa:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8039aae:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8039ab2:	4629      	mov	r1, r5
 8039ab4:	47a0      	blx	r4
 8039ab6:	b00f      	add	sp, #60	@ 0x3c
 8039ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8039abc:	f010 0f01 	tst.w	r0, #1
 8039ac0:	e7da      	b.n	8039a78 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8039ac2:	6803      	ldr	r3, [r0, #0]
 8039ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8039ac6:	4798      	blx	r3
 8039ac8:	f8b9 1000 	ldrh.w	r1, [r9]
 8039acc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8039ad0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8039ad4:	fb01 2303 	mla	r3, r1, r3, r2
 8039ad8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8039adc:	4418      	add	r0, r3
 8039ade:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8039ae2:	434c      	muls	r4, r1
 8039ae4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8039ae8:	1b89      	subs	r1, r1, r6
 8039aea:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8039aee:	2fff      	cmp	r7, #255	@ 0xff
 8039af0:	eba3 0606 	sub.w	r6, r3, r6
 8039af4:	4404      	add	r4, r0
 8039af6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8039afa:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8039afe:	d04a      	beq.n	8039b96 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 8039b00:	43fa      	mvns	r2, r7
 8039b02:	b2bb      	uxth	r3, r7
 8039b04:	b2d7      	uxtb	r7, r2
 8039b06:	42a0      	cmp	r0, r4
 8039b08:	d261      	bcs.n	8039bce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1ce>
 8039b0a:	eb00 0e0c 	add.w	lr, r0, ip
 8039b0e:	4586      	cmp	lr, r0
 8039b10:	f100 0803 	add.w	r8, r0, #3
 8039b14:	d93a      	bls.n	8039b8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18c>
 8039b16:	f835 2b02 	ldrh.w	r2, [r5], #2
 8039b1a:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8039b1e:	00d0      	lsls	r0, r2, #3
 8039b20:	b2c0      	uxtb	r0, r0
 8039b22:	fb19 f907 	smulbb	r9, r9, r7
 8039b26:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8039b2a:	fb00 9003 	mla	r0, r0, r3, r9
 8039b2e:	b280      	uxth	r0, r0
 8039b30:	f100 0901 	add.w	r9, r0, #1
 8039b34:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8039b38:	1200      	asrs	r0, r0, #8
 8039b3a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8039b3e:	f808 0c03 	strb.w	r0, [r8, #-3]
 8039b42:	10d0      	asrs	r0, r2, #3
 8039b44:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8039b48:	fb19 f907 	smulbb	r9, r9, r7
 8039b4c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8039b50:	fb00 9003 	mla	r0, r0, r3, r9
 8039b54:	b280      	uxth	r0, r0
 8039b56:	f100 0901 	add.w	r9, r0, #1
 8039b5a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8039b5e:	1200      	asrs	r0, r0, #8
 8039b60:	f808 0c02 	strb.w	r0, [r8, #-2]
 8039b64:	1212      	asrs	r2, r2, #8
 8039b66:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8039b6a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8039b6e:	fb10 f007 	smulbb	r0, r0, r7
 8039b72:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8039b76:	fb02 0203 	mla	r2, r2, r3, r0
 8039b7a:	b292      	uxth	r2, r2
 8039b7c:	1c50      	adds	r0, r2, #1
 8039b7e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8039b82:	1212      	asrs	r2, r2, #8
 8039b84:	f808 2c01 	strb.w	r2, [r8, #-1]
 8039b88:	4640      	mov	r0, r8
 8039b8a:	e7c0      	b.n	8039b0e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10e>
 8039b8c:	4408      	add	r0, r1
 8039b8e:	4435      	add	r5, r6
 8039b90:	e7b9      	b.n	8039b06 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x106>
 8039b92:	4408      	add	r0, r1
 8039b94:	4435      	add	r5, r6
 8039b96:	42a0      	cmp	r0, r4
 8039b98:	d219      	bcs.n	8039bce <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1ce>
 8039b9a:	eb00 070c 	add.w	r7, r0, ip
 8039b9e:	42b8      	cmp	r0, r7
 8039ba0:	d2f7      	bcs.n	8039b92 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x192>
 8039ba2:	f835 3b02 	ldrh.w	r3, [r5], #2
 8039ba6:	00da      	lsls	r2, r3, #3
 8039ba8:	b2d2      	uxtb	r2, r2
 8039baa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8039bae:	7002      	strb	r2, [r0, #0]
 8039bb0:	10da      	asrs	r2, r3, #3
 8039bb2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8039bb6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8039bba:	121b      	asrs	r3, r3, #8
 8039bbc:	7042      	strb	r2, [r0, #1]
 8039bbe:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8039bc2:	3003      	adds	r0, #3
 8039bc4:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8039bc8:	f800 3c01 	strb.w	r3, [r0, #-1]
 8039bcc:	e7e7      	b.n	8039b9e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x19e>
 8039bce:	4b03      	ldr	r3, [pc, #12]	@ (8039bdc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1dc>)
 8039bd0:	6818      	ldr	r0, [r3, #0]
 8039bd2:	6803      	ldr	r3, [r0, #0]
 8039bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8039bd6:	4798      	blx	r3
 8039bd8:	e76d      	b.n	8039ab6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8039bda:	bf00      	nop
 8039bdc:	2000b8e0 	.word	0x2000b8e0
 8039be0:	2000b8da 	.word	0x2000b8da

08039be4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8039be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8039be8:	460d      	mov	r5, r1
 8039bea:	b08a      	sub	sp, #40	@ 0x28
 8039bec:	4604      	mov	r4, r0
 8039bee:	6808      	ldr	r0, [r1, #0]
 8039bf0:	6849      	ldr	r1, [r1, #4]
 8039bf2:	4f5e      	ldr	r7, [pc, #376]	@ (8039d6c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8039bf4:	461e      	mov	r6, r3
 8039bf6:	ab06      	add	r3, sp, #24
 8039bf8:	c303      	stmia	r3!, {r0, r1}
 8039bfa:	6810      	ldr	r0, [r2, #0]
 8039bfc:	6851      	ldr	r1, [r2, #4]
 8039bfe:	ab08      	add	r3, sp, #32
 8039c00:	c303      	stmia	r3!, {r0, r1}
 8039c02:	a806      	add	r0, sp, #24
 8039c04:	f7fa ff28 	bl	8034a58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8039c08:	4629      	mov	r1, r5
 8039c0a:	a808      	add	r0, sp, #32
 8039c0c:	f7fa ff68 	bl	8034ae0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8039c10:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8039c14:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8039c18:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8039c1c:	6838      	ldr	r0, [r7, #0]
 8039c1e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8039c22:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8039c26:	fb11 2103 	smlabb	r1, r1, r3, r2
 8039c2a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8039c2e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8039c32:	440a      	add	r2, r1
 8039c34:	f8ad 2020 	strh.w	r2, [sp, #32]
 8039c38:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8039c3c:	4413      	add	r3, r2
 8039c3e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8039c42:	6803      	ldr	r3, [r0, #0]
 8039c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8039c46:	4798      	blx	r3
 8039c48:	2eff      	cmp	r6, #255	@ 0xff
 8039c4a:	d119      	bne.n	8039c80 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8039c4c:	f010 0f20 	tst.w	r0, #32
 8039c50:	6838      	ldr	r0, [r7, #0]
 8039c52:	d018      	beq.n	8039c86 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8039c54:	2700      	movs	r7, #0
 8039c56:	6801      	ldr	r1, [r0, #0]
 8039c58:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8039c5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8039c60:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8039c64:	b2ad      	uxth	r5, r5
 8039c66:	9501      	str	r5, [sp, #4]
 8039c68:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8039c6c:	9602      	str	r6, [sp, #8]
 8039c6e:	fa1f f588 	uxth.w	r5, r8
 8039c72:	9500      	str	r5, [sp, #0]
 8039c74:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8039c76:	4621      	mov	r1, r4
 8039c78:	47a8      	blx	r5
 8039c7a:	b00a      	add	sp, #40	@ 0x28
 8039c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8039c80:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8039c84:	e7e4      	b.n	8039c50 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8039c86:	6803      	ldr	r3, [r0, #0]
 8039c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8039c8a:	4798      	blx	r3
 8039c8c:	4b38      	ldr	r3, [pc, #224]	@ (8039d70 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8039c8e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8039c92:	f8b3 c000 	ldrh.w	ip, [r3]
 8039c96:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8039c9a:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8039c9e:	fb0c 2303 	mla	r3, ip, r3, r2
 8039ca2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8039ca6:	fb0c f505 	mul.w	r5, ip, r5
 8039caa:	4418      	add	r0, r3
 8039cac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8039cb0:	ebac 0c08 	sub.w	ip, ip, r8
 8039cb4:	ebae 0e08 	sub.w	lr, lr, r8
 8039cb8:	4405      	add	r5, r0
 8039cba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8039cbe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8039cc2:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8039cc6:	42a8      	cmp	r0, r5
 8039cc8:	d24a      	bcs.n	8039d60 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8039cca:	eb00 0803 	add.w	r8, r0, r3
 8039cce:	4540      	cmp	r0, r8
 8039cd0:	d243      	bcs.n	8039d5a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8039cd2:	78e2      	ldrb	r2, [r4, #3]
 8039cd4:	b15a      	cbz	r2, 8039cee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8039cd6:	2aff      	cmp	r2, #255	@ 0xff
 8039cd8:	f894 9000 	ldrb.w	r9, [r4]
 8039cdc:	d10a      	bne.n	8039cf4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8039cde:	2eff      	cmp	r6, #255	@ 0xff
 8039ce0:	d108      	bne.n	8039cf4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8039ce2:	f880 9000 	strb.w	r9, [r0]
 8039ce6:	7862      	ldrb	r2, [r4, #1]
 8039ce8:	7042      	strb	r2, [r0, #1]
 8039cea:	78a2      	ldrb	r2, [r4, #2]
 8039cec:	7082      	strb	r2, [r0, #2]
 8039cee:	3003      	adds	r0, #3
 8039cf0:	3404      	adds	r4, #4
 8039cf2:	e7ec      	b.n	8039cce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8039cf4:	4372      	muls	r2, r6
 8039cf6:	1c51      	adds	r1, r2, #1
 8039cf8:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8039cfc:	1209      	asrs	r1, r1, #8
 8039cfe:	fa1f fa81 	uxth.w	sl, r1
 8039d02:	43c9      	mvns	r1, r1
 8039d04:	b2ca      	uxtb	r2, r1
 8039d06:	7801      	ldrb	r1, [r0, #0]
 8039d08:	fb19 f90a 	smulbb	r9, r9, sl
 8039d0c:	fb01 9902 	mla	r9, r1, r2, r9
 8039d10:	fa1f f989 	uxth.w	r9, r9
 8039d14:	f109 0101 	add.w	r1, r9, #1
 8039d18:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8039d1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8039d20:	f880 9000 	strb.w	r9, [r0]
 8039d24:	f890 9001 	ldrb.w	r9, [r0, #1]
 8039d28:	7861      	ldrb	r1, [r4, #1]
 8039d2a:	fb19 f902 	smulbb	r9, r9, r2
 8039d2e:	fb01 910a 	mla	r1, r1, sl, r9
 8039d32:	b289      	uxth	r1, r1
 8039d34:	f101 0901 	add.w	r9, r1, #1
 8039d38:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8039d3c:	1209      	asrs	r1, r1, #8
 8039d3e:	7041      	strb	r1, [r0, #1]
 8039d40:	7881      	ldrb	r1, [r0, #2]
 8039d42:	f894 9002 	ldrb.w	r9, [r4, #2]
 8039d46:	fb11 f202 	smulbb	r2, r1, r2
 8039d4a:	fb09 220a 	mla	r2, r9, sl, r2
 8039d4e:	b292      	uxth	r2, r2
 8039d50:	1c51      	adds	r1, r2, #1
 8039d52:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8039d56:	1212      	asrs	r2, r2, #8
 8039d58:	e7c8      	b.n	8039cec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8039d5a:	4460      	add	r0, ip
 8039d5c:	4474      	add	r4, lr
 8039d5e:	e7b2      	b.n	8039cc6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8039d60:	6838      	ldr	r0, [r7, #0]
 8039d62:	6803      	ldr	r3, [r0, #0]
 8039d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8039d66:	4798      	blx	r3
 8039d68:	e787      	b.n	8039c7a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8039d6a:	bf00      	nop
 8039d6c:	2000b8e0 	.word	0x2000b8e0
 8039d70:	2000b8da 	.word	0x2000b8da

08039d74 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8039d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8039d78:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8039d7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8039d7e:	4607      	mov	r7, r0
 8039d80:	460c      	mov	r4, r1
 8039d82:	4692      	mov	sl, r2
 8039d84:	4699      	mov	r9, r3
 8039d86:	b31d      	cbz	r5, 8039dd0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8039d88:	4608      	mov	r0, r1
 8039d8a:	f7fe f9db 	bl	8038144 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8039d8e:	4680      	mov	r8, r0
 8039d90:	4620      	mov	r0, r4
 8039d92:	f7fe fa0b 	bl	80381ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 8039d96:	f8ad 000e 	strh.w	r0, [sp, #14]
 8039d9a:	4620      	mov	r0, r4
 8039d9c:	f8ad a008 	strh.w	sl, [sp, #8]
 8039da0:	f8ad 900a 	strh.w	r9, [sp, #10]
 8039da4:	f8ad 800c 	strh.w	r8, [sp, #12]
 8039da8:	f7fe fb3c 	bl	8038424 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8039dac:	280b      	cmp	r0, #11
 8039dae:	d80f      	bhi.n	8039dd0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8039db0:	e8df f000 	tbb	[pc, r0]
 8039db4:	0e062a21 	.word	0x0e062a21
 8039db8:	0e0e0e0e 	.word	0x0e0e0e0e
 8039dbc:	110e0e0e 	.word	0x110e0e0e
 8039dc0:	4620      	mov	r0, r4
 8039dc2:	f7fe faab 	bl	803831c <_ZNK8touchgfx6Bitmap7getDataEv>
 8039dc6:	462b      	mov	r3, r5
 8039dc8:	4632      	mov	r2, r6
 8039dca:	a902      	add	r1, sp, #8
 8039dcc:	f7ff ff0a 	bl	8039be4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8039dd0:	b004      	add	sp, #16
 8039dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8039dd6:	4620      	mov	r0, r4
 8039dd8:	f7fe faa0 	bl	803831c <_ZNK8touchgfx6Bitmap7getDataEv>
 8039ddc:	4680      	mov	r8, r0
 8039dde:	4620      	mov	r0, r4
 8039de0:	f7fe facc 	bl	803837c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8039de4:	e9cd 6500 	strd	r6, r5, [sp]
 8039de8:	4602      	mov	r2, r0
 8039dea:	ab02      	add	r3, sp, #8
 8039dec:	4641      	mov	r1, r8
 8039dee:	4638      	mov	r0, r7
 8039df0:	f7ff fdc4 	bl	803997c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8039df4:	e7ec      	b.n	8039dd0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8039df6:	4620      	mov	r0, r4
 8039df8:	f7fe fa90 	bl	803831c <_ZNK8touchgfx6Bitmap7getDataEv>
 8039dfc:	462b      	mov	r3, r5
 8039dfe:	4632      	mov	r2, r6
 8039e00:	a902      	add	r1, sp, #8
 8039e02:	f7ff fdfd 	bl	8039a00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8039e06:	e7e3      	b.n	8039dd0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8039e08:	683b      	ldr	r3, [r7, #0]
 8039e0a:	4620      	mov	r0, r4
 8039e0c:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8039e10:	f7fe fa84 	bl	803831c <_ZNK8touchgfx6Bitmap7getDataEv>
 8039e14:	2300      	movs	r3, #0
 8039e16:	e9cd 5300 	strd	r5, r3, [sp]
 8039e1a:	4601      	mov	r1, r0
 8039e1c:	4633      	mov	r3, r6
 8039e1e:	aa02      	add	r2, sp, #8
 8039e20:	4638      	mov	r0, r7
 8039e22:	47c0      	blx	r8
 8039e24:	e7d4      	b.n	8039dd0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08039e26 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8039e26:	b4f0      	push	{r4, r5, r6, r7}
 8039e28:	4616      	mov	r6, r2
 8039e2a:	2e01      	cmp	r6, #1
 8039e2c:	461c      	mov	r4, r3
 8039e2e:	460d      	mov	r5, r1
 8039e30:	9a04      	ldr	r2, [sp, #16]
 8039e32:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8039e36:	d00e      	beq.n	8039e56 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8039e38:	d303      	bcc.n	8039e42 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8039e3a:	2e02      	cmp	r6, #2
 8039e3c:	d006      	beq.n	8039e4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8039e3e:	bcf0      	pop	{r4, r5, r6, r7}
 8039e40:	4770      	bx	lr
 8039e42:	4621      	mov	r1, r4
 8039e44:	4628      	mov	r0, r5
 8039e46:	bcf0      	pop	{r4, r5, r6, r7}
 8039e48:	f7ff bdda 	b.w	8039a00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8039e4c:	4621      	mov	r1, r4
 8039e4e:	4628      	mov	r0, r5
 8039e50:	bcf0      	pop	{r4, r5, r6, r7}
 8039e52:	f7ff bec7 	b.w	8039be4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8039e56:	2600      	movs	r6, #0
 8039e58:	6805      	ldr	r5, [r0, #0]
 8039e5a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8039e5e:	68ed      	ldr	r5, [r5, #12]
 8039e60:	4613      	mov	r3, r2
 8039e62:	46ac      	mov	ip, r5
 8039e64:	4622      	mov	r2, r4
 8039e66:	bcf0      	pop	{r4, r5, r6, r7}
 8039e68:	4760      	bx	ip
	...

08039e6c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8039e6c:	b160      	cbz	r0, 8039e88 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8039e6e:	2903      	cmp	r1, #3
 8039e70:	d818      	bhi.n	8039ea4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8039e72:	e8df f001 	tbb	[pc, r1]
 8039e76:	1902      	.short	0x1902
 8039e78:	1b06      	.short	0x1b06
 8039e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8039eb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8039e7c:	8818      	ldrh	r0, [r3, #0]
 8039e7e:	4240      	negs	r0, r0
 8039e80:	4770      	bx	lr
 8039e82:	4b0c      	ldr	r3, [pc, #48]	@ (8039eb4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8039e84:	8818      	ldrh	r0, [r3, #0]
 8039e86:	4770      	bx	lr
 8039e88:	2903      	cmp	r1, #3
 8039e8a:	d80b      	bhi.n	8039ea4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8039e8c:	a301      	add	r3, pc, #4	@ (adr r3, 8039e94 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8039e8e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8039e92:	bf00      	nop
 8039e94:	08039ea9 	.word	0x08039ea9
 8039e98:	08039e83 	.word	0x08039e83
 8039e9c:	08039ead 	.word	0x08039ead
 8039ea0:	08039e7b 	.word	0x08039e7b
 8039ea4:	2000      	movs	r0, #0
 8039ea6:	4770      	bx	lr
 8039ea8:	2001      	movs	r0, #1
 8039eaa:	4770      	bx	lr
 8039eac:	f04f 30ff 	mov.w	r0, #4294967295
 8039eb0:	4770      	bx	lr
 8039eb2:	bf00      	nop
 8039eb4:	2000b8da 	.word	0x2000b8da

08039eb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8039eb8:	b160      	cbz	r0, 8039ed4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8039eba:	2903      	cmp	r1, #3
 8039ebc:	d818      	bhi.n	8039ef0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8039ebe:	e8df f001 	tbb	[pc, r1]
 8039ec2:	0219      	.short	0x0219
 8039ec4:	051b      	.short	0x051b
 8039ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8039f00 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8039ec8:	8818      	ldrh	r0, [r3, #0]
 8039eca:	4770      	bx	lr
 8039ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8039f00 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8039ece:	8818      	ldrh	r0, [r3, #0]
 8039ed0:	4240      	negs	r0, r0
 8039ed2:	4770      	bx	lr
 8039ed4:	2903      	cmp	r1, #3
 8039ed6:	d80b      	bhi.n	8039ef0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8039ed8:	a301      	add	r3, pc, #4	@ (adr r3, 8039ee0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8039eda:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8039ede:	bf00      	nop
 8039ee0:	08039ec7 	.word	0x08039ec7
 8039ee4:	08039ef9 	.word	0x08039ef9
 8039ee8:	08039ecd 	.word	0x08039ecd
 8039eec:	08039ef5 	.word	0x08039ef5
 8039ef0:	2000      	movs	r0, #0
 8039ef2:	4770      	bx	lr
 8039ef4:	2001      	movs	r0, #1
 8039ef6:	4770      	bx	lr
 8039ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8039efc:	4770      	bx	lr
 8039efe:	bf00      	nop
 8039f00:	2000b8da 	.word	0x2000b8da

08039f04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8039f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039f08:	b097      	sub	sp, #92	@ 0x5c
 8039f0a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8039f0c:	a912      	add	r1, sp, #72	@ 0x48
 8039f0e:	e881 000c 	stmia.w	r1, {r2, r3}
 8039f12:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8039f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8039f18:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8039f1c:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8039f20:	9311      	str	r3, [sp, #68]	@ 0x44
 8039f22:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8039f26:	930c      	str	r3, [sp, #48]	@ 0x30
 8039f28:	7b4b      	ldrb	r3, [r1, #13]
 8039f2a:	798d      	ldrb	r5, [r1, #6]
 8039f2c:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8039f30:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8039f34:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8039f38:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8039f3c:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8039f40:	0158      	lsls	r0, r3, #5
 8039f42:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8039f46:	4328      	orrs	r0, r5
 8039f48:	9009      	str	r0, [sp, #36]	@ 0x24
 8039f4a:	f000 817c 	beq.w	803a246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8039f4e:	011b      	lsls	r3, r3, #4
 8039f50:	79c8      	ldrb	r0, [r1, #7]
 8039f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8039f56:	4303      	orrs	r3, r0
 8039f58:	930e      	str	r3, [sp, #56]	@ 0x38
 8039f5a:	f000 8174 	beq.w	803a246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8039f5e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8039f62:	b29b      	uxth	r3, r3
 8039f64:	2f00      	cmp	r7, #0
 8039f66:	f000 8116 	beq.w	803a196 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8039f6a:	1aff      	subs	r7, r7, r3
 8039f6c:	b2bf      	uxth	r7, r7
 8039f6e:	043b      	lsls	r3, r7, #16
 8039f70:	d502      	bpl.n	8039f78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8039f72:	1bf6      	subs	r6, r6, r7
 8039f74:	b236      	sxth	r6, r6
 8039f76:	2700      	movs	r7, #0
 8039f78:	f9b2 1000 	ldrsh.w	r1, [r2]
 8039f7c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8039f80:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8039f84:	428e      	cmp	r6, r1
 8039f86:	b28b      	uxth	r3, r1
 8039f88:	bfbf      	itttt	lt
 8039f8a:	18ff      	addlt	r7, r7, r3
 8039f8c:	1bbe      	sublt	r6, r7, r6
 8039f8e:	b2b7      	uxthlt	r7, r6
 8039f90:	460e      	movlt	r6, r1
 8039f92:	8891      	ldrh	r1, [r2, #4]
 8039f94:	440b      	add	r3, r1
 8039f96:	b21b      	sxth	r3, r3
 8039f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8039f9a:	88d3      	ldrh	r3, [r2, #6]
 8039f9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8039f9e:	449a      	add	sl, r3
 8039fa0:	fa0f f38a 	sxth.w	r3, sl
 8039fa4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8039fa6:	4bb7      	ldr	r3, [pc, #732]	@ (803a284 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8039fa8:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8039fac:	f893 b000 	ldrb.w	fp, [r3]
 8039fb0:	f10b 3cff 	add.w	ip, fp, #4294967295
 8039fb4:	f1dc 0300 	rsbs	r3, ip, #0
 8039fb8:	eb43 030c 	adc.w	r3, r3, ip
 8039fbc:	930d      	str	r3, [sp, #52]	@ 0x34
 8039fbe:	4631      	mov	r1, r6
 8039fc0:	464b      	mov	r3, r9
 8039fc2:	a812      	add	r0, sp, #72	@ 0x48
 8039fc4:	f7fa fbbd 	bl	8034742 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8039fc8:	4631      	mov	r1, r6
 8039fca:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8039fce:	464b      	mov	r3, r9
 8039fd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8039fd2:	a812      	add	r0, sp, #72	@ 0x48
 8039fd4:	f7fa fbd2 	bl	803477c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8039fd8:	a916      	add	r1, sp, #88	@ 0x58
 8039fda:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8039fde:	a815      	add	r0, sp, #84	@ 0x54
 8039fe0:	f7fa fcf8 	bl	80349d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8039fe4:	f1b9 0f00 	cmp.w	r9, #0
 8039fe8:	f040 80d8 	bne.w	803a19c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8039fec:	f1bb 0f01 	cmp.w	fp, #1
 8039ff0:	f040 80dc 	bne.w	803a1ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8039ff4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8039ff6:	b153      	cbz	r3, 803a00e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8039ff8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8039ffa:	2508      	movs	r5, #8
 8039ffc:	fb95 f3f8 	sdiv	r3, r5, r8
 803a000:	1e5d      	subs	r5, r3, #1
 803a002:	4415      	add	r5, r2
 803a004:	fb95 f5f3 	sdiv	r5, r5, r3
 803a008:	fb15 f503 	smulbb	r5, r5, r3
 803a00c:	b2ad      	uxth	r5, r5
 803a00e:	b907      	cbnz	r7, 803a012 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 803a010:	b16c      	cbz	r4, 803a02e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 803a012:	fb04 7305 	mla	r3, r4, r5, r7
 803a016:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 803a018:	fb08 f303 	mul.w	r3, r8, r3
 803a01c:	ebaa 0a04 	sub.w	sl, sl, r4
 803a020:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 803a024:	9226      	str	r2, [sp, #152]	@ 0x98
 803a026:	fa1f fa8a 	uxth.w	sl, sl
 803a02a:	f003 0407 	and.w	r4, r3, #7
 803a02e:	4649      	mov	r1, r9
 803a030:	980d      	ldr	r0, [sp, #52]	@ 0x34
 803a032:	f7ff ff1b 	bl	8039e6c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 803a036:	4683      	mov	fp, r0
 803a038:	980d      	ldr	r0, [sp, #52]	@ 0x34
 803a03a:	f7ff ff3d 	bl	8039eb8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 803a03e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803a040:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 803a042:	1a9b      	subs	r3, r3, r2
 803a044:	459a      	cmp	sl, r3
 803a046:	bfa8      	it	ge
 803a048:	469a      	movge	sl, r3
 803a04a:	f1ba 0f00 	cmp.w	sl, #0
 803a04e:	4681      	mov	r9, r0
 803a050:	f340 80f9 	ble.w	803a246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 803a054:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a056:	1bf6      	subs	r6, r6, r7
 803a058:	1b9e      	subs	r6, r3, r6
 803a05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a05c:	429e      	cmp	r6, r3
 803a05e:	bfd4      	ite	le
 803a060:	ebc7 0706 	rsble	r7, r7, r6
 803a064:	ebc7 0703 	rsbgt	r7, r7, r3
 803a068:	2f00      	cmp	r7, #0
 803a06a:	f340 80ec 	ble.w	803a246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 803a06e:	1bed      	subs	r5, r5, r7
 803a070:	fb08 f305 	mul.w	r3, r8, r5
 803a074:	930d      	str	r3, [sp, #52]	@ 0x34
 803a076:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a078:	f3c3 4307 	ubfx	r3, r3, #16, #8
 803a07c:	930e      	str	r3, [sp, #56]	@ 0x38
 803a07e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a080:	f3c3 2307 	ubfx	r3, r3, #8, #8
 803a084:	930f      	str	r3, [sp, #60]	@ 0x3c
 803a086:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a088:	b2db      	uxtb	r3, r3
 803a08a:	9310      	str	r3, [sp, #64]	@ 0x40
 803a08c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a08e:	2b00      	cmp	r3, #0
 803a090:	f040 80de 	bne.w	803a250 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 803a094:	4b7c      	ldr	r3, [pc, #496]	@ (803a288 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 803a096:	6818      	ldr	r0, [r3, #0]
 803a098:	6803      	ldr	r3, [r0, #0]
 803a09a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803a09c:	4798      	blx	r3
 803a09e:	2301      	movs	r3, #1
 803a0a0:	fa03 f308 	lsl.w	r3, r3, r8
 803a0a4:	4a79      	ldr	r2, [pc, #484]	@ (803a28c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 803a0a6:	3b01      	subs	r3, #1
 803a0a8:	b2db      	uxtb	r3, r3
 803a0aa:	8811      	ldrh	r1, [r2, #0]
 803a0ac:	930a      	str	r3, [sp, #40]	@ 0x28
 803a0ae:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 803a0b2:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 803a0b6:	fb01 2303 	mla	r3, r1, r3, r2
 803a0ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 803a0be:	18c3      	adds	r3, r0, r3
 803a0c0:	9309      	str	r3, [sp, #36]	@ 0x24
 803a0c2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803a0c4:	781a      	ldrb	r2, [r3, #0]
 803a0c6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 803a0ca:	fb07 9b1b 	mls	fp, r7, fp, r9
 803a0ce:	4122      	asrs	r2, r4
 803a0d0:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 803a0d4:	b2d2      	uxtb	r2, r2
 803a0d6:	fb06 bb07 	mla	fp, r6, r7, fp
 803a0da:	f11a 3aff 	adds.w	sl, sl, #4294967295
 803a0de:	f0c0 80d7 	bcc.w	803a290 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 803a0e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803a0e4:	46be      	mov	lr, r7
 803a0e6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 803a0ea:	f0c0 80ba 	bcc.w	803a262 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 803a0ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803a0f0:	4013      	ands	r3, r2
 803a0f2:	d041      	beq.n	803a178 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 803a0f4:	20ff      	movs	r0, #255	@ 0xff
 803a0f6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 803a0f8:	fb90 f5f5 	sdiv	r5, r0, r5
 803a0fc:	436b      	muls	r3, r5
 803a0fe:	2bfe      	cmp	r3, #254	@ 0xfe
 803a100:	dd03      	ble.n	803a10a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 803a102:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 803a104:	4285      	cmp	r5, r0
 803a106:	f000 80a5 	beq.w	803a254 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 803a10a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 803a10c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803a10e:	fb15 f303 	smulbb	r3, r5, r3
 803a112:	b29b      	uxth	r3, r3
 803a114:	1c5d      	adds	r5, r3, #1
 803a116:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 803a11a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 803a11e:	fa1f fc83 	uxth.w	ip, r3
 803a122:	780d      	ldrb	r5, [r1, #0]
 803a124:	43db      	mvns	r3, r3
 803a126:	b2db      	uxtb	r3, r3
 803a128:	fb10 f90c 	smulbb	r9, r0, ip
 803a12c:	fb05 9503 	mla	r5, r5, r3, r9
 803a130:	b2ad      	uxth	r5, r5
 803a132:	f105 0901 	add.w	r9, r5, #1
 803a136:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 803a13a:	122d      	asrs	r5, r5, #8
 803a13c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803a13e:	700d      	strb	r5, [r1, #0]
 803a140:	784d      	ldrb	r5, [r1, #1]
 803a142:	fb10 f90c 	smulbb	r9, r0, ip
 803a146:	fb05 9503 	mla	r5, r5, r3, r9
 803a14a:	b2ad      	uxth	r5, r5
 803a14c:	f105 0901 	add.w	r9, r5, #1
 803a150:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 803a154:	122d      	asrs	r5, r5, #8
 803a156:	980e      	ldr	r0, [sp, #56]	@ 0x38
 803a158:	704d      	strb	r5, [r1, #1]
 803a15a:	788d      	ldrb	r5, [r1, #2]
 803a15c:	fb10 fc0c 	smulbb	ip, r0, ip
 803a160:	fb05 cc03 	mla	ip, r5, r3, ip
 803a164:	fa1f fc8c 	uxth.w	ip, ip
 803a168:	f10c 0301 	add.w	r3, ip, #1
 803a16c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 803a170:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 803a174:	f881 c002 	strb.w	ip, [r1, #2]
 803a178:	4444      	add	r4, r8
 803a17a:	b2a4      	uxth	r4, r4
 803a17c:	2c07      	cmp	r4, #7
 803a17e:	bf89      	itett	hi
 803a180:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 803a182:	fa42 f208 	asrls.w	r2, r2, r8
 803a186:	785a      	ldrbhi	r2, [r3, #1]
 803a188:	3301      	addhi	r3, #1
 803a18a:	bf92      	itee	ls
 803a18c:	b2d2      	uxtbls	r2, r2
 803a18e:	9326      	strhi	r3, [sp, #152]	@ 0x98
 803a190:	2400      	movhi	r4, #0
 803a192:	4431      	add	r1, r6
 803a194:	e7a7      	b.n	803a0e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 803a196:	441e      	add	r6, r3
 803a198:	b236      	sxth	r6, r6
 803a19a:	e6ed      	b.n	8039f78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 803a19c:	f1b9 0f01 	cmp.w	r9, #1
 803a1a0:	f47f af28 	bne.w	8039ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 803a1a4:	f1bb 0f01 	cmp.w	fp, #1
 803a1a8:	f47f af24 	bne.w	8039ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 803a1ac:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 803a288 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 803a1b0:	f8db 0000 	ldr.w	r0, [fp]
 803a1b4:	6803      	ldr	r3, [r0, #0]
 803a1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 803a1b8:	4798      	blx	r3
 803a1ba:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 803a1be:	465a      	mov	r2, fp
 803a1c0:	d006      	beq.n	803a1d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 803a1c2:	f1b8 0f04 	cmp.w	r8, #4
 803a1c6:	d141      	bne.n	803a24c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 803a1c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803a1ca:	3300      	adds	r3, #0
 803a1cc:	bf18      	it	ne
 803a1ce:	2301      	movne	r3, #1
 803a1d0:	0580      	lsls	r0, r0, #22
 803a1d2:	d566      	bpl.n	803a2a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 803a1d4:	f1b8 0f08 	cmp.w	r8, #8
 803a1d8:	d163      	bne.n	803a2a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 803a1da:	2b00      	cmp	r3, #0
 803a1dc:	bf0c      	ite	eq
 803a1de:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 803a1e2:	f44f 7180 	movne.w	r1, #256	@ 0x100
 803a1e6:	2f00      	cmp	r7, #0
 803a1e8:	f47f af04 	bne.w	8039ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 803a1ec:	2c00      	cmp	r4, #0
 803a1ee:	f47f af01 	bne.w	8039ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 803a1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a1f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803a1f6:	18f3      	adds	r3, r6, r3
 803a1f8:	4283      	cmp	r3, r0
 803a1fa:	f73f aefb 	bgt.w	8039ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 803a1fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803a200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803a202:	4403      	add	r3, r0
 803a204:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803a206:	4283      	cmp	r3, r0
 803a208:	f73f aef4 	bgt.w	8039ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 803a20c:	6810      	ldr	r0, [r2, #0]
 803a20e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 803a212:	6804      	ldr	r4, [r0, #0]
 803a214:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 803a218:	f1b8 0f08 	cmp.w	r8, #8
 803a21c:	f04f 0600 	mov.w	r6, #0
 803a220:	bf18      	it	ne
 803a222:	3501      	addne	r5, #1
 803a224:	e9cd 1605 	strd	r1, r6, [sp, #20]
 803a228:	990c      	ldr	r1, [sp, #48]	@ 0x30
 803a22a:	9104      	str	r1, [sp, #16]
 803a22c:	bf18      	it	ne
 803a22e:	f025 0501 	bicne.w	r5, r5, #1
 803a232:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 803a234:	bf18      	it	ne
 803a236:	b2ad      	uxthne	r5, r5
 803a238:	e9cd 5102 	strd	r5, r1, [sp, #8]
 803a23c:	e9cd 5a00 	strd	r5, sl, [sp]
 803a240:	9926      	ldr	r1, [sp, #152]	@ 0x98
 803a242:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 803a244:	47a0      	blx	r4
 803a246:	b017      	add	sp, #92	@ 0x5c
 803a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803a24c:	2300      	movs	r3, #0
 803a24e:	e7bf      	b.n	803a1d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 803a250:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 803a252:	e724      	b.n	803a09e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 803a254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803a256:	700b      	strb	r3, [r1, #0]
 803a258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803a25a:	704b      	strb	r3, [r1, #1]
 803a25c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803a25e:	708b      	strb	r3, [r1, #2]
 803a260:	e78a      	b.n	803a178 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 803a262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803a264:	b153      	cbz	r3, 803a27c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 803a266:	441c      	add	r4, r3
 803a268:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803a26a:	b2a4      	uxth	r4, r4
 803a26c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 803a270:	f004 0407 	and.w	r4, r4, #7
 803a274:	781a      	ldrb	r2, [r3, #0]
 803a276:	9326      	str	r3, [sp, #152]	@ 0x98
 803a278:	4122      	asrs	r2, r4
 803a27a:	b2d2      	uxtb	r2, r2
 803a27c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a27e:	445b      	add	r3, fp
 803a280:	9309      	str	r3, [sp, #36]	@ 0x24
 803a282:	e72a      	b.n	803a0da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 803a284:	2000b8d8 	.word	0x2000b8d8
 803a288:	2000b8e0 	.word	0x2000b8e0
 803a28c:	2000b8da 	.word	0x2000b8da
 803a290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a292:	2b00      	cmp	r3, #0
 803a294:	d1d7      	bne.n	803a246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 803a296:	4b06      	ldr	r3, [pc, #24]	@ (803a2b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 803a298:	6818      	ldr	r0, [r3, #0]
 803a29a:	6803      	ldr	r3, [r0, #0]
 803a29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803a29e:	4798      	blx	r3
 803a2a0:	e7d1      	b.n	803a246 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 803a2a2:	2b00      	cmp	r3, #0
 803a2a4:	f43f aea6 	beq.w	8039ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 803a2a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 803a2ac:	e79b      	b.n	803a1e6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 803a2ae:	bf00      	nop
 803a2b0:	2000b8e0 	.word	0x2000b8e0

0803a2b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 803a2b4:	b538      	push	{r3, r4, r5, lr}
 803a2b6:	4c15      	ldr	r4, [pc, #84]	@ (803a30c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 803a2b8:	7823      	ldrb	r3, [r4, #0]
 803a2ba:	f3bf 8f5b 	dmb	ish
 803a2be:	07da      	lsls	r2, r3, #31
 803a2c0:	4605      	mov	r5, r0
 803a2c2:	d40b      	bmi.n	803a2dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 803a2c4:	4620      	mov	r0, r4
 803a2c6:	f7dd fe93 	bl	8017ff0 <__cxa_guard_acquire>
 803a2ca:	b138      	cbz	r0, 803a2dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 803a2cc:	4620      	mov	r0, r4
 803a2ce:	f7dd fecb 	bl	8018068 <__cxa_guard_release>
 803a2d2:	4a0f      	ldr	r2, [pc, #60]	@ (803a310 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 803a2d4:	490f      	ldr	r1, [pc, #60]	@ (803a314 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 803a2d6:	4810      	ldr	r0, [pc, #64]	@ (803a318 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 803a2d8:	f002 f902 	bl	803c4e0 <__aeabi_atexit>
 803a2dc:	4c0f      	ldr	r4, [pc, #60]	@ (803a31c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 803a2de:	7823      	ldrb	r3, [r4, #0]
 803a2e0:	f3bf 8f5b 	dmb	ish
 803a2e4:	07db      	lsls	r3, r3, #31
 803a2e6:	d40b      	bmi.n	803a300 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 803a2e8:	4620      	mov	r0, r4
 803a2ea:	f7dd fe81 	bl	8017ff0 <__cxa_guard_acquire>
 803a2ee:	b138      	cbz	r0, 803a300 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 803a2f0:	4620      	mov	r0, r4
 803a2f2:	f7dd feb9 	bl	8018068 <__cxa_guard_release>
 803a2f6:	4a06      	ldr	r2, [pc, #24]	@ (803a310 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 803a2f8:	4909      	ldr	r1, [pc, #36]	@ (803a320 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 803a2fa:	480a      	ldr	r0, [pc, #40]	@ (803a324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 803a2fc:	f002 f8f0 	bl	803c4e0 <__aeabi_atexit>
 803a300:	4b05      	ldr	r3, [pc, #20]	@ (803a318 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 803a302:	632b      	str	r3, [r5, #48]	@ 0x30
 803a304:	4b07      	ldr	r3, [pc, #28]	@ (803a324 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 803a306:	636b      	str	r3, [r5, #52]	@ 0x34
 803a308:	bd38      	pop	{r3, r4, r5, pc}
 803a30a:	bf00      	nop
 803a30c:	2000b97c 	.word	0x2000b97c
 803a310:	20000000 	.word	0x20000000
 803a314:	08038ec9 	.word	0x08038ec9
 803a318:	200007d4 	.word	0x200007d4
 803a31c:	2000b980 	.word	0x2000b980
 803a320:	08038ec7 	.word	0x08038ec7
 803a324:	200007d8 	.word	0x200007d8

0803a328 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 803a328:	b538      	push	{r3, r4, r5, lr}
 803a32a:	4c15      	ldr	r4, [pc, #84]	@ (803a380 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 803a32c:	7823      	ldrb	r3, [r4, #0]
 803a32e:	f3bf 8f5b 	dmb	ish
 803a332:	07da      	lsls	r2, r3, #31
 803a334:	4605      	mov	r5, r0
 803a336:	d40b      	bmi.n	803a350 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 803a338:	4620      	mov	r0, r4
 803a33a:	f7dd fe59 	bl	8017ff0 <__cxa_guard_acquire>
 803a33e:	b138      	cbz	r0, 803a350 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 803a340:	4620      	mov	r0, r4
 803a342:	f7dd fe91 	bl	8018068 <__cxa_guard_release>
 803a346:	4a0f      	ldr	r2, [pc, #60]	@ (803a384 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 803a348:	490f      	ldr	r1, [pc, #60]	@ (803a388 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 803a34a:	4810      	ldr	r0, [pc, #64]	@ (803a38c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 803a34c:	f002 f8c8 	bl	803c4e0 <__aeabi_atexit>
 803a350:	4c0f      	ldr	r4, [pc, #60]	@ (803a390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 803a352:	7823      	ldrb	r3, [r4, #0]
 803a354:	f3bf 8f5b 	dmb	ish
 803a358:	07db      	lsls	r3, r3, #31
 803a35a:	d40b      	bmi.n	803a374 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 803a35c:	4620      	mov	r0, r4
 803a35e:	f7dd fe47 	bl	8017ff0 <__cxa_guard_acquire>
 803a362:	b138      	cbz	r0, 803a374 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 803a364:	4620      	mov	r0, r4
 803a366:	f7dd fe7f 	bl	8018068 <__cxa_guard_release>
 803a36a:	4a06      	ldr	r2, [pc, #24]	@ (803a384 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 803a36c:	4909      	ldr	r1, [pc, #36]	@ (803a394 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 803a36e:	480a      	ldr	r0, [pc, #40]	@ (803a398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 803a370:	f002 f8b6 	bl	803c4e0 <__aeabi_atexit>
 803a374:	4b05      	ldr	r3, [pc, #20]	@ (803a38c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 803a376:	62ab      	str	r3, [r5, #40]	@ 0x28
 803a378:	4b07      	ldr	r3, [pc, #28]	@ (803a398 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 803a37a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 803a37c:	bd38      	pop	{r3, r4, r5, pc}
 803a37e:	bf00      	nop
 803a380:	2000b96c 	.word	0x2000b96c
 803a384:	20000000 	.word	0x20000000
 803a388:	08038ecd 	.word	0x08038ecd
 803a38c:	200007c4 	.word	0x200007c4
 803a390:	2000b970 	.word	0x2000b970
 803a394:	08038ecb 	.word	0x08038ecb
 803a398:	200007c8 	.word	0x200007c8

0803a39c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 803a39c:	b510      	push	{r4, lr}
 803a39e:	4604      	mov	r4, r0
 803a3a0:	f7ff ff88 	bl	803a2b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 803a3a4:	4620      	mov	r0, r4
 803a3a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803a3aa:	f7ff bfbd 	b.w	803a328 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0803a3b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 803a3b0:	b538      	push	{r3, r4, r5, lr}
 803a3b2:	4c15      	ldr	r4, [pc, #84]	@ (803a408 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 803a3b4:	7823      	ldrb	r3, [r4, #0]
 803a3b6:	f3bf 8f5b 	dmb	ish
 803a3ba:	07da      	lsls	r2, r3, #31
 803a3bc:	4605      	mov	r5, r0
 803a3be:	d40b      	bmi.n	803a3d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 803a3c0:	4620      	mov	r0, r4
 803a3c2:	f7dd fe15 	bl	8017ff0 <__cxa_guard_acquire>
 803a3c6:	b138      	cbz	r0, 803a3d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 803a3c8:	4620      	mov	r0, r4
 803a3ca:	f7dd fe4d 	bl	8018068 <__cxa_guard_release>
 803a3ce:	4a0f      	ldr	r2, [pc, #60]	@ (803a40c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 803a3d0:	490f      	ldr	r1, [pc, #60]	@ (803a410 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 803a3d2:	4810      	ldr	r0, [pc, #64]	@ (803a414 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 803a3d4:	f002 f884 	bl	803c4e0 <__aeabi_atexit>
 803a3d8:	4c0f      	ldr	r4, [pc, #60]	@ (803a418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 803a3da:	7823      	ldrb	r3, [r4, #0]
 803a3dc:	f3bf 8f5b 	dmb	ish
 803a3e0:	07db      	lsls	r3, r3, #31
 803a3e2:	d40b      	bmi.n	803a3fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 803a3e4:	4620      	mov	r0, r4
 803a3e6:	f7dd fe03 	bl	8017ff0 <__cxa_guard_acquire>
 803a3ea:	b138      	cbz	r0, 803a3fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 803a3ec:	4620      	mov	r0, r4
 803a3ee:	f7dd fe3b 	bl	8018068 <__cxa_guard_release>
 803a3f2:	4a06      	ldr	r2, [pc, #24]	@ (803a40c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 803a3f4:	4909      	ldr	r1, [pc, #36]	@ (803a41c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 803a3f6:	480a      	ldr	r0, [pc, #40]	@ (803a420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 803a3f8:	f002 f872 	bl	803c4e0 <__aeabi_atexit>
 803a3fc:	4b05      	ldr	r3, [pc, #20]	@ (803a414 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 803a3fe:	642b      	str	r3, [r5, #64]	@ 0x40
 803a400:	4b07      	ldr	r3, [pc, #28]	@ (803a420 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 803a402:	646b      	str	r3, [r5, #68]	@ 0x44
 803a404:	bd38      	pop	{r3, r4, r5, pc}
 803a406:	bf00      	nop
 803a408:	2000b984 	.word	0x2000b984
 803a40c:	20000000 	.word	0x20000000
 803a410:	08038ec1 	.word	0x08038ec1
 803a414:	200007dc 	.word	0x200007dc
 803a418:	2000b988 	.word	0x2000b988
 803a41c:	08038ebf 	.word	0x08038ebf
 803a420:	200007e0 	.word	0x200007e0

0803a424 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 803a424:	b538      	push	{r3, r4, r5, lr}
 803a426:	4c15      	ldr	r4, [pc, #84]	@ (803a47c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 803a428:	7823      	ldrb	r3, [r4, #0]
 803a42a:	f3bf 8f5b 	dmb	ish
 803a42e:	07da      	lsls	r2, r3, #31
 803a430:	4605      	mov	r5, r0
 803a432:	d40b      	bmi.n	803a44c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 803a434:	4620      	mov	r0, r4
 803a436:	f7dd fddb 	bl	8017ff0 <__cxa_guard_acquire>
 803a43a:	b138      	cbz	r0, 803a44c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 803a43c:	4620      	mov	r0, r4
 803a43e:	f7dd fe13 	bl	8018068 <__cxa_guard_release>
 803a442:	4a0f      	ldr	r2, [pc, #60]	@ (803a480 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 803a444:	490f      	ldr	r1, [pc, #60]	@ (803a484 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 803a446:	4810      	ldr	r0, [pc, #64]	@ (803a488 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 803a448:	f002 f84a 	bl	803c4e0 <__aeabi_atexit>
 803a44c:	4c0f      	ldr	r4, [pc, #60]	@ (803a48c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 803a44e:	7823      	ldrb	r3, [r4, #0]
 803a450:	f3bf 8f5b 	dmb	ish
 803a454:	07db      	lsls	r3, r3, #31
 803a456:	d40b      	bmi.n	803a470 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 803a458:	4620      	mov	r0, r4
 803a45a:	f7dd fdc9 	bl	8017ff0 <__cxa_guard_acquire>
 803a45e:	b138      	cbz	r0, 803a470 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 803a460:	4620      	mov	r0, r4
 803a462:	f7dd fe01 	bl	8018068 <__cxa_guard_release>
 803a466:	4a06      	ldr	r2, [pc, #24]	@ (803a480 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 803a468:	4909      	ldr	r1, [pc, #36]	@ (803a490 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 803a46a:	480a      	ldr	r0, [pc, #40]	@ (803a494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 803a46c:	f002 f838 	bl	803c4e0 <__aeabi_atexit>
 803a470:	4b05      	ldr	r3, [pc, #20]	@ (803a488 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 803a472:	63ab      	str	r3, [r5, #56]	@ 0x38
 803a474:	4b07      	ldr	r3, [pc, #28]	@ (803a494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 803a476:	63eb      	str	r3, [r5, #60]	@ 0x3c
 803a478:	bd38      	pop	{r3, r4, r5, pc}
 803a47a:	bf00      	nop
 803a47c:	2000b974 	.word	0x2000b974
 803a480:	20000000 	.word	0x20000000
 803a484:	08038ec5 	.word	0x08038ec5
 803a488:	200007cc 	.word	0x200007cc
 803a48c:	2000b978 	.word	0x2000b978
 803a490:	08038ec3 	.word	0x08038ec3
 803a494:	200007d0 	.word	0x200007d0

0803a498 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 803a498:	b510      	push	{r4, lr}
 803a49a:	4604      	mov	r4, r0
 803a49c:	f7ff ff88 	bl	803a3b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 803a4a0:	4620      	mov	r0, r4
 803a4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803a4a6:	f7ff bfbd 	b.w	803a424 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>

0803a4aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 803a4aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a4ae:	b08d      	sub	sp, #52	@ 0x34
 803a4b0:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 803a4b4:	468b      	mov	fp, r1
 803a4b6:	fb0c 5703 	mla	r7, ip, r3, r5
 803a4ba:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 803a4be:	910b      	str	r1, [sp, #44]	@ 0x2c
 803a4c0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 803a4c4:	f1bc 0f00 	cmp.w	ip, #0
 803a4c8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 803a4cc:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 803a4d0:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 803a4d4:	f89b 4000 	ldrb.w	r4, [fp]
 803a4d8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 803a4dc:	f89b 1002 	ldrb.w	r1, [fp, #2]
 803a4e0:	eb02 0607 	add.w	r6, r2, r7
 803a4e4:	f2c0 80c1 	blt.w	803a66a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 803a4e8:	45e6      	cmp	lr, ip
 803a4ea:	f340 80be 	ble.w	803a66a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 803a4ee:	2d00      	cmp	r5, #0
 803a4f0:	f2c0 80b7 	blt.w	803a662 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 803a4f4:	42ab      	cmp	r3, r5
 803a4f6:	f340 80b4 	ble.w	803a662 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 803a4fa:	5dd2      	ldrb	r2, [r2, r7]
 803a4fc:	9205      	str	r2, [sp, #20]
 803a4fe:	7872      	ldrb	r2, [r6, #1]
 803a500:	9206      	str	r2, [sp, #24]
 803a502:	78b2      	ldrb	r2, [r6, #2]
 803a504:	9207      	str	r2, [sp, #28]
 803a506:	1c6a      	adds	r2, r5, #1
 803a508:	f100 80b6 	bmi.w	803a678 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 803a50c:	4293      	cmp	r3, r2
 803a50e:	f340 80b3 	ble.w	803a678 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 803a512:	f1b8 0f00 	cmp.w	r8, #0
 803a516:	f000 80af 	beq.w	803a678 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 803a51a:	78f2      	ldrb	r2, [r6, #3]
 803a51c:	9201      	str	r2, [sp, #4]
 803a51e:	7932      	ldrb	r2, [r6, #4]
 803a520:	9202      	str	r2, [sp, #8]
 803a522:	7972      	ldrb	r2, [r6, #5]
 803a524:	9203      	str	r2, [sp, #12]
 803a526:	f11c 0c01 	adds.w	ip, ip, #1
 803a52a:	f100 80ad 	bmi.w	803a688 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 803a52e:	45e6      	cmp	lr, ip
 803a530:	f340 80aa 	ble.w	803a688 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 803a534:	f1ba 0f00 	cmp.w	sl, #0
 803a538:	f000 80a6 	beq.w	803a688 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 803a53c:	2d00      	cmp	r5, #0
 803a53e:	f2c0 809f 	blt.w	803a680 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 803a542:	42ab      	cmp	r3, r5
 803a544:	f340 809c 	ble.w	803a680 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 803a548:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 803a54c:	f816 9002 	ldrb.w	r9, [r6, r2]
 803a550:	2203      	movs	r2, #3
 803a552:	fb03 6c02 	mla	ip, r3, r2, r6
 803a556:	f89c 7001 	ldrb.w	r7, [ip, #1]
 803a55a:	f89c e002 	ldrb.w	lr, [ip, #2]
 803a55e:	9704      	str	r7, [sp, #16]
 803a560:	3501      	adds	r5, #1
 803a562:	f100 8098 	bmi.w	803a696 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 803a566:	42ab      	cmp	r3, r5
 803a568:	f340 8095 	ble.w	803a696 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 803a56c:	f1b8 0f00 	cmp.w	r8, #0
 803a570:	f000 8091 	beq.w	803a696 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 803a574:	f04f 0c03 	mov.w	ip, #3
 803a578:	fb13 c20c 	smlabb	r2, r3, ip, ip
 803a57c:	5cb5      	ldrb	r5, [r6, r2]
 803a57e:	fb03 620c 	mla	r2, r3, ip, r6
 803a582:	fb03 630c 	mla	r3, r3, ip, r6
 803a586:	7912      	ldrb	r2, [r2, #4]
 803a588:	795e      	ldrb	r6, [r3, #5]
 803a58a:	fa1f f388 	uxth.w	r3, r8
 803a58e:	fa1f fc8a 	uxth.w	ip, sl
 803a592:	fb03 f70c 	mul.w	r7, r3, ip
 803a596:	011b      	lsls	r3, r3, #4
 803a598:	9708      	str	r7, [sp, #32]
 803a59a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 803a59e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 803a5a2:	1bdb      	subs	r3, r3, r7
 803a5a4:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 803a5a8:	9709      	str	r7, [sp, #36]	@ 0x24
 803a5aa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 803a5ac:	ea6f 0807 	mvn.w	r8, r7
 803a5b0:	9f01      	ldr	r7, [sp, #4]
 803a5b2:	fa1f fc8c 	uxth.w	ip, ip
 803a5b6:	b29b      	uxth	r3, r3
 803a5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 803a5ba:	ebaa 0a0c 	sub.w	sl, sl, ip
 803a5be:	435f      	muls	r7, r3
 803a5c0:	9b05      	ldr	r3, [sp, #20]
 803a5c2:	fa1f fa8a 	uxth.w	sl, sl
 803a5c6:	fb0a 7703 	mla	r7, sl, r3, r7
 803a5ca:	9b08      	ldr	r3, [sp, #32]
 803a5cc:	fb0c 7709 	mla	r7, ip, r9, r7
 803a5d0:	fa5f f888 	uxtb.w	r8, r8
 803a5d4:	fb03 7705 	mla	r7, r3, r5, r7
 803a5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a5da:	fb14 f408 	smulbb	r4, r4, r8
 803a5de:	f3c7 2707 	ubfx	r7, r7, #8, #8
 803a5e2:	fb07 4703 	mla	r7, r7, r3, r4
 803a5e6:	b2bf      	uxth	r7, r7
 803a5e8:	1c7c      	adds	r4, r7, #1
 803a5ea:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 803a5ee:	1224      	asrs	r4, r4, #8
 803a5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803a5f2:	f88b 4000 	strb.w	r4, [fp]
 803a5f6:	9c02      	ldr	r4, [sp, #8]
 803a5f8:	435c      	muls	r4, r3
 803a5fa:	9b06      	ldr	r3, [sp, #24]
 803a5fc:	fb0a 4403 	mla	r4, sl, r3, r4
 803a600:	9b04      	ldr	r3, [sp, #16]
 803a602:	fb0c 4403 	mla	r4, ip, r3, r4
 803a606:	9b08      	ldr	r3, [sp, #32]
 803a608:	fb03 4402 	mla	r4, r3, r2, r4
 803a60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a60e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 803a610:	fb10 f008 	smulbb	r0, r0, r8
 803a614:	f3c4 2407 	ubfx	r4, r4, #8, #8
 803a618:	fb04 0403 	mla	r4, r4, r3, r0
 803a61c:	9b03      	ldr	r3, [sp, #12]
 803a61e:	435a      	muls	r2, r3
 803a620:	4613      	mov	r3, r2
 803a622:	9a07      	ldr	r2, [sp, #28]
 803a624:	fb0a 3a02 	mla	sl, sl, r2, r3
 803a628:	9b08      	ldr	r3, [sp, #32]
 803a62a:	fb0c ac0e 	mla	ip, ip, lr, sl
 803a62e:	fb03 c606 	mla	r6, r3, r6, ip
 803a632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803a634:	f3c6 2607 	ubfx	r6, r6, #8, #8
 803a638:	fb11 f108 	smulbb	r1, r1, r8
 803a63c:	fb06 1103 	mla	r1, r6, r3, r1
 803a640:	b2a4      	uxth	r4, r4
 803a642:	b289      	uxth	r1, r1
 803a644:	1c60      	adds	r0, r4, #1
 803a646:	1c4e      	adds	r6, r1, #1
 803a648:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 803a64c:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 803a650:	1224      	asrs	r4, r4, #8
 803a652:	1209      	asrs	r1, r1, #8
 803a654:	f88b 4001 	strb.w	r4, [fp, #1]
 803a658:	f88b 1002 	strb.w	r1, [fp, #2]
 803a65c:	b00d      	add	sp, #52	@ 0x34
 803a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803a662:	e9cd 0106 	strd	r0, r1, [sp, #24]
 803a666:	9405      	str	r4, [sp, #20]
 803a668:	e74d      	b.n	803a506 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 803a66a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803a66e:	9401      	str	r4, [sp, #4]
 803a670:	e9cd 0106 	strd	r0, r1, [sp, #24]
 803a674:	9405      	str	r4, [sp, #20]
 803a676:	e756      	b.n	803a526 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 803a678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803a67c:	9401      	str	r4, [sp, #4]
 803a67e:	e752      	b.n	803a526 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 803a680:	468e      	mov	lr, r1
 803a682:	9004      	str	r0, [sp, #16]
 803a684:	46a1      	mov	r9, r4
 803a686:	e76b      	b.n	803a560 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 803a688:	460e      	mov	r6, r1
 803a68a:	4602      	mov	r2, r0
 803a68c:	4625      	mov	r5, r4
 803a68e:	468e      	mov	lr, r1
 803a690:	9004      	str	r0, [sp, #16]
 803a692:	46a1      	mov	r9, r4
 803a694:	e779      	b.n	803a58a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 803a696:	460e      	mov	r6, r1
 803a698:	4602      	mov	r2, r0
 803a69a:	4625      	mov	r5, r4
 803a69c:	e775      	b.n	803a58a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0803a69e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 803a69e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a6a2:	b09f      	sub	sp, #124	@ 0x7c
 803a6a4:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 803a6a8:	920e      	str	r2, [sp, #56]	@ 0x38
 803a6aa:	9307      	str	r3, [sp, #28]
 803a6ac:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 803a6ae:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 803a6b2:	930c      	str	r3, [sp, #48]	@ 0x30
 803a6b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 803a6b6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 803a6ba:	901d      	str	r0, [sp, #116]	@ 0x74
 803a6bc:	6850      	ldr	r0, [r2, #4]
 803a6be:	6812      	ldr	r2, [r2, #0]
 803a6c0:	fb00 1303 	mla	r3, r0, r3, r1
 803a6c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 803a6c8:	18d3      	adds	r3, r2, r3
 803a6ca:	9308      	str	r3, [sp, #32]
 803a6cc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 803a6ce:	681b      	ldr	r3, [r3, #0]
 803a6d0:	930a      	str	r3, [sp, #40]	@ 0x28
 803a6d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803a6d4:	43db      	mvns	r3, r3
 803a6d6:	b2db      	uxtb	r3, r3
 803a6d8:	9309      	str	r3, [sp, #36]	@ 0x24
 803a6da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a6dc:	2b00      	cmp	r3, #0
 803a6de:	dc03      	bgt.n	803a6e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 803a6e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 803a6e2:	2b00      	cmp	r3, #0
 803a6e4:	f340 81f5 	ble.w	803aad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 803a6e8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 803a6ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 803a6ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 803a6f2:	1e48      	subs	r0, r1, #1
 803a6f4:	1e54      	subs	r4, r2, #1
 803a6f6:	9b07      	ldr	r3, [sp, #28]
 803a6f8:	2b00      	cmp	r3, #0
 803a6fa:	f340 80d5 	ble.w	803a8a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 803a6fe:	ea5f 452a 	movs.w	r5, sl, asr #16
 803a702:	ea4f 4328 	mov.w	r3, r8, asr #16
 803a706:	d406      	bmi.n	803a716 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 803a708:	4285      	cmp	r5, r0
 803a70a:	da04      	bge.n	803a716 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 803a70c:	2b00      	cmp	r3, #0
 803a70e:	db02      	blt.n	803a716 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 803a710:	42a3      	cmp	r3, r4
 803a712:	f2c0 80ca 	blt.w	803a8aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 803a716:	3501      	adds	r5, #1
 803a718:	f100 80bb 	bmi.w	803a892 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 803a71c:	42a9      	cmp	r1, r5
 803a71e:	f2c0 80b8 	blt.w	803a892 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 803a722:	3301      	adds	r3, #1
 803a724:	f100 80b5 	bmi.w	803a892 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 803a728:	429a      	cmp	r2, r3
 803a72a:	f2c0 80b2 	blt.w	803a892 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 803a72e:	9b07      	ldr	r3, [sp, #28]
 803a730:	9d08      	ldr	r5, [sp, #32]
 803a732:	930d      	str	r3, [sp, #52]	@ 0x34
 803a734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803a736:	2b00      	cmp	r3, #0
 803a738:	f340 80d6 	ble.w	803a8e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 803a73c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 803a73e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 803a740:	68c6      	ldr	r6, [r0, #12]
 803a742:	689b      	ldr	r3, [r3, #8]
 803a744:	ea5f 402a 	movs.w	r0, sl, asr #16
 803a748:	ea4f 4428 	mov.w	r4, r8, asr #16
 803a74c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 803a750:	f3c8 3103 	ubfx	r1, r8, #12, #4
 803a754:	f100 810f 	bmi.w	803a976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 803a758:	1e5f      	subs	r7, r3, #1
 803a75a:	42b8      	cmp	r0, r7
 803a75c:	f280 810b 	bge.w	803a976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 803a760:	2c00      	cmp	r4, #0
 803a762:	f2c0 8108 	blt.w	803a976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 803a766:	1e77      	subs	r7, r6, #1
 803a768:	42bc      	cmp	r4, r7
 803a76a:	f280 8104 	bge.w	803a976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 803a76e:	b21b      	sxth	r3, r3
 803a770:	fb04 0003 	mla	r0, r4, r3, r0
 803a774:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803a776:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 803a77a:	1826      	adds	r6, r4, r0
 803a77c:	5c24      	ldrb	r4, [r4, r0]
 803a77e:	78b7      	ldrb	r7, [r6, #2]
 803a780:	970f      	str	r7, [sp, #60]	@ 0x3c
 803a782:	7977      	ldrb	r7, [r6, #5]
 803a784:	7870      	ldrb	r0, [r6, #1]
 803a786:	f896 e003 	ldrb.w	lr, [r6, #3]
 803a78a:	f896 c004 	ldrb.w	ip, [r6, #4]
 803a78e:	9710      	str	r7, [sp, #64]	@ 0x40
 803a790:	b1c9      	cbz	r1, 803a7c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 803a792:	f04f 0b03 	mov.w	fp, #3
 803a796:	f06f 0904 	mvn.w	r9, #4
 803a79a:	3605      	adds	r6, #5
 803a79c:	fb13 930b 	smlabb	r3, r3, fp, r9
 803a7a0:	eb06 0b03 	add.w	fp, r6, r3
 803a7a4:	5cf3      	ldrb	r3, [r6, r3]
 803a7a6:	9311      	str	r3, [sp, #68]	@ 0x44
 803a7a8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 803a7ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 803a7ae:	f89b 3002 	ldrb.w	r3, [fp, #2]
 803a7b2:	9315      	str	r3, [sp, #84]	@ 0x54
 803a7b4:	f89b 3003 	ldrb.w	r3, [fp, #3]
 803a7b8:	9312      	str	r3, [sp, #72]	@ 0x48
 803a7ba:	f89b 3004 	ldrb.w	r3, [fp, #4]
 803a7be:	9314      	str	r3, [sp, #80]	@ 0x50
 803a7c0:	f89b 3005 	ldrb.w	r3, [fp, #5]
 803a7c4:	9316      	str	r3, [sp, #88]	@ 0x58
 803a7c6:	b292      	uxth	r2, r2
 803a7c8:	b289      	uxth	r1, r1
 803a7ca:	fb02 f601 	mul.w	r6, r2, r1
 803a7ce:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 803a7d2:	0112      	lsls	r2, r2, #4
 803a7d4:	b289      	uxth	r1, r1
 803a7d6:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 803a7da:	1b92      	subs	r2, r2, r6
 803a7dc:	b292      	uxth	r2, r2
 803a7de:	eba9 0901 	sub.w	r9, r9, r1
 803a7e2:	fa1f f989 	uxth.w	r9, r9
 803a7e6:	fb02 fe0e 	mul.w	lr, r2, lr
 803a7ea:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 803a7ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 803a7f0:	fb09 e404 	mla	r4, r9, r4, lr
 803a7f4:	fb01 4407 	mla	r4, r1, r7, r4
 803a7f8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 803a7fa:	f895 e000 	ldrb.w	lr, [r5]
 803a7fe:	fb06 4407 	mla	r4, r6, r7, r4
 803a802:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 803a804:	f3c4 2407 	ubfx	r4, r4, #8, #8
 803a808:	fb1e fe07 	smulbb	lr, lr, r7
 803a80c:	fb04 e403 	mla	r4, r4, r3, lr
 803a810:	b2a4      	uxth	r4, r4
 803a812:	f104 0e01 	add.w	lr, r4, #1
 803a816:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 803a81a:	fb02 fc0c 	mul.w	ip, r2, ip
 803a81e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 803a820:	fb09 c000 	mla	r0, r9, r0, ip
 803a824:	fb01 0004 	mla	r0, r1, r4, r0
 803a828:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803a82a:	fb06 0004 	mla	r0, r6, r4, r0
 803a82e:	786c      	ldrb	r4, [r5, #1]
 803a830:	f3c0 2007 	ubfx	r0, r0, #8, #8
 803a834:	fb14 f407 	smulbb	r4, r4, r7
 803a838:	fb00 4003 	mla	r0, r0, r3, r4
 803a83c:	b280      	uxth	r0, r0
 803a83e:	1c44      	adds	r4, r0, #1
 803a840:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 803a844:	1200      	asrs	r0, r0, #8
 803a846:	7068      	strb	r0, [r5, #1]
 803a848:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803a84a:	4342      	muls	r2, r0
 803a84c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803a84e:	fb09 2200 	mla	r2, r9, r0, r2
 803a852:	9815      	ldr	r0, [sp, #84]	@ 0x54
 803a854:	fb01 2100 	mla	r1, r1, r0, r2
 803a858:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803a85a:	fb06 1602 	mla	r6, r6, r2, r1
 803a85e:	78a9      	ldrb	r1, [r5, #2]
 803a860:	f3c6 2607 	ubfx	r6, r6, #8, #8
 803a864:	fb11 f107 	smulbb	r1, r1, r7
 803a868:	fb06 1303 	mla	r3, r6, r3, r1
 803a86c:	b29b      	uxth	r3, r3
 803a86e:	1c5e      	adds	r6, r3, #1
 803a870:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 803a874:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 803a878:	121b      	asrs	r3, r3, #8
 803a87a:	f885 e000 	strb.w	lr, [r5]
 803a87e:	70ab      	strb	r3, [r5, #2]
 803a880:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 803a882:	449a      	add	sl, r3
 803a884:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803a886:	4498      	add	r8, r3
 803a888:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803a88a:	3b01      	subs	r3, #1
 803a88c:	3503      	adds	r5, #3
 803a88e:	930d      	str	r3, [sp, #52]	@ 0x34
 803a890:	e750      	b.n	803a734 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 803a892:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 803a894:	449a      	add	sl, r3
 803a896:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803a898:	4498      	add	r8, r3
 803a89a:	9b07      	ldr	r3, [sp, #28]
 803a89c:	3b01      	subs	r3, #1
 803a89e:	9307      	str	r3, [sp, #28]
 803a8a0:	9b08      	ldr	r3, [sp, #32]
 803a8a2:	3303      	adds	r3, #3
 803a8a4:	9308      	str	r3, [sp, #32]
 803a8a6:	e726      	b.n	803a6f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 803a8a8:	d026      	beq.n	803a8f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 803a8aa:	9b07      	ldr	r3, [sp, #28]
 803a8ac:	982b      	ldr	r0, [sp, #172]	@ 0xac
 803a8ae:	3b01      	subs	r3, #1
 803a8b0:	fb00 a003 	mla	r0, r0, r3, sl
 803a8b4:	1400      	asrs	r0, r0, #16
 803a8b6:	f53f af3a 	bmi.w	803a72e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803a8ba:	3901      	subs	r1, #1
 803a8bc:	4288      	cmp	r0, r1
 803a8be:	f6bf af36 	bge.w	803a72e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803a8c2:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 803a8c4:	fb01 8303 	mla	r3, r1, r3, r8
 803a8c8:	141b      	asrs	r3, r3, #16
 803a8ca:	f53f af30 	bmi.w	803a72e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803a8ce:	3a01      	subs	r2, #1
 803a8d0:	4293      	cmp	r3, r2
 803a8d2:	f6bf af2c 	bge.w	803a72e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803a8d6:	9b08      	ldr	r3, [sp, #32]
 803a8d8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 803a8dc:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 803a8e0:	1cdd      	adds	r5, r3, #3
 803a8e2:	f1bc 0f00 	cmp.w	ip, #0
 803a8e6:	dc5f      	bgt.n	803a9a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 803a8e8:	9b07      	ldr	r3, [sp, #28]
 803a8ea:	9a08      	ldr	r2, [sp, #32]
 803a8ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 803a8f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 803a8f4:	441a      	add	r2, r3
 803a8f6:	9208      	str	r2, [sp, #32]
 803a8f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a8fa:	2b00      	cmp	r3, #0
 803a8fc:	f340 80e9 	ble.w	803aad2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 803a900:	ee30 0a04 	vadd.f32	s0, s0, s8
 803a904:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 803a908:	eec7 7a00 	vdiv.f32	s15, s14, s0
 803a90c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a90e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 803a912:	ee31 1a05 	vadd.f32	s2, s2, s10
 803a916:	ee20 7aa7 	vmul.f32	s14, s1, s15
 803a91a:	eef0 6a62 	vmov.f32	s13, s5
 803a91e:	ee61 7a27 	vmul.f32	s15, s2, s15
 803a922:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803a926:	ee77 2a62 	vsub.f32	s5, s14, s5
 803a92a:	ee16 aa90 	vmov	sl, s13
 803a92e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 803a932:	eef0 6a43 	vmov.f32	s13, s6
 803a936:	ee37 3ac3 	vsub.f32	s6, s15, s6
 803a93a:	ee12 2a90 	vmov	r2, s5
 803a93e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 803a942:	fb92 f3f3 	sdiv	r3, r2, r3
 803a946:	ee13 2a10 	vmov	r2, s6
 803a94a:	932b      	str	r3, [sp, #172]	@ 0xac
 803a94c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a94e:	fb92 f3f3 	sdiv	r3, r2, r3
 803a952:	932c      	str	r3, [sp, #176]	@ 0xb0
 803a954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803a956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803a958:	3b01      	subs	r3, #1
 803a95a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803a95e:	930b      	str	r3, [sp, #44]	@ 0x2c
 803a960:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803a962:	bf08      	it	eq
 803a964:	4613      	moveq	r3, r2
 803a966:	ee16 8a90 	vmov	r8, s13
 803a96a:	9307      	str	r3, [sp, #28]
 803a96c:	eeb0 3a67 	vmov.f32	s6, s15
 803a970:	eef0 2a47 	vmov.f32	s5, s14
 803a974:	e6b1      	b.n	803a6da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 803a976:	1c47      	adds	r7, r0, #1
 803a978:	d482      	bmi.n	803a880 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 803a97a:	42bb      	cmp	r3, r7
 803a97c:	db80      	blt.n	803a880 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 803a97e:	1c67      	adds	r7, r4, #1
 803a980:	f53f af7e 	bmi.w	803a880 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 803a984:	42be      	cmp	r6, r7
 803a986:	f6ff af7b 	blt.w	803a880 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 803a98a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 803a98c:	9001      	str	r0, [sp, #4]
 803a98e:	b236      	sxth	r6, r6
 803a990:	e9cd 1704 	strd	r1, r7, [sp, #16]
 803a994:	e9cd 4202 	strd	r4, r2, [sp, #8]
 803a998:	9600      	str	r6, [sp, #0]
 803a99a:	b21b      	sxth	r3, r3
 803a99c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 803a99e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 803a9a0:	4629      	mov	r1, r5
 803a9a2:	f7ff fd82 	bl	803a4aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 803a9a6:	e76b      	b.n	803a880 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 803a9a8:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 803a9aa:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 803a9ae:	ea4f 402a 	mov.w	r0, sl, asr #16
 803a9b2:	ea4f 4128 	mov.w	r1, r8, asr #16
 803a9b6:	fb07 0101 	mla	r1, r7, r1, r0
 803a9ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 803a9bc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 803a9c0:	1844      	adds	r4, r0, r1
 803a9c2:	f3c8 3203 	ubfx	r2, r8, #12, #4
 803a9c6:	78a6      	ldrb	r6, [r4, #2]
 803a9c8:	5c40      	ldrb	r0, [r0, r1]
 803a9ca:	960f      	str	r6, [sp, #60]	@ 0x3c
 803a9cc:	7861      	ldrb	r1, [r4, #1]
 803a9ce:	78e6      	ldrb	r6, [r4, #3]
 803a9d0:	910d      	str	r1, [sp, #52]	@ 0x34
 803a9d2:	f3ca 3303 	ubfx	r3, sl, #12, #4
 803a9d6:	9610      	str	r6, [sp, #64]	@ 0x40
 803a9d8:	f894 9004 	ldrb.w	r9, [r4, #4]
 803a9dc:	f894 b005 	ldrb.w	fp, [r4, #5]
 803a9e0:	b192      	cbz	r2, 803aa08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 803a9e2:	f06f 0604 	mvn.w	r6, #4
 803a9e6:	2103      	movs	r1, #3
 803a9e8:	3405      	adds	r4, #5
 803a9ea:	fb17 6701 	smlabb	r7, r7, r1, r6
 803a9ee:	19e6      	adds	r6, r4, r7
 803a9f0:	5de4      	ldrb	r4, [r4, r7]
 803a9f2:	9417      	str	r4, [sp, #92]	@ 0x5c
 803a9f4:	7874      	ldrb	r4, [r6, #1]
 803a9f6:	9419      	str	r4, [sp, #100]	@ 0x64
 803a9f8:	78b4      	ldrb	r4, [r6, #2]
 803a9fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 803a9fc:	78f4      	ldrb	r4, [r6, #3]
 803a9fe:	9418      	str	r4, [sp, #96]	@ 0x60
 803aa00:	7934      	ldrb	r4, [r6, #4]
 803aa02:	941a      	str	r4, [sp, #104]	@ 0x68
 803aa04:	7974      	ldrb	r4, [r6, #5]
 803aa06:	941c      	str	r4, [sp, #112]	@ 0x70
 803aa08:	b29b      	uxth	r3, r3
 803aa0a:	b292      	uxth	r2, r2
 803aa0c:	fb03 f402 	mul.w	r4, r3, r2
 803aa10:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 803aa14:	011b      	lsls	r3, r3, #4
 803aa16:	b292      	uxth	r2, r2
 803aa18:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 803aa1c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 803aa1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803aa20:	1b1b      	subs	r3, r3, r4
 803aa22:	b29b      	uxth	r3, r3
 803aa24:	1ab6      	subs	r6, r6, r2
 803aa26:	b2b6      	uxth	r6, r6
 803aa28:	435f      	muls	r7, r3
 803aa2a:	fb06 7000 	mla	r0, r6, r0, r7
 803aa2e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 803aa30:	fb02 0007 	mla	r0, r2, r7, r0
 803aa34:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 803aa36:	fb04 0007 	mla	r0, r4, r7, r0
 803aa3a:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 803aa3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 803aa42:	fb17 f701 	smulbb	r7, r7, r1
 803aa46:	fb00 700e 	mla	r0, r0, lr, r7
 803aa4a:	b280      	uxth	r0, r0
 803aa4c:	1c47      	adds	r7, r0, #1
 803aa4e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 803aa52:	fb03 f909 	mul.w	r9, r3, r9
 803aa56:	fb03 fb0b 	mul.w	fp, r3, fp
 803aa5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803aa5c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 803aa5e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 803aa60:	1200      	asrs	r0, r0, #8
 803aa62:	f805 0c03 	strb.w	r0, [r5, #-3]
 803aa66:	fb06 bb03 	mla	fp, r6, r3, fp
 803aa6a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 803aa6c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 803aa6e:	fb06 9101 	mla	r1, r6, r1, r9
 803aa72:	fb02 1100 	mla	r1, r2, r0, r1
 803aa76:	fb02 bb03 	mla	fp, r2, r3, fp
 803aa7a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 803aa7c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 803aa7e:	fb04 1100 	mla	r1, r4, r0, r1
 803aa82:	fb04 b403 	mla	r4, r4, r3, fp
 803aa86:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 803aa8a:	f815 0c02 	ldrb.w	r0, [r5, #-2]
 803aa8e:	fb13 f307 	smulbb	r3, r3, r7
 803aa92:	f3c4 2407 	ubfx	r4, r4, #8, #8
 803aa96:	fb04 340e 	mla	r4, r4, lr, r3
 803aa9a:	fb10 f007 	smulbb	r0, r0, r7
 803aa9e:	b2a4      	uxth	r4, r4
 803aaa0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 803aaa4:	fb01 010e 	mla	r1, r1, lr, r0
 803aaa8:	1c63      	adds	r3, r4, #1
 803aaaa:	b289      	uxth	r1, r1
 803aaac:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 803aab0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 803aab2:	1c48      	adds	r0, r1, #1
 803aab4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 803aab8:	449a      	add	sl, r3
 803aaba:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803aabc:	1209      	asrs	r1, r1, #8
 803aabe:	1224      	asrs	r4, r4, #8
 803aac0:	f805 1c02 	strb.w	r1, [r5, #-2]
 803aac4:	f805 4c01 	strb.w	r4, [r5, #-1]
 803aac8:	4498      	add	r8, r3
 803aaca:	3503      	adds	r5, #3
 803aacc:	f10c 3cff 	add.w	ip, ip, #4294967295
 803aad0:	e707      	b.n	803a8e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 803aad2:	b01f      	add	sp, #124	@ 0x7c
 803aad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803aad8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 803aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803aadc:	b087      	sub	sp, #28
 803aade:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 803aae2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 803aae6:	9004      	str	r0, [sp, #16]
 803aae8:	fb06 bc03 	mla	ip, r6, r3, fp
 803aaec:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 803aaf0:	9005      	str	r0, [sp, #20]
 803aaf2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 803aaf6:	2e00      	cmp	r6, #0
 803aaf8:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 803aafc:	780d      	ldrb	r5, [r1, #0]
 803aafe:	784c      	ldrb	r4, [r1, #1]
 803ab00:	7888      	ldrb	r0, [r1, #2]
 803ab02:	eb02 090c 	add.w	r9, r2, ip
 803ab06:	f2c0 8084 	blt.w	803ac12 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 803ab0a:	42b7      	cmp	r7, r6
 803ab0c:	f340 8081 	ble.w	803ac12 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 803ab10:	f1bb 0f00 	cmp.w	fp, #0
 803ab14:	db79      	blt.n	803ac0a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 803ab16:	455b      	cmp	r3, fp
 803ab18:	dd77      	ble.n	803ac0a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 803ab1a:	f812 200c 	ldrb.w	r2, [r2, ip]
 803ab1e:	9201      	str	r2, [sp, #4]
 803ab20:	f899 2001 	ldrb.w	r2, [r9, #1]
 803ab24:	9202      	str	r2, [sp, #8]
 803ab26:	f899 2002 	ldrb.w	r2, [r9, #2]
 803ab2a:	9203      	str	r2, [sp, #12]
 803ab2c:	f11b 0201 	adds.w	r2, fp, #1
 803ab30:	d476      	bmi.n	803ac20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 803ab32:	4293      	cmp	r3, r2
 803ab34:	dd74      	ble.n	803ac20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 803ab36:	9a04      	ldr	r2, [sp, #16]
 803ab38:	2a00      	cmp	r2, #0
 803ab3a:	d071      	beq.n	803ac20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 803ab3c:	f899 8003 	ldrb.w	r8, [r9, #3]
 803ab40:	f899 c004 	ldrb.w	ip, [r9, #4]
 803ab44:	f899 a005 	ldrb.w	sl, [r9, #5]
 803ab48:	3601      	adds	r6, #1
 803ab4a:	d471      	bmi.n	803ac30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 803ab4c:	42b7      	cmp	r7, r6
 803ab4e:	dd6f      	ble.n	803ac30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 803ab50:	9a05      	ldr	r2, [sp, #20]
 803ab52:	2a00      	cmp	r2, #0
 803ab54:	d06c      	beq.n	803ac30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 803ab56:	f1bb 0f00 	cmp.w	fp, #0
 803ab5a:	db65      	blt.n	803ac28 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 803ab5c:	455b      	cmp	r3, fp
 803ab5e:	dd63      	ble.n	803ac28 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 803ab60:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 803ab64:	f819 e002 	ldrb.w	lr, [r9, r2]
 803ab68:	2203      	movs	r2, #3
 803ab6a:	fb03 9602 	mla	r6, r3, r2, r9
 803ab6e:	7877      	ldrb	r7, [r6, #1]
 803ab70:	78b6      	ldrb	r6, [r6, #2]
 803ab72:	f11b 0b01 	adds.w	fp, fp, #1
 803ab76:	d40c      	bmi.n	803ab92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 803ab78:	455b      	cmp	r3, fp
 803ab7a:	dd0a      	ble.n	803ab92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 803ab7c:	9a04      	ldr	r2, [sp, #16]
 803ab7e:	b142      	cbz	r2, 803ab92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 803ab80:	2203      	movs	r2, #3
 803ab82:	fb13 2002 	smlabb	r0, r3, r2, r2
 803ab86:	f819 5000 	ldrb.w	r5, [r9, r0]
 803ab8a:	fb03 9002 	mla	r0, r3, r2, r9
 803ab8e:	7904      	ldrb	r4, [r0, #4]
 803ab90:	7940      	ldrb	r0, [r0, #5]
 803ab92:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 803ab96:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 803ab9a:	fb03 fb02 	mul.w	fp, r3, r2
 803ab9e:	011b      	lsls	r3, r3, #4
 803aba0:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 803aba4:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 803aba8:	eba3 030b 	sub.w	r3, r3, fp
 803abac:	b292      	uxth	r2, r2
 803abae:	b29b      	uxth	r3, r3
 803abb0:	9304      	str	r3, [sp, #16]
 803abb2:	eba9 0902 	sub.w	r9, r9, r2
 803abb6:	fb03 f808 	mul.w	r8, r3, r8
 803abba:	9b01      	ldr	r3, [sp, #4]
 803abbc:	fa1f f989 	uxth.w	r9, r9
 803abc0:	fb09 8803 	mla	r8, r9, r3, r8
 803abc4:	9b04      	ldr	r3, [sp, #16]
 803abc6:	fb03 fc0c 	mul.w	ip, r3, ip
 803abca:	9b02      	ldr	r3, [sp, #8]
 803abcc:	fb09 cc03 	mla	ip, r9, r3, ip
 803abd0:	fb02 c707 	mla	r7, r2, r7, ip
 803abd4:	fb0b 7404 	mla	r4, fp, r4, r7
 803abd8:	1224      	asrs	r4, r4, #8
 803abda:	9b04      	ldr	r3, [sp, #16]
 803abdc:	704c      	strb	r4, [r1, #1]
 803abde:	9c03      	ldr	r4, [sp, #12]
 803abe0:	fb03 f30a 	mul.w	r3, r3, sl
 803abe4:	fb09 3904 	mla	r9, r9, r4, r3
 803abe8:	fb02 880e 	mla	r8, r2, lr, r8
 803abec:	fb02 9206 	mla	r2, r2, r6, r9
 803abf0:	fb0b 8805 	mla	r8, fp, r5, r8
 803abf4:	fb0b 2000 	mla	r0, fp, r0, r2
 803abf8:	ea4f 2828 	mov.w	r8, r8, asr #8
 803abfc:	1200      	asrs	r0, r0, #8
 803abfe:	f881 8000 	strb.w	r8, [r1]
 803ac02:	7088      	strb	r0, [r1, #2]
 803ac04:	b007      	add	sp, #28
 803ac06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ac0a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 803ac0e:	9501      	str	r5, [sp, #4]
 803ac10:	e78c      	b.n	803ab2c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 803ac12:	4682      	mov	sl, r0
 803ac14:	46a4      	mov	ip, r4
 803ac16:	46a8      	mov	r8, r5
 803ac18:	e9cd 4002 	strd	r4, r0, [sp, #8]
 803ac1c:	9501      	str	r5, [sp, #4]
 803ac1e:	e793      	b.n	803ab48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 803ac20:	4682      	mov	sl, r0
 803ac22:	46a4      	mov	ip, r4
 803ac24:	46a8      	mov	r8, r5
 803ac26:	e78f      	b.n	803ab48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 803ac28:	4606      	mov	r6, r0
 803ac2a:	4627      	mov	r7, r4
 803ac2c:	46ae      	mov	lr, r5
 803ac2e:	e7a0      	b.n	803ab72 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 803ac30:	4606      	mov	r6, r0
 803ac32:	4627      	mov	r7, r4
 803ac34:	46ae      	mov	lr, r5
 803ac36:	e7ac      	b.n	803ab92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0803ac38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 803ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803ac3c:	b09b      	sub	sp, #108	@ 0x6c
 803ac3e:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 803ac42:	920b      	str	r2, [sp, #44]	@ 0x2c
 803ac44:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 803ac46:	9109      	str	r1, [sp, #36]	@ 0x24
 803ac48:	9306      	str	r3, [sp, #24]
 803ac4a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 803ac4e:	9019      	str	r0, [sp, #100]	@ 0x64
 803ac50:	6850      	ldr	r0, [r2, #4]
 803ac52:	6812      	ldr	r2, [r2, #0]
 803ac54:	fb00 1303 	mla	r3, r0, r3, r1
 803ac58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 803ac5c:	18d3      	adds	r3, r2, r3
 803ac5e:	9307      	str	r3, [sp, #28]
 803ac60:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803ac62:	681b      	ldr	r3, [r3, #0]
 803ac64:	9308      	str	r3, [sp, #32]
 803ac66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ac68:	2b00      	cmp	r3, #0
 803ac6a:	dc03      	bgt.n	803ac74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 803ac6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803ac6e:	2b00      	cmp	r3, #0
 803ac70:	f340 81ac 	ble.w	803afcc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 803ac74:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803ac76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 803ac7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 803ac7e:	1e48      	subs	r0, r1, #1
 803ac80:	1e55      	subs	r5, r2, #1
 803ac82:	9b06      	ldr	r3, [sp, #24]
 803ac84:	2b00      	cmp	r3, #0
 803ac86:	f340 80b2 	ble.w	803adee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 803ac8a:	ea5f 462b 	movs.w	r6, fp, asr #16
 803ac8e:	ea4f 4324 	mov.w	r3, r4, asr #16
 803ac92:	d406      	bmi.n	803aca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 803ac94:	4286      	cmp	r6, r0
 803ac96:	da04      	bge.n	803aca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 803ac98:	2b00      	cmp	r3, #0
 803ac9a:	db02      	blt.n	803aca2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 803ac9c:	42ab      	cmp	r3, r5
 803ac9e:	f2c0 80a7 	blt.w	803adf0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 803aca2:	3601      	adds	r6, #1
 803aca4:	f100 8098 	bmi.w	803add8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 803aca8:	42b1      	cmp	r1, r6
 803acaa:	f2c0 8095 	blt.w	803add8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 803acae:	3301      	adds	r3, #1
 803acb0:	f100 8092 	bmi.w	803add8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 803acb4:	429a      	cmp	r2, r3
 803acb6:	f2c0 808f 	blt.w	803add8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 803acba:	9b06      	ldr	r3, [sp, #24]
 803acbc:	9e07      	ldr	r6, [sp, #28]
 803acbe:	930a      	str	r3, [sp, #40]	@ 0x28
 803acc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803acc2:	2b00      	cmp	r3, #0
 803acc4:	f340 80b1 	ble.w	803ae2a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f2>
 803acc8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 803acca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 803accc:	68c7      	ldr	r7, [r0, #12]
 803acce:	689b      	ldr	r3, [r3, #8]
 803acd0:	ea5f 402b 	movs.w	r0, fp, asr #16
 803acd4:	ea4f 4524 	mov.w	r5, r4, asr #16
 803acd8:	f3cb 3203 	ubfx	r2, fp, #12, #4
 803acdc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 803ace0:	f100 80ea 	bmi.w	803aeb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 803ace4:	f103 3cff 	add.w	ip, r3, #4294967295
 803ace8:	4560      	cmp	r0, ip
 803acea:	f280 80e5 	bge.w	803aeb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 803acee:	2d00      	cmp	r5, #0
 803acf0:	f2c0 80e2 	blt.w	803aeb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 803acf4:	f107 3cff 	add.w	ip, r7, #4294967295
 803acf8:	4565      	cmp	r5, ip
 803acfa:	f280 80dd 	bge.w	803aeb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 803acfe:	b21b      	sxth	r3, r3
 803ad00:	fb05 0003 	mla	r0, r5, r3, r0
 803ad04:	9d08      	ldr	r5, [sp, #32]
 803ad06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 803ad0a:	182f      	adds	r7, r5, r0
 803ad0c:	5c2d      	ldrb	r5, [r5, r0]
 803ad0e:	7878      	ldrb	r0, [r7, #1]
 803ad10:	900c      	str	r0, [sp, #48]	@ 0x30
 803ad12:	f897 e002 	ldrb.w	lr, [r7, #2]
 803ad16:	f897 9003 	ldrb.w	r9, [r7, #3]
 803ad1a:	f897 8004 	ldrb.w	r8, [r7, #4]
 803ad1e:	f897 a005 	ldrb.w	sl, [r7, #5]
 803ad22:	b1c9      	cbz	r1, 803ad58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 803ad24:	f04f 0c03 	mov.w	ip, #3
 803ad28:	f06f 0004 	mvn.w	r0, #4
 803ad2c:	3705      	adds	r7, #5
 803ad2e:	fb13 030c 	smlabb	r3, r3, ip, r0
 803ad32:	eb07 0c03 	add.w	ip, r7, r3
 803ad36:	5cfb      	ldrb	r3, [r7, r3]
 803ad38:	930d      	str	r3, [sp, #52]	@ 0x34
 803ad3a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 803ad3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 803ad40:	f89c 3002 	ldrb.w	r3, [ip, #2]
 803ad44:	9311      	str	r3, [sp, #68]	@ 0x44
 803ad46:	f89c 3003 	ldrb.w	r3, [ip, #3]
 803ad4a:	930e      	str	r3, [sp, #56]	@ 0x38
 803ad4c:	f89c 3004 	ldrb.w	r3, [ip, #4]
 803ad50:	9310      	str	r3, [sp, #64]	@ 0x40
 803ad52:	f89c 3005 	ldrb.w	r3, [ip, #5]
 803ad56:	9312      	str	r3, [sp, #72]	@ 0x48
 803ad58:	b292      	uxth	r2, r2
 803ad5a:	b289      	uxth	r1, r1
 803ad5c:	fb02 f301 	mul.w	r3, r2, r1
 803ad60:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 803ad64:	0112      	lsls	r2, r2, #4
 803ad66:	b289      	uxth	r1, r1
 803ad68:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 803ad6c:	1ad2      	subs	r2, r2, r3
 803ad6e:	b292      	uxth	r2, r2
 803ad70:	1a7f      	subs	r7, r7, r1
 803ad72:	980c      	ldr	r0, [sp, #48]	@ 0x30
 803ad74:	b2bf      	uxth	r7, r7
 803ad76:	fb02 f909 	mul.w	r9, r2, r9
 803ad7a:	fb02 f808 	mul.w	r8, r2, r8
 803ad7e:	fb07 9905 	mla	r9, r7, r5, r9
 803ad82:	fb07 8800 	mla	r8, r7, r0, r8
 803ad86:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 803ad88:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 803ad8a:	fb02 fa0a 	mul.w	sl, r2, sl
 803ad8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803ad90:	fb07 aa0e 	mla	sl, r7, lr, sl
 803ad94:	fb01 9905 	mla	r9, r1, r5, r9
 803ad98:	fb01 8800 	mla	r8, r1, r0, r8
 803ad9c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 803ad9e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803ada0:	fb01 a102 	mla	r1, r1, r2, sl
 803ada4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803ada6:	fb03 9905 	mla	r9, r3, r5, r9
 803adaa:	fb03 8800 	mla	r8, r3, r0, r8
 803adae:	fb03 1302 	mla	r3, r3, r2, r1
 803adb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 803adb6:	ea4f 2828 	mov.w	r8, r8, asr #8
 803adba:	121b      	asrs	r3, r3, #8
 803adbc:	f886 9000 	strb.w	r9, [r6]
 803adc0:	f886 8001 	strb.w	r8, [r6, #1]
 803adc4:	70b3      	strb	r3, [r6, #2]
 803adc6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803adc8:	449b      	add	fp, r3
 803adca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803adcc:	441c      	add	r4, r3
 803adce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803add0:	3b01      	subs	r3, #1
 803add2:	3603      	adds	r6, #3
 803add4:	930a      	str	r3, [sp, #40]	@ 0x28
 803add6:	e773      	b.n	803acc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 803add8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803adda:	449b      	add	fp, r3
 803addc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803adde:	441c      	add	r4, r3
 803ade0:	9b06      	ldr	r3, [sp, #24]
 803ade2:	3b01      	subs	r3, #1
 803ade4:	9306      	str	r3, [sp, #24]
 803ade6:	9b07      	ldr	r3, [sp, #28]
 803ade8:	3303      	adds	r3, #3
 803adea:	9307      	str	r3, [sp, #28]
 803adec:	e749      	b.n	803ac82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 803adee:	d024      	beq.n	803ae3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 803adf0:	9b06      	ldr	r3, [sp, #24]
 803adf2:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 803adf4:	3b01      	subs	r3, #1
 803adf6:	fb00 b003 	mla	r0, r0, r3, fp
 803adfa:	1400      	asrs	r0, r0, #16
 803adfc:	f53f af5d 	bmi.w	803acba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 803ae00:	3901      	subs	r1, #1
 803ae02:	4288      	cmp	r0, r1
 803ae04:	f6bf af59 	bge.w	803acba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 803ae08:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 803ae0a:	fb01 4303 	mla	r3, r1, r3, r4
 803ae0e:	141b      	asrs	r3, r3, #16
 803ae10:	f53f af53 	bmi.w	803acba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 803ae14:	3a01      	subs	r2, #1
 803ae16:	4293      	cmp	r3, r2
 803ae18:	f6bf af4f 	bge.w	803acba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 803ae1c:	9b07      	ldr	r3, [sp, #28]
 803ae1e:	f8dd e018 	ldr.w	lr, [sp, #24]
 803ae22:	1cde      	adds	r6, r3, #3
 803ae24:	f1be 0f00 	cmp.w	lr, #0
 803ae28:	dc5f      	bgt.n	803aeea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 803ae2a:	9b06      	ldr	r3, [sp, #24]
 803ae2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 803ae30:	9b07      	ldr	r3, [sp, #28]
 803ae32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 803ae36:	4423      	add	r3, r4
 803ae38:	9307      	str	r3, [sp, #28]
 803ae3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ae3c:	2b00      	cmp	r3, #0
 803ae3e:	f340 80c5 	ble.w	803afcc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 803ae42:	ee30 0a04 	vadd.f32	s0, s0, s8
 803ae46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 803ae4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 803ae4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803ae50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 803ae54:	ee31 1a05 	vadd.f32	s2, s2, s10
 803ae58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 803ae5c:	eef0 6a62 	vmov.f32	s13, s5
 803ae60:	ee61 7a27 	vmul.f32	s15, s2, s15
 803ae64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803ae68:	ee77 2a62 	vsub.f32	s5, s14, s5
 803ae6c:	ee16 ba90 	vmov	fp, s13
 803ae70:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 803ae74:	eef0 6a43 	vmov.f32	s13, s6
 803ae78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 803ae7c:	ee12 2a90 	vmov	r2, s5
 803ae80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 803ae84:	fb92 f3f3 	sdiv	r3, r2, r3
 803ae88:	ee13 2a10 	vmov	r2, s6
 803ae8c:	9327      	str	r3, [sp, #156]	@ 0x9c
 803ae8e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803ae90:	fb92 f3f3 	sdiv	r3, r2, r3
 803ae94:	9328      	str	r3, [sp, #160]	@ 0xa0
 803ae96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ae98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 803ae9a:	3b01      	subs	r3, #1
 803ae9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803aea0:	9309      	str	r3, [sp, #36]	@ 0x24
 803aea2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 803aea4:	bf08      	it	eq
 803aea6:	4613      	moveq	r3, r2
 803aea8:	ee16 4a90 	vmov	r4, s13
 803aeac:	9306      	str	r3, [sp, #24]
 803aeae:	eeb0 3a67 	vmov.f32	s6, s15
 803aeb2:	eef0 2a47 	vmov.f32	s5, s14
 803aeb6:	e6d6      	b.n	803ac66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 803aeb8:	f110 0c01 	adds.w	ip, r0, #1
 803aebc:	d483      	bmi.n	803adc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 803aebe:	4563      	cmp	r3, ip
 803aec0:	db81      	blt.n	803adc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 803aec2:	f115 0c01 	adds.w	ip, r5, #1
 803aec6:	f53f af7e 	bmi.w	803adc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 803aeca:	4567      	cmp	r7, ip
 803aecc:	f6ff af7b 	blt.w	803adc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 803aed0:	b23f      	sxth	r7, r7
 803aed2:	e9cd 2103 	strd	r2, r1, [sp, #12]
 803aed6:	e9cd 0501 	strd	r0, r5, [sp, #4]
 803aeda:	9700      	str	r7, [sp, #0]
 803aedc:	b21b      	sxth	r3, r3
 803aede:	9a08      	ldr	r2, [sp, #32]
 803aee0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 803aee2:	4631      	mov	r1, r6
 803aee4:	f7ff fdf8 	bl	803aad8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 803aee8:	e76d      	b.n	803adc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 803aeea:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 803aeec:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 803aef0:	ea4f 402b 	mov.w	r0, fp, asr #16
 803aef4:	1421      	asrs	r1, r4, #16
 803aef6:	fb0c 0101 	mla	r1, ip, r1, r0
 803aefa:	9808      	ldr	r0, [sp, #32]
 803aefc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 803af00:	1845      	adds	r5, r0, r1
 803af02:	f3cb 3303 	ubfx	r3, fp, #12, #4
 803af06:	796f      	ldrb	r7, [r5, #5]
 803af08:	5c40      	ldrb	r0, [r0, r1]
 803af0a:	930a      	str	r3, [sp, #40]	@ 0x28
 803af0c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 803af10:	7869      	ldrb	r1, [r5, #1]
 803af12:	f895 8002 	ldrb.w	r8, [r5, #2]
 803af16:	f895 a003 	ldrb.w	sl, [r5, #3]
 803af1a:	f895 9004 	ldrb.w	r9, [r5, #4]
 803af1e:	970c      	str	r7, [sp, #48]	@ 0x30
 803af20:	b1a2      	cbz	r2, 803af4c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 803af22:	2703      	movs	r7, #3
 803af24:	f06f 0304 	mvn.w	r3, #4
 803af28:	3505      	adds	r5, #5
 803af2a:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 803af2e:	eb05 070c 	add.w	r7, r5, ip
 803af32:	f815 500c 	ldrb.w	r5, [r5, ip]
 803af36:	9513      	str	r5, [sp, #76]	@ 0x4c
 803af38:	787d      	ldrb	r5, [r7, #1]
 803af3a:	9515      	str	r5, [sp, #84]	@ 0x54
 803af3c:	78bd      	ldrb	r5, [r7, #2]
 803af3e:	9517      	str	r5, [sp, #92]	@ 0x5c
 803af40:	78fd      	ldrb	r5, [r7, #3]
 803af42:	9514      	str	r5, [sp, #80]	@ 0x50
 803af44:	793d      	ldrb	r5, [r7, #4]
 803af46:	9516      	str	r5, [sp, #88]	@ 0x58
 803af48:	797d      	ldrb	r5, [r7, #5]
 803af4a:	9518      	str	r5, [sp, #96]	@ 0x60
 803af4c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 803af50:	b292      	uxth	r2, r2
 803af52:	fb03 f502 	mul.w	r5, r3, r2
 803af56:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 803af5a:	011b      	lsls	r3, r3, #4
 803af5c:	b292      	uxth	r2, r2
 803af5e:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 803af62:	1b5b      	subs	r3, r3, r5
 803af64:	b29b      	uxth	r3, r3
 803af66:	1abf      	subs	r7, r7, r2
 803af68:	b2bf      	uxth	r7, r7
 803af6a:	fb03 f909 	mul.w	r9, r3, r9
 803af6e:	fb07 9901 	mla	r9, r7, r1, r9
 803af72:	9915      	ldr	r1, [sp, #84]	@ 0x54
 803af74:	fb02 9901 	mla	r9, r2, r1, r9
 803af78:	9916      	ldr	r1, [sp, #88]	@ 0x58
 803af7a:	fb05 9901 	mla	r9, r5, r1, r9
 803af7e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 803af80:	fb03 fa0a 	mul.w	sl, r3, sl
 803af84:	fb07 aa00 	mla	sl, r7, r0, sl
 803af88:	434b      	muls	r3, r1
 803af8a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803af8c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 803af8e:	fb07 3308 	mla	r3, r7, r8, r3
 803af92:	fb02 aa00 	mla	sl, r2, r0, sl
 803af96:	fb02 3201 	mla	r2, r2, r1, r3
 803af9a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 803af9c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803af9e:	fb05 aa00 	mla	sl, r5, r0, sl
 803afa2:	fb05 2503 	mla	r5, r5, r3, r2
 803afa6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 803afa8:	449b      	add	fp, r3
 803afaa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 803afac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 803afb0:	ea4f 2929 	mov.w	r9, r9, asr #8
 803afb4:	122d      	asrs	r5, r5, #8
 803afb6:	f806 ac03 	strb.w	sl, [r6, #-3]
 803afba:	f806 9c02 	strb.w	r9, [r6, #-2]
 803afbe:	f806 5c01 	strb.w	r5, [r6, #-1]
 803afc2:	441c      	add	r4, r3
 803afc4:	3603      	adds	r6, #3
 803afc6:	f10e 3eff 	add.w	lr, lr, #4294967295
 803afca:	e72b      	b.n	803ae24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 803afcc:	b01b      	add	sp, #108	@ 0x6c
 803afce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803afd2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 803afd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803afd6:	b087      	sub	sp, #28
 803afd8:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 803afdc:	fb05 7003 	mla	r0, r5, r3, r7
 803afe0:	2d00      	cmp	r5, #0
 803afe2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 803afe6:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 803afea:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 803afee:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 803aff2:	f2c0 811f 	blt.w	803b234 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 803aff6:	45a8      	cmp	r8, r5
 803aff8:	f340 811c 	ble.w	803b234 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 803affc:	2f00      	cmp	r7, #0
 803affe:	f2c0 8117 	blt.w	803b230 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 803b002:	42bb      	cmp	r3, r7
 803b004:	f340 8114 	ble.w	803b230 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 803b008:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 803b00c:	1c7a      	adds	r2, r7, #1
 803b00e:	f100 8114 	bmi.w	803b23a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 803b012:	4293      	cmp	r3, r2
 803b014:	f340 8111 	ble.w	803b23a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 803b018:	2c00      	cmp	r4, #0
 803b01a:	f000 8110 	beq.w	803b23e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 803b01e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 803b022:	3501      	adds	r5, #1
 803b024:	f100 810f 	bmi.w	803b246 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 803b028:	45a8      	cmp	r8, r5
 803b02a:	f340 810c 	ble.w	803b246 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 803b02e:	f1be 0f00 	cmp.w	lr, #0
 803b032:	f000 810b 	beq.w	803b24c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 803b036:	2f00      	cmp	r7, #0
 803b038:	f2c0 8103 	blt.w	803b242 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 803b03c:	42bb      	cmp	r3, r7
 803b03e:	f340 8100 	ble.w	803b242 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 803b042:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 803b046:	3701      	adds	r7, #1
 803b048:	f100 8103 	bmi.w	803b252 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 803b04c:	42bb      	cmp	r3, r7
 803b04e:	f340 8100 	ble.w	803b252 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 803b052:	2c00      	cmp	r4, #0
 803b054:	f000 80ff 	beq.w	803b256 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 803b058:	3301      	adds	r3, #1
 803b05a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 803b05e:	fa1f fc84 	uxth.w	ip, r4
 803b062:	fa1f fe8e 	uxth.w	lr, lr
 803b066:	fb0c f90e 	mul.w	r9, ip, lr
 803b06a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 803b06e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 803b072:	fa1f f48e 	uxth.w	r4, lr
 803b076:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 803b07a:	0e13      	lsrs	r3, r2, #24
 803b07c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 803b080:	fb0a fe0e 	mul.w	lr, sl, lr
 803b084:	9302      	str	r3, [sp, #8]
 803b086:	ebac 0709 	sub.w	r7, ip, r9
 803b08a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 803b08e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 803b092:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b096:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 803b09a:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 803b09e:	fb0a f606 	mul.w	r6, sl, r6
 803b0a2:	1b1b      	subs	r3, r3, r4
 803b0a4:	44e6      	add	lr, ip
 803b0a6:	b29b      	uxth	r3, r3
 803b0a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803b0ac:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 803b0b0:	9301      	str	r3, [sp, #4]
 803b0b2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 803b0b6:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 803b0ba:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 803b0be:	9303      	str	r3, [sp, #12]
 803b0c0:	0a33      	lsrs	r3, r6, #8
 803b0c2:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 803b0c6:	fb0b f606 	mul.w	r6, fp, r6
 803b0ca:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 803b0ce:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 803b0d2:	fb0b f000 	mul.w	r0, fp, r0
 803b0d6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 803b0da:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b0de:	44b6      	add	lr, r6
 803b0e0:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 803b0e4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 803b0e8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 803b0ec:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 803b0f0:	fb08 f606 	mul.w	r6, r8, r6
 803b0f4:	9304      	str	r3, [sp, #16]
 803b0f6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 803b0fa:	0a03      	lsrs	r3, r0, #8
 803b0fc:	0a30      	lsrs	r0, r6, #8
 803b0fe:	fb08 f505 	mul.w	r5, r8, r5
 803b102:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 803b106:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 803b10a:	4430      	add	r0, r6
 803b10c:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 803b110:	9305      	str	r3, [sp, #20]
 803b112:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 803b116:	0e13      	lsrs	r3, r2, #24
 803b118:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 803b11c:	435e      	muls	r6, r3
 803b11e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 803b122:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803b126:	435a      	muls	r2, r3
 803b128:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 803b12c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b130:	44b4      	add	ip, r6
 803b132:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803b136:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 803b13a:	b2bf      	uxth	r7, r7
 803b13c:	9b03      	ldr	r3, [sp, #12]
 803b13e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 803b142:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b146:	9e01      	ldr	r6, [sp, #4]
 803b148:	fb0e fe07 	mul.w	lr, lr, r7
 803b14c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803b150:	fb03 ee06 	mla	lr, r3, r6, lr
 803b154:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b158:	9b04      	ldr	r3, [sp, #16]
 803b15a:	0a00      	lsrs	r0, r0, #8
 803b15c:	fb0c ee09 	mla	lr, ip, r9, lr
 803b160:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 803b164:	fb00 ee04 	mla	lr, r0, r4, lr
 803b168:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 803b16c:	9b05      	ldr	r3, [sp, #20]
 803b16e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803b172:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 803b176:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 803b17a:	9b01      	ldr	r3, [sp, #4]
 803b17c:	fb07 fe0e 	mul.w	lr, r7, lr
 803b180:	0a12      	lsrs	r2, r2, #8
 803b182:	fb03 ee06 	mla	lr, r3, r6, lr
 803b186:	0a2d      	lsrs	r5, r5, #8
 803b188:	fb07 f70b 	mul.w	r7, r7, fp
 803b18c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803b190:	fb09 e202 	mla	r2, r9, r2, lr
 803b194:	fb03 730a 	mla	r3, r3, sl, r7
 803b198:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 803b19c:	fb04 2e0e 	mla	lr, r4, lr, r2
 803b1a0:	fb04 3408 	mla	r4, r4, r8, r3
 803b1a4:	9b02      	ldr	r3, [sp, #8]
 803b1a6:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 803b1aa:	fb09 4903 	mla	r9, r9, r3, r4
 803b1ae:	b292      	uxth	r2, r2
 803b1b0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 803b1b4:	fb09 f902 	mul.w	r9, r9, r2
 803b1b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803b1bc:	f109 0301 	add.w	r3, r9, #1
 803b1c0:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 803b1c4:	ea40 0e0e 	orr.w	lr, r0, lr
 803b1c8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 803b1cc:	fa5f f08e 	uxtb.w	r0, lr
 803b1d0:	780b      	ldrb	r3, [r1, #0]
 803b1d2:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 803b1d6:	fa5f f989 	uxtb.w	r9, r9
 803b1da:	fb10 f002 	smulbb	r0, r0, r2
 803b1de:	fb03 0309 	mla	r3, r3, r9, r0
 803b1e2:	b29b      	uxth	r3, r3
 803b1e4:	1c58      	adds	r0, r3, #1
 803b1e6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 803b1ea:	7848      	ldrb	r0, [r1, #1]
 803b1ec:	121b      	asrs	r3, r3, #8
 803b1ee:	fb10 f009 	smulbb	r0, r0, r9
 803b1f2:	700b      	strb	r3, [r1, #0]
 803b1f4:	f3ce 2307 	ubfx	r3, lr, #8, #8
 803b1f8:	fb03 0302 	mla	r3, r3, r2, r0
 803b1fc:	b29b      	uxth	r3, r3
 803b1fe:	1c58      	adds	r0, r3, #1
 803b200:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 803b204:	121b      	asrs	r3, r3, #8
 803b206:	704b      	strb	r3, [r1, #1]
 803b208:	788b      	ldrb	r3, [r1, #2]
 803b20a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 803b20e:	fb13 f909 	smulbb	r9, r3, r9
 803b212:	fb0e 9e02 	mla	lr, lr, r2, r9
 803b216:	fa1f fe8e 	uxth.w	lr, lr
 803b21a:	f10e 0301 	add.w	r3, lr, #1
 803b21e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 803b222:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 803b226:	f881 e002 	strb.w	lr, [r1, #2]
 803b22a:	b007      	add	sp, #28
 803b22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803b230:	2600      	movs	r6, #0
 803b232:	e6eb      	b.n	803b00c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 803b234:	2000      	movs	r0, #0
 803b236:	4606      	mov	r6, r0
 803b238:	e6f3      	b.n	803b022 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 803b23a:	2000      	movs	r0, #0
 803b23c:	e6f1      	b.n	803b022 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 803b23e:	4620      	mov	r0, r4
 803b240:	e6ef      	b.n	803b022 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 803b242:	2500      	movs	r5, #0
 803b244:	e6ff      	b.n	803b046 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 803b246:	2200      	movs	r2, #0
 803b248:	4615      	mov	r5, r2
 803b24a:	e708      	b.n	803b05e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 803b24c:	4672      	mov	r2, lr
 803b24e:	4675      	mov	r5, lr
 803b250:	e705      	b.n	803b05e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 803b252:	2200      	movs	r2, #0
 803b254:	e703      	b.n	803b05e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 803b256:	4622      	mov	r2, r4
 803b258:	e701      	b.n	803b05e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0803b25a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 803b25a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b25e:	b09d      	sub	sp, #116	@ 0x74
 803b260:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 803b264:	9219      	str	r2, [sp, #100]	@ 0x64
 803b266:	9307      	str	r3, [sp, #28]
 803b268:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 803b26a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 803b26e:	931a      	str	r3, [sp, #104]	@ 0x68
 803b270:	9117      	str	r1, [sp, #92]	@ 0x5c
 803b272:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 803b276:	901b      	str	r0, [sp, #108]	@ 0x6c
 803b278:	6850      	ldr	r0, [r2, #4]
 803b27a:	6812      	ldr	r2, [r2, #0]
 803b27c:	fb00 1303 	mla	r3, r0, r3, r1
 803b280:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 803b284:	18d3      	adds	r3, r2, r3
 803b286:	930a      	str	r3, [sp, #40]	@ 0x28
 803b288:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 803b28a:	681b      	ldr	r3, [r3, #0]
 803b28c:	9310      	str	r3, [sp, #64]	@ 0x40
 803b28e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 803b292:	930b      	str	r3, [sp, #44]	@ 0x2c
 803b294:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803b296:	2b00      	cmp	r3, #0
 803b298:	dc03      	bgt.n	803b2a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 803b29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 803b29c:	2b00      	cmp	r3, #0
 803b29e:	f340 8368 	ble.w	803b972 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 803b2a2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 803b2a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 803b2a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 803b2ac:	1e48      	subs	r0, r1, #1
 803b2ae:	1e57      	subs	r7, r2, #1
 803b2b0:	9b07      	ldr	r3, [sp, #28]
 803b2b2:	2b00      	cmp	r3, #0
 803b2b4:	f340 8187 	ble.w	803b5c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 803b2b8:	ea5f 4c25 	movs.w	ip, r5, asr #16
 803b2bc:	ea4f 4326 	mov.w	r3, r6, asr #16
 803b2c0:	d406      	bmi.n	803b2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 803b2c2:	4584      	cmp	ip, r0
 803b2c4:	da04      	bge.n	803b2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 803b2c6:	2b00      	cmp	r3, #0
 803b2c8:	db02      	blt.n	803b2d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 803b2ca:	42bb      	cmp	r3, r7
 803b2cc:	f2c0 817c 	blt.w	803b5c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 803b2d0:	f11c 0c01 	adds.w	ip, ip, #1
 803b2d4:	f100 816c 	bmi.w	803b5b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 803b2d8:	4561      	cmp	r1, ip
 803b2da:	f2c0 8169 	blt.w	803b5b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 803b2de:	3301      	adds	r3, #1
 803b2e0:	f100 8166 	bmi.w	803b5b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 803b2e4:	429a      	cmp	r2, r3
 803b2e6:	f2c0 8163 	blt.w	803b5b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 803b2ea:	9b07      	ldr	r3, [sp, #28]
 803b2ec:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 803b2ee:	9318      	str	r3, [sp, #96]	@ 0x60
 803b2f0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803b2f2:	2b00      	cmp	r3, #0
 803b2f4:	f340 8186 	ble.w	803b604 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 803b2f8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 803b2fa:	142a      	asrs	r2, r5, #16
 803b2fc:	ea4f 4026 	mov.w	r0, r6, asr #16
 803b300:	f3c5 3103 	ubfx	r1, r5, #12, #4
 803b304:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 803b308:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 803b30c:	f100 81cb 	bmi.w	803b6a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 803b310:	f10e 38ff 	add.w	r8, lr, #4294967295
 803b314:	4542      	cmp	r2, r8
 803b316:	f280 81c6 	bge.w	803b6a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 803b31a:	2800      	cmp	r0, #0
 803b31c:	f2c0 81c3 	blt.w	803b6a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 803b320:	f103 38ff 	add.w	r8, r3, #4294967295
 803b324:	4540      	cmp	r0, r8
 803b326:	f280 81be 	bge.w	803b6a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 803b32a:	fa0f f38e 	sxth.w	r3, lr
 803b32e:	fb00 2203 	mla	r2, r0, r3, r2
 803b332:	9810      	ldr	r0, [sp, #64]	@ 0x40
 803b334:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 803b338:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 803b33c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 803b340:	2900      	cmp	r1, #0
 803b342:	f000 81a6 	beq.w	803b692 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 803b346:	f8d8 0004 	ldr.w	r0, [r8, #4]
 803b34a:	900c      	str	r0, [sp, #48]	@ 0x30
 803b34c:	0e00      	lsrs	r0, r0, #24
 803b34e:	9013      	str	r0, [sp, #76]	@ 0x4c
 803b350:	f1bc 0f00 	cmp.w	ip, #0
 803b354:	d00f      	beq.n	803b376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 803b356:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 803b35a:	3b01      	subs	r3, #1
 803b35c:	009b      	lsls	r3, r3, #2
 803b35e:	3304      	adds	r3, #4
 803b360:	eb08 0003 	add.w	r0, r8, r3
 803b364:	f858 3003 	ldr.w	r3, [r8, r3]
 803b368:	9308      	str	r3, [sp, #32]
 803b36a:	0e1b      	lsrs	r3, r3, #24
 803b36c:	9311      	str	r3, [sp, #68]	@ 0x44
 803b36e:	6843      	ldr	r3, [r0, #4]
 803b370:	930d      	str	r3, [sp, #52]	@ 0x34
 803b372:	0e1b      	lsrs	r3, r3, #24
 803b374:	9314      	str	r3, [sp, #80]	@ 0x50
 803b376:	b289      	uxth	r1, r1
 803b378:	fa1f fc8c 	uxth.w	ip, ip
 803b37c:	fb01 f90c 	mul.w	r9, r1, ip
 803b380:	0108      	lsls	r0, r1, #4
 803b382:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 803b386:	eba0 0809 	sub.w	r8, r0, r9
 803b38a:	fa1f f18c 	uxth.w	r1, ip
 803b38e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 803b392:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 803b394:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 803b396:	fa1f f888 	uxth.w	r8, r8
 803b39a:	1a5b      	subs	r3, r3, r1
 803b39c:	b29b      	uxth	r3, r3
 803b39e:	fb08 f000 	mul.w	r0, r8, r0
 803b3a2:	fb03 000e 	mla	r0, r3, lr, r0
 803b3a6:	fb01 0004 	mla	r0, r1, r4, r0
 803b3aa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803b3ac:	fb09 0004 	mla	r0, r9, r4, r0
 803b3b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 803b3b4:	2800      	cmp	r0, #0
 803b3b6:	f000 80f2 	beq.w	803b59e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 803b3ba:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 803b3be:	d01b      	beq.n	803b3f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 803b3c0:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 803b3c4:	fb0e fa0a 	mul.w	sl, lr, sl
 803b3c8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803b3cc:	fb0e fe02 	mul.w	lr, lr, r2
 803b3d0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 803b3d4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 803b3d8:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 803b3dc:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 803b3e0:	4452      	add	r2, sl
 803b3e2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 803b3e6:	0a12      	lsrs	r2, r2, #8
 803b3e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803b3ec:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 803b3f0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 803b3f4:	ea42 020c 	orr.w	r2, r2, ip
 803b3f8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 803b3fa:	2cff      	cmp	r4, #255	@ 0xff
 803b3fc:	d021      	beq.n	803b442 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 803b3fe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803b400:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 803b404:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 803b406:	fb04 fb0b 	mul.w	fp, r4, fp
 803b40a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803b40c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803b410:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 803b412:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 803b416:	fb04 fa0a 	mul.w	sl, r4, sl
 803b41a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b41e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 803b422:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 803b426:	44de      	add	lr, fp
 803b428:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 803b42c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803b430:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803b434:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b438:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803b43c:	ea4e 040a 	orr.w	r4, lr, sl
 803b440:	940c      	str	r4, [sp, #48]	@ 0x30
 803b442:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 803b444:	2cff      	cmp	r4, #255	@ 0xff
 803b446:	d021      	beq.n	803b48c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 803b448:	9c08      	ldr	r4, [sp, #32]
 803b44a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 803b44e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 803b450:	fb04 fb0b 	mul.w	fp, r4, fp
 803b454:	9c08      	ldr	r4, [sp, #32]
 803b456:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803b45a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 803b45c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 803b460:	fb04 fa0a 	mul.w	sl, r4, sl
 803b464:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b468:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 803b46c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 803b470:	44de      	add	lr, fp
 803b472:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 803b476:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803b47a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803b47e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b482:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803b486:	ea4e 040a 	orr.w	r4, lr, sl
 803b48a:	9408      	str	r4, [sp, #32]
 803b48c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803b48e:	2cff      	cmp	r4, #255	@ 0xff
 803b490:	d021      	beq.n	803b4d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 803b492:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 803b494:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 803b498:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803b49a:	fb04 fb0b 	mul.w	fp, r4, fp
 803b49e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 803b4a0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803b4a4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803b4a6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 803b4aa:	fb04 fa0a 	mul.w	sl, r4, sl
 803b4ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b4b2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 803b4b6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 803b4ba:	44de      	add	lr, fp
 803b4bc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 803b4c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803b4c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803b4c8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803b4cc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803b4d0:	ea4e 040a 	orr.w	r4, lr, sl
 803b4d4:	940d      	str	r4, [sp, #52]	@ 0x34
 803b4d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803b4d8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803b4dc:	9c08      	ldr	r4, [sp, #32]
 803b4de:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 803b4e2:	fb08 fc0c 	mul.w	ip, r8, ip
 803b4e6:	fb03 cc0e 	mla	ip, r3, lr, ip
 803b4ea:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 803b4ee:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 803b4f0:	fb01 cc0e 	mla	ip, r1, lr, ip
 803b4f4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 803b4f8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803b4fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 803b4fe:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 803b502:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803b506:	fb08 f80e 	mul.w	r8, r8, lr
 803b50a:	fb03 8202 	mla	r2, r3, r2, r8
 803b50e:	9b08      	ldr	r3, [sp, #32]
 803b510:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 803b514:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803b516:	fb01 220a 	mla	r2, r1, sl, r2
 803b51a:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 803b51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803b520:	fb09 2901 	mla	r9, r9, r1, r2
 803b524:	4343      	muls	r3, r0
 803b526:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803b52a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 803b52e:	1c58      	adds	r0, r3, #1
 803b530:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b534:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 803b538:	ea4c 0c09 	orr.w	ip, ip, r9
 803b53c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803b53e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 803b542:	fa5f f28c 	uxtb.w	r2, ip
 803b546:	783b      	ldrb	r3, [r7, #0]
 803b548:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 803b54c:	b2c0      	uxtb	r0, r0
 803b54e:	fb12 f201 	smulbb	r2, r2, r1
 803b552:	fb03 2300 	mla	r3, r3, r0, r2
 803b556:	b29b      	uxth	r3, r3
 803b558:	1c5a      	adds	r2, r3, #1
 803b55a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 803b55e:	787a      	ldrb	r2, [r7, #1]
 803b560:	121b      	asrs	r3, r3, #8
 803b562:	fb12 f200 	smulbb	r2, r2, r0
 803b566:	703b      	strb	r3, [r7, #0]
 803b568:	f3cc 2307 	ubfx	r3, ip, #8, #8
 803b56c:	fb03 2301 	mla	r3, r3, r1, r2
 803b570:	b29b      	uxth	r3, r3
 803b572:	1c5a      	adds	r2, r3, #1
 803b574:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 803b578:	121b      	asrs	r3, r3, #8
 803b57a:	707b      	strb	r3, [r7, #1]
 803b57c:	78bb      	ldrb	r3, [r7, #2]
 803b57e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 803b582:	fb13 f000 	smulbb	r0, r3, r0
 803b586:	fb0c 0c01 	mla	ip, ip, r1, r0
 803b58a:	fa1f fc8c 	uxth.w	ip, ip
 803b58e:	f10c 0301 	add.w	r3, ip, #1
 803b592:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 803b596:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 803b59a:	f887 c002 	strb.w	ip, [r7, #2]
 803b59e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 803b5a0:	441d      	add	r5, r3
 803b5a2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803b5a4:	441e      	add	r6, r3
 803b5a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 803b5a8:	3b01      	subs	r3, #1
 803b5aa:	3703      	adds	r7, #3
 803b5ac:	9318      	str	r3, [sp, #96]	@ 0x60
 803b5ae:	e69f      	b.n	803b2f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 803b5b0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 803b5b2:	441d      	add	r5, r3
 803b5b4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803b5b6:	441e      	add	r6, r3
 803b5b8:	9b07      	ldr	r3, [sp, #28]
 803b5ba:	3b01      	subs	r3, #1
 803b5bc:	9307      	str	r3, [sp, #28]
 803b5be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803b5c0:	3303      	adds	r3, #3
 803b5c2:	930a      	str	r3, [sp, #40]	@ 0x28
 803b5c4:	e674      	b.n	803b2b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 803b5c6:	d025      	beq.n	803b614 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 803b5c8:	9b07      	ldr	r3, [sp, #28]
 803b5ca:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 803b5cc:	3b01      	subs	r3, #1
 803b5ce:	fb00 5003 	mla	r0, r0, r3, r5
 803b5d2:	1400      	asrs	r0, r0, #16
 803b5d4:	f53f ae89 	bmi.w	803b2ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803b5d8:	3901      	subs	r1, #1
 803b5da:	4288      	cmp	r0, r1
 803b5dc:	f6bf ae85 	bge.w	803b2ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803b5e0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 803b5e2:	fb01 6303 	mla	r3, r1, r3, r6
 803b5e6:	141b      	asrs	r3, r3, #16
 803b5e8:	f53f ae7f 	bmi.w	803b2ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803b5ec:	3a01      	subs	r2, #1
 803b5ee:	4293      	cmp	r3, r2
 803b5f0:	f6bf ae7b 	bge.w	803b2ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 803b5f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803b5f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 803b5fa:	f103 0e03 	add.w	lr, r3, #3
 803b5fe:	f1bb 0f00 	cmp.w	fp, #0
 803b602:	dc6e      	bgt.n	803b6e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 803b604:	9b07      	ldr	r3, [sp, #28]
 803b606:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 803b60a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803b60c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 803b610:	4423      	add	r3, r4
 803b612:	930a      	str	r3, [sp, #40]	@ 0x28
 803b614:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803b616:	2b00      	cmp	r3, #0
 803b618:	f340 81ab 	ble.w	803b972 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 803b61c:	ee30 0a04 	vadd.f32	s0, s0, s8
 803b620:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 803b624:	eec7 7a00 	vdiv.f32	s15, s14, s0
 803b628:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803b62a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 803b62e:	ee31 1a05 	vadd.f32	s2, s2, s10
 803b632:	ee20 7aa7 	vmul.f32	s14, s1, s15
 803b636:	eef0 6a62 	vmov.f32	s13, s5
 803b63a:	ee61 7a27 	vmul.f32	s15, s2, s15
 803b63e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803b642:	ee77 2a62 	vsub.f32	s5, s14, s5
 803b646:	ee16 5a90 	vmov	r5, s13
 803b64a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 803b64e:	eef0 6a43 	vmov.f32	s13, s6
 803b652:	ee37 3ac3 	vsub.f32	s6, s15, s6
 803b656:	ee12 2a90 	vmov	r2, s5
 803b65a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 803b65e:	fb92 f3f3 	sdiv	r3, r2, r3
 803b662:	ee13 2a10 	vmov	r2, s6
 803b666:	9329      	str	r3, [sp, #164]	@ 0xa4
 803b668:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803b66a:	fb92 f3f3 	sdiv	r3, r2, r3
 803b66e:	932a      	str	r3, [sp, #168]	@ 0xa8
 803b670:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 803b672:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 803b674:	3b01      	subs	r3, #1
 803b676:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803b67a:	9317      	str	r3, [sp, #92]	@ 0x5c
 803b67c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803b67e:	bf08      	it	eq
 803b680:	4613      	moveq	r3, r2
 803b682:	ee16 6a90 	vmov	r6, s13
 803b686:	9307      	str	r3, [sp, #28]
 803b688:	eeb0 3a67 	vmov.f32	s6, s15
 803b68c:	eef0 2a47 	vmov.f32	s5, s14
 803b690:	e600      	b.n	803b294 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 803b692:	f1bc 0f00 	cmp.w	ip, #0
 803b696:	f43f ae6e 	beq.w	803b376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 803b69a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 803b69e:	9308      	str	r3, [sp, #32]
 803b6a0:	0e1b      	lsrs	r3, r3, #24
 803b6a2:	9311      	str	r3, [sp, #68]	@ 0x44
 803b6a4:	e667      	b.n	803b376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 803b6a6:	f112 0801 	adds.w	r8, r2, #1
 803b6aa:	f53f af78 	bmi.w	803b59e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 803b6ae:	45c6      	cmp	lr, r8
 803b6b0:	f6ff af75 	blt.w	803b59e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 803b6b4:	f110 0801 	adds.w	r8, r0, #1
 803b6b8:	f53f af71 	bmi.w	803b59e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 803b6bc:	4543      	cmp	r3, r8
 803b6be:	f6ff af6e 	blt.w	803b59e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 803b6c2:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 803b6c4:	9201      	str	r2, [sp, #4]
 803b6c6:	b21b      	sxth	r3, r3
 803b6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803b6cc:	9300      	str	r3, [sp, #0]
 803b6ce:	e9cd c404 	strd	ip, r4, [sp, #16]
 803b6d2:	fa0f f38e 	sxth.w	r3, lr
 803b6d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 803b6d8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 803b6da:	4639      	mov	r1, r7
 803b6dc:	f7ff fc79 	bl	803afd2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 803b6e0:	e75d      	b.n	803b59e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 803b6e2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 803b6e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803b6e6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 803b6ea:	142f      	asrs	r7, r5, #16
 803b6ec:	1433      	asrs	r3, r6, #16
 803b6ee:	fb02 7303 	mla	r3, r2, r3, r7
 803b6f2:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 803b6f6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 803b6fa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 803b6fe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 803b702:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 803b706:	2900      	cmp	r1, #0
 803b708:	f000 812a 	beq.w	803b960 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 803b70c:	687c      	ldr	r4, [r7, #4]
 803b70e:	940e      	str	r4, [sp, #56]	@ 0x38
 803b710:	0e24      	lsrs	r4, r4, #24
 803b712:	9415      	str	r4, [sp, #84]	@ 0x54
 803b714:	b178      	cbz	r0, 803b736 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 803b716:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 803b71a:	3a01      	subs	r2, #1
 803b71c:	0092      	lsls	r2, r2, #2
 803b71e:	3204      	adds	r2, #4
 803b720:	eb07 0802 	add.w	r8, r7, r2
 803b724:	58ba      	ldr	r2, [r7, r2]
 803b726:	9209      	str	r2, [sp, #36]	@ 0x24
 803b728:	0e12      	lsrs	r2, r2, #24
 803b72a:	9212      	str	r2, [sp, #72]	@ 0x48
 803b72c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 803b730:	920f      	str	r2, [sp, #60]	@ 0x3c
 803b732:	0e12      	lsrs	r2, r2, #24
 803b734:	9216      	str	r2, [sp, #88]	@ 0x58
 803b736:	b289      	uxth	r1, r1
 803b738:	b280      	uxth	r0, r0
 803b73a:	fb01 f900 	mul.w	r9, r1, r0
 803b73e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 803b742:	0109      	lsls	r1, r1, #4
 803b744:	eba1 0809 	sub.w	r8, r1, r9
 803b748:	b280      	uxth	r0, r0
 803b74a:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 803b74e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 803b750:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803b752:	fa1f f888 	uxth.w	r8, r8
 803b756:	1a12      	subs	r2, r2, r0
 803b758:	b292      	uxth	r2, r2
 803b75a:	fb08 f101 	mul.w	r1, r8, r1
 803b75e:	fb02 110c 	mla	r1, r2, ip, r1
 803b762:	fb00 1104 	mla	r1, r0, r4, r1
 803b766:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 803b768:	fb09 1104 	mla	r1, r9, r4, r1
 803b76c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 803b770:	2900      	cmp	r1, #0
 803b772:	f000 80ec 	beq.w	803b94e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 803b776:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 803b77a:	d019      	beq.n	803b7b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 803b77c:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 803b780:	fb0c fa0a 	mul.w	sl, ip, sl
 803b784:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 803b788:	fb0c fc03 	mul.w	ip, ip, r3
 803b78c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 803b790:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 803b794:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 803b798:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 803b79c:	4453      	add	r3, sl
 803b79e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 803b7a2:	0a1b      	lsrs	r3, r3, #8
 803b7a4:	0a3f      	lsrs	r7, r7, #8
 803b7a6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 803b7aa:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 803b7ae:	433b      	orrs	r3, r7
 803b7b0:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 803b7b2:	2cff      	cmp	r4, #255	@ 0xff
 803b7b4:	d020      	beq.n	803b7f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 803b7b6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 803b7b8:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 803b7bc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 803b7be:	4367      	muls	r7, r4
 803b7c0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 803b7c2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803b7c6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 803b7c8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 803b7cc:	fb04 fa0a 	mul.w	sl, r4, sl
 803b7d0:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 803b7d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b7d8:	44bc      	add	ip, r7
 803b7da:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 803b7de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 803b7e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803b7e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803b7ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b7ee:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803b7f2:	ea4c 040a 	orr.w	r4, ip, sl
 803b7f6:	940e      	str	r4, [sp, #56]	@ 0x38
 803b7f8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803b7fa:	2cff      	cmp	r4, #255	@ 0xff
 803b7fc:	d020      	beq.n	803b840 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 803b7fe:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 803b800:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 803b804:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803b806:	4367      	muls	r7, r4
 803b808:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 803b80a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803b80e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803b810:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 803b814:	fb04 fa0a 	mul.w	sl, r4, sl
 803b818:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 803b81c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b820:	44bc      	add	ip, r7
 803b822:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 803b826:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 803b82a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803b82e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803b832:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b836:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803b83a:	ea4c 040a 	orr.w	r4, ip, sl
 803b83e:	9409      	str	r4, [sp, #36]	@ 0x24
 803b840:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 803b842:	2cff      	cmp	r4, #255	@ 0xff
 803b844:	d020      	beq.n	803b888 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 803b846:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 803b848:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 803b84c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 803b84e:	4367      	muls	r7, r4
 803b850:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 803b852:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803b856:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 803b858:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 803b85c:	fb04 fa0a 	mul.w	sl, r4, sl
 803b860:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 803b864:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b868:	44bc      	add	ip, r7
 803b86a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 803b86e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 803b872:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803b876:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803b87a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803b87e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803b882:	ea4c 040a 	orr.w	r4, ip, sl
 803b886:	940f      	str	r4, [sp, #60]	@ 0x3c
 803b888:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 803b88a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 803b88e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 803b890:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 803b894:	fb08 f707 	mul.w	r7, r8, r7
 803b898:	fb02 770c 	mla	r7, r2, ip, r7
 803b89c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803b8a0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 803b8a2:	fb00 770c 	mla	r7, r0, ip, r7
 803b8a6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803b8aa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 803b8ac:	fb09 770c 	mla	r7, r9, ip, r7
 803b8b0:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 803b8b4:	fb08 f80c 	mul.w	r8, r8, ip
 803b8b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 803b8bc:	fb02 8303 	mla	r3, r2, r3, r8
 803b8c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803b8c2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 803b8c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 803b8c8:	fb00 330a 	mla	r3, r0, sl, r3
 803b8cc:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 803b8d0:	fb09 3c0c 	mla	ip, r9, ip, r3
 803b8d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803b8d6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 803b8d8:	434b      	muls	r3, r1
 803b8da:	0a3f      	lsrs	r7, r7, #8
 803b8dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803b8e0:	1c59      	adds	r1, r3, #1
 803b8e2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 803b8e6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 803b8ea:	ea47 070c 	orr.w	r7, r7, ip
 803b8ee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 803b8f2:	b2fa      	uxtb	r2, r7
 803b8f4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 803b8f8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 803b8fc:	b2c9      	uxtb	r1, r1
 803b8fe:	fb12 f200 	smulbb	r2, r2, r0
 803b902:	fb03 2301 	mla	r3, r3, r1, r2
 803b906:	b29b      	uxth	r3, r3
 803b908:	1c5a      	adds	r2, r3, #1
 803b90a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 803b90e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 803b912:	121b      	asrs	r3, r3, #8
 803b914:	fb12 f201 	smulbb	r2, r2, r1
 803b918:	f80e 3c03 	strb.w	r3, [lr, #-3]
 803b91c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 803b920:	fb03 2300 	mla	r3, r3, r0, r2
 803b924:	b29b      	uxth	r3, r3
 803b926:	1c5a      	adds	r2, r3, #1
 803b928:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 803b92c:	121b      	asrs	r3, r3, #8
 803b92e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 803b932:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 803b936:	0c3f      	lsrs	r7, r7, #16
 803b938:	fb13 f101 	smulbb	r1, r3, r1
 803b93c:	fb07 1700 	mla	r7, r7, r0, r1
 803b940:	b2bf      	uxth	r7, r7
 803b942:	1c79      	adds	r1, r7, #1
 803b944:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 803b948:	123f      	asrs	r7, r7, #8
 803b94a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 803b94e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 803b950:	441d      	add	r5, r3
 803b952:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803b954:	f10e 0e03 	add.w	lr, lr, #3
 803b958:	441e      	add	r6, r3
 803b95a:	f10b 3bff 	add.w	fp, fp, #4294967295
 803b95e:	e64e      	b.n	803b5fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 803b960:	2800      	cmp	r0, #0
 803b962:	f43f aee8 	beq.w	803b736 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 803b966:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 803b96a:	9209      	str	r2, [sp, #36]	@ 0x24
 803b96c:	0e12      	lsrs	r2, r2, #24
 803b96e:	9212      	str	r2, [sp, #72]	@ 0x48
 803b970:	e6e1      	b.n	803b736 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 803b972:	b01d      	add	sp, #116	@ 0x74
 803b974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803b978 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 803b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b97c:	b087      	sub	sp, #28
 803b97e:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 803b982:	fb05 7003 	mla	r0, r5, r3, r7
 803b986:	2d00      	cmp	r5, #0
 803b988:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 803b98c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 803b990:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 803b994:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 803b998:	f2c0 810a 	blt.w	803bbb0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 803b99c:	45a8      	cmp	r8, r5
 803b99e:	f340 8107 	ble.w	803bbb0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 803b9a2:	2f00      	cmp	r7, #0
 803b9a4:	f2c0 8102 	blt.w	803bbac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 803b9a8:	42bb      	cmp	r3, r7
 803b9aa:	f340 80ff 	ble.w	803bbac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 803b9ae:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 803b9b2:	1c7a      	adds	r2, r7, #1
 803b9b4:	f100 80ff 	bmi.w	803bbb6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 803b9b8:	4293      	cmp	r3, r2
 803b9ba:	f340 80fc 	ble.w	803bbb6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 803b9be:	2c00      	cmp	r4, #0
 803b9c0:	f000 80fb 	beq.w	803bbba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 803b9c4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 803b9c8:	3501      	adds	r5, #1
 803b9ca:	f100 80fa 	bmi.w	803bbc2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 803b9ce:	45a8      	cmp	r8, r5
 803b9d0:	f340 80f7 	ble.w	803bbc2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 803b9d4:	f1be 0f00 	cmp.w	lr, #0
 803b9d8:	f000 80f6 	beq.w	803bbc8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 803b9dc:	2f00      	cmp	r7, #0
 803b9de:	f2c0 80ee 	blt.w	803bbbe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 803b9e2:	42bb      	cmp	r3, r7
 803b9e4:	f340 80eb 	ble.w	803bbbe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 803b9e8:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 803b9ec:	3701      	adds	r7, #1
 803b9ee:	f100 80ee 	bmi.w	803bbce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 803b9f2:	42bb      	cmp	r3, r7
 803b9f4:	f340 80eb 	ble.w	803bbce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 803b9f8:	2c00      	cmp	r4, #0
 803b9fa:	f000 80ea 	beq.w	803bbd2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 803b9fe:	3301      	adds	r3, #1
 803ba00:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 803ba04:	fa1f fc84 	uxth.w	ip, r4
 803ba08:	fa1f fe8e 	uxth.w	lr, lr
 803ba0c:	fb0c f90e 	mul.w	r9, ip, lr
 803ba10:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 803ba14:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 803ba18:	fa1f f48e 	uxth.w	r4, lr
 803ba1c:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 803ba20:	0e13      	lsrs	r3, r2, #24
 803ba22:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 803ba26:	fb0a fe0e 	mul.w	lr, sl, lr
 803ba2a:	9302      	str	r3, [sp, #8]
 803ba2c:	ebac 0709 	sub.w	r7, ip, r9
 803ba30:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 803ba34:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 803ba38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803ba3c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 803ba40:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 803ba44:	fb0a f606 	mul.w	r6, sl, r6
 803ba48:	1b1b      	subs	r3, r3, r4
 803ba4a:	44e6      	add	lr, ip
 803ba4c:	b29b      	uxth	r3, r3
 803ba4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803ba52:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 803ba56:	9301      	str	r3, [sp, #4]
 803ba58:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 803ba5c:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 803ba60:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 803ba64:	9303      	str	r3, [sp, #12]
 803ba66:	0a33      	lsrs	r3, r6, #8
 803ba68:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 803ba6c:	fb0b f606 	mul.w	r6, fp, r6
 803ba70:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 803ba74:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 803ba78:	fb0b f000 	mul.w	r0, fp, r0
 803ba7c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 803ba80:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803ba84:	44b6      	add	lr, r6
 803ba86:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 803ba8a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 803ba8e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 803ba92:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 803ba96:	fb08 f606 	mul.w	r6, r8, r6
 803ba9a:	9304      	str	r3, [sp, #16]
 803ba9c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 803baa0:	0a03      	lsrs	r3, r0, #8
 803baa2:	0a30      	lsrs	r0, r6, #8
 803baa4:	fb08 f505 	mul.w	r5, r8, r5
 803baa8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 803baac:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 803bab0:	4430      	add	r0, r6
 803bab2:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 803bab6:	9305      	str	r3, [sp, #20]
 803bab8:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 803babc:	0e13      	lsrs	r3, r2, #24
 803babe:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 803bac2:	435e      	muls	r6, r3
 803bac4:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 803bac8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803bacc:	435a      	muls	r2, r3
 803bace:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 803bad2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803bad6:	44b4      	add	ip, r6
 803bad8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803badc:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 803bae0:	b2bf      	uxth	r7, r7
 803bae2:	9b03      	ldr	r3, [sp, #12]
 803bae4:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 803bae8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803baec:	9e01      	ldr	r6, [sp, #4]
 803baee:	fb0e fe07 	mul.w	lr, lr, r7
 803baf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803baf6:	fb03 ee06 	mla	lr, r3, r6, lr
 803bafa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803bafe:	9b04      	ldr	r3, [sp, #16]
 803bb00:	0a00      	lsrs	r0, r0, #8
 803bb02:	fb0c ee09 	mla	lr, ip, r9, lr
 803bb06:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 803bb0a:	fb00 ee04 	mla	lr, r0, r4, lr
 803bb0e:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 803bb12:	9b05      	ldr	r3, [sp, #20]
 803bb14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803bb18:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 803bb1c:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 803bb20:	9b01      	ldr	r3, [sp, #4]
 803bb22:	fb07 fe0e 	mul.w	lr, r7, lr
 803bb26:	0a12      	lsrs	r2, r2, #8
 803bb28:	fb03 ee06 	mla	lr, r3, r6, lr
 803bb2c:	0a2d      	lsrs	r5, r5, #8
 803bb2e:	fb07 f70b 	mul.w	r7, r7, fp
 803bb32:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803bb36:	fb09 e202 	mla	r2, r9, r2, lr
 803bb3a:	fb03 730a 	mla	r3, r3, sl, r7
 803bb3e:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 803bb42:	fb04 2e0e 	mla	lr, r4, lr, r2
 803bb46:	fb04 3408 	mla	r4, r4, r8, r3
 803bb4a:	9b02      	ldr	r3, [sp, #8]
 803bb4c:	fb09 4903 	mla	r9, r9, r3, r4
 803bb50:	ea6f 2929 	mvn.w	r9, r9, asr #8
 803bb54:	780b      	ldrb	r3, [r1, #0]
 803bb56:	fa5f f989 	uxtb.w	r9, r9
 803bb5a:	fb03 f209 	mul.w	r2, r3, r9
 803bb5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803bb62:	1c53      	adds	r3, r2, #1
 803bb64:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 803bb68:	ea40 0e0e 	orr.w	lr, r0, lr
 803bb6c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 803bb70:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 803bb74:	700b      	strb	r3, [r1, #0]
 803bb76:	784b      	ldrb	r3, [r1, #1]
 803bb78:	fb03 f309 	mul.w	r3, r3, r9
 803bb7c:	1c5a      	adds	r2, r3, #1
 803bb7e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 803bb82:	ea4f 231e 	mov.w	r3, lr, lsr #8
 803bb86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 803bb8a:	704b      	strb	r3, [r1, #1]
 803bb8c:	788b      	ldrb	r3, [r1, #2]
 803bb8e:	fb03 f909 	mul.w	r9, r3, r9
 803bb92:	f109 0301 	add.w	r3, r9, #1
 803bb96:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 803bb9a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 803bb9e:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 803bba2:	f881 e002 	strb.w	lr, [r1, #2]
 803bba6:	b007      	add	sp, #28
 803bba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803bbac:	2600      	movs	r6, #0
 803bbae:	e700      	b.n	803b9b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 803bbb0:	2000      	movs	r0, #0
 803bbb2:	4606      	mov	r6, r0
 803bbb4:	e708      	b.n	803b9c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 803bbb6:	2000      	movs	r0, #0
 803bbb8:	e706      	b.n	803b9c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 803bbba:	4620      	mov	r0, r4
 803bbbc:	e704      	b.n	803b9c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 803bbbe:	2500      	movs	r5, #0
 803bbc0:	e714      	b.n	803b9ec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 803bbc2:	2200      	movs	r2, #0
 803bbc4:	4615      	mov	r5, r2
 803bbc6:	e71d      	b.n	803ba04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 803bbc8:	4672      	mov	r2, lr
 803bbca:	4675      	mov	r5, lr
 803bbcc:	e71a      	b.n	803ba04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 803bbce:	2200      	movs	r2, #0
 803bbd0:	e718      	b.n	803ba04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 803bbd2:	4622      	mov	r2, r4
 803bbd4:	e716      	b.n	803ba04 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0803bbd6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 803bbd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803bbda:	b099      	sub	sp, #100	@ 0x64
 803bbdc:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 803bbe0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 803bbe2:	9306      	str	r3, [sp, #24]
 803bbe4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 803bbe8:	9017      	str	r0, [sp, #92]	@ 0x5c
 803bbea:	6850      	ldr	r0, [r2, #4]
 803bbec:	6812      	ldr	r2, [r2, #0]
 803bbee:	fb00 1303 	mla	r3, r0, r3, r1
 803bbf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 803bbf6:	18d3      	adds	r3, r2, r3
 803bbf8:	9309      	str	r3, [sp, #36]	@ 0x24
 803bbfa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803bbfc:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 803bc00:	681b      	ldr	r3, [r3, #0]
 803bc02:	930e      	str	r3, [sp, #56]	@ 0x38
 803bc04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 803bc06:	2b00      	cmp	r3, #0
 803bc08:	dc03      	bgt.n	803bc12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 803bc0a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 803bc0c:	2b00      	cmp	r3, #0
 803bc0e:	f340 8360 	ble.w	803c2d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 803bc12:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803bc14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 803bc18:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 803bc1c:	1e48      	subs	r0, r1, #1
 803bc1e:	1e57      	subs	r7, r2, #1
 803bc20:	9b06      	ldr	r3, [sp, #24]
 803bc22:	2b00      	cmp	r3, #0
 803bc24:	f340 817b 	ble.w	803bf1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 803bc28:	ea5f 4c25 	movs.w	ip, r5, asr #16
 803bc2c:	ea4f 4326 	mov.w	r3, r6, asr #16
 803bc30:	d406      	bmi.n	803bc40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 803bc32:	4584      	cmp	ip, r0
 803bc34:	da04      	bge.n	803bc40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 803bc36:	2b00      	cmp	r3, #0
 803bc38:	db02      	blt.n	803bc40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 803bc3a:	42bb      	cmp	r3, r7
 803bc3c:	f2c0 8170 	blt.w	803bf20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 803bc40:	f11c 0c01 	adds.w	ip, ip, #1
 803bc44:	f100 8160 	bmi.w	803bf08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 803bc48:	4561      	cmp	r1, ip
 803bc4a:	f2c0 815d 	blt.w	803bf08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 803bc4e:	3301      	adds	r3, #1
 803bc50:	f100 815a 	bmi.w	803bf08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 803bc54:	429a      	cmp	r2, r3
 803bc56:	f2c0 8157 	blt.w	803bf08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 803bc5a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 803bc5e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 803bc60:	f1b8 0f00 	cmp.w	r8, #0
 803bc64:	f340 8179 	ble.w	803bf5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 803bc68:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 803bc6a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803bc6c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 803bc70:	689b      	ldr	r3, [r3, #8]
 803bc72:	142a      	asrs	r2, r5, #16
 803bc74:	ea4f 4c26 	mov.w	ip, r6, asr #16
 803bc78:	f3c5 3103 	ubfx	r1, r5, #12, #4
 803bc7c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 803bc80:	f100 81be 	bmi.w	803c000 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 803bc84:	f103 39ff 	add.w	r9, r3, #4294967295
 803bc88:	454a      	cmp	r2, r9
 803bc8a:	f280 81b9 	bge.w	803c000 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 803bc8e:	f1bc 0f00 	cmp.w	ip, #0
 803bc92:	f2c0 81b5 	blt.w	803c000 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 803bc96:	f10e 39ff 	add.w	r9, lr, #4294967295
 803bc9a:	45cc      	cmp	ip, r9
 803bc9c:	f280 81b0 	bge.w	803c000 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 803bca0:	b21b      	sxth	r3, r3
 803bca2:	fb0c 2203 	mla	r2, ip, r3, r2
 803bca6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 803bca8:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 803bcac:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 803bcb0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 803bcb4:	2900      	cmp	r1, #0
 803bcb6:	f000 8197 	beq.w	803bfe8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 803bcba:	f8d9 4004 	ldr.w	r4, [r9, #4]
 803bcbe:	940a      	str	r4, [sp, #40]	@ 0x28
 803bcc0:	0e24      	lsrs	r4, r4, #24
 803bcc2:	9411      	str	r4, [sp, #68]	@ 0x44
 803bcc4:	b180      	cbz	r0, 803bce8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 803bcc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 803bcca:	3b01      	subs	r3, #1
 803bccc:	009b      	lsls	r3, r3, #2
 803bcce:	3304      	adds	r3, #4
 803bcd0:	eb09 0c03 	add.w	ip, r9, r3
 803bcd4:	f859 3003 	ldr.w	r3, [r9, r3]
 803bcd8:	9307      	str	r3, [sp, #28]
 803bcda:	0e1b      	lsrs	r3, r3, #24
 803bcdc:	930f      	str	r3, [sp, #60]	@ 0x3c
 803bcde:	f8dc 3004 	ldr.w	r3, [ip, #4]
 803bce2:	930b      	str	r3, [sp, #44]	@ 0x2c
 803bce4:	0e1b      	lsrs	r3, r3, #24
 803bce6:	9312      	str	r3, [sp, #72]	@ 0x48
 803bce8:	b289      	uxth	r1, r1
 803bcea:	b280      	uxth	r0, r0
 803bcec:	fb01 fa00 	mul.w	sl, r1, r0
 803bcf0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 803bcf4:	0109      	lsls	r1, r1, #4
 803bcf6:	eba1 090a 	sub.w	r9, r1, sl
 803bcfa:	b280      	uxth	r0, r0
 803bcfc:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 803bd00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803bd02:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 803bd04:	fa1f f989 	uxth.w	r9, r9
 803bd08:	1a09      	subs	r1, r1, r0
 803bd0a:	b289      	uxth	r1, r1
 803bd0c:	fb09 f303 	mul.w	r3, r9, r3
 803bd10:	fb01 330e 	mla	r3, r1, lr, r3
 803bd14:	fb00 3304 	mla	r3, r0, r4, r3
 803bd18:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803bd1a:	fb0a 3304 	mla	r3, sl, r4, r3
 803bd1e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 803bd22:	2b00      	cmp	r3, #0
 803bd24:	f000 80e8 	beq.w	803bef8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 803bd28:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 803bd2c:	d01b      	beq.n	803bd66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 803bd2e:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 803bd32:	fb0e fb0b 	mul.w	fp, lr, fp
 803bd36:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803bd3a:	fb0e fe02 	mul.w	lr, lr, r2
 803bd3e:	ea4f 221b 	mov.w	r2, fp, lsr #8
 803bd42:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 803bd46:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 803bd4a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 803bd4e:	445a      	add	r2, fp
 803bd50:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 803bd54:	0a12      	lsrs	r2, r2, #8
 803bd56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803bd5a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 803bd5e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 803bd62:	ea42 020c 	orr.w	r2, r2, ip
 803bd66:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 803bd68:	2cff      	cmp	r4, #255	@ 0xff
 803bd6a:	d021      	beq.n	803bdb0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 803bd6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803bd6e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803bd72:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 803bd74:	fb04 fc0c 	mul.w	ip, r4, ip
 803bd78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803bd7a:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 803bd7e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 803bd80:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 803bd84:	fb04 fb0b 	mul.w	fp, r4, fp
 803bd88:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 803bd8c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803bd90:	44e6      	add	lr, ip
 803bd92:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 803bd96:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 803bd9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803bd9e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 803bda2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803bda6:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 803bdaa:	ea4e 040b 	orr.w	r4, lr, fp
 803bdae:	940a      	str	r4, [sp, #40]	@ 0x28
 803bdb0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 803bdb2:	2cff      	cmp	r4, #255	@ 0xff
 803bdb4:	d021      	beq.n	803bdfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 803bdb6:	9c07      	ldr	r4, [sp, #28]
 803bdb8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803bdbc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 803bdbe:	fb04 fc0c 	mul.w	ip, r4, ip
 803bdc2:	9c07      	ldr	r4, [sp, #28]
 803bdc4:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 803bdc8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 803bdca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 803bdce:	fb04 fb0b 	mul.w	fp, r4, fp
 803bdd2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 803bdd6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803bdda:	44e6      	add	lr, ip
 803bddc:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 803bde0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 803bde4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803bde8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 803bdec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803bdf0:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 803bdf4:	ea4e 040b 	orr.w	r4, lr, fp
 803bdf8:	9407      	str	r4, [sp, #28]
 803bdfa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803bdfc:	2cff      	cmp	r4, #255	@ 0xff
 803bdfe:	d021      	beq.n	803be44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 803be00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 803be02:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803be06:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803be08:	fb04 fc0c 	mul.w	ip, r4, ip
 803be0c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 803be0e:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 803be12:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 803be14:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 803be18:	fb04 fb0b 	mul.w	fp, r4, fp
 803be1c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 803be20:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803be24:	44e6      	add	lr, ip
 803be26:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 803be2a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 803be2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803be32:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 803be36:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803be3a:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 803be3e:	ea4e 040b 	orr.w	r4, lr, fp
 803be42:	940b      	str	r4, [sp, #44]	@ 0x2c
 803be44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803be46:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803be4a:	9c07      	ldr	r4, [sp, #28]
 803be4c:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 803be50:	fb09 fc0c 	mul.w	ip, r9, ip
 803be54:	fb01 cc0e 	mla	ip, r1, lr, ip
 803be58:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 803be5c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 803be5e:	fb00 cc0e 	mla	ip, r0, lr, ip
 803be62:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 803be66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 803be68:	fb0a cc0e 	mla	ip, sl, lr, ip
 803be6c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 803be70:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 803be74:	fb09 f90e 	mul.w	r9, r9, lr
 803be78:	fb01 9202 	mla	r2, r1, r2, r9
 803be7c:	9907      	ldr	r1, [sp, #28]
 803be7e:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 803be82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803be84:	fb00 220b 	mla	r2, r0, fp, r2
 803be88:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 803be8c:	fb0a 2a00 	mla	sl, sl, r0, r2
 803be90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803be94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803be98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803be9c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803bea0:	ea4c 0c0a 	orr.w	ip, ip, sl
 803bea4:	2bff      	cmp	r3, #255	@ 0xff
 803bea6:	fa5f f08c 	uxtb.w	r0, ip
 803beaa:	f3cc 2107 	ubfx	r1, ip, #8, #8
 803beae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 803beb2:	f000 80a2 	beq.w	803bffa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 803beb6:	783a      	ldrb	r2, [r7, #0]
 803beb8:	f897 a002 	ldrb.w	sl, [r7, #2]
 803bebc:	43db      	mvns	r3, r3
 803bebe:	b2db      	uxtb	r3, r3
 803bec0:	fb02 fe03 	mul.w	lr, r2, r3
 803bec4:	f10e 0201 	add.w	r2, lr, #1
 803bec8:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 803becc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 803bed0:	703a      	strb	r2, [r7, #0]
 803bed2:	787a      	ldrb	r2, [r7, #1]
 803bed4:	fb02 f003 	mul.w	r0, r2, r3
 803bed8:	fb0a fa03 	mul.w	sl, sl, r3
 803bedc:	1c42      	adds	r2, r0, #1
 803bede:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 803bee2:	f10a 0301 	add.w	r3, sl, #1
 803bee6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 803beea:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 803beee:	707a      	strb	r2, [r7, #1]
 803bef0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 803bef4:	f887 c002 	strb.w	ip, [r7, #2]
 803bef8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 803befa:	441d      	add	r5, r3
 803befc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803befe:	3703      	adds	r7, #3
 803bf00:	441e      	add	r6, r3
 803bf02:	f108 38ff 	add.w	r8, r8, #4294967295
 803bf06:	e6ab      	b.n	803bc60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 803bf08:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 803bf0a:	441d      	add	r5, r3
 803bf0c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803bf0e:	441e      	add	r6, r3
 803bf10:	9b06      	ldr	r3, [sp, #24]
 803bf12:	3b01      	subs	r3, #1
 803bf14:	9306      	str	r3, [sp, #24]
 803bf16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803bf18:	3303      	adds	r3, #3
 803bf1a:	9309      	str	r3, [sp, #36]	@ 0x24
 803bf1c:	e680      	b.n	803bc20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 803bf1e:	d024      	beq.n	803bf6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 803bf20:	9b06      	ldr	r3, [sp, #24]
 803bf22:	9825      	ldr	r0, [sp, #148]	@ 0x94
 803bf24:	3b01      	subs	r3, #1
 803bf26:	fb00 5003 	mla	r0, r0, r3, r5
 803bf2a:	1400      	asrs	r0, r0, #16
 803bf2c:	f53f ae95 	bmi.w	803bc5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 803bf30:	3901      	subs	r1, #1
 803bf32:	4288      	cmp	r0, r1
 803bf34:	f6bf ae91 	bge.w	803bc5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 803bf38:	9926      	ldr	r1, [sp, #152]	@ 0x98
 803bf3a:	fb01 6303 	mla	r3, r1, r3, r6
 803bf3e:	141b      	asrs	r3, r3, #16
 803bf40:	f53f ae8b 	bmi.w	803bc5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 803bf44:	3a01      	subs	r2, #1
 803bf46:	4293      	cmp	r3, r2
 803bf48:	f6bf ae87 	bge.w	803bc5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 803bf4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803bf4e:	f8dd b018 	ldr.w	fp, [sp, #24]
 803bf52:	1cdf      	adds	r7, r3, #3
 803bf54:	f1bb 0f00 	cmp.w	fp, #0
 803bf58:	dc6e      	bgt.n	803c038 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 803bf5a:	9b06      	ldr	r3, [sp, #24]
 803bf5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 803bf60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803bf62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 803bf66:	4423      	add	r3, r4
 803bf68:	9309      	str	r3, [sp, #36]	@ 0x24
 803bf6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 803bf6c:	2b00      	cmp	r3, #0
 803bf6e:	f340 81b0 	ble.w	803c2d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 803bf72:	ee30 0a04 	vadd.f32	s0, s0, s8
 803bf76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 803bf7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 803bf7e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 803bf80:	ee70 0aa4 	vadd.f32	s1, s1, s9
 803bf84:	ee31 1a05 	vadd.f32	s2, s2, s10
 803bf88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 803bf8c:	eef0 6a62 	vmov.f32	s13, s5
 803bf90:	ee61 7a27 	vmul.f32	s15, s2, s15
 803bf94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803bf98:	ee77 2a62 	vsub.f32	s5, s14, s5
 803bf9c:	ee16 5a90 	vmov	r5, s13
 803bfa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 803bfa4:	eef0 6a43 	vmov.f32	s13, s6
 803bfa8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 803bfac:	ee12 2a90 	vmov	r2, s5
 803bfb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 803bfb4:	fb92 f3f3 	sdiv	r3, r2, r3
 803bfb8:	ee13 2a10 	vmov	r2, s6
 803bfbc:	9325      	str	r3, [sp, #148]	@ 0x94
 803bfbe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 803bfc0:	fb92 f3f3 	sdiv	r3, r2, r3
 803bfc4:	9326      	str	r3, [sp, #152]	@ 0x98
 803bfc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 803bfc8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 803bfca:	3b01      	subs	r3, #1
 803bfcc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 803bfd0:	9315      	str	r3, [sp, #84]	@ 0x54
 803bfd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 803bfd4:	bf08      	it	eq
 803bfd6:	4613      	moveq	r3, r2
 803bfd8:	ee16 6a90 	vmov	r6, s13
 803bfdc:	9306      	str	r3, [sp, #24]
 803bfde:	eeb0 3a67 	vmov.f32	s6, s15
 803bfe2:	eef0 2a47 	vmov.f32	s5, s14
 803bfe6:	e60d      	b.n	803bc04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 803bfe8:	2800      	cmp	r0, #0
 803bfea:	f43f ae7d 	beq.w	803bce8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 803bfee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 803bff2:	9307      	str	r3, [sp, #28]
 803bff4:	0e1b      	lsrs	r3, r3, #24
 803bff6:	930f      	str	r3, [sp, #60]	@ 0x3c
 803bff8:	e676      	b.n	803bce8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 803bffa:	7038      	strb	r0, [r7, #0]
 803bffc:	7079      	strb	r1, [r7, #1]
 803bffe:	e779      	b.n	803bef4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 803c000:	f112 0901 	adds.w	r9, r2, #1
 803c004:	f53f af78 	bmi.w	803bef8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 803c008:	454b      	cmp	r3, r9
 803c00a:	f6ff af75 	blt.w	803bef8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 803c00e:	f11c 0901 	adds.w	r9, ip, #1
 803c012:	f53f af71 	bmi.w	803bef8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 803c016:	45ce      	cmp	lr, r9
 803c018:	f6ff af6e 	blt.w	803bef8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 803c01c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 803c020:	fa0f f28e 	sxth.w	r2, lr
 803c024:	e9cd 1003 	strd	r1, r0, [sp, #12]
 803c028:	9200      	str	r2, [sp, #0]
 803c02a:	b21b      	sxth	r3, r3
 803c02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803c02e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 803c030:	4639      	mov	r1, r7
 803c032:	f7ff fca1 	bl	803b978 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 803c036:	e75f      	b.n	803bef8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 803c038:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 803c03a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 803c03c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 803c040:	1429      	asrs	r1, r5, #16
 803c042:	1433      	asrs	r3, r6, #16
 803c044:	fb0c 1303 	mla	r3, ip, r3, r1
 803c048:	990e      	ldr	r1, [sp, #56]	@ 0x38
 803c04a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 803c04e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 803c052:	f3c5 3203 	ubfx	r2, r5, #12, #4
 803c056:	f3c6 3003 	ubfx	r0, r6, #12, #4
 803c05a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 803c05e:	2a00      	cmp	r2, #0
 803c060:	f000 8129 	beq.w	803c2b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 803c064:	684c      	ldr	r4, [r1, #4]
 803c066:	940c      	str	r4, [sp, #48]	@ 0x30
 803c068:	0e24      	lsrs	r4, r4, #24
 803c06a:	9413      	str	r4, [sp, #76]	@ 0x4c
 803c06c:	b198      	cbz	r0, 803c096 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 803c06e:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 803c072:	f10c 3cff 	add.w	ip, ip, #4294967295
 803c076:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 803c07a:	f10c 0c04 	add.w	ip, ip, #4
 803c07e:	eb01 080c 	add.w	r8, r1, ip
 803c082:	f851 100c 	ldr.w	r1, [r1, ip]
 803c086:	9108      	str	r1, [sp, #32]
 803c088:	0e09      	lsrs	r1, r1, #24
 803c08a:	9110      	str	r1, [sp, #64]	@ 0x40
 803c08c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 803c090:	910d      	str	r1, [sp, #52]	@ 0x34
 803c092:	0e09      	lsrs	r1, r1, #24
 803c094:	9114      	str	r1, [sp, #80]	@ 0x50
 803c096:	b292      	uxth	r2, r2
 803c098:	b280      	uxth	r0, r0
 803c09a:	fb02 f900 	mul.w	r9, r2, r0
 803c09e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 803c0a2:	0112      	lsls	r2, r2, #4
 803c0a4:	eba2 0809 	sub.w	r8, r2, r9
 803c0a8:	b280      	uxth	r0, r0
 803c0aa:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 803c0ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 803c0b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803c0b2:	fa1f f888 	uxth.w	r8, r8
 803c0b6:	1a09      	subs	r1, r1, r0
 803c0b8:	b289      	uxth	r1, r1
 803c0ba:	fb08 f202 	mul.w	r2, r8, r2
 803c0be:	fb01 220e 	mla	r2, r1, lr, r2
 803c0c2:	fb00 2204 	mla	r2, r0, r4, r2
 803c0c6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803c0c8:	fb09 2204 	mla	r2, r9, r4, r2
 803c0cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 803c0d0:	2a00      	cmp	r2, #0
 803c0d2:	f000 80e8 	beq.w	803c2a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 803c0d6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 803c0da:	d01b      	beq.n	803c114 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 803c0dc:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 803c0e0:	fb0e fa0a 	mul.w	sl, lr, sl
 803c0e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 803c0e8:	fb0e fe03 	mul.w	lr, lr, r3
 803c0ec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 803c0f0:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 803c0f4:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 803c0f8:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 803c0fc:	4453      	add	r3, sl
 803c0fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 803c102:	0a1b      	lsrs	r3, r3, #8
 803c104:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803c108:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 803c10c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 803c110:	ea43 030c 	orr.w	r3, r3, ip
 803c114:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 803c116:	2cff      	cmp	r4, #255	@ 0xff
 803c118:	d021      	beq.n	803c15e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 803c11a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803c11c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803c120:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 803c122:	fb04 fc0c 	mul.w	ip, r4, ip
 803c126:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803c128:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803c12c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 803c12e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 803c132:	fb04 fa0a 	mul.w	sl, r4, sl
 803c136:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 803c13a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803c13e:	44e6      	add	lr, ip
 803c140:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 803c144:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 803c148:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803c14c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803c150:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803c154:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803c158:	ea4e 040a 	orr.w	r4, lr, sl
 803c15c:	940c      	str	r4, [sp, #48]	@ 0x30
 803c15e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803c160:	2cff      	cmp	r4, #255	@ 0xff
 803c162:	d021      	beq.n	803c1a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 803c164:	9c08      	ldr	r4, [sp, #32]
 803c166:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803c16a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803c16c:	fb04 fc0c 	mul.w	ip, r4, ip
 803c170:	9c08      	ldr	r4, [sp, #32]
 803c172:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 803c176:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 803c178:	fb04 fa0e 	mul.w	sl, r4, lr
 803c17c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 803c180:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803c184:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 803c188:	44e6      	add	lr, ip
 803c18a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 803c18e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 803c192:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803c196:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803c19a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803c19e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803c1a2:	ea4e 040a 	orr.w	r4, lr, sl
 803c1a6:	9408      	str	r4, [sp, #32]
 803c1a8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803c1aa:	2cff      	cmp	r4, #255	@ 0xff
 803c1ac:	d021      	beq.n	803c1f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 803c1ae:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 803c1b0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803c1b4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803c1b6:	fb04 fc0c 	mul.w	ip, r4, ip
 803c1ba:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 803c1bc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 803c1c0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 803c1c2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 803c1c6:	fb04 fa0a 	mul.w	sl, r4, sl
 803c1ca:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 803c1ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803c1d2:	44e6      	add	lr, ip
 803c1d4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 803c1d8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 803c1dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803c1e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 803c1e4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 803c1e8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 803c1ec:	ea4e 040a 	orr.w	r4, lr, sl
 803c1f0:	940d      	str	r4, [sp, #52]	@ 0x34
 803c1f2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803c1f4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 803c1f8:	9c08      	ldr	r4, [sp, #32]
 803c1fa:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 803c1fe:	fb08 fc0c 	mul.w	ip, r8, ip
 803c202:	fb01 cc0e 	mla	ip, r1, lr, ip
 803c206:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 803c20a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 803c20c:	fb00 cc0e 	mla	ip, r0, lr, ip
 803c210:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 803c214:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 803c216:	fb09 cc0e 	mla	ip, r9, lr, ip
 803c21a:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 803c21e:	fb08 f80e 	mul.w	r8, r8, lr
 803c222:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 803c226:	fb01 8303 	mla	r3, r1, r3, r8
 803c22a:	9908      	ldr	r1, [sp, #32]
 803c22c:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 803c230:	990d      	ldr	r1, [sp, #52]	@ 0x34
 803c232:	fb00 330a 	mla	r3, r0, sl, r3
 803c236:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 803c23a:	fb09 3e0e 	mla	lr, r9, lr, r3
 803c23e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 803c242:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 803c246:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 803c24a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 803c24e:	ea4c 0c0e 	orr.w	ip, ip, lr
 803c252:	2aff      	cmp	r2, #255	@ 0xff
 803c254:	fa5f f08c 	uxtb.w	r0, ip
 803c258:	f3cc 2107 	ubfx	r1, ip, #8, #8
 803c25c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 803c260:	d032      	beq.n	803c2c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 803c262:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 803c266:	43d2      	mvns	r2, r2
 803c268:	b2d2      	uxtb	r2, r2
 803c26a:	fb0e fe02 	mul.w	lr, lr, r2
 803c26e:	f10e 0301 	add.w	r3, lr, #1
 803c272:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 803c276:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 803c27a:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 803c27e:	f807 3c03 	strb.w	r3, [r7, #-3]
 803c282:	4350      	muls	r0, r2
 803c284:	1c43      	adds	r3, r0, #1
 803c286:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 803c28a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 803c28e:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 803c292:	f807 1c02 	strb.w	r1, [r7, #-2]
 803c296:	4353      	muls	r3, r2
 803c298:	1c5a      	adds	r2, r3, #1
 803c29a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 803c29e:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 803c2a2:	f807 cc01 	strb.w	ip, [r7, #-1]
 803c2a6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 803c2a8:	441d      	add	r5, r3
 803c2aa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 803c2ac:	3703      	adds	r7, #3
 803c2ae:	441e      	add	r6, r3
 803c2b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 803c2b4:	e64e      	b.n	803bf54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 803c2b6:	2800      	cmp	r0, #0
 803c2b8:	f43f aeed 	beq.w	803c096 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 803c2bc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 803c2c0:	9108      	str	r1, [sp, #32]
 803c2c2:	0e09      	lsrs	r1, r1, #24
 803c2c4:	9110      	str	r1, [sp, #64]	@ 0x40
 803c2c6:	e6e6      	b.n	803c096 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 803c2c8:	f807 0c03 	strb.w	r0, [r7, #-3]
 803c2cc:	f807 1c02 	strb.w	r1, [r7, #-2]
 803c2d0:	e7e7      	b.n	803c2a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 803c2d2:	b019      	add	sp, #100	@ 0x64
 803c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803c2d8 <CRC_Lock>:
 803c2d8:	b530      	push	{r4, r5, lr}
 803c2da:	4a20      	ldr	r2, [pc, #128]	@ (803c35c <CRC_Lock+0x84>)
 803c2dc:	6813      	ldr	r3, [r2, #0]
 803c2de:	f023 0301 	bic.w	r3, r3, #1
 803c2e2:	6013      	str	r3, [r2, #0]
 803c2e4:	4b1e      	ldr	r3, [pc, #120]	@ (803c360 <CRC_Lock+0x88>)
 803c2e6:	681a      	ldr	r2, [r3, #0]
 803c2e8:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 803c2ec:	4022      	ands	r2, r4
 803c2ee:	f24c 2540 	movw	r5, #49728	@ 0xc240
 803c2f2:	42aa      	cmp	r2, r5
 803c2f4:	d005      	beq.n	803c302 <CRC_Lock+0x2a>
 803c2f6:	681b      	ldr	r3, [r3, #0]
 803c2f8:	f24c 2270 	movw	r2, #49776	@ 0xc270
 803c2fc:	4023      	ands	r3, r4
 803c2fe:	4293      	cmp	r3, r2
 803c300:	d124      	bne.n	803c34c <CRC_Lock+0x74>
 803c302:	4b18      	ldr	r3, [pc, #96]	@ (803c364 <CRC_Lock+0x8c>)
 803c304:	681b      	ldr	r3, [r3, #0]
 803c306:	bb0b      	cbnz	r3, 803c34c <CRC_Lock+0x74>
 803c308:	4b17      	ldr	r3, [pc, #92]	@ (803c368 <CRC_Lock+0x90>)
 803c30a:	681a      	ldr	r2, [r3, #0]
 803c30c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 803c310:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 803c314:	d00d      	beq.n	803c332 <CRC_Lock+0x5a>
 803c316:	681a      	ldr	r2, [r3, #0]
 803c318:	f240 4483 	movw	r4, #1155	@ 0x483
 803c31c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 803c320:	42a2      	cmp	r2, r4
 803c322:	d006      	beq.n	803c332 <CRC_Lock+0x5a>
 803c324:	681b      	ldr	r3, [r3, #0]
 803c326:	f240 4285 	movw	r2, #1157	@ 0x485
 803c32a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803c32e:	4293      	cmp	r3, r2
 803c330:	d10c      	bne.n	803c34c <CRC_Lock+0x74>
 803c332:	4b0e      	ldr	r3, [pc, #56]	@ (803c36c <CRC_Lock+0x94>)
 803c334:	2201      	movs	r2, #1
 803c336:	601a      	str	r2, [r3, #0]
 803c338:	681a      	ldr	r2, [r3, #0]
 803c33a:	2a00      	cmp	r2, #0
 803c33c:	d1fc      	bne.n	803c338 <CRC_Lock+0x60>
 803c33e:	4b0c      	ldr	r3, [pc, #48]	@ (803c370 <CRC_Lock+0x98>)
 803c340:	6018      	str	r0, [r3, #0]
 803c342:	6818      	ldr	r0, [r3, #0]
 803c344:	1a43      	subs	r3, r0, r1
 803c346:	4258      	negs	r0, r3
 803c348:	4158      	adcs	r0, r3
 803c34a:	bd30      	pop	{r4, r5, pc}
 803c34c:	4b09      	ldr	r3, [pc, #36]	@ (803c374 <CRC_Lock+0x9c>)
 803c34e:	2201      	movs	r2, #1
 803c350:	601a      	str	r2, [r3, #0]
 803c352:	681a      	ldr	r2, [r3, #0]
 803c354:	2a00      	cmp	r2, #0
 803c356:	d1fc      	bne.n	803c352 <CRC_Lock+0x7a>
 803c358:	4b07      	ldr	r3, [pc, #28]	@ (803c378 <CRC_Lock+0xa0>)
 803c35a:	e7f1      	b.n	803c340 <CRC_Lock+0x68>
 803c35c:	e0002000 	.word	0xe0002000
 803c360:	e000ed00 	.word	0xe000ed00
 803c364:	e0042000 	.word	0xe0042000
 803c368:	5c001000 	.word	0x5c001000
 803c36c:	58024c08 	.word	0x58024c08
 803c370:	58024c00 	.word	0x58024c00
 803c374:	40023008 	.word	0x40023008
 803c378:	40023000 	.word	0x40023000

0803c37c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 803c37c:	6101      	str	r1, [r0, #16]
 803c37e:	4770      	bx	lr

0803c380 <_ZN8touchgfx8Gestures4tickEv>:
 803c380:	7b83      	ldrb	r3, [r0, #14]
 803c382:	b14b      	cbz	r3, 803c398 <_ZN8touchgfx8Gestures4tickEv+0x18>
 803c384:	8903      	ldrh	r3, [r0, #8]
 803c386:	3301      	adds	r3, #1
 803c388:	b29b      	uxth	r3, r3
 803c38a:	2b07      	cmp	r3, #7
 803c38c:	8103      	strh	r3, [r0, #8]
 803c38e:	bf81      	itttt	hi
 803c390:	2300      	movhi	r3, #0
 803c392:	8143      	strhhi	r3, [r0, #10]
 803c394:	8183      	strhhi	r3, [r0, #12]
 803c396:	7383      	strbhi	r3, [r0, #14]
 803c398:	4770      	bx	lr
	...

0803c39c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 803c39c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 803c3a0:	4698      	mov	r8, r3
 803c3a2:	8883      	ldrh	r3, [r0, #4]
 803c3a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 803c3a8:	eba8 0303 	sub.w	r3, r8, r3
 803c3ac:	b21b      	sxth	r3, r3
 803c3ae:	4604      	mov	r4, r0
 803c3b0:	2b00      	cmp	r3, #0
 803c3b2:	4617      	mov	r7, r2
 803c3b4:	4a18      	ldr	r2, [pc, #96]	@ (803c418 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 803c3b6:	9200      	str	r2, [sp, #0]
 803c3b8:	bfb8      	it	lt
 803c3ba:	425b      	neglt	r3, r3
 803c3bc:	8aa2      	ldrh	r2, [r4, #20]
 803c3be:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 803c3c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 803c3c6:	b21b      	sxth	r3, r3
 803c3c8:	460e      	mov	r6, r1
 803c3ca:	4293      	cmp	r3, r2
 803c3cc:	88c1      	ldrh	r1, [r0, #6]
 803c3ce:	f8ad 1008 	strh.w	r1, [sp, #8]
 803c3d2:	f04f 0000 	mov.w	r0, #0
 803c3d6:	f88d 0004 	strb.w	r0, [sp, #4]
 803c3da:	f8ad 500c 	strh.w	r5, [sp, #12]
 803c3de:	dc07      	bgt.n	803c3f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 803c3e0:	1a69      	subs	r1, r5, r1
 803c3e2:	b209      	sxth	r1, r1
 803c3e4:	2900      	cmp	r1, #0
 803c3e6:	bfb8      	it	lt
 803c3e8:	4249      	neglt	r1, r1
 803c3ea:	b209      	sxth	r1, r1
 803c3ec:	428a      	cmp	r2, r1
 803c3ee:	da10      	bge.n	803c412 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 803c3f0:	6920      	ldr	r0, [r4, #16]
 803c3f2:	6803      	ldr	r3, [r0, #0]
 803c3f4:	4669      	mov	r1, sp
 803c3f6:	685b      	ldr	r3, [r3, #4]
 803c3f8:	4798      	blx	r3
 803c3fa:	eba8 0606 	sub.w	r6, r8, r6
 803c3fe:	2300      	movs	r3, #0
 803c400:	1bef      	subs	r7, r5, r7
 803c402:	2001      	movs	r0, #1
 803c404:	8123      	strh	r3, [r4, #8]
 803c406:	8166      	strh	r6, [r4, #10]
 803c408:	81a7      	strh	r7, [r4, #12]
 803c40a:	f8a4 8004 	strh.w	r8, [r4, #4]
 803c40e:	80e5      	strh	r5, [r4, #6]
 803c410:	73a0      	strb	r0, [r4, #14]
 803c412:	b004      	add	sp, #16
 803c414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c418:	08043268 	.word	0x08043268

0803c41c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 803c41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 803c41e:	461e      	mov	r6, r3
 803c420:	1e4b      	subs	r3, r1, #1
 803c422:	2b01      	cmp	r3, #1
 803c424:	b085      	sub	sp, #20
 803c426:	4604      	mov	r4, r0
 803c428:	460d      	mov	r5, r1
 803c42a:	4617      	mov	r7, r2
 803c42c:	d84b      	bhi.n	803c4c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 803c42e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 803c432:	1cd3      	adds	r3, r2, #3
 803c434:	b29b      	uxth	r3, r3
 803c436:	2b06      	cmp	r3, #6
 803c438:	d916      	bls.n	803c468 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 803c43a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 803c4dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 803c43e:	f8cd c004 	str.w	ip, [sp, #4]
 803c442:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 803c446:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 803c44a:	6900      	ldr	r0, [r0, #16]
 803c44c:	f8ad 100c 	strh.w	r1, [sp, #12]
 803c450:	f04f 0c00 	mov.w	ip, #0
 803c454:	f88d c008 	strb.w	ip, [sp, #8]
 803c458:	f8ad 200a 	strh.w	r2, [sp, #10]
 803c45c:	f8ad 300e 	strh.w	r3, [sp, #14]
 803c460:	6803      	ldr	r3, [r0, #0]
 803c462:	a901      	add	r1, sp, #4
 803c464:	689b      	ldr	r3, [r3, #8]
 803c466:	4798      	blx	r3
 803c468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803c46c:	1cd3      	adds	r3, r2, #3
 803c46e:	b29b      	uxth	r3, r3
 803c470:	2b06      	cmp	r3, #6
 803c472:	d916      	bls.n	803c4a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 803c474:	f8df c064 	ldr.w	ip, [pc, #100]	@ 803c4dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 803c478:	f8cd c004 	str.w	ip, [sp, #4]
 803c47c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 803c480:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 803c484:	6920      	ldr	r0, [r4, #16]
 803c486:	f8ad 100c 	strh.w	r1, [sp, #12]
 803c48a:	f04f 0c01 	mov.w	ip, #1
 803c48e:	f88d c008 	strb.w	ip, [sp, #8]
 803c492:	f8ad 200a 	strh.w	r2, [sp, #10]
 803c496:	f8ad 300e 	strh.w	r3, [sp, #14]
 803c49a:	6803      	ldr	r3, [r0, #0]
 803c49c:	a901      	add	r1, sp, #4
 803c49e:	689b      	ldr	r3, [r3, #8]
 803c4a0:	4798      	blx	r3
 803c4a2:	4b0d      	ldr	r3, [pc, #52]	@ (803c4d8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 803c4a4:	9301      	str	r3, [sp, #4]
 803c4a6:	6920      	ldr	r0, [r4, #16]
 803c4a8:	f88d 5008 	strb.w	r5, [sp, #8]
 803c4ac:	2300      	movs	r3, #0
 803c4ae:	f8ad 700a 	strh.w	r7, [sp, #10]
 803c4b2:	f8ad 600c 	strh.w	r6, [sp, #12]
 803c4b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 803c4ba:	6803      	ldr	r3, [r0, #0]
 803c4bc:	a901      	add	r1, sp, #4
 803c4be:	681b      	ldr	r3, [r3, #0]
 803c4c0:	4798      	blx	r3
 803c4c2:	b005      	add	sp, #20
 803c4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803c4c6:	2900      	cmp	r1, #0
 803c4c8:	d1eb      	bne.n	803c4a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 803c4ca:	80a2      	strh	r2, [r4, #4]
 803c4cc:	80c6      	strh	r6, [r0, #6]
 803c4ce:	60a1      	str	r1, [r4, #8]
 803c4d0:	81a1      	strh	r1, [r4, #12]
 803c4d2:	73a1      	strb	r1, [r4, #14]
 803c4d4:	e7e5      	b.n	803c4a2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 803c4d6:	bf00      	nop
 803c4d8:	08041d58 	.word	0x08041d58
 803c4dc:	080439f4 	.word	0x080439f4

0803c4e0 <__aeabi_atexit>:
 803c4e0:	460b      	mov	r3, r1
 803c4e2:	4601      	mov	r1, r0
 803c4e4:	4618      	mov	r0, r3
 803c4e6:	f000 b989 	b.w	803c7fc <__cxa_atexit>

0803c4ea <_ZdlPvj>:
 803c4ea:	f000 b803 	b.w	803c4f4 <_ZdlPv>

0803c4ee <__cxa_pure_virtual>:
 803c4ee:	b508      	push	{r3, lr}
 803c4f0:	f000 f80e 	bl	803c510 <_ZSt9terminatev>

0803c4f4 <_ZdlPv>:
 803c4f4:	f000 b848 	b.w	803c588 <free>

0803c4f8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 803c4f8:	b508      	push	{r3, lr}
 803c4fa:	4780      	blx	r0
 803c4fc:	f000 f80d 	bl	803c51a <abort>

0803c500 <_ZSt13get_terminatev>:
 803c500:	4b02      	ldr	r3, [pc, #8]	@ (803c50c <_ZSt13get_terminatev+0xc>)
 803c502:	6818      	ldr	r0, [r3, #0]
 803c504:	f3bf 8f5b 	dmb	ish
 803c508:	4770      	bx	lr
 803c50a:	bf00      	nop
 803c50c:	200007e4 	.word	0x200007e4

0803c510 <_ZSt9terminatev>:
 803c510:	b508      	push	{r3, lr}
 803c512:	f7ff fff5 	bl	803c500 <_ZSt13get_terminatev>
 803c516:	f7ff ffef 	bl	803c4f8 <_ZN10__cxxabiv111__terminateEPFvvE>

0803c51a <abort>:
 803c51a:	b508      	push	{r3, lr}
 803c51c:	2006      	movs	r0, #6
 803c51e:	f001 f87b 	bl	803d618 <raise>
 803c522:	2001      	movs	r0, #1
 803c524:	f7db fc88 	bl	8017e38 <_exit>

0803c528 <__assert_func>:
 803c528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803c52a:	4614      	mov	r4, r2
 803c52c:	461a      	mov	r2, r3
 803c52e:	4b09      	ldr	r3, [pc, #36]	@ (803c554 <__assert_func+0x2c>)
 803c530:	681b      	ldr	r3, [r3, #0]
 803c532:	4605      	mov	r5, r0
 803c534:	68d8      	ldr	r0, [r3, #12]
 803c536:	b14c      	cbz	r4, 803c54c <__assert_func+0x24>
 803c538:	4b07      	ldr	r3, [pc, #28]	@ (803c558 <__assert_func+0x30>)
 803c53a:	9100      	str	r1, [sp, #0]
 803c53c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803c540:	4906      	ldr	r1, [pc, #24]	@ (803c55c <__assert_func+0x34>)
 803c542:	462b      	mov	r3, r5
 803c544:	f000 fe62 	bl	803d20c <fiprintf>
 803c548:	f7ff ffe7 	bl	803c51a <abort>
 803c54c:	4b04      	ldr	r3, [pc, #16]	@ (803c560 <__assert_func+0x38>)
 803c54e:	461c      	mov	r4, r3
 803c550:	e7f3      	b.n	803c53a <__assert_func+0x12>
 803c552:	bf00      	nop
 803c554:	200007f4 	.word	0x200007f4
 803c558:	08041b69 	.word	0x08041b69
 803c55c:	08041b76 	.word	0x08041b76
 803c560:	0803f6b1 	.word	0x0803f6b1

0803c564 <atexit>:
 803c564:	2300      	movs	r3, #0
 803c566:	4601      	mov	r1, r0
 803c568:	461a      	mov	r2, r3
 803c56a:	4618      	mov	r0, r3
 803c56c:	f001 b968 	b.w	803d840 <__register_exitproc>

0803c570 <atoi>:
 803c570:	220a      	movs	r2, #10
 803c572:	2100      	movs	r1, #0
 803c574:	f000 b938 	b.w	803c7e8 <strtol>

0803c578 <malloc>:
 803c578:	4b02      	ldr	r3, [pc, #8]	@ (803c584 <malloc+0xc>)
 803c57a:	4601      	mov	r1, r0
 803c57c:	6818      	ldr	r0, [r3, #0]
 803c57e:	f000 b82d 	b.w	803c5dc <_malloc_r>
 803c582:	bf00      	nop
 803c584:	200007f4 	.word	0x200007f4

0803c588 <free>:
 803c588:	4b02      	ldr	r3, [pc, #8]	@ (803c594 <free+0xc>)
 803c58a:	4601      	mov	r1, r0
 803c58c:	6818      	ldr	r0, [r3, #0]
 803c58e:	f002 b80b 	b.w	803e5a8 <_free_r>
 803c592:	bf00      	nop
 803c594:	200007f4 	.word	0x200007f4

0803c598 <sbrk_aligned>:
 803c598:	b570      	push	{r4, r5, r6, lr}
 803c59a:	4e0f      	ldr	r6, [pc, #60]	@ (803c5d8 <sbrk_aligned+0x40>)
 803c59c:	460c      	mov	r4, r1
 803c59e:	6831      	ldr	r1, [r6, #0]
 803c5a0:	4605      	mov	r5, r0
 803c5a2:	b911      	cbnz	r1, 803c5aa <sbrk_aligned+0x12>
 803c5a4:	f001 f8ea 	bl	803d77c <_sbrk_r>
 803c5a8:	6030      	str	r0, [r6, #0]
 803c5aa:	4621      	mov	r1, r4
 803c5ac:	4628      	mov	r0, r5
 803c5ae:	f001 f8e5 	bl	803d77c <_sbrk_r>
 803c5b2:	1c43      	adds	r3, r0, #1
 803c5b4:	d103      	bne.n	803c5be <sbrk_aligned+0x26>
 803c5b6:	f04f 34ff 	mov.w	r4, #4294967295
 803c5ba:	4620      	mov	r0, r4
 803c5bc:	bd70      	pop	{r4, r5, r6, pc}
 803c5be:	1cc4      	adds	r4, r0, #3
 803c5c0:	f024 0403 	bic.w	r4, r4, #3
 803c5c4:	42a0      	cmp	r0, r4
 803c5c6:	d0f8      	beq.n	803c5ba <sbrk_aligned+0x22>
 803c5c8:	1a21      	subs	r1, r4, r0
 803c5ca:	4628      	mov	r0, r5
 803c5cc:	f001 f8d6 	bl	803d77c <_sbrk_r>
 803c5d0:	3001      	adds	r0, #1
 803c5d2:	d1f2      	bne.n	803c5ba <sbrk_aligned+0x22>
 803c5d4:	e7ef      	b.n	803c5b6 <sbrk_aligned+0x1e>
 803c5d6:	bf00      	nop
 803c5d8:	2000b98c 	.word	0x2000b98c

0803c5dc <_malloc_r>:
 803c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803c5e0:	1ccd      	adds	r5, r1, #3
 803c5e2:	f025 0503 	bic.w	r5, r5, #3
 803c5e6:	3508      	adds	r5, #8
 803c5e8:	2d0c      	cmp	r5, #12
 803c5ea:	bf38      	it	cc
 803c5ec:	250c      	movcc	r5, #12
 803c5ee:	2d00      	cmp	r5, #0
 803c5f0:	4606      	mov	r6, r0
 803c5f2:	db01      	blt.n	803c5f8 <_malloc_r+0x1c>
 803c5f4:	42a9      	cmp	r1, r5
 803c5f6:	d904      	bls.n	803c602 <_malloc_r+0x26>
 803c5f8:	230c      	movs	r3, #12
 803c5fa:	6033      	str	r3, [r6, #0]
 803c5fc:	2000      	movs	r0, #0
 803c5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803c602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 803c6d8 <_malloc_r+0xfc>
 803c606:	f000 f869 	bl	803c6dc <__malloc_lock>
 803c60a:	f8d8 3000 	ldr.w	r3, [r8]
 803c60e:	461c      	mov	r4, r3
 803c610:	bb44      	cbnz	r4, 803c664 <_malloc_r+0x88>
 803c612:	4629      	mov	r1, r5
 803c614:	4630      	mov	r0, r6
 803c616:	f7ff ffbf 	bl	803c598 <sbrk_aligned>
 803c61a:	1c43      	adds	r3, r0, #1
 803c61c:	4604      	mov	r4, r0
 803c61e:	d158      	bne.n	803c6d2 <_malloc_r+0xf6>
 803c620:	f8d8 4000 	ldr.w	r4, [r8]
 803c624:	4627      	mov	r7, r4
 803c626:	2f00      	cmp	r7, #0
 803c628:	d143      	bne.n	803c6b2 <_malloc_r+0xd6>
 803c62a:	2c00      	cmp	r4, #0
 803c62c:	d04b      	beq.n	803c6c6 <_malloc_r+0xea>
 803c62e:	6823      	ldr	r3, [r4, #0]
 803c630:	4639      	mov	r1, r7
 803c632:	4630      	mov	r0, r6
 803c634:	eb04 0903 	add.w	r9, r4, r3
 803c638:	f001 f8a0 	bl	803d77c <_sbrk_r>
 803c63c:	4581      	cmp	r9, r0
 803c63e:	d142      	bne.n	803c6c6 <_malloc_r+0xea>
 803c640:	6821      	ldr	r1, [r4, #0]
 803c642:	1a6d      	subs	r5, r5, r1
 803c644:	4629      	mov	r1, r5
 803c646:	4630      	mov	r0, r6
 803c648:	f7ff ffa6 	bl	803c598 <sbrk_aligned>
 803c64c:	3001      	adds	r0, #1
 803c64e:	d03a      	beq.n	803c6c6 <_malloc_r+0xea>
 803c650:	6823      	ldr	r3, [r4, #0]
 803c652:	442b      	add	r3, r5
 803c654:	6023      	str	r3, [r4, #0]
 803c656:	f8d8 3000 	ldr.w	r3, [r8]
 803c65a:	685a      	ldr	r2, [r3, #4]
 803c65c:	bb62      	cbnz	r2, 803c6b8 <_malloc_r+0xdc>
 803c65e:	f8c8 7000 	str.w	r7, [r8]
 803c662:	e00f      	b.n	803c684 <_malloc_r+0xa8>
 803c664:	6822      	ldr	r2, [r4, #0]
 803c666:	1b52      	subs	r2, r2, r5
 803c668:	d420      	bmi.n	803c6ac <_malloc_r+0xd0>
 803c66a:	2a0b      	cmp	r2, #11
 803c66c:	d917      	bls.n	803c69e <_malloc_r+0xc2>
 803c66e:	1961      	adds	r1, r4, r5
 803c670:	42a3      	cmp	r3, r4
 803c672:	6025      	str	r5, [r4, #0]
 803c674:	bf18      	it	ne
 803c676:	6059      	strne	r1, [r3, #4]
 803c678:	6863      	ldr	r3, [r4, #4]
 803c67a:	bf08      	it	eq
 803c67c:	f8c8 1000 	streq.w	r1, [r8]
 803c680:	5162      	str	r2, [r4, r5]
 803c682:	604b      	str	r3, [r1, #4]
 803c684:	4630      	mov	r0, r6
 803c686:	f000 f82f 	bl	803c6e8 <__malloc_unlock>
 803c68a:	f104 000b 	add.w	r0, r4, #11
 803c68e:	1d23      	adds	r3, r4, #4
 803c690:	f020 0007 	bic.w	r0, r0, #7
 803c694:	1ac2      	subs	r2, r0, r3
 803c696:	bf1c      	itt	ne
 803c698:	1a1b      	subne	r3, r3, r0
 803c69a:	50a3      	strne	r3, [r4, r2]
 803c69c:	e7af      	b.n	803c5fe <_malloc_r+0x22>
 803c69e:	6862      	ldr	r2, [r4, #4]
 803c6a0:	42a3      	cmp	r3, r4
 803c6a2:	bf0c      	ite	eq
 803c6a4:	f8c8 2000 	streq.w	r2, [r8]
 803c6a8:	605a      	strne	r2, [r3, #4]
 803c6aa:	e7eb      	b.n	803c684 <_malloc_r+0xa8>
 803c6ac:	4623      	mov	r3, r4
 803c6ae:	6864      	ldr	r4, [r4, #4]
 803c6b0:	e7ae      	b.n	803c610 <_malloc_r+0x34>
 803c6b2:	463c      	mov	r4, r7
 803c6b4:	687f      	ldr	r7, [r7, #4]
 803c6b6:	e7b6      	b.n	803c626 <_malloc_r+0x4a>
 803c6b8:	461a      	mov	r2, r3
 803c6ba:	685b      	ldr	r3, [r3, #4]
 803c6bc:	42a3      	cmp	r3, r4
 803c6be:	d1fb      	bne.n	803c6b8 <_malloc_r+0xdc>
 803c6c0:	2300      	movs	r3, #0
 803c6c2:	6053      	str	r3, [r2, #4]
 803c6c4:	e7de      	b.n	803c684 <_malloc_r+0xa8>
 803c6c6:	230c      	movs	r3, #12
 803c6c8:	6033      	str	r3, [r6, #0]
 803c6ca:	4630      	mov	r0, r6
 803c6cc:	f000 f80c 	bl	803c6e8 <__malloc_unlock>
 803c6d0:	e794      	b.n	803c5fc <_malloc_r+0x20>
 803c6d2:	6005      	str	r5, [r0, #0]
 803c6d4:	e7d6      	b.n	803c684 <_malloc_r+0xa8>
 803c6d6:	bf00      	nop
 803c6d8:	2000b990 	.word	0x2000b990

0803c6dc <__malloc_lock>:
 803c6dc:	4801      	ldr	r0, [pc, #4]	@ (803c6e4 <__malloc_lock+0x8>)
 803c6de:	f7db bc79 	b.w	8017fd4 <__retarget_lock_acquire_recursive>
 803c6e2:	bf00      	nop
 803c6e4:	20001d5c 	.word	0x20001d5c

0803c6e8 <__malloc_unlock>:
 803c6e8:	4801      	ldr	r0, [pc, #4]	@ (803c6f0 <__malloc_unlock+0x8>)
 803c6ea:	f7db bc7f 	b.w	8017fec <__retarget_lock_release_recursive>
 803c6ee:	bf00      	nop
 803c6f0:	20001d5c 	.word	0x20001d5c

0803c6f4 <_strtol_l.isra.0>:
 803c6f4:	2b24      	cmp	r3, #36	@ 0x24
 803c6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c6fa:	4686      	mov	lr, r0
 803c6fc:	4690      	mov	r8, r2
 803c6fe:	d801      	bhi.n	803c704 <_strtol_l.isra.0+0x10>
 803c700:	2b01      	cmp	r3, #1
 803c702:	d106      	bne.n	803c712 <_strtol_l.isra.0+0x1e>
 803c704:	f001 f85c 	bl	803d7c0 <__errno>
 803c708:	2316      	movs	r3, #22
 803c70a:	6003      	str	r3, [r0, #0]
 803c70c:	2000      	movs	r0, #0
 803c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c712:	4834      	ldr	r0, [pc, #208]	@ (803c7e4 <_strtol_l.isra.0+0xf0>)
 803c714:	460d      	mov	r5, r1
 803c716:	462a      	mov	r2, r5
 803c718:	f815 4b01 	ldrb.w	r4, [r5], #1
 803c71c:	5d06      	ldrb	r6, [r0, r4]
 803c71e:	f016 0608 	ands.w	r6, r6, #8
 803c722:	d1f8      	bne.n	803c716 <_strtol_l.isra.0+0x22>
 803c724:	2c2d      	cmp	r4, #45	@ 0x2d
 803c726:	d110      	bne.n	803c74a <_strtol_l.isra.0+0x56>
 803c728:	782c      	ldrb	r4, [r5, #0]
 803c72a:	2601      	movs	r6, #1
 803c72c:	1c95      	adds	r5, r2, #2
 803c72e:	f033 0210 	bics.w	r2, r3, #16
 803c732:	d115      	bne.n	803c760 <_strtol_l.isra.0+0x6c>
 803c734:	2c30      	cmp	r4, #48	@ 0x30
 803c736:	d10d      	bne.n	803c754 <_strtol_l.isra.0+0x60>
 803c738:	782a      	ldrb	r2, [r5, #0]
 803c73a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 803c73e:	2a58      	cmp	r2, #88	@ 0x58
 803c740:	d108      	bne.n	803c754 <_strtol_l.isra.0+0x60>
 803c742:	786c      	ldrb	r4, [r5, #1]
 803c744:	3502      	adds	r5, #2
 803c746:	2310      	movs	r3, #16
 803c748:	e00a      	b.n	803c760 <_strtol_l.isra.0+0x6c>
 803c74a:	2c2b      	cmp	r4, #43	@ 0x2b
 803c74c:	bf04      	itt	eq
 803c74e:	782c      	ldrbeq	r4, [r5, #0]
 803c750:	1c95      	addeq	r5, r2, #2
 803c752:	e7ec      	b.n	803c72e <_strtol_l.isra.0+0x3a>
 803c754:	2b00      	cmp	r3, #0
 803c756:	d1f6      	bne.n	803c746 <_strtol_l.isra.0+0x52>
 803c758:	2c30      	cmp	r4, #48	@ 0x30
 803c75a:	bf14      	ite	ne
 803c75c:	230a      	movne	r3, #10
 803c75e:	2308      	moveq	r3, #8
 803c760:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 803c764:	f10c 3cff 	add.w	ip, ip, #4294967295
 803c768:	2200      	movs	r2, #0
 803c76a:	fbbc f9f3 	udiv	r9, ip, r3
 803c76e:	4610      	mov	r0, r2
 803c770:	fb03 ca19 	mls	sl, r3, r9, ip
 803c774:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 803c778:	2f09      	cmp	r7, #9
 803c77a:	d80f      	bhi.n	803c79c <_strtol_l.isra.0+0xa8>
 803c77c:	463c      	mov	r4, r7
 803c77e:	42a3      	cmp	r3, r4
 803c780:	dd1b      	ble.n	803c7ba <_strtol_l.isra.0+0xc6>
 803c782:	1c57      	adds	r7, r2, #1
 803c784:	d007      	beq.n	803c796 <_strtol_l.isra.0+0xa2>
 803c786:	4581      	cmp	r9, r0
 803c788:	d314      	bcc.n	803c7b4 <_strtol_l.isra.0+0xc0>
 803c78a:	d101      	bne.n	803c790 <_strtol_l.isra.0+0x9c>
 803c78c:	45a2      	cmp	sl, r4
 803c78e:	db11      	blt.n	803c7b4 <_strtol_l.isra.0+0xc0>
 803c790:	fb00 4003 	mla	r0, r0, r3, r4
 803c794:	2201      	movs	r2, #1
 803c796:	f815 4b01 	ldrb.w	r4, [r5], #1
 803c79a:	e7eb      	b.n	803c774 <_strtol_l.isra.0+0x80>
 803c79c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 803c7a0:	2f19      	cmp	r7, #25
 803c7a2:	d801      	bhi.n	803c7a8 <_strtol_l.isra.0+0xb4>
 803c7a4:	3c37      	subs	r4, #55	@ 0x37
 803c7a6:	e7ea      	b.n	803c77e <_strtol_l.isra.0+0x8a>
 803c7a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 803c7ac:	2f19      	cmp	r7, #25
 803c7ae:	d804      	bhi.n	803c7ba <_strtol_l.isra.0+0xc6>
 803c7b0:	3c57      	subs	r4, #87	@ 0x57
 803c7b2:	e7e4      	b.n	803c77e <_strtol_l.isra.0+0x8a>
 803c7b4:	f04f 32ff 	mov.w	r2, #4294967295
 803c7b8:	e7ed      	b.n	803c796 <_strtol_l.isra.0+0xa2>
 803c7ba:	1c53      	adds	r3, r2, #1
 803c7bc:	d108      	bne.n	803c7d0 <_strtol_l.isra.0+0xdc>
 803c7be:	2322      	movs	r3, #34	@ 0x22
 803c7c0:	f8ce 3000 	str.w	r3, [lr]
 803c7c4:	4660      	mov	r0, ip
 803c7c6:	f1b8 0f00 	cmp.w	r8, #0
 803c7ca:	d0a0      	beq.n	803c70e <_strtol_l.isra.0+0x1a>
 803c7cc:	1e69      	subs	r1, r5, #1
 803c7ce:	e006      	b.n	803c7de <_strtol_l.isra.0+0xea>
 803c7d0:	b106      	cbz	r6, 803c7d4 <_strtol_l.isra.0+0xe0>
 803c7d2:	4240      	negs	r0, r0
 803c7d4:	f1b8 0f00 	cmp.w	r8, #0
 803c7d8:	d099      	beq.n	803c70e <_strtol_l.isra.0+0x1a>
 803c7da:	2a00      	cmp	r2, #0
 803c7dc:	d1f6      	bne.n	803c7cc <_strtol_l.isra.0+0xd8>
 803c7de:	f8c8 1000 	str.w	r1, [r8]
 803c7e2:	e794      	b.n	803c70e <_strtol_l.isra.0+0x1a>
 803c7e4:	08043b2d 	.word	0x08043b2d

0803c7e8 <strtol>:
 803c7e8:	4613      	mov	r3, r2
 803c7ea:	460a      	mov	r2, r1
 803c7ec:	4601      	mov	r1, r0
 803c7ee:	4802      	ldr	r0, [pc, #8]	@ (803c7f8 <strtol+0x10>)
 803c7f0:	6800      	ldr	r0, [r0, #0]
 803c7f2:	f7ff bf7f 	b.w	803c6f4 <_strtol_l.isra.0>
 803c7f6:	bf00      	nop
 803c7f8:	200007f4 	.word	0x200007f4

0803c7fc <__cxa_atexit>:
 803c7fc:	b510      	push	{r4, lr}
 803c7fe:	4604      	mov	r4, r0
 803c800:	4804      	ldr	r0, [pc, #16]	@ (803c814 <__cxa_atexit+0x18>)
 803c802:	4613      	mov	r3, r2
 803c804:	b120      	cbz	r0, 803c810 <__cxa_atexit+0x14>
 803c806:	460a      	mov	r2, r1
 803c808:	2002      	movs	r0, #2
 803c80a:	4621      	mov	r1, r4
 803c80c:	f001 f818 	bl	803d840 <__register_exitproc>
 803c810:	bd10      	pop	{r4, pc}
 803c812:	bf00      	nop
 803c814:	0803d841 	.word	0x0803d841

0803c818 <__cvt>:
 803c818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803c81c:	ec57 6b10 	vmov	r6, r7, d0
 803c820:	2f00      	cmp	r7, #0
 803c822:	460c      	mov	r4, r1
 803c824:	4619      	mov	r1, r3
 803c826:	463b      	mov	r3, r7
 803c828:	bfbb      	ittet	lt
 803c82a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 803c82e:	461f      	movlt	r7, r3
 803c830:	2300      	movge	r3, #0
 803c832:	232d      	movlt	r3, #45	@ 0x2d
 803c834:	700b      	strb	r3, [r1, #0]
 803c836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803c838:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 803c83c:	4691      	mov	r9, r2
 803c83e:	f023 0820 	bic.w	r8, r3, #32
 803c842:	bfbc      	itt	lt
 803c844:	4632      	movlt	r2, r6
 803c846:	4616      	movlt	r6, r2
 803c848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 803c84c:	d005      	beq.n	803c85a <__cvt+0x42>
 803c84e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 803c852:	d100      	bne.n	803c856 <__cvt+0x3e>
 803c854:	3401      	adds	r4, #1
 803c856:	2102      	movs	r1, #2
 803c858:	e000      	b.n	803c85c <__cvt+0x44>
 803c85a:	2103      	movs	r1, #3
 803c85c:	ab03      	add	r3, sp, #12
 803c85e:	9301      	str	r3, [sp, #4]
 803c860:	ab02      	add	r3, sp, #8
 803c862:	9300      	str	r3, [sp, #0]
 803c864:	ec47 6b10 	vmov	d0, r6, r7
 803c868:	4653      	mov	r3, sl
 803c86a:	4622      	mov	r2, r4
 803c86c:	f001 f8cc 	bl	803da08 <_dtoa_r>
 803c870:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 803c874:	4605      	mov	r5, r0
 803c876:	d119      	bne.n	803c8ac <__cvt+0x94>
 803c878:	f019 0f01 	tst.w	r9, #1
 803c87c:	d00e      	beq.n	803c89c <__cvt+0x84>
 803c87e:	eb00 0904 	add.w	r9, r0, r4
 803c882:	2200      	movs	r2, #0
 803c884:	2300      	movs	r3, #0
 803c886:	4630      	mov	r0, r6
 803c888:	4639      	mov	r1, r7
 803c88a:	f7d9 fa45 	bl	8015d18 <__aeabi_dcmpeq>
 803c88e:	b108      	cbz	r0, 803c894 <__cvt+0x7c>
 803c890:	f8cd 900c 	str.w	r9, [sp, #12]
 803c894:	2230      	movs	r2, #48	@ 0x30
 803c896:	9b03      	ldr	r3, [sp, #12]
 803c898:	454b      	cmp	r3, r9
 803c89a:	d31e      	bcc.n	803c8da <__cvt+0xc2>
 803c89c:	9b03      	ldr	r3, [sp, #12]
 803c89e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 803c8a0:	1b5b      	subs	r3, r3, r5
 803c8a2:	4628      	mov	r0, r5
 803c8a4:	6013      	str	r3, [r2, #0]
 803c8a6:	b004      	add	sp, #16
 803c8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c8ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 803c8b0:	eb00 0904 	add.w	r9, r0, r4
 803c8b4:	d1e5      	bne.n	803c882 <__cvt+0x6a>
 803c8b6:	7803      	ldrb	r3, [r0, #0]
 803c8b8:	2b30      	cmp	r3, #48	@ 0x30
 803c8ba:	d10a      	bne.n	803c8d2 <__cvt+0xba>
 803c8bc:	2200      	movs	r2, #0
 803c8be:	2300      	movs	r3, #0
 803c8c0:	4630      	mov	r0, r6
 803c8c2:	4639      	mov	r1, r7
 803c8c4:	f7d9 fa28 	bl	8015d18 <__aeabi_dcmpeq>
 803c8c8:	b918      	cbnz	r0, 803c8d2 <__cvt+0xba>
 803c8ca:	f1c4 0401 	rsb	r4, r4, #1
 803c8ce:	f8ca 4000 	str.w	r4, [sl]
 803c8d2:	f8da 3000 	ldr.w	r3, [sl]
 803c8d6:	4499      	add	r9, r3
 803c8d8:	e7d3      	b.n	803c882 <__cvt+0x6a>
 803c8da:	1c59      	adds	r1, r3, #1
 803c8dc:	9103      	str	r1, [sp, #12]
 803c8de:	701a      	strb	r2, [r3, #0]
 803c8e0:	e7d9      	b.n	803c896 <__cvt+0x7e>

0803c8e2 <__exponent>:
 803c8e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803c8e4:	2900      	cmp	r1, #0
 803c8e6:	bfba      	itte	lt
 803c8e8:	4249      	neglt	r1, r1
 803c8ea:	232d      	movlt	r3, #45	@ 0x2d
 803c8ec:	232b      	movge	r3, #43	@ 0x2b
 803c8ee:	2909      	cmp	r1, #9
 803c8f0:	7002      	strb	r2, [r0, #0]
 803c8f2:	7043      	strb	r3, [r0, #1]
 803c8f4:	dd29      	ble.n	803c94a <__exponent+0x68>
 803c8f6:	f10d 0307 	add.w	r3, sp, #7
 803c8fa:	461d      	mov	r5, r3
 803c8fc:	270a      	movs	r7, #10
 803c8fe:	461a      	mov	r2, r3
 803c900:	fbb1 f6f7 	udiv	r6, r1, r7
 803c904:	fb07 1416 	mls	r4, r7, r6, r1
 803c908:	3430      	adds	r4, #48	@ 0x30
 803c90a:	f802 4c01 	strb.w	r4, [r2, #-1]
 803c90e:	460c      	mov	r4, r1
 803c910:	2c63      	cmp	r4, #99	@ 0x63
 803c912:	f103 33ff 	add.w	r3, r3, #4294967295
 803c916:	4631      	mov	r1, r6
 803c918:	dcf1      	bgt.n	803c8fe <__exponent+0x1c>
 803c91a:	3130      	adds	r1, #48	@ 0x30
 803c91c:	1e94      	subs	r4, r2, #2
 803c91e:	f803 1c01 	strb.w	r1, [r3, #-1]
 803c922:	1c41      	adds	r1, r0, #1
 803c924:	4623      	mov	r3, r4
 803c926:	42ab      	cmp	r3, r5
 803c928:	d30a      	bcc.n	803c940 <__exponent+0x5e>
 803c92a:	f10d 0309 	add.w	r3, sp, #9
 803c92e:	1a9b      	subs	r3, r3, r2
 803c930:	42ac      	cmp	r4, r5
 803c932:	bf88      	it	hi
 803c934:	2300      	movhi	r3, #0
 803c936:	3302      	adds	r3, #2
 803c938:	4403      	add	r3, r0
 803c93a:	1a18      	subs	r0, r3, r0
 803c93c:	b003      	add	sp, #12
 803c93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803c940:	f813 6b01 	ldrb.w	r6, [r3], #1
 803c944:	f801 6f01 	strb.w	r6, [r1, #1]!
 803c948:	e7ed      	b.n	803c926 <__exponent+0x44>
 803c94a:	2330      	movs	r3, #48	@ 0x30
 803c94c:	3130      	adds	r1, #48	@ 0x30
 803c94e:	7083      	strb	r3, [r0, #2]
 803c950:	70c1      	strb	r1, [r0, #3]
 803c952:	1d03      	adds	r3, r0, #4
 803c954:	e7f1      	b.n	803c93a <__exponent+0x58>
	...

0803c958 <_printf_float>:
 803c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c95c:	b08d      	sub	sp, #52	@ 0x34
 803c95e:	460c      	mov	r4, r1
 803c960:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 803c964:	4616      	mov	r6, r2
 803c966:	461f      	mov	r7, r3
 803c968:	4605      	mov	r5, r0
 803c96a:	f000 fe5d 	bl	803d628 <_localeconv_r>
 803c96e:	6803      	ldr	r3, [r0, #0]
 803c970:	9304      	str	r3, [sp, #16]
 803c972:	4618      	mov	r0, r3
 803c974:	f7d8 fda4 	bl	80154c0 <strlen>
 803c978:	2300      	movs	r3, #0
 803c97a:	930a      	str	r3, [sp, #40]	@ 0x28
 803c97c:	f8d8 3000 	ldr.w	r3, [r8]
 803c980:	9005      	str	r0, [sp, #20]
 803c982:	3307      	adds	r3, #7
 803c984:	f023 0307 	bic.w	r3, r3, #7
 803c988:	f103 0208 	add.w	r2, r3, #8
 803c98c:	f894 a018 	ldrb.w	sl, [r4, #24]
 803c990:	f8d4 b000 	ldr.w	fp, [r4]
 803c994:	f8c8 2000 	str.w	r2, [r8]
 803c998:	e9d3 8900 	ldrd	r8, r9, [r3]
 803c99c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 803c9a0:	9307      	str	r3, [sp, #28]
 803c9a2:	f8cd 8018 	str.w	r8, [sp, #24]
 803c9a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 803c9aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 803c9ae:	4b9c      	ldr	r3, [pc, #624]	@ (803cc20 <_printf_float+0x2c8>)
 803c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 803c9b4:	f7d9 f9e2 	bl	8015d7c <__aeabi_dcmpun>
 803c9b8:	bb70      	cbnz	r0, 803ca18 <_printf_float+0xc0>
 803c9ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 803c9be:	4b98      	ldr	r3, [pc, #608]	@ (803cc20 <_printf_float+0x2c8>)
 803c9c0:	f04f 32ff 	mov.w	r2, #4294967295
 803c9c4:	f7d9 f9bc 	bl	8015d40 <__aeabi_dcmple>
 803c9c8:	bb30      	cbnz	r0, 803ca18 <_printf_float+0xc0>
 803c9ca:	2200      	movs	r2, #0
 803c9cc:	2300      	movs	r3, #0
 803c9ce:	4640      	mov	r0, r8
 803c9d0:	4649      	mov	r1, r9
 803c9d2:	f7d9 f9ab 	bl	8015d2c <__aeabi_dcmplt>
 803c9d6:	b110      	cbz	r0, 803c9de <_printf_float+0x86>
 803c9d8:	232d      	movs	r3, #45	@ 0x2d
 803c9da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803c9de:	4a91      	ldr	r2, [pc, #580]	@ (803cc24 <_printf_float+0x2cc>)
 803c9e0:	4b91      	ldr	r3, [pc, #580]	@ (803cc28 <_printf_float+0x2d0>)
 803c9e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 803c9e6:	bf8c      	ite	hi
 803c9e8:	4690      	movhi	r8, r2
 803c9ea:	4698      	movls	r8, r3
 803c9ec:	2303      	movs	r3, #3
 803c9ee:	6123      	str	r3, [r4, #16]
 803c9f0:	f02b 0304 	bic.w	r3, fp, #4
 803c9f4:	6023      	str	r3, [r4, #0]
 803c9f6:	f04f 0900 	mov.w	r9, #0
 803c9fa:	9700      	str	r7, [sp, #0]
 803c9fc:	4633      	mov	r3, r6
 803c9fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 803ca00:	4621      	mov	r1, r4
 803ca02:	4628      	mov	r0, r5
 803ca04:	f000 f9d2 	bl	803cdac <_printf_common>
 803ca08:	3001      	adds	r0, #1
 803ca0a:	f040 808d 	bne.w	803cb28 <_printf_float+0x1d0>
 803ca0e:	f04f 30ff 	mov.w	r0, #4294967295
 803ca12:	b00d      	add	sp, #52	@ 0x34
 803ca14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ca18:	4642      	mov	r2, r8
 803ca1a:	464b      	mov	r3, r9
 803ca1c:	4640      	mov	r0, r8
 803ca1e:	4649      	mov	r1, r9
 803ca20:	f7d9 f9ac 	bl	8015d7c <__aeabi_dcmpun>
 803ca24:	b140      	cbz	r0, 803ca38 <_printf_float+0xe0>
 803ca26:	464b      	mov	r3, r9
 803ca28:	2b00      	cmp	r3, #0
 803ca2a:	bfbc      	itt	lt
 803ca2c:	232d      	movlt	r3, #45	@ 0x2d
 803ca2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 803ca32:	4a7e      	ldr	r2, [pc, #504]	@ (803cc2c <_printf_float+0x2d4>)
 803ca34:	4b7e      	ldr	r3, [pc, #504]	@ (803cc30 <_printf_float+0x2d8>)
 803ca36:	e7d4      	b.n	803c9e2 <_printf_float+0x8a>
 803ca38:	6863      	ldr	r3, [r4, #4]
 803ca3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 803ca3e:	9206      	str	r2, [sp, #24]
 803ca40:	1c5a      	adds	r2, r3, #1
 803ca42:	d13b      	bne.n	803cabc <_printf_float+0x164>
 803ca44:	2306      	movs	r3, #6
 803ca46:	6063      	str	r3, [r4, #4]
 803ca48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 803ca4c:	2300      	movs	r3, #0
 803ca4e:	6022      	str	r2, [r4, #0]
 803ca50:	9303      	str	r3, [sp, #12]
 803ca52:	ab0a      	add	r3, sp, #40	@ 0x28
 803ca54:	e9cd a301 	strd	sl, r3, [sp, #4]
 803ca58:	ab09      	add	r3, sp, #36	@ 0x24
 803ca5a:	9300      	str	r3, [sp, #0]
 803ca5c:	6861      	ldr	r1, [r4, #4]
 803ca5e:	ec49 8b10 	vmov	d0, r8, r9
 803ca62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 803ca66:	4628      	mov	r0, r5
 803ca68:	f7ff fed6 	bl	803c818 <__cvt>
 803ca6c:	9b06      	ldr	r3, [sp, #24]
 803ca6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803ca70:	2b47      	cmp	r3, #71	@ 0x47
 803ca72:	4680      	mov	r8, r0
 803ca74:	d129      	bne.n	803caca <_printf_float+0x172>
 803ca76:	1cc8      	adds	r0, r1, #3
 803ca78:	db02      	blt.n	803ca80 <_printf_float+0x128>
 803ca7a:	6863      	ldr	r3, [r4, #4]
 803ca7c:	4299      	cmp	r1, r3
 803ca7e:	dd41      	ble.n	803cb04 <_printf_float+0x1ac>
 803ca80:	f1aa 0a02 	sub.w	sl, sl, #2
 803ca84:	fa5f fa8a 	uxtb.w	sl, sl
 803ca88:	3901      	subs	r1, #1
 803ca8a:	4652      	mov	r2, sl
 803ca8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 803ca90:	9109      	str	r1, [sp, #36]	@ 0x24
 803ca92:	f7ff ff26 	bl	803c8e2 <__exponent>
 803ca96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 803ca98:	1813      	adds	r3, r2, r0
 803ca9a:	2a01      	cmp	r2, #1
 803ca9c:	4681      	mov	r9, r0
 803ca9e:	6123      	str	r3, [r4, #16]
 803caa0:	dc02      	bgt.n	803caa8 <_printf_float+0x150>
 803caa2:	6822      	ldr	r2, [r4, #0]
 803caa4:	07d2      	lsls	r2, r2, #31
 803caa6:	d501      	bpl.n	803caac <_printf_float+0x154>
 803caa8:	3301      	adds	r3, #1
 803caaa:	6123      	str	r3, [r4, #16]
 803caac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 803cab0:	2b00      	cmp	r3, #0
 803cab2:	d0a2      	beq.n	803c9fa <_printf_float+0xa2>
 803cab4:	232d      	movs	r3, #45	@ 0x2d
 803cab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803caba:	e79e      	b.n	803c9fa <_printf_float+0xa2>
 803cabc:	9a06      	ldr	r2, [sp, #24]
 803cabe:	2a47      	cmp	r2, #71	@ 0x47
 803cac0:	d1c2      	bne.n	803ca48 <_printf_float+0xf0>
 803cac2:	2b00      	cmp	r3, #0
 803cac4:	d1c0      	bne.n	803ca48 <_printf_float+0xf0>
 803cac6:	2301      	movs	r3, #1
 803cac8:	e7bd      	b.n	803ca46 <_printf_float+0xee>
 803caca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 803cace:	d9db      	bls.n	803ca88 <_printf_float+0x130>
 803cad0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 803cad4:	d118      	bne.n	803cb08 <_printf_float+0x1b0>
 803cad6:	2900      	cmp	r1, #0
 803cad8:	6863      	ldr	r3, [r4, #4]
 803cada:	dd0b      	ble.n	803caf4 <_printf_float+0x19c>
 803cadc:	6121      	str	r1, [r4, #16]
 803cade:	b913      	cbnz	r3, 803cae6 <_printf_float+0x18e>
 803cae0:	6822      	ldr	r2, [r4, #0]
 803cae2:	07d0      	lsls	r0, r2, #31
 803cae4:	d502      	bpl.n	803caec <_printf_float+0x194>
 803cae6:	3301      	adds	r3, #1
 803cae8:	440b      	add	r3, r1
 803caea:	6123      	str	r3, [r4, #16]
 803caec:	65a1      	str	r1, [r4, #88]	@ 0x58
 803caee:	f04f 0900 	mov.w	r9, #0
 803caf2:	e7db      	b.n	803caac <_printf_float+0x154>
 803caf4:	b913      	cbnz	r3, 803cafc <_printf_float+0x1a4>
 803caf6:	6822      	ldr	r2, [r4, #0]
 803caf8:	07d2      	lsls	r2, r2, #31
 803cafa:	d501      	bpl.n	803cb00 <_printf_float+0x1a8>
 803cafc:	3302      	adds	r3, #2
 803cafe:	e7f4      	b.n	803caea <_printf_float+0x192>
 803cb00:	2301      	movs	r3, #1
 803cb02:	e7f2      	b.n	803caea <_printf_float+0x192>
 803cb04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 803cb08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 803cb0a:	4299      	cmp	r1, r3
 803cb0c:	db05      	blt.n	803cb1a <_printf_float+0x1c2>
 803cb0e:	6823      	ldr	r3, [r4, #0]
 803cb10:	6121      	str	r1, [r4, #16]
 803cb12:	07d8      	lsls	r0, r3, #31
 803cb14:	d5ea      	bpl.n	803caec <_printf_float+0x194>
 803cb16:	1c4b      	adds	r3, r1, #1
 803cb18:	e7e7      	b.n	803caea <_printf_float+0x192>
 803cb1a:	2900      	cmp	r1, #0
 803cb1c:	bfd4      	ite	le
 803cb1e:	f1c1 0202 	rsble	r2, r1, #2
 803cb22:	2201      	movgt	r2, #1
 803cb24:	4413      	add	r3, r2
 803cb26:	e7e0      	b.n	803caea <_printf_float+0x192>
 803cb28:	6823      	ldr	r3, [r4, #0]
 803cb2a:	055a      	lsls	r2, r3, #21
 803cb2c:	d407      	bmi.n	803cb3e <_printf_float+0x1e6>
 803cb2e:	6923      	ldr	r3, [r4, #16]
 803cb30:	4642      	mov	r2, r8
 803cb32:	4631      	mov	r1, r6
 803cb34:	4628      	mov	r0, r5
 803cb36:	47b8      	blx	r7
 803cb38:	3001      	adds	r0, #1
 803cb3a:	d12b      	bne.n	803cb94 <_printf_float+0x23c>
 803cb3c:	e767      	b.n	803ca0e <_printf_float+0xb6>
 803cb3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 803cb42:	f240 80dd 	bls.w	803cd00 <_printf_float+0x3a8>
 803cb46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 803cb4a:	2200      	movs	r2, #0
 803cb4c:	2300      	movs	r3, #0
 803cb4e:	f7d9 f8e3 	bl	8015d18 <__aeabi_dcmpeq>
 803cb52:	2800      	cmp	r0, #0
 803cb54:	d033      	beq.n	803cbbe <_printf_float+0x266>
 803cb56:	4a37      	ldr	r2, [pc, #220]	@ (803cc34 <_printf_float+0x2dc>)
 803cb58:	2301      	movs	r3, #1
 803cb5a:	4631      	mov	r1, r6
 803cb5c:	4628      	mov	r0, r5
 803cb5e:	47b8      	blx	r7
 803cb60:	3001      	adds	r0, #1
 803cb62:	f43f af54 	beq.w	803ca0e <_printf_float+0xb6>
 803cb66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 803cb6a:	4543      	cmp	r3, r8
 803cb6c:	db02      	blt.n	803cb74 <_printf_float+0x21c>
 803cb6e:	6823      	ldr	r3, [r4, #0]
 803cb70:	07d8      	lsls	r0, r3, #31
 803cb72:	d50f      	bpl.n	803cb94 <_printf_float+0x23c>
 803cb74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803cb78:	4631      	mov	r1, r6
 803cb7a:	4628      	mov	r0, r5
 803cb7c:	47b8      	blx	r7
 803cb7e:	3001      	adds	r0, #1
 803cb80:	f43f af45 	beq.w	803ca0e <_printf_float+0xb6>
 803cb84:	f04f 0900 	mov.w	r9, #0
 803cb88:	f108 38ff 	add.w	r8, r8, #4294967295
 803cb8c:	f104 0a1a 	add.w	sl, r4, #26
 803cb90:	45c8      	cmp	r8, r9
 803cb92:	dc09      	bgt.n	803cba8 <_printf_float+0x250>
 803cb94:	6823      	ldr	r3, [r4, #0]
 803cb96:	079b      	lsls	r3, r3, #30
 803cb98:	f100 8103 	bmi.w	803cda2 <_printf_float+0x44a>
 803cb9c:	68e0      	ldr	r0, [r4, #12]
 803cb9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803cba0:	4298      	cmp	r0, r3
 803cba2:	bfb8      	it	lt
 803cba4:	4618      	movlt	r0, r3
 803cba6:	e734      	b.n	803ca12 <_printf_float+0xba>
 803cba8:	2301      	movs	r3, #1
 803cbaa:	4652      	mov	r2, sl
 803cbac:	4631      	mov	r1, r6
 803cbae:	4628      	mov	r0, r5
 803cbb0:	47b8      	blx	r7
 803cbb2:	3001      	adds	r0, #1
 803cbb4:	f43f af2b 	beq.w	803ca0e <_printf_float+0xb6>
 803cbb8:	f109 0901 	add.w	r9, r9, #1
 803cbbc:	e7e8      	b.n	803cb90 <_printf_float+0x238>
 803cbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803cbc0:	2b00      	cmp	r3, #0
 803cbc2:	dc39      	bgt.n	803cc38 <_printf_float+0x2e0>
 803cbc4:	4a1b      	ldr	r2, [pc, #108]	@ (803cc34 <_printf_float+0x2dc>)
 803cbc6:	2301      	movs	r3, #1
 803cbc8:	4631      	mov	r1, r6
 803cbca:	4628      	mov	r0, r5
 803cbcc:	47b8      	blx	r7
 803cbce:	3001      	adds	r0, #1
 803cbd0:	f43f af1d 	beq.w	803ca0e <_printf_float+0xb6>
 803cbd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 803cbd8:	ea59 0303 	orrs.w	r3, r9, r3
 803cbdc:	d102      	bne.n	803cbe4 <_printf_float+0x28c>
 803cbde:	6823      	ldr	r3, [r4, #0]
 803cbe0:	07d9      	lsls	r1, r3, #31
 803cbe2:	d5d7      	bpl.n	803cb94 <_printf_float+0x23c>
 803cbe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803cbe8:	4631      	mov	r1, r6
 803cbea:	4628      	mov	r0, r5
 803cbec:	47b8      	blx	r7
 803cbee:	3001      	adds	r0, #1
 803cbf0:	f43f af0d 	beq.w	803ca0e <_printf_float+0xb6>
 803cbf4:	f04f 0a00 	mov.w	sl, #0
 803cbf8:	f104 0b1a 	add.w	fp, r4, #26
 803cbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803cbfe:	425b      	negs	r3, r3
 803cc00:	4553      	cmp	r3, sl
 803cc02:	dc01      	bgt.n	803cc08 <_printf_float+0x2b0>
 803cc04:	464b      	mov	r3, r9
 803cc06:	e793      	b.n	803cb30 <_printf_float+0x1d8>
 803cc08:	2301      	movs	r3, #1
 803cc0a:	465a      	mov	r2, fp
 803cc0c:	4631      	mov	r1, r6
 803cc0e:	4628      	mov	r0, r5
 803cc10:	47b8      	blx	r7
 803cc12:	3001      	adds	r0, #1
 803cc14:	f43f aefb 	beq.w	803ca0e <_printf_float+0xb6>
 803cc18:	f10a 0a01 	add.w	sl, sl, #1
 803cc1c:	e7ee      	b.n	803cbfc <_printf_float+0x2a4>
 803cc1e:	bf00      	nop
 803cc20:	7fefffff 	.word	0x7fefffff
 803cc24:	08041ba9 	.word	0x08041ba9
 803cc28:	08041ba5 	.word	0x08041ba5
 803cc2c:	08041bb1 	.word	0x08041bb1
 803cc30:	08041bad 	.word	0x08041bad
 803cc34:	0803f924 	.word	0x0803f924
 803cc38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 803cc3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 803cc3e:	4553      	cmp	r3, sl
 803cc40:	bfa8      	it	ge
 803cc42:	4653      	movge	r3, sl
 803cc44:	2b00      	cmp	r3, #0
 803cc46:	4699      	mov	r9, r3
 803cc48:	dc36      	bgt.n	803ccb8 <_printf_float+0x360>
 803cc4a:	f04f 0b00 	mov.w	fp, #0
 803cc4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803cc52:	f104 021a 	add.w	r2, r4, #26
 803cc56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 803cc58:	9306      	str	r3, [sp, #24]
 803cc5a:	eba3 0309 	sub.w	r3, r3, r9
 803cc5e:	455b      	cmp	r3, fp
 803cc60:	dc31      	bgt.n	803ccc6 <_printf_float+0x36e>
 803cc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803cc64:	459a      	cmp	sl, r3
 803cc66:	dc3a      	bgt.n	803ccde <_printf_float+0x386>
 803cc68:	6823      	ldr	r3, [r4, #0]
 803cc6a:	07da      	lsls	r2, r3, #31
 803cc6c:	d437      	bmi.n	803ccde <_printf_float+0x386>
 803cc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803cc70:	ebaa 0903 	sub.w	r9, sl, r3
 803cc74:	9b06      	ldr	r3, [sp, #24]
 803cc76:	ebaa 0303 	sub.w	r3, sl, r3
 803cc7a:	4599      	cmp	r9, r3
 803cc7c:	bfa8      	it	ge
 803cc7e:	4699      	movge	r9, r3
 803cc80:	f1b9 0f00 	cmp.w	r9, #0
 803cc84:	dc33      	bgt.n	803ccee <_printf_float+0x396>
 803cc86:	f04f 0800 	mov.w	r8, #0
 803cc8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803cc8e:	f104 0b1a 	add.w	fp, r4, #26
 803cc92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803cc94:	ebaa 0303 	sub.w	r3, sl, r3
 803cc98:	eba3 0309 	sub.w	r3, r3, r9
 803cc9c:	4543      	cmp	r3, r8
 803cc9e:	f77f af79 	ble.w	803cb94 <_printf_float+0x23c>
 803cca2:	2301      	movs	r3, #1
 803cca4:	465a      	mov	r2, fp
 803cca6:	4631      	mov	r1, r6
 803cca8:	4628      	mov	r0, r5
 803ccaa:	47b8      	blx	r7
 803ccac:	3001      	adds	r0, #1
 803ccae:	f43f aeae 	beq.w	803ca0e <_printf_float+0xb6>
 803ccb2:	f108 0801 	add.w	r8, r8, #1
 803ccb6:	e7ec      	b.n	803cc92 <_printf_float+0x33a>
 803ccb8:	4642      	mov	r2, r8
 803ccba:	4631      	mov	r1, r6
 803ccbc:	4628      	mov	r0, r5
 803ccbe:	47b8      	blx	r7
 803ccc0:	3001      	adds	r0, #1
 803ccc2:	d1c2      	bne.n	803cc4a <_printf_float+0x2f2>
 803ccc4:	e6a3      	b.n	803ca0e <_printf_float+0xb6>
 803ccc6:	2301      	movs	r3, #1
 803ccc8:	4631      	mov	r1, r6
 803ccca:	4628      	mov	r0, r5
 803cccc:	9206      	str	r2, [sp, #24]
 803ccce:	47b8      	blx	r7
 803ccd0:	3001      	adds	r0, #1
 803ccd2:	f43f ae9c 	beq.w	803ca0e <_printf_float+0xb6>
 803ccd6:	9a06      	ldr	r2, [sp, #24]
 803ccd8:	f10b 0b01 	add.w	fp, fp, #1
 803ccdc:	e7bb      	b.n	803cc56 <_printf_float+0x2fe>
 803ccde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803cce2:	4631      	mov	r1, r6
 803cce4:	4628      	mov	r0, r5
 803cce6:	47b8      	blx	r7
 803cce8:	3001      	adds	r0, #1
 803ccea:	d1c0      	bne.n	803cc6e <_printf_float+0x316>
 803ccec:	e68f      	b.n	803ca0e <_printf_float+0xb6>
 803ccee:	9a06      	ldr	r2, [sp, #24]
 803ccf0:	464b      	mov	r3, r9
 803ccf2:	4442      	add	r2, r8
 803ccf4:	4631      	mov	r1, r6
 803ccf6:	4628      	mov	r0, r5
 803ccf8:	47b8      	blx	r7
 803ccfa:	3001      	adds	r0, #1
 803ccfc:	d1c3      	bne.n	803cc86 <_printf_float+0x32e>
 803ccfe:	e686      	b.n	803ca0e <_printf_float+0xb6>
 803cd00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 803cd04:	f1ba 0f01 	cmp.w	sl, #1
 803cd08:	dc01      	bgt.n	803cd0e <_printf_float+0x3b6>
 803cd0a:	07db      	lsls	r3, r3, #31
 803cd0c:	d536      	bpl.n	803cd7c <_printf_float+0x424>
 803cd0e:	2301      	movs	r3, #1
 803cd10:	4642      	mov	r2, r8
 803cd12:	4631      	mov	r1, r6
 803cd14:	4628      	mov	r0, r5
 803cd16:	47b8      	blx	r7
 803cd18:	3001      	adds	r0, #1
 803cd1a:	f43f ae78 	beq.w	803ca0e <_printf_float+0xb6>
 803cd1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803cd22:	4631      	mov	r1, r6
 803cd24:	4628      	mov	r0, r5
 803cd26:	47b8      	blx	r7
 803cd28:	3001      	adds	r0, #1
 803cd2a:	f43f ae70 	beq.w	803ca0e <_printf_float+0xb6>
 803cd2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 803cd32:	2200      	movs	r2, #0
 803cd34:	2300      	movs	r3, #0
 803cd36:	f10a 3aff 	add.w	sl, sl, #4294967295
 803cd3a:	f7d8 ffed 	bl	8015d18 <__aeabi_dcmpeq>
 803cd3e:	b9c0      	cbnz	r0, 803cd72 <_printf_float+0x41a>
 803cd40:	4653      	mov	r3, sl
 803cd42:	f108 0201 	add.w	r2, r8, #1
 803cd46:	4631      	mov	r1, r6
 803cd48:	4628      	mov	r0, r5
 803cd4a:	47b8      	blx	r7
 803cd4c:	3001      	adds	r0, #1
 803cd4e:	d10c      	bne.n	803cd6a <_printf_float+0x412>
 803cd50:	e65d      	b.n	803ca0e <_printf_float+0xb6>
 803cd52:	2301      	movs	r3, #1
 803cd54:	465a      	mov	r2, fp
 803cd56:	4631      	mov	r1, r6
 803cd58:	4628      	mov	r0, r5
 803cd5a:	47b8      	blx	r7
 803cd5c:	3001      	adds	r0, #1
 803cd5e:	f43f ae56 	beq.w	803ca0e <_printf_float+0xb6>
 803cd62:	f108 0801 	add.w	r8, r8, #1
 803cd66:	45d0      	cmp	r8, sl
 803cd68:	dbf3      	blt.n	803cd52 <_printf_float+0x3fa>
 803cd6a:	464b      	mov	r3, r9
 803cd6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 803cd70:	e6df      	b.n	803cb32 <_printf_float+0x1da>
 803cd72:	f04f 0800 	mov.w	r8, #0
 803cd76:	f104 0b1a 	add.w	fp, r4, #26
 803cd7a:	e7f4      	b.n	803cd66 <_printf_float+0x40e>
 803cd7c:	2301      	movs	r3, #1
 803cd7e:	4642      	mov	r2, r8
 803cd80:	e7e1      	b.n	803cd46 <_printf_float+0x3ee>
 803cd82:	2301      	movs	r3, #1
 803cd84:	464a      	mov	r2, r9
 803cd86:	4631      	mov	r1, r6
 803cd88:	4628      	mov	r0, r5
 803cd8a:	47b8      	blx	r7
 803cd8c:	3001      	adds	r0, #1
 803cd8e:	f43f ae3e 	beq.w	803ca0e <_printf_float+0xb6>
 803cd92:	f108 0801 	add.w	r8, r8, #1
 803cd96:	68e3      	ldr	r3, [r4, #12]
 803cd98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 803cd9a:	1a5b      	subs	r3, r3, r1
 803cd9c:	4543      	cmp	r3, r8
 803cd9e:	dcf0      	bgt.n	803cd82 <_printf_float+0x42a>
 803cda0:	e6fc      	b.n	803cb9c <_printf_float+0x244>
 803cda2:	f04f 0800 	mov.w	r8, #0
 803cda6:	f104 0919 	add.w	r9, r4, #25
 803cdaa:	e7f4      	b.n	803cd96 <_printf_float+0x43e>

0803cdac <_printf_common>:
 803cdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803cdb0:	4616      	mov	r6, r2
 803cdb2:	4698      	mov	r8, r3
 803cdb4:	688a      	ldr	r2, [r1, #8]
 803cdb6:	690b      	ldr	r3, [r1, #16]
 803cdb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 803cdbc:	4293      	cmp	r3, r2
 803cdbe:	bfb8      	it	lt
 803cdc0:	4613      	movlt	r3, r2
 803cdc2:	6033      	str	r3, [r6, #0]
 803cdc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 803cdc8:	4607      	mov	r7, r0
 803cdca:	460c      	mov	r4, r1
 803cdcc:	b10a      	cbz	r2, 803cdd2 <_printf_common+0x26>
 803cdce:	3301      	adds	r3, #1
 803cdd0:	6033      	str	r3, [r6, #0]
 803cdd2:	6823      	ldr	r3, [r4, #0]
 803cdd4:	0699      	lsls	r1, r3, #26
 803cdd6:	bf42      	ittt	mi
 803cdd8:	6833      	ldrmi	r3, [r6, #0]
 803cdda:	3302      	addmi	r3, #2
 803cddc:	6033      	strmi	r3, [r6, #0]
 803cdde:	6825      	ldr	r5, [r4, #0]
 803cde0:	f015 0506 	ands.w	r5, r5, #6
 803cde4:	d106      	bne.n	803cdf4 <_printf_common+0x48>
 803cde6:	f104 0a19 	add.w	sl, r4, #25
 803cdea:	68e3      	ldr	r3, [r4, #12]
 803cdec:	6832      	ldr	r2, [r6, #0]
 803cdee:	1a9b      	subs	r3, r3, r2
 803cdf0:	42ab      	cmp	r3, r5
 803cdf2:	dc26      	bgt.n	803ce42 <_printf_common+0x96>
 803cdf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 803cdf8:	6822      	ldr	r2, [r4, #0]
 803cdfa:	3b00      	subs	r3, #0
 803cdfc:	bf18      	it	ne
 803cdfe:	2301      	movne	r3, #1
 803ce00:	0692      	lsls	r2, r2, #26
 803ce02:	d42b      	bmi.n	803ce5c <_printf_common+0xb0>
 803ce04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 803ce08:	4641      	mov	r1, r8
 803ce0a:	4638      	mov	r0, r7
 803ce0c:	47c8      	blx	r9
 803ce0e:	3001      	adds	r0, #1
 803ce10:	d01e      	beq.n	803ce50 <_printf_common+0xa4>
 803ce12:	6823      	ldr	r3, [r4, #0]
 803ce14:	6922      	ldr	r2, [r4, #16]
 803ce16:	f003 0306 	and.w	r3, r3, #6
 803ce1a:	2b04      	cmp	r3, #4
 803ce1c:	bf02      	ittt	eq
 803ce1e:	68e5      	ldreq	r5, [r4, #12]
 803ce20:	6833      	ldreq	r3, [r6, #0]
 803ce22:	1aed      	subeq	r5, r5, r3
 803ce24:	68a3      	ldr	r3, [r4, #8]
 803ce26:	bf0c      	ite	eq
 803ce28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803ce2c:	2500      	movne	r5, #0
 803ce2e:	4293      	cmp	r3, r2
 803ce30:	bfc4      	itt	gt
 803ce32:	1a9b      	subgt	r3, r3, r2
 803ce34:	18ed      	addgt	r5, r5, r3
 803ce36:	2600      	movs	r6, #0
 803ce38:	341a      	adds	r4, #26
 803ce3a:	42b5      	cmp	r5, r6
 803ce3c:	d11a      	bne.n	803ce74 <_printf_common+0xc8>
 803ce3e:	2000      	movs	r0, #0
 803ce40:	e008      	b.n	803ce54 <_printf_common+0xa8>
 803ce42:	2301      	movs	r3, #1
 803ce44:	4652      	mov	r2, sl
 803ce46:	4641      	mov	r1, r8
 803ce48:	4638      	mov	r0, r7
 803ce4a:	47c8      	blx	r9
 803ce4c:	3001      	adds	r0, #1
 803ce4e:	d103      	bne.n	803ce58 <_printf_common+0xac>
 803ce50:	f04f 30ff 	mov.w	r0, #4294967295
 803ce54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803ce58:	3501      	adds	r5, #1
 803ce5a:	e7c6      	b.n	803cdea <_printf_common+0x3e>
 803ce5c:	18e1      	adds	r1, r4, r3
 803ce5e:	1c5a      	adds	r2, r3, #1
 803ce60:	2030      	movs	r0, #48	@ 0x30
 803ce62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 803ce66:	4422      	add	r2, r4
 803ce68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 803ce6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 803ce70:	3302      	adds	r3, #2
 803ce72:	e7c7      	b.n	803ce04 <_printf_common+0x58>
 803ce74:	2301      	movs	r3, #1
 803ce76:	4622      	mov	r2, r4
 803ce78:	4641      	mov	r1, r8
 803ce7a:	4638      	mov	r0, r7
 803ce7c:	47c8      	blx	r9
 803ce7e:	3001      	adds	r0, #1
 803ce80:	d0e6      	beq.n	803ce50 <_printf_common+0xa4>
 803ce82:	3601      	adds	r6, #1
 803ce84:	e7d9      	b.n	803ce3a <_printf_common+0x8e>
	...

0803ce88 <_printf_i>:
 803ce88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803ce8c:	7e0f      	ldrb	r7, [r1, #24]
 803ce8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 803ce90:	2f78      	cmp	r7, #120	@ 0x78
 803ce92:	4691      	mov	r9, r2
 803ce94:	4680      	mov	r8, r0
 803ce96:	460c      	mov	r4, r1
 803ce98:	469a      	mov	sl, r3
 803ce9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 803ce9e:	d807      	bhi.n	803ceb0 <_printf_i+0x28>
 803cea0:	2f62      	cmp	r7, #98	@ 0x62
 803cea2:	d80a      	bhi.n	803ceba <_printf_i+0x32>
 803cea4:	2f00      	cmp	r7, #0
 803cea6:	f000 80d1 	beq.w	803d04c <_printf_i+0x1c4>
 803ceaa:	2f58      	cmp	r7, #88	@ 0x58
 803ceac:	f000 80b8 	beq.w	803d020 <_printf_i+0x198>
 803ceb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 803ceb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 803ceb8:	e03a      	b.n	803cf30 <_printf_i+0xa8>
 803ceba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 803cebe:	2b15      	cmp	r3, #21
 803cec0:	d8f6      	bhi.n	803ceb0 <_printf_i+0x28>
 803cec2:	a101      	add	r1, pc, #4	@ (adr r1, 803cec8 <_printf_i+0x40>)
 803cec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 803cec8:	0803cf21 	.word	0x0803cf21
 803cecc:	0803cf35 	.word	0x0803cf35
 803ced0:	0803ceb1 	.word	0x0803ceb1
 803ced4:	0803ceb1 	.word	0x0803ceb1
 803ced8:	0803ceb1 	.word	0x0803ceb1
 803cedc:	0803ceb1 	.word	0x0803ceb1
 803cee0:	0803cf35 	.word	0x0803cf35
 803cee4:	0803ceb1 	.word	0x0803ceb1
 803cee8:	0803ceb1 	.word	0x0803ceb1
 803ceec:	0803ceb1 	.word	0x0803ceb1
 803cef0:	0803ceb1 	.word	0x0803ceb1
 803cef4:	0803d033 	.word	0x0803d033
 803cef8:	0803cf5f 	.word	0x0803cf5f
 803cefc:	0803cfed 	.word	0x0803cfed
 803cf00:	0803ceb1 	.word	0x0803ceb1
 803cf04:	0803ceb1 	.word	0x0803ceb1
 803cf08:	0803d055 	.word	0x0803d055
 803cf0c:	0803ceb1 	.word	0x0803ceb1
 803cf10:	0803cf5f 	.word	0x0803cf5f
 803cf14:	0803ceb1 	.word	0x0803ceb1
 803cf18:	0803ceb1 	.word	0x0803ceb1
 803cf1c:	0803cff5 	.word	0x0803cff5
 803cf20:	6833      	ldr	r3, [r6, #0]
 803cf22:	1d1a      	adds	r2, r3, #4
 803cf24:	681b      	ldr	r3, [r3, #0]
 803cf26:	6032      	str	r2, [r6, #0]
 803cf28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 803cf2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 803cf30:	2301      	movs	r3, #1
 803cf32:	e09c      	b.n	803d06e <_printf_i+0x1e6>
 803cf34:	6833      	ldr	r3, [r6, #0]
 803cf36:	6820      	ldr	r0, [r4, #0]
 803cf38:	1d19      	adds	r1, r3, #4
 803cf3a:	6031      	str	r1, [r6, #0]
 803cf3c:	0606      	lsls	r6, r0, #24
 803cf3e:	d501      	bpl.n	803cf44 <_printf_i+0xbc>
 803cf40:	681d      	ldr	r5, [r3, #0]
 803cf42:	e003      	b.n	803cf4c <_printf_i+0xc4>
 803cf44:	0645      	lsls	r5, r0, #25
 803cf46:	d5fb      	bpl.n	803cf40 <_printf_i+0xb8>
 803cf48:	f9b3 5000 	ldrsh.w	r5, [r3]
 803cf4c:	2d00      	cmp	r5, #0
 803cf4e:	da03      	bge.n	803cf58 <_printf_i+0xd0>
 803cf50:	232d      	movs	r3, #45	@ 0x2d
 803cf52:	426d      	negs	r5, r5
 803cf54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803cf58:	4858      	ldr	r0, [pc, #352]	@ (803d0bc <_printf_i+0x234>)
 803cf5a:	230a      	movs	r3, #10
 803cf5c:	e011      	b.n	803cf82 <_printf_i+0xfa>
 803cf5e:	6821      	ldr	r1, [r4, #0]
 803cf60:	6833      	ldr	r3, [r6, #0]
 803cf62:	0608      	lsls	r0, r1, #24
 803cf64:	f853 5b04 	ldr.w	r5, [r3], #4
 803cf68:	d402      	bmi.n	803cf70 <_printf_i+0xe8>
 803cf6a:	0649      	lsls	r1, r1, #25
 803cf6c:	bf48      	it	mi
 803cf6e:	b2ad      	uxthmi	r5, r5
 803cf70:	2f6f      	cmp	r7, #111	@ 0x6f
 803cf72:	4852      	ldr	r0, [pc, #328]	@ (803d0bc <_printf_i+0x234>)
 803cf74:	6033      	str	r3, [r6, #0]
 803cf76:	bf14      	ite	ne
 803cf78:	230a      	movne	r3, #10
 803cf7a:	2308      	moveq	r3, #8
 803cf7c:	2100      	movs	r1, #0
 803cf7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 803cf82:	6866      	ldr	r6, [r4, #4]
 803cf84:	60a6      	str	r6, [r4, #8]
 803cf86:	2e00      	cmp	r6, #0
 803cf88:	db05      	blt.n	803cf96 <_printf_i+0x10e>
 803cf8a:	6821      	ldr	r1, [r4, #0]
 803cf8c:	432e      	orrs	r6, r5
 803cf8e:	f021 0104 	bic.w	r1, r1, #4
 803cf92:	6021      	str	r1, [r4, #0]
 803cf94:	d04b      	beq.n	803d02e <_printf_i+0x1a6>
 803cf96:	4616      	mov	r6, r2
 803cf98:	fbb5 f1f3 	udiv	r1, r5, r3
 803cf9c:	fb03 5711 	mls	r7, r3, r1, r5
 803cfa0:	5dc7      	ldrb	r7, [r0, r7]
 803cfa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 803cfa6:	462f      	mov	r7, r5
 803cfa8:	42bb      	cmp	r3, r7
 803cfaa:	460d      	mov	r5, r1
 803cfac:	d9f4      	bls.n	803cf98 <_printf_i+0x110>
 803cfae:	2b08      	cmp	r3, #8
 803cfb0:	d10b      	bne.n	803cfca <_printf_i+0x142>
 803cfb2:	6823      	ldr	r3, [r4, #0]
 803cfb4:	07df      	lsls	r7, r3, #31
 803cfb6:	d508      	bpl.n	803cfca <_printf_i+0x142>
 803cfb8:	6923      	ldr	r3, [r4, #16]
 803cfba:	6861      	ldr	r1, [r4, #4]
 803cfbc:	4299      	cmp	r1, r3
 803cfbe:	bfde      	ittt	le
 803cfc0:	2330      	movle	r3, #48	@ 0x30
 803cfc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 803cfc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 803cfca:	1b92      	subs	r2, r2, r6
 803cfcc:	6122      	str	r2, [r4, #16]
 803cfce:	f8cd a000 	str.w	sl, [sp]
 803cfd2:	464b      	mov	r3, r9
 803cfd4:	aa03      	add	r2, sp, #12
 803cfd6:	4621      	mov	r1, r4
 803cfd8:	4640      	mov	r0, r8
 803cfda:	f7ff fee7 	bl	803cdac <_printf_common>
 803cfde:	3001      	adds	r0, #1
 803cfe0:	d14a      	bne.n	803d078 <_printf_i+0x1f0>
 803cfe2:	f04f 30ff 	mov.w	r0, #4294967295
 803cfe6:	b004      	add	sp, #16
 803cfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803cfec:	6823      	ldr	r3, [r4, #0]
 803cfee:	f043 0320 	orr.w	r3, r3, #32
 803cff2:	6023      	str	r3, [r4, #0]
 803cff4:	4832      	ldr	r0, [pc, #200]	@ (803d0c0 <_printf_i+0x238>)
 803cff6:	2778      	movs	r7, #120	@ 0x78
 803cff8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 803cffc:	6823      	ldr	r3, [r4, #0]
 803cffe:	6831      	ldr	r1, [r6, #0]
 803d000:	061f      	lsls	r7, r3, #24
 803d002:	f851 5b04 	ldr.w	r5, [r1], #4
 803d006:	d402      	bmi.n	803d00e <_printf_i+0x186>
 803d008:	065f      	lsls	r7, r3, #25
 803d00a:	bf48      	it	mi
 803d00c:	b2ad      	uxthmi	r5, r5
 803d00e:	6031      	str	r1, [r6, #0]
 803d010:	07d9      	lsls	r1, r3, #31
 803d012:	bf44      	itt	mi
 803d014:	f043 0320 	orrmi.w	r3, r3, #32
 803d018:	6023      	strmi	r3, [r4, #0]
 803d01a:	b11d      	cbz	r5, 803d024 <_printf_i+0x19c>
 803d01c:	2310      	movs	r3, #16
 803d01e:	e7ad      	b.n	803cf7c <_printf_i+0xf4>
 803d020:	4826      	ldr	r0, [pc, #152]	@ (803d0bc <_printf_i+0x234>)
 803d022:	e7e9      	b.n	803cff8 <_printf_i+0x170>
 803d024:	6823      	ldr	r3, [r4, #0]
 803d026:	f023 0320 	bic.w	r3, r3, #32
 803d02a:	6023      	str	r3, [r4, #0]
 803d02c:	e7f6      	b.n	803d01c <_printf_i+0x194>
 803d02e:	4616      	mov	r6, r2
 803d030:	e7bd      	b.n	803cfae <_printf_i+0x126>
 803d032:	6833      	ldr	r3, [r6, #0]
 803d034:	6825      	ldr	r5, [r4, #0]
 803d036:	6961      	ldr	r1, [r4, #20]
 803d038:	1d18      	adds	r0, r3, #4
 803d03a:	6030      	str	r0, [r6, #0]
 803d03c:	062e      	lsls	r6, r5, #24
 803d03e:	681b      	ldr	r3, [r3, #0]
 803d040:	d501      	bpl.n	803d046 <_printf_i+0x1be>
 803d042:	6019      	str	r1, [r3, #0]
 803d044:	e002      	b.n	803d04c <_printf_i+0x1c4>
 803d046:	0668      	lsls	r0, r5, #25
 803d048:	d5fb      	bpl.n	803d042 <_printf_i+0x1ba>
 803d04a:	8019      	strh	r1, [r3, #0]
 803d04c:	2300      	movs	r3, #0
 803d04e:	6123      	str	r3, [r4, #16]
 803d050:	4616      	mov	r6, r2
 803d052:	e7bc      	b.n	803cfce <_printf_i+0x146>
 803d054:	6833      	ldr	r3, [r6, #0]
 803d056:	1d1a      	adds	r2, r3, #4
 803d058:	6032      	str	r2, [r6, #0]
 803d05a:	681e      	ldr	r6, [r3, #0]
 803d05c:	6862      	ldr	r2, [r4, #4]
 803d05e:	2100      	movs	r1, #0
 803d060:	4630      	mov	r0, r6
 803d062:	f7d8 f9dd 	bl	8015420 <memchr>
 803d066:	b108      	cbz	r0, 803d06c <_printf_i+0x1e4>
 803d068:	1b80      	subs	r0, r0, r6
 803d06a:	6060      	str	r0, [r4, #4]
 803d06c:	6863      	ldr	r3, [r4, #4]
 803d06e:	6123      	str	r3, [r4, #16]
 803d070:	2300      	movs	r3, #0
 803d072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 803d076:	e7aa      	b.n	803cfce <_printf_i+0x146>
 803d078:	6923      	ldr	r3, [r4, #16]
 803d07a:	4632      	mov	r2, r6
 803d07c:	4649      	mov	r1, r9
 803d07e:	4640      	mov	r0, r8
 803d080:	47d0      	blx	sl
 803d082:	3001      	adds	r0, #1
 803d084:	d0ad      	beq.n	803cfe2 <_printf_i+0x15a>
 803d086:	6823      	ldr	r3, [r4, #0]
 803d088:	079b      	lsls	r3, r3, #30
 803d08a:	d413      	bmi.n	803d0b4 <_printf_i+0x22c>
 803d08c:	68e0      	ldr	r0, [r4, #12]
 803d08e:	9b03      	ldr	r3, [sp, #12]
 803d090:	4298      	cmp	r0, r3
 803d092:	bfb8      	it	lt
 803d094:	4618      	movlt	r0, r3
 803d096:	e7a6      	b.n	803cfe6 <_printf_i+0x15e>
 803d098:	2301      	movs	r3, #1
 803d09a:	4632      	mov	r2, r6
 803d09c:	4649      	mov	r1, r9
 803d09e:	4640      	mov	r0, r8
 803d0a0:	47d0      	blx	sl
 803d0a2:	3001      	adds	r0, #1
 803d0a4:	d09d      	beq.n	803cfe2 <_printf_i+0x15a>
 803d0a6:	3501      	adds	r5, #1
 803d0a8:	68e3      	ldr	r3, [r4, #12]
 803d0aa:	9903      	ldr	r1, [sp, #12]
 803d0ac:	1a5b      	subs	r3, r3, r1
 803d0ae:	42ab      	cmp	r3, r5
 803d0b0:	dcf2      	bgt.n	803d098 <_printf_i+0x210>
 803d0b2:	e7eb      	b.n	803d08c <_printf_i+0x204>
 803d0b4:	2500      	movs	r5, #0
 803d0b6:	f104 0619 	add.w	r6, r4, #25
 803d0ba:	e7f5      	b.n	803d0a8 <_printf_i+0x220>
 803d0bc:	08041bb5 	.word	0x08041bb5
 803d0c0:	08041bc6 	.word	0x08041bc6

0803d0c4 <std>:
 803d0c4:	2300      	movs	r3, #0
 803d0c6:	b510      	push	{r4, lr}
 803d0c8:	4604      	mov	r4, r0
 803d0ca:	e9c0 3300 	strd	r3, r3, [r0]
 803d0ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803d0d2:	6083      	str	r3, [r0, #8]
 803d0d4:	8181      	strh	r1, [r0, #12]
 803d0d6:	6643      	str	r3, [r0, #100]	@ 0x64
 803d0d8:	81c2      	strh	r2, [r0, #14]
 803d0da:	6183      	str	r3, [r0, #24]
 803d0dc:	4619      	mov	r1, r3
 803d0de:	2208      	movs	r2, #8
 803d0e0:	305c      	adds	r0, #92	@ 0x5c
 803d0e2:	f000 f9df 	bl	803d4a4 <memset>
 803d0e6:	4b0d      	ldr	r3, [pc, #52]	@ (803d11c <std+0x58>)
 803d0e8:	6263      	str	r3, [r4, #36]	@ 0x24
 803d0ea:	4b0d      	ldr	r3, [pc, #52]	@ (803d120 <std+0x5c>)
 803d0ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 803d0ee:	4b0d      	ldr	r3, [pc, #52]	@ (803d124 <std+0x60>)
 803d0f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 803d0f2:	4b0d      	ldr	r3, [pc, #52]	@ (803d128 <std+0x64>)
 803d0f4:	6323      	str	r3, [r4, #48]	@ 0x30
 803d0f6:	4b0d      	ldr	r3, [pc, #52]	@ (803d12c <std+0x68>)
 803d0f8:	6224      	str	r4, [r4, #32]
 803d0fa:	429c      	cmp	r4, r3
 803d0fc:	d006      	beq.n	803d10c <std+0x48>
 803d0fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 803d102:	4294      	cmp	r4, r2
 803d104:	d002      	beq.n	803d10c <std+0x48>
 803d106:	33d0      	adds	r3, #208	@ 0xd0
 803d108:	429c      	cmp	r4, r3
 803d10a:	d105      	bne.n	803d118 <std+0x54>
 803d10c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 803d110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803d114:	f7da bf42 	b.w	8017f9c <__retarget_lock_init_recursive>
 803d118:	bd10      	pop	{r4, pc}
 803d11a:	bf00      	nop
 803d11c:	0803d2d5 	.word	0x0803d2d5
 803d120:	0803d2f7 	.word	0x0803d2f7
 803d124:	0803d32f 	.word	0x0803d32f
 803d128:	0803d353 	.word	0x0803d353
 803d12c:	2000b994 	.word	0x2000b994

0803d130 <stdio_exit_handler>:
 803d130:	4a02      	ldr	r2, [pc, #8]	@ (803d13c <stdio_exit_handler+0xc>)
 803d132:	4903      	ldr	r1, [pc, #12]	@ (803d140 <stdio_exit_handler+0x10>)
 803d134:	4803      	ldr	r0, [pc, #12]	@ (803d144 <stdio_exit_handler+0x14>)
 803d136:	f000 b87b 	b.w	803d230 <_fwalk_sglue>
 803d13a:	bf00      	nop
 803d13c:	200007e8 	.word	0x200007e8
 803d140:	0803f36d 	.word	0x0803f36d
 803d144:	200007f8 	.word	0x200007f8

0803d148 <cleanup_stdio>:
 803d148:	6841      	ldr	r1, [r0, #4]
 803d14a:	4b0c      	ldr	r3, [pc, #48]	@ (803d17c <cleanup_stdio+0x34>)
 803d14c:	4299      	cmp	r1, r3
 803d14e:	b510      	push	{r4, lr}
 803d150:	4604      	mov	r4, r0
 803d152:	d001      	beq.n	803d158 <cleanup_stdio+0x10>
 803d154:	f002 f90a 	bl	803f36c <_fflush_r>
 803d158:	68a1      	ldr	r1, [r4, #8]
 803d15a:	4b09      	ldr	r3, [pc, #36]	@ (803d180 <cleanup_stdio+0x38>)
 803d15c:	4299      	cmp	r1, r3
 803d15e:	d002      	beq.n	803d166 <cleanup_stdio+0x1e>
 803d160:	4620      	mov	r0, r4
 803d162:	f002 f903 	bl	803f36c <_fflush_r>
 803d166:	68e1      	ldr	r1, [r4, #12]
 803d168:	4b06      	ldr	r3, [pc, #24]	@ (803d184 <cleanup_stdio+0x3c>)
 803d16a:	4299      	cmp	r1, r3
 803d16c:	d004      	beq.n	803d178 <cleanup_stdio+0x30>
 803d16e:	4620      	mov	r0, r4
 803d170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803d174:	f002 b8fa 	b.w	803f36c <_fflush_r>
 803d178:	bd10      	pop	{r4, pc}
 803d17a:	bf00      	nop
 803d17c:	2000b994 	.word	0x2000b994
 803d180:	2000b9fc 	.word	0x2000b9fc
 803d184:	2000ba64 	.word	0x2000ba64

0803d188 <global_stdio_init.part.0>:
 803d188:	b510      	push	{r4, lr}
 803d18a:	4b0b      	ldr	r3, [pc, #44]	@ (803d1b8 <global_stdio_init.part.0+0x30>)
 803d18c:	4c0b      	ldr	r4, [pc, #44]	@ (803d1bc <global_stdio_init.part.0+0x34>)
 803d18e:	4a0c      	ldr	r2, [pc, #48]	@ (803d1c0 <global_stdio_init.part.0+0x38>)
 803d190:	601a      	str	r2, [r3, #0]
 803d192:	4620      	mov	r0, r4
 803d194:	2200      	movs	r2, #0
 803d196:	2104      	movs	r1, #4
 803d198:	f7ff ff94 	bl	803d0c4 <std>
 803d19c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 803d1a0:	2201      	movs	r2, #1
 803d1a2:	2109      	movs	r1, #9
 803d1a4:	f7ff ff8e 	bl	803d0c4 <std>
 803d1a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 803d1ac:	2202      	movs	r2, #2
 803d1ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803d1b2:	2112      	movs	r1, #18
 803d1b4:	f7ff bf86 	b.w	803d0c4 <std>
 803d1b8:	2000bacc 	.word	0x2000bacc
 803d1bc:	2000b994 	.word	0x2000b994
 803d1c0:	0803d131 	.word	0x0803d131

0803d1c4 <__sfp_lock_acquire>:
 803d1c4:	4801      	ldr	r0, [pc, #4]	@ (803d1cc <__sfp_lock_acquire+0x8>)
 803d1c6:	f7da bf05 	b.w	8017fd4 <__retarget_lock_acquire_recursive>
 803d1ca:	bf00      	nop
 803d1cc:	20001d74 	.word	0x20001d74

0803d1d0 <__sfp_lock_release>:
 803d1d0:	4801      	ldr	r0, [pc, #4]	@ (803d1d8 <__sfp_lock_release+0x8>)
 803d1d2:	f7da bf0b 	b.w	8017fec <__retarget_lock_release_recursive>
 803d1d6:	bf00      	nop
 803d1d8:	20001d74 	.word	0x20001d74

0803d1dc <__sinit>:
 803d1dc:	b510      	push	{r4, lr}
 803d1de:	4604      	mov	r4, r0
 803d1e0:	f7ff fff0 	bl	803d1c4 <__sfp_lock_acquire>
 803d1e4:	6a23      	ldr	r3, [r4, #32]
 803d1e6:	b11b      	cbz	r3, 803d1f0 <__sinit+0x14>
 803d1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803d1ec:	f7ff bff0 	b.w	803d1d0 <__sfp_lock_release>
 803d1f0:	4b04      	ldr	r3, [pc, #16]	@ (803d204 <__sinit+0x28>)
 803d1f2:	6223      	str	r3, [r4, #32]
 803d1f4:	4b04      	ldr	r3, [pc, #16]	@ (803d208 <__sinit+0x2c>)
 803d1f6:	681b      	ldr	r3, [r3, #0]
 803d1f8:	2b00      	cmp	r3, #0
 803d1fa:	d1f5      	bne.n	803d1e8 <__sinit+0xc>
 803d1fc:	f7ff ffc4 	bl	803d188 <global_stdio_init.part.0>
 803d200:	e7f2      	b.n	803d1e8 <__sinit+0xc>
 803d202:	bf00      	nop
 803d204:	0803d149 	.word	0x0803d149
 803d208:	2000bacc 	.word	0x2000bacc

0803d20c <fiprintf>:
 803d20c:	b40e      	push	{r1, r2, r3}
 803d20e:	b503      	push	{r0, r1, lr}
 803d210:	4601      	mov	r1, r0
 803d212:	ab03      	add	r3, sp, #12
 803d214:	4805      	ldr	r0, [pc, #20]	@ (803d22c <fiprintf+0x20>)
 803d216:	f853 2b04 	ldr.w	r2, [r3], #4
 803d21a:	6800      	ldr	r0, [r0, #0]
 803d21c:	9301      	str	r3, [sp, #4]
 803d21e:	f001 ff09 	bl	803f034 <_vfiprintf_r>
 803d222:	b002      	add	sp, #8
 803d224:	f85d eb04 	ldr.w	lr, [sp], #4
 803d228:	b003      	add	sp, #12
 803d22a:	4770      	bx	lr
 803d22c:	200007f4 	.word	0x200007f4

0803d230 <_fwalk_sglue>:
 803d230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803d234:	4607      	mov	r7, r0
 803d236:	4688      	mov	r8, r1
 803d238:	4614      	mov	r4, r2
 803d23a:	2600      	movs	r6, #0
 803d23c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803d240:	f1b9 0901 	subs.w	r9, r9, #1
 803d244:	d505      	bpl.n	803d252 <_fwalk_sglue+0x22>
 803d246:	6824      	ldr	r4, [r4, #0]
 803d248:	2c00      	cmp	r4, #0
 803d24a:	d1f7      	bne.n	803d23c <_fwalk_sglue+0xc>
 803d24c:	4630      	mov	r0, r6
 803d24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803d252:	89ab      	ldrh	r3, [r5, #12]
 803d254:	2b01      	cmp	r3, #1
 803d256:	d907      	bls.n	803d268 <_fwalk_sglue+0x38>
 803d258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803d25c:	3301      	adds	r3, #1
 803d25e:	d003      	beq.n	803d268 <_fwalk_sglue+0x38>
 803d260:	4629      	mov	r1, r5
 803d262:	4638      	mov	r0, r7
 803d264:	47c0      	blx	r8
 803d266:	4306      	orrs	r6, r0
 803d268:	3568      	adds	r5, #104	@ 0x68
 803d26a:	e7e9      	b.n	803d240 <_fwalk_sglue+0x10>

0803d26c <iprintf>:
 803d26c:	b40f      	push	{r0, r1, r2, r3}
 803d26e:	b507      	push	{r0, r1, r2, lr}
 803d270:	4906      	ldr	r1, [pc, #24]	@ (803d28c <iprintf+0x20>)
 803d272:	ab04      	add	r3, sp, #16
 803d274:	6808      	ldr	r0, [r1, #0]
 803d276:	f853 2b04 	ldr.w	r2, [r3], #4
 803d27a:	6881      	ldr	r1, [r0, #8]
 803d27c:	9301      	str	r3, [sp, #4]
 803d27e:	f001 fed9 	bl	803f034 <_vfiprintf_r>
 803d282:	b003      	add	sp, #12
 803d284:	f85d eb04 	ldr.w	lr, [sp], #4
 803d288:	b004      	add	sp, #16
 803d28a:	4770      	bx	lr
 803d28c:	200007f4 	.word	0x200007f4

0803d290 <siprintf>:
 803d290:	b40e      	push	{r1, r2, r3}
 803d292:	b510      	push	{r4, lr}
 803d294:	b09d      	sub	sp, #116	@ 0x74
 803d296:	ab1f      	add	r3, sp, #124	@ 0x7c
 803d298:	9002      	str	r0, [sp, #8]
 803d29a:	9006      	str	r0, [sp, #24]
 803d29c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 803d2a0:	480a      	ldr	r0, [pc, #40]	@ (803d2cc <siprintf+0x3c>)
 803d2a2:	9107      	str	r1, [sp, #28]
 803d2a4:	9104      	str	r1, [sp, #16]
 803d2a6:	490a      	ldr	r1, [pc, #40]	@ (803d2d0 <siprintf+0x40>)
 803d2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 803d2ac:	9105      	str	r1, [sp, #20]
 803d2ae:	2400      	movs	r4, #0
 803d2b0:	a902      	add	r1, sp, #8
 803d2b2:	6800      	ldr	r0, [r0, #0]
 803d2b4:	9301      	str	r3, [sp, #4]
 803d2b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 803d2b8:	f001 fd96 	bl	803ede8 <_svfiprintf_r>
 803d2bc:	9b02      	ldr	r3, [sp, #8]
 803d2be:	701c      	strb	r4, [r3, #0]
 803d2c0:	b01d      	add	sp, #116	@ 0x74
 803d2c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803d2c6:	b003      	add	sp, #12
 803d2c8:	4770      	bx	lr
 803d2ca:	bf00      	nop
 803d2cc:	200007f4 	.word	0x200007f4
 803d2d0:	ffff0208 	.word	0xffff0208

0803d2d4 <__sread>:
 803d2d4:	b510      	push	{r4, lr}
 803d2d6:	460c      	mov	r4, r1
 803d2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803d2dc:	f000 fa28 	bl	803d730 <_read_r>
 803d2e0:	2800      	cmp	r0, #0
 803d2e2:	bfab      	itete	ge
 803d2e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 803d2e6:	89a3      	ldrhlt	r3, [r4, #12]
 803d2e8:	181b      	addge	r3, r3, r0
 803d2ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 803d2ee:	bfac      	ite	ge
 803d2f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 803d2f2:	81a3      	strhlt	r3, [r4, #12]
 803d2f4:	bd10      	pop	{r4, pc}

0803d2f6 <__swrite>:
 803d2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803d2fa:	461f      	mov	r7, r3
 803d2fc:	898b      	ldrh	r3, [r1, #12]
 803d2fe:	05db      	lsls	r3, r3, #23
 803d300:	4605      	mov	r5, r0
 803d302:	460c      	mov	r4, r1
 803d304:	4616      	mov	r6, r2
 803d306:	d505      	bpl.n	803d314 <__swrite+0x1e>
 803d308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803d30c:	2302      	movs	r3, #2
 803d30e:	2200      	movs	r2, #0
 803d310:	f000 f9fc 	bl	803d70c <_lseek_r>
 803d314:	89a3      	ldrh	r3, [r4, #12]
 803d316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803d31a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 803d31e:	81a3      	strh	r3, [r4, #12]
 803d320:	4632      	mov	r2, r6
 803d322:	463b      	mov	r3, r7
 803d324:	4628      	mov	r0, r5
 803d326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803d32a:	f000 ba37 	b.w	803d79c <_write_r>

0803d32e <__sseek>:
 803d32e:	b510      	push	{r4, lr}
 803d330:	460c      	mov	r4, r1
 803d332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803d336:	f000 f9e9 	bl	803d70c <_lseek_r>
 803d33a:	1c43      	adds	r3, r0, #1
 803d33c:	89a3      	ldrh	r3, [r4, #12]
 803d33e:	bf15      	itete	ne
 803d340:	6560      	strne	r0, [r4, #84]	@ 0x54
 803d342:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 803d346:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 803d34a:	81a3      	strheq	r3, [r4, #12]
 803d34c:	bf18      	it	ne
 803d34e:	81a3      	strhne	r3, [r4, #12]
 803d350:	bd10      	pop	{r4, pc}

0803d352 <__sclose>:
 803d352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803d356:	f000 b96b 	b.w	803d630 <_close_r>

0803d35a <__swbuf_r>:
 803d35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d35c:	460e      	mov	r6, r1
 803d35e:	4614      	mov	r4, r2
 803d360:	4605      	mov	r5, r0
 803d362:	b118      	cbz	r0, 803d36c <__swbuf_r+0x12>
 803d364:	6a03      	ldr	r3, [r0, #32]
 803d366:	b90b      	cbnz	r3, 803d36c <__swbuf_r+0x12>
 803d368:	f7ff ff38 	bl	803d1dc <__sinit>
 803d36c:	69a3      	ldr	r3, [r4, #24]
 803d36e:	60a3      	str	r3, [r4, #8]
 803d370:	89a3      	ldrh	r3, [r4, #12]
 803d372:	071a      	lsls	r2, r3, #28
 803d374:	d501      	bpl.n	803d37a <__swbuf_r+0x20>
 803d376:	6923      	ldr	r3, [r4, #16]
 803d378:	b943      	cbnz	r3, 803d38c <__swbuf_r+0x32>
 803d37a:	4621      	mov	r1, r4
 803d37c:	4628      	mov	r0, r5
 803d37e:	f000 f82b 	bl	803d3d8 <__swsetup_r>
 803d382:	b118      	cbz	r0, 803d38c <__swbuf_r+0x32>
 803d384:	f04f 37ff 	mov.w	r7, #4294967295
 803d388:	4638      	mov	r0, r7
 803d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803d38c:	6823      	ldr	r3, [r4, #0]
 803d38e:	6922      	ldr	r2, [r4, #16]
 803d390:	1a98      	subs	r0, r3, r2
 803d392:	6963      	ldr	r3, [r4, #20]
 803d394:	b2f6      	uxtb	r6, r6
 803d396:	4283      	cmp	r3, r0
 803d398:	4637      	mov	r7, r6
 803d39a:	dc05      	bgt.n	803d3a8 <__swbuf_r+0x4e>
 803d39c:	4621      	mov	r1, r4
 803d39e:	4628      	mov	r0, r5
 803d3a0:	f001 ffe4 	bl	803f36c <_fflush_r>
 803d3a4:	2800      	cmp	r0, #0
 803d3a6:	d1ed      	bne.n	803d384 <__swbuf_r+0x2a>
 803d3a8:	68a3      	ldr	r3, [r4, #8]
 803d3aa:	3b01      	subs	r3, #1
 803d3ac:	60a3      	str	r3, [r4, #8]
 803d3ae:	6823      	ldr	r3, [r4, #0]
 803d3b0:	1c5a      	adds	r2, r3, #1
 803d3b2:	6022      	str	r2, [r4, #0]
 803d3b4:	701e      	strb	r6, [r3, #0]
 803d3b6:	6962      	ldr	r2, [r4, #20]
 803d3b8:	1c43      	adds	r3, r0, #1
 803d3ba:	429a      	cmp	r2, r3
 803d3bc:	d004      	beq.n	803d3c8 <__swbuf_r+0x6e>
 803d3be:	89a3      	ldrh	r3, [r4, #12]
 803d3c0:	07db      	lsls	r3, r3, #31
 803d3c2:	d5e1      	bpl.n	803d388 <__swbuf_r+0x2e>
 803d3c4:	2e0a      	cmp	r6, #10
 803d3c6:	d1df      	bne.n	803d388 <__swbuf_r+0x2e>
 803d3c8:	4621      	mov	r1, r4
 803d3ca:	4628      	mov	r0, r5
 803d3cc:	f001 ffce 	bl	803f36c <_fflush_r>
 803d3d0:	2800      	cmp	r0, #0
 803d3d2:	d0d9      	beq.n	803d388 <__swbuf_r+0x2e>
 803d3d4:	e7d6      	b.n	803d384 <__swbuf_r+0x2a>
	...

0803d3d8 <__swsetup_r>:
 803d3d8:	b538      	push	{r3, r4, r5, lr}
 803d3da:	4b29      	ldr	r3, [pc, #164]	@ (803d480 <__swsetup_r+0xa8>)
 803d3dc:	4605      	mov	r5, r0
 803d3de:	6818      	ldr	r0, [r3, #0]
 803d3e0:	460c      	mov	r4, r1
 803d3e2:	b118      	cbz	r0, 803d3ec <__swsetup_r+0x14>
 803d3e4:	6a03      	ldr	r3, [r0, #32]
 803d3e6:	b90b      	cbnz	r3, 803d3ec <__swsetup_r+0x14>
 803d3e8:	f7ff fef8 	bl	803d1dc <__sinit>
 803d3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803d3f0:	0719      	lsls	r1, r3, #28
 803d3f2:	d422      	bmi.n	803d43a <__swsetup_r+0x62>
 803d3f4:	06da      	lsls	r2, r3, #27
 803d3f6:	d407      	bmi.n	803d408 <__swsetup_r+0x30>
 803d3f8:	2209      	movs	r2, #9
 803d3fa:	602a      	str	r2, [r5, #0]
 803d3fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803d400:	81a3      	strh	r3, [r4, #12]
 803d402:	f04f 30ff 	mov.w	r0, #4294967295
 803d406:	e033      	b.n	803d470 <__swsetup_r+0x98>
 803d408:	0758      	lsls	r0, r3, #29
 803d40a:	d512      	bpl.n	803d432 <__swsetup_r+0x5a>
 803d40c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803d40e:	b141      	cbz	r1, 803d422 <__swsetup_r+0x4a>
 803d410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 803d414:	4299      	cmp	r1, r3
 803d416:	d002      	beq.n	803d41e <__swsetup_r+0x46>
 803d418:	4628      	mov	r0, r5
 803d41a:	f001 f8c5 	bl	803e5a8 <_free_r>
 803d41e:	2300      	movs	r3, #0
 803d420:	6363      	str	r3, [r4, #52]	@ 0x34
 803d422:	89a3      	ldrh	r3, [r4, #12]
 803d424:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 803d428:	81a3      	strh	r3, [r4, #12]
 803d42a:	2300      	movs	r3, #0
 803d42c:	6063      	str	r3, [r4, #4]
 803d42e:	6923      	ldr	r3, [r4, #16]
 803d430:	6023      	str	r3, [r4, #0]
 803d432:	89a3      	ldrh	r3, [r4, #12]
 803d434:	f043 0308 	orr.w	r3, r3, #8
 803d438:	81a3      	strh	r3, [r4, #12]
 803d43a:	6923      	ldr	r3, [r4, #16]
 803d43c:	b94b      	cbnz	r3, 803d452 <__swsetup_r+0x7a>
 803d43e:	89a3      	ldrh	r3, [r4, #12]
 803d440:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 803d444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 803d448:	d003      	beq.n	803d452 <__swsetup_r+0x7a>
 803d44a:	4621      	mov	r1, r4
 803d44c:	4628      	mov	r0, r5
 803d44e:	f001 ffdb 	bl	803f408 <__smakebuf_r>
 803d452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803d456:	f013 0201 	ands.w	r2, r3, #1
 803d45a:	d00a      	beq.n	803d472 <__swsetup_r+0x9a>
 803d45c:	2200      	movs	r2, #0
 803d45e:	60a2      	str	r2, [r4, #8]
 803d460:	6962      	ldr	r2, [r4, #20]
 803d462:	4252      	negs	r2, r2
 803d464:	61a2      	str	r2, [r4, #24]
 803d466:	6922      	ldr	r2, [r4, #16]
 803d468:	b942      	cbnz	r2, 803d47c <__swsetup_r+0xa4>
 803d46a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 803d46e:	d1c5      	bne.n	803d3fc <__swsetup_r+0x24>
 803d470:	bd38      	pop	{r3, r4, r5, pc}
 803d472:	0799      	lsls	r1, r3, #30
 803d474:	bf58      	it	pl
 803d476:	6962      	ldrpl	r2, [r4, #20]
 803d478:	60a2      	str	r2, [r4, #8]
 803d47a:	e7f4      	b.n	803d466 <__swsetup_r+0x8e>
 803d47c:	2000      	movs	r0, #0
 803d47e:	e7f7      	b.n	803d470 <__swsetup_r+0x98>
 803d480:	200007f4 	.word	0x200007f4

0803d484 <memcmp>:
 803d484:	b510      	push	{r4, lr}
 803d486:	3901      	subs	r1, #1
 803d488:	4402      	add	r2, r0
 803d48a:	4290      	cmp	r0, r2
 803d48c:	d101      	bne.n	803d492 <memcmp+0xe>
 803d48e:	2000      	movs	r0, #0
 803d490:	e005      	b.n	803d49e <memcmp+0x1a>
 803d492:	7803      	ldrb	r3, [r0, #0]
 803d494:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 803d498:	42a3      	cmp	r3, r4
 803d49a:	d001      	beq.n	803d4a0 <memcmp+0x1c>
 803d49c:	1b18      	subs	r0, r3, r4
 803d49e:	bd10      	pop	{r4, pc}
 803d4a0:	3001      	adds	r0, #1
 803d4a2:	e7f2      	b.n	803d48a <memcmp+0x6>

0803d4a4 <memset>:
 803d4a4:	4402      	add	r2, r0
 803d4a6:	4603      	mov	r3, r0
 803d4a8:	4293      	cmp	r3, r2
 803d4aa:	d100      	bne.n	803d4ae <memset+0xa>
 803d4ac:	4770      	bx	lr
 803d4ae:	f803 1b01 	strb.w	r1, [r3], #1
 803d4b2:	e7f9      	b.n	803d4a8 <memset+0x4>

0803d4b4 <strchr>:
 803d4b4:	b2c9      	uxtb	r1, r1
 803d4b6:	4603      	mov	r3, r0
 803d4b8:	4618      	mov	r0, r3
 803d4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 803d4be:	b112      	cbz	r2, 803d4c6 <strchr+0x12>
 803d4c0:	428a      	cmp	r2, r1
 803d4c2:	d1f9      	bne.n	803d4b8 <strchr+0x4>
 803d4c4:	4770      	bx	lr
 803d4c6:	2900      	cmp	r1, #0
 803d4c8:	bf18      	it	ne
 803d4ca:	2000      	movne	r0, #0
 803d4cc:	4770      	bx	lr

0803d4ce <strcspn>:
 803d4ce:	b570      	push	{r4, r5, r6, lr}
 803d4d0:	4603      	mov	r3, r0
 803d4d2:	461e      	mov	r6, r3
 803d4d4:	f813 4b01 	ldrb.w	r4, [r3], #1
 803d4d8:	b144      	cbz	r4, 803d4ec <strcspn+0x1e>
 803d4da:	1e4a      	subs	r2, r1, #1
 803d4dc:	e001      	b.n	803d4e2 <strcspn+0x14>
 803d4de:	42a5      	cmp	r5, r4
 803d4e0:	d004      	beq.n	803d4ec <strcspn+0x1e>
 803d4e2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 803d4e6:	2d00      	cmp	r5, #0
 803d4e8:	d1f9      	bne.n	803d4de <strcspn+0x10>
 803d4ea:	e7f2      	b.n	803d4d2 <strcspn+0x4>
 803d4ec:	1a30      	subs	r0, r6, r0
 803d4ee:	bd70      	pop	{r4, r5, r6, pc}

0803d4f0 <strspn>:
 803d4f0:	b570      	push	{r4, r5, r6, lr}
 803d4f2:	4603      	mov	r3, r0
 803d4f4:	461e      	mov	r6, r3
 803d4f6:	f813 4b01 	ldrb.w	r4, [r3], #1
 803d4fa:	b13c      	cbz	r4, 803d50c <strspn+0x1c>
 803d4fc:	1e4a      	subs	r2, r1, #1
 803d4fe:	e001      	b.n	803d504 <strspn+0x14>
 803d500:	42a5      	cmp	r5, r4
 803d502:	d0f7      	beq.n	803d4f4 <strspn+0x4>
 803d504:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 803d508:	2d00      	cmp	r5, #0
 803d50a:	d1f9      	bne.n	803d500 <strspn+0x10>
 803d50c:	1a30      	subs	r0, r6, r0
 803d50e:	bd70      	pop	{r4, r5, r6, pc}

0803d510 <strtok>:
 803d510:	4b16      	ldr	r3, [pc, #88]	@ (803d56c <strtok+0x5c>)
 803d512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803d516:	681f      	ldr	r7, [r3, #0]
 803d518:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 803d51a:	4605      	mov	r5, r0
 803d51c:	460e      	mov	r6, r1
 803d51e:	b9ec      	cbnz	r4, 803d55c <strtok+0x4c>
 803d520:	2050      	movs	r0, #80	@ 0x50
 803d522:	f7ff f829 	bl	803c578 <malloc>
 803d526:	4602      	mov	r2, r0
 803d528:	6478      	str	r0, [r7, #68]	@ 0x44
 803d52a:	b920      	cbnz	r0, 803d536 <strtok+0x26>
 803d52c:	4b10      	ldr	r3, [pc, #64]	@ (803d570 <strtok+0x60>)
 803d52e:	4811      	ldr	r0, [pc, #68]	@ (803d574 <strtok+0x64>)
 803d530:	215b      	movs	r1, #91	@ 0x5b
 803d532:	f7fe fff9 	bl	803c528 <__assert_func>
 803d536:	e9c0 4400 	strd	r4, r4, [r0]
 803d53a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 803d53e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 803d542:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 803d546:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 803d54a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 803d54e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 803d552:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 803d556:	6184      	str	r4, [r0, #24]
 803d558:	7704      	strb	r4, [r0, #28]
 803d55a:	6244      	str	r4, [r0, #36]	@ 0x24
 803d55c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 803d55e:	4631      	mov	r1, r6
 803d560:	4628      	mov	r0, r5
 803d562:	2301      	movs	r3, #1
 803d564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803d568:	f000 b806 	b.w	803d578 <__strtok_r>
 803d56c:	200007f4 	.word	0x200007f4
 803d570:	08041bd7 	.word	0x08041bd7
 803d574:	08041bee 	.word	0x08041bee

0803d578 <__strtok_r>:
 803d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 803d57a:	4604      	mov	r4, r0
 803d57c:	b908      	cbnz	r0, 803d582 <__strtok_r+0xa>
 803d57e:	6814      	ldr	r4, [r2, #0]
 803d580:	b144      	cbz	r4, 803d594 <__strtok_r+0x1c>
 803d582:	4620      	mov	r0, r4
 803d584:	f814 5b01 	ldrb.w	r5, [r4], #1
 803d588:	460f      	mov	r7, r1
 803d58a:	f817 6b01 	ldrb.w	r6, [r7], #1
 803d58e:	b91e      	cbnz	r6, 803d598 <__strtok_r+0x20>
 803d590:	b965      	cbnz	r5, 803d5ac <__strtok_r+0x34>
 803d592:	6015      	str	r5, [r2, #0]
 803d594:	2000      	movs	r0, #0
 803d596:	e005      	b.n	803d5a4 <__strtok_r+0x2c>
 803d598:	42b5      	cmp	r5, r6
 803d59a:	d1f6      	bne.n	803d58a <__strtok_r+0x12>
 803d59c:	2b00      	cmp	r3, #0
 803d59e:	d1f0      	bne.n	803d582 <__strtok_r+0xa>
 803d5a0:	6014      	str	r4, [r2, #0]
 803d5a2:	7003      	strb	r3, [r0, #0]
 803d5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803d5a6:	461c      	mov	r4, r3
 803d5a8:	e00c      	b.n	803d5c4 <__strtok_r+0x4c>
 803d5aa:	b91d      	cbnz	r5, 803d5b4 <__strtok_r+0x3c>
 803d5ac:	4627      	mov	r7, r4
 803d5ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 803d5b2:	460e      	mov	r6, r1
 803d5b4:	f816 5b01 	ldrb.w	r5, [r6], #1
 803d5b8:	42ab      	cmp	r3, r5
 803d5ba:	d1f6      	bne.n	803d5aa <__strtok_r+0x32>
 803d5bc:	2b00      	cmp	r3, #0
 803d5be:	d0f2      	beq.n	803d5a6 <__strtok_r+0x2e>
 803d5c0:	2300      	movs	r3, #0
 803d5c2:	703b      	strb	r3, [r7, #0]
 803d5c4:	6014      	str	r4, [r2, #0]
 803d5c6:	e7ed      	b.n	803d5a4 <__strtok_r+0x2c>

0803d5c8 <_raise_r>:
 803d5c8:	291f      	cmp	r1, #31
 803d5ca:	b538      	push	{r3, r4, r5, lr}
 803d5cc:	4605      	mov	r5, r0
 803d5ce:	460c      	mov	r4, r1
 803d5d0:	d904      	bls.n	803d5dc <_raise_r+0x14>
 803d5d2:	2316      	movs	r3, #22
 803d5d4:	6003      	str	r3, [r0, #0]
 803d5d6:	f04f 30ff 	mov.w	r0, #4294967295
 803d5da:	bd38      	pop	{r3, r4, r5, pc}
 803d5dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 803d5de:	b112      	cbz	r2, 803d5e6 <_raise_r+0x1e>
 803d5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803d5e4:	b94b      	cbnz	r3, 803d5fa <_raise_r+0x32>
 803d5e6:	4628      	mov	r0, r5
 803d5e8:	f000 f8c6 	bl	803d778 <_getpid_r>
 803d5ec:	4622      	mov	r2, r4
 803d5ee:	4601      	mov	r1, r0
 803d5f0:	4628      	mov	r0, r5
 803d5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803d5f6:	f000 b8ad 	b.w	803d754 <_kill_r>
 803d5fa:	2b01      	cmp	r3, #1
 803d5fc:	d00a      	beq.n	803d614 <_raise_r+0x4c>
 803d5fe:	1c59      	adds	r1, r3, #1
 803d600:	d103      	bne.n	803d60a <_raise_r+0x42>
 803d602:	2316      	movs	r3, #22
 803d604:	6003      	str	r3, [r0, #0]
 803d606:	2001      	movs	r0, #1
 803d608:	e7e7      	b.n	803d5da <_raise_r+0x12>
 803d60a:	2100      	movs	r1, #0
 803d60c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 803d610:	4620      	mov	r0, r4
 803d612:	4798      	blx	r3
 803d614:	2000      	movs	r0, #0
 803d616:	e7e0      	b.n	803d5da <_raise_r+0x12>

0803d618 <raise>:
 803d618:	4b02      	ldr	r3, [pc, #8]	@ (803d624 <raise+0xc>)
 803d61a:	4601      	mov	r1, r0
 803d61c:	6818      	ldr	r0, [r3, #0]
 803d61e:	f7ff bfd3 	b.w	803d5c8 <_raise_r>
 803d622:	bf00      	nop
 803d624:	200007f4 	.word	0x200007f4

0803d628 <_localeconv_r>:
 803d628:	4800      	ldr	r0, [pc, #0]	@ (803d62c <_localeconv_r+0x4>)
 803d62a:	4770      	bx	lr
 803d62c:	20000938 	.word	0x20000938

0803d630 <_close_r>:
 803d630:	b538      	push	{r3, r4, r5, lr}
 803d632:	4d06      	ldr	r5, [pc, #24]	@ (803d64c <_close_r+0x1c>)
 803d634:	2300      	movs	r3, #0
 803d636:	4604      	mov	r4, r0
 803d638:	4608      	mov	r0, r1
 803d63a:	602b      	str	r3, [r5, #0]
 803d63c:	f7da fc1e 	bl	8017e7c <_close>
 803d640:	1c43      	adds	r3, r0, #1
 803d642:	d102      	bne.n	803d64a <_close_r+0x1a>
 803d644:	682b      	ldr	r3, [r5, #0]
 803d646:	b103      	cbz	r3, 803d64a <_close_r+0x1a>
 803d648:	6023      	str	r3, [r4, #0]
 803d64a:	bd38      	pop	{r3, r4, r5, pc}
 803d64c:	2000bad0 	.word	0x2000bad0

0803d650 <_reclaim_reent>:
 803d650:	4b2d      	ldr	r3, [pc, #180]	@ (803d708 <_reclaim_reent+0xb8>)
 803d652:	681b      	ldr	r3, [r3, #0]
 803d654:	4283      	cmp	r3, r0
 803d656:	b570      	push	{r4, r5, r6, lr}
 803d658:	4604      	mov	r4, r0
 803d65a:	d053      	beq.n	803d704 <_reclaim_reent+0xb4>
 803d65c:	69c3      	ldr	r3, [r0, #28]
 803d65e:	b31b      	cbz	r3, 803d6a8 <_reclaim_reent+0x58>
 803d660:	68db      	ldr	r3, [r3, #12]
 803d662:	b163      	cbz	r3, 803d67e <_reclaim_reent+0x2e>
 803d664:	2500      	movs	r5, #0
 803d666:	69e3      	ldr	r3, [r4, #28]
 803d668:	68db      	ldr	r3, [r3, #12]
 803d66a:	5959      	ldr	r1, [r3, r5]
 803d66c:	b9b1      	cbnz	r1, 803d69c <_reclaim_reent+0x4c>
 803d66e:	3504      	adds	r5, #4
 803d670:	2d80      	cmp	r5, #128	@ 0x80
 803d672:	d1f8      	bne.n	803d666 <_reclaim_reent+0x16>
 803d674:	69e3      	ldr	r3, [r4, #28]
 803d676:	4620      	mov	r0, r4
 803d678:	68d9      	ldr	r1, [r3, #12]
 803d67a:	f000 ff95 	bl	803e5a8 <_free_r>
 803d67e:	69e3      	ldr	r3, [r4, #28]
 803d680:	6819      	ldr	r1, [r3, #0]
 803d682:	b111      	cbz	r1, 803d68a <_reclaim_reent+0x3a>
 803d684:	4620      	mov	r0, r4
 803d686:	f000 ff8f 	bl	803e5a8 <_free_r>
 803d68a:	69e3      	ldr	r3, [r4, #28]
 803d68c:	689d      	ldr	r5, [r3, #8]
 803d68e:	b15d      	cbz	r5, 803d6a8 <_reclaim_reent+0x58>
 803d690:	4629      	mov	r1, r5
 803d692:	4620      	mov	r0, r4
 803d694:	682d      	ldr	r5, [r5, #0]
 803d696:	f000 ff87 	bl	803e5a8 <_free_r>
 803d69a:	e7f8      	b.n	803d68e <_reclaim_reent+0x3e>
 803d69c:	680e      	ldr	r6, [r1, #0]
 803d69e:	4620      	mov	r0, r4
 803d6a0:	f000 ff82 	bl	803e5a8 <_free_r>
 803d6a4:	4631      	mov	r1, r6
 803d6a6:	e7e1      	b.n	803d66c <_reclaim_reent+0x1c>
 803d6a8:	6961      	ldr	r1, [r4, #20]
 803d6aa:	b111      	cbz	r1, 803d6b2 <_reclaim_reent+0x62>
 803d6ac:	4620      	mov	r0, r4
 803d6ae:	f000 ff7b 	bl	803e5a8 <_free_r>
 803d6b2:	69e1      	ldr	r1, [r4, #28]
 803d6b4:	b111      	cbz	r1, 803d6bc <_reclaim_reent+0x6c>
 803d6b6:	4620      	mov	r0, r4
 803d6b8:	f000 ff76 	bl	803e5a8 <_free_r>
 803d6bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 803d6be:	b111      	cbz	r1, 803d6c6 <_reclaim_reent+0x76>
 803d6c0:	4620      	mov	r0, r4
 803d6c2:	f000 ff71 	bl	803e5a8 <_free_r>
 803d6c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803d6c8:	b111      	cbz	r1, 803d6d0 <_reclaim_reent+0x80>
 803d6ca:	4620      	mov	r0, r4
 803d6cc:	f000 ff6c 	bl	803e5a8 <_free_r>
 803d6d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 803d6d2:	b111      	cbz	r1, 803d6da <_reclaim_reent+0x8a>
 803d6d4:	4620      	mov	r0, r4
 803d6d6:	f000 ff67 	bl	803e5a8 <_free_r>
 803d6da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 803d6dc:	b111      	cbz	r1, 803d6e4 <_reclaim_reent+0x94>
 803d6de:	4620      	mov	r0, r4
 803d6e0:	f000 ff62 	bl	803e5a8 <_free_r>
 803d6e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 803d6e6:	b111      	cbz	r1, 803d6ee <_reclaim_reent+0x9e>
 803d6e8:	4620      	mov	r0, r4
 803d6ea:	f000 ff5d 	bl	803e5a8 <_free_r>
 803d6ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 803d6f0:	b111      	cbz	r1, 803d6f8 <_reclaim_reent+0xa8>
 803d6f2:	4620      	mov	r0, r4
 803d6f4:	f000 ff58 	bl	803e5a8 <_free_r>
 803d6f8:	6a23      	ldr	r3, [r4, #32]
 803d6fa:	b11b      	cbz	r3, 803d704 <_reclaim_reent+0xb4>
 803d6fc:	4620      	mov	r0, r4
 803d6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 803d702:	4718      	bx	r3
 803d704:	bd70      	pop	{r4, r5, r6, pc}
 803d706:	bf00      	nop
 803d708:	200007f4 	.word	0x200007f4

0803d70c <_lseek_r>:
 803d70c:	b538      	push	{r3, r4, r5, lr}
 803d70e:	4d07      	ldr	r5, [pc, #28]	@ (803d72c <_lseek_r+0x20>)
 803d710:	4604      	mov	r4, r0
 803d712:	4608      	mov	r0, r1
 803d714:	4611      	mov	r1, r2
 803d716:	2200      	movs	r2, #0
 803d718:	602a      	str	r2, [r5, #0]
 803d71a:	461a      	mov	r2, r3
 803d71c:	f7da fbb8 	bl	8017e90 <_lseek>
 803d720:	1c43      	adds	r3, r0, #1
 803d722:	d102      	bne.n	803d72a <_lseek_r+0x1e>
 803d724:	682b      	ldr	r3, [r5, #0]
 803d726:	b103      	cbz	r3, 803d72a <_lseek_r+0x1e>
 803d728:	6023      	str	r3, [r4, #0]
 803d72a:	bd38      	pop	{r3, r4, r5, pc}
 803d72c:	2000bad0 	.word	0x2000bad0

0803d730 <_read_r>:
 803d730:	b538      	push	{r3, r4, r5, lr}
 803d732:	4d07      	ldr	r5, [pc, #28]	@ (803d750 <_read_r+0x20>)
 803d734:	4604      	mov	r4, r0
 803d736:	4608      	mov	r0, r1
 803d738:	4611      	mov	r1, r2
 803d73a:	2200      	movs	r2, #0
 803d73c:	602a      	str	r2, [r5, #0]
 803d73e:	461a      	mov	r2, r3
 803d740:	f7da fb80 	bl	8017e44 <_read>
 803d744:	1c43      	adds	r3, r0, #1
 803d746:	d102      	bne.n	803d74e <_read_r+0x1e>
 803d748:	682b      	ldr	r3, [r5, #0]
 803d74a:	b103      	cbz	r3, 803d74e <_read_r+0x1e>
 803d74c:	6023      	str	r3, [r4, #0]
 803d74e:	bd38      	pop	{r3, r4, r5, pc}
 803d750:	2000bad0 	.word	0x2000bad0

0803d754 <_kill_r>:
 803d754:	b538      	push	{r3, r4, r5, lr}
 803d756:	4d07      	ldr	r5, [pc, #28]	@ (803d774 <_kill_r+0x20>)
 803d758:	2300      	movs	r3, #0
 803d75a:	4604      	mov	r4, r0
 803d75c:	4608      	mov	r0, r1
 803d75e:	4611      	mov	r1, r2
 803d760:	602b      	str	r3, [r5, #0]
 803d762:	f7da fb61 	bl	8017e28 <_kill>
 803d766:	1c43      	adds	r3, r0, #1
 803d768:	d102      	bne.n	803d770 <_kill_r+0x1c>
 803d76a:	682b      	ldr	r3, [r5, #0]
 803d76c:	b103      	cbz	r3, 803d770 <_kill_r+0x1c>
 803d76e:	6023      	str	r3, [r4, #0]
 803d770:	bd38      	pop	{r3, r4, r5, pc}
 803d772:	bf00      	nop
 803d774:	2000bad0 	.word	0x2000bad0

0803d778 <_getpid_r>:
 803d778:	f7da bb54 	b.w	8017e24 <_getpid>

0803d77c <_sbrk_r>:
 803d77c:	b538      	push	{r3, r4, r5, lr}
 803d77e:	4d06      	ldr	r5, [pc, #24]	@ (803d798 <_sbrk_r+0x1c>)
 803d780:	2300      	movs	r3, #0
 803d782:	4604      	mov	r4, r0
 803d784:	4608      	mov	r0, r1
 803d786:	602b      	str	r3, [r5, #0]
 803d788:	f7da fb84 	bl	8017e94 <_sbrk>
 803d78c:	1c43      	adds	r3, r0, #1
 803d78e:	d102      	bne.n	803d796 <_sbrk_r+0x1a>
 803d790:	682b      	ldr	r3, [r5, #0]
 803d792:	b103      	cbz	r3, 803d796 <_sbrk_r+0x1a>
 803d794:	6023      	str	r3, [r4, #0]
 803d796:	bd38      	pop	{r3, r4, r5, pc}
 803d798:	2000bad0 	.word	0x2000bad0

0803d79c <_write_r>:
 803d79c:	b538      	push	{r3, r4, r5, lr}
 803d79e:	4d07      	ldr	r5, [pc, #28]	@ (803d7bc <_write_r+0x20>)
 803d7a0:	4604      	mov	r4, r0
 803d7a2:	4608      	mov	r0, r1
 803d7a4:	4611      	mov	r1, r2
 803d7a6:	2200      	movs	r2, #0
 803d7a8:	602a      	str	r2, [r5, #0]
 803d7aa:	461a      	mov	r2, r3
 803d7ac:	f7da fb58 	bl	8017e60 <_write>
 803d7b0:	1c43      	adds	r3, r0, #1
 803d7b2:	d102      	bne.n	803d7ba <_write_r+0x1e>
 803d7b4:	682b      	ldr	r3, [r5, #0]
 803d7b6:	b103      	cbz	r3, 803d7ba <_write_r+0x1e>
 803d7b8:	6023      	str	r3, [r4, #0]
 803d7ba:	bd38      	pop	{r3, r4, r5, pc}
 803d7bc:	2000bad0 	.word	0x2000bad0

0803d7c0 <__errno>:
 803d7c0:	4b01      	ldr	r3, [pc, #4]	@ (803d7c8 <__errno+0x8>)
 803d7c2:	6818      	ldr	r0, [r3, #0]
 803d7c4:	4770      	bx	lr
 803d7c6:	bf00      	nop
 803d7c8:	200007f4 	.word	0x200007f4

0803d7cc <__libc_init_array>:
 803d7cc:	b570      	push	{r4, r5, r6, lr}
 803d7ce:	4d0d      	ldr	r5, [pc, #52]	@ (803d804 <__libc_init_array+0x38>)
 803d7d0:	4c0d      	ldr	r4, [pc, #52]	@ (803d808 <__libc_init_array+0x3c>)
 803d7d2:	1b64      	subs	r4, r4, r5
 803d7d4:	10a4      	asrs	r4, r4, #2
 803d7d6:	2600      	movs	r6, #0
 803d7d8:	42a6      	cmp	r6, r4
 803d7da:	d109      	bne.n	803d7f0 <__libc_init_array+0x24>
 803d7dc:	4d0b      	ldr	r5, [pc, #44]	@ (803d80c <__libc_init_array+0x40>)
 803d7de:	4c0c      	ldr	r4, [pc, #48]	@ (803d810 <__libc_init_array+0x44>)
 803d7e0:	f001 fef4 	bl	803f5cc <_init>
 803d7e4:	1b64      	subs	r4, r4, r5
 803d7e6:	10a4      	asrs	r4, r4, #2
 803d7e8:	2600      	movs	r6, #0
 803d7ea:	42a6      	cmp	r6, r4
 803d7ec:	d105      	bne.n	803d7fa <__libc_init_array+0x2e>
 803d7ee:	bd70      	pop	{r4, r5, r6, pc}
 803d7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 803d7f4:	4798      	blx	r3
 803d7f6:	3601      	adds	r6, #1
 803d7f8:	e7ee      	b.n	803d7d8 <__libc_init_array+0xc>
 803d7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 803d7fe:	4798      	blx	r3
 803d800:	3601      	adds	r6, #1
 803d802:	e7f2      	b.n	803d7ea <__libc_init_array+0x1e>
 803d804:	081b5d4c 	.word	0x081b5d4c
 803d808:	081b5d4c 	.word	0x081b5d4c
 803d80c:	081b5d4c 	.word	0x081b5d4c
 803d810:	081b5d60 	.word	0x081b5d60

0803d814 <strcpy>:
 803d814:	4603      	mov	r3, r0
 803d816:	f811 2b01 	ldrb.w	r2, [r1], #1
 803d81a:	f803 2b01 	strb.w	r2, [r3], #1
 803d81e:	2a00      	cmp	r2, #0
 803d820:	d1f9      	bne.n	803d816 <strcpy+0x2>
 803d822:	4770      	bx	lr

0803d824 <memcpy>:
 803d824:	440a      	add	r2, r1
 803d826:	4291      	cmp	r1, r2
 803d828:	f100 33ff 	add.w	r3, r0, #4294967295
 803d82c:	d100      	bne.n	803d830 <memcpy+0xc>
 803d82e:	4770      	bx	lr
 803d830:	b510      	push	{r4, lr}
 803d832:	f811 4b01 	ldrb.w	r4, [r1], #1
 803d836:	f803 4f01 	strb.w	r4, [r3, #1]!
 803d83a:	4291      	cmp	r1, r2
 803d83c:	d1f9      	bne.n	803d832 <memcpy+0xe>
 803d83e:	bd10      	pop	{r4, pc}

0803d840 <__register_exitproc>:
 803d840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803d844:	4d27      	ldr	r5, [pc, #156]	@ (803d8e4 <__register_exitproc+0xa4>)
 803d846:	4607      	mov	r7, r0
 803d848:	6828      	ldr	r0, [r5, #0]
 803d84a:	4691      	mov	r9, r2
 803d84c:	460e      	mov	r6, r1
 803d84e:	4698      	mov	r8, r3
 803d850:	f7da fbc0 	bl	8017fd4 <__retarget_lock_acquire_recursive>
 803d854:	4a24      	ldr	r2, [pc, #144]	@ (803d8e8 <__register_exitproc+0xa8>)
 803d856:	6814      	ldr	r4, [r2, #0]
 803d858:	b93c      	cbnz	r4, 803d86a <__register_exitproc+0x2a>
 803d85a:	4b24      	ldr	r3, [pc, #144]	@ (803d8ec <__register_exitproc+0xac>)
 803d85c:	6013      	str	r3, [r2, #0]
 803d85e:	4a24      	ldr	r2, [pc, #144]	@ (803d8f0 <__register_exitproc+0xb0>)
 803d860:	b112      	cbz	r2, 803d868 <__register_exitproc+0x28>
 803d862:	6812      	ldr	r2, [r2, #0]
 803d864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 803d868:	4c20      	ldr	r4, [pc, #128]	@ (803d8ec <__register_exitproc+0xac>)
 803d86a:	6863      	ldr	r3, [r4, #4]
 803d86c:	2b1f      	cmp	r3, #31
 803d86e:	dd06      	ble.n	803d87e <__register_exitproc+0x3e>
 803d870:	6828      	ldr	r0, [r5, #0]
 803d872:	f7da fbbb 	bl	8017fec <__retarget_lock_release_recursive>
 803d876:	f04f 30ff 	mov.w	r0, #4294967295
 803d87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803d87e:	b32f      	cbz	r7, 803d8cc <__register_exitproc+0x8c>
 803d880:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 803d884:	b968      	cbnz	r0, 803d8a2 <__register_exitproc+0x62>
 803d886:	4b1b      	ldr	r3, [pc, #108]	@ (803d8f4 <__register_exitproc+0xb4>)
 803d888:	2b00      	cmp	r3, #0
 803d88a:	d0f1      	beq.n	803d870 <__register_exitproc+0x30>
 803d88c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 803d890:	f7fe fe72 	bl	803c578 <malloc>
 803d894:	2800      	cmp	r0, #0
 803d896:	d0eb      	beq.n	803d870 <__register_exitproc+0x30>
 803d898:	2300      	movs	r3, #0
 803d89a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 803d89e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 803d8a2:	6863      	ldr	r3, [r4, #4]
 803d8a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 803d8a8:	2201      	movs	r2, #1
 803d8aa:	409a      	lsls	r2, r3
 803d8ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 803d8b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 803d8b4:	4313      	orrs	r3, r2
 803d8b6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 803d8ba:	2f02      	cmp	r7, #2
 803d8bc:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 803d8c0:	bf02      	ittt	eq
 803d8c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 803d8c6:	4313      	orreq	r3, r2
 803d8c8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 803d8cc:	6863      	ldr	r3, [r4, #4]
 803d8ce:	6828      	ldr	r0, [r5, #0]
 803d8d0:	1c5a      	adds	r2, r3, #1
 803d8d2:	3302      	adds	r3, #2
 803d8d4:	6062      	str	r2, [r4, #4]
 803d8d6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 803d8da:	f7da fb87 	bl	8017fec <__retarget_lock_release_recursive>
 803d8de:	2000      	movs	r0, #0
 803d8e0:	e7cb      	b.n	803d87a <__register_exitproc+0x3a>
 803d8e2:	bf00      	nop
 803d8e4:	20000844 	.word	0x20000844
 803d8e8:	2000bb60 	.word	0x2000bb60
 803d8ec:	2000bad4 	.word	0x2000bad4
 803d8f0:	08043d30 	.word	0x08043d30
 803d8f4:	0803c579 	.word	0x0803c579

0803d8f8 <quorem>:
 803d8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d8fc:	6903      	ldr	r3, [r0, #16]
 803d8fe:	690c      	ldr	r4, [r1, #16]
 803d900:	42a3      	cmp	r3, r4
 803d902:	4607      	mov	r7, r0
 803d904:	db7e      	blt.n	803da04 <quorem+0x10c>
 803d906:	3c01      	subs	r4, #1
 803d908:	f101 0814 	add.w	r8, r1, #20
 803d90c:	00a3      	lsls	r3, r4, #2
 803d90e:	f100 0514 	add.w	r5, r0, #20
 803d912:	9300      	str	r3, [sp, #0]
 803d914:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803d918:	9301      	str	r3, [sp, #4]
 803d91a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 803d91e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803d922:	3301      	adds	r3, #1
 803d924:	429a      	cmp	r2, r3
 803d926:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 803d92a:	fbb2 f6f3 	udiv	r6, r2, r3
 803d92e:	d32e      	bcc.n	803d98e <quorem+0x96>
 803d930:	f04f 0a00 	mov.w	sl, #0
 803d934:	46c4      	mov	ip, r8
 803d936:	46ae      	mov	lr, r5
 803d938:	46d3      	mov	fp, sl
 803d93a:	f85c 3b04 	ldr.w	r3, [ip], #4
 803d93e:	b298      	uxth	r0, r3
 803d940:	fb06 a000 	mla	r0, r6, r0, sl
 803d944:	0c02      	lsrs	r2, r0, #16
 803d946:	0c1b      	lsrs	r3, r3, #16
 803d948:	fb06 2303 	mla	r3, r6, r3, r2
 803d94c:	f8de 2000 	ldr.w	r2, [lr]
 803d950:	b280      	uxth	r0, r0
 803d952:	b292      	uxth	r2, r2
 803d954:	1a12      	subs	r2, r2, r0
 803d956:	445a      	add	r2, fp
 803d958:	f8de 0000 	ldr.w	r0, [lr]
 803d95c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803d960:	b29b      	uxth	r3, r3
 803d962:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 803d966:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 803d96a:	b292      	uxth	r2, r2
 803d96c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 803d970:	45e1      	cmp	r9, ip
 803d972:	f84e 2b04 	str.w	r2, [lr], #4
 803d976:	ea4f 4b23 	mov.w	fp, r3, asr #16
 803d97a:	d2de      	bcs.n	803d93a <quorem+0x42>
 803d97c:	9b00      	ldr	r3, [sp, #0]
 803d97e:	58eb      	ldr	r3, [r5, r3]
 803d980:	b92b      	cbnz	r3, 803d98e <quorem+0x96>
 803d982:	9b01      	ldr	r3, [sp, #4]
 803d984:	3b04      	subs	r3, #4
 803d986:	429d      	cmp	r5, r3
 803d988:	461a      	mov	r2, r3
 803d98a:	d32f      	bcc.n	803d9ec <quorem+0xf4>
 803d98c:	613c      	str	r4, [r7, #16]
 803d98e:	4638      	mov	r0, r7
 803d990:	f001 f8c6 	bl	803eb20 <__mcmp>
 803d994:	2800      	cmp	r0, #0
 803d996:	db25      	blt.n	803d9e4 <quorem+0xec>
 803d998:	4629      	mov	r1, r5
 803d99a:	2000      	movs	r0, #0
 803d99c:	f858 2b04 	ldr.w	r2, [r8], #4
 803d9a0:	f8d1 c000 	ldr.w	ip, [r1]
 803d9a4:	fa1f fe82 	uxth.w	lr, r2
 803d9a8:	fa1f f38c 	uxth.w	r3, ip
 803d9ac:	eba3 030e 	sub.w	r3, r3, lr
 803d9b0:	4403      	add	r3, r0
 803d9b2:	0c12      	lsrs	r2, r2, #16
 803d9b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 803d9b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 803d9bc:	b29b      	uxth	r3, r3
 803d9be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803d9c2:	45c1      	cmp	r9, r8
 803d9c4:	f841 3b04 	str.w	r3, [r1], #4
 803d9c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 803d9cc:	d2e6      	bcs.n	803d99c <quorem+0xa4>
 803d9ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803d9d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803d9d6:	b922      	cbnz	r2, 803d9e2 <quorem+0xea>
 803d9d8:	3b04      	subs	r3, #4
 803d9da:	429d      	cmp	r5, r3
 803d9dc:	461a      	mov	r2, r3
 803d9de:	d30b      	bcc.n	803d9f8 <quorem+0x100>
 803d9e0:	613c      	str	r4, [r7, #16]
 803d9e2:	3601      	adds	r6, #1
 803d9e4:	4630      	mov	r0, r6
 803d9e6:	b003      	add	sp, #12
 803d9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d9ec:	6812      	ldr	r2, [r2, #0]
 803d9ee:	3b04      	subs	r3, #4
 803d9f0:	2a00      	cmp	r2, #0
 803d9f2:	d1cb      	bne.n	803d98c <quorem+0x94>
 803d9f4:	3c01      	subs	r4, #1
 803d9f6:	e7c6      	b.n	803d986 <quorem+0x8e>
 803d9f8:	6812      	ldr	r2, [r2, #0]
 803d9fa:	3b04      	subs	r3, #4
 803d9fc:	2a00      	cmp	r2, #0
 803d9fe:	d1ef      	bne.n	803d9e0 <quorem+0xe8>
 803da00:	3c01      	subs	r4, #1
 803da02:	e7ea      	b.n	803d9da <quorem+0xe2>
 803da04:	2000      	movs	r0, #0
 803da06:	e7ee      	b.n	803d9e6 <quorem+0xee>

0803da08 <_dtoa_r>:
 803da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803da0c:	69c7      	ldr	r7, [r0, #28]
 803da0e:	b097      	sub	sp, #92	@ 0x5c
 803da10:	ed8d 0b04 	vstr	d0, [sp, #16]
 803da14:	ec55 4b10 	vmov	r4, r5, d0
 803da18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 803da1a:	9107      	str	r1, [sp, #28]
 803da1c:	4681      	mov	r9, r0
 803da1e:	920c      	str	r2, [sp, #48]	@ 0x30
 803da20:	9311      	str	r3, [sp, #68]	@ 0x44
 803da22:	b97f      	cbnz	r7, 803da44 <_dtoa_r+0x3c>
 803da24:	2010      	movs	r0, #16
 803da26:	f7fe fda7 	bl	803c578 <malloc>
 803da2a:	4602      	mov	r2, r0
 803da2c:	f8c9 001c 	str.w	r0, [r9, #28]
 803da30:	b920      	cbnz	r0, 803da3c <_dtoa_r+0x34>
 803da32:	4ba9      	ldr	r3, [pc, #676]	@ (803dcd8 <_dtoa_r+0x2d0>)
 803da34:	21ef      	movs	r1, #239	@ 0xef
 803da36:	48a9      	ldr	r0, [pc, #676]	@ (803dcdc <_dtoa_r+0x2d4>)
 803da38:	f7fe fd76 	bl	803c528 <__assert_func>
 803da3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 803da40:	6007      	str	r7, [r0, #0]
 803da42:	60c7      	str	r7, [r0, #12]
 803da44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 803da48:	6819      	ldr	r1, [r3, #0]
 803da4a:	b159      	cbz	r1, 803da64 <_dtoa_r+0x5c>
 803da4c:	685a      	ldr	r2, [r3, #4]
 803da4e:	604a      	str	r2, [r1, #4]
 803da50:	2301      	movs	r3, #1
 803da52:	4093      	lsls	r3, r2
 803da54:	608b      	str	r3, [r1, #8]
 803da56:	4648      	mov	r0, r9
 803da58:	f000 fe30 	bl	803e6bc <_Bfree>
 803da5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 803da60:	2200      	movs	r2, #0
 803da62:	601a      	str	r2, [r3, #0]
 803da64:	1e2b      	subs	r3, r5, #0
 803da66:	bfb9      	ittee	lt
 803da68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 803da6c:	9305      	strlt	r3, [sp, #20]
 803da6e:	2300      	movge	r3, #0
 803da70:	6033      	strge	r3, [r6, #0]
 803da72:	9f05      	ldr	r7, [sp, #20]
 803da74:	4b9a      	ldr	r3, [pc, #616]	@ (803dce0 <_dtoa_r+0x2d8>)
 803da76:	bfbc      	itt	lt
 803da78:	2201      	movlt	r2, #1
 803da7a:	6032      	strlt	r2, [r6, #0]
 803da7c:	43bb      	bics	r3, r7
 803da7e:	d112      	bne.n	803daa6 <_dtoa_r+0x9e>
 803da80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803da82:	f242 730f 	movw	r3, #9999	@ 0x270f
 803da86:	6013      	str	r3, [r2, #0]
 803da88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 803da8c:	4323      	orrs	r3, r4
 803da8e:	f000 855a 	beq.w	803e546 <_dtoa_r+0xb3e>
 803da92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 803da94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 803dcf4 <_dtoa_r+0x2ec>
 803da98:	2b00      	cmp	r3, #0
 803da9a:	f000 855c 	beq.w	803e556 <_dtoa_r+0xb4e>
 803da9e:	f10a 0303 	add.w	r3, sl, #3
 803daa2:	f000 bd56 	b.w	803e552 <_dtoa_r+0xb4a>
 803daa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 803daaa:	2200      	movs	r2, #0
 803daac:	ec51 0b17 	vmov	r0, r1, d7
 803dab0:	2300      	movs	r3, #0
 803dab2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 803dab6:	f7d8 f92f 	bl	8015d18 <__aeabi_dcmpeq>
 803daba:	4680      	mov	r8, r0
 803dabc:	b158      	cbz	r0, 803dad6 <_dtoa_r+0xce>
 803dabe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 803dac0:	2301      	movs	r3, #1
 803dac2:	6013      	str	r3, [r2, #0]
 803dac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 803dac6:	b113      	cbz	r3, 803dace <_dtoa_r+0xc6>
 803dac8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 803daca:	4b86      	ldr	r3, [pc, #536]	@ (803dce4 <_dtoa_r+0x2dc>)
 803dacc:	6013      	str	r3, [r2, #0]
 803dace:	f8df a228 	ldr.w	sl, [pc, #552]	@ 803dcf8 <_dtoa_r+0x2f0>
 803dad2:	f000 bd40 	b.w	803e556 <_dtoa_r+0xb4e>
 803dad6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 803dada:	aa14      	add	r2, sp, #80	@ 0x50
 803dadc:	a915      	add	r1, sp, #84	@ 0x54
 803dade:	4648      	mov	r0, r9
 803dae0:	f001 f8ce 	bl	803ec80 <__d2b>
 803dae4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 803dae8:	9002      	str	r0, [sp, #8]
 803daea:	2e00      	cmp	r6, #0
 803daec:	d078      	beq.n	803dbe0 <_dtoa_r+0x1d8>
 803daee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 803daf0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 803daf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803daf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803dafc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 803db00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 803db04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 803db08:	4619      	mov	r1, r3
 803db0a:	2200      	movs	r2, #0
 803db0c:	4b76      	ldr	r3, [pc, #472]	@ (803dce8 <_dtoa_r+0x2e0>)
 803db0e:	f7d7 fce3 	bl	80154d8 <__aeabi_dsub>
 803db12:	a36b      	add	r3, pc, #428	@ (adr r3, 803dcc0 <_dtoa_r+0x2b8>)
 803db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 803db18:	f7d7 fe96 	bl	8015848 <__aeabi_dmul>
 803db1c:	a36a      	add	r3, pc, #424	@ (adr r3, 803dcc8 <_dtoa_r+0x2c0>)
 803db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 803db22:	f7d7 fcdb 	bl	80154dc <__adddf3>
 803db26:	4604      	mov	r4, r0
 803db28:	4630      	mov	r0, r6
 803db2a:	460d      	mov	r5, r1
 803db2c:	f7d7 fe22 	bl	8015774 <__aeabi_i2d>
 803db30:	a367      	add	r3, pc, #412	@ (adr r3, 803dcd0 <_dtoa_r+0x2c8>)
 803db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 803db36:	f7d7 fe87 	bl	8015848 <__aeabi_dmul>
 803db3a:	4602      	mov	r2, r0
 803db3c:	460b      	mov	r3, r1
 803db3e:	4620      	mov	r0, r4
 803db40:	4629      	mov	r1, r5
 803db42:	f7d7 fccb 	bl	80154dc <__adddf3>
 803db46:	4604      	mov	r4, r0
 803db48:	460d      	mov	r5, r1
 803db4a:	f7d8 f92d 	bl	8015da8 <__aeabi_d2iz>
 803db4e:	2200      	movs	r2, #0
 803db50:	4607      	mov	r7, r0
 803db52:	2300      	movs	r3, #0
 803db54:	4620      	mov	r0, r4
 803db56:	4629      	mov	r1, r5
 803db58:	f7d8 f8e8 	bl	8015d2c <__aeabi_dcmplt>
 803db5c:	b140      	cbz	r0, 803db70 <_dtoa_r+0x168>
 803db5e:	4638      	mov	r0, r7
 803db60:	f7d7 fe08 	bl	8015774 <__aeabi_i2d>
 803db64:	4622      	mov	r2, r4
 803db66:	462b      	mov	r3, r5
 803db68:	f7d8 f8d6 	bl	8015d18 <__aeabi_dcmpeq>
 803db6c:	b900      	cbnz	r0, 803db70 <_dtoa_r+0x168>
 803db6e:	3f01      	subs	r7, #1
 803db70:	2f16      	cmp	r7, #22
 803db72:	d852      	bhi.n	803dc1a <_dtoa_r+0x212>
 803db74:	4b5d      	ldr	r3, [pc, #372]	@ (803dcec <_dtoa_r+0x2e4>)
 803db76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 803db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803db7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803db82:	f7d8 f8d3 	bl	8015d2c <__aeabi_dcmplt>
 803db86:	2800      	cmp	r0, #0
 803db88:	d049      	beq.n	803dc1e <_dtoa_r+0x216>
 803db8a:	3f01      	subs	r7, #1
 803db8c:	2300      	movs	r3, #0
 803db8e:	9310      	str	r3, [sp, #64]	@ 0x40
 803db90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 803db92:	1b9b      	subs	r3, r3, r6
 803db94:	1e5a      	subs	r2, r3, #1
 803db96:	bf45      	ittet	mi
 803db98:	f1c3 0301 	rsbmi	r3, r3, #1
 803db9c:	9300      	strmi	r3, [sp, #0]
 803db9e:	2300      	movpl	r3, #0
 803dba0:	2300      	movmi	r3, #0
 803dba2:	9206      	str	r2, [sp, #24]
 803dba4:	bf54      	ite	pl
 803dba6:	9300      	strpl	r3, [sp, #0]
 803dba8:	9306      	strmi	r3, [sp, #24]
 803dbaa:	2f00      	cmp	r7, #0
 803dbac:	db39      	blt.n	803dc22 <_dtoa_r+0x21a>
 803dbae:	9b06      	ldr	r3, [sp, #24]
 803dbb0:	970d      	str	r7, [sp, #52]	@ 0x34
 803dbb2:	443b      	add	r3, r7
 803dbb4:	9306      	str	r3, [sp, #24]
 803dbb6:	2300      	movs	r3, #0
 803dbb8:	9308      	str	r3, [sp, #32]
 803dbba:	9b07      	ldr	r3, [sp, #28]
 803dbbc:	2b09      	cmp	r3, #9
 803dbbe:	d863      	bhi.n	803dc88 <_dtoa_r+0x280>
 803dbc0:	2b05      	cmp	r3, #5
 803dbc2:	bfc4      	itt	gt
 803dbc4:	3b04      	subgt	r3, #4
 803dbc6:	9307      	strgt	r3, [sp, #28]
 803dbc8:	9b07      	ldr	r3, [sp, #28]
 803dbca:	f1a3 0302 	sub.w	r3, r3, #2
 803dbce:	bfcc      	ite	gt
 803dbd0:	2400      	movgt	r4, #0
 803dbd2:	2401      	movle	r4, #1
 803dbd4:	2b03      	cmp	r3, #3
 803dbd6:	d863      	bhi.n	803dca0 <_dtoa_r+0x298>
 803dbd8:	e8df f003 	tbb	[pc, r3]
 803dbdc:	2b375452 	.word	0x2b375452
 803dbe0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 803dbe4:	441e      	add	r6, r3
 803dbe6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 803dbea:	2b20      	cmp	r3, #32
 803dbec:	bfc1      	itttt	gt
 803dbee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 803dbf2:	409f      	lslgt	r7, r3
 803dbf4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 803dbf8:	fa24 f303 	lsrgt.w	r3, r4, r3
 803dbfc:	bfd6      	itet	le
 803dbfe:	f1c3 0320 	rsble	r3, r3, #32
 803dc02:	ea47 0003 	orrgt.w	r0, r7, r3
 803dc06:	fa04 f003 	lslle.w	r0, r4, r3
 803dc0a:	f7d7 fda3 	bl	8015754 <__aeabi_ui2d>
 803dc0e:	2201      	movs	r2, #1
 803dc10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 803dc14:	3e01      	subs	r6, #1
 803dc16:	9212      	str	r2, [sp, #72]	@ 0x48
 803dc18:	e776      	b.n	803db08 <_dtoa_r+0x100>
 803dc1a:	2301      	movs	r3, #1
 803dc1c:	e7b7      	b.n	803db8e <_dtoa_r+0x186>
 803dc1e:	9010      	str	r0, [sp, #64]	@ 0x40
 803dc20:	e7b6      	b.n	803db90 <_dtoa_r+0x188>
 803dc22:	9b00      	ldr	r3, [sp, #0]
 803dc24:	1bdb      	subs	r3, r3, r7
 803dc26:	9300      	str	r3, [sp, #0]
 803dc28:	427b      	negs	r3, r7
 803dc2a:	9308      	str	r3, [sp, #32]
 803dc2c:	2300      	movs	r3, #0
 803dc2e:	930d      	str	r3, [sp, #52]	@ 0x34
 803dc30:	e7c3      	b.n	803dbba <_dtoa_r+0x1b2>
 803dc32:	2301      	movs	r3, #1
 803dc34:	9309      	str	r3, [sp, #36]	@ 0x24
 803dc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803dc38:	eb07 0b03 	add.w	fp, r7, r3
 803dc3c:	f10b 0301 	add.w	r3, fp, #1
 803dc40:	2b01      	cmp	r3, #1
 803dc42:	9303      	str	r3, [sp, #12]
 803dc44:	bfb8      	it	lt
 803dc46:	2301      	movlt	r3, #1
 803dc48:	e006      	b.n	803dc58 <_dtoa_r+0x250>
 803dc4a:	2301      	movs	r3, #1
 803dc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 803dc4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803dc50:	2b00      	cmp	r3, #0
 803dc52:	dd28      	ble.n	803dca6 <_dtoa_r+0x29e>
 803dc54:	469b      	mov	fp, r3
 803dc56:	9303      	str	r3, [sp, #12]
 803dc58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 803dc5c:	2100      	movs	r1, #0
 803dc5e:	2204      	movs	r2, #4
 803dc60:	f102 0514 	add.w	r5, r2, #20
 803dc64:	429d      	cmp	r5, r3
 803dc66:	d926      	bls.n	803dcb6 <_dtoa_r+0x2ae>
 803dc68:	6041      	str	r1, [r0, #4]
 803dc6a:	4648      	mov	r0, r9
 803dc6c:	f000 fce6 	bl	803e63c <_Balloc>
 803dc70:	4682      	mov	sl, r0
 803dc72:	2800      	cmp	r0, #0
 803dc74:	d142      	bne.n	803dcfc <_dtoa_r+0x2f4>
 803dc76:	4b1e      	ldr	r3, [pc, #120]	@ (803dcf0 <_dtoa_r+0x2e8>)
 803dc78:	4602      	mov	r2, r0
 803dc7a:	f240 11af 	movw	r1, #431	@ 0x1af
 803dc7e:	e6da      	b.n	803da36 <_dtoa_r+0x2e>
 803dc80:	2300      	movs	r3, #0
 803dc82:	e7e3      	b.n	803dc4c <_dtoa_r+0x244>
 803dc84:	2300      	movs	r3, #0
 803dc86:	e7d5      	b.n	803dc34 <_dtoa_r+0x22c>
 803dc88:	2401      	movs	r4, #1
 803dc8a:	2300      	movs	r3, #0
 803dc8c:	9307      	str	r3, [sp, #28]
 803dc8e:	9409      	str	r4, [sp, #36]	@ 0x24
 803dc90:	f04f 3bff 	mov.w	fp, #4294967295
 803dc94:	2200      	movs	r2, #0
 803dc96:	f8cd b00c 	str.w	fp, [sp, #12]
 803dc9a:	2312      	movs	r3, #18
 803dc9c:	920c      	str	r2, [sp, #48]	@ 0x30
 803dc9e:	e7db      	b.n	803dc58 <_dtoa_r+0x250>
 803dca0:	2301      	movs	r3, #1
 803dca2:	9309      	str	r3, [sp, #36]	@ 0x24
 803dca4:	e7f4      	b.n	803dc90 <_dtoa_r+0x288>
 803dca6:	f04f 0b01 	mov.w	fp, #1
 803dcaa:	f8cd b00c 	str.w	fp, [sp, #12]
 803dcae:	465b      	mov	r3, fp
 803dcb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 803dcb4:	e7d0      	b.n	803dc58 <_dtoa_r+0x250>
 803dcb6:	3101      	adds	r1, #1
 803dcb8:	0052      	lsls	r2, r2, #1
 803dcba:	e7d1      	b.n	803dc60 <_dtoa_r+0x258>
 803dcbc:	f3af 8000 	nop.w
 803dcc0:	636f4361 	.word	0x636f4361
 803dcc4:	3fd287a7 	.word	0x3fd287a7
 803dcc8:	8b60c8b3 	.word	0x8b60c8b3
 803dccc:	3fc68a28 	.word	0x3fc68a28
 803dcd0:	509f79fb 	.word	0x509f79fb
 803dcd4:	3fd34413 	.word	0x3fd34413
 803dcd8:	08041bd7 	.word	0x08041bd7
 803dcdc:	08041c51 	.word	0x08041c51
 803dce0:	7ff00000 	.word	0x7ff00000
 803dce4:	0803f925 	.word	0x0803f925
 803dce8:	3ff80000 	.word	0x3ff80000
 803dcec:	08043c68 	.word	0x08043c68
 803dcf0:	08041ca9 	.word	0x08041ca9
 803dcf4:	080410da 	.word	0x080410da
 803dcf8:	0803f924 	.word	0x0803f924
 803dcfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 803dd00:	6018      	str	r0, [r3, #0]
 803dd02:	9b03      	ldr	r3, [sp, #12]
 803dd04:	2b0e      	cmp	r3, #14
 803dd06:	f200 80a1 	bhi.w	803de4c <_dtoa_r+0x444>
 803dd0a:	2c00      	cmp	r4, #0
 803dd0c:	f000 809e 	beq.w	803de4c <_dtoa_r+0x444>
 803dd10:	2f00      	cmp	r7, #0
 803dd12:	dd33      	ble.n	803dd7c <_dtoa_r+0x374>
 803dd14:	4b9c      	ldr	r3, [pc, #624]	@ (803df88 <_dtoa_r+0x580>)
 803dd16:	f007 020f 	and.w	r2, r7, #15
 803dd1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803dd1e:	ed93 7b00 	vldr	d7, [r3]
 803dd22:	05f8      	lsls	r0, r7, #23
 803dd24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 803dd28:	ea4f 1427 	mov.w	r4, r7, asr #4
 803dd2c:	d516      	bpl.n	803dd5c <_dtoa_r+0x354>
 803dd2e:	4b97      	ldr	r3, [pc, #604]	@ (803df8c <_dtoa_r+0x584>)
 803dd30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803dd34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 803dd38:	f7d7 feb0 	bl	8015a9c <__aeabi_ddiv>
 803dd3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803dd40:	f004 040f 	and.w	r4, r4, #15
 803dd44:	2603      	movs	r6, #3
 803dd46:	4d91      	ldr	r5, [pc, #580]	@ (803df8c <_dtoa_r+0x584>)
 803dd48:	b954      	cbnz	r4, 803dd60 <_dtoa_r+0x358>
 803dd4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803dd4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803dd52:	f7d7 fea3 	bl	8015a9c <__aeabi_ddiv>
 803dd56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803dd5a:	e028      	b.n	803ddae <_dtoa_r+0x3a6>
 803dd5c:	2602      	movs	r6, #2
 803dd5e:	e7f2      	b.n	803dd46 <_dtoa_r+0x33e>
 803dd60:	07e1      	lsls	r1, r4, #31
 803dd62:	d508      	bpl.n	803dd76 <_dtoa_r+0x36e>
 803dd64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 803dd68:	e9d5 2300 	ldrd	r2, r3, [r5]
 803dd6c:	f7d7 fd6c 	bl	8015848 <__aeabi_dmul>
 803dd70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 803dd74:	3601      	adds	r6, #1
 803dd76:	1064      	asrs	r4, r4, #1
 803dd78:	3508      	adds	r5, #8
 803dd7a:	e7e5      	b.n	803dd48 <_dtoa_r+0x340>
 803dd7c:	f000 80af 	beq.w	803dede <_dtoa_r+0x4d6>
 803dd80:	427c      	negs	r4, r7
 803dd82:	4b81      	ldr	r3, [pc, #516]	@ (803df88 <_dtoa_r+0x580>)
 803dd84:	4d81      	ldr	r5, [pc, #516]	@ (803df8c <_dtoa_r+0x584>)
 803dd86:	f004 020f 	and.w	r2, r4, #15
 803dd8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 803dd92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 803dd96:	f7d7 fd57 	bl	8015848 <__aeabi_dmul>
 803dd9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803dd9e:	1124      	asrs	r4, r4, #4
 803dda0:	2300      	movs	r3, #0
 803dda2:	2602      	movs	r6, #2
 803dda4:	2c00      	cmp	r4, #0
 803dda6:	f040 808f 	bne.w	803dec8 <_dtoa_r+0x4c0>
 803ddaa:	2b00      	cmp	r3, #0
 803ddac:	d1d3      	bne.n	803dd56 <_dtoa_r+0x34e>
 803ddae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803ddb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 803ddb4:	2b00      	cmp	r3, #0
 803ddb6:	f000 8094 	beq.w	803dee2 <_dtoa_r+0x4da>
 803ddba:	4b75      	ldr	r3, [pc, #468]	@ (803df90 <_dtoa_r+0x588>)
 803ddbc:	2200      	movs	r2, #0
 803ddbe:	4620      	mov	r0, r4
 803ddc0:	4629      	mov	r1, r5
 803ddc2:	f7d7 ffb3 	bl	8015d2c <__aeabi_dcmplt>
 803ddc6:	2800      	cmp	r0, #0
 803ddc8:	f000 808b 	beq.w	803dee2 <_dtoa_r+0x4da>
 803ddcc:	9b03      	ldr	r3, [sp, #12]
 803ddce:	2b00      	cmp	r3, #0
 803ddd0:	f000 8087 	beq.w	803dee2 <_dtoa_r+0x4da>
 803ddd4:	f1bb 0f00 	cmp.w	fp, #0
 803ddd8:	dd34      	ble.n	803de44 <_dtoa_r+0x43c>
 803ddda:	4620      	mov	r0, r4
 803dddc:	4b6d      	ldr	r3, [pc, #436]	@ (803df94 <_dtoa_r+0x58c>)
 803ddde:	2200      	movs	r2, #0
 803dde0:	4629      	mov	r1, r5
 803dde2:	f7d7 fd31 	bl	8015848 <__aeabi_dmul>
 803dde6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803ddea:	f107 38ff 	add.w	r8, r7, #4294967295
 803ddee:	3601      	adds	r6, #1
 803ddf0:	465c      	mov	r4, fp
 803ddf2:	4630      	mov	r0, r6
 803ddf4:	f7d7 fcbe 	bl	8015774 <__aeabi_i2d>
 803ddf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803ddfc:	f7d7 fd24 	bl	8015848 <__aeabi_dmul>
 803de00:	4b65      	ldr	r3, [pc, #404]	@ (803df98 <_dtoa_r+0x590>)
 803de02:	2200      	movs	r2, #0
 803de04:	f7d7 fb6a 	bl	80154dc <__adddf3>
 803de08:	4605      	mov	r5, r0
 803de0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 803de0e:	2c00      	cmp	r4, #0
 803de10:	d16a      	bne.n	803dee8 <_dtoa_r+0x4e0>
 803de12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803de16:	4b61      	ldr	r3, [pc, #388]	@ (803df9c <_dtoa_r+0x594>)
 803de18:	2200      	movs	r2, #0
 803de1a:	f7d7 fb5d 	bl	80154d8 <__aeabi_dsub>
 803de1e:	4602      	mov	r2, r0
 803de20:	460b      	mov	r3, r1
 803de22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803de26:	462a      	mov	r2, r5
 803de28:	4633      	mov	r3, r6
 803de2a:	f7d7 ff9d 	bl	8015d68 <__aeabi_dcmpgt>
 803de2e:	2800      	cmp	r0, #0
 803de30:	f040 8298 	bne.w	803e364 <_dtoa_r+0x95c>
 803de34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803de38:	462a      	mov	r2, r5
 803de3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 803de3e:	f7d7 ff75 	bl	8015d2c <__aeabi_dcmplt>
 803de42:	bb38      	cbnz	r0, 803de94 <_dtoa_r+0x48c>
 803de44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 803de48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 803de4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 803de4e:	2b00      	cmp	r3, #0
 803de50:	f2c0 8157 	blt.w	803e102 <_dtoa_r+0x6fa>
 803de54:	2f0e      	cmp	r7, #14
 803de56:	f300 8154 	bgt.w	803e102 <_dtoa_r+0x6fa>
 803de5a:	4b4b      	ldr	r3, [pc, #300]	@ (803df88 <_dtoa_r+0x580>)
 803de5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 803de60:	ed93 7b00 	vldr	d7, [r3]
 803de64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803de66:	2b00      	cmp	r3, #0
 803de68:	ed8d 7b00 	vstr	d7, [sp]
 803de6c:	f280 80e5 	bge.w	803e03a <_dtoa_r+0x632>
 803de70:	9b03      	ldr	r3, [sp, #12]
 803de72:	2b00      	cmp	r3, #0
 803de74:	f300 80e1 	bgt.w	803e03a <_dtoa_r+0x632>
 803de78:	d10c      	bne.n	803de94 <_dtoa_r+0x48c>
 803de7a:	4b48      	ldr	r3, [pc, #288]	@ (803df9c <_dtoa_r+0x594>)
 803de7c:	2200      	movs	r2, #0
 803de7e:	ec51 0b17 	vmov	r0, r1, d7
 803de82:	f7d7 fce1 	bl	8015848 <__aeabi_dmul>
 803de86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803de8a:	f7d7 ff63 	bl	8015d54 <__aeabi_dcmpge>
 803de8e:	2800      	cmp	r0, #0
 803de90:	f000 8266 	beq.w	803e360 <_dtoa_r+0x958>
 803de94:	2400      	movs	r4, #0
 803de96:	4625      	mov	r5, r4
 803de98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803de9a:	4656      	mov	r6, sl
 803de9c:	ea6f 0803 	mvn.w	r8, r3
 803dea0:	2700      	movs	r7, #0
 803dea2:	4621      	mov	r1, r4
 803dea4:	4648      	mov	r0, r9
 803dea6:	f000 fc09 	bl	803e6bc <_Bfree>
 803deaa:	2d00      	cmp	r5, #0
 803deac:	f000 80bd 	beq.w	803e02a <_dtoa_r+0x622>
 803deb0:	b12f      	cbz	r7, 803debe <_dtoa_r+0x4b6>
 803deb2:	42af      	cmp	r7, r5
 803deb4:	d003      	beq.n	803debe <_dtoa_r+0x4b6>
 803deb6:	4639      	mov	r1, r7
 803deb8:	4648      	mov	r0, r9
 803deba:	f000 fbff 	bl	803e6bc <_Bfree>
 803debe:	4629      	mov	r1, r5
 803dec0:	4648      	mov	r0, r9
 803dec2:	f000 fbfb 	bl	803e6bc <_Bfree>
 803dec6:	e0b0      	b.n	803e02a <_dtoa_r+0x622>
 803dec8:	07e2      	lsls	r2, r4, #31
 803deca:	d505      	bpl.n	803ded8 <_dtoa_r+0x4d0>
 803decc:	e9d5 2300 	ldrd	r2, r3, [r5]
 803ded0:	f7d7 fcba 	bl	8015848 <__aeabi_dmul>
 803ded4:	3601      	adds	r6, #1
 803ded6:	2301      	movs	r3, #1
 803ded8:	1064      	asrs	r4, r4, #1
 803deda:	3508      	adds	r5, #8
 803dedc:	e762      	b.n	803dda4 <_dtoa_r+0x39c>
 803dede:	2602      	movs	r6, #2
 803dee0:	e765      	b.n	803ddae <_dtoa_r+0x3a6>
 803dee2:	9c03      	ldr	r4, [sp, #12]
 803dee4:	46b8      	mov	r8, r7
 803dee6:	e784      	b.n	803ddf2 <_dtoa_r+0x3ea>
 803dee8:	4b27      	ldr	r3, [pc, #156]	@ (803df88 <_dtoa_r+0x580>)
 803deea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 803deec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 803def0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 803def4:	4454      	add	r4, sl
 803def6:	2900      	cmp	r1, #0
 803def8:	d054      	beq.n	803dfa4 <_dtoa_r+0x59c>
 803defa:	4929      	ldr	r1, [pc, #164]	@ (803dfa0 <_dtoa_r+0x598>)
 803defc:	2000      	movs	r0, #0
 803defe:	f7d7 fdcd 	bl	8015a9c <__aeabi_ddiv>
 803df02:	4633      	mov	r3, r6
 803df04:	462a      	mov	r2, r5
 803df06:	f7d7 fae7 	bl	80154d8 <__aeabi_dsub>
 803df0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 803df0e:	4656      	mov	r6, sl
 803df10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803df14:	f7d7 ff48 	bl	8015da8 <__aeabi_d2iz>
 803df18:	4605      	mov	r5, r0
 803df1a:	f7d7 fc2b 	bl	8015774 <__aeabi_i2d>
 803df1e:	4602      	mov	r2, r0
 803df20:	460b      	mov	r3, r1
 803df22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803df26:	f7d7 fad7 	bl	80154d8 <__aeabi_dsub>
 803df2a:	3530      	adds	r5, #48	@ 0x30
 803df2c:	4602      	mov	r2, r0
 803df2e:	460b      	mov	r3, r1
 803df30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803df34:	f806 5b01 	strb.w	r5, [r6], #1
 803df38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803df3c:	f7d7 fef6 	bl	8015d2c <__aeabi_dcmplt>
 803df40:	2800      	cmp	r0, #0
 803df42:	d172      	bne.n	803e02a <_dtoa_r+0x622>
 803df44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 803df48:	4911      	ldr	r1, [pc, #68]	@ (803df90 <_dtoa_r+0x588>)
 803df4a:	2000      	movs	r0, #0
 803df4c:	f7d7 fac4 	bl	80154d8 <__aeabi_dsub>
 803df50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803df54:	f7d7 feea 	bl	8015d2c <__aeabi_dcmplt>
 803df58:	2800      	cmp	r0, #0
 803df5a:	f040 80b4 	bne.w	803e0c6 <_dtoa_r+0x6be>
 803df5e:	42a6      	cmp	r6, r4
 803df60:	f43f af70 	beq.w	803de44 <_dtoa_r+0x43c>
 803df64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 803df68:	4b0a      	ldr	r3, [pc, #40]	@ (803df94 <_dtoa_r+0x58c>)
 803df6a:	2200      	movs	r2, #0
 803df6c:	f7d7 fc6c 	bl	8015848 <__aeabi_dmul>
 803df70:	4b08      	ldr	r3, [pc, #32]	@ (803df94 <_dtoa_r+0x58c>)
 803df72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 803df76:	2200      	movs	r2, #0
 803df78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803df7c:	f7d7 fc64 	bl	8015848 <__aeabi_dmul>
 803df80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803df84:	e7c4      	b.n	803df10 <_dtoa_r+0x508>
 803df86:	bf00      	nop
 803df88:	08043c68 	.word	0x08043c68
 803df8c:	08043c40 	.word	0x08043c40
 803df90:	3ff00000 	.word	0x3ff00000
 803df94:	40240000 	.word	0x40240000
 803df98:	401c0000 	.word	0x401c0000
 803df9c:	40140000 	.word	0x40140000
 803dfa0:	3fe00000 	.word	0x3fe00000
 803dfa4:	4631      	mov	r1, r6
 803dfa6:	4628      	mov	r0, r5
 803dfa8:	f7d7 fc4e 	bl	8015848 <__aeabi_dmul>
 803dfac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 803dfb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 803dfb2:	4656      	mov	r6, sl
 803dfb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803dfb8:	f7d7 fef6 	bl	8015da8 <__aeabi_d2iz>
 803dfbc:	4605      	mov	r5, r0
 803dfbe:	f7d7 fbd9 	bl	8015774 <__aeabi_i2d>
 803dfc2:	4602      	mov	r2, r0
 803dfc4:	460b      	mov	r3, r1
 803dfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803dfca:	f7d7 fa85 	bl	80154d8 <__aeabi_dsub>
 803dfce:	3530      	adds	r5, #48	@ 0x30
 803dfd0:	f806 5b01 	strb.w	r5, [r6], #1
 803dfd4:	4602      	mov	r2, r0
 803dfd6:	460b      	mov	r3, r1
 803dfd8:	42a6      	cmp	r6, r4
 803dfda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 803dfde:	f04f 0200 	mov.w	r2, #0
 803dfe2:	d124      	bne.n	803e02e <_dtoa_r+0x626>
 803dfe4:	4baf      	ldr	r3, [pc, #700]	@ (803e2a4 <_dtoa_r+0x89c>)
 803dfe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 803dfea:	f7d7 fa77 	bl	80154dc <__adddf3>
 803dfee:	4602      	mov	r2, r0
 803dff0:	460b      	mov	r3, r1
 803dff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803dff6:	f7d7 feb7 	bl	8015d68 <__aeabi_dcmpgt>
 803dffa:	2800      	cmp	r0, #0
 803dffc:	d163      	bne.n	803e0c6 <_dtoa_r+0x6be>
 803dffe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 803e002:	49a8      	ldr	r1, [pc, #672]	@ (803e2a4 <_dtoa_r+0x89c>)
 803e004:	2000      	movs	r0, #0
 803e006:	f7d7 fa67 	bl	80154d8 <__aeabi_dsub>
 803e00a:	4602      	mov	r2, r0
 803e00c:	460b      	mov	r3, r1
 803e00e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 803e012:	f7d7 fe8b 	bl	8015d2c <__aeabi_dcmplt>
 803e016:	2800      	cmp	r0, #0
 803e018:	f43f af14 	beq.w	803de44 <_dtoa_r+0x43c>
 803e01c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 803e01e:	1e73      	subs	r3, r6, #1
 803e020:	9313      	str	r3, [sp, #76]	@ 0x4c
 803e022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 803e026:	2b30      	cmp	r3, #48	@ 0x30
 803e028:	d0f8      	beq.n	803e01c <_dtoa_r+0x614>
 803e02a:	4647      	mov	r7, r8
 803e02c:	e03b      	b.n	803e0a6 <_dtoa_r+0x69e>
 803e02e:	4b9e      	ldr	r3, [pc, #632]	@ (803e2a8 <_dtoa_r+0x8a0>)
 803e030:	f7d7 fc0a 	bl	8015848 <__aeabi_dmul>
 803e034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 803e038:	e7bc      	b.n	803dfb4 <_dtoa_r+0x5ac>
 803e03a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 803e03e:	4656      	mov	r6, sl
 803e040:	e9dd 2300 	ldrd	r2, r3, [sp]
 803e044:	4620      	mov	r0, r4
 803e046:	4629      	mov	r1, r5
 803e048:	f7d7 fd28 	bl	8015a9c <__aeabi_ddiv>
 803e04c:	f7d7 feac 	bl	8015da8 <__aeabi_d2iz>
 803e050:	4680      	mov	r8, r0
 803e052:	f7d7 fb8f 	bl	8015774 <__aeabi_i2d>
 803e056:	e9dd 2300 	ldrd	r2, r3, [sp]
 803e05a:	f7d7 fbf5 	bl	8015848 <__aeabi_dmul>
 803e05e:	4602      	mov	r2, r0
 803e060:	460b      	mov	r3, r1
 803e062:	4620      	mov	r0, r4
 803e064:	4629      	mov	r1, r5
 803e066:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 803e06a:	f7d7 fa35 	bl	80154d8 <__aeabi_dsub>
 803e06e:	f806 4b01 	strb.w	r4, [r6], #1
 803e072:	9d03      	ldr	r5, [sp, #12]
 803e074:	eba6 040a 	sub.w	r4, r6, sl
 803e078:	42a5      	cmp	r5, r4
 803e07a:	4602      	mov	r2, r0
 803e07c:	460b      	mov	r3, r1
 803e07e:	d133      	bne.n	803e0e8 <_dtoa_r+0x6e0>
 803e080:	f7d7 fa2c 	bl	80154dc <__adddf3>
 803e084:	e9dd 2300 	ldrd	r2, r3, [sp]
 803e088:	4604      	mov	r4, r0
 803e08a:	460d      	mov	r5, r1
 803e08c:	f7d7 fe6c 	bl	8015d68 <__aeabi_dcmpgt>
 803e090:	b9c0      	cbnz	r0, 803e0c4 <_dtoa_r+0x6bc>
 803e092:	e9dd 2300 	ldrd	r2, r3, [sp]
 803e096:	4620      	mov	r0, r4
 803e098:	4629      	mov	r1, r5
 803e09a:	f7d7 fe3d 	bl	8015d18 <__aeabi_dcmpeq>
 803e09e:	b110      	cbz	r0, 803e0a6 <_dtoa_r+0x69e>
 803e0a0:	f018 0f01 	tst.w	r8, #1
 803e0a4:	d10e      	bne.n	803e0c4 <_dtoa_r+0x6bc>
 803e0a6:	9902      	ldr	r1, [sp, #8]
 803e0a8:	4648      	mov	r0, r9
 803e0aa:	f000 fb07 	bl	803e6bc <_Bfree>
 803e0ae:	2300      	movs	r3, #0
 803e0b0:	7033      	strb	r3, [r6, #0]
 803e0b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803e0b4:	3701      	adds	r7, #1
 803e0b6:	601f      	str	r7, [r3, #0]
 803e0b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 803e0ba:	2b00      	cmp	r3, #0
 803e0bc:	f000 824b 	beq.w	803e556 <_dtoa_r+0xb4e>
 803e0c0:	601e      	str	r6, [r3, #0]
 803e0c2:	e248      	b.n	803e556 <_dtoa_r+0xb4e>
 803e0c4:	46b8      	mov	r8, r7
 803e0c6:	4633      	mov	r3, r6
 803e0c8:	461e      	mov	r6, r3
 803e0ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803e0ce:	2a39      	cmp	r2, #57	@ 0x39
 803e0d0:	d106      	bne.n	803e0e0 <_dtoa_r+0x6d8>
 803e0d2:	459a      	cmp	sl, r3
 803e0d4:	d1f8      	bne.n	803e0c8 <_dtoa_r+0x6c0>
 803e0d6:	2230      	movs	r2, #48	@ 0x30
 803e0d8:	f108 0801 	add.w	r8, r8, #1
 803e0dc:	f88a 2000 	strb.w	r2, [sl]
 803e0e0:	781a      	ldrb	r2, [r3, #0]
 803e0e2:	3201      	adds	r2, #1
 803e0e4:	701a      	strb	r2, [r3, #0]
 803e0e6:	e7a0      	b.n	803e02a <_dtoa_r+0x622>
 803e0e8:	4b6f      	ldr	r3, [pc, #444]	@ (803e2a8 <_dtoa_r+0x8a0>)
 803e0ea:	2200      	movs	r2, #0
 803e0ec:	f7d7 fbac 	bl	8015848 <__aeabi_dmul>
 803e0f0:	2200      	movs	r2, #0
 803e0f2:	2300      	movs	r3, #0
 803e0f4:	4604      	mov	r4, r0
 803e0f6:	460d      	mov	r5, r1
 803e0f8:	f7d7 fe0e 	bl	8015d18 <__aeabi_dcmpeq>
 803e0fc:	2800      	cmp	r0, #0
 803e0fe:	d09f      	beq.n	803e040 <_dtoa_r+0x638>
 803e100:	e7d1      	b.n	803e0a6 <_dtoa_r+0x69e>
 803e102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803e104:	2a00      	cmp	r2, #0
 803e106:	f000 80ea 	beq.w	803e2de <_dtoa_r+0x8d6>
 803e10a:	9a07      	ldr	r2, [sp, #28]
 803e10c:	2a01      	cmp	r2, #1
 803e10e:	f300 80cd 	bgt.w	803e2ac <_dtoa_r+0x8a4>
 803e112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 803e114:	2a00      	cmp	r2, #0
 803e116:	f000 80c1 	beq.w	803e29c <_dtoa_r+0x894>
 803e11a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 803e11e:	9c08      	ldr	r4, [sp, #32]
 803e120:	9e00      	ldr	r6, [sp, #0]
 803e122:	9a00      	ldr	r2, [sp, #0]
 803e124:	441a      	add	r2, r3
 803e126:	9200      	str	r2, [sp, #0]
 803e128:	9a06      	ldr	r2, [sp, #24]
 803e12a:	2101      	movs	r1, #1
 803e12c:	441a      	add	r2, r3
 803e12e:	4648      	mov	r0, r9
 803e130:	9206      	str	r2, [sp, #24]
 803e132:	f000 fb77 	bl	803e824 <__i2b>
 803e136:	4605      	mov	r5, r0
 803e138:	b166      	cbz	r6, 803e154 <_dtoa_r+0x74c>
 803e13a:	9b06      	ldr	r3, [sp, #24]
 803e13c:	2b00      	cmp	r3, #0
 803e13e:	dd09      	ble.n	803e154 <_dtoa_r+0x74c>
 803e140:	42b3      	cmp	r3, r6
 803e142:	9a00      	ldr	r2, [sp, #0]
 803e144:	bfa8      	it	ge
 803e146:	4633      	movge	r3, r6
 803e148:	1ad2      	subs	r2, r2, r3
 803e14a:	9200      	str	r2, [sp, #0]
 803e14c:	9a06      	ldr	r2, [sp, #24]
 803e14e:	1af6      	subs	r6, r6, r3
 803e150:	1ad3      	subs	r3, r2, r3
 803e152:	9306      	str	r3, [sp, #24]
 803e154:	9b08      	ldr	r3, [sp, #32]
 803e156:	b30b      	cbz	r3, 803e19c <_dtoa_r+0x794>
 803e158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803e15a:	2b00      	cmp	r3, #0
 803e15c:	f000 80c6 	beq.w	803e2ec <_dtoa_r+0x8e4>
 803e160:	2c00      	cmp	r4, #0
 803e162:	f000 80c0 	beq.w	803e2e6 <_dtoa_r+0x8de>
 803e166:	4629      	mov	r1, r5
 803e168:	4622      	mov	r2, r4
 803e16a:	4648      	mov	r0, r9
 803e16c:	f000 fc12 	bl	803e994 <__pow5mult>
 803e170:	9a02      	ldr	r2, [sp, #8]
 803e172:	4601      	mov	r1, r0
 803e174:	4605      	mov	r5, r0
 803e176:	4648      	mov	r0, r9
 803e178:	f000 fb6a 	bl	803e850 <__multiply>
 803e17c:	9902      	ldr	r1, [sp, #8]
 803e17e:	4680      	mov	r8, r0
 803e180:	4648      	mov	r0, r9
 803e182:	f000 fa9b 	bl	803e6bc <_Bfree>
 803e186:	9b08      	ldr	r3, [sp, #32]
 803e188:	1b1b      	subs	r3, r3, r4
 803e18a:	9308      	str	r3, [sp, #32]
 803e18c:	f000 80b1 	beq.w	803e2f2 <_dtoa_r+0x8ea>
 803e190:	9a08      	ldr	r2, [sp, #32]
 803e192:	4641      	mov	r1, r8
 803e194:	4648      	mov	r0, r9
 803e196:	f000 fbfd 	bl	803e994 <__pow5mult>
 803e19a:	9002      	str	r0, [sp, #8]
 803e19c:	2101      	movs	r1, #1
 803e19e:	4648      	mov	r0, r9
 803e1a0:	f000 fb40 	bl	803e824 <__i2b>
 803e1a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803e1a6:	4604      	mov	r4, r0
 803e1a8:	2b00      	cmp	r3, #0
 803e1aa:	f000 81d8 	beq.w	803e55e <_dtoa_r+0xb56>
 803e1ae:	461a      	mov	r2, r3
 803e1b0:	4601      	mov	r1, r0
 803e1b2:	4648      	mov	r0, r9
 803e1b4:	f000 fbee 	bl	803e994 <__pow5mult>
 803e1b8:	9b07      	ldr	r3, [sp, #28]
 803e1ba:	2b01      	cmp	r3, #1
 803e1bc:	4604      	mov	r4, r0
 803e1be:	f300 809f 	bgt.w	803e300 <_dtoa_r+0x8f8>
 803e1c2:	9b04      	ldr	r3, [sp, #16]
 803e1c4:	2b00      	cmp	r3, #0
 803e1c6:	f040 8097 	bne.w	803e2f8 <_dtoa_r+0x8f0>
 803e1ca:	9b05      	ldr	r3, [sp, #20]
 803e1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803e1d0:	2b00      	cmp	r3, #0
 803e1d2:	f040 8093 	bne.w	803e2fc <_dtoa_r+0x8f4>
 803e1d6:	9b05      	ldr	r3, [sp, #20]
 803e1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 803e1dc:	0d1b      	lsrs	r3, r3, #20
 803e1de:	051b      	lsls	r3, r3, #20
 803e1e0:	b133      	cbz	r3, 803e1f0 <_dtoa_r+0x7e8>
 803e1e2:	9b00      	ldr	r3, [sp, #0]
 803e1e4:	3301      	adds	r3, #1
 803e1e6:	9300      	str	r3, [sp, #0]
 803e1e8:	9b06      	ldr	r3, [sp, #24]
 803e1ea:	3301      	adds	r3, #1
 803e1ec:	9306      	str	r3, [sp, #24]
 803e1ee:	2301      	movs	r3, #1
 803e1f0:	9308      	str	r3, [sp, #32]
 803e1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803e1f4:	2b00      	cmp	r3, #0
 803e1f6:	f000 81b8 	beq.w	803e56a <_dtoa_r+0xb62>
 803e1fa:	6923      	ldr	r3, [r4, #16]
 803e1fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 803e200:	6918      	ldr	r0, [r3, #16]
 803e202:	f000 fac3 	bl	803e78c <__hi0bits>
 803e206:	f1c0 0020 	rsb	r0, r0, #32
 803e20a:	9b06      	ldr	r3, [sp, #24]
 803e20c:	4418      	add	r0, r3
 803e20e:	f010 001f 	ands.w	r0, r0, #31
 803e212:	f000 8082 	beq.w	803e31a <_dtoa_r+0x912>
 803e216:	f1c0 0320 	rsb	r3, r0, #32
 803e21a:	2b04      	cmp	r3, #4
 803e21c:	dd73      	ble.n	803e306 <_dtoa_r+0x8fe>
 803e21e:	9b00      	ldr	r3, [sp, #0]
 803e220:	f1c0 001c 	rsb	r0, r0, #28
 803e224:	4403      	add	r3, r0
 803e226:	9300      	str	r3, [sp, #0]
 803e228:	9b06      	ldr	r3, [sp, #24]
 803e22a:	4403      	add	r3, r0
 803e22c:	4406      	add	r6, r0
 803e22e:	9306      	str	r3, [sp, #24]
 803e230:	9b00      	ldr	r3, [sp, #0]
 803e232:	2b00      	cmp	r3, #0
 803e234:	dd05      	ble.n	803e242 <_dtoa_r+0x83a>
 803e236:	9902      	ldr	r1, [sp, #8]
 803e238:	461a      	mov	r2, r3
 803e23a:	4648      	mov	r0, r9
 803e23c:	f000 fc04 	bl	803ea48 <__lshift>
 803e240:	9002      	str	r0, [sp, #8]
 803e242:	9b06      	ldr	r3, [sp, #24]
 803e244:	2b00      	cmp	r3, #0
 803e246:	dd05      	ble.n	803e254 <_dtoa_r+0x84c>
 803e248:	4621      	mov	r1, r4
 803e24a:	461a      	mov	r2, r3
 803e24c:	4648      	mov	r0, r9
 803e24e:	f000 fbfb 	bl	803ea48 <__lshift>
 803e252:	4604      	mov	r4, r0
 803e254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 803e256:	2b00      	cmp	r3, #0
 803e258:	d061      	beq.n	803e31e <_dtoa_r+0x916>
 803e25a:	9802      	ldr	r0, [sp, #8]
 803e25c:	4621      	mov	r1, r4
 803e25e:	f000 fc5f 	bl	803eb20 <__mcmp>
 803e262:	2800      	cmp	r0, #0
 803e264:	da5b      	bge.n	803e31e <_dtoa_r+0x916>
 803e266:	2300      	movs	r3, #0
 803e268:	9902      	ldr	r1, [sp, #8]
 803e26a:	220a      	movs	r2, #10
 803e26c:	4648      	mov	r0, r9
 803e26e:	f000 fa47 	bl	803e700 <__multadd>
 803e272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803e274:	9002      	str	r0, [sp, #8]
 803e276:	f107 38ff 	add.w	r8, r7, #4294967295
 803e27a:	2b00      	cmp	r3, #0
 803e27c:	f000 8177 	beq.w	803e56e <_dtoa_r+0xb66>
 803e280:	4629      	mov	r1, r5
 803e282:	2300      	movs	r3, #0
 803e284:	220a      	movs	r2, #10
 803e286:	4648      	mov	r0, r9
 803e288:	f000 fa3a 	bl	803e700 <__multadd>
 803e28c:	f1bb 0f00 	cmp.w	fp, #0
 803e290:	4605      	mov	r5, r0
 803e292:	dc6f      	bgt.n	803e374 <_dtoa_r+0x96c>
 803e294:	9b07      	ldr	r3, [sp, #28]
 803e296:	2b02      	cmp	r3, #2
 803e298:	dc49      	bgt.n	803e32e <_dtoa_r+0x926>
 803e29a:	e06b      	b.n	803e374 <_dtoa_r+0x96c>
 803e29c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 803e29e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 803e2a2:	e73c      	b.n	803e11e <_dtoa_r+0x716>
 803e2a4:	3fe00000 	.word	0x3fe00000
 803e2a8:	40240000 	.word	0x40240000
 803e2ac:	9b03      	ldr	r3, [sp, #12]
 803e2ae:	1e5c      	subs	r4, r3, #1
 803e2b0:	9b08      	ldr	r3, [sp, #32]
 803e2b2:	42a3      	cmp	r3, r4
 803e2b4:	db09      	blt.n	803e2ca <_dtoa_r+0x8c2>
 803e2b6:	1b1c      	subs	r4, r3, r4
 803e2b8:	9b03      	ldr	r3, [sp, #12]
 803e2ba:	2b00      	cmp	r3, #0
 803e2bc:	f6bf af30 	bge.w	803e120 <_dtoa_r+0x718>
 803e2c0:	9b00      	ldr	r3, [sp, #0]
 803e2c2:	9a03      	ldr	r2, [sp, #12]
 803e2c4:	1a9e      	subs	r6, r3, r2
 803e2c6:	2300      	movs	r3, #0
 803e2c8:	e72b      	b.n	803e122 <_dtoa_r+0x71a>
 803e2ca:	9b08      	ldr	r3, [sp, #32]
 803e2cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 803e2ce:	9408      	str	r4, [sp, #32]
 803e2d0:	1ae3      	subs	r3, r4, r3
 803e2d2:	441a      	add	r2, r3
 803e2d4:	9e00      	ldr	r6, [sp, #0]
 803e2d6:	9b03      	ldr	r3, [sp, #12]
 803e2d8:	920d      	str	r2, [sp, #52]	@ 0x34
 803e2da:	2400      	movs	r4, #0
 803e2dc:	e721      	b.n	803e122 <_dtoa_r+0x71a>
 803e2de:	9c08      	ldr	r4, [sp, #32]
 803e2e0:	9e00      	ldr	r6, [sp, #0]
 803e2e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 803e2e4:	e728      	b.n	803e138 <_dtoa_r+0x730>
 803e2e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 803e2ea:	e751      	b.n	803e190 <_dtoa_r+0x788>
 803e2ec:	9a08      	ldr	r2, [sp, #32]
 803e2ee:	9902      	ldr	r1, [sp, #8]
 803e2f0:	e750      	b.n	803e194 <_dtoa_r+0x78c>
 803e2f2:	f8cd 8008 	str.w	r8, [sp, #8]
 803e2f6:	e751      	b.n	803e19c <_dtoa_r+0x794>
 803e2f8:	2300      	movs	r3, #0
 803e2fa:	e779      	b.n	803e1f0 <_dtoa_r+0x7e8>
 803e2fc:	9b04      	ldr	r3, [sp, #16]
 803e2fe:	e777      	b.n	803e1f0 <_dtoa_r+0x7e8>
 803e300:	2300      	movs	r3, #0
 803e302:	9308      	str	r3, [sp, #32]
 803e304:	e779      	b.n	803e1fa <_dtoa_r+0x7f2>
 803e306:	d093      	beq.n	803e230 <_dtoa_r+0x828>
 803e308:	9a00      	ldr	r2, [sp, #0]
 803e30a:	331c      	adds	r3, #28
 803e30c:	441a      	add	r2, r3
 803e30e:	9200      	str	r2, [sp, #0]
 803e310:	9a06      	ldr	r2, [sp, #24]
 803e312:	441a      	add	r2, r3
 803e314:	441e      	add	r6, r3
 803e316:	9206      	str	r2, [sp, #24]
 803e318:	e78a      	b.n	803e230 <_dtoa_r+0x828>
 803e31a:	4603      	mov	r3, r0
 803e31c:	e7f4      	b.n	803e308 <_dtoa_r+0x900>
 803e31e:	9b03      	ldr	r3, [sp, #12]
 803e320:	2b00      	cmp	r3, #0
 803e322:	46b8      	mov	r8, r7
 803e324:	dc20      	bgt.n	803e368 <_dtoa_r+0x960>
 803e326:	469b      	mov	fp, r3
 803e328:	9b07      	ldr	r3, [sp, #28]
 803e32a:	2b02      	cmp	r3, #2
 803e32c:	dd1e      	ble.n	803e36c <_dtoa_r+0x964>
 803e32e:	f1bb 0f00 	cmp.w	fp, #0
 803e332:	f47f adb1 	bne.w	803de98 <_dtoa_r+0x490>
 803e336:	4621      	mov	r1, r4
 803e338:	465b      	mov	r3, fp
 803e33a:	2205      	movs	r2, #5
 803e33c:	4648      	mov	r0, r9
 803e33e:	f000 f9df 	bl	803e700 <__multadd>
 803e342:	4601      	mov	r1, r0
 803e344:	4604      	mov	r4, r0
 803e346:	9802      	ldr	r0, [sp, #8]
 803e348:	f000 fbea 	bl	803eb20 <__mcmp>
 803e34c:	2800      	cmp	r0, #0
 803e34e:	f77f ada3 	ble.w	803de98 <_dtoa_r+0x490>
 803e352:	4656      	mov	r6, sl
 803e354:	2331      	movs	r3, #49	@ 0x31
 803e356:	f806 3b01 	strb.w	r3, [r6], #1
 803e35a:	f108 0801 	add.w	r8, r8, #1
 803e35e:	e59f      	b.n	803dea0 <_dtoa_r+0x498>
 803e360:	9c03      	ldr	r4, [sp, #12]
 803e362:	46b8      	mov	r8, r7
 803e364:	4625      	mov	r5, r4
 803e366:	e7f4      	b.n	803e352 <_dtoa_r+0x94a>
 803e368:	f8dd b00c 	ldr.w	fp, [sp, #12]
 803e36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803e36e:	2b00      	cmp	r3, #0
 803e370:	f000 8101 	beq.w	803e576 <_dtoa_r+0xb6e>
 803e374:	2e00      	cmp	r6, #0
 803e376:	dd05      	ble.n	803e384 <_dtoa_r+0x97c>
 803e378:	4629      	mov	r1, r5
 803e37a:	4632      	mov	r2, r6
 803e37c:	4648      	mov	r0, r9
 803e37e:	f000 fb63 	bl	803ea48 <__lshift>
 803e382:	4605      	mov	r5, r0
 803e384:	9b08      	ldr	r3, [sp, #32]
 803e386:	2b00      	cmp	r3, #0
 803e388:	d05c      	beq.n	803e444 <_dtoa_r+0xa3c>
 803e38a:	6869      	ldr	r1, [r5, #4]
 803e38c:	4648      	mov	r0, r9
 803e38e:	f000 f955 	bl	803e63c <_Balloc>
 803e392:	4606      	mov	r6, r0
 803e394:	b928      	cbnz	r0, 803e3a2 <_dtoa_r+0x99a>
 803e396:	4b82      	ldr	r3, [pc, #520]	@ (803e5a0 <_dtoa_r+0xb98>)
 803e398:	4602      	mov	r2, r0
 803e39a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 803e39e:	f7ff bb4a 	b.w	803da36 <_dtoa_r+0x2e>
 803e3a2:	692a      	ldr	r2, [r5, #16]
 803e3a4:	3202      	adds	r2, #2
 803e3a6:	0092      	lsls	r2, r2, #2
 803e3a8:	f105 010c 	add.w	r1, r5, #12
 803e3ac:	300c      	adds	r0, #12
 803e3ae:	f7ff fa39 	bl	803d824 <memcpy>
 803e3b2:	2201      	movs	r2, #1
 803e3b4:	4631      	mov	r1, r6
 803e3b6:	4648      	mov	r0, r9
 803e3b8:	f000 fb46 	bl	803ea48 <__lshift>
 803e3bc:	f10a 0301 	add.w	r3, sl, #1
 803e3c0:	9300      	str	r3, [sp, #0]
 803e3c2:	eb0a 030b 	add.w	r3, sl, fp
 803e3c6:	9308      	str	r3, [sp, #32]
 803e3c8:	9b04      	ldr	r3, [sp, #16]
 803e3ca:	f003 0301 	and.w	r3, r3, #1
 803e3ce:	462f      	mov	r7, r5
 803e3d0:	9306      	str	r3, [sp, #24]
 803e3d2:	4605      	mov	r5, r0
 803e3d4:	9b00      	ldr	r3, [sp, #0]
 803e3d6:	9802      	ldr	r0, [sp, #8]
 803e3d8:	4621      	mov	r1, r4
 803e3da:	f103 3bff 	add.w	fp, r3, #4294967295
 803e3de:	f7ff fa8b 	bl	803d8f8 <quorem>
 803e3e2:	4603      	mov	r3, r0
 803e3e4:	3330      	adds	r3, #48	@ 0x30
 803e3e6:	9003      	str	r0, [sp, #12]
 803e3e8:	4639      	mov	r1, r7
 803e3ea:	9802      	ldr	r0, [sp, #8]
 803e3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 803e3ee:	f000 fb97 	bl	803eb20 <__mcmp>
 803e3f2:	462a      	mov	r2, r5
 803e3f4:	9004      	str	r0, [sp, #16]
 803e3f6:	4621      	mov	r1, r4
 803e3f8:	4648      	mov	r0, r9
 803e3fa:	f000 fbad 	bl	803eb58 <__mdiff>
 803e3fe:	68c2      	ldr	r2, [r0, #12]
 803e400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803e402:	4606      	mov	r6, r0
 803e404:	bb02      	cbnz	r2, 803e448 <_dtoa_r+0xa40>
 803e406:	4601      	mov	r1, r0
 803e408:	9802      	ldr	r0, [sp, #8]
 803e40a:	f000 fb89 	bl	803eb20 <__mcmp>
 803e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803e410:	4602      	mov	r2, r0
 803e412:	4631      	mov	r1, r6
 803e414:	4648      	mov	r0, r9
 803e416:	920c      	str	r2, [sp, #48]	@ 0x30
 803e418:	9309      	str	r3, [sp, #36]	@ 0x24
 803e41a:	f000 f94f 	bl	803e6bc <_Bfree>
 803e41e:	9b07      	ldr	r3, [sp, #28]
 803e420:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 803e422:	9e00      	ldr	r6, [sp, #0]
 803e424:	ea42 0103 	orr.w	r1, r2, r3
 803e428:	9b06      	ldr	r3, [sp, #24]
 803e42a:	4319      	orrs	r1, r3
 803e42c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803e42e:	d10d      	bne.n	803e44c <_dtoa_r+0xa44>
 803e430:	2b39      	cmp	r3, #57	@ 0x39
 803e432:	d027      	beq.n	803e484 <_dtoa_r+0xa7c>
 803e434:	9a04      	ldr	r2, [sp, #16]
 803e436:	2a00      	cmp	r2, #0
 803e438:	dd01      	ble.n	803e43e <_dtoa_r+0xa36>
 803e43a:	9b03      	ldr	r3, [sp, #12]
 803e43c:	3331      	adds	r3, #49	@ 0x31
 803e43e:	f88b 3000 	strb.w	r3, [fp]
 803e442:	e52e      	b.n	803dea2 <_dtoa_r+0x49a>
 803e444:	4628      	mov	r0, r5
 803e446:	e7b9      	b.n	803e3bc <_dtoa_r+0x9b4>
 803e448:	2201      	movs	r2, #1
 803e44a:	e7e2      	b.n	803e412 <_dtoa_r+0xa0a>
 803e44c:	9904      	ldr	r1, [sp, #16]
 803e44e:	2900      	cmp	r1, #0
 803e450:	db04      	blt.n	803e45c <_dtoa_r+0xa54>
 803e452:	9807      	ldr	r0, [sp, #28]
 803e454:	4301      	orrs	r1, r0
 803e456:	9806      	ldr	r0, [sp, #24]
 803e458:	4301      	orrs	r1, r0
 803e45a:	d120      	bne.n	803e49e <_dtoa_r+0xa96>
 803e45c:	2a00      	cmp	r2, #0
 803e45e:	ddee      	ble.n	803e43e <_dtoa_r+0xa36>
 803e460:	9902      	ldr	r1, [sp, #8]
 803e462:	9300      	str	r3, [sp, #0]
 803e464:	2201      	movs	r2, #1
 803e466:	4648      	mov	r0, r9
 803e468:	f000 faee 	bl	803ea48 <__lshift>
 803e46c:	4621      	mov	r1, r4
 803e46e:	9002      	str	r0, [sp, #8]
 803e470:	f000 fb56 	bl	803eb20 <__mcmp>
 803e474:	2800      	cmp	r0, #0
 803e476:	9b00      	ldr	r3, [sp, #0]
 803e478:	dc02      	bgt.n	803e480 <_dtoa_r+0xa78>
 803e47a:	d1e0      	bne.n	803e43e <_dtoa_r+0xa36>
 803e47c:	07da      	lsls	r2, r3, #31
 803e47e:	d5de      	bpl.n	803e43e <_dtoa_r+0xa36>
 803e480:	2b39      	cmp	r3, #57	@ 0x39
 803e482:	d1da      	bne.n	803e43a <_dtoa_r+0xa32>
 803e484:	2339      	movs	r3, #57	@ 0x39
 803e486:	f88b 3000 	strb.w	r3, [fp]
 803e48a:	4633      	mov	r3, r6
 803e48c:	461e      	mov	r6, r3
 803e48e:	3b01      	subs	r3, #1
 803e490:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 803e494:	2a39      	cmp	r2, #57	@ 0x39
 803e496:	d04e      	beq.n	803e536 <_dtoa_r+0xb2e>
 803e498:	3201      	adds	r2, #1
 803e49a:	701a      	strb	r2, [r3, #0]
 803e49c:	e501      	b.n	803dea2 <_dtoa_r+0x49a>
 803e49e:	2a00      	cmp	r2, #0
 803e4a0:	dd03      	ble.n	803e4aa <_dtoa_r+0xaa2>
 803e4a2:	2b39      	cmp	r3, #57	@ 0x39
 803e4a4:	d0ee      	beq.n	803e484 <_dtoa_r+0xa7c>
 803e4a6:	3301      	adds	r3, #1
 803e4a8:	e7c9      	b.n	803e43e <_dtoa_r+0xa36>
 803e4aa:	9a00      	ldr	r2, [sp, #0]
 803e4ac:	9908      	ldr	r1, [sp, #32]
 803e4ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 803e4b2:	428a      	cmp	r2, r1
 803e4b4:	d028      	beq.n	803e508 <_dtoa_r+0xb00>
 803e4b6:	9902      	ldr	r1, [sp, #8]
 803e4b8:	2300      	movs	r3, #0
 803e4ba:	220a      	movs	r2, #10
 803e4bc:	4648      	mov	r0, r9
 803e4be:	f000 f91f 	bl	803e700 <__multadd>
 803e4c2:	42af      	cmp	r7, r5
 803e4c4:	9002      	str	r0, [sp, #8]
 803e4c6:	f04f 0300 	mov.w	r3, #0
 803e4ca:	f04f 020a 	mov.w	r2, #10
 803e4ce:	4639      	mov	r1, r7
 803e4d0:	4648      	mov	r0, r9
 803e4d2:	d107      	bne.n	803e4e4 <_dtoa_r+0xadc>
 803e4d4:	f000 f914 	bl	803e700 <__multadd>
 803e4d8:	4607      	mov	r7, r0
 803e4da:	4605      	mov	r5, r0
 803e4dc:	9b00      	ldr	r3, [sp, #0]
 803e4de:	3301      	adds	r3, #1
 803e4e0:	9300      	str	r3, [sp, #0]
 803e4e2:	e777      	b.n	803e3d4 <_dtoa_r+0x9cc>
 803e4e4:	f000 f90c 	bl	803e700 <__multadd>
 803e4e8:	4629      	mov	r1, r5
 803e4ea:	4607      	mov	r7, r0
 803e4ec:	2300      	movs	r3, #0
 803e4ee:	220a      	movs	r2, #10
 803e4f0:	4648      	mov	r0, r9
 803e4f2:	f000 f905 	bl	803e700 <__multadd>
 803e4f6:	4605      	mov	r5, r0
 803e4f8:	e7f0      	b.n	803e4dc <_dtoa_r+0xad4>
 803e4fa:	f1bb 0f00 	cmp.w	fp, #0
 803e4fe:	bfcc      	ite	gt
 803e500:	465e      	movgt	r6, fp
 803e502:	2601      	movle	r6, #1
 803e504:	4456      	add	r6, sl
 803e506:	2700      	movs	r7, #0
 803e508:	9902      	ldr	r1, [sp, #8]
 803e50a:	9300      	str	r3, [sp, #0]
 803e50c:	2201      	movs	r2, #1
 803e50e:	4648      	mov	r0, r9
 803e510:	f000 fa9a 	bl	803ea48 <__lshift>
 803e514:	4621      	mov	r1, r4
 803e516:	9002      	str	r0, [sp, #8]
 803e518:	f000 fb02 	bl	803eb20 <__mcmp>
 803e51c:	2800      	cmp	r0, #0
 803e51e:	dcb4      	bgt.n	803e48a <_dtoa_r+0xa82>
 803e520:	d102      	bne.n	803e528 <_dtoa_r+0xb20>
 803e522:	9b00      	ldr	r3, [sp, #0]
 803e524:	07db      	lsls	r3, r3, #31
 803e526:	d4b0      	bmi.n	803e48a <_dtoa_r+0xa82>
 803e528:	4633      	mov	r3, r6
 803e52a:	461e      	mov	r6, r3
 803e52c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803e530:	2a30      	cmp	r2, #48	@ 0x30
 803e532:	d0fa      	beq.n	803e52a <_dtoa_r+0xb22>
 803e534:	e4b5      	b.n	803dea2 <_dtoa_r+0x49a>
 803e536:	459a      	cmp	sl, r3
 803e538:	d1a8      	bne.n	803e48c <_dtoa_r+0xa84>
 803e53a:	2331      	movs	r3, #49	@ 0x31
 803e53c:	f108 0801 	add.w	r8, r8, #1
 803e540:	f88a 3000 	strb.w	r3, [sl]
 803e544:	e4ad      	b.n	803dea2 <_dtoa_r+0x49a>
 803e546:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 803e548:	f8df a058 	ldr.w	sl, [pc, #88]	@ 803e5a4 <_dtoa_r+0xb9c>
 803e54c:	b11b      	cbz	r3, 803e556 <_dtoa_r+0xb4e>
 803e54e:	f10a 0308 	add.w	r3, sl, #8
 803e552:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 803e554:	6013      	str	r3, [r2, #0]
 803e556:	4650      	mov	r0, sl
 803e558:	b017      	add	sp, #92	@ 0x5c
 803e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803e55e:	9b07      	ldr	r3, [sp, #28]
 803e560:	2b01      	cmp	r3, #1
 803e562:	f77f ae2e 	ble.w	803e1c2 <_dtoa_r+0x7ba>
 803e566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 803e568:	9308      	str	r3, [sp, #32]
 803e56a:	2001      	movs	r0, #1
 803e56c:	e64d      	b.n	803e20a <_dtoa_r+0x802>
 803e56e:	f1bb 0f00 	cmp.w	fp, #0
 803e572:	f77f aed9 	ble.w	803e328 <_dtoa_r+0x920>
 803e576:	4656      	mov	r6, sl
 803e578:	9802      	ldr	r0, [sp, #8]
 803e57a:	4621      	mov	r1, r4
 803e57c:	f7ff f9bc 	bl	803d8f8 <quorem>
 803e580:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 803e584:	f806 3b01 	strb.w	r3, [r6], #1
 803e588:	eba6 020a 	sub.w	r2, r6, sl
 803e58c:	4593      	cmp	fp, r2
 803e58e:	ddb4      	ble.n	803e4fa <_dtoa_r+0xaf2>
 803e590:	9902      	ldr	r1, [sp, #8]
 803e592:	2300      	movs	r3, #0
 803e594:	220a      	movs	r2, #10
 803e596:	4648      	mov	r0, r9
 803e598:	f000 f8b2 	bl	803e700 <__multadd>
 803e59c:	9002      	str	r0, [sp, #8]
 803e59e:	e7eb      	b.n	803e578 <_dtoa_r+0xb70>
 803e5a0:	08041ca9 	.word	0x08041ca9
 803e5a4:	08041c48 	.word	0x08041c48

0803e5a8 <_free_r>:
 803e5a8:	b538      	push	{r3, r4, r5, lr}
 803e5aa:	4605      	mov	r5, r0
 803e5ac:	2900      	cmp	r1, #0
 803e5ae:	d041      	beq.n	803e634 <_free_r+0x8c>
 803e5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803e5b4:	1f0c      	subs	r4, r1, #4
 803e5b6:	2b00      	cmp	r3, #0
 803e5b8:	bfb8      	it	lt
 803e5ba:	18e4      	addlt	r4, r4, r3
 803e5bc:	f7fe f88e 	bl	803c6dc <__malloc_lock>
 803e5c0:	4a1d      	ldr	r2, [pc, #116]	@ (803e638 <_free_r+0x90>)
 803e5c2:	6813      	ldr	r3, [r2, #0]
 803e5c4:	b933      	cbnz	r3, 803e5d4 <_free_r+0x2c>
 803e5c6:	6063      	str	r3, [r4, #4]
 803e5c8:	6014      	str	r4, [r2, #0]
 803e5ca:	4628      	mov	r0, r5
 803e5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803e5d0:	f7fe b88a 	b.w	803c6e8 <__malloc_unlock>
 803e5d4:	42a3      	cmp	r3, r4
 803e5d6:	d908      	bls.n	803e5ea <_free_r+0x42>
 803e5d8:	6820      	ldr	r0, [r4, #0]
 803e5da:	1821      	adds	r1, r4, r0
 803e5dc:	428b      	cmp	r3, r1
 803e5de:	bf01      	itttt	eq
 803e5e0:	6819      	ldreq	r1, [r3, #0]
 803e5e2:	685b      	ldreq	r3, [r3, #4]
 803e5e4:	1809      	addeq	r1, r1, r0
 803e5e6:	6021      	streq	r1, [r4, #0]
 803e5e8:	e7ed      	b.n	803e5c6 <_free_r+0x1e>
 803e5ea:	461a      	mov	r2, r3
 803e5ec:	685b      	ldr	r3, [r3, #4]
 803e5ee:	b10b      	cbz	r3, 803e5f4 <_free_r+0x4c>
 803e5f0:	42a3      	cmp	r3, r4
 803e5f2:	d9fa      	bls.n	803e5ea <_free_r+0x42>
 803e5f4:	6811      	ldr	r1, [r2, #0]
 803e5f6:	1850      	adds	r0, r2, r1
 803e5f8:	42a0      	cmp	r0, r4
 803e5fa:	d10b      	bne.n	803e614 <_free_r+0x6c>
 803e5fc:	6820      	ldr	r0, [r4, #0]
 803e5fe:	4401      	add	r1, r0
 803e600:	1850      	adds	r0, r2, r1
 803e602:	4283      	cmp	r3, r0
 803e604:	6011      	str	r1, [r2, #0]
 803e606:	d1e0      	bne.n	803e5ca <_free_r+0x22>
 803e608:	6818      	ldr	r0, [r3, #0]
 803e60a:	685b      	ldr	r3, [r3, #4]
 803e60c:	6053      	str	r3, [r2, #4]
 803e60e:	4408      	add	r0, r1
 803e610:	6010      	str	r0, [r2, #0]
 803e612:	e7da      	b.n	803e5ca <_free_r+0x22>
 803e614:	d902      	bls.n	803e61c <_free_r+0x74>
 803e616:	230c      	movs	r3, #12
 803e618:	602b      	str	r3, [r5, #0]
 803e61a:	e7d6      	b.n	803e5ca <_free_r+0x22>
 803e61c:	6820      	ldr	r0, [r4, #0]
 803e61e:	1821      	adds	r1, r4, r0
 803e620:	428b      	cmp	r3, r1
 803e622:	bf04      	itt	eq
 803e624:	6819      	ldreq	r1, [r3, #0]
 803e626:	685b      	ldreq	r3, [r3, #4]
 803e628:	6063      	str	r3, [r4, #4]
 803e62a:	bf04      	itt	eq
 803e62c:	1809      	addeq	r1, r1, r0
 803e62e:	6021      	streq	r1, [r4, #0]
 803e630:	6054      	str	r4, [r2, #4]
 803e632:	e7ca      	b.n	803e5ca <_free_r+0x22>
 803e634:	bd38      	pop	{r3, r4, r5, pc}
 803e636:	bf00      	nop
 803e638:	2000b990 	.word	0x2000b990

0803e63c <_Balloc>:
 803e63c:	b570      	push	{r4, r5, r6, lr}
 803e63e:	69c6      	ldr	r6, [r0, #28]
 803e640:	4604      	mov	r4, r0
 803e642:	460d      	mov	r5, r1
 803e644:	b976      	cbnz	r6, 803e664 <_Balloc+0x28>
 803e646:	2010      	movs	r0, #16
 803e648:	f7fd ff96 	bl	803c578 <malloc>
 803e64c:	4602      	mov	r2, r0
 803e64e:	61e0      	str	r0, [r4, #28]
 803e650:	b920      	cbnz	r0, 803e65c <_Balloc+0x20>
 803e652:	4b18      	ldr	r3, [pc, #96]	@ (803e6b4 <_Balloc+0x78>)
 803e654:	4818      	ldr	r0, [pc, #96]	@ (803e6b8 <_Balloc+0x7c>)
 803e656:	216b      	movs	r1, #107	@ 0x6b
 803e658:	f7fd ff66 	bl	803c528 <__assert_func>
 803e65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803e660:	6006      	str	r6, [r0, #0]
 803e662:	60c6      	str	r6, [r0, #12]
 803e664:	69e6      	ldr	r6, [r4, #28]
 803e666:	68f3      	ldr	r3, [r6, #12]
 803e668:	b183      	cbz	r3, 803e68c <_Balloc+0x50>
 803e66a:	69e3      	ldr	r3, [r4, #28]
 803e66c:	68db      	ldr	r3, [r3, #12]
 803e66e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 803e672:	b9b8      	cbnz	r0, 803e6a4 <_Balloc+0x68>
 803e674:	2101      	movs	r1, #1
 803e676:	fa01 f605 	lsl.w	r6, r1, r5
 803e67a:	1d72      	adds	r2, r6, #5
 803e67c:	0092      	lsls	r2, r2, #2
 803e67e:	4620      	mov	r0, r4
 803e680:	f000 ff3a 	bl	803f4f8 <_calloc_r>
 803e684:	b160      	cbz	r0, 803e6a0 <_Balloc+0x64>
 803e686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 803e68a:	e00e      	b.n	803e6aa <_Balloc+0x6e>
 803e68c:	2221      	movs	r2, #33	@ 0x21
 803e68e:	2104      	movs	r1, #4
 803e690:	4620      	mov	r0, r4
 803e692:	f000 ff31 	bl	803f4f8 <_calloc_r>
 803e696:	69e3      	ldr	r3, [r4, #28]
 803e698:	60f0      	str	r0, [r6, #12]
 803e69a:	68db      	ldr	r3, [r3, #12]
 803e69c:	2b00      	cmp	r3, #0
 803e69e:	d1e4      	bne.n	803e66a <_Balloc+0x2e>
 803e6a0:	2000      	movs	r0, #0
 803e6a2:	bd70      	pop	{r4, r5, r6, pc}
 803e6a4:	6802      	ldr	r2, [r0, #0]
 803e6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 803e6aa:	2300      	movs	r3, #0
 803e6ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 803e6b0:	e7f7      	b.n	803e6a2 <_Balloc+0x66>
 803e6b2:	bf00      	nop
 803e6b4:	08041bd7 	.word	0x08041bd7
 803e6b8:	08041cba 	.word	0x08041cba

0803e6bc <_Bfree>:
 803e6bc:	b570      	push	{r4, r5, r6, lr}
 803e6be:	69c6      	ldr	r6, [r0, #28]
 803e6c0:	4605      	mov	r5, r0
 803e6c2:	460c      	mov	r4, r1
 803e6c4:	b976      	cbnz	r6, 803e6e4 <_Bfree+0x28>
 803e6c6:	2010      	movs	r0, #16
 803e6c8:	f7fd ff56 	bl	803c578 <malloc>
 803e6cc:	4602      	mov	r2, r0
 803e6ce:	61e8      	str	r0, [r5, #28]
 803e6d0:	b920      	cbnz	r0, 803e6dc <_Bfree+0x20>
 803e6d2:	4b09      	ldr	r3, [pc, #36]	@ (803e6f8 <_Bfree+0x3c>)
 803e6d4:	4809      	ldr	r0, [pc, #36]	@ (803e6fc <_Bfree+0x40>)
 803e6d6:	218f      	movs	r1, #143	@ 0x8f
 803e6d8:	f7fd ff26 	bl	803c528 <__assert_func>
 803e6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803e6e0:	6006      	str	r6, [r0, #0]
 803e6e2:	60c6      	str	r6, [r0, #12]
 803e6e4:	b13c      	cbz	r4, 803e6f6 <_Bfree+0x3a>
 803e6e6:	69eb      	ldr	r3, [r5, #28]
 803e6e8:	6862      	ldr	r2, [r4, #4]
 803e6ea:	68db      	ldr	r3, [r3, #12]
 803e6ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 803e6f0:	6021      	str	r1, [r4, #0]
 803e6f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 803e6f6:	bd70      	pop	{r4, r5, r6, pc}
 803e6f8:	08041bd7 	.word	0x08041bd7
 803e6fc:	08041cba 	.word	0x08041cba

0803e700 <__multadd>:
 803e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803e704:	690d      	ldr	r5, [r1, #16]
 803e706:	4607      	mov	r7, r0
 803e708:	460c      	mov	r4, r1
 803e70a:	461e      	mov	r6, r3
 803e70c:	f101 0c14 	add.w	ip, r1, #20
 803e710:	2000      	movs	r0, #0
 803e712:	f8dc 3000 	ldr.w	r3, [ip]
 803e716:	b299      	uxth	r1, r3
 803e718:	fb02 6101 	mla	r1, r2, r1, r6
 803e71c:	0c1e      	lsrs	r6, r3, #16
 803e71e:	0c0b      	lsrs	r3, r1, #16
 803e720:	fb02 3306 	mla	r3, r2, r6, r3
 803e724:	b289      	uxth	r1, r1
 803e726:	3001      	adds	r0, #1
 803e728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 803e72c:	4285      	cmp	r5, r0
 803e72e:	f84c 1b04 	str.w	r1, [ip], #4
 803e732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 803e736:	dcec      	bgt.n	803e712 <__multadd+0x12>
 803e738:	b30e      	cbz	r6, 803e77e <__multadd+0x7e>
 803e73a:	68a3      	ldr	r3, [r4, #8]
 803e73c:	42ab      	cmp	r3, r5
 803e73e:	dc19      	bgt.n	803e774 <__multadd+0x74>
 803e740:	6861      	ldr	r1, [r4, #4]
 803e742:	4638      	mov	r0, r7
 803e744:	3101      	adds	r1, #1
 803e746:	f7ff ff79 	bl	803e63c <_Balloc>
 803e74a:	4680      	mov	r8, r0
 803e74c:	b928      	cbnz	r0, 803e75a <__multadd+0x5a>
 803e74e:	4602      	mov	r2, r0
 803e750:	4b0c      	ldr	r3, [pc, #48]	@ (803e784 <__multadd+0x84>)
 803e752:	480d      	ldr	r0, [pc, #52]	@ (803e788 <__multadd+0x88>)
 803e754:	21ba      	movs	r1, #186	@ 0xba
 803e756:	f7fd fee7 	bl	803c528 <__assert_func>
 803e75a:	6922      	ldr	r2, [r4, #16]
 803e75c:	3202      	adds	r2, #2
 803e75e:	f104 010c 	add.w	r1, r4, #12
 803e762:	0092      	lsls	r2, r2, #2
 803e764:	300c      	adds	r0, #12
 803e766:	f7ff f85d 	bl	803d824 <memcpy>
 803e76a:	4621      	mov	r1, r4
 803e76c:	4638      	mov	r0, r7
 803e76e:	f7ff ffa5 	bl	803e6bc <_Bfree>
 803e772:	4644      	mov	r4, r8
 803e774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 803e778:	3501      	adds	r5, #1
 803e77a:	615e      	str	r6, [r3, #20]
 803e77c:	6125      	str	r5, [r4, #16]
 803e77e:	4620      	mov	r0, r4
 803e780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803e784:	08041ca9 	.word	0x08041ca9
 803e788:	08041cba 	.word	0x08041cba

0803e78c <__hi0bits>:
 803e78c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 803e790:	4603      	mov	r3, r0
 803e792:	bf36      	itet	cc
 803e794:	0403      	lslcc	r3, r0, #16
 803e796:	2000      	movcs	r0, #0
 803e798:	2010      	movcc	r0, #16
 803e79a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 803e79e:	bf3c      	itt	cc
 803e7a0:	021b      	lslcc	r3, r3, #8
 803e7a2:	3008      	addcc	r0, #8
 803e7a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 803e7a8:	bf3c      	itt	cc
 803e7aa:	011b      	lslcc	r3, r3, #4
 803e7ac:	3004      	addcc	r0, #4
 803e7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803e7b2:	bf3c      	itt	cc
 803e7b4:	009b      	lslcc	r3, r3, #2
 803e7b6:	3002      	addcc	r0, #2
 803e7b8:	2b00      	cmp	r3, #0
 803e7ba:	db05      	blt.n	803e7c8 <__hi0bits+0x3c>
 803e7bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 803e7c0:	f100 0001 	add.w	r0, r0, #1
 803e7c4:	bf08      	it	eq
 803e7c6:	2020      	moveq	r0, #32
 803e7c8:	4770      	bx	lr

0803e7ca <__lo0bits>:
 803e7ca:	6803      	ldr	r3, [r0, #0]
 803e7cc:	4602      	mov	r2, r0
 803e7ce:	f013 0007 	ands.w	r0, r3, #7
 803e7d2:	d00b      	beq.n	803e7ec <__lo0bits+0x22>
 803e7d4:	07d9      	lsls	r1, r3, #31
 803e7d6:	d421      	bmi.n	803e81c <__lo0bits+0x52>
 803e7d8:	0798      	lsls	r0, r3, #30
 803e7da:	bf49      	itett	mi
 803e7dc:	085b      	lsrmi	r3, r3, #1
 803e7de:	089b      	lsrpl	r3, r3, #2
 803e7e0:	2001      	movmi	r0, #1
 803e7e2:	6013      	strmi	r3, [r2, #0]
 803e7e4:	bf5c      	itt	pl
 803e7e6:	6013      	strpl	r3, [r2, #0]
 803e7e8:	2002      	movpl	r0, #2
 803e7ea:	4770      	bx	lr
 803e7ec:	b299      	uxth	r1, r3
 803e7ee:	b909      	cbnz	r1, 803e7f4 <__lo0bits+0x2a>
 803e7f0:	0c1b      	lsrs	r3, r3, #16
 803e7f2:	2010      	movs	r0, #16
 803e7f4:	b2d9      	uxtb	r1, r3
 803e7f6:	b909      	cbnz	r1, 803e7fc <__lo0bits+0x32>
 803e7f8:	3008      	adds	r0, #8
 803e7fa:	0a1b      	lsrs	r3, r3, #8
 803e7fc:	0719      	lsls	r1, r3, #28
 803e7fe:	bf04      	itt	eq
 803e800:	091b      	lsreq	r3, r3, #4
 803e802:	3004      	addeq	r0, #4
 803e804:	0799      	lsls	r1, r3, #30
 803e806:	bf04      	itt	eq
 803e808:	089b      	lsreq	r3, r3, #2
 803e80a:	3002      	addeq	r0, #2
 803e80c:	07d9      	lsls	r1, r3, #31
 803e80e:	d403      	bmi.n	803e818 <__lo0bits+0x4e>
 803e810:	085b      	lsrs	r3, r3, #1
 803e812:	f100 0001 	add.w	r0, r0, #1
 803e816:	d003      	beq.n	803e820 <__lo0bits+0x56>
 803e818:	6013      	str	r3, [r2, #0]
 803e81a:	4770      	bx	lr
 803e81c:	2000      	movs	r0, #0
 803e81e:	4770      	bx	lr
 803e820:	2020      	movs	r0, #32
 803e822:	4770      	bx	lr

0803e824 <__i2b>:
 803e824:	b510      	push	{r4, lr}
 803e826:	460c      	mov	r4, r1
 803e828:	2101      	movs	r1, #1
 803e82a:	f7ff ff07 	bl	803e63c <_Balloc>
 803e82e:	4602      	mov	r2, r0
 803e830:	b928      	cbnz	r0, 803e83e <__i2b+0x1a>
 803e832:	4b05      	ldr	r3, [pc, #20]	@ (803e848 <__i2b+0x24>)
 803e834:	4805      	ldr	r0, [pc, #20]	@ (803e84c <__i2b+0x28>)
 803e836:	f240 1145 	movw	r1, #325	@ 0x145
 803e83a:	f7fd fe75 	bl	803c528 <__assert_func>
 803e83e:	2301      	movs	r3, #1
 803e840:	6144      	str	r4, [r0, #20]
 803e842:	6103      	str	r3, [r0, #16]
 803e844:	bd10      	pop	{r4, pc}
 803e846:	bf00      	nop
 803e848:	08041ca9 	.word	0x08041ca9
 803e84c:	08041cba 	.word	0x08041cba

0803e850 <__multiply>:
 803e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e854:	4617      	mov	r7, r2
 803e856:	690a      	ldr	r2, [r1, #16]
 803e858:	693b      	ldr	r3, [r7, #16]
 803e85a:	429a      	cmp	r2, r3
 803e85c:	bfa8      	it	ge
 803e85e:	463b      	movge	r3, r7
 803e860:	4689      	mov	r9, r1
 803e862:	bfa4      	itt	ge
 803e864:	460f      	movge	r7, r1
 803e866:	4699      	movge	r9, r3
 803e868:	693d      	ldr	r5, [r7, #16]
 803e86a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 803e86e:	68bb      	ldr	r3, [r7, #8]
 803e870:	6879      	ldr	r1, [r7, #4]
 803e872:	eb05 060a 	add.w	r6, r5, sl
 803e876:	42b3      	cmp	r3, r6
 803e878:	b085      	sub	sp, #20
 803e87a:	bfb8      	it	lt
 803e87c:	3101      	addlt	r1, #1
 803e87e:	f7ff fedd 	bl	803e63c <_Balloc>
 803e882:	b930      	cbnz	r0, 803e892 <__multiply+0x42>
 803e884:	4602      	mov	r2, r0
 803e886:	4b41      	ldr	r3, [pc, #260]	@ (803e98c <__multiply+0x13c>)
 803e888:	4841      	ldr	r0, [pc, #260]	@ (803e990 <__multiply+0x140>)
 803e88a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 803e88e:	f7fd fe4b 	bl	803c528 <__assert_func>
 803e892:	f100 0414 	add.w	r4, r0, #20
 803e896:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 803e89a:	4623      	mov	r3, r4
 803e89c:	2200      	movs	r2, #0
 803e89e:	4573      	cmp	r3, lr
 803e8a0:	d320      	bcc.n	803e8e4 <__multiply+0x94>
 803e8a2:	f107 0814 	add.w	r8, r7, #20
 803e8a6:	f109 0114 	add.w	r1, r9, #20
 803e8aa:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 803e8ae:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 803e8b2:	9302      	str	r3, [sp, #8]
 803e8b4:	1beb      	subs	r3, r5, r7
 803e8b6:	3b15      	subs	r3, #21
 803e8b8:	f023 0303 	bic.w	r3, r3, #3
 803e8bc:	3304      	adds	r3, #4
 803e8be:	3715      	adds	r7, #21
 803e8c0:	42bd      	cmp	r5, r7
 803e8c2:	bf38      	it	cc
 803e8c4:	2304      	movcc	r3, #4
 803e8c6:	9301      	str	r3, [sp, #4]
 803e8c8:	9b02      	ldr	r3, [sp, #8]
 803e8ca:	9103      	str	r1, [sp, #12]
 803e8cc:	428b      	cmp	r3, r1
 803e8ce:	d80c      	bhi.n	803e8ea <__multiply+0x9a>
 803e8d0:	2e00      	cmp	r6, #0
 803e8d2:	dd03      	ble.n	803e8dc <__multiply+0x8c>
 803e8d4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 803e8d8:	2b00      	cmp	r3, #0
 803e8da:	d055      	beq.n	803e988 <__multiply+0x138>
 803e8dc:	6106      	str	r6, [r0, #16]
 803e8de:	b005      	add	sp, #20
 803e8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803e8e4:	f843 2b04 	str.w	r2, [r3], #4
 803e8e8:	e7d9      	b.n	803e89e <__multiply+0x4e>
 803e8ea:	f8b1 a000 	ldrh.w	sl, [r1]
 803e8ee:	f1ba 0f00 	cmp.w	sl, #0
 803e8f2:	d01f      	beq.n	803e934 <__multiply+0xe4>
 803e8f4:	46c4      	mov	ip, r8
 803e8f6:	46a1      	mov	r9, r4
 803e8f8:	2700      	movs	r7, #0
 803e8fa:	f85c 2b04 	ldr.w	r2, [ip], #4
 803e8fe:	f8d9 3000 	ldr.w	r3, [r9]
 803e902:	fa1f fb82 	uxth.w	fp, r2
 803e906:	b29b      	uxth	r3, r3
 803e908:	fb0a 330b 	mla	r3, sl, fp, r3
 803e90c:	443b      	add	r3, r7
 803e90e:	f8d9 7000 	ldr.w	r7, [r9]
 803e912:	0c12      	lsrs	r2, r2, #16
 803e914:	0c3f      	lsrs	r7, r7, #16
 803e916:	fb0a 7202 	mla	r2, sl, r2, r7
 803e91a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 803e91e:	b29b      	uxth	r3, r3
 803e920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803e924:	4565      	cmp	r5, ip
 803e926:	f849 3b04 	str.w	r3, [r9], #4
 803e92a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 803e92e:	d8e4      	bhi.n	803e8fa <__multiply+0xaa>
 803e930:	9b01      	ldr	r3, [sp, #4]
 803e932:	50e7      	str	r7, [r4, r3]
 803e934:	9b03      	ldr	r3, [sp, #12]
 803e936:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 803e93a:	3104      	adds	r1, #4
 803e93c:	f1b9 0f00 	cmp.w	r9, #0
 803e940:	d020      	beq.n	803e984 <__multiply+0x134>
 803e942:	6823      	ldr	r3, [r4, #0]
 803e944:	4647      	mov	r7, r8
 803e946:	46a4      	mov	ip, r4
 803e948:	f04f 0a00 	mov.w	sl, #0
 803e94c:	f8b7 b000 	ldrh.w	fp, [r7]
 803e950:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 803e954:	fb09 220b 	mla	r2, r9, fp, r2
 803e958:	4452      	add	r2, sl
 803e95a:	b29b      	uxth	r3, r3
 803e95c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803e960:	f84c 3b04 	str.w	r3, [ip], #4
 803e964:	f857 3b04 	ldr.w	r3, [r7], #4
 803e968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803e96c:	f8bc 3000 	ldrh.w	r3, [ip]
 803e970:	fb09 330a 	mla	r3, r9, sl, r3
 803e974:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 803e978:	42bd      	cmp	r5, r7
 803e97a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 803e97e:	d8e5      	bhi.n	803e94c <__multiply+0xfc>
 803e980:	9a01      	ldr	r2, [sp, #4]
 803e982:	50a3      	str	r3, [r4, r2]
 803e984:	3404      	adds	r4, #4
 803e986:	e79f      	b.n	803e8c8 <__multiply+0x78>
 803e988:	3e01      	subs	r6, #1
 803e98a:	e7a1      	b.n	803e8d0 <__multiply+0x80>
 803e98c:	08041ca9 	.word	0x08041ca9
 803e990:	08041cba 	.word	0x08041cba

0803e994 <__pow5mult>:
 803e994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803e998:	4615      	mov	r5, r2
 803e99a:	f012 0203 	ands.w	r2, r2, #3
 803e99e:	4607      	mov	r7, r0
 803e9a0:	460e      	mov	r6, r1
 803e9a2:	d007      	beq.n	803e9b4 <__pow5mult+0x20>
 803e9a4:	4c25      	ldr	r4, [pc, #148]	@ (803ea3c <__pow5mult+0xa8>)
 803e9a6:	3a01      	subs	r2, #1
 803e9a8:	2300      	movs	r3, #0
 803e9aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 803e9ae:	f7ff fea7 	bl	803e700 <__multadd>
 803e9b2:	4606      	mov	r6, r0
 803e9b4:	10ad      	asrs	r5, r5, #2
 803e9b6:	d03d      	beq.n	803ea34 <__pow5mult+0xa0>
 803e9b8:	69fc      	ldr	r4, [r7, #28]
 803e9ba:	b97c      	cbnz	r4, 803e9dc <__pow5mult+0x48>
 803e9bc:	2010      	movs	r0, #16
 803e9be:	f7fd fddb 	bl	803c578 <malloc>
 803e9c2:	4602      	mov	r2, r0
 803e9c4:	61f8      	str	r0, [r7, #28]
 803e9c6:	b928      	cbnz	r0, 803e9d4 <__pow5mult+0x40>
 803e9c8:	4b1d      	ldr	r3, [pc, #116]	@ (803ea40 <__pow5mult+0xac>)
 803e9ca:	481e      	ldr	r0, [pc, #120]	@ (803ea44 <__pow5mult+0xb0>)
 803e9cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 803e9d0:	f7fd fdaa 	bl	803c528 <__assert_func>
 803e9d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 803e9d8:	6004      	str	r4, [r0, #0]
 803e9da:	60c4      	str	r4, [r0, #12]
 803e9dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 803e9e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 803e9e4:	b94c      	cbnz	r4, 803e9fa <__pow5mult+0x66>
 803e9e6:	f240 2171 	movw	r1, #625	@ 0x271
 803e9ea:	4638      	mov	r0, r7
 803e9ec:	f7ff ff1a 	bl	803e824 <__i2b>
 803e9f0:	2300      	movs	r3, #0
 803e9f2:	f8c8 0008 	str.w	r0, [r8, #8]
 803e9f6:	4604      	mov	r4, r0
 803e9f8:	6003      	str	r3, [r0, #0]
 803e9fa:	f04f 0900 	mov.w	r9, #0
 803e9fe:	07eb      	lsls	r3, r5, #31
 803ea00:	d50a      	bpl.n	803ea18 <__pow5mult+0x84>
 803ea02:	4631      	mov	r1, r6
 803ea04:	4622      	mov	r2, r4
 803ea06:	4638      	mov	r0, r7
 803ea08:	f7ff ff22 	bl	803e850 <__multiply>
 803ea0c:	4631      	mov	r1, r6
 803ea0e:	4680      	mov	r8, r0
 803ea10:	4638      	mov	r0, r7
 803ea12:	f7ff fe53 	bl	803e6bc <_Bfree>
 803ea16:	4646      	mov	r6, r8
 803ea18:	106d      	asrs	r5, r5, #1
 803ea1a:	d00b      	beq.n	803ea34 <__pow5mult+0xa0>
 803ea1c:	6820      	ldr	r0, [r4, #0]
 803ea1e:	b938      	cbnz	r0, 803ea30 <__pow5mult+0x9c>
 803ea20:	4622      	mov	r2, r4
 803ea22:	4621      	mov	r1, r4
 803ea24:	4638      	mov	r0, r7
 803ea26:	f7ff ff13 	bl	803e850 <__multiply>
 803ea2a:	6020      	str	r0, [r4, #0]
 803ea2c:	f8c0 9000 	str.w	r9, [r0]
 803ea30:	4604      	mov	r4, r0
 803ea32:	e7e4      	b.n	803e9fe <__pow5mult+0x6a>
 803ea34:	4630      	mov	r0, r6
 803ea36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803ea3a:	bf00      	nop
 803ea3c:	08043c30 	.word	0x08043c30
 803ea40:	08041bd7 	.word	0x08041bd7
 803ea44:	08041cba 	.word	0x08041cba

0803ea48 <__lshift>:
 803ea48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803ea4c:	460c      	mov	r4, r1
 803ea4e:	6849      	ldr	r1, [r1, #4]
 803ea50:	6923      	ldr	r3, [r4, #16]
 803ea52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803ea56:	68a3      	ldr	r3, [r4, #8]
 803ea58:	4607      	mov	r7, r0
 803ea5a:	4691      	mov	r9, r2
 803ea5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 803ea60:	f108 0601 	add.w	r6, r8, #1
 803ea64:	42b3      	cmp	r3, r6
 803ea66:	db0b      	blt.n	803ea80 <__lshift+0x38>
 803ea68:	4638      	mov	r0, r7
 803ea6a:	f7ff fde7 	bl	803e63c <_Balloc>
 803ea6e:	4605      	mov	r5, r0
 803ea70:	b948      	cbnz	r0, 803ea86 <__lshift+0x3e>
 803ea72:	4602      	mov	r2, r0
 803ea74:	4b28      	ldr	r3, [pc, #160]	@ (803eb18 <__lshift+0xd0>)
 803ea76:	4829      	ldr	r0, [pc, #164]	@ (803eb1c <__lshift+0xd4>)
 803ea78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 803ea7c:	f7fd fd54 	bl	803c528 <__assert_func>
 803ea80:	3101      	adds	r1, #1
 803ea82:	005b      	lsls	r3, r3, #1
 803ea84:	e7ee      	b.n	803ea64 <__lshift+0x1c>
 803ea86:	2300      	movs	r3, #0
 803ea88:	f100 0114 	add.w	r1, r0, #20
 803ea8c:	f100 0210 	add.w	r2, r0, #16
 803ea90:	4618      	mov	r0, r3
 803ea92:	4553      	cmp	r3, sl
 803ea94:	db33      	blt.n	803eafe <__lshift+0xb6>
 803ea96:	6920      	ldr	r0, [r4, #16]
 803ea98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 803ea9c:	f104 0314 	add.w	r3, r4, #20
 803eaa0:	f019 091f 	ands.w	r9, r9, #31
 803eaa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803eaa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 803eaac:	d02b      	beq.n	803eb06 <__lshift+0xbe>
 803eaae:	f1c9 0e20 	rsb	lr, r9, #32
 803eab2:	468a      	mov	sl, r1
 803eab4:	2200      	movs	r2, #0
 803eab6:	6818      	ldr	r0, [r3, #0]
 803eab8:	fa00 f009 	lsl.w	r0, r0, r9
 803eabc:	4310      	orrs	r0, r2
 803eabe:	f84a 0b04 	str.w	r0, [sl], #4
 803eac2:	f853 2b04 	ldr.w	r2, [r3], #4
 803eac6:	459c      	cmp	ip, r3
 803eac8:	fa22 f20e 	lsr.w	r2, r2, lr
 803eacc:	d8f3      	bhi.n	803eab6 <__lshift+0x6e>
 803eace:	ebac 0304 	sub.w	r3, ip, r4
 803ead2:	3b15      	subs	r3, #21
 803ead4:	f023 0303 	bic.w	r3, r3, #3
 803ead8:	3304      	adds	r3, #4
 803eada:	f104 0015 	add.w	r0, r4, #21
 803eade:	4560      	cmp	r0, ip
 803eae0:	bf88      	it	hi
 803eae2:	2304      	movhi	r3, #4
 803eae4:	50ca      	str	r2, [r1, r3]
 803eae6:	b10a      	cbz	r2, 803eaec <__lshift+0xa4>
 803eae8:	f108 0602 	add.w	r6, r8, #2
 803eaec:	3e01      	subs	r6, #1
 803eaee:	4638      	mov	r0, r7
 803eaf0:	612e      	str	r6, [r5, #16]
 803eaf2:	4621      	mov	r1, r4
 803eaf4:	f7ff fde2 	bl	803e6bc <_Bfree>
 803eaf8:	4628      	mov	r0, r5
 803eafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803eafe:	f842 0f04 	str.w	r0, [r2, #4]!
 803eb02:	3301      	adds	r3, #1
 803eb04:	e7c5      	b.n	803ea92 <__lshift+0x4a>
 803eb06:	3904      	subs	r1, #4
 803eb08:	f853 2b04 	ldr.w	r2, [r3], #4
 803eb0c:	f841 2f04 	str.w	r2, [r1, #4]!
 803eb10:	459c      	cmp	ip, r3
 803eb12:	d8f9      	bhi.n	803eb08 <__lshift+0xc0>
 803eb14:	e7ea      	b.n	803eaec <__lshift+0xa4>
 803eb16:	bf00      	nop
 803eb18:	08041ca9 	.word	0x08041ca9
 803eb1c:	08041cba 	.word	0x08041cba

0803eb20 <__mcmp>:
 803eb20:	690a      	ldr	r2, [r1, #16]
 803eb22:	4603      	mov	r3, r0
 803eb24:	6900      	ldr	r0, [r0, #16]
 803eb26:	1a80      	subs	r0, r0, r2
 803eb28:	b530      	push	{r4, r5, lr}
 803eb2a:	d10e      	bne.n	803eb4a <__mcmp+0x2a>
 803eb2c:	3314      	adds	r3, #20
 803eb2e:	3114      	adds	r1, #20
 803eb30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 803eb34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 803eb38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 803eb3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 803eb40:	4295      	cmp	r5, r2
 803eb42:	d003      	beq.n	803eb4c <__mcmp+0x2c>
 803eb44:	d205      	bcs.n	803eb52 <__mcmp+0x32>
 803eb46:	f04f 30ff 	mov.w	r0, #4294967295
 803eb4a:	bd30      	pop	{r4, r5, pc}
 803eb4c:	42a3      	cmp	r3, r4
 803eb4e:	d3f3      	bcc.n	803eb38 <__mcmp+0x18>
 803eb50:	e7fb      	b.n	803eb4a <__mcmp+0x2a>
 803eb52:	2001      	movs	r0, #1
 803eb54:	e7f9      	b.n	803eb4a <__mcmp+0x2a>
	...

0803eb58 <__mdiff>:
 803eb58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803eb5c:	4689      	mov	r9, r1
 803eb5e:	4606      	mov	r6, r0
 803eb60:	4611      	mov	r1, r2
 803eb62:	4648      	mov	r0, r9
 803eb64:	4614      	mov	r4, r2
 803eb66:	f7ff ffdb 	bl	803eb20 <__mcmp>
 803eb6a:	1e05      	subs	r5, r0, #0
 803eb6c:	d112      	bne.n	803eb94 <__mdiff+0x3c>
 803eb6e:	4629      	mov	r1, r5
 803eb70:	4630      	mov	r0, r6
 803eb72:	f7ff fd63 	bl	803e63c <_Balloc>
 803eb76:	4602      	mov	r2, r0
 803eb78:	b928      	cbnz	r0, 803eb86 <__mdiff+0x2e>
 803eb7a:	4b3f      	ldr	r3, [pc, #252]	@ (803ec78 <__mdiff+0x120>)
 803eb7c:	f240 2137 	movw	r1, #567	@ 0x237
 803eb80:	483e      	ldr	r0, [pc, #248]	@ (803ec7c <__mdiff+0x124>)
 803eb82:	f7fd fcd1 	bl	803c528 <__assert_func>
 803eb86:	2301      	movs	r3, #1
 803eb88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 803eb8c:	4610      	mov	r0, r2
 803eb8e:	b003      	add	sp, #12
 803eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803eb94:	bfbc      	itt	lt
 803eb96:	464b      	movlt	r3, r9
 803eb98:	46a1      	movlt	r9, r4
 803eb9a:	4630      	mov	r0, r6
 803eb9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 803eba0:	bfba      	itte	lt
 803eba2:	461c      	movlt	r4, r3
 803eba4:	2501      	movlt	r5, #1
 803eba6:	2500      	movge	r5, #0
 803eba8:	f7ff fd48 	bl	803e63c <_Balloc>
 803ebac:	4602      	mov	r2, r0
 803ebae:	b918      	cbnz	r0, 803ebb8 <__mdiff+0x60>
 803ebb0:	4b31      	ldr	r3, [pc, #196]	@ (803ec78 <__mdiff+0x120>)
 803ebb2:	f240 2145 	movw	r1, #581	@ 0x245
 803ebb6:	e7e3      	b.n	803eb80 <__mdiff+0x28>
 803ebb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 803ebbc:	6926      	ldr	r6, [r4, #16]
 803ebbe:	60c5      	str	r5, [r0, #12]
 803ebc0:	f109 0310 	add.w	r3, r9, #16
 803ebc4:	f109 0514 	add.w	r5, r9, #20
 803ebc8:	f104 0e14 	add.w	lr, r4, #20
 803ebcc:	f100 0b14 	add.w	fp, r0, #20
 803ebd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 803ebd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 803ebd8:	9301      	str	r3, [sp, #4]
 803ebda:	46d9      	mov	r9, fp
 803ebdc:	f04f 0c00 	mov.w	ip, #0
 803ebe0:	9b01      	ldr	r3, [sp, #4]
 803ebe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 803ebe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 803ebea:	9301      	str	r3, [sp, #4]
 803ebec:	fa1f f38a 	uxth.w	r3, sl
 803ebf0:	4619      	mov	r1, r3
 803ebf2:	b283      	uxth	r3, r0
 803ebf4:	1acb      	subs	r3, r1, r3
 803ebf6:	0c00      	lsrs	r0, r0, #16
 803ebf8:	4463      	add	r3, ip
 803ebfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 803ebfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 803ec02:	b29b      	uxth	r3, r3
 803ec04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 803ec08:	4576      	cmp	r6, lr
 803ec0a:	f849 3b04 	str.w	r3, [r9], #4
 803ec0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803ec12:	d8e5      	bhi.n	803ebe0 <__mdiff+0x88>
 803ec14:	1b33      	subs	r3, r6, r4
 803ec16:	3b15      	subs	r3, #21
 803ec18:	f023 0303 	bic.w	r3, r3, #3
 803ec1c:	3415      	adds	r4, #21
 803ec1e:	3304      	adds	r3, #4
 803ec20:	42a6      	cmp	r6, r4
 803ec22:	bf38      	it	cc
 803ec24:	2304      	movcc	r3, #4
 803ec26:	441d      	add	r5, r3
 803ec28:	445b      	add	r3, fp
 803ec2a:	461e      	mov	r6, r3
 803ec2c:	462c      	mov	r4, r5
 803ec2e:	4544      	cmp	r4, r8
 803ec30:	d30e      	bcc.n	803ec50 <__mdiff+0xf8>
 803ec32:	f108 0103 	add.w	r1, r8, #3
 803ec36:	1b49      	subs	r1, r1, r5
 803ec38:	f021 0103 	bic.w	r1, r1, #3
 803ec3c:	3d03      	subs	r5, #3
 803ec3e:	45a8      	cmp	r8, r5
 803ec40:	bf38      	it	cc
 803ec42:	2100      	movcc	r1, #0
 803ec44:	440b      	add	r3, r1
 803ec46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803ec4a:	b191      	cbz	r1, 803ec72 <__mdiff+0x11a>
 803ec4c:	6117      	str	r7, [r2, #16]
 803ec4e:	e79d      	b.n	803eb8c <__mdiff+0x34>
 803ec50:	f854 1b04 	ldr.w	r1, [r4], #4
 803ec54:	46e6      	mov	lr, ip
 803ec56:	0c08      	lsrs	r0, r1, #16
 803ec58:	fa1c fc81 	uxtah	ip, ip, r1
 803ec5c:	4471      	add	r1, lr
 803ec5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 803ec62:	b289      	uxth	r1, r1
 803ec64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803ec68:	f846 1b04 	str.w	r1, [r6], #4
 803ec6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 803ec70:	e7dd      	b.n	803ec2e <__mdiff+0xd6>
 803ec72:	3f01      	subs	r7, #1
 803ec74:	e7e7      	b.n	803ec46 <__mdiff+0xee>
 803ec76:	bf00      	nop
 803ec78:	08041ca9 	.word	0x08041ca9
 803ec7c:	08041cba 	.word	0x08041cba

0803ec80 <__d2b>:
 803ec80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803ec84:	460f      	mov	r7, r1
 803ec86:	2101      	movs	r1, #1
 803ec88:	ec59 8b10 	vmov	r8, r9, d0
 803ec8c:	4616      	mov	r6, r2
 803ec8e:	f7ff fcd5 	bl	803e63c <_Balloc>
 803ec92:	4604      	mov	r4, r0
 803ec94:	b930      	cbnz	r0, 803eca4 <__d2b+0x24>
 803ec96:	4602      	mov	r2, r0
 803ec98:	4b23      	ldr	r3, [pc, #140]	@ (803ed28 <__d2b+0xa8>)
 803ec9a:	4824      	ldr	r0, [pc, #144]	@ (803ed2c <__d2b+0xac>)
 803ec9c:	f240 310f 	movw	r1, #783	@ 0x30f
 803eca0:	f7fd fc42 	bl	803c528 <__assert_func>
 803eca4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803eca8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803ecac:	b10d      	cbz	r5, 803ecb2 <__d2b+0x32>
 803ecae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 803ecb2:	9301      	str	r3, [sp, #4]
 803ecb4:	f1b8 0300 	subs.w	r3, r8, #0
 803ecb8:	d023      	beq.n	803ed02 <__d2b+0x82>
 803ecba:	4668      	mov	r0, sp
 803ecbc:	9300      	str	r3, [sp, #0]
 803ecbe:	f7ff fd84 	bl	803e7ca <__lo0bits>
 803ecc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 803ecc6:	b1d0      	cbz	r0, 803ecfe <__d2b+0x7e>
 803ecc8:	f1c0 0320 	rsb	r3, r0, #32
 803eccc:	fa02 f303 	lsl.w	r3, r2, r3
 803ecd0:	430b      	orrs	r3, r1
 803ecd2:	40c2      	lsrs	r2, r0
 803ecd4:	6163      	str	r3, [r4, #20]
 803ecd6:	9201      	str	r2, [sp, #4]
 803ecd8:	9b01      	ldr	r3, [sp, #4]
 803ecda:	61a3      	str	r3, [r4, #24]
 803ecdc:	2b00      	cmp	r3, #0
 803ecde:	bf0c      	ite	eq
 803ece0:	2201      	moveq	r2, #1
 803ece2:	2202      	movne	r2, #2
 803ece4:	6122      	str	r2, [r4, #16]
 803ece6:	b1a5      	cbz	r5, 803ed12 <__d2b+0x92>
 803ece8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 803ecec:	4405      	add	r5, r0
 803ecee:	603d      	str	r5, [r7, #0]
 803ecf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 803ecf4:	6030      	str	r0, [r6, #0]
 803ecf6:	4620      	mov	r0, r4
 803ecf8:	b003      	add	sp, #12
 803ecfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803ecfe:	6161      	str	r1, [r4, #20]
 803ed00:	e7ea      	b.n	803ecd8 <__d2b+0x58>
 803ed02:	a801      	add	r0, sp, #4
 803ed04:	f7ff fd61 	bl	803e7ca <__lo0bits>
 803ed08:	9b01      	ldr	r3, [sp, #4]
 803ed0a:	6163      	str	r3, [r4, #20]
 803ed0c:	3020      	adds	r0, #32
 803ed0e:	2201      	movs	r2, #1
 803ed10:	e7e8      	b.n	803ece4 <__d2b+0x64>
 803ed12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803ed16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 803ed1a:	6038      	str	r0, [r7, #0]
 803ed1c:	6918      	ldr	r0, [r3, #16]
 803ed1e:	f7ff fd35 	bl	803e78c <__hi0bits>
 803ed22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803ed26:	e7e5      	b.n	803ecf4 <__d2b+0x74>
 803ed28:	08041ca9 	.word	0x08041ca9
 803ed2c:	08041cba 	.word	0x08041cba

0803ed30 <__ssputs_r>:
 803ed30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803ed34:	688e      	ldr	r6, [r1, #8]
 803ed36:	461f      	mov	r7, r3
 803ed38:	42be      	cmp	r6, r7
 803ed3a:	680b      	ldr	r3, [r1, #0]
 803ed3c:	4682      	mov	sl, r0
 803ed3e:	460c      	mov	r4, r1
 803ed40:	4690      	mov	r8, r2
 803ed42:	d82d      	bhi.n	803eda0 <__ssputs_r+0x70>
 803ed44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 803ed48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 803ed4c:	d026      	beq.n	803ed9c <__ssputs_r+0x6c>
 803ed4e:	6965      	ldr	r5, [r4, #20]
 803ed50:	6909      	ldr	r1, [r1, #16]
 803ed52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803ed56:	eba3 0901 	sub.w	r9, r3, r1
 803ed5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803ed5e:	1c7b      	adds	r3, r7, #1
 803ed60:	444b      	add	r3, r9
 803ed62:	106d      	asrs	r5, r5, #1
 803ed64:	429d      	cmp	r5, r3
 803ed66:	bf38      	it	cc
 803ed68:	461d      	movcc	r5, r3
 803ed6a:	0553      	lsls	r3, r2, #21
 803ed6c:	d527      	bpl.n	803edbe <__ssputs_r+0x8e>
 803ed6e:	4629      	mov	r1, r5
 803ed70:	f7fd fc34 	bl	803c5dc <_malloc_r>
 803ed74:	4606      	mov	r6, r0
 803ed76:	b360      	cbz	r0, 803edd2 <__ssputs_r+0xa2>
 803ed78:	6921      	ldr	r1, [r4, #16]
 803ed7a:	464a      	mov	r2, r9
 803ed7c:	f7fe fd52 	bl	803d824 <memcpy>
 803ed80:	89a3      	ldrh	r3, [r4, #12]
 803ed82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 803ed86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803ed8a:	81a3      	strh	r3, [r4, #12]
 803ed8c:	6126      	str	r6, [r4, #16]
 803ed8e:	6165      	str	r5, [r4, #20]
 803ed90:	444e      	add	r6, r9
 803ed92:	eba5 0509 	sub.w	r5, r5, r9
 803ed96:	6026      	str	r6, [r4, #0]
 803ed98:	60a5      	str	r5, [r4, #8]
 803ed9a:	463e      	mov	r6, r7
 803ed9c:	42be      	cmp	r6, r7
 803ed9e:	d900      	bls.n	803eda2 <__ssputs_r+0x72>
 803eda0:	463e      	mov	r6, r7
 803eda2:	6820      	ldr	r0, [r4, #0]
 803eda4:	4632      	mov	r2, r6
 803eda6:	4641      	mov	r1, r8
 803eda8:	f000 fb6a 	bl	803f480 <memmove>
 803edac:	68a3      	ldr	r3, [r4, #8]
 803edae:	1b9b      	subs	r3, r3, r6
 803edb0:	60a3      	str	r3, [r4, #8]
 803edb2:	6823      	ldr	r3, [r4, #0]
 803edb4:	4433      	add	r3, r6
 803edb6:	6023      	str	r3, [r4, #0]
 803edb8:	2000      	movs	r0, #0
 803edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803edbe:	462a      	mov	r2, r5
 803edc0:	f000 fbc0 	bl	803f544 <_realloc_r>
 803edc4:	4606      	mov	r6, r0
 803edc6:	2800      	cmp	r0, #0
 803edc8:	d1e0      	bne.n	803ed8c <__ssputs_r+0x5c>
 803edca:	6921      	ldr	r1, [r4, #16]
 803edcc:	4650      	mov	r0, sl
 803edce:	f7ff fbeb 	bl	803e5a8 <_free_r>
 803edd2:	230c      	movs	r3, #12
 803edd4:	f8ca 3000 	str.w	r3, [sl]
 803edd8:	89a3      	ldrh	r3, [r4, #12]
 803edda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803edde:	81a3      	strh	r3, [r4, #12]
 803ede0:	f04f 30ff 	mov.w	r0, #4294967295
 803ede4:	e7e9      	b.n	803edba <__ssputs_r+0x8a>
	...

0803ede8 <_svfiprintf_r>:
 803ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803edec:	4698      	mov	r8, r3
 803edee:	898b      	ldrh	r3, [r1, #12]
 803edf0:	061b      	lsls	r3, r3, #24
 803edf2:	b09d      	sub	sp, #116	@ 0x74
 803edf4:	4607      	mov	r7, r0
 803edf6:	460d      	mov	r5, r1
 803edf8:	4614      	mov	r4, r2
 803edfa:	d510      	bpl.n	803ee1e <_svfiprintf_r+0x36>
 803edfc:	690b      	ldr	r3, [r1, #16]
 803edfe:	b973      	cbnz	r3, 803ee1e <_svfiprintf_r+0x36>
 803ee00:	2140      	movs	r1, #64	@ 0x40
 803ee02:	f7fd fbeb 	bl	803c5dc <_malloc_r>
 803ee06:	6028      	str	r0, [r5, #0]
 803ee08:	6128      	str	r0, [r5, #16]
 803ee0a:	b930      	cbnz	r0, 803ee1a <_svfiprintf_r+0x32>
 803ee0c:	230c      	movs	r3, #12
 803ee0e:	603b      	str	r3, [r7, #0]
 803ee10:	f04f 30ff 	mov.w	r0, #4294967295
 803ee14:	b01d      	add	sp, #116	@ 0x74
 803ee16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ee1a:	2340      	movs	r3, #64	@ 0x40
 803ee1c:	616b      	str	r3, [r5, #20]
 803ee1e:	2300      	movs	r3, #0
 803ee20:	9309      	str	r3, [sp, #36]	@ 0x24
 803ee22:	2320      	movs	r3, #32
 803ee24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 803ee28:	f8cd 800c 	str.w	r8, [sp, #12]
 803ee2c:	2330      	movs	r3, #48	@ 0x30
 803ee2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 803efcc <_svfiprintf_r+0x1e4>
 803ee32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 803ee36:	f04f 0901 	mov.w	r9, #1
 803ee3a:	4623      	mov	r3, r4
 803ee3c:	469a      	mov	sl, r3
 803ee3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 803ee42:	b10a      	cbz	r2, 803ee48 <_svfiprintf_r+0x60>
 803ee44:	2a25      	cmp	r2, #37	@ 0x25
 803ee46:	d1f9      	bne.n	803ee3c <_svfiprintf_r+0x54>
 803ee48:	ebba 0b04 	subs.w	fp, sl, r4
 803ee4c:	d00b      	beq.n	803ee66 <_svfiprintf_r+0x7e>
 803ee4e:	465b      	mov	r3, fp
 803ee50:	4622      	mov	r2, r4
 803ee52:	4629      	mov	r1, r5
 803ee54:	4638      	mov	r0, r7
 803ee56:	f7ff ff6b 	bl	803ed30 <__ssputs_r>
 803ee5a:	3001      	adds	r0, #1
 803ee5c:	f000 80a7 	beq.w	803efae <_svfiprintf_r+0x1c6>
 803ee60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803ee62:	445a      	add	r2, fp
 803ee64:	9209      	str	r2, [sp, #36]	@ 0x24
 803ee66:	f89a 3000 	ldrb.w	r3, [sl]
 803ee6a:	2b00      	cmp	r3, #0
 803ee6c:	f000 809f 	beq.w	803efae <_svfiprintf_r+0x1c6>
 803ee70:	2300      	movs	r3, #0
 803ee72:	f04f 32ff 	mov.w	r2, #4294967295
 803ee76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803ee7a:	f10a 0a01 	add.w	sl, sl, #1
 803ee7e:	9304      	str	r3, [sp, #16]
 803ee80:	9307      	str	r3, [sp, #28]
 803ee82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 803ee86:	931a      	str	r3, [sp, #104]	@ 0x68
 803ee88:	4654      	mov	r4, sl
 803ee8a:	2205      	movs	r2, #5
 803ee8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ee90:	484e      	ldr	r0, [pc, #312]	@ (803efcc <_svfiprintf_r+0x1e4>)
 803ee92:	f7d6 fac5 	bl	8015420 <memchr>
 803ee96:	9a04      	ldr	r2, [sp, #16]
 803ee98:	b9d8      	cbnz	r0, 803eed2 <_svfiprintf_r+0xea>
 803ee9a:	06d0      	lsls	r0, r2, #27
 803ee9c:	bf44      	itt	mi
 803ee9e:	2320      	movmi	r3, #32
 803eea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803eea4:	0711      	lsls	r1, r2, #28
 803eea6:	bf44      	itt	mi
 803eea8:	232b      	movmi	r3, #43	@ 0x2b
 803eeaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803eeae:	f89a 3000 	ldrb.w	r3, [sl]
 803eeb2:	2b2a      	cmp	r3, #42	@ 0x2a
 803eeb4:	d015      	beq.n	803eee2 <_svfiprintf_r+0xfa>
 803eeb6:	9a07      	ldr	r2, [sp, #28]
 803eeb8:	4654      	mov	r4, sl
 803eeba:	2000      	movs	r0, #0
 803eebc:	f04f 0c0a 	mov.w	ip, #10
 803eec0:	4621      	mov	r1, r4
 803eec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 803eec6:	3b30      	subs	r3, #48	@ 0x30
 803eec8:	2b09      	cmp	r3, #9
 803eeca:	d94b      	bls.n	803ef64 <_svfiprintf_r+0x17c>
 803eecc:	b1b0      	cbz	r0, 803eefc <_svfiprintf_r+0x114>
 803eece:	9207      	str	r2, [sp, #28]
 803eed0:	e014      	b.n	803eefc <_svfiprintf_r+0x114>
 803eed2:	eba0 0308 	sub.w	r3, r0, r8
 803eed6:	fa09 f303 	lsl.w	r3, r9, r3
 803eeda:	4313      	orrs	r3, r2
 803eedc:	9304      	str	r3, [sp, #16]
 803eede:	46a2      	mov	sl, r4
 803eee0:	e7d2      	b.n	803ee88 <_svfiprintf_r+0xa0>
 803eee2:	9b03      	ldr	r3, [sp, #12]
 803eee4:	1d19      	adds	r1, r3, #4
 803eee6:	681b      	ldr	r3, [r3, #0]
 803eee8:	9103      	str	r1, [sp, #12]
 803eeea:	2b00      	cmp	r3, #0
 803eeec:	bfbb      	ittet	lt
 803eeee:	425b      	neglt	r3, r3
 803eef0:	f042 0202 	orrlt.w	r2, r2, #2
 803eef4:	9307      	strge	r3, [sp, #28]
 803eef6:	9307      	strlt	r3, [sp, #28]
 803eef8:	bfb8      	it	lt
 803eefa:	9204      	strlt	r2, [sp, #16]
 803eefc:	7823      	ldrb	r3, [r4, #0]
 803eefe:	2b2e      	cmp	r3, #46	@ 0x2e
 803ef00:	d10a      	bne.n	803ef18 <_svfiprintf_r+0x130>
 803ef02:	7863      	ldrb	r3, [r4, #1]
 803ef04:	2b2a      	cmp	r3, #42	@ 0x2a
 803ef06:	d132      	bne.n	803ef6e <_svfiprintf_r+0x186>
 803ef08:	9b03      	ldr	r3, [sp, #12]
 803ef0a:	1d1a      	adds	r2, r3, #4
 803ef0c:	681b      	ldr	r3, [r3, #0]
 803ef0e:	9203      	str	r2, [sp, #12]
 803ef10:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 803ef14:	3402      	adds	r4, #2
 803ef16:	9305      	str	r3, [sp, #20]
 803ef18:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 803efdc <_svfiprintf_r+0x1f4>
 803ef1c:	7821      	ldrb	r1, [r4, #0]
 803ef1e:	2203      	movs	r2, #3
 803ef20:	4650      	mov	r0, sl
 803ef22:	f7d6 fa7d 	bl	8015420 <memchr>
 803ef26:	b138      	cbz	r0, 803ef38 <_svfiprintf_r+0x150>
 803ef28:	9b04      	ldr	r3, [sp, #16]
 803ef2a:	eba0 000a 	sub.w	r0, r0, sl
 803ef2e:	2240      	movs	r2, #64	@ 0x40
 803ef30:	4082      	lsls	r2, r0
 803ef32:	4313      	orrs	r3, r2
 803ef34:	3401      	adds	r4, #1
 803ef36:	9304      	str	r3, [sp, #16]
 803ef38:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ef3c:	4824      	ldr	r0, [pc, #144]	@ (803efd0 <_svfiprintf_r+0x1e8>)
 803ef3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 803ef42:	2206      	movs	r2, #6
 803ef44:	f7d6 fa6c 	bl	8015420 <memchr>
 803ef48:	2800      	cmp	r0, #0
 803ef4a:	d036      	beq.n	803efba <_svfiprintf_r+0x1d2>
 803ef4c:	4b21      	ldr	r3, [pc, #132]	@ (803efd4 <_svfiprintf_r+0x1ec>)
 803ef4e:	bb1b      	cbnz	r3, 803ef98 <_svfiprintf_r+0x1b0>
 803ef50:	9b03      	ldr	r3, [sp, #12]
 803ef52:	3307      	adds	r3, #7
 803ef54:	f023 0307 	bic.w	r3, r3, #7
 803ef58:	3308      	adds	r3, #8
 803ef5a:	9303      	str	r3, [sp, #12]
 803ef5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803ef5e:	4433      	add	r3, r6
 803ef60:	9309      	str	r3, [sp, #36]	@ 0x24
 803ef62:	e76a      	b.n	803ee3a <_svfiprintf_r+0x52>
 803ef64:	fb0c 3202 	mla	r2, ip, r2, r3
 803ef68:	460c      	mov	r4, r1
 803ef6a:	2001      	movs	r0, #1
 803ef6c:	e7a8      	b.n	803eec0 <_svfiprintf_r+0xd8>
 803ef6e:	2300      	movs	r3, #0
 803ef70:	3401      	adds	r4, #1
 803ef72:	9305      	str	r3, [sp, #20]
 803ef74:	4619      	mov	r1, r3
 803ef76:	f04f 0c0a 	mov.w	ip, #10
 803ef7a:	4620      	mov	r0, r4
 803ef7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 803ef80:	3a30      	subs	r2, #48	@ 0x30
 803ef82:	2a09      	cmp	r2, #9
 803ef84:	d903      	bls.n	803ef8e <_svfiprintf_r+0x1a6>
 803ef86:	2b00      	cmp	r3, #0
 803ef88:	d0c6      	beq.n	803ef18 <_svfiprintf_r+0x130>
 803ef8a:	9105      	str	r1, [sp, #20]
 803ef8c:	e7c4      	b.n	803ef18 <_svfiprintf_r+0x130>
 803ef8e:	fb0c 2101 	mla	r1, ip, r1, r2
 803ef92:	4604      	mov	r4, r0
 803ef94:	2301      	movs	r3, #1
 803ef96:	e7f0      	b.n	803ef7a <_svfiprintf_r+0x192>
 803ef98:	ab03      	add	r3, sp, #12
 803ef9a:	9300      	str	r3, [sp, #0]
 803ef9c:	462a      	mov	r2, r5
 803ef9e:	4b0e      	ldr	r3, [pc, #56]	@ (803efd8 <_svfiprintf_r+0x1f0>)
 803efa0:	a904      	add	r1, sp, #16
 803efa2:	4638      	mov	r0, r7
 803efa4:	f7fd fcd8 	bl	803c958 <_printf_float>
 803efa8:	1c42      	adds	r2, r0, #1
 803efaa:	4606      	mov	r6, r0
 803efac:	d1d6      	bne.n	803ef5c <_svfiprintf_r+0x174>
 803efae:	89ab      	ldrh	r3, [r5, #12]
 803efb0:	065b      	lsls	r3, r3, #25
 803efb2:	f53f af2d 	bmi.w	803ee10 <_svfiprintf_r+0x28>
 803efb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 803efb8:	e72c      	b.n	803ee14 <_svfiprintf_r+0x2c>
 803efba:	ab03      	add	r3, sp, #12
 803efbc:	9300      	str	r3, [sp, #0]
 803efbe:	462a      	mov	r2, r5
 803efc0:	4b05      	ldr	r3, [pc, #20]	@ (803efd8 <_svfiprintf_r+0x1f0>)
 803efc2:	a904      	add	r1, sp, #16
 803efc4:	4638      	mov	r0, r7
 803efc6:	f7fd ff5f 	bl	803ce88 <_printf_i>
 803efca:	e7ed      	b.n	803efa8 <_svfiprintf_r+0x1c0>
 803efcc:	08041d13 	.word	0x08041d13
 803efd0:	08041d1d 	.word	0x08041d1d
 803efd4:	0803c959 	.word	0x0803c959
 803efd8:	0803ed31 	.word	0x0803ed31
 803efdc:	08041d19 	.word	0x08041d19

0803efe0 <__sfputc_r>:
 803efe0:	6893      	ldr	r3, [r2, #8]
 803efe2:	3b01      	subs	r3, #1
 803efe4:	2b00      	cmp	r3, #0
 803efe6:	b410      	push	{r4}
 803efe8:	6093      	str	r3, [r2, #8]
 803efea:	da08      	bge.n	803effe <__sfputc_r+0x1e>
 803efec:	6994      	ldr	r4, [r2, #24]
 803efee:	42a3      	cmp	r3, r4
 803eff0:	db01      	blt.n	803eff6 <__sfputc_r+0x16>
 803eff2:	290a      	cmp	r1, #10
 803eff4:	d103      	bne.n	803effe <__sfputc_r+0x1e>
 803eff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 803effa:	f7fe b9ae 	b.w	803d35a <__swbuf_r>
 803effe:	6813      	ldr	r3, [r2, #0]
 803f000:	1c58      	adds	r0, r3, #1
 803f002:	6010      	str	r0, [r2, #0]
 803f004:	7019      	strb	r1, [r3, #0]
 803f006:	4608      	mov	r0, r1
 803f008:	f85d 4b04 	ldr.w	r4, [sp], #4
 803f00c:	4770      	bx	lr

0803f00e <__sfputs_r>:
 803f00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f010:	4606      	mov	r6, r0
 803f012:	460f      	mov	r7, r1
 803f014:	4614      	mov	r4, r2
 803f016:	18d5      	adds	r5, r2, r3
 803f018:	42ac      	cmp	r4, r5
 803f01a:	d101      	bne.n	803f020 <__sfputs_r+0x12>
 803f01c:	2000      	movs	r0, #0
 803f01e:	e007      	b.n	803f030 <__sfputs_r+0x22>
 803f020:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f024:	463a      	mov	r2, r7
 803f026:	4630      	mov	r0, r6
 803f028:	f7ff ffda 	bl	803efe0 <__sfputc_r>
 803f02c:	1c43      	adds	r3, r0, #1
 803f02e:	d1f3      	bne.n	803f018 <__sfputs_r+0xa>
 803f030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803f034 <_vfiprintf_r>:
 803f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803f038:	460d      	mov	r5, r1
 803f03a:	b09d      	sub	sp, #116	@ 0x74
 803f03c:	4614      	mov	r4, r2
 803f03e:	4698      	mov	r8, r3
 803f040:	4606      	mov	r6, r0
 803f042:	b118      	cbz	r0, 803f04c <_vfiprintf_r+0x18>
 803f044:	6a03      	ldr	r3, [r0, #32]
 803f046:	b90b      	cbnz	r3, 803f04c <_vfiprintf_r+0x18>
 803f048:	f7fe f8c8 	bl	803d1dc <__sinit>
 803f04c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803f04e:	07d9      	lsls	r1, r3, #31
 803f050:	d405      	bmi.n	803f05e <_vfiprintf_r+0x2a>
 803f052:	89ab      	ldrh	r3, [r5, #12]
 803f054:	059a      	lsls	r2, r3, #22
 803f056:	d402      	bmi.n	803f05e <_vfiprintf_r+0x2a>
 803f058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803f05a:	f7d8 ffbb 	bl	8017fd4 <__retarget_lock_acquire_recursive>
 803f05e:	89ab      	ldrh	r3, [r5, #12]
 803f060:	071b      	lsls	r3, r3, #28
 803f062:	d501      	bpl.n	803f068 <_vfiprintf_r+0x34>
 803f064:	692b      	ldr	r3, [r5, #16]
 803f066:	b99b      	cbnz	r3, 803f090 <_vfiprintf_r+0x5c>
 803f068:	4629      	mov	r1, r5
 803f06a:	4630      	mov	r0, r6
 803f06c:	f7fe f9b4 	bl	803d3d8 <__swsetup_r>
 803f070:	b170      	cbz	r0, 803f090 <_vfiprintf_r+0x5c>
 803f072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803f074:	07dc      	lsls	r4, r3, #31
 803f076:	d504      	bpl.n	803f082 <_vfiprintf_r+0x4e>
 803f078:	f04f 30ff 	mov.w	r0, #4294967295
 803f07c:	b01d      	add	sp, #116	@ 0x74
 803f07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803f082:	89ab      	ldrh	r3, [r5, #12]
 803f084:	0598      	lsls	r0, r3, #22
 803f086:	d4f7      	bmi.n	803f078 <_vfiprintf_r+0x44>
 803f088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803f08a:	f7d8 ffaf 	bl	8017fec <__retarget_lock_release_recursive>
 803f08e:	e7f3      	b.n	803f078 <_vfiprintf_r+0x44>
 803f090:	2300      	movs	r3, #0
 803f092:	9309      	str	r3, [sp, #36]	@ 0x24
 803f094:	2320      	movs	r3, #32
 803f096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 803f09a:	f8cd 800c 	str.w	r8, [sp, #12]
 803f09e:	2330      	movs	r3, #48	@ 0x30
 803f0a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 803f250 <_vfiprintf_r+0x21c>
 803f0a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 803f0a8:	f04f 0901 	mov.w	r9, #1
 803f0ac:	4623      	mov	r3, r4
 803f0ae:	469a      	mov	sl, r3
 803f0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 803f0b4:	b10a      	cbz	r2, 803f0ba <_vfiprintf_r+0x86>
 803f0b6:	2a25      	cmp	r2, #37	@ 0x25
 803f0b8:	d1f9      	bne.n	803f0ae <_vfiprintf_r+0x7a>
 803f0ba:	ebba 0b04 	subs.w	fp, sl, r4
 803f0be:	d00b      	beq.n	803f0d8 <_vfiprintf_r+0xa4>
 803f0c0:	465b      	mov	r3, fp
 803f0c2:	4622      	mov	r2, r4
 803f0c4:	4629      	mov	r1, r5
 803f0c6:	4630      	mov	r0, r6
 803f0c8:	f7ff ffa1 	bl	803f00e <__sfputs_r>
 803f0cc:	3001      	adds	r0, #1
 803f0ce:	f000 80a7 	beq.w	803f220 <_vfiprintf_r+0x1ec>
 803f0d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 803f0d4:	445a      	add	r2, fp
 803f0d6:	9209      	str	r2, [sp, #36]	@ 0x24
 803f0d8:	f89a 3000 	ldrb.w	r3, [sl]
 803f0dc:	2b00      	cmp	r3, #0
 803f0de:	f000 809f 	beq.w	803f220 <_vfiprintf_r+0x1ec>
 803f0e2:	2300      	movs	r3, #0
 803f0e4:	f04f 32ff 	mov.w	r2, #4294967295
 803f0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803f0ec:	f10a 0a01 	add.w	sl, sl, #1
 803f0f0:	9304      	str	r3, [sp, #16]
 803f0f2:	9307      	str	r3, [sp, #28]
 803f0f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 803f0f8:	931a      	str	r3, [sp, #104]	@ 0x68
 803f0fa:	4654      	mov	r4, sl
 803f0fc:	2205      	movs	r2, #5
 803f0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f102:	4853      	ldr	r0, [pc, #332]	@ (803f250 <_vfiprintf_r+0x21c>)
 803f104:	f7d6 f98c 	bl	8015420 <memchr>
 803f108:	9a04      	ldr	r2, [sp, #16]
 803f10a:	b9d8      	cbnz	r0, 803f144 <_vfiprintf_r+0x110>
 803f10c:	06d1      	lsls	r1, r2, #27
 803f10e:	bf44      	itt	mi
 803f110:	2320      	movmi	r3, #32
 803f112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803f116:	0713      	lsls	r3, r2, #28
 803f118:	bf44      	itt	mi
 803f11a:	232b      	movmi	r3, #43	@ 0x2b
 803f11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 803f120:	f89a 3000 	ldrb.w	r3, [sl]
 803f124:	2b2a      	cmp	r3, #42	@ 0x2a
 803f126:	d015      	beq.n	803f154 <_vfiprintf_r+0x120>
 803f128:	9a07      	ldr	r2, [sp, #28]
 803f12a:	4654      	mov	r4, sl
 803f12c:	2000      	movs	r0, #0
 803f12e:	f04f 0c0a 	mov.w	ip, #10
 803f132:	4621      	mov	r1, r4
 803f134:	f811 3b01 	ldrb.w	r3, [r1], #1
 803f138:	3b30      	subs	r3, #48	@ 0x30
 803f13a:	2b09      	cmp	r3, #9
 803f13c:	d94b      	bls.n	803f1d6 <_vfiprintf_r+0x1a2>
 803f13e:	b1b0      	cbz	r0, 803f16e <_vfiprintf_r+0x13a>
 803f140:	9207      	str	r2, [sp, #28]
 803f142:	e014      	b.n	803f16e <_vfiprintf_r+0x13a>
 803f144:	eba0 0308 	sub.w	r3, r0, r8
 803f148:	fa09 f303 	lsl.w	r3, r9, r3
 803f14c:	4313      	orrs	r3, r2
 803f14e:	9304      	str	r3, [sp, #16]
 803f150:	46a2      	mov	sl, r4
 803f152:	e7d2      	b.n	803f0fa <_vfiprintf_r+0xc6>
 803f154:	9b03      	ldr	r3, [sp, #12]
 803f156:	1d19      	adds	r1, r3, #4
 803f158:	681b      	ldr	r3, [r3, #0]
 803f15a:	9103      	str	r1, [sp, #12]
 803f15c:	2b00      	cmp	r3, #0
 803f15e:	bfbb      	ittet	lt
 803f160:	425b      	neglt	r3, r3
 803f162:	f042 0202 	orrlt.w	r2, r2, #2
 803f166:	9307      	strge	r3, [sp, #28]
 803f168:	9307      	strlt	r3, [sp, #28]
 803f16a:	bfb8      	it	lt
 803f16c:	9204      	strlt	r2, [sp, #16]
 803f16e:	7823      	ldrb	r3, [r4, #0]
 803f170:	2b2e      	cmp	r3, #46	@ 0x2e
 803f172:	d10a      	bne.n	803f18a <_vfiprintf_r+0x156>
 803f174:	7863      	ldrb	r3, [r4, #1]
 803f176:	2b2a      	cmp	r3, #42	@ 0x2a
 803f178:	d132      	bne.n	803f1e0 <_vfiprintf_r+0x1ac>
 803f17a:	9b03      	ldr	r3, [sp, #12]
 803f17c:	1d1a      	adds	r2, r3, #4
 803f17e:	681b      	ldr	r3, [r3, #0]
 803f180:	9203      	str	r2, [sp, #12]
 803f182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 803f186:	3402      	adds	r4, #2
 803f188:	9305      	str	r3, [sp, #20]
 803f18a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 803f260 <_vfiprintf_r+0x22c>
 803f18e:	7821      	ldrb	r1, [r4, #0]
 803f190:	2203      	movs	r2, #3
 803f192:	4650      	mov	r0, sl
 803f194:	f7d6 f944 	bl	8015420 <memchr>
 803f198:	b138      	cbz	r0, 803f1aa <_vfiprintf_r+0x176>
 803f19a:	9b04      	ldr	r3, [sp, #16]
 803f19c:	eba0 000a 	sub.w	r0, r0, sl
 803f1a0:	2240      	movs	r2, #64	@ 0x40
 803f1a2:	4082      	lsls	r2, r0
 803f1a4:	4313      	orrs	r3, r2
 803f1a6:	3401      	adds	r4, #1
 803f1a8:	9304      	str	r3, [sp, #16]
 803f1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 803f1ae:	4829      	ldr	r0, [pc, #164]	@ (803f254 <_vfiprintf_r+0x220>)
 803f1b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 803f1b4:	2206      	movs	r2, #6
 803f1b6:	f7d6 f933 	bl	8015420 <memchr>
 803f1ba:	2800      	cmp	r0, #0
 803f1bc:	d03f      	beq.n	803f23e <_vfiprintf_r+0x20a>
 803f1be:	4b26      	ldr	r3, [pc, #152]	@ (803f258 <_vfiprintf_r+0x224>)
 803f1c0:	bb1b      	cbnz	r3, 803f20a <_vfiprintf_r+0x1d6>
 803f1c2:	9b03      	ldr	r3, [sp, #12]
 803f1c4:	3307      	adds	r3, #7
 803f1c6:	f023 0307 	bic.w	r3, r3, #7
 803f1ca:	3308      	adds	r3, #8
 803f1cc:	9303      	str	r3, [sp, #12]
 803f1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 803f1d0:	443b      	add	r3, r7
 803f1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 803f1d4:	e76a      	b.n	803f0ac <_vfiprintf_r+0x78>
 803f1d6:	fb0c 3202 	mla	r2, ip, r2, r3
 803f1da:	460c      	mov	r4, r1
 803f1dc:	2001      	movs	r0, #1
 803f1de:	e7a8      	b.n	803f132 <_vfiprintf_r+0xfe>
 803f1e0:	2300      	movs	r3, #0
 803f1e2:	3401      	adds	r4, #1
 803f1e4:	9305      	str	r3, [sp, #20]
 803f1e6:	4619      	mov	r1, r3
 803f1e8:	f04f 0c0a 	mov.w	ip, #10
 803f1ec:	4620      	mov	r0, r4
 803f1ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 803f1f2:	3a30      	subs	r2, #48	@ 0x30
 803f1f4:	2a09      	cmp	r2, #9
 803f1f6:	d903      	bls.n	803f200 <_vfiprintf_r+0x1cc>
 803f1f8:	2b00      	cmp	r3, #0
 803f1fa:	d0c6      	beq.n	803f18a <_vfiprintf_r+0x156>
 803f1fc:	9105      	str	r1, [sp, #20]
 803f1fe:	e7c4      	b.n	803f18a <_vfiprintf_r+0x156>
 803f200:	fb0c 2101 	mla	r1, ip, r1, r2
 803f204:	4604      	mov	r4, r0
 803f206:	2301      	movs	r3, #1
 803f208:	e7f0      	b.n	803f1ec <_vfiprintf_r+0x1b8>
 803f20a:	ab03      	add	r3, sp, #12
 803f20c:	9300      	str	r3, [sp, #0]
 803f20e:	462a      	mov	r2, r5
 803f210:	4b12      	ldr	r3, [pc, #72]	@ (803f25c <_vfiprintf_r+0x228>)
 803f212:	a904      	add	r1, sp, #16
 803f214:	4630      	mov	r0, r6
 803f216:	f7fd fb9f 	bl	803c958 <_printf_float>
 803f21a:	4607      	mov	r7, r0
 803f21c:	1c78      	adds	r0, r7, #1
 803f21e:	d1d6      	bne.n	803f1ce <_vfiprintf_r+0x19a>
 803f220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 803f222:	07d9      	lsls	r1, r3, #31
 803f224:	d405      	bmi.n	803f232 <_vfiprintf_r+0x1fe>
 803f226:	89ab      	ldrh	r3, [r5, #12]
 803f228:	059a      	lsls	r2, r3, #22
 803f22a:	d402      	bmi.n	803f232 <_vfiprintf_r+0x1fe>
 803f22c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 803f22e:	f7d8 fedd 	bl	8017fec <__retarget_lock_release_recursive>
 803f232:	89ab      	ldrh	r3, [r5, #12]
 803f234:	065b      	lsls	r3, r3, #25
 803f236:	f53f af1f 	bmi.w	803f078 <_vfiprintf_r+0x44>
 803f23a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 803f23c:	e71e      	b.n	803f07c <_vfiprintf_r+0x48>
 803f23e:	ab03      	add	r3, sp, #12
 803f240:	9300      	str	r3, [sp, #0]
 803f242:	462a      	mov	r2, r5
 803f244:	4b05      	ldr	r3, [pc, #20]	@ (803f25c <_vfiprintf_r+0x228>)
 803f246:	a904      	add	r1, sp, #16
 803f248:	4630      	mov	r0, r6
 803f24a:	f7fd fe1d 	bl	803ce88 <_printf_i>
 803f24e:	e7e4      	b.n	803f21a <_vfiprintf_r+0x1e6>
 803f250:	08041d13 	.word	0x08041d13
 803f254:	08041d1d 	.word	0x08041d1d
 803f258:	0803c959 	.word	0x0803c959
 803f25c:	0803f00f 	.word	0x0803f00f
 803f260:	08041d19 	.word	0x08041d19

0803f264 <__sflush_r>:
 803f264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 803f268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803f26c:	0716      	lsls	r6, r2, #28
 803f26e:	4605      	mov	r5, r0
 803f270:	460c      	mov	r4, r1
 803f272:	d454      	bmi.n	803f31e <__sflush_r+0xba>
 803f274:	684b      	ldr	r3, [r1, #4]
 803f276:	2b00      	cmp	r3, #0
 803f278:	dc02      	bgt.n	803f280 <__sflush_r+0x1c>
 803f27a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 803f27c:	2b00      	cmp	r3, #0
 803f27e:	dd48      	ble.n	803f312 <__sflush_r+0xae>
 803f280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 803f282:	2e00      	cmp	r6, #0
 803f284:	d045      	beq.n	803f312 <__sflush_r+0xae>
 803f286:	2300      	movs	r3, #0
 803f288:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 803f28c:	682f      	ldr	r7, [r5, #0]
 803f28e:	6a21      	ldr	r1, [r4, #32]
 803f290:	602b      	str	r3, [r5, #0]
 803f292:	d030      	beq.n	803f2f6 <__sflush_r+0x92>
 803f294:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 803f296:	89a3      	ldrh	r3, [r4, #12]
 803f298:	0759      	lsls	r1, r3, #29
 803f29a:	d505      	bpl.n	803f2a8 <__sflush_r+0x44>
 803f29c:	6863      	ldr	r3, [r4, #4]
 803f29e:	1ad2      	subs	r2, r2, r3
 803f2a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 803f2a2:	b10b      	cbz	r3, 803f2a8 <__sflush_r+0x44>
 803f2a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 803f2a6:	1ad2      	subs	r2, r2, r3
 803f2a8:	2300      	movs	r3, #0
 803f2aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 803f2ac:	6a21      	ldr	r1, [r4, #32]
 803f2ae:	4628      	mov	r0, r5
 803f2b0:	47b0      	blx	r6
 803f2b2:	1c43      	adds	r3, r0, #1
 803f2b4:	89a3      	ldrh	r3, [r4, #12]
 803f2b6:	d106      	bne.n	803f2c6 <__sflush_r+0x62>
 803f2b8:	6829      	ldr	r1, [r5, #0]
 803f2ba:	291d      	cmp	r1, #29
 803f2bc:	d82b      	bhi.n	803f316 <__sflush_r+0xb2>
 803f2be:	4a2a      	ldr	r2, [pc, #168]	@ (803f368 <__sflush_r+0x104>)
 803f2c0:	40ca      	lsrs	r2, r1
 803f2c2:	07d6      	lsls	r6, r2, #31
 803f2c4:	d527      	bpl.n	803f316 <__sflush_r+0xb2>
 803f2c6:	2200      	movs	r2, #0
 803f2c8:	6062      	str	r2, [r4, #4]
 803f2ca:	04d9      	lsls	r1, r3, #19
 803f2cc:	6922      	ldr	r2, [r4, #16]
 803f2ce:	6022      	str	r2, [r4, #0]
 803f2d0:	d504      	bpl.n	803f2dc <__sflush_r+0x78>
 803f2d2:	1c42      	adds	r2, r0, #1
 803f2d4:	d101      	bne.n	803f2da <__sflush_r+0x76>
 803f2d6:	682b      	ldr	r3, [r5, #0]
 803f2d8:	b903      	cbnz	r3, 803f2dc <__sflush_r+0x78>
 803f2da:	6560      	str	r0, [r4, #84]	@ 0x54
 803f2dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 803f2de:	602f      	str	r7, [r5, #0]
 803f2e0:	b1b9      	cbz	r1, 803f312 <__sflush_r+0xae>
 803f2e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 803f2e6:	4299      	cmp	r1, r3
 803f2e8:	d002      	beq.n	803f2f0 <__sflush_r+0x8c>
 803f2ea:	4628      	mov	r0, r5
 803f2ec:	f7ff f95c 	bl	803e5a8 <_free_r>
 803f2f0:	2300      	movs	r3, #0
 803f2f2:	6363      	str	r3, [r4, #52]	@ 0x34
 803f2f4:	e00d      	b.n	803f312 <__sflush_r+0xae>
 803f2f6:	2301      	movs	r3, #1
 803f2f8:	4628      	mov	r0, r5
 803f2fa:	47b0      	blx	r6
 803f2fc:	4602      	mov	r2, r0
 803f2fe:	1c50      	adds	r0, r2, #1
 803f300:	d1c9      	bne.n	803f296 <__sflush_r+0x32>
 803f302:	682b      	ldr	r3, [r5, #0]
 803f304:	2b00      	cmp	r3, #0
 803f306:	d0c6      	beq.n	803f296 <__sflush_r+0x32>
 803f308:	2b1d      	cmp	r3, #29
 803f30a:	d001      	beq.n	803f310 <__sflush_r+0xac>
 803f30c:	2b16      	cmp	r3, #22
 803f30e:	d11e      	bne.n	803f34e <__sflush_r+0xea>
 803f310:	602f      	str	r7, [r5, #0]
 803f312:	2000      	movs	r0, #0
 803f314:	e022      	b.n	803f35c <__sflush_r+0xf8>
 803f316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803f31a:	b21b      	sxth	r3, r3
 803f31c:	e01b      	b.n	803f356 <__sflush_r+0xf2>
 803f31e:	690f      	ldr	r7, [r1, #16]
 803f320:	2f00      	cmp	r7, #0
 803f322:	d0f6      	beq.n	803f312 <__sflush_r+0xae>
 803f324:	0793      	lsls	r3, r2, #30
 803f326:	680e      	ldr	r6, [r1, #0]
 803f328:	bf08      	it	eq
 803f32a:	694b      	ldreq	r3, [r1, #20]
 803f32c:	600f      	str	r7, [r1, #0]
 803f32e:	bf18      	it	ne
 803f330:	2300      	movne	r3, #0
 803f332:	eba6 0807 	sub.w	r8, r6, r7
 803f336:	608b      	str	r3, [r1, #8]
 803f338:	f1b8 0f00 	cmp.w	r8, #0
 803f33c:	dde9      	ble.n	803f312 <__sflush_r+0xae>
 803f33e:	6a21      	ldr	r1, [r4, #32]
 803f340:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 803f342:	4643      	mov	r3, r8
 803f344:	463a      	mov	r2, r7
 803f346:	4628      	mov	r0, r5
 803f348:	47b0      	blx	r6
 803f34a:	2800      	cmp	r0, #0
 803f34c:	dc08      	bgt.n	803f360 <__sflush_r+0xfc>
 803f34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803f352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 803f356:	81a3      	strh	r3, [r4, #12]
 803f358:	f04f 30ff 	mov.w	r0, #4294967295
 803f35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803f360:	4407      	add	r7, r0
 803f362:	eba8 0800 	sub.w	r8, r8, r0
 803f366:	e7e7      	b.n	803f338 <__sflush_r+0xd4>
 803f368:	20400001 	.word	0x20400001

0803f36c <_fflush_r>:
 803f36c:	b538      	push	{r3, r4, r5, lr}
 803f36e:	690b      	ldr	r3, [r1, #16]
 803f370:	4605      	mov	r5, r0
 803f372:	460c      	mov	r4, r1
 803f374:	b913      	cbnz	r3, 803f37c <_fflush_r+0x10>
 803f376:	2500      	movs	r5, #0
 803f378:	4628      	mov	r0, r5
 803f37a:	bd38      	pop	{r3, r4, r5, pc}
 803f37c:	b118      	cbz	r0, 803f386 <_fflush_r+0x1a>
 803f37e:	6a03      	ldr	r3, [r0, #32]
 803f380:	b90b      	cbnz	r3, 803f386 <_fflush_r+0x1a>
 803f382:	f7fd ff2b 	bl	803d1dc <__sinit>
 803f386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803f38a:	2b00      	cmp	r3, #0
 803f38c:	d0f3      	beq.n	803f376 <_fflush_r+0xa>
 803f38e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 803f390:	07d0      	lsls	r0, r2, #31
 803f392:	d404      	bmi.n	803f39e <_fflush_r+0x32>
 803f394:	0599      	lsls	r1, r3, #22
 803f396:	d402      	bmi.n	803f39e <_fflush_r+0x32>
 803f398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803f39a:	f7d8 fe1b 	bl	8017fd4 <__retarget_lock_acquire_recursive>
 803f39e:	4628      	mov	r0, r5
 803f3a0:	4621      	mov	r1, r4
 803f3a2:	f7ff ff5f 	bl	803f264 <__sflush_r>
 803f3a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 803f3a8:	07da      	lsls	r2, r3, #31
 803f3aa:	4605      	mov	r5, r0
 803f3ac:	d4e4      	bmi.n	803f378 <_fflush_r+0xc>
 803f3ae:	89a3      	ldrh	r3, [r4, #12]
 803f3b0:	059b      	lsls	r3, r3, #22
 803f3b2:	d4e1      	bmi.n	803f378 <_fflush_r+0xc>
 803f3b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 803f3b6:	f7d8 fe19 	bl	8017fec <__retarget_lock_release_recursive>
 803f3ba:	e7dd      	b.n	803f378 <_fflush_r+0xc>

0803f3bc <__swhatbuf_r>:
 803f3bc:	b570      	push	{r4, r5, r6, lr}
 803f3be:	460c      	mov	r4, r1
 803f3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803f3c4:	2900      	cmp	r1, #0
 803f3c6:	b096      	sub	sp, #88	@ 0x58
 803f3c8:	4615      	mov	r5, r2
 803f3ca:	461e      	mov	r6, r3
 803f3cc:	da0d      	bge.n	803f3ea <__swhatbuf_r+0x2e>
 803f3ce:	89a3      	ldrh	r3, [r4, #12]
 803f3d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 803f3d4:	f04f 0100 	mov.w	r1, #0
 803f3d8:	bf14      	ite	ne
 803f3da:	2340      	movne	r3, #64	@ 0x40
 803f3dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 803f3e0:	2000      	movs	r0, #0
 803f3e2:	6031      	str	r1, [r6, #0]
 803f3e4:	602b      	str	r3, [r5, #0]
 803f3e6:	b016      	add	sp, #88	@ 0x58
 803f3e8:	bd70      	pop	{r4, r5, r6, pc}
 803f3ea:	466a      	mov	r2, sp
 803f3ec:	f000 f862 	bl	803f4b4 <_fstat_r>
 803f3f0:	2800      	cmp	r0, #0
 803f3f2:	dbec      	blt.n	803f3ce <__swhatbuf_r+0x12>
 803f3f4:	9901      	ldr	r1, [sp, #4]
 803f3f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 803f3fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 803f3fe:	4259      	negs	r1, r3
 803f400:	4159      	adcs	r1, r3
 803f402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803f406:	e7eb      	b.n	803f3e0 <__swhatbuf_r+0x24>

0803f408 <__smakebuf_r>:
 803f408:	898b      	ldrh	r3, [r1, #12]
 803f40a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803f40c:	079d      	lsls	r5, r3, #30
 803f40e:	4606      	mov	r6, r0
 803f410:	460c      	mov	r4, r1
 803f412:	d507      	bpl.n	803f424 <__smakebuf_r+0x1c>
 803f414:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 803f418:	6023      	str	r3, [r4, #0]
 803f41a:	6123      	str	r3, [r4, #16]
 803f41c:	2301      	movs	r3, #1
 803f41e:	6163      	str	r3, [r4, #20]
 803f420:	b003      	add	sp, #12
 803f422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803f424:	ab01      	add	r3, sp, #4
 803f426:	466a      	mov	r2, sp
 803f428:	f7ff ffc8 	bl	803f3bc <__swhatbuf_r>
 803f42c:	9f00      	ldr	r7, [sp, #0]
 803f42e:	4605      	mov	r5, r0
 803f430:	4639      	mov	r1, r7
 803f432:	4630      	mov	r0, r6
 803f434:	f7fd f8d2 	bl	803c5dc <_malloc_r>
 803f438:	b948      	cbnz	r0, 803f44e <__smakebuf_r+0x46>
 803f43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803f43e:	059a      	lsls	r2, r3, #22
 803f440:	d4ee      	bmi.n	803f420 <__smakebuf_r+0x18>
 803f442:	f023 0303 	bic.w	r3, r3, #3
 803f446:	f043 0302 	orr.w	r3, r3, #2
 803f44a:	81a3      	strh	r3, [r4, #12]
 803f44c:	e7e2      	b.n	803f414 <__smakebuf_r+0xc>
 803f44e:	89a3      	ldrh	r3, [r4, #12]
 803f450:	6020      	str	r0, [r4, #0]
 803f452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803f456:	81a3      	strh	r3, [r4, #12]
 803f458:	9b01      	ldr	r3, [sp, #4]
 803f45a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 803f45e:	b15b      	cbz	r3, 803f478 <__smakebuf_r+0x70>
 803f460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803f464:	4630      	mov	r0, r6
 803f466:	f000 f837 	bl	803f4d8 <_isatty_r>
 803f46a:	b128      	cbz	r0, 803f478 <__smakebuf_r+0x70>
 803f46c:	89a3      	ldrh	r3, [r4, #12]
 803f46e:	f023 0303 	bic.w	r3, r3, #3
 803f472:	f043 0301 	orr.w	r3, r3, #1
 803f476:	81a3      	strh	r3, [r4, #12]
 803f478:	89a3      	ldrh	r3, [r4, #12]
 803f47a:	431d      	orrs	r5, r3
 803f47c:	81a5      	strh	r5, [r4, #12]
 803f47e:	e7cf      	b.n	803f420 <__smakebuf_r+0x18>

0803f480 <memmove>:
 803f480:	4288      	cmp	r0, r1
 803f482:	b510      	push	{r4, lr}
 803f484:	eb01 0402 	add.w	r4, r1, r2
 803f488:	d902      	bls.n	803f490 <memmove+0x10>
 803f48a:	4284      	cmp	r4, r0
 803f48c:	4623      	mov	r3, r4
 803f48e:	d807      	bhi.n	803f4a0 <memmove+0x20>
 803f490:	1e43      	subs	r3, r0, #1
 803f492:	42a1      	cmp	r1, r4
 803f494:	d008      	beq.n	803f4a8 <memmove+0x28>
 803f496:	f811 2b01 	ldrb.w	r2, [r1], #1
 803f49a:	f803 2f01 	strb.w	r2, [r3, #1]!
 803f49e:	e7f8      	b.n	803f492 <memmove+0x12>
 803f4a0:	4402      	add	r2, r0
 803f4a2:	4601      	mov	r1, r0
 803f4a4:	428a      	cmp	r2, r1
 803f4a6:	d100      	bne.n	803f4aa <memmove+0x2a>
 803f4a8:	bd10      	pop	{r4, pc}
 803f4aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803f4ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803f4b2:	e7f7      	b.n	803f4a4 <memmove+0x24>

0803f4b4 <_fstat_r>:
 803f4b4:	b538      	push	{r3, r4, r5, lr}
 803f4b6:	4d07      	ldr	r5, [pc, #28]	@ (803f4d4 <_fstat_r+0x20>)
 803f4b8:	2300      	movs	r3, #0
 803f4ba:	4604      	mov	r4, r0
 803f4bc:	4608      	mov	r0, r1
 803f4be:	4611      	mov	r1, r2
 803f4c0:	602b      	str	r3, [r5, #0]
 803f4c2:	f7d8 fcde 	bl	8017e82 <_fstat>
 803f4c6:	1c43      	adds	r3, r0, #1
 803f4c8:	d102      	bne.n	803f4d0 <_fstat_r+0x1c>
 803f4ca:	682b      	ldr	r3, [r5, #0]
 803f4cc:	b103      	cbz	r3, 803f4d0 <_fstat_r+0x1c>
 803f4ce:	6023      	str	r3, [r4, #0]
 803f4d0:	bd38      	pop	{r3, r4, r5, pc}
 803f4d2:	bf00      	nop
 803f4d4:	2000bad0 	.word	0x2000bad0

0803f4d8 <_isatty_r>:
 803f4d8:	b538      	push	{r3, r4, r5, lr}
 803f4da:	4d06      	ldr	r5, [pc, #24]	@ (803f4f4 <_isatty_r+0x1c>)
 803f4dc:	2300      	movs	r3, #0
 803f4de:	4604      	mov	r4, r0
 803f4e0:	4608      	mov	r0, r1
 803f4e2:	602b      	str	r3, [r5, #0]
 803f4e4:	f7d8 fcd2 	bl	8017e8c <_isatty>
 803f4e8:	1c43      	adds	r3, r0, #1
 803f4ea:	d102      	bne.n	803f4f2 <_isatty_r+0x1a>
 803f4ec:	682b      	ldr	r3, [r5, #0]
 803f4ee:	b103      	cbz	r3, 803f4f2 <_isatty_r+0x1a>
 803f4f0:	6023      	str	r3, [r4, #0]
 803f4f2:	bd38      	pop	{r3, r4, r5, pc}
 803f4f4:	2000bad0 	.word	0x2000bad0

0803f4f8 <_calloc_r>:
 803f4f8:	b570      	push	{r4, r5, r6, lr}
 803f4fa:	fba1 5402 	umull	r5, r4, r1, r2
 803f4fe:	b934      	cbnz	r4, 803f50e <_calloc_r+0x16>
 803f500:	4629      	mov	r1, r5
 803f502:	f7fd f86b 	bl	803c5dc <_malloc_r>
 803f506:	4606      	mov	r6, r0
 803f508:	b928      	cbnz	r0, 803f516 <_calloc_r+0x1e>
 803f50a:	4630      	mov	r0, r6
 803f50c:	bd70      	pop	{r4, r5, r6, pc}
 803f50e:	220c      	movs	r2, #12
 803f510:	6002      	str	r2, [r0, #0]
 803f512:	2600      	movs	r6, #0
 803f514:	e7f9      	b.n	803f50a <_calloc_r+0x12>
 803f516:	462a      	mov	r2, r5
 803f518:	4621      	mov	r1, r4
 803f51a:	f7fd ffc3 	bl	803d4a4 <memset>
 803f51e:	e7f4      	b.n	803f50a <_calloc_r+0x12>

0803f520 <__ascii_mbtowc>:
 803f520:	b082      	sub	sp, #8
 803f522:	b901      	cbnz	r1, 803f526 <__ascii_mbtowc+0x6>
 803f524:	a901      	add	r1, sp, #4
 803f526:	b142      	cbz	r2, 803f53a <__ascii_mbtowc+0x1a>
 803f528:	b14b      	cbz	r3, 803f53e <__ascii_mbtowc+0x1e>
 803f52a:	7813      	ldrb	r3, [r2, #0]
 803f52c:	600b      	str	r3, [r1, #0]
 803f52e:	7812      	ldrb	r2, [r2, #0]
 803f530:	1e10      	subs	r0, r2, #0
 803f532:	bf18      	it	ne
 803f534:	2001      	movne	r0, #1
 803f536:	b002      	add	sp, #8
 803f538:	4770      	bx	lr
 803f53a:	4610      	mov	r0, r2
 803f53c:	e7fb      	b.n	803f536 <__ascii_mbtowc+0x16>
 803f53e:	f06f 0001 	mvn.w	r0, #1
 803f542:	e7f8      	b.n	803f536 <__ascii_mbtowc+0x16>

0803f544 <_realloc_r>:
 803f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803f548:	4607      	mov	r7, r0
 803f54a:	4614      	mov	r4, r2
 803f54c:	460d      	mov	r5, r1
 803f54e:	b921      	cbnz	r1, 803f55a <_realloc_r+0x16>
 803f550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803f554:	4611      	mov	r1, r2
 803f556:	f7fd b841 	b.w	803c5dc <_malloc_r>
 803f55a:	b92a      	cbnz	r2, 803f568 <_realloc_r+0x24>
 803f55c:	f7ff f824 	bl	803e5a8 <_free_r>
 803f560:	4625      	mov	r5, r4
 803f562:	4628      	mov	r0, r5
 803f564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803f568:	f000 f827 	bl	803f5ba <_malloc_usable_size_r>
 803f56c:	4284      	cmp	r4, r0
 803f56e:	4606      	mov	r6, r0
 803f570:	d802      	bhi.n	803f578 <_realloc_r+0x34>
 803f572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 803f576:	d8f4      	bhi.n	803f562 <_realloc_r+0x1e>
 803f578:	4621      	mov	r1, r4
 803f57a:	4638      	mov	r0, r7
 803f57c:	f7fd f82e 	bl	803c5dc <_malloc_r>
 803f580:	4680      	mov	r8, r0
 803f582:	b908      	cbnz	r0, 803f588 <_realloc_r+0x44>
 803f584:	4645      	mov	r5, r8
 803f586:	e7ec      	b.n	803f562 <_realloc_r+0x1e>
 803f588:	42b4      	cmp	r4, r6
 803f58a:	4622      	mov	r2, r4
 803f58c:	4629      	mov	r1, r5
 803f58e:	bf28      	it	cs
 803f590:	4632      	movcs	r2, r6
 803f592:	f7fe f947 	bl	803d824 <memcpy>
 803f596:	4629      	mov	r1, r5
 803f598:	4638      	mov	r0, r7
 803f59a:	f7ff f805 	bl	803e5a8 <_free_r>
 803f59e:	e7f1      	b.n	803f584 <_realloc_r+0x40>

0803f5a0 <__ascii_wctomb>:
 803f5a0:	4603      	mov	r3, r0
 803f5a2:	4608      	mov	r0, r1
 803f5a4:	b141      	cbz	r1, 803f5b8 <__ascii_wctomb+0x18>
 803f5a6:	2aff      	cmp	r2, #255	@ 0xff
 803f5a8:	d904      	bls.n	803f5b4 <__ascii_wctomb+0x14>
 803f5aa:	228a      	movs	r2, #138	@ 0x8a
 803f5ac:	601a      	str	r2, [r3, #0]
 803f5ae:	f04f 30ff 	mov.w	r0, #4294967295
 803f5b2:	4770      	bx	lr
 803f5b4:	700a      	strb	r2, [r1, #0]
 803f5b6:	2001      	movs	r0, #1
 803f5b8:	4770      	bx	lr

0803f5ba <_malloc_usable_size_r>:
 803f5ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803f5be:	1f18      	subs	r0, r3, #4
 803f5c0:	2b00      	cmp	r3, #0
 803f5c2:	bfbc      	itt	lt
 803f5c4:	580b      	ldrlt	r3, [r1, r0]
 803f5c6:	18c0      	addlt	r0, r0, r3
 803f5c8:	4770      	bx	lr
	...

0803f5cc <_init>:
 803f5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f5ce:	bf00      	nop
 803f5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f5d2:	bc08      	pop	{r3}
 803f5d4:	469e      	mov	lr, r3
 803f5d6:	4770      	bx	lr

0803f5d8 <_fini>:
 803f5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f5da:	bf00      	nop
 803f5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f5de:	bc08      	pop	{r3}
 803f5e0:	469e      	mov	lr, r3
 803f5e2:	4770      	bx	lr
